!function(e){var t={};function r(n){if(t[n])return t[n].exports;var i=t[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)r.d(n,i,function(t){return e[t]}.bind(null,i));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=214)}([function(e,t,r){var n=r(2),i=n.Buffer;function o(e,t){for(var r in e)t[r]=e[r]}function a(e,t,r){return i(e,t,r)}i.from&&i.alloc&&i.allocUnsafe&&i.allocUnsafeSlow?e.exports=n:(o(n,t),t.Buffer=a),o(i,a),a.from=function(e,t,r){if("number"==typeof e)throw new TypeError("Argument must not be a number");return i(e,t,r)},a.alloc=function(e,t,r){if("number"!=typeof e)throw new TypeError("Argument must be a number");var n=i(e);return void 0!==t?"string"==typeof r?n.fill(t,r):n.fill(t):n.fill(0),n},a.allocUnsafe=function(e){if("number"!=typeof e)throw new TypeError("Argument must be a number");return i(e)},a.allocUnsafeSlow=function(e){if("number"!=typeof e)throw new TypeError("Argument must be a number");return n.SlowBuffer(e)}},function(e,t){"function"==typeof Object.create?e.exports=function(e,t){e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}})}:e.exports=function(e,t){e.super_=t;var r=function(){};r.prototype=t.prototype,e.prototype=new r,e.prototype.constructor=e}},function(e,t,r){"use strict";(function(e){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
var n=r(99),i=r(100),o=r(45);function a(){return f.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function s(e,t){if(a()<t)throw new RangeError("Invalid typed array length");return f.TYPED_ARRAY_SUPPORT?(e=new Uint8Array(t)).__proto__=f.prototype:(null===e&&(e=new f(t)),e.length=t),e}function f(e,t,r){if(!(f.TYPED_ARRAY_SUPPORT||this instanceof f))return new f(e,t,r);if("number"==typeof e){if("string"==typeof t)throw new Error("If encoding is specified then the first argument must be a string");return h(this,e)}return c(this,e,t,r)}function c(e,t,r,n){if("number"==typeof t)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&t instanceof ArrayBuffer?function(e,t,r,n){if(t.byteLength,r<0||t.byteLength<r)throw new RangeError("'offset' is out of bounds");if(t.byteLength<r+(n||0))throw new RangeError("'length' is out of bounds");t=void 0===r&&void 0===n?new Uint8Array(t):void 0===n?new Uint8Array(t,r):new Uint8Array(t,r,n);f.TYPED_ARRAY_SUPPORT?(e=t).__proto__=f.prototype:e=d(e,t);return e}(e,t,r,n):"string"==typeof t?function(e,t,r){"string"==typeof r&&""!==r||(r="utf8");if(!f.isEncoding(r))throw new TypeError('"encoding" must be a valid string encoding');var n=0|p(t,r),i=(e=s(e,n)).write(t,r);i!==n&&(e=e.slice(0,i));return e}(e,t,r):function(e,t){if(f.isBuffer(t)){var r=0|l(t.length);return 0===(e=s(e,r)).length?e:(t.copy(e,0,0,r),e)}if(t){if("undefined"!=typeof ArrayBuffer&&t.buffer instanceof ArrayBuffer||"length"in t)return"number"!=typeof t.length||(n=t.length)!=n?s(e,0):d(e,t);if("Buffer"===t.type&&o(t.data))return d(e,t.data)}var n;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(e,t)}function u(e){if("number"!=typeof e)throw new TypeError('"size" argument must be a number');if(e<0)throw new RangeError('"size" argument must not be negative')}function h(e,t){if(u(t),e=s(e,t<0?0:0|l(t)),!f.TYPED_ARRAY_SUPPORT)for(var r=0;r<t;++r)e[r]=0;return e}function d(e,t){var r=t.length<0?0:0|l(t.length);e=s(e,r);for(var n=0;n<r;n+=1)e[n]=255&t[n];return e}function l(e){if(e>=a())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+a().toString(16)+" bytes");return 0|e}function p(e,t){if(f.isBuffer(e))return e.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(e)||e instanceof ArrayBuffer))return e.byteLength;"string"!=typeof e&&(e=""+e);var r=e.length;if(0===r)return 0;for(var n=!1;;)switch(t){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":case void 0:return z(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return F(e).length;default:if(n)return z(e).length;t=(""+t).toLowerCase(),n=!0}}function b(e,t,r){var n=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===r||r>this.length)&&(r=this.length),r<=0)return"";if((r>>>=0)<=(t>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return j(this,t,r);case"utf8":case"utf-8":return x(this,t,r);case"ascii":return B(this,t,r);case"latin1":case"binary":return I(this,t,r);case"base64":return k(this,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return R(this,t,r);default:if(n)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),n=!0}}function y(e,t,r){var n=e[t];e[t]=e[r],e[r]=n}function m(e,t,r,n,i){if(0===e.length)return-1;if("string"==typeof r?(n=r,r=0):r>2147483647?r=2147483647:r<-2147483648&&(r=-2147483648),r=+r,isNaN(r)&&(r=i?0:e.length-1),r<0&&(r=e.length+r),r>=e.length){if(i)return-1;r=e.length-1}else if(r<0){if(!i)return-1;r=0}if("string"==typeof t&&(t=f.from(t,n)),f.isBuffer(t))return 0===t.length?-1:v(e,t,r,n,i);if("number"==typeof t)return t&=255,f.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?i?Uint8Array.prototype.indexOf.call(e,t,r):Uint8Array.prototype.lastIndexOf.call(e,t,r):v(e,[t],r,n,i);throw new TypeError("val must be string, number or Buffer")}function v(e,t,r,n,i){var o,a=1,s=e.length,f=t.length;if(void 0!==n&&("ucs2"===(n=String(n).toLowerCase())||"ucs-2"===n||"utf16le"===n||"utf-16le"===n)){if(e.length<2||t.length<2)return-1;a=2,s/=2,f/=2,r/=2}function c(e,t){return 1===a?e[t]:e.readUInt16BE(t*a)}if(i){var u=-1;for(o=r;o<s;o++)if(c(e,o)===c(t,-1===u?0:o-u)){if(-1===u&&(u=o),o-u+1===f)return u*a}else-1!==u&&(o-=o-u),u=-1}else for(r+f>s&&(r=s-f),o=r;o>=0;o--){for(var h=!0,d=0;d<f;d++)if(c(e,o+d)!==c(t,d)){h=!1;break}if(h)return o}return-1}function g(e,t,r,n){r=Number(r)||0;var i=e.length-r;n?(n=Number(n))>i&&(n=i):n=i;var o=t.length;if(o%2!=0)throw new TypeError("Invalid hex string");n>o/2&&(n=o/2);for(var a=0;a<n;++a){var s=parseInt(t.substr(2*a,2),16);if(isNaN(s))return a;e[r+a]=s}return a}function w(e,t,r,n){return K(z(t,e.length-r),e,r,n)}function _(e,t,r,n){return K(function(e){for(var t=[],r=0;r<e.length;++r)t.push(255&e.charCodeAt(r));return t}(t),e,r,n)}function S(e,t,r,n){return _(e,t,r,n)}function E(e,t,r,n){return K(F(t),e,r,n)}function M(e,t,r,n){return K(function(e,t){for(var r,n,i,o=[],a=0;a<e.length&&!((t-=2)<0);++a)r=e.charCodeAt(a),n=r>>8,i=r%256,o.push(i),o.push(n);return o}(t,e.length-r),e,r,n)}function k(e,t,r){return 0===t&&r===e.length?n.fromByteArray(e):n.fromByteArray(e.slice(t,r))}function x(e,t,r){r=Math.min(e.length,r);for(var n=[],i=t;i<r;){var o,a,s,f,c=e[i],u=null,h=c>239?4:c>223?3:c>191?2:1;if(i+h<=r)switch(h){case 1:c<128&&(u=c);break;case 2:128==(192&(o=e[i+1]))&&(f=(31&c)<<6|63&o)>127&&(u=f);break;case 3:o=e[i+1],a=e[i+2],128==(192&o)&&128==(192&a)&&(f=(15&c)<<12|(63&o)<<6|63&a)>2047&&(f<55296||f>57343)&&(u=f);break;case 4:o=e[i+1],a=e[i+2],s=e[i+3],128==(192&o)&&128==(192&a)&&128==(192&s)&&(f=(15&c)<<18|(63&o)<<12|(63&a)<<6|63&s)>65535&&f<1114112&&(u=f)}null===u?(u=65533,h=1):u>65535&&(u-=65536,n.push(u>>>10&1023|55296),u=56320|1023&u),n.push(u),i+=h}return function(e){var t=e.length;if(t<=A)return String.fromCharCode.apply(String,e);var r="",n=0;for(;n<t;)r+=String.fromCharCode.apply(String,e.slice(n,n+=A));return r}(n)}t.Buffer=f,t.SlowBuffer=function(e){+e!=e&&(e=0);return f.alloc(+e)},t.INSPECT_MAX_BYTES=50,f.TYPED_ARRAY_SUPPORT=void 0!==e.TYPED_ARRAY_SUPPORT?e.TYPED_ARRAY_SUPPORT:function(){try{var e=new Uint8Array(1);return e.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===e.foo()&&"function"==typeof e.subarray&&0===e.subarray(1,1).byteLength}catch(e){return!1}}(),t.kMaxLength=a(),f.poolSize=8192,f._augment=function(e){return e.__proto__=f.prototype,e},f.from=function(e,t,r){return c(null,e,t,r)},f.TYPED_ARRAY_SUPPORT&&(f.prototype.__proto__=Uint8Array.prototype,f.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&f[Symbol.species]===f&&Object.defineProperty(f,Symbol.species,{value:null,configurable:!0})),f.alloc=function(e,t,r){return function(e,t,r,n){return u(t),t<=0?s(e,t):void 0!==r?"string"==typeof n?s(e,t).fill(r,n):s(e,t).fill(r):s(e,t)}(null,e,t,r)},f.allocUnsafe=function(e){return h(null,e)},f.allocUnsafeSlow=function(e){return h(null,e)},f.isBuffer=function(e){return!(null==e||!e._isBuffer)},f.compare=function(e,t){if(!f.isBuffer(e)||!f.isBuffer(t))throw new TypeError("Arguments must be Buffers");if(e===t)return 0;for(var r=e.length,n=t.length,i=0,o=Math.min(r,n);i<o;++i)if(e[i]!==t[i]){r=e[i],n=t[i];break}return r<n?-1:n<r?1:0},f.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},f.concat=function(e,t){if(!o(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return f.alloc(0);var r;if(void 0===t)for(t=0,r=0;r<e.length;++r)t+=e[r].length;var n=f.allocUnsafe(t),i=0;for(r=0;r<e.length;++r){var a=e[r];if(!f.isBuffer(a))throw new TypeError('"list" argument must be an Array of Buffers');a.copy(n,i),i+=a.length}return n},f.byteLength=p,f.prototype._isBuffer=!0,f.prototype.swap16=function(){var e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var t=0;t<e;t+=2)y(this,t,t+1);return this},f.prototype.swap32=function(){var e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var t=0;t<e;t+=4)y(this,t,t+3),y(this,t+1,t+2);return this},f.prototype.swap64=function(){var e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var t=0;t<e;t+=8)y(this,t,t+7),y(this,t+1,t+6),y(this,t+2,t+5),y(this,t+3,t+4);return this},f.prototype.toString=function(){var e=0|this.length;return 0===e?"":0===arguments.length?x(this,0,e):b.apply(this,arguments)},f.prototype.equals=function(e){if(!f.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===f.compare(this,e)},f.prototype.inspect=function(){var e="",r=t.INSPECT_MAX_BYTES;return this.length>0&&(e=this.toString("hex",0,r).match(/.{2}/g).join(" "),this.length>r&&(e+=" ... ")),"<Buffer "+e+">"},f.prototype.compare=function(e,t,r,n,i){if(!f.isBuffer(e))throw new TypeError("Argument must be a Buffer");if(void 0===t&&(t=0),void 0===r&&(r=e?e.length:0),void 0===n&&(n=0),void 0===i&&(i=this.length),t<0||r>e.length||n<0||i>this.length)throw new RangeError("out of range index");if(n>=i&&t>=r)return 0;if(n>=i)return-1;if(t>=r)return 1;if(this===e)return 0;for(var o=(i>>>=0)-(n>>>=0),a=(r>>>=0)-(t>>>=0),s=Math.min(o,a),c=this.slice(n,i),u=e.slice(t,r),h=0;h<s;++h)if(c[h]!==u[h]){o=c[h],a=u[h];break}return o<a?-1:a<o?1:0},f.prototype.includes=function(e,t,r){return-1!==this.indexOf(e,t,r)},f.prototype.indexOf=function(e,t,r){return m(this,e,t,r,!0)},f.prototype.lastIndexOf=function(e,t,r){return m(this,e,t,r,!1)},f.prototype.write=function(e,t,r,n){if(void 0===t)n="utf8",r=this.length,t=0;else if(void 0===r&&"string"==typeof t)n=t,r=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t|=0,isFinite(r)?(r|=0,void 0===n&&(n="utf8")):(n=r,r=void 0)}var i=this.length-t;if((void 0===r||r>i)&&(r=i),e.length>0&&(r<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");n||(n="utf8");for(var o=!1;;)switch(n){case"hex":return g(this,e,t,r);case"utf8":case"utf-8":return w(this,e,t,r);case"ascii":return _(this,e,t,r);case"latin1":case"binary":return S(this,e,t,r);case"base64":return E(this,e,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return M(this,e,t,r);default:if(o)throw new TypeError("Unknown encoding: "+n);n=(""+n).toLowerCase(),o=!0}},f.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var A=4096;function B(e,t,r){var n="";r=Math.min(e.length,r);for(var i=t;i<r;++i)n+=String.fromCharCode(127&e[i]);return n}function I(e,t,r){var n="";r=Math.min(e.length,r);for(var i=t;i<r;++i)n+=String.fromCharCode(e[i]);return n}function j(e,t,r){var n=e.length;(!t||t<0)&&(t=0),(!r||r<0||r>n)&&(r=n);for(var i="",o=t;o<r;++o)i+=q(e[o]);return i}function R(e,t,r){for(var n=e.slice(t,r),i="",o=0;o<n.length;o+=2)i+=String.fromCharCode(n[o]+256*n[o+1]);return i}function T(e,t,r){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>r)throw new RangeError("Trying to access beyond buffer length")}function P(e,t,r,n,i,o){if(!f.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>i||t<o)throw new RangeError('"value" argument is out of bounds');if(r+n>e.length)throw new RangeError("Index out of range")}function C(e,t,r,n){t<0&&(t=65535+t+1);for(var i=0,o=Math.min(e.length-r,2);i<o;++i)e[r+i]=(t&255<<8*(n?i:1-i))>>>8*(n?i:1-i)}function O(e,t,r,n){t<0&&(t=4294967295+t+1);for(var i=0,o=Math.min(e.length-r,4);i<o;++i)e[r+i]=t>>>8*(n?i:3-i)&255}function D(e,t,r,n,i,o){if(r+n>e.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("Index out of range")}function N(e,t,r,n,o){return o||D(e,0,r,4),i.write(e,t,r,n,23,4),r+4}function L(e,t,r,n,o){return o||D(e,0,r,8),i.write(e,t,r,n,52,8),r+8}f.prototype.slice=function(e,t){var r,n=this.length;if((e=~~e)<0?(e+=n)<0&&(e=0):e>n&&(e=n),(t=void 0===t?n:~~t)<0?(t+=n)<0&&(t=0):t>n&&(t=n),t<e&&(t=e),f.TYPED_ARRAY_SUPPORT)(r=this.subarray(e,t)).__proto__=f.prototype;else{var i=t-e;r=new f(i,void 0);for(var o=0;o<i;++o)r[o]=this[o+e]}return r},f.prototype.readUIntLE=function(e,t,r){e|=0,t|=0,r||T(e,t,this.length);for(var n=this[e],i=1,o=0;++o<t&&(i*=256);)n+=this[e+o]*i;return n},f.prototype.readUIntBE=function(e,t,r){e|=0,t|=0,r||T(e,t,this.length);for(var n=this[e+--t],i=1;t>0&&(i*=256);)n+=this[e+--t]*i;return n},f.prototype.readUInt8=function(e,t){return t||T(e,1,this.length),this[e]},f.prototype.readUInt16LE=function(e,t){return t||T(e,2,this.length),this[e]|this[e+1]<<8},f.prototype.readUInt16BE=function(e,t){return t||T(e,2,this.length),this[e]<<8|this[e+1]},f.prototype.readUInt32LE=function(e,t){return t||T(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},f.prototype.readUInt32BE=function(e,t){return t||T(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},f.prototype.readIntLE=function(e,t,r){e|=0,t|=0,r||T(e,t,this.length);for(var n=this[e],i=1,o=0;++o<t&&(i*=256);)n+=this[e+o]*i;return n>=(i*=128)&&(n-=Math.pow(2,8*t)),n},f.prototype.readIntBE=function(e,t,r){e|=0,t|=0,r||T(e,t,this.length);for(var n=t,i=1,o=this[e+--n];n>0&&(i*=256);)o+=this[e+--n]*i;return o>=(i*=128)&&(o-=Math.pow(2,8*t)),o},f.prototype.readInt8=function(e,t){return t||T(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},f.prototype.readInt16LE=function(e,t){t||T(e,2,this.length);var r=this[e]|this[e+1]<<8;return 32768&r?4294901760|r:r},f.prototype.readInt16BE=function(e,t){t||T(e,2,this.length);var r=this[e+1]|this[e]<<8;return 32768&r?4294901760|r:r},f.prototype.readInt32LE=function(e,t){return t||T(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},f.prototype.readInt32BE=function(e,t){return t||T(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},f.prototype.readFloatLE=function(e,t){return t||T(e,4,this.length),i.read(this,e,!0,23,4)},f.prototype.readFloatBE=function(e,t){return t||T(e,4,this.length),i.read(this,e,!1,23,4)},f.prototype.readDoubleLE=function(e,t){return t||T(e,8,this.length),i.read(this,e,!0,52,8)},f.prototype.readDoubleBE=function(e,t){return t||T(e,8,this.length),i.read(this,e,!1,52,8)},f.prototype.writeUIntLE=function(e,t,r,n){(e=+e,t|=0,r|=0,n)||P(this,e,t,r,Math.pow(2,8*r)-1,0);var i=1,o=0;for(this[t]=255&e;++o<r&&(i*=256);)this[t+o]=e/i&255;return t+r},f.prototype.writeUIntBE=function(e,t,r,n){(e=+e,t|=0,r|=0,n)||P(this,e,t,r,Math.pow(2,8*r)-1,0);var i=r-1,o=1;for(this[t+i]=255&e;--i>=0&&(o*=256);)this[t+i]=e/o&255;return t+r},f.prototype.writeUInt8=function(e,t,r){return e=+e,t|=0,r||P(this,e,t,1,255,0),f.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),this[t]=255&e,t+1},f.prototype.writeUInt16LE=function(e,t,r){return e=+e,t|=0,r||P(this,e,t,2,65535,0),f.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):C(this,e,t,!0),t+2},f.prototype.writeUInt16BE=function(e,t,r){return e=+e,t|=0,r||P(this,e,t,2,65535,0),f.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):C(this,e,t,!1),t+2},f.prototype.writeUInt32LE=function(e,t,r){return e=+e,t|=0,r||P(this,e,t,4,4294967295,0),f.TYPED_ARRAY_SUPPORT?(this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e):O(this,e,t,!0),t+4},f.prototype.writeUInt32BE=function(e,t,r){return e=+e,t|=0,r||P(this,e,t,4,4294967295,0),f.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):O(this,e,t,!1),t+4},f.prototype.writeIntLE=function(e,t,r,n){if(e=+e,t|=0,!n){var i=Math.pow(2,8*r-1);P(this,e,t,r,i-1,-i)}var o=0,a=1,s=0;for(this[t]=255&e;++o<r&&(a*=256);)e<0&&0===s&&0!==this[t+o-1]&&(s=1),this[t+o]=(e/a>>0)-s&255;return t+r},f.prototype.writeIntBE=function(e,t,r,n){if(e=+e,t|=0,!n){var i=Math.pow(2,8*r-1);P(this,e,t,r,i-1,-i)}var o=r-1,a=1,s=0;for(this[t+o]=255&e;--o>=0&&(a*=256);)e<0&&0===s&&0!==this[t+o+1]&&(s=1),this[t+o]=(e/a>>0)-s&255;return t+r},f.prototype.writeInt8=function(e,t,r){return e=+e,t|=0,r||P(this,e,t,1,127,-128),f.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),e<0&&(e=255+e+1),this[t]=255&e,t+1},f.prototype.writeInt16LE=function(e,t,r){return e=+e,t|=0,r||P(this,e,t,2,32767,-32768),f.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):C(this,e,t,!0),t+2},f.prototype.writeInt16BE=function(e,t,r){return e=+e,t|=0,r||P(this,e,t,2,32767,-32768),f.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):C(this,e,t,!1),t+2},f.prototype.writeInt32LE=function(e,t,r){return e=+e,t|=0,r||P(this,e,t,4,2147483647,-2147483648),f.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24):O(this,e,t,!0),t+4},f.prototype.writeInt32BE=function(e,t,r){return e=+e,t|=0,r||P(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),f.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):O(this,e,t,!1),t+4},f.prototype.writeFloatLE=function(e,t,r){return N(this,e,t,!0,r)},f.prototype.writeFloatBE=function(e,t,r){return N(this,e,t,!1,r)},f.prototype.writeDoubleLE=function(e,t,r){return L(this,e,t,!0,r)},f.prototype.writeDoubleBE=function(e,t,r){return L(this,e,t,!1,r)},f.prototype.copy=function(e,t,r,n){if(r||(r=0),n||0===n||(n=this.length),t>=e.length&&(t=e.length),t||(t=0),n>0&&n<r&&(n=r),n===r)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw new RangeError("sourceStart out of bounds");if(n<0)throw new RangeError("sourceEnd out of bounds");n>this.length&&(n=this.length),e.length-t<n-r&&(n=e.length-t+r);var i,o=n-r;if(this===e&&r<t&&t<n)for(i=o-1;i>=0;--i)e[i+t]=this[i+r];else if(o<1e3||!f.TYPED_ARRAY_SUPPORT)for(i=0;i<o;++i)e[i+t]=this[i+r];else Uint8Array.prototype.set.call(e,this.subarray(r,r+o),t);return o},f.prototype.fill=function(e,t,r,n){if("string"==typeof e){if("string"==typeof t?(n=t,t=0,r=this.length):"string"==typeof r&&(n=r,r=this.length),1===e.length){var i=e.charCodeAt(0);i<256&&(e=i)}if(void 0!==n&&"string"!=typeof n)throw new TypeError("encoding must be a string");if("string"==typeof n&&!f.isEncoding(n))throw new TypeError("Unknown encoding: "+n)}else"number"==typeof e&&(e&=255);if(t<0||this.length<t||this.length<r)throw new RangeError("Out of range index");if(r<=t)return this;var o;if(t>>>=0,r=void 0===r?this.length:r>>>0,e||(e=0),"number"==typeof e)for(o=t;o<r;++o)this[o]=e;else{var a=f.isBuffer(e)?e:z(new f(e,n).toString()),s=a.length;for(o=0;o<r-t;++o)this[o+t]=a[o%s]}return this};var U=/[^+\/0-9A-Za-z-_]/g;function q(e){return e<16?"0"+e.toString(16):e.toString(16)}function z(e,t){var r;t=t||1/0;for(var n=e.length,i=null,o=[],a=0;a<n;++a){if((r=e.charCodeAt(a))>55295&&r<57344){if(!i){if(r>56319){(t-=3)>-1&&o.push(239,191,189);continue}if(a+1===n){(t-=3)>-1&&o.push(239,191,189);continue}i=r;continue}if(r<56320){(t-=3)>-1&&o.push(239,191,189),i=r;continue}r=65536+(i-55296<<10|r-56320)}else i&&(t-=3)>-1&&o.push(239,191,189);if(i=null,r<128){if((t-=1)<0)break;o.push(r)}else if(r<2048){if((t-=2)<0)break;o.push(r>>6|192,63&r|128)}else if(r<65536){if((t-=3)<0)break;o.push(r>>12|224,r>>6&63|128,63&r|128)}else{if(!(r<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;o.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128)}}return o}function F(e){return n.toByteArray(function(e){if((e=function(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")}(e).replace(U,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function K(e,t,r,n){for(var i=0;i<n&&!(i+r>=t.length||i>=e.length);++i)t[i+r]=e[i];return i}}).call(this,r(9))},function(e,t,r){(function(e){!function(e,t){"use strict";function n(e,t){if(!e)throw new Error(t||"Assertion failed")}function i(e,t){e.super_=t;var r=function(){};r.prototype=t.prototype,e.prototype=new r,e.prototype.constructor=e}function o(e,t,r){if(o.isBN(e))return e;this.negative=0,this.words=null,this.length=0,this.red=null,null!==e&&("le"!==t&&"be"!==t||(r=t,t=10),this._init(e||0,t||10,r||"be"))}var a;"object"==typeof e?e.exports=o:t.BN=o,o.BN=o,o.wordSize=26;try{a=r(141).Buffer}catch(e){}function s(e,t,r){for(var n=0,i=Math.min(e.length,r),o=t;o<i;o++){var a=e.charCodeAt(o)-48;n<<=4,n|=a>=49&&a<=54?a-49+10:a>=17&&a<=22?a-17+10:15&a}return n}function f(e,t,r,n){for(var i=0,o=Math.min(e.length,r),a=t;a<o;a++){var s=e.charCodeAt(a)-48;i*=n,i+=s>=49?s-49+10:s>=17?s-17+10:s}return i}o.isBN=function(e){return e instanceof o||null!==e&&"object"==typeof e&&e.constructor.wordSize===o.wordSize&&Array.isArray(e.words)},o.max=function(e,t){return e.cmp(t)>0?e:t},o.min=function(e,t){return e.cmp(t)<0?e:t},o.prototype._init=function(e,t,r){if("number"==typeof e)return this._initNumber(e,t,r);if("object"==typeof e)return this._initArray(e,t,r);"hex"===t&&(t=16),n(t===(0|t)&&t>=2&&t<=36);var i=0;"-"===(e=e.toString().replace(/\s+/g,""))[0]&&i++,16===t?this._parseHex(e,i):this._parseBase(e,t,i),"-"===e[0]&&(this.negative=1),this.strip(),"le"===r&&this._initArray(this.toArray(),t,r)},o.prototype._initNumber=function(e,t,r){e<0&&(this.negative=1,e=-e),e<67108864?(this.words=[67108863&e],this.length=1):e<4503599627370496?(this.words=[67108863&e,e/67108864&67108863],this.length=2):(n(e<9007199254740992),this.words=[67108863&e,e/67108864&67108863,1],this.length=3),"le"===r&&this._initArray(this.toArray(),t,r)},o.prototype._initArray=function(e,t,r){if(n("number"==typeof e.length),e.length<=0)return this.words=[0],this.length=1,this;this.length=Math.ceil(e.length/3),this.words=new Array(this.length);for(var i=0;i<this.length;i++)this.words[i]=0;var o,a,s=0;if("be"===r)for(i=e.length-1,o=0;i>=0;i-=3)a=e[i]|e[i-1]<<8|e[i-2]<<16,this.words[o]|=a<<s&67108863,this.words[o+1]=a>>>26-s&67108863,(s+=24)>=26&&(s-=26,o++);else if("le"===r)for(i=0,o=0;i<e.length;i+=3)a=e[i]|e[i+1]<<8|e[i+2]<<16,this.words[o]|=a<<s&67108863,this.words[o+1]=a>>>26-s&67108863,(s+=24)>=26&&(s-=26,o++);return this.strip()},o.prototype._parseHex=function(e,t){this.length=Math.ceil((e.length-t)/6),this.words=new Array(this.length);for(var r=0;r<this.length;r++)this.words[r]=0;var n,i,o=0;for(r=e.length-6,n=0;r>=t;r-=6)i=s(e,r,r+6),this.words[n]|=i<<o&67108863,this.words[n+1]|=i>>>26-o&4194303,(o+=24)>=26&&(o-=26,n++);r+6!==t&&(i=s(e,t,r+6),this.words[n]|=i<<o&67108863,this.words[n+1]|=i>>>26-o&4194303),this.strip()},o.prototype._parseBase=function(e,t,r){this.words=[0],this.length=1;for(var n=0,i=1;i<=67108863;i*=t)n++;n--,i=i/t|0;for(var o=e.length-r,a=o%n,s=Math.min(o,o-a)+r,c=0,u=r;u<s;u+=n)c=f(e,u,u+n,t),this.imuln(i),this.words[0]+c<67108864?this.words[0]+=c:this._iaddn(c);if(0!==a){var h=1;for(c=f(e,u,e.length,t),u=0;u<a;u++)h*=t;this.imuln(h),this.words[0]+c<67108864?this.words[0]+=c:this._iaddn(c)}},o.prototype.copy=function(e){e.words=new Array(this.length);for(var t=0;t<this.length;t++)e.words[t]=this.words[t];e.length=this.length,e.negative=this.negative,e.red=this.red},o.prototype.clone=function(){var e=new o(null);return this.copy(e),e},o.prototype._expand=function(e){for(;this.length<e;)this.words[this.length++]=0;return this},o.prototype.strip=function(){for(;this.length>1&&0===this.words[this.length-1];)this.length--;return this._normSign()},o.prototype._normSign=function(){return 1===this.length&&0===this.words[0]&&(this.negative=0),this},o.prototype.inspect=function(){return(this.red?"<BN-R: ":"<BN: ")+this.toString(16)+">"};var c=["","0","00","000","0000","00000","000000","0000000","00000000","000000000","0000000000","00000000000","000000000000","0000000000000","00000000000000","000000000000000","0000000000000000","00000000000000000","000000000000000000","0000000000000000000","00000000000000000000","000000000000000000000","0000000000000000000000","00000000000000000000000","000000000000000000000000","0000000000000000000000000"],u=[0,0,25,16,12,11,10,9,8,8,7,7,7,7,6,6,6,6,6,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],h=[0,0,33554432,43046721,16777216,48828125,60466176,40353607,16777216,43046721,1e7,19487171,35831808,62748517,7529536,11390625,16777216,24137569,34012224,47045881,64e6,4084101,5153632,6436343,7962624,9765625,11881376,14348907,17210368,20511149,243e5,28629151,33554432,39135393,45435424,52521875,60466176];function d(e,t,r){r.negative=t.negative^e.negative;var n=e.length+t.length|0;r.length=n,n=n-1|0;var i=0|e.words[0],o=0|t.words[0],a=i*o,s=67108863&a,f=a/67108864|0;r.words[0]=s;for(var c=1;c<n;c++){for(var u=f>>>26,h=67108863&f,d=Math.min(c,t.length-1),l=Math.max(0,c-e.length+1);l<=d;l++){var p=c-l|0;u+=(a=(i=0|e.words[p])*(o=0|t.words[l])+h)/67108864|0,h=67108863&a}r.words[c]=0|h,f=0|u}return 0!==f?r.words[c]=0|f:r.length--,r.strip()}o.prototype.toString=function(e,t){var r;if(t=0|t||1,16===(e=e||10)||"hex"===e){r="";for(var i=0,o=0,a=0;a<this.length;a++){var s=this.words[a],f=(16777215&(s<<i|o)).toString(16);r=0!==(o=s>>>24-i&16777215)||a!==this.length-1?c[6-f.length]+f+r:f+r,(i+=2)>=26&&(i-=26,a--)}for(0!==o&&(r=o.toString(16)+r);r.length%t!=0;)r="0"+r;return 0!==this.negative&&(r="-"+r),r}if(e===(0|e)&&e>=2&&e<=36){var d=u[e],l=h[e];r="";var p=this.clone();for(p.negative=0;!p.isZero();){var b=p.modn(l).toString(e);r=(p=p.idivn(l)).isZero()?b+r:c[d-b.length]+b+r}for(this.isZero()&&(r="0"+r);r.length%t!=0;)r="0"+r;return 0!==this.negative&&(r="-"+r),r}n(!1,"Base should be between 2 and 36")},o.prototype.toNumber=function(){var e=this.words[0];return 2===this.length?e+=67108864*this.words[1]:3===this.length&&1===this.words[2]?e+=4503599627370496+67108864*this.words[1]:this.length>2&&n(!1,"Number can only safely store up to 53 bits"),0!==this.negative?-e:e},o.prototype.toJSON=function(){return this.toString(16)},o.prototype.toBuffer=function(e,t){return n(void 0!==a),this.toArrayLike(a,e,t)},o.prototype.toArray=function(e,t){return this.toArrayLike(Array,e,t)},o.prototype.toArrayLike=function(e,t,r){var i=this.byteLength(),o=r||Math.max(1,i);n(i<=o,"byte array longer than desired length"),n(o>0,"Requested array length <= 0"),this.strip();var a,s,f="le"===t,c=new e(o),u=this.clone();if(f){for(s=0;!u.isZero();s++)a=u.andln(255),u.iushrn(8),c[s]=a;for(;s<o;s++)c[s]=0}else{for(s=0;s<o-i;s++)c[s]=0;for(s=0;!u.isZero();s++)a=u.andln(255),u.iushrn(8),c[o-s-1]=a}return c},Math.clz32?o.prototype._countBits=function(e){return 32-Math.clz32(e)}:o.prototype._countBits=function(e){var t=e,r=0;return t>=4096&&(r+=13,t>>>=13),t>=64&&(r+=7,t>>>=7),t>=8&&(r+=4,t>>>=4),t>=2&&(r+=2,t>>>=2),r+t},o.prototype._zeroBits=function(e){if(0===e)return 26;var t=e,r=0;return 0==(8191&t)&&(r+=13,t>>>=13),0==(127&t)&&(r+=7,t>>>=7),0==(15&t)&&(r+=4,t>>>=4),0==(3&t)&&(r+=2,t>>>=2),0==(1&t)&&r++,r},o.prototype.bitLength=function(){var e=this.words[this.length-1],t=this._countBits(e);return 26*(this.length-1)+t},o.prototype.zeroBits=function(){if(this.isZero())return 0;for(var e=0,t=0;t<this.length;t++){var r=this._zeroBits(this.words[t]);if(e+=r,26!==r)break}return e},o.prototype.byteLength=function(){return Math.ceil(this.bitLength()/8)},o.prototype.toTwos=function(e){return 0!==this.negative?this.abs().inotn(e).iaddn(1):this.clone()},o.prototype.fromTwos=function(e){return this.testn(e-1)?this.notn(e).iaddn(1).ineg():this.clone()},o.prototype.isNeg=function(){return 0!==this.negative},o.prototype.neg=function(){return this.clone().ineg()},o.prototype.ineg=function(){return this.isZero()||(this.negative^=1),this},o.prototype.iuor=function(e){for(;this.length<e.length;)this.words[this.length++]=0;for(var t=0;t<e.length;t++)this.words[t]=this.words[t]|e.words[t];return this.strip()},o.prototype.ior=function(e){return n(0==(this.negative|e.negative)),this.iuor(e)},o.prototype.or=function(e){return this.length>e.length?this.clone().ior(e):e.clone().ior(this)},o.prototype.uor=function(e){return this.length>e.length?this.clone().iuor(e):e.clone().iuor(this)},o.prototype.iuand=function(e){var t;t=this.length>e.length?e:this;for(var r=0;r<t.length;r++)this.words[r]=this.words[r]&e.words[r];return this.length=t.length,this.strip()},o.prototype.iand=function(e){return n(0==(this.negative|e.negative)),this.iuand(e)},o.prototype.and=function(e){return this.length>e.length?this.clone().iand(e):e.clone().iand(this)},o.prototype.uand=function(e){return this.length>e.length?this.clone().iuand(e):e.clone().iuand(this)},o.prototype.iuxor=function(e){var t,r;this.length>e.length?(t=this,r=e):(t=e,r=this);for(var n=0;n<r.length;n++)this.words[n]=t.words[n]^r.words[n];if(this!==t)for(;n<t.length;n++)this.words[n]=t.words[n];return this.length=t.length,this.strip()},o.prototype.ixor=function(e){return n(0==(this.negative|e.negative)),this.iuxor(e)},o.prototype.xor=function(e){return this.length>e.length?this.clone().ixor(e):e.clone().ixor(this)},o.prototype.uxor=function(e){return this.length>e.length?this.clone().iuxor(e):e.clone().iuxor(this)},o.prototype.inotn=function(e){n("number"==typeof e&&e>=0);var t=0|Math.ceil(e/26),r=e%26;this._expand(t),r>0&&t--;for(var i=0;i<t;i++)this.words[i]=67108863&~this.words[i];return r>0&&(this.words[i]=~this.words[i]&67108863>>26-r),this.strip()},o.prototype.notn=function(e){return this.clone().inotn(e)},o.prototype.setn=function(e,t){n("number"==typeof e&&e>=0);var r=e/26|0,i=e%26;return this._expand(r+1),this.words[r]=t?this.words[r]|1<<i:this.words[r]&~(1<<i),this.strip()},o.prototype.iadd=function(e){var t,r,n;if(0!==this.negative&&0===e.negative)return this.negative=0,t=this.isub(e),this.negative^=1,this._normSign();if(0===this.negative&&0!==e.negative)return e.negative=0,t=this.isub(e),e.negative=1,t._normSign();this.length>e.length?(r=this,n=e):(r=e,n=this);for(var i=0,o=0;o<n.length;o++)t=(0|r.words[o])+(0|n.words[o])+i,this.words[o]=67108863&t,i=t>>>26;for(;0!==i&&o<r.length;o++)t=(0|r.words[o])+i,this.words[o]=67108863&t,i=t>>>26;if(this.length=r.length,0!==i)this.words[this.length]=i,this.length++;else if(r!==this)for(;o<r.length;o++)this.words[o]=r.words[o];return this},o.prototype.add=function(e){var t;return 0!==e.negative&&0===this.negative?(e.negative=0,t=this.sub(e),e.negative^=1,t):0===e.negative&&0!==this.negative?(this.negative=0,t=e.sub(this),this.negative=1,t):this.length>e.length?this.clone().iadd(e):e.clone().iadd(this)},o.prototype.isub=function(e){if(0!==e.negative){e.negative=0;var t=this.iadd(e);return e.negative=1,t._normSign()}if(0!==this.negative)return this.negative=0,this.iadd(e),this.negative=1,this._normSign();var r,n,i=this.cmp(e);if(0===i)return this.negative=0,this.length=1,this.words[0]=0,this;i>0?(r=this,n=e):(r=e,n=this);for(var o=0,a=0;a<n.length;a++)o=(t=(0|r.words[a])-(0|n.words[a])+o)>>26,this.words[a]=67108863&t;for(;0!==o&&a<r.length;a++)o=(t=(0|r.words[a])+o)>>26,this.words[a]=67108863&t;if(0===o&&a<r.length&&r!==this)for(;a<r.length;a++)this.words[a]=r.words[a];return this.length=Math.max(this.length,a),r!==this&&(this.negative=1),this.strip()},o.prototype.sub=function(e){return this.clone().isub(e)};var l=function(e,t,r){var n,i,o,a=e.words,s=t.words,f=r.words,c=0,u=0|a[0],h=8191&u,d=u>>>13,l=0|a[1],p=8191&l,b=l>>>13,y=0|a[2],m=8191&y,v=y>>>13,g=0|a[3],w=8191&g,_=g>>>13,S=0|a[4],E=8191&S,M=S>>>13,k=0|a[5],x=8191&k,A=k>>>13,B=0|a[6],I=8191&B,j=B>>>13,R=0|a[7],T=8191&R,P=R>>>13,C=0|a[8],O=8191&C,D=C>>>13,N=0|a[9],L=8191&N,U=N>>>13,q=0|s[0],z=8191&q,F=q>>>13,K=0|s[1],H=8191&K,V=K>>>13,Y=0|s[2],W=8191&Y,X=Y>>>13,J=0|s[3],$=8191&J,G=J>>>13,Z=0|s[4],Q=8191&Z,ee=Z>>>13,te=0|s[5],re=8191&te,ne=te>>>13,ie=0|s[6],oe=8191&ie,ae=ie>>>13,se=0|s[7],fe=8191&se,ce=se>>>13,ue=0|s[8],he=8191&ue,de=ue>>>13,le=0|s[9],pe=8191&le,be=le>>>13;r.negative=e.negative^t.negative,r.length=19;var ye=(c+(n=Math.imul(h,z))|0)+((8191&(i=(i=Math.imul(h,F))+Math.imul(d,z)|0))<<13)|0;c=((o=Math.imul(d,F))+(i>>>13)|0)+(ye>>>26)|0,ye&=67108863,n=Math.imul(p,z),i=(i=Math.imul(p,F))+Math.imul(b,z)|0,o=Math.imul(b,F);var me=(c+(n=n+Math.imul(h,H)|0)|0)+((8191&(i=(i=i+Math.imul(h,V)|0)+Math.imul(d,H)|0))<<13)|0;c=((o=o+Math.imul(d,V)|0)+(i>>>13)|0)+(me>>>26)|0,me&=67108863,n=Math.imul(m,z),i=(i=Math.imul(m,F))+Math.imul(v,z)|0,o=Math.imul(v,F),n=n+Math.imul(p,H)|0,i=(i=i+Math.imul(p,V)|0)+Math.imul(b,H)|0,o=o+Math.imul(b,V)|0;var ve=(c+(n=n+Math.imul(h,W)|0)|0)+((8191&(i=(i=i+Math.imul(h,X)|0)+Math.imul(d,W)|0))<<13)|0;c=((o=o+Math.imul(d,X)|0)+(i>>>13)|0)+(ve>>>26)|0,ve&=67108863,n=Math.imul(w,z),i=(i=Math.imul(w,F))+Math.imul(_,z)|0,o=Math.imul(_,F),n=n+Math.imul(m,H)|0,i=(i=i+Math.imul(m,V)|0)+Math.imul(v,H)|0,o=o+Math.imul(v,V)|0,n=n+Math.imul(p,W)|0,i=(i=i+Math.imul(p,X)|0)+Math.imul(b,W)|0,o=o+Math.imul(b,X)|0;var ge=(c+(n=n+Math.imul(h,$)|0)|0)+((8191&(i=(i=i+Math.imul(h,G)|0)+Math.imul(d,$)|0))<<13)|0;c=((o=o+Math.imul(d,G)|0)+(i>>>13)|0)+(ge>>>26)|0,ge&=67108863,n=Math.imul(E,z),i=(i=Math.imul(E,F))+Math.imul(M,z)|0,o=Math.imul(M,F),n=n+Math.imul(w,H)|0,i=(i=i+Math.imul(w,V)|0)+Math.imul(_,H)|0,o=o+Math.imul(_,V)|0,n=n+Math.imul(m,W)|0,i=(i=i+Math.imul(m,X)|0)+Math.imul(v,W)|0,o=o+Math.imul(v,X)|0,n=n+Math.imul(p,$)|0,i=(i=i+Math.imul(p,G)|0)+Math.imul(b,$)|0,o=o+Math.imul(b,G)|0;var we=(c+(n=n+Math.imul(h,Q)|0)|0)+((8191&(i=(i=i+Math.imul(h,ee)|0)+Math.imul(d,Q)|0))<<13)|0;c=((o=o+Math.imul(d,ee)|0)+(i>>>13)|0)+(we>>>26)|0,we&=67108863,n=Math.imul(x,z),i=(i=Math.imul(x,F))+Math.imul(A,z)|0,o=Math.imul(A,F),n=n+Math.imul(E,H)|0,i=(i=i+Math.imul(E,V)|0)+Math.imul(M,H)|0,o=o+Math.imul(M,V)|0,n=n+Math.imul(w,W)|0,i=(i=i+Math.imul(w,X)|0)+Math.imul(_,W)|0,o=o+Math.imul(_,X)|0,n=n+Math.imul(m,$)|0,i=(i=i+Math.imul(m,G)|0)+Math.imul(v,$)|0,o=o+Math.imul(v,G)|0,n=n+Math.imul(p,Q)|0,i=(i=i+Math.imul(p,ee)|0)+Math.imul(b,Q)|0,o=o+Math.imul(b,ee)|0;var _e=(c+(n=n+Math.imul(h,re)|0)|0)+((8191&(i=(i=i+Math.imul(h,ne)|0)+Math.imul(d,re)|0))<<13)|0;c=((o=o+Math.imul(d,ne)|0)+(i>>>13)|0)+(_e>>>26)|0,_e&=67108863,n=Math.imul(I,z),i=(i=Math.imul(I,F))+Math.imul(j,z)|0,o=Math.imul(j,F),n=n+Math.imul(x,H)|0,i=(i=i+Math.imul(x,V)|0)+Math.imul(A,H)|0,o=o+Math.imul(A,V)|0,n=n+Math.imul(E,W)|0,i=(i=i+Math.imul(E,X)|0)+Math.imul(M,W)|0,o=o+Math.imul(M,X)|0,n=n+Math.imul(w,$)|0,i=(i=i+Math.imul(w,G)|0)+Math.imul(_,$)|0,o=o+Math.imul(_,G)|0,n=n+Math.imul(m,Q)|0,i=(i=i+Math.imul(m,ee)|0)+Math.imul(v,Q)|0,o=o+Math.imul(v,ee)|0,n=n+Math.imul(p,re)|0,i=(i=i+Math.imul(p,ne)|0)+Math.imul(b,re)|0,o=o+Math.imul(b,ne)|0;var Se=(c+(n=n+Math.imul(h,oe)|0)|0)+((8191&(i=(i=i+Math.imul(h,ae)|0)+Math.imul(d,oe)|0))<<13)|0;c=((o=o+Math.imul(d,ae)|0)+(i>>>13)|0)+(Se>>>26)|0,Se&=67108863,n=Math.imul(T,z),i=(i=Math.imul(T,F))+Math.imul(P,z)|0,o=Math.imul(P,F),n=n+Math.imul(I,H)|0,i=(i=i+Math.imul(I,V)|0)+Math.imul(j,H)|0,o=o+Math.imul(j,V)|0,n=n+Math.imul(x,W)|0,i=(i=i+Math.imul(x,X)|0)+Math.imul(A,W)|0,o=o+Math.imul(A,X)|0,n=n+Math.imul(E,$)|0,i=(i=i+Math.imul(E,G)|0)+Math.imul(M,$)|0,o=o+Math.imul(M,G)|0,n=n+Math.imul(w,Q)|0,i=(i=i+Math.imul(w,ee)|0)+Math.imul(_,Q)|0,o=o+Math.imul(_,ee)|0,n=n+Math.imul(m,re)|0,i=(i=i+Math.imul(m,ne)|0)+Math.imul(v,re)|0,o=o+Math.imul(v,ne)|0,n=n+Math.imul(p,oe)|0,i=(i=i+Math.imul(p,ae)|0)+Math.imul(b,oe)|0,o=o+Math.imul(b,ae)|0;var Ee=(c+(n=n+Math.imul(h,fe)|0)|0)+((8191&(i=(i=i+Math.imul(h,ce)|0)+Math.imul(d,fe)|0))<<13)|0;c=((o=o+Math.imul(d,ce)|0)+(i>>>13)|0)+(Ee>>>26)|0,Ee&=67108863,n=Math.imul(O,z),i=(i=Math.imul(O,F))+Math.imul(D,z)|0,o=Math.imul(D,F),n=n+Math.imul(T,H)|0,i=(i=i+Math.imul(T,V)|0)+Math.imul(P,H)|0,o=o+Math.imul(P,V)|0,n=n+Math.imul(I,W)|0,i=(i=i+Math.imul(I,X)|0)+Math.imul(j,W)|0,o=o+Math.imul(j,X)|0,n=n+Math.imul(x,$)|0,i=(i=i+Math.imul(x,G)|0)+Math.imul(A,$)|0,o=o+Math.imul(A,G)|0,n=n+Math.imul(E,Q)|0,i=(i=i+Math.imul(E,ee)|0)+Math.imul(M,Q)|0,o=o+Math.imul(M,ee)|0,n=n+Math.imul(w,re)|0,i=(i=i+Math.imul(w,ne)|0)+Math.imul(_,re)|0,o=o+Math.imul(_,ne)|0,n=n+Math.imul(m,oe)|0,i=(i=i+Math.imul(m,ae)|0)+Math.imul(v,oe)|0,o=o+Math.imul(v,ae)|0,n=n+Math.imul(p,fe)|0,i=(i=i+Math.imul(p,ce)|0)+Math.imul(b,fe)|0,o=o+Math.imul(b,ce)|0;var Me=(c+(n=n+Math.imul(h,he)|0)|0)+((8191&(i=(i=i+Math.imul(h,de)|0)+Math.imul(d,he)|0))<<13)|0;c=((o=o+Math.imul(d,de)|0)+(i>>>13)|0)+(Me>>>26)|0,Me&=67108863,n=Math.imul(L,z),i=(i=Math.imul(L,F))+Math.imul(U,z)|0,o=Math.imul(U,F),n=n+Math.imul(O,H)|0,i=(i=i+Math.imul(O,V)|0)+Math.imul(D,H)|0,o=o+Math.imul(D,V)|0,n=n+Math.imul(T,W)|0,i=(i=i+Math.imul(T,X)|0)+Math.imul(P,W)|0,o=o+Math.imul(P,X)|0,n=n+Math.imul(I,$)|0,i=(i=i+Math.imul(I,G)|0)+Math.imul(j,$)|0,o=o+Math.imul(j,G)|0,n=n+Math.imul(x,Q)|0,i=(i=i+Math.imul(x,ee)|0)+Math.imul(A,Q)|0,o=o+Math.imul(A,ee)|0,n=n+Math.imul(E,re)|0,i=(i=i+Math.imul(E,ne)|0)+Math.imul(M,re)|0,o=o+Math.imul(M,ne)|0,n=n+Math.imul(w,oe)|0,i=(i=i+Math.imul(w,ae)|0)+Math.imul(_,oe)|0,o=o+Math.imul(_,ae)|0,n=n+Math.imul(m,fe)|0,i=(i=i+Math.imul(m,ce)|0)+Math.imul(v,fe)|0,o=o+Math.imul(v,ce)|0,n=n+Math.imul(p,he)|0,i=(i=i+Math.imul(p,de)|0)+Math.imul(b,he)|0,o=o+Math.imul(b,de)|0;var ke=(c+(n=n+Math.imul(h,pe)|0)|0)+((8191&(i=(i=i+Math.imul(h,be)|0)+Math.imul(d,pe)|0))<<13)|0;c=((o=o+Math.imul(d,be)|0)+(i>>>13)|0)+(ke>>>26)|0,ke&=67108863,n=Math.imul(L,H),i=(i=Math.imul(L,V))+Math.imul(U,H)|0,o=Math.imul(U,V),n=n+Math.imul(O,W)|0,i=(i=i+Math.imul(O,X)|0)+Math.imul(D,W)|0,o=o+Math.imul(D,X)|0,n=n+Math.imul(T,$)|0,i=(i=i+Math.imul(T,G)|0)+Math.imul(P,$)|0,o=o+Math.imul(P,G)|0,n=n+Math.imul(I,Q)|0,i=(i=i+Math.imul(I,ee)|0)+Math.imul(j,Q)|0,o=o+Math.imul(j,ee)|0,n=n+Math.imul(x,re)|0,i=(i=i+Math.imul(x,ne)|0)+Math.imul(A,re)|0,o=o+Math.imul(A,ne)|0,n=n+Math.imul(E,oe)|0,i=(i=i+Math.imul(E,ae)|0)+Math.imul(M,oe)|0,o=o+Math.imul(M,ae)|0,n=n+Math.imul(w,fe)|0,i=(i=i+Math.imul(w,ce)|0)+Math.imul(_,fe)|0,o=o+Math.imul(_,ce)|0,n=n+Math.imul(m,he)|0,i=(i=i+Math.imul(m,de)|0)+Math.imul(v,he)|0,o=o+Math.imul(v,de)|0;var xe=(c+(n=n+Math.imul(p,pe)|0)|0)+((8191&(i=(i=i+Math.imul(p,be)|0)+Math.imul(b,pe)|0))<<13)|0;c=((o=o+Math.imul(b,be)|0)+(i>>>13)|0)+(xe>>>26)|0,xe&=67108863,n=Math.imul(L,W),i=(i=Math.imul(L,X))+Math.imul(U,W)|0,o=Math.imul(U,X),n=n+Math.imul(O,$)|0,i=(i=i+Math.imul(O,G)|0)+Math.imul(D,$)|0,o=o+Math.imul(D,G)|0,n=n+Math.imul(T,Q)|0,i=(i=i+Math.imul(T,ee)|0)+Math.imul(P,Q)|0,o=o+Math.imul(P,ee)|0,n=n+Math.imul(I,re)|0,i=(i=i+Math.imul(I,ne)|0)+Math.imul(j,re)|0,o=o+Math.imul(j,ne)|0,n=n+Math.imul(x,oe)|0,i=(i=i+Math.imul(x,ae)|0)+Math.imul(A,oe)|0,o=o+Math.imul(A,ae)|0,n=n+Math.imul(E,fe)|0,i=(i=i+Math.imul(E,ce)|0)+Math.imul(M,fe)|0,o=o+Math.imul(M,ce)|0,n=n+Math.imul(w,he)|0,i=(i=i+Math.imul(w,de)|0)+Math.imul(_,he)|0,o=o+Math.imul(_,de)|0;var Ae=(c+(n=n+Math.imul(m,pe)|0)|0)+((8191&(i=(i=i+Math.imul(m,be)|0)+Math.imul(v,pe)|0))<<13)|0;c=((o=o+Math.imul(v,be)|0)+(i>>>13)|0)+(Ae>>>26)|0,Ae&=67108863,n=Math.imul(L,$),i=(i=Math.imul(L,G))+Math.imul(U,$)|0,o=Math.imul(U,G),n=n+Math.imul(O,Q)|0,i=(i=i+Math.imul(O,ee)|0)+Math.imul(D,Q)|0,o=o+Math.imul(D,ee)|0,n=n+Math.imul(T,re)|0,i=(i=i+Math.imul(T,ne)|0)+Math.imul(P,re)|0,o=o+Math.imul(P,ne)|0,n=n+Math.imul(I,oe)|0,i=(i=i+Math.imul(I,ae)|0)+Math.imul(j,oe)|0,o=o+Math.imul(j,ae)|0,n=n+Math.imul(x,fe)|0,i=(i=i+Math.imul(x,ce)|0)+Math.imul(A,fe)|0,o=o+Math.imul(A,ce)|0,n=n+Math.imul(E,he)|0,i=(i=i+Math.imul(E,de)|0)+Math.imul(M,he)|0,o=o+Math.imul(M,de)|0;var Be=(c+(n=n+Math.imul(w,pe)|0)|0)+((8191&(i=(i=i+Math.imul(w,be)|0)+Math.imul(_,pe)|0))<<13)|0;c=((o=o+Math.imul(_,be)|0)+(i>>>13)|0)+(Be>>>26)|0,Be&=67108863,n=Math.imul(L,Q),i=(i=Math.imul(L,ee))+Math.imul(U,Q)|0,o=Math.imul(U,ee),n=n+Math.imul(O,re)|0,i=(i=i+Math.imul(O,ne)|0)+Math.imul(D,re)|0,o=o+Math.imul(D,ne)|0,n=n+Math.imul(T,oe)|0,i=(i=i+Math.imul(T,ae)|0)+Math.imul(P,oe)|0,o=o+Math.imul(P,ae)|0,n=n+Math.imul(I,fe)|0,i=(i=i+Math.imul(I,ce)|0)+Math.imul(j,fe)|0,o=o+Math.imul(j,ce)|0,n=n+Math.imul(x,he)|0,i=(i=i+Math.imul(x,de)|0)+Math.imul(A,he)|0,o=o+Math.imul(A,de)|0;var Ie=(c+(n=n+Math.imul(E,pe)|0)|0)+((8191&(i=(i=i+Math.imul(E,be)|0)+Math.imul(M,pe)|0))<<13)|0;c=((o=o+Math.imul(M,be)|0)+(i>>>13)|0)+(Ie>>>26)|0,Ie&=67108863,n=Math.imul(L,re),i=(i=Math.imul(L,ne))+Math.imul(U,re)|0,o=Math.imul(U,ne),n=n+Math.imul(O,oe)|0,i=(i=i+Math.imul(O,ae)|0)+Math.imul(D,oe)|0,o=o+Math.imul(D,ae)|0,n=n+Math.imul(T,fe)|0,i=(i=i+Math.imul(T,ce)|0)+Math.imul(P,fe)|0,o=o+Math.imul(P,ce)|0,n=n+Math.imul(I,he)|0,i=(i=i+Math.imul(I,de)|0)+Math.imul(j,he)|0,o=o+Math.imul(j,de)|0;var je=(c+(n=n+Math.imul(x,pe)|0)|0)+((8191&(i=(i=i+Math.imul(x,be)|0)+Math.imul(A,pe)|0))<<13)|0;c=((o=o+Math.imul(A,be)|0)+(i>>>13)|0)+(je>>>26)|0,je&=67108863,n=Math.imul(L,oe),i=(i=Math.imul(L,ae))+Math.imul(U,oe)|0,o=Math.imul(U,ae),n=n+Math.imul(O,fe)|0,i=(i=i+Math.imul(O,ce)|0)+Math.imul(D,fe)|0,o=o+Math.imul(D,ce)|0,n=n+Math.imul(T,he)|0,i=(i=i+Math.imul(T,de)|0)+Math.imul(P,he)|0,o=o+Math.imul(P,de)|0;var Re=(c+(n=n+Math.imul(I,pe)|0)|0)+((8191&(i=(i=i+Math.imul(I,be)|0)+Math.imul(j,pe)|0))<<13)|0;c=((o=o+Math.imul(j,be)|0)+(i>>>13)|0)+(Re>>>26)|0,Re&=67108863,n=Math.imul(L,fe),i=(i=Math.imul(L,ce))+Math.imul(U,fe)|0,o=Math.imul(U,ce),n=n+Math.imul(O,he)|0,i=(i=i+Math.imul(O,de)|0)+Math.imul(D,he)|0,o=o+Math.imul(D,de)|0;var Te=(c+(n=n+Math.imul(T,pe)|0)|0)+((8191&(i=(i=i+Math.imul(T,be)|0)+Math.imul(P,pe)|0))<<13)|0;c=((o=o+Math.imul(P,be)|0)+(i>>>13)|0)+(Te>>>26)|0,Te&=67108863,n=Math.imul(L,he),i=(i=Math.imul(L,de))+Math.imul(U,he)|0,o=Math.imul(U,de);var Pe=(c+(n=n+Math.imul(O,pe)|0)|0)+((8191&(i=(i=i+Math.imul(O,be)|0)+Math.imul(D,pe)|0))<<13)|0;c=((o=o+Math.imul(D,be)|0)+(i>>>13)|0)+(Pe>>>26)|0,Pe&=67108863;var Ce=(c+(n=Math.imul(L,pe))|0)+((8191&(i=(i=Math.imul(L,be))+Math.imul(U,pe)|0))<<13)|0;return c=((o=Math.imul(U,be))+(i>>>13)|0)+(Ce>>>26)|0,Ce&=67108863,f[0]=ye,f[1]=me,f[2]=ve,f[3]=ge,f[4]=we,f[5]=_e,f[6]=Se,f[7]=Ee,f[8]=Me,f[9]=ke,f[10]=xe,f[11]=Ae,f[12]=Be,f[13]=Ie,f[14]=je,f[15]=Re,f[16]=Te,f[17]=Pe,f[18]=Ce,0!==c&&(f[19]=c,r.length++),r};function p(e,t,r){return(new b).mulp(e,t,r)}function b(e,t){this.x=e,this.y=t}Math.imul||(l=d),o.prototype.mulTo=function(e,t){var r=this.length+e.length;return 10===this.length&&10===e.length?l(this,e,t):r<63?d(this,e,t):r<1024?function(e,t,r){r.negative=t.negative^e.negative,r.length=e.length+t.length;for(var n=0,i=0,o=0;o<r.length-1;o++){var a=i;i=0;for(var s=67108863&n,f=Math.min(o,t.length-1),c=Math.max(0,o-e.length+1);c<=f;c++){var u=o-c,h=(0|e.words[u])*(0|t.words[c]),d=67108863&h;s=67108863&(d=d+s|0),i+=(a=(a=a+(h/67108864|0)|0)+(d>>>26)|0)>>>26,a&=67108863}r.words[o]=s,n=a,a=i}return 0!==n?r.words[o]=n:r.length--,r.strip()}(this,e,t):p(this,e,t)},b.prototype.makeRBT=function(e){for(var t=new Array(e),r=o.prototype._countBits(e)-1,n=0;n<e;n++)t[n]=this.revBin(n,r,e);return t},b.prototype.revBin=function(e,t,r){if(0===e||e===r-1)return e;for(var n=0,i=0;i<t;i++)n|=(1&e)<<t-i-1,e>>=1;return n},b.prototype.permute=function(e,t,r,n,i,o){for(var a=0;a<o;a++)n[a]=t[e[a]],i[a]=r[e[a]]},b.prototype.transform=function(e,t,r,n,i,o){this.permute(o,e,t,r,n,i);for(var a=1;a<i;a<<=1)for(var s=a<<1,f=Math.cos(2*Math.PI/s),c=Math.sin(2*Math.PI/s),u=0;u<i;u+=s)for(var h=f,d=c,l=0;l<a;l++){var p=r[u+l],b=n[u+l],y=r[u+l+a],m=n[u+l+a],v=h*y-d*m;m=h*m+d*y,y=v,r[u+l]=p+y,n[u+l]=b+m,r[u+l+a]=p-y,n[u+l+a]=b-m,l!==s&&(v=f*h-c*d,d=f*d+c*h,h=v)}},b.prototype.guessLen13b=function(e,t){var r=1|Math.max(t,e),n=1&r,i=0;for(r=r/2|0;r;r>>>=1)i++;return 1<<i+1+n},b.prototype.conjugate=function(e,t,r){if(!(r<=1))for(var n=0;n<r/2;n++){var i=e[n];e[n]=e[r-n-1],e[r-n-1]=i,i=t[n],t[n]=-t[r-n-1],t[r-n-1]=-i}},b.prototype.normalize13b=function(e,t){for(var r=0,n=0;n<t/2;n++){var i=8192*Math.round(e[2*n+1]/t)+Math.round(e[2*n]/t)+r;e[n]=67108863&i,r=i<67108864?0:i/67108864|0}return e},b.prototype.convert13b=function(e,t,r,i){for(var o=0,a=0;a<t;a++)o+=0|e[a],r[2*a]=8191&o,o>>>=13,r[2*a+1]=8191&o,o>>>=13;for(a=2*t;a<i;++a)r[a]=0;n(0===o),n(0==(-8192&o))},b.prototype.stub=function(e){for(var t=new Array(e),r=0;r<e;r++)t[r]=0;return t},b.prototype.mulp=function(e,t,r){var n=2*this.guessLen13b(e.length,t.length),i=this.makeRBT(n),o=this.stub(n),a=new Array(n),s=new Array(n),f=new Array(n),c=new Array(n),u=new Array(n),h=new Array(n),d=r.words;d.length=n,this.convert13b(e.words,e.length,a,n),this.convert13b(t.words,t.length,c,n),this.transform(a,o,s,f,n,i),this.transform(c,o,u,h,n,i);for(var l=0;l<n;l++){var p=s[l]*u[l]-f[l]*h[l];f[l]=s[l]*h[l]+f[l]*u[l],s[l]=p}return this.conjugate(s,f,n),this.transform(s,f,d,o,n,i),this.conjugate(d,o,n),this.normalize13b(d,n),r.negative=e.negative^t.negative,r.length=e.length+t.length,r.strip()},o.prototype.mul=function(e){var t=new o(null);return t.words=new Array(this.length+e.length),this.mulTo(e,t)},o.prototype.mulf=function(e){var t=new o(null);return t.words=new Array(this.length+e.length),p(this,e,t)},o.prototype.imul=function(e){return this.clone().mulTo(e,this)},o.prototype.imuln=function(e){n("number"==typeof e),n(e<67108864);for(var t=0,r=0;r<this.length;r++){var i=(0|this.words[r])*e,o=(67108863&i)+(67108863&t);t>>=26,t+=i/67108864|0,t+=o>>>26,this.words[r]=67108863&o}return 0!==t&&(this.words[r]=t,this.length++),this},o.prototype.muln=function(e){return this.clone().imuln(e)},o.prototype.sqr=function(){return this.mul(this)},o.prototype.isqr=function(){return this.imul(this.clone())},o.prototype.pow=function(e){var t=function(e){for(var t=new Array(e.bitLength()),r=0;r<t.length;r++){var n=r/26|0,i=r%26;t[r]=(e.words[n]&1<<i)>>>i}return t}(e);if(0===t.length)return new o(1);for(var r=this,n=0;n<t.length&&0===t[n];n++,r=r.sqr());if(++n<t.length)for(var i=r.sqr();n<t.length;n++,i=i.sqr())0!==t[n]&&(r=r.mul(i));return r},o.prototype.iushln=function(e){n("number"==typeof e&&e>=0);var t,r=e%26,i=(e-r)/26,o=67108863>>>26-r<<26-r;if(0!==r){var a=0;for(t=0;t<this.length;t++){var s=this.words[t]&o,f=(0|this.words[t])-s<<r;this.words[t]=f|a,a=s>>>26-r}a&&(this.words[t]=a,this.length++)}if(0!==i){for(t=this.length-1;t>=0;t--)this.words[t+i]=this.words[t];for(t=0;t<i;t++)this.words[t]=0;this.length+=i}return this.strip()},o.prototype.ishln=function(e){return n(0===this.negative),this.iushln(e)},o.prototype.iushrn=function(e,t,r){var i;n("number"==typeof e&&e>=0),i=t?(t-t%26)/26:0;var o=e%26,a=Math.min((e-o)/26,this.length),s=67108863^67108863>>>o<<o,f=r;if(i-=a,i=Math.max(0,i),f){for(var c=0;c<a;c++)f.words[c]=this.words[c];f.length=a}if(0===a);else if(this.length>a)for(this.length-=a,c=0;c<this.length;c++)this.words[c]=this.words[c+a];else this.words[0]=0,this.length=1;var u=0;for(c=this.length-1;c>=0&&(0!==u||c>=i);c--){var h=0|this.words[c];this.words[c]=u<<26-o|h>>>o,u=h&s}return f&&0!==u&&(f.words[f.length++]=u),0===this.length&&(this.words[0]=0,this.length=1),this.strip()},o.prototype.ishrn=function(e,t,r){return n(0===this.negative),this.iushrn(e,t,r)},o.prototype.shln=function(e){return this.clone().ishln(e)},o.prototype.ushln=function(e){return this.clone().iushln(e)},o.prototype.shrn=function(e){return this.clone().ishrn(e)},o.prototype.ushrn=function(e){return this.clone().iushrn(e)},o.prototype.testn=function(e){n("number"==typeof e&&e>=0);var t=e%26,r=(e-t)/26,i=1<<t;return!(this.length<=r)&&!!(this.words[r]&i)},o.prototype.imaskn=function(e){n("number"==typeof e&&e>=0);var t=e%26,r=(e-t)/26;if(n(0===this.negative,"imaskn works only with positive numbers"),this.length<=r)return this;if(0!==t&&r++,this.length=Math.min(r,this.length),0!==t){var i=67108863^67108863>>>t<<t;this.words[this.length-1]&=i}return this.strip()},o.prototype.maskn=function(e){return this.clone().imaskn(e)},o.prototype.iaddn=function(e){return n("number"==typeof e),n(e<67108864),e<0?this.isubn(-e):0!==this.negative?1===this.length&&(0|this.words[0])<e?(this.words[0]=e-(0|this.words[0]),this.negative=0,this):(this.negative=0,this.isubn(e),this.negative=1,this):this._iaddn(e)},o.prototype._iaddn=function(e){this.words[0]+=e;for(var t=0;t<this.length&&this.words[t]>=67108864;t++)this.words[t]-=67108864,t===this.length-1?this.words[t+1]=1:this.words[t+1]++;return this.length=Math.max(this.length,t+1),this},o.prototype.isubn=function(e){if(n("number"==typeof e),n(e<67108864),e<0)return this.iaddn(-e);if(0!==this.negative)return this.negative=0,this.iaddn(e),this.negative=1,this;if(this.words[0]-=e,1===this.length&&this.words[0]<0)this.words[0]=-this.words[0],this.negative=1;else for(var t=0;t<this.length&&this.words[t]<0;t++)this.words[t]+=67108864,this.words[t+1]-=1;return this.strip()},o.prototype.addn=function(e){return this.clone().iaddn(e)},o.prototype.subn=function(e){return this.clone().isubn(e)},o.prototype.iabs=function(){return this.negative=0,this},o.prototype.abs=function(){return this.clone().iabs()},o.prototype._ishlnsubmul=function(e,t,r){var i,o,a=e.length+r;this._expand(a);var s=0;for(i=0;i<e.length;i++){o=(0|this.words[i+r])+s;var f=(0|e.words[i])*t;s=((o-=67108863&f)>>26)-(f/67108864|0),this.words[i+r]=67108863&o}for(;i<this.length-r;i++)s=(o=(0|this.words[i+r])+s)>>26,this.words[i+r]=67108863&o;if(0===s)return this.strip();for(n(-1===s),s=0,i=0;i<this.length;i++)s=(o=-(0|this.words[i])+s)>>26,this.words[i]=67108863&o;return this.negative=1,this.strip()},o.prototype._wordDiv=function(e,t){var r=(this.length,e.length),n=this.clone(),i=e,a=0|i.words[i.length-1];0!==(r=26-this._countBits(a))&&(i=i.ushln(r),n.iushln(r),a=0|i.words[i.length-1]);var s,f=n.length-i.length;if("mod"!==t){(s=new o(null)).length=f+1,s.words=new Array(s.length);for(var c=0;c<s.length;c++)s.words[c]=0}var u=n.clone()._ishlnsubmul(i,1,f);0===u.negative&&(n=u,s&&(s.words[f]=1));for(var h=f-1;h>=0;h--){var d=67108864*(0|n.words[i.length+h])+(0|n.words[i.length+h-1]);for(d=Math.min(d/a|0,67108863),n._ishlnsubmul(i,d,h);0!==n.negative;)d--,n.negative=0,n._ishlnsubmul(i,1,h),n.isZero()||(n.negative^=1);s&&(s.words[h]=d)}return s&&s.strip(),n.strip(),"div"!==t&&0!==r&&n.iushrn(r),{div:s||null,mod:n}},o.prototype.divmod=function(e,t,r){return n(!e.isZero()),this.isZero()?{div:new o(0),mod:new o(0)}:0!==this.negative&&0===e.negative?(s=this.neg().divmod(e,t),"mod"!==t&&(i=s.div.neg()),"div"!==t&&(a=s.mod.neg(),r&&0!==a.negative&&a.iadd(e)),{div:i,mod:a}):0===this.negative&&0!==e.negative?(s=this.divmod(e.neg(),t),"mod"!==t&&(i=s.div.neg()),{div:i,mod:s.mod}):0!=(this.negative&e.negative)?(s=this.neg().divmod(e.neg(),t),"div"!==t&&(a=s.mod.neg(),r&&0!==a.negative&&a.isub(e)),{div:s.div,mod:a}):e.length>this.length||this.cmp(e)<0?{div:new o(0),mod:this}:1===e.length?"div"===t?{div:this.divn(e.words[0]),mod:null}:"mod"===t?{div:null,mod:new o(this.modn(e.words[0]))}:{div:this.divn(e.words[0]),mod:new o(this.modn(e.words[0]))}:this._wordDiv(e,t);var i,a,s},o.prototype.div=function(e){return this.divmod(e,"div",!1).div},o.prototype.mod=function(e){return this.divmod(e,"mod",!1).mod},o.prototype.umod=function(e){return this.divmod(e,"mod",!0).mod},o.prototype.divRound=function(e){var t=this.divmod(e);if(t.mod.isZero())return t.div;var r=0!==t.div.negative?t.mod.isub(e):t.mod,n=e.ushrn(1),i=e.andln(1),o=r.cmp(n);return o<0||1===i&&0===o?t.div:0!==t.div.negative?t.div.isubn(1):t.div.iaddn(1)},o.prototype.modn=function(e){n(e<=67108863);for(var t=(1<<26)%e,r=0,i=this.length-1;i>=0;i--)r=(t*r+(0|this.words[i]))%e;return r},o.prototype.idivn=function(e){n(e<=67108863);for(var t=0,r=this.length-1;r>=0;r--){var i=(0|this.words[r])+67108864*t;this.words[r]=i/e|0,t=i%e}return this.strip()},o.prototype.divn=function(e){return this.clone().idivn(e)},o.prototype.egcd=function(e){n(0===e.negative),n(!e.isZero());var t=this,r=e.clone();t=0!==t.negative?t.umod(e):t.clone();for(var i=new o(1),a=new o(0),s=new o(0),f=new o(1),c=0;t.isEven()&&r.isEven();)t.iushrn(1),r.iushrn(1),++c;for(var u=r.clone(),h=t.clone();!t.isZero();){for(var d=0,l=1;0==(t.words[0]&l)&&d<26;++d,l<<=1);if(d>0)for(t.iushrn(d);d-- >0;)(i.isOdd()||a.isOdd())&&(i.iadd(u),a.isub(h)),i.iushrn(1),a.iushrn(1);for(var p=0,b=1;0==(r.words[0]&b)&&p<26;++p,b<<=1);if(p>0)for(r.iushrn(p);p-- >0;)(s.isOdd()||f.isOdd())&&(s.iadd(u),f.isub(h)),s.iushrn(1),f.iushrn(1);t.cmp(r)>=0?(t.isub(r),i.isub(s),a.isub(f)):(r.isub(t),s.isub(i),f.isub(a))}return{a:s,b:f,gcd:r.iushln(c)}},o.prototype._invmp=function(e){n(0===e.negative),n(!e.isZero());var t=this,r=e.clone();t=0!==t.negative?t.umod(e):t.clone();for(var i,a=new o(1),s=new o(0),f=r.clone();t.cmpn(1)>0&&r.cmpn(1)>0;){for(var c=0,u=1;0==(t.words[0]&u)&&c<26;++c,u<<=1);if(c>0)for(t.iushrn(c);c-- >0;)a.isOdd()&&a.iadd(f),a.iushrn(1);for(var h=0,d=1;0==(r.words[0]&d)&&h<26;++h,d<<=1);if(h>0)for(r.iushrn(h);h-- >0;)s.isOdd()&&s.iadd(f),s.iushrn(1);t.cmp(r)>=0?(t.isub(r),a.isub(s)):(r.isub(t),s.isub(a))}return(i=0===t.cmpn(1)?a:s).cmpn(0)<0&&i.iadd(e),i},o.prototype.gcd=function(e){if(this.isZero())return e.abs();if(e.isZero())return this.abs();var t=this.clone(),r=e.clone();t.negative=0,r.negative=0;for(var n=0;t.isEven()&&r.isEven();n++)t.iushrn(1),r.iushrn(1);for(;;){for(;t.isEven();)t.iushrn(1);for(;r.isEven();)r.iushrn(1);var i=t.cmp(r);if(i<0){var o=t;t=r,r=o}else if(0===i||0===r.cmpn(1))break;t.isub(r)}return r.iushln(n)},o.prototype.invm=function(e){return this.egcd(e).a.umod(e)},o.prototype.isEven=function(){return 0==(1&this.words[0])},o.prototype.isOdd=function(){return 1==(1&this.words[0])},o.prototype.andln=function(e){return this.words[0]&e},o.prototype.bincn=function(e){n("number"==typeof e);var t=e%26,r=(e-t)/26,i=1<<t;if(this.length<=r)return this._expand(r+1),this.words[r]|=i,this;for(var o=i,a=r;0!==o&&a<this.length;a++){var s=0|this.words[a];o=(s+=o)>>>26,s&=67108863,this.words[a]=s}return 0!==o&&(this.words[a]=o,this.length++),this},o.prototype.isZero=function(){return 1===this.length&&0===this.words[0]},o.prototype.cmpn=function(e){var t,r=e<0;if(0!==this.negative&&!r)return-1;if(0===this.negative&&r)return 1;if(this.strip(),this.length>1)t=1;else{r&&(e=-e),n(e<=67108863,"Number is too big");var i=0|this.words[0];t=i===e?0:i<e?-1:1}return 0!==this.negative?0|-t:t},o.prototype.cmp=function(e){if(0!==this.negative&&0===e.negative)return-1;if(0===this.negative&&0!==e.negative)return 1;var t=this.ucmp(e);return 0!==this.negative?0|-t:t},o.prototype.ucmp=function(e){if(this.length>e.length)return 1;if(this.length<e.length)return-1;for(var t=0,r=this.length-1;r>=0;r--){var n=0|this.words[r],i=0|e.words[r];if(n!==i){n<i?t=-1:n>i&&(t=1);break}}return t},o.prototype.gtn=function(e){return 1===this.cmpn(e)},o.prototype.gt=function(e){return 1===this.cmp(e)},o.prototype.gten=function(e){return this.cmpn(e)>=0},o.prototype.gte=function(e){return this.cmp(e)>=0},o.prototype.ltn=function(e){return-1===this.cmpn(e)},o.prototype.lt=function(e){return-1===this.cmp(e)},o.prototype.lten=function(e){return this.cmpn(e)<=0},o.prototype.lte=function(e){return this.cmp(e)<=0},o.prototype.eqn=function(e){return 0===this.cmpn(e)},o.prototype.eq=function(e){return 0===this.cmp(e)},o.red=function(e){return new S(e)},o.prototype.toRed=function(e){return n(!this.red,"Already a number in reduction context"),n(0===this.negative,"red works only with positives"),e.convertTo(this)._forceRed(e)},o.prototype.fromRed=function(){return n(this.red,"fromRed works only with numbers in reduction context"),this.red.convertFrom(this)},o.prototype._forceRed=function(e){return this.red=e,this},o.prototype.forceRed=function(e){return n(!this.red,"Already a number in reduction context"),this._forceRed(e)},o.prototype.redAdd=function(e){return n(this.red,"redAdd works only with red numbers"),this.red.add(this,e)},o.prototype.redIAdd=function(e){return n(this.red,"redIAdd works only with red numbers"),this.red.iadd(this,e)},o.prototype.redSub=function(e){return n(this.red,"redSub works only with red numbers"),this.red.sub(this,e)},o.prototype.redISub=function(e){return n(this.red,"redISub works only with red numbers"),this.red.isub(this,e)},o.prototype.redShl=function(e){return n(this.red,"redShl works only with red numbers"),this.red.shl(this,e)},o.prototype.redMul=function(e){return n(this.red,"redMul works only with red numbers"),this.red._verify2(this,e),this.red.mul(this,e)},o.prototype.redIMul=function(e){return n(this.red,"redMul works only with red numbers"),this.red._verify2(this,e),this.red.imul(this,e)},o.prototype.redSqr=function(){return n(this.red,"redSqr works only with red numbers"),this.red._verify1(this),this.red.sqr(this)},o.prototype.redISqr=function(){return n(this.red,"redISqr works only with red numbers"),this.red._verify1(this),this.red.isqr(this)},o.prototype.redSqrt=function(){return n(this.red,"redSqrt works only with red numbers"),this.red._verify1(this),this.red.sqrt(this)},o.prototype.redInvm=function(){return n(this.red,"redInvm works only with red numbers"),this.red._verify1(this),this.red.invm(this)},o.prototype.redNeg=function(){return n(this.red,"redNeg works only with red numbers"),this.red._verify1(this),this.red.neg(this)},o.prototype.redPow=function(e){return n(this.red&&!e.red,"redPow(normalNum)"),this.red._verify1(this),this.red.pow(this,e)};var y={k256:null,p224:null,p192:null,p25519:null};function m(e,t){this.name=e,this.p=new o(t,16),this.n=this.p.bitLength(),this.k=new o(1).iushln(this.n).isub(this.p),this.tmp=this._tmp()}function v(){m.call(this,"k256","ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f")}function g(){m.call(this,"p224","ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001")}function w(){m.call(this,"p192","ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff")}function _(){m.call(this,"25519","7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed")}function S(e){if("string"==typeof e){var t=o._prime(e);this.m=t.p,this.prime=t}else n(e.gtn(1),"modulus must be greater than 1"),this.m=e,this.prime=null}function E(e){S.call(this,e),this.shift=this.m.bitLength(),this.shift%26!=0&&(this.shift+=26-this.shift%26),this.r=new o(1).iushln(this.shift),this.r2=this.imod(this.r.sqr()),this.rinv=this.r._invmp(this.m),this.minv=this.rinv.mul(this.r).isubn(1).div(this.m),this.minv=this.minv.umod(this.r),this.minv=this.r.sub(this.minv)}m.prototype._tmp=function(){var e=new o(null);return e.words=new Array(Math.ceil(this.n/13)),e},m.prototype.ireduce=function(e){var t,r=e;do{this.split(r,this.tmp),t=(r=(r=this.imulK(r)).iadd(this.tmp)).bitLength()}while(t>this.n);var n=t<this.n?-1:r.ucmp(this.p);return 0===n?(r.words[0]=0,r.length=1):n>0?r.isub(this.p):r.strip(),r},m.prototype.split=function(e,t){e.iushrn(this.n,0,t)},m.prototype.imulK=function(e){return e.imul(this.k)},i(v,m),v.prototype.split=function(e,t){for(var r=Math.min(e.length,9),n=0;n<r;n++)t.words[n]=e.words[n];if(t.length=r,e.length<=9)return e.words[0]=0,void(e.length=1);var i=e.words[9];for(t.words[t.length++]=4194303&i,n=10;n<e.length;n++){var o=0|e.words[n];e.words[n-10]=(4194303&o)<<4|i>>>22,i=o}i>>>=22,e.words[n-10]=i,0===i&&e.length>10?e.length-=10:e.length-=9},v.prototype.imulK=function(e){e.words[e.length]=0,e.words[e.length+1]=0,e.length+=2;for(var t=0,r=0;r<e.length;r++){var n=0|e.words[r];t+=977*n,e.words[r]=67108863&t,t=64*n+(t/67108864|0)}return 0===e.words[e.length-1]&&(e.length--,0===e.words[e.length-1]&&e.length--),e},i(g,m),i(w,m),i(_,m),_.prototype.imulK=function(e){for(var t=0,r=0;r<e.length;r++){var n=19*(0|e.words[r])+t,i=67108863&n;n>>>=26,e.words[r]=i,t=n}return 0!==t&&(e.words[e.length++]=t),e},o._prime=function(e){if(y[e])return y[e];var t;if("k256"===e)t=new v;else if("p224"===e)t=new g;else if("p192"===e)t=new w;else{if("p25519"!==e)throw new Error("Unknown prime "+e);t=new _}return y[e]=t,t},S.prototype._verify1=function(e){n(0===e.negative,"red works only with positives"),n(e.red,"red works only with red numbers")},S.prototype._verify2=function(e,t){n(0==(e.negative|t.negative),"red works only with positives"),n(e.red&&e.red===t.red,"red works only with red numbers")},S.prototype.imod=function(e){return this.prime?this.prime.ireduce(e)._forceRed(this):e.umod(this.m)._forceRed(this)},S.prototype.neg=function(e){return e.isZero()?e.clone():this.m.sub(e)._forceRed(this)},S.prototype.add=function(e,t){this._verify2(e,t);var r=e.add(t);return r.cmp(this.m)>=0&&r.isub(this.m),r._forceRed(this)},S.prototype.iadd=function(e,t){this._verify2(e,t);var r=e.iadd(t);return r.cmp(this.m)>=0&&r.isub(this.m),r},S.prototype.sub=function(e,t){this._verify2(e,t);var r=e.sub(t);return r.cmpn(0)<0&&r.iadd(this.m),r._forceRed(this)},S.prototype.isub=function(e,t){this._verify2(e,t);var r=e.isub(t);return r.cmpn(0)<0&&r.iadd(this.m),r},S.prototype.shl=function(e,t){return this._verify1(e),this.imod(e.ushln(t))},S.prototype.imul=function(e,t){return this._verify2(e,t),this.imod(e.imul(t))},S.prototype.mul=function(e,t){return this._verify2(e,t),this.imod(e.mul(t))},S.prototype.isqr=function(e){return this.imul(e,e.clone())},S.prototype.sqr=function(e){return this.mul(e,e)},S.prototype.sqrt=function(e){if(e.isZero())return e.clone();var t=this.m.andln(3);if(n(t%2==1),3===t){var r=this.m.add(new o(1)).iushrn(2);return this.pow(e,r)}for(var i=this.m.subn(1),a=0;!i.isZero()&&0===i.andln(1);)a++,i.iushrn(1);n(!i.isZero());var s=new o(1).toRed(this),f=s.redNeg(),c=this.m.subn(1).iushrn(1),u=this.m.bitLength();for(u=new o(2*u*u).toRed(this);0!==this.pow(u,c).cmp(f);)u.redIAdd(f);for(var h=this.pow(u,i),d=this.pow(e,i.addn(1).iushrn(1)),l=this.pow(e,i),p=a;0!==l.cmp(s);){for(var b=l,y=0;0!==b.cmp(s);y++)b=b.redSqr();n(y<p);var m=this.pow(h,new o(1).iushln(p-y-1));d=d.redMul(m),h=m.redSqr(),l=l.redMul(h),p=y}return d},S.prototype.invm=function(e){var t=e._invmp(this.m);return 0!==t.negative?(t.negative=0,this.imod(t).redNeg()):this.imod(t)},S.prototype.pow=function(e,t){if(t.isZero())return new o(1).toRed(this);if(0===t.cmpn(1))return e.clone();var r=new Array(16);r[0]=new o(1).toRed(this),r[1]=e;for(var n=2;n<r.length;n++)r[n]=this.mul(r[n-1],e);var i=r[0],a=0,s=0,f=t.bitLength()%26;for(0===f&&(f=26),n=t.length-1;n>=0;n--){for(var c=t.words[n],u=f-1;u>=0;u--){var h=c>>u&1;i!==r[0]&&(i=this.sqr(i)),0!==h||0!==a?(a<<=1,a|=h,(4===++s||0===n&&0===u)&&(i=this.mul(i,r[a]),s=0,a=0)):s=0}f=26}return i},S.prototype.convertTo=function(e){var t=e.umod(this.m);return t===e?t.clone():t},S.prototype.convertFrom=function(e){var t=e.clone();return t.red=null,t},o.mont=function(e){return new E(e)},i(E,S),E.prototype.convertTo=function(e){return this.imod(e.ushln(this.shift))},E.prototype.convertFrom=function(e){var t=this.imod(e.mul(this.rinv));return t.red=null,t},E.prototype.imul=function(e,t){if(e.isZero()||t.isZero())return e.words[0]=0,e.length=1,e;var r=e.imul(t),n=r.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),i=r.isub(n).iushrn(this.shift),o=i;return i.cmp(this.m)>=0?o=i.isub(this.m):i.cmpn(0)<0&&(o=i.iadd(this.m)),o._forceRed(this)},E.prototype.mul=function(e,t){if(e.isZero()||t.isZero())return new o(0)._forceRed(this);var r=e.mul(t),n=r.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),i=r.isub(n).iushrn(this.shift),a=i;return i.cmp(this.m)>=0?a=i.isub(this.m):i.cmpn(0)<0&&(a=i.iadd(this.m)),a._forceRed(this)},E.prototype.invm=function(e){return this.imod(e._invmp(this.m).mul(this.r2))._forceRed(this)}}(e,this)}).call(this,r(140)(e))},function(e,t){var r,n,i=e.exports={};function o(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function s(e){if(r===setTimeout)return setTimeout(e,0);if((r===o||!r)&&setTimeout)return r=setTimeout,setTimeout(e,0);try{return r(e,0)}catch(t){try{return r.call(null,e,0)}catch(t){return r.call(this,e,0)}}}!function(){try{r="function"==typeof setTimeout?setTimeout:o}catch(e){r=o}try{n="function"==typeof clearTimeout?clearTimeout:a}catch(e){n=a}}();var f,c=[],u=!1,h=-1;function d(){u&&f&&(u=!1,f.length?c=f.concat(c):h=-1,c.length&&l())}function l(){if(!u){var e=s(d);u=!0;for(var t=c.length;t;){for(f=c,c=[];++h<t;)f&&f[h].run();h=-1,t=c.length}f=null,u=!1,function(e){if(n===clearTimeout)return clearTimeout(e);if((n===a||!n)&&clearTimeout)return n=clearTimeout,clearTimeout(e);try{n(e)}catch(t){try{return n.call(null,e)}catch(t){return n.call(this,e)}}}(e)}}function p(e,t){this.fun=e,this.array=t}function b(){}i.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)t[r-1]=arguments[r];c.push(new p(e,t)),1!==c.length||u||s(l)},p.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=b,i.addListener=b,i.once=b,i.off=b,i.removeListener=b,i.removeAllListeners=b,i.emit=b,i.prependListener=b,i.prependOnceListener=b,i.listeners=function(e){return[]},i.binding=function(e){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(e){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},function(e,t,r){"use strict";var n=r(87),i=r(199),o=Object.prototype.toString;function a(e){return"[object Array]"===o.call(e)}function s(e){return null!==e&&"object"==typeof e}function f(e){return"[object Function]"===o.call(e)}function c(e,t){if(null!=e)if("object"!=typeof e&&(e=[e]),a(e))for(var r=0,n=e.length;r<n;r++)t.call(null,e[r],r,e);else for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&t.call(null,e[i],i,e)}e.exports={isArray:a,isArrayBuffer:function(e){return"[object ArrayBuffer]"===o.call(e)},isBuffer:i,isFormData:function(e){return"undefined"!=typeof FormData&&e instanceof FormData},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:s,isUndefined:function(e){return void 0===e},isDate:function(e){return"[object Date]"===o.call(e)},isFile:function(e){return"[object File]"===o.call(e)},isBlob:function(e){return"[object Blob]"===o.call(e)},isFunction:f,isStream:function(e){return s(e)&&f(e.pipe)},isURLSearchParams:function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&("undefined"!=typeof window&&"undefined"!=typeof document)},forEach:c,merge:function e(){var t={};function r(r,n){"object"==typeof t[n]&&"object"==typeof r?t[n]=e(t[n],r):t[n]=r}for(var n=0,i=arguments.length;n<i;n++)c(arguments[n],r);return t},deepMerge:function e(){var t={};function r(r,n){"object"==typeof t[n]&&"object"==typeof r?t[n]=e(t[n],r):t[n]="object"==typeof r?e({},r):r}for(var n=0,i=arguments.length;n<i;n++)c(arguments[n],r);return t},extend:function(e,t,r){return c(t,(function(t,i){e[i]=r&&"function"==typeof t?n(t,r):t})),e},trim:function(e){return e.replace(/^\s*/,"").replace(/\s*$/,"")}}},function(e,t){function r(e,t){if(!e)throw new Error(t||"Assertion failed")}e.exports=r,r.equal=function(e,t,r){if(e!=t)throw new Error(r||"Assertion failed: "+e+" != "+t)}},function(e,t,r){"use strict";var n=t,i=r(3),o=r(6),a=r(69);n.assert=o,n.toArray=a.toArray,n.zero2=a.zero2,n.toHex=a.toHex,n.encode=a.encode,n.getNAF=function(e,t){for(var r=[],n=1<<t+1,i=e.clone();i.cmpn(1)>=0;){var o;if(i.isOdd()){var a=i.andln(n-1);o=a>(n>>1)-1?(n>>1)-a:a,i.isubn(o)}else o=0;r.push(o);for(var s=0!==i.cmpn(0)&&0===i.andln(n-1)?t+1:1,f=1;f<s;f++)r.push(0);i.iushrn(s)}return r},n.getJSF=function(e,t){var r=[[],[]];e=e.clone(),t=t.clone();for(var n=0,i=0;e.cmpn(-n)>0||t.cmpn(-i)>0;){var o,a,s,f=e.andln(3)+n&3,c=t.andln(3)+i&3;if(3===f&&(f=-1),3===c&&(c=-1),0==(1&f))o=0;else o=3!==(s=e.andln(7)+n&7)&&5!==s||2!==c?f:-f;if(r[0].push(o),0==(1&c))a=0;else a=3!==(s=t.andln(7)+i&7)&&5!==s||2!==f?c:-c;r[1].push(a),2*n===o+1&&(n=1-n),2*i===a+1&&(i=1-i),e.iushrn(1),t.iushrn(1)}return r},n.cachedProperty=function(e,t,r){var n="_"+t;e.prototype[t]=function(){return void 0!==this[n]?this[n]:this[n]=r.call(this)}},n.parseBytes=function(e){return"string"==typeof e?n.toArray(e,"hex"):e},n.intFromLE=function(e){return new i(e,"hex","le")}},function(e,t,r){"use strict";var n=r(6),i=r(1);function o(e,t){return 55296==(64512&e.charCodeAt(t))&&(!(t<0||t+1>=e.length)&&56320==(64512&e.charCodeAt(t+1)))}function a(e){return(e>>>24|e>>>8&65280|e<<8&16711680|(255&e)<<24)>>>0}function s(e){return 1===e.length?"0"+e:e}function f(e){return 7===e.length?"0"+e:6===e.length?"00"+e:5===e.length?"000"+e:4===e.length?"0000"+e:3===e.length?"00000"+e:2===e.length?"000000"+e:1===e.length?"0000000"+e:e}t.inherits=i,t.toArray=function(e,t){if(Array.isArray(e))return e.slice();if(!e)return[];var r=[];if("string"==typeof e)if(t){if("hex"===t)for((e=e.replace(/[^a-z0-9]+/gi,"")).length%2!=0&&(e="0"+e),i=0;i<e.length;i+=2)r.push(parseInt(e[i]+e[i+1],16))}else for(var n=0,i=0;i<e.length;i++){var a=e.charCodeAt(i);a<128?r[n++]=a:a<2048?(r[n++]=a>>6|192,r[n++]=63&a|128):o(e,i)?(a=65536+((1023&a)<<10)+(1023&e.charCodeAt(++i)),r[n++]=a>>18|240,r[n++]=a>>12&63|128,r[n++]=a>>6&63|128,r[n++]=63&a|128):(r[n++]=a>>12|224,r[n++]=a>>6&63|128,r[n++]=63&a|128)}else for(i=0;i<e.length;i++)r[i]=0|e[i];return r},t.toHex=function(e){for(var t="",r=0;r<e.length;r++)t+=s(e[r].toString(16));return t},t.htonl=a,t.toHex32=function(e,t){for(var r="",n=0;n<e.length;n++){var i=e[n];"little"===t&&(i=a(i)),r+=f(i.toString(16))}return r},t.zero2=s,t.zero8=f,t.join32=function(e,t,r,i){var o=r-t;n(o%4==0);for(var a=new Array(o/4),s=0,f=t;s<a.length;s++,f+=4){var c;c="big"===i?e[f]<<24|e[f+1]<<16|e[f+2]<<8|e[f+3]:e[f+3]<<24|e[f+2]<<16|e[f+1]<<8|e[f],a[s]=c>>>0}return a},t.split32=function(e,t){for(var r=new Array(4*e.length),n=0,i=0;n<e.length;n++,i+=4){var o=e[n];"big"===t?(r[i]=o>>>24,r[i+1]=o>>>16&255,r[i+2]=o>>>8&255,r[i+3]=255&o):(r[i+3]=o>>>24,r[i+2]=o>>>16&255,r[i+1]=o>>>8&255,r[i]=255&o)}return r},t.rotr32=function(e,t){return e>>>t|e<<32-t},t.rotl32=function(e,t){return e<<t|e>>>32-t},t.sum32=function(e,t){return e+t>>>0},t.sum32_3=function(e,t,r){return e+t+r>>>0},t.sum32_4=function(e,t,r,n){return e+t+r+n>>>0},t.sum32_5=function(e,t,r,n,i){return e+t+r+n+i>>>0},t.sum64=function(e,t,r,n){var i=e[t],o=n+e[t+1]>>>0,a=(o<n?1:0)+r+i;e[t]=a>>>0,e[t+1]=o},t.sum64_hi=function(e,t,r,n){return(t+n>>>0<t?1:0)+e+r>>>0},t.sum64_lo=function(e,t,r,n){return t+n>>>0},t.sum64_4_hi=function(e,t,r,n,i,o,a,s){var f=0,c=t;return f+=(c=c+n>>>0)<t?1:0,f+=(c=c+o>>>0)<o?1:0,e+r+i+a+(f+=(c=c+s>>>0)<s?1:0)>>>0},t.sum64_4_lo=function(e,t,r,n,i,o,a,s){return t+n+o+s>>>0},t.sum64_5_hi=function(e,t,r,n,i,o,a,s,f,c){var u=0,h=t;return u+=(h=h+n>>>0)<t?1:0,u+=(h=h+o>>>0)<o?1:0,u+=(h=h+s>>>0)<s?1:0,e+r+i+a+f+(u+=(h=h+c>>>0)<c?1:0)>>>0},t.sum64_5_lo=function(e,t,r,n,i,o,a,s,f,c){return t+n+o+s+c>>>0},t.rotr64_hi=function(e,t,r){return(t<<32-r|e>>>r)>>>0},t.rotr64_lo=function(e,t,r){return(e<<32-r|t>>>r)>>>0},t.shr64_hi=function(e,t,r){return e>>>r},t.shr64_lo=function(e,t,r){return(e<<32-r|t>>>r)>>>0}},function(e,t){var r;r=function(){return this}();try{r=r||new Function("return this")()}catch(e){"object"==typeof window&&(r=window)}e.exports=r},function(e,t,r){var n=r(0).Buffer,i=r(12).Transform,o=r(32).StringDecoder;function a(e){i.call(this),this.hashMode="string"==typeof e,this.hashMode?this[e]=this._finalOrDigest:this.final=this._finalOrDigest,this._final&&(this.__final=this._final,this._final=null),this._decoder=null,this._encoding=null}r(1)(a,i),a.prototype.update=function(e,t,r){"string"==typeof e&&(e=n.from(e,t));var i=this._update(e);return this.hashMode?this:(r&&(i=this._toString(i,r)),i)},a.prototype.setAutoPadding=function(){},a.prototype.getAuthTag=function(){throw new Error("trying to get auth tag in unsupported state")},a.prototype.setAuthTag=function(){throw new Error("trying to set auth tag in unsupported state")},a.prototype.setAAD=function(){throw new Error("trying to set aad in unsupported state")},a.prototype._transform=function(e,t,r){var n;try{this.hashMode?this._update(e):this.push(this._update(e))}catch(e){n=e}finally{r(n)}},a.prototype._flush=function(e){var t;try{this.push(this.__final())}catch(e){t=e}e(t)},a.prototype._finalOrDigest=function(e){var t=this.__final()||n.alloc(0);return e&&(t=this._toString(t,e,!0)),t},a.prototype._toString=function(e,t,r){if(this._decoder||(this._decoder=new o(t),this._encoding=t),this._encoding!==t)throw new Error("can't switch encodings");var n=this._decoder.write(e);return r&&(n+=this._decoder.end()),n},e.exports=a},function(e,t,r){"use strict";var n=r(21),i=Object.keys||function(e){var t=[];for(var r in e)t.push(r);return t};e.exports=h;var o=r(15);o.inherits=r(1);var a=r(47),s=r(31);o.inherits(h,a);for(var f=i(s.prototype),c=0;c<f.length;c++){var u=f[c];h.prototype[u]||(h.prototype[u]=s.prototype[u])}function h(e){if(!(this instanceof h))return new h(e);a.call(this,e),s.call(this,e),e&&!1===e.readable&&(this.readable=!1),e&&!1===e.writable&&(this.writable=!1),this.allowHalfOpen=!0,e&&!1===e.allowHalfOpen&&(this.allowHalfOpen=!1),this.once("end",d)}function d(){this.allowHalfOpen||this._writableState.ended||n.nextTick(l,this)}function l(e){e.end()}Object.defineProperty(h.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),Object.defineProperty(h.prototype,"destroyed",{get:function(){return void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed&&this._writableState.destroyed)},set:function(e){void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed=e,this._writableState.destroyed=e)}}),h.prototype._destroy=function(e,t){this.push(null),this.end(),n.nextTick(t,e)}},function(e,t,r){e.exports=i;var n=r(29).EventEmitter;function i(){n.call(this)}r(1)(i,n),i.Readable=r(30),i.Writable=r(108),i.Duplex=r(109),i.Transform=r(110),i.PassThrough=r(111),i.Stream=i,i.prototype.pipe=function(e,t){var r=this;function i(t){e.writable&&!1===e.write(t)&&r.pause&&r.pause()}function o(){r.readable&&r.resume&&r.resume()}r.on("data",i),e.on("drain",o),e._isStdio||t&&!1===t.end||(r.on("end",s),r.on("close",f));var a=!1;function s(){a||(a=!0,e.end())}function f(){a||(a=!0,"function"==typeof e.destroy&&e.destroy())}function c(e){if(u(),0===n.listenerCount(this,"error"))throw e}function u(){r.removeListener("data",i),e.removeListener("drain",o),r.removeListener("end",s),r.removeListener("close",f),r.removeListener("error",c),e.removeListener("error",c),r.removeListener("end",u),r.removeListener("close",u),e.removeListener("close",u)}return r.on("error",c),e.on("error",c),r.on("end",u),r.on("close",u),e.on("close",u),e.emit("pipe",r),e}},function(e,t,r){"use strict";(function(t,n){var i=65536,o=4294967295;var a=r(0).Buffer,s=t.crypto||t.msCrypto;s&&s.getRandomValues?e.exports=function(e,t){if(e>o)throw new RangeError("requested too many random bytes");var r=a.allocUnsafe(e);if(e>0)if(e>i)for(var f=0;f<e;f+=i)s.getRandomValues(r.slice(f,f+i));else s.getRandomValues(r);if("function"==typeof t)return n.nextTick((function(){t(null,r)}));return r}:e.exports=function(){throw new Error("Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11")}}).call(this,r(9),r(4))},function(e,t,r){var n=r(0).Buffer;function i(e,t){this._block=n.alloc(e),this._finalSize=t,this._blockSize=e,this._len=0}i.prototype.update=function(e,t){"string"==typeof e&&(t=t||"utf8",e=n.from(e,t));for(var r=this._block,i=this._blockSize,o=e.length,a=this._len,s=0;s<o;){for(var f=a%i,c=Math.min(o-s,i-f),u=0;u<c;u++)r[f+u]=e[s+u];s+=c,(a+=c)%i==0&&this._update(r)}return this._len+=o,this},i.prototype.digest=function(e){var t=this._len%this._blockSize;this._block[t]=128,this._block.fill(0,t+1),t>=this._finalSize&&(this._update(this._block),this._block.fill(0));var r=8*this._len;if(r<=4294967295)this._block.writeUInt32BE(r,this._blockSize-4);else{var n=(4294967295&r)>>>0,i=(r-n)/4294967296;this._block.writeUInt32BE(i,this._blockSize-8),this._block.writeUInt32BE(n,this._blockSize-4)}this._update(this._block);var o=this._hash();return e?o.toString(e):o},i.prototype._update=function(){throw new Error("_update must be implemented by subclass")},e.exports=i},function(e,t,r){(function(e){function r(e){return Object.prototype.toString.call(e)}t.isArray=function(e){return Array.isArray?Array.isArray(e):"[object Array]"===r(e)},t.isBoolean=function(e){return"boolean"==typeof e},t.isNull=function(e){return null===e},t.isNullOrUndefined=function(e){return null==e},t.isNumber=function(e){return"number"==typeof e},t.isString=function(e){return"string"==typeof e},t.isSymbol=function(e){return"symbol"==typeof e},t.isUndefined=function(e){return void 0===e},t.isRegExp=function(e){return"[object RegExp]"===r(e)},t.isObject=function(e){return"object"==typeof e&&null!==e},t.isDate=function(e){return"[object Date]"===r(e)},t.isError=function(e){return"[object Error]"===r(e)||e instanceof Error},t.isFunction=function(e){return"function"==typeof e},t.isPrimitive=function(e){return null===e||"boolean"==typeof e||"number"==typeof e||"string"==typeof e||"symbol"==typeof e||void 0===e},t.isBuffer=e.isBuffer}).call(this,r(2).Buffer)},function(e,t,r){"use strict";var n=r(1),i=r(33),o=r(34),a=r(35),s=r(10);function f(e){s.call(this,"digest"),this._hash=e}n(f,s),f.prototype._update=function(e){this._hash.update(e)},f.prototype._final=function(){return this._hash.digest()},e.exports=function(e){return"md5"===(e=e.toLowerCase())?new i:"rmd160"===e||"ripemd160"===e?new o:new f(a(e))}},function(e,t,r){(function(t){e.exports=function(e,r){for(var n=Math.min(e.length,r.length),i=new t(n),o=0;o<n;++o)i[o]=e[o]^r[o];return i}}).call(this,r(2).Buffer)},function(e,t,r){"use strict";var n=r(8),i=r(6);function o(){this.pending=null,this.pendingTotal=0,this.blockSize=this.constructor.blockSize,this.outSize=this.constructor.outSize,this.hmacStrength=this.constructor.hmacStrength,this.padLength=this.constructor.padLength/8,this.endian="big",this._delta8=this.blockSize/8,this._delta32=this.blockSize/32}t.BlockHash=o,o.prototype.update=function(e,t){if(e=n.toArray(e,t),this.pending?this.pending=this.pending.concat(e):this.pending=e,this.pendingTotal+=e.length,this.pending.length>=this._delta8){var r=(e=this.pending).length%this._delta8;this.pending=e.slice(e.length-r,e.length),0===this.pending.length&&(this.pending=null),e=n.join32(e,0,e.length-r,this.endian);for(var i=0;i<e.length;i+=this._delta32)this._update(e,i,i+this._delta32)}return this},o.prototype.digest=function(e){return this.update(this._pad()),i(null===this.pending),this._digest(e)},o.prototype._pad=function(){var e=this.pendingTotal,t=this._delta8,r=t-(e+this.padLength)%t,n=new Array(r+this.padLength);n[0]=128;for(var i=1;i<r;i++)n[i]=0;if(e<<=3,"big"===this.endian){for(var o=8;o<this.padLength;o++)n[i++]=0;n[i++]=0,n[i++]=0,n[i++]=0,n[i++]=0,n[i++]=e>>>24&255,n[i++]=e>>>16&255,n[i++]=e>>>8&255,n[i++]=255&e}else for(n[i++]=255&e,n[i++]=e>>>8&255,n[i++]=e>>>16&255,n[i++]=e>>>24&255,n[i++]=0,n[i++]=0,n[i++]=0,n[i++]=0,o=8;o<this.padLength;o++)n[i++]=0;return n}},function(e,t,r){var n=t;n.bignum=r(3),n.define=r(166).define,n.base=r(20),n.constants=r(75),n.decoders=r(171),n.encoders=r(173)},function(e,t,r){var n=t;n.Reporter=r(168).Reporter,n.DecoderBuffer=r(74).DecoderBuffer,n.EncoderBuffer=r(74).EncoderBuffer,n.Node=r(169)},function(e,t,r){"use strict";(function(t){void 0===t||!t.version||0===t.version.indexOf("v0.")||0===t.version.indexOf("v1.")&&0!==t.version.indexOf("v1.8.")?e.exports={nextTick:function(e,r,n,i){if("function"!=typeof e)throw new TypeError('"callback" argument must be a function');var o,a,s=arguments.length;switch(s){case 0:case 1:return t.nextTick(e);case 2:return t.nextTick((function(){e.call(null,r)}));case 3:return t.nextTick((function(){e.call(null,r,n)}));case 4:return t.nextTick((function(){e.call(null,r,n,i)}));default:for(o=new Array(s-1),a=0;a<o.length;)o[a++]=arguments[a];return t.nextTick((function(){e.apply(null,o)}))}}}:e.exports=t}).call(this,r(4))},function(e,t,r){(function(e){var n=Object.getOwnPropertyDescriptors||function(e){for(var t=Object.keys(e),r={},n=0;n<t.length;n++)r[t[n]]=Object.getOwnPropertyDescriptor(e,t[n]);return r},i=/%[sdj%]/g;t.format=function(e){if(!m(e)){for(var t=[],r=0;r<arguments.length;r++)t.push(s(arguments[r]));return t.join(" ")}r=1;for(var n=arguments,o=n.length,a=String(e).replace(i,(function(e){if("%%"===e)return"%";if(r>=o)return e;switch(e){case"%s":return String(n[r++]);case"%d":return Number(n[r++]);case"%j":try{return JSON.stringify(n[r++])}catch(e){return"[Circular]"}default:return e}})),f=n[r];r<o;f=n[++r])b(f)||!w(f)?a+=" "+f:a+=" "+s(f);return a},t.deprecate=function(r,n){if(void 0!==e&&!0===e.noDeprecation)return r;if(void 0===e)return function(){return t.deprecate(r,n).apply(this,arguments)};var i=!1;return function(){if(!i){if(e.throwDeprecation)throw new Error(n);e.traceDeprecation?console.trace(n):console.error(n),i=!0}return r.apply(this,arguments)}};var o,a={};function s(e,r){var n={seen:[],stylize:c};return arguments.length>=3&&(n.depth=arguments[2]),arguments.length>=4&&(n.colors=arguments[3]),p(r)?n.showHidden=r:r&&t._extend(n,r),v(n.showHidden)&&(n.showHidden=!1),v(n.depth)&&(n.depth=2),v(n.colors)&&(n.colors=!1),v(n.customInspect)&&(n.customInspect=!0),n.colors&&(n.stylize=f),u(n,e,n.depth)}function f(e,t){var r=s.styles[t];return r?"["+s.colors[r][0]+"m"+e+"["+s.colors[r][1]+"m":e}function c(e,t){return e}function u(e,r,n){if(e.customInspect&&r&&E(r.inspect)&&r.inspect!==t.inspect&&(!r.constructor||r.constructor.prototype!==r)){var i=r.inspect(n,e);return m(i)||(i=u(e,i,n)),i}var o=function(e,t){if(v(t))return e.stylize("undefined","undefined");if(m(t)){var r="'"+JSON.stringify(t).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return e.stylize(r,"string")}if(y(t))return e.stylize(""+t,"number");if(p(t))return e.stylize(""+t,"boolean");if(b(t))return e.stylize("null","null")}(e,r);if(o)return o;var a=Object.keys(r),s=function(e){var t={};return e.forEach((function(e,r){t[e]=!0})),t}(a);if(e.showHidden&&(a=Object.getOwnPropertyNames(r)),S(r)&&(a.indexOf("message")>=0||a.indexOf("description")>=0))return h(r);if(0===a.length){if(E(r)){var f=r.name?": "+r.name:"";return e.stylize("[Function"+f+"]","special")}if(g(r))return e.stylize(RegExp.prototype.toString.call(r),"regexp");if(_(r))return e.stylize(Date.prototype.toString.call(r),"date");if(S(r))return h(r)}var c,w="",M=!1,k=["{","}"];(l(r)&&(M=!0,k=["[","]"]),E(r))&&(w=" [Function"+(r.name?": "+r.name:"")+"]");return g(r)&&(w=" "+RegExp.prototype.toString.call(r)),_(r)&&(w=" "+Date.prototype.toUTCString.call(r)),S(r)&&(w=" "+h(r)),0!==a.length||M&&0!=r.length?n<0?g(r)?e.stylize(RegExp.prototype.toString.call(r),"regexp"):e.stylize("[Object]","special"):(e.seen.push(r),c=M?function(e,t,r,n,i){for(var o=[],a=0,s=t.length;a<s;++a)B(t,String(a))?o.push(d(e,t,r,n,String(a),!0)):o.push("");return i.forEach((function(i){i.match(/^\d+$/)||o.push(d(e,t,r,n,i,!0))})),o}(e,r,n,s,a):a.map((function(t){return d(e,r,n,s,t,M)})),e.seen.pop(),function(e,t,r){if(e.reduce((function(e,t){return 0,t.indexOf("\n")>=0&&0,e+t.replace(/\u001b\[\d\d?m/g,"").length+1}),0)>60)return r[0]+(""===t?"":t+"\n ")+" "+e.join(",\n  ")+" "+r[1];return r[0]+t+" "+e.join(", ")+" "+r[1]}(c,w,k)):k[0]+w+k[1]}function h(e){return"["+Error.prototype.toString.call(e)+"]"}function d(e,t,r,n,i,o){var a,s,f;if((f=Object.getOwnPropertyDescriptor(t,i)||{value:t[i]}).get?s=f.set?e.stylize("[Getter/Setter]","special"):e.stylize("[Getter]","special"):f.set&&(s=e.stylize("[Setter]","special")),B(n,i)||(a="["+i+"]"),s||(e.seen.indexOf(f.value)<0?(s=b(r)?u(e,f.value,null):u(e,f.value,r-1)).indexOf("\n")>-1&&(s=o?s.split("\n").map((function(e){return"  "+e})).join("\n").substr(2):"\n"+s.split("\n").map((function(e){return"   "+e})).join("\n")):s=e.stylize("[Circular]","special")),v(a)){if(o&&i.match(/^\d+$/))return s;(a=JSON.stringify(""+i)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(a=a.substr(1,a.length-2),a=e.stylize(a,"name")):(a=a.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),a=e.stylize(a,"string"))}return a+": "+s}function l(e){return Array.isArray(e)}function p(e){return"boolean"==typeof e}function b(e){return null===e}function y(e){return"number"==typeof e}function m(e){return"string"==typeof e}function v(e){return void 0===e}function g(e){return w(e)&&"[object RegExp]"===M(e)}function w(e){return"object"==typeof e&&null!==e}function _(e){return w(e)&&"[object Date]"===M(e)}function S(e){return w(e)&&("[object Error]"===M(e)||e instanceof Error)}function E(e){return"function"==typeof e}function M(e){return Object.prototype.toString.call(e)}function k(e){return e<10?"0"+e.toString(10):e.toString(10)}t.debuglog=function(r){if(v(o)&&(o=e.env.NODE_DEBUG||""),r=r.toUpperCase(),!a[r])if(new RegExp("\\b"+r+"\\b","i").test(o)){var n=e.pid;a[r]=function(){var e=t.format.apply(t,arguments);console.error("%s %d: %s",r,n,e)}}else a[r]=function(){};return a[r]},t.inspect=s,s.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},s.styles={special:"cyan",number:"yellow",boolean:"yellow",undefined:"grey",null:"bold",string:"green",date:"magenta",regexp:"red"},t.isArray=l,t.isBoolean=p,t.isNull=b,t.isNullOrUndefined=function(e){return null==e},t.isNumber=y,t.isString=m,t.isSymbol=function(e){return"symbol"==typeof e},t.isUndefined=v,t.isRegExp=g,t.isObject=w,t.isDate=_,t.isError=S,t.isFunction=E,t.isPrimitive=function(e){return null===e||"boolean"==typeof e||"number"==typeof e||"string"==typeof e||"symbol"==typeof e||void 0===e},t.isBuffer=r(112);var x=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];function A(){var e=new Date,t=[k(e.getHours()),k(e.getMinutes()),k(e.getSeconds())].join(":");return[e.getDate(),x[e.getMonth()],t].join(" ")}function B(e,t){return Object.prototype.hasOwnProperty.call(e,t)}t.log=function(){console.log("%s - %s",A(),t.format.apply(t,arguments))},t.inherits=r(1),t._extend=function(e,t){if(!t||!w(t))return e;for(var r=Object.keys(t),n=r.length;n--;)e[r[n]]=t[r[n]];return e};var I="undefined"!=typeof Symbol?Symbol("util.promisify.custom"):void 0;function j(e,t){if(!e){var r=new Error("Promise was rejected with a falsy value");r.reason=e,e=r}return t(e)}t.promisify=function(e){if("function"!=typeof e)throw new TypeError('The "original" argument must be of type Function');if(I&&e[I]){var t;if("function"!=typeof(t=e[I]))throw new TypeError('The "util.promisify.custom" argument must be of type Function');return Object.defineProperty(t,I,{value:t,enumerable:!1,writable:!1,configurable:!0}),t}function t(){for(var t,r,n=new Promise((function(e,n){t=e,r=n})),i=[],o=0;o<arguments.length;o++)i.push(arguments[o]);i.push((function(e,n){e?r(e):t(n)}));try{e.apply(this,i)}catch(e){r(e)}return n}return Object.setPrototypeOf(t,Object.getPrototypeOf(e)),I&&Object.defineProperty(t,I,{value:t,enumerable:!1,writable:!1,configurable:!0}),Object.defineProperties(t,n(e))},t.promisify.custom=I,t.callbackify=function(t){if("function"!=typeof t)throw new TypeError('The "original" argument must be of type Function');function r(){for(var r=[],n=0;n<arguments.length;n++)r.push(arguments[n]);var i=r.pop();if("function"!=typeof i)throw new TypeError("The last argument must be of type Function");var o=this,a=function(){return i.apply(o,arguments)};t.apply(this,r).then((function(t){e.nextTick(a,null,t)}),(function(t){e.nextTick(j,t,a)}))}return Object.setPrototypeOf(r,Object.getPrototypeOf(t)),Object.defineProperties(r,n(t)),r}}).call(this,r(4))},function(e,t,r){var n=r(0).Buffer;function i(e){n.isBuffer(e)||(e=n.from(e));for(var t=e.length/4|0,r=new Array(t),i=0;i<t;i++)r[i]=e.readUInt32BE(4*i);return r}function o(e){for(;0<e.length;e++)e[0]=0}function a(e,t,r,n,i){for(var o,a,s,f,c=r[0],u=r[1],h=r[2],d=r[3],l=e[0]^t[0],p=e[1]^t[1],b=e[2]^t[2],y=e[3]^t[3],m=4,v=1;v<i;v++)o=c[l>>>24]^u[p>>>16&255]^h[b>>>8&255]^d[255&y]^t[m++],a=c[p>>>24]^u[b>>>16&255]^h[y>>>8&255]^d[255&l]^t[m++],s=c[b>>>24]^u[y>>>16&255]^h[l>>>8&255]^d[255&p]^t[m++],f=c[y>>>24]^u[l>>>16&255]^h[p>>>8&255]^d[255&b]^t[m++],l=o,p=a,b=s,y=f;return o=(n[l>>>24]<<24|n[p>>>16&255]<<16|n[b>>>8&255]<<8|n[255&y])^t[m++],a=(n[p>>>24]<<24|n[b>>>16&255]<<16|n[y>>>8&255]<<8|n[255&l])^t[m++],s=(n[b>>>24]<<24|n[y>>>16&255]<<16|n[l>>>8&255]<<8|n[255&p])^t[m++],f=(n[y>>>24]<<24|n[l>>>16&255]<<16|n[p>>>8&255]<<8|n[255&b])^t[m++],[o>>>=0,a>>>=0,s>>>=0,f>>>=0]}var s=[0,1,2,4,8,16,32,64,128,27,54],f=function(){for(var e=new Array(256),t=0;t<256;t++)e[t]=t<128?t<<1:t<<1^283;for(var r=[],n=[],i=[[],[],[],[]],o=[[],[],[],[]],a=0,s=0,f=0;f<256;++f){var c=s^s<<1^s<<2^s<<3^s<<4;c=c>>>8^255&c^99,r[a]=c,n[c]=a;var u=e[a],h=e[u],d=e[h],l=257*e[c]^16843008*c;i[0][a]=l<<24|l>>>8,i[1][a]=l<<16|l>>>16,i[2][a]=l<<8|l>>>24,i[3][a]=l,l=16843009*d^65537*h^257*u^16843008*a,o[0][c]=l<<24|l>>>8,o[1][c]=l<<16|l>>>16,o[2][c]=l<<8|l>>>24,o[3][c]=l,0===a?a=s=1:(a=u^e[e[e[d^u]]],s^=e[e[s]])}return{SBOX:r,INV_SBOX:n,SUB_MIX:i,INV_SUB_MIX:o}}();function c(e){this._key=i(e),this._reset()}c.blockSize=16,c.keySize=32,c.prototype.blockSize=c.blockSize,c.prototype.keySize=c.keySize,c.prototype._reset=function(){for(var e=this._key,t=e.length,r=t+6,n=4*(r+1),i=[],o=0;o<t;o++)i[o]=e[o];for(o=t;o<n;o++){var a=i[o-1];o%t==0?(a=a<<8|a>>>24,a=f.SBOX[a>>>24]<<24|f.SBOX[a>>>16&255]<<16|f.SBOX[a>>>8&255]<<8|f.SBOX[255&a],a^=s[o/t|0]<<24):t>6&&o%t==4&&(a=f.SBOX[a>>>24]<<24|f.SBOX[a>>>16&255]<<16|f.SBOX[a>>>8&255]<<8|f.SBOX[255&a]),i[o]=i[o-t]^a}for(var c=[],u=0;u<n;u++){var h=n-u,d=i[h-(u%4?0:4)];c[u]=u<4||h<=4?d:f.INV_SUB_MIX[0][f.SBOX[d>>>24]]^f.INV_SUB_MIX[1][f.SBOX[d>>>16&255]]^f.INV_SUB_MIX[2][f.SBOX[d>>>8&255]]^f.INV_SUB_MIX[3][f.SBOX[255&d]]}this._nRounds=r,this._keySchedule=i,this._invKeySchedule=c},c.prototype.encryptBlockRaw=function(e){return a(e=i(e),this._keySchedule,f.SUB_MIX,f.SBOX,this._nRounds)},c.prototype.encryptBlock=function(e){var t=this.encryptBlockRaw(e),r=n.allocUnsafe(16);return r.writeUInt32BE(t[0],0),r.writeUInt32BE(t[1],4),r.writeUInt32BE(t[2],8),r.writeUInt32BE(t[3],12),r},c.prototype.decryptBlock=function(e){var t=(e=i(e))[1];e[1]=e[3],e[3]=t;var r=a(e,this._invKeySchedule,f.INV_SUB_MIX,f.INV_SBOX,this._nRounds),o=n.allocUnsafe(16);return o.writeUInt32BE(r[0],0),o.writeUInt32BE(r[3],4),o.writeUInt32BE(r[2],8),o.writeUInt32BE(r[1],12),o},c.prototype.scrub=function(){o(this._keySchedule),o(this._invKeySchedule),o(this._key)},e.exports.AES=c},function(e,t,r){var n=r(0).Buffer,i=r(33);e.exports=function(e,t,r,o){if(n.isBuffer(e)||(e=n.from(e,"binary")),t&&(n.isBuffer(t)||(t=n.from(t,"binary")),8!==t.length))throw new RangeError("salt should be Buffer with 8 byte length");for(var a=r/8,s=n.alloc(a),f=n.alloc(o||0),c=n.alloc(0);a>0||o>0;){var u=new i;u.update(c),u.update(e),t&&u.update(t),c=u.digest();var h=0;if(a>0){var d=s.length-a;h=Math.min(a,c.length),c.copy(s,d,0,h),a-=h}if(h<c.length&&o>0){var l=f.length-o,p=Math.min(o,c.length-h);c.copy(f,l,h,h+p),o-=p}}return c.fill(0),{key:s,iv:f}}},function(e,t,r){"use strict";var n=r(3),i=r(7),o=i.getNAF,a=i.getJSF,s=i.assert;function f(e,t){this.type=e,this.p=new n(t.p,16),this.red=t.prime?n.red(t.prime):n.mont(this.p),this.zero=new n(0).toRed(this.red),this.one=new n(1).toRed(this.red),this.two=new n(2).toRed(this.red),this.n=t.n&&new n(t.n,16),this.g=t.g&&this.pointFromJSON(t.g,t.gRed),this._wnafT1=new Array(4),this._wnafT2=new Array(4),this._wnafT3=new Array(4),this._wnafT4=new Array(4);var r=this.n&&this.p.div(this.n);!r||r.cmpn(100)>0?this.redN=null:(this._maxwellTrick=!0,this.redN=this.n.toRed(this.red))}function c(e,t){this.curve=e,this.type=t,this.precomputed=null}e.exports=f,f.prototype.point=function(){throw new Error("Not implemented")},f.prototype.validate=function(){throw new Error("Not implemented")},f.prototype._fixedNafMul=function(e,t){s(e.precomputed);var r=e._getDoubles(),n=o(t,1),i=(1<<r.step+1)-(r.step%2==0?2:1);i/=3;for(var a=[],f=0;f<n.length;f+=r.step){var c=0;for(t=f+r.step-1;t>=f;t--)c=(c<<1)+n[t];a.push(c)}for(var u=this.jpoint(null,null,null),h=this.jpoint(null,null,null),d=i;d>0;d--){for(f=0;f<a.length;f++){(c=a[f])===d?h=h.mixedAdd(r.points[f]):c===-d&&(h=h.mixedAdd(r.points[f].neg()))}u=u.add(h)}return u.toP()},f.prototype._wnafMul=function(e,t){var r=4,n=e._getNAFPoints(r);r=n.wnd;for(var i=n.points,a=o(t,r),f=this.jpoint(null,null,null),c=a.length-1;c>=0;c--){for(t=0;c>=0&&0===a[c];c--)t++;if(c>=0&&t++,f=f.dblp(t),c<0)break;var u=a[c];s(0!==u),f="affine"===e.type?u>0?f.mixedAdd(i[u-1>>1]):f.mixedAdd(i[-u-1>>1].neg()):u>0?f.add(i[u-1>>1]):f.add(i[-u-1>>1].neg())}return"affine"===e.type?f.toP():f},f.prototype._wnafMulAdd=function(e,t,r,n,i){for(var s=this._wnafT1,f=this._wnafT2,c=this._wnafT3,u=0,h=0;h<n;h++){var d=(k=t[h])._getNAFPoints(e);s[h]=d.wnd,f[h]=d.points}for(h=n-1;h>=1;h-=2){var l=h-1,p=h;if(1===s[l]&&1===s[p]){var b=[t[l],null,null,t[p]];0===t[l].y.cmp(t[p].y)?(b[1]=t[l].add(t[p]),b[2]=t[l].toJ().mixedAdd(t[p].neg())):0===t[l].y.cmp(t[p].y.redNeg())?(b[1]=t[l].toJ().mixedAdd(t[p]),b[2]=t[l].add(t[p].neg())):(b[1]=t[l].toJ().mixedAdd(t[p]),b[2]=t[l].toJ().mixedAdd(t[p].neg()));var y=[-3,-1,-5,-7,0,7,5,1,3],m=a(r[l],r[p]);u=Math.max(m[0].length,u),c[l]=new Array(u),c[p]=new Array(u);for(var v=0;v<u;v++){var g=0|m[0][v],w=0|m[1][v];c[l][v]=y[3*(g+1)+(w+1)],c[p][v]=0,f[l]=b}}else c[l]=o(r[l],s[l]),c[p]=o(r[p],s[p]),u=Math.max(c[l].length,u),u=Math.max(c[p].length,u)}var _=this.jpoint(null,null,null),S=this._wnafT4;for(h=u;h>=0;h--){for(var E=0;h>=0;){var M=!0;for(v=0;v<n;v++)S[v]=0|c[v][h],0!==S[v]&&(M=!1);if(!M)break;E++,h--}if(h>=0&&E++,_=_.dblp(E),h<0)break;for(v=0;v<n;v++){var k,x=S[v];0!==x&&(x>0?k=f[v][x-1>>1]:x<0&&(k=f[v][-x-1>>1].neg()),_="affine"===k.type?_.mixedAdd(k):_.add(k))}}for(h=0;h<n;h++)f[h]=null;return i?_:_.toP()},f.BasePoint=c,c.prototype.eq=function(){throw new Error("Not implemented")},c.prototype.validate=function(){return this.curve.validate(this)},f.prototype.decodePoint=function(e,t){e=i.toArray(e,t);var r=this.p.byteLength();if((4===e[0]||6===e[0]||7===e[0])&&e.length-1==2*r)return 6===e[0]?s(e[e.length-1]%2==0):7===e[0]&&s(e[e.length-1]%2==1),this.point(e.slice(1,1+r),e.slice(1+r,1+2*r));if((2===e[0]||3===e[0])&&e.length-1===r)return this.pointFromX(e.slice(1,1+r),3===e[0]);throw new Error("Unknown point format")},c.prototype.encodeCompressed=function(e){return this.encode(e,!0)},c.prototype._encode=function(e){var t=this.curve.p.byteLength(),r=this.getX().toArray("be",t);return e?[this.getY().isEven()?2:3].concat(r):[4].concat(r,this.getY().toArray("be",t))},c.prototype.encode=function(e,t){return i.encode(this._encode(t),e)},c.prototype.precompute=function(e){if(this.precomputed)return this;var t={doubles:null,naf:null,beta:null};return t.naf=this._getNAFPoints(8),t.doubles=this._getDoubles(4,e),t.beta=this._getBeta(),this.precomputed=t,this},c.prototype._hasDoubles=function(e){if(!this.precomputed)return!1;var t=this.precomputed.doubles;return!!t&&t.points.length>=Math.ceil((e.bitLength()+1)/t.step)},c.prototype._getDoubles=function(e,t){if(this.precomputed&&this.precomputed.doubles)return this.precomputed.doubles;for(var r=[this],n=this,i=0;i<t;i+=e){for(var o=0;o<e;o++)n=n.dbl();r.push(n)}return{step:e,points:r}},c.prototype._getNAFPoints=function(e){if(this.precomputed&&this.precomputed.naf)return this.precomputed.naf;for(var t=[this],r=(1<<e)-1,n=1===r?null:this.dbl(),i=1;i<r;i++)t[i]=t[i-1].add(n);return{wnd:e,points:t}},c.prototype._getBeta=function(){return null},c.prototype.dblp=function(e){for(var t=this,r=0;r<e;r++)t=t.dbl();return t}},function(e,t,r){var n=r(165),i=r(176),o=r(177),a=r(37),s=r(58),f=r(0).Buffer;function c(e){var t;"object"!=typeof e||f.isBuffer(e)||(t=e.passphrase,e=e.key),"string"==typeof e&&(e=f.from(e));var r,c,u=o(e,t),h=u.tag,d=u.data;switch(h){case"CERTIFICATE":c=n.certificate.decode(d,"der").tbsCertificate.subjectPublicKeyInfo;case"PUBLIC KEY":switch(c||(c=n.PublicKey.decode(d,"der")),r=c.algorithm.algorithm.join(".")){case"1.2.840.113549.1.1.1":return n.RSAPublicKey.decode(c.subjectPublicKey.data,"der");case"1.2.840.10045.2.1":return c.subjectPrivateKey=c.subjectPublicKey,{type:"ec",data:c};case"1.2.840.10040.4.1":return c.algorithm.params.pub_key=n.DSAparam.decode(c.subjectPublicKey.data,"der"),{type:"dsa",data:c.algorithm.params};default:throw new Error("unknown key id "+r)}throw new Error("unknown key type "+h);case"ENCRYPTED PRIVATE KEY":d=function(e,t){var r=e.algorithm.decrypt.kde.kdeparams.salt,n=parseInt(e.algorithm.decrypt.kde.kdeparams.iters.toString(),10),o=i[e.algorithm.decrypt.cipher.algo.join(".")],c=e.algorithm.decrypt.cipher.iv,u=e.subjectPrivateKey,h=parseInt(o.split("-")[1],10)/8,d=s.pbkdf2Sync(t,r,n,h,"sha1"),l=a.createDecipheriv(o,d,c),p=[];return p.push(l.update(u)),p.push(l.final()),f.concat(p)}(d=n.EncryptedPrivateKey.decode(d,"der"),t);case"PRIVATE KEY":switch(r=(c=n.PrivateKey.decode(d,"der")).algorithm.algorithm.join(".")){case"1.2.840.113549.1.1.1":return n.RSAPrivateKey.decode(c.subjectPrivateKey,"der");case"1.2.840.10045.2.1":return{curve:c.algorithm.curve,privateKey:n.ECPrivateKey.decode(c.subjectPrivateKey,"der").privateKey};case"1.2.840.10040.4.1":return c.algorithm.params.priv_key=n.DSAparam.decode(c.subjectPrivateKey,"der"),{type:"dsa",params:c.algorithm.params};default:throw new Error("unknown key id "+r)}throw new Error("unknown key type "+h);case"RSA PUBLIC KEY":return n.RSAPublicKey.decode(d,"der");case"RSA PRIVATE KEY":return n.RSAPrivateKey.decode(d,"der");case"DSA PRIVATE KEY":return{type:"dsa",params:n.DSAPrivateKey.decode(d,"der")};case"EC PRIVATE KEY":return{curve:(d=n.ECPrivateKey.decode(d,"der")).parameters.value,privateKey:d.privateKey};default:throw new Error("unknown key type "+h)}}e.exports=c,c.signature=n.signature},function(e,t){var r=function(e,t){Error.call(this,e),Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor),this.name="JsonWebTokenError",this.message=e,t&&(this.inner=t)};(r.prototype=Object.create(Error.prototype)).constructor=r,e.exports=r},function(e,t,r){var n=r(98),i=r(186);t.ALGORITHMS=["HS256","HS384","HS512","RS256","RS384","RS512","PS256","PS384","PS512","ES256","ES384","ES512"],t.sign=n.sign,t.verify=i.verify,t.decode=i.decode,t.isValid=i.isValid,t.createSign=function(e){return new n(e)},t.createVerify=function(e){return new i(e)}},function(e,t,r){"use strict";var n,i="object"==typeof Reflect?Reflect:null,o=i&&"function"==typeof i.apply?i.apply:function(e,t,r){return Function.prototype.apply.call(e,t,r)};n=i&&"function"==typeof i.ownKeys?i.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var a=Number.isNaN||function(e){return e!=e};function s(){s.init.call(this)}e.exports=s,s.EventEmitter=s,s.prototype._events=void 0,s.prototype._eventsCount=0,s.prototype._maxListeners=void 0;var f=10;function c(e){return void 0===e._maxListeners?s.defaultMaxListeners:e._maxListeners}function u(e,t,r,n){var i,o,a,s;if("function"!=typeof r)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof r);if(void 0===(o=e._events)?(o=e._events=Object.create(null),e._eventsCount=0):(void 0!==o.newListener&&(e.emit("newListener",t,r.listener?r.listener:r),o=e._events),a=o[t]),void 0===a)a=o[t]=r,++e._eventsCount;else if("function"==typeof a?a=o[t]=n?[r,a]:[a,r]:n?a.unshift(r):a.push(r),(i=c(e))>0&&a.length>i&&!a.warned){a.warned=!0;var f=new Error("Possible EventEmitter memory leak detected. "+a.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");f.name="MaxListenersExceededWarning",f.emitter=e,f.type=t,f.count=a.length,s=f,console&&console.warn&&console.warn(s)}return e}function h(){for(var e=[],t=0;t<arguments.length;t++)e.push(arguments[t]);this.fired||(this.target.removeListener(this.type,this.wrapFn),this.fired=!0,o(this.listener,this.target,e))}function d(e,t,r){var n={fired:!1,wrapFn:void 0,target:e,type:t,listener:r},i=h.bind(n);return i.listener=r,n.wrapFn=i,i}function l(e,t,r){var n=e._events;if(void 0===n)return[];var i=n[t];return void 0===i?[]:"function"==typeof i?r?[i.listener||i]:[i]:r?function(e){for(var t=new Array(e.length),r=0;r<t.length;++r)t[r]=e[r].listener||e[r];return t}(i):b(i,i.length)}function p(e){var t=this._events;if(void 0!==t){var r=t[e];if("function"==typeof r)return 1;if(void 0!==r)return r.length}return 0}function b(e,t){for(var r=new Array(t),n=0;n<t;++n)r[n]=e[n];return r}Object.defineProperty(s,"defaultMaxListeners",{enumerable:!0,get:function(){return f},set:function(e){if("number"!=typeof e||e<0||a(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");f=e}}),s.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},s.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||a(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},s.prototype.getMaxListeners=function(){return c(this)},s.prototype.emit=function(e){for(var t=[],r=1;r<arguments.length;r++)t.push(arguments[r]);var n="error"===e,i=this._events;if(void 0!==i)n=n&&void 0===i.error;else if(!n)return!1;if(n){var a;if(t.length>0&&(a=t[0]),a instanceof Error)throw a;var s=new Error("Unhandled error."+(a?" ("+a.message+")":""));throw s.context=a,s}var f=i[e];if(void 0===f)return!1;if("function"==typeof f)o(f,this,t);else{var c=f.length,u=b(f,c);for(r=0;r<c;++r)o(u[r],this,t)}return!0},s.prototype.addListener=function(e,t){return u(this,e,t,!1)},s.prototype.on=s.prototype.addListener,s.prototype.prependListener=function(e,t){return u(this,e,t,!0)},s.prototype.once=function(e,t){if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t);return this.on(e,d(this,e,t)),this},s.prototype.prependOnceListener=function(e,t){if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t);return this.prependListener(e,d(this,e,t)),this},s.prototype.removeListener=function(e,t){var r,n,i,o,a;if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t);if(void 0===(n=this._events))return this;if(void 0===(r=n[e]))return this;if(r===t||r.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete n[e],n.removeListener&&this.emit("removeListener",e,r.listener||t));else if("function"!=typeof r){for(i=-1,o=r.length-1;o>=0;o--)if(r[o]===t||r[o].listener===t){a=r[o].listener,i=o;break}if(i<0)return this;0===i?r.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(r,i),1===r.length&&(n[e]=r[0]),void 0!==n.removeListener&&this.emit("removeListener",e,a||t)}return this},s.prototype.off=s.prototype.removeListener,s.prototype.removeAllListeners=function(e){var t,r,n;if(void 0===(r=this._events))return this;if(void 0===r.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==r[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete r[e]),this;if(0===arguments.length){var i,o=Object.keys(r);for(n=0;n<o.length;++n)"removeListener"!==(i=o[n])&&this.removeAllListeners(i);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=r[e]))this.removeListener(e,t);else if(void 0!==t)for(n=t.length-1;n>=0;n--)this.removeListener(e,t[n]);return this},s.prototype.listeners=function(e){return l(this,e,!0)},s.prototype.rawListeners=function(e){return l(this,e,!1)},s.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):p.call(e,t)},s.prototype.listenerCount=p,s.prototype.eventNames=function(){return this._eventsCount>0?n(this._events):[]}},function(e,t,r){(t=e.exports=r(47)).Stream=t,t.Readable=t,t.Writable=r(31),t.Duplex=r(11),t.Transform=r(50),t.PassThrough=r(107)},function(e,t,r){"use strict";(function(t,n,i){var o=r(21);function a(e){var t=this;this.next=null,this.entry=null,this.finish=function(){!function(e,t,r){var n=e.entry;e.entry=null;for(;n;){var i=n.callback;t.pendingcb--,i(r),n=n.next}t.corkedRequestsFree?t.corkedRequestsFree.next=e:t.corkedRequestsFree=e}(t,e)}}e.exports=v;var s,f=!t.browser&&["v0.10","v0.9."].indexOf(t.version.slice(0,5))>-1?n:o.nextTick;v.WritableState=m;var c=r(15);c.inherits=r(1);var u={deprecate:r(106)},h=r(48),d=r(0).Buffer,l=i.Uint8Array||function(){};var p,b=r(49);function y(){}function m(e,t){s=s||r(11),e=e||{};var n=t instanceof s;this.objectMode=!!e.objectMode,n&&(this.objectMode=this.objectMode||!!e.writableObjectMode);var i=e.highWaterMark,c=e.writableHighWaterMark,u=this.objectMode?16:16384;this.highWaterMark=i||0===i?i:n&&(c||0===c)?c:u,this.highWaterMark=Math.floor(this.highWaterMark),this.finalCalled=!1,this.needDrain=!1,this.ending=!1,this.ended=!1,this.finished=!1,this.destroyed=!1;var h=!1===e.decodeStrings;this.decodeStrings=!h,this.defaultEncoding=e.defaultEncoding||"utf8",this.length=0,this.writing=!1,this.corked=0,this.sync=!0,this.bufferProcessing=!1,this.onwrite=function(e){!function(e,t){var r=e._writableState,n=r.sync,i=r.writecb;if(function(e){e.writing=!1,e.writecb=null,e.length-=e.writelen,e.writelen=0}(r),t)!function(e,t,r,n,i){--t.pendingcb,r?(o.nextTick(i,n),o.nextTick(M,e,t),e._writableState.errorEmitted=!0,e.emit("error",n)):(i(n),e._writableState.errorEmitted=!0,e.emit("error",n),M(e,t))}(e,r,n,t,i);else{var a=S(r);a||r.corked||r.bufferProcessing||!r.bufferedRequest||_(e,r),n?f(w,e,r,a,i):w(e,r,a,i)}}(t,e)},this.writecb=null,this.writelen=0,this.bufferedRequest=null,this.lastBufferedRequest=null,this.pendingcb=0,this.prefinished=!1,this.errorEmitted=!1,this.bufferedRequestCount=0,this.corkedRequestsFree=new a(this)}function v(e){if(s=s||r(11),!(p.call(v,this)||this instanceof s))return new v(e);this._writableState=new m(e,this),this.writable=!0,e&&("function"==typeof e.write&&(this._write=e.write),"function"==typeof e.writev&&(this._writev=e.writev),"function"==typeof e.destroy&&(this._destroy=e.destroy),"function"==typeof e.final&&(this._final=e.final)),h.call(this)}function g(e,t,r,n,i,o,a){t.writelen=n,t.writecb=a,t.writing=!0,t.sync=!0,r?e._writev(i,t.onwrite):e._write(i,o,t.onwrite),t.sync=!1}function w(e,t,r,n){r||function(e,t){0===t.length&&t.needDrain&&(t.needDrain=!1,e.emit("drain"))}(e,t),t.pendingcb--,n(),M(e,t)}function _(e,t){t.bufferProcessing=!0;var r=t.bufferedRequest;if(e._writev&&r&&r.next){var n=t.bufferedRequestCount,i=new Array(n),o=t.corkedRequestsFree;o.entry=r;for(var s=0,f=!0;r;)i[s]=r,r.isBuf||(f=!1),r=r.next,s+=1;i.allBuffers=f,g(e,t,!0,t.length,i,"",o.finish),t.pendingcb++,t.lastBufferedRequest=null,o.next?(t.corkedRequestsFree=o.next,o.next=null):t.corkedRequestsFree=new a(t),t.bufferedRequestCount=0}else{for(;r;){var c=r.chunk,u=r.encoding,h=r.callback;if(g(e,t,!1,t.objectMode?1:c.length,c,u,h),r=r.next,t.bufferedRequestCount--,t.writing)break}null===r&&(t.lastBufferedRequest=null)}t.bufferedRequest=r,t.bufferProcessing=!1}function S(e){return e.ending&&0===e.length&&null===e.bufferedRequest&&!e.finished&&!e.writing}function E(e,t){e._final((function(r){t.pendingcb--,r&&e.emit("error",r),t.prefinished=!0,e.emit("prefinish"),M(e,t)}))}function M(e,t){var r=S(t);return r&&(!function(e,t){t.prefinished||t.finalCalled||("function"==typeof e._final?(t.pendingcb++,t.finalCalled=!0,o.nextTick(E,e,t)):(t.prefinished=!0,e.emit("prefinish")))}(e,t),0===t.pendingcb&&(t.finished=!0,e.emit("finish"))),r}c.inherits(v,h),m.prototype.getBuffer=function(){for(var e=this.bufferedRequest,t=[];e;)t.push(e),e=e.next;return t},function(){try{Object.defineProperty(m.prototype,"buffer",{get:u.deprecate((function(){return this.getBuffer()}),"_writableState.buffer is deprecated. Use _writableState.getBuffer instead.","DEP0003")})}catch(e){}}(),"function"==typeof Symbol&&Symbol.hasInstance&&"function"==typeof Function.prototype[Symbol.hasInstance]?(p=Function.prototype[Symbol.hasInstance],Object.defineProperty(v,Symbol.hasInstance,{value:function(e){return!!p.call(this,e)||this===v&&(e&&e._writableState instanceof m)}})):p=function(e){return e instanceof this},v.prototype.pipe=function(){this.emit("error",new Error("Cannot pipe, not readable"))},v.prototype.write=function(e,t,r){var n,i=this._writableState,a=!1,s=!i.objectMode&&(n=e,d.isBuffer(n)||n instanceof l);return s&&!d.isBuffer(e)&&(e=function(e){return d.from(e)}(e)),"function"==typeof t&&(r=t,t=null),s?t="buffer":t||(t=i.defaultEncoding),"function"!=typeof r&&(r=y),i.ended?function(e,t){var r=new Error("write after end");e.emit("error",r),o.nextTick(t,r)}(this,r):(s||function(e,t,r,n){var i=!0,a=!1;return null===r?a=new TypeError("May not write null values to stream"):"string"==typeof r||void 0===r||t.objectMode||(a=new TypeError("Invalid non-string/buffer chunk")),a&&(e.emit("error",a),o.nextTick(n,a),i=!1),i}(this,i,e,r))&&(i.pendingcb++,a=function(e,t,r,n,i,o){if(!r){var a=function(e,t,r){e.objectMode||!1===e.decodeStrings||"string"!=typeof t||(t=d.from(t,r));return t}(t,n,i);n!==a&&(r=!0,i="buffer",n=a)}var s=t.objectMode?1:n.length;t.length+=s;var f=t.length<t.highWaterMark;f||(t.needDrain=!0);if(t.writing||t.corked){var c=t.lastBufferedRequest;t.lastBufferedRequest={chunk:n,encoding:i,isBuf:r,callback:o,next:null},c?c.next=t.lastBufferedRequest:t.bufferedRequest=t.lastBufferedRequest,t.bufferedRequestCount+=1}else g(e,t,!1,s,n,i,o);return f}(this,i,s,e,t,r)),a},v.prototype.cork=function(){this._writableState.corked++},v.prototype.uncork=function(){var e=this._writableState;e.corked&&(e.corked--,e.writing||e.corked||e.finished||e.bufferProcessing||!e.bufferedRequest||_(this,e))},v.prototype.setDefaultEncoding=function(e){if("string"==typeof e&&(e=e.toLowerCase()),!(["hex","utf8","utf-8","ascii","binary","base64","ucs2","ucs-2","utf16le","utf-16le","raw"].indexOf((e+"").toLowerCase())>-1))throw new TypeError("Unknown encoding: "+e);return this._writableState.defaultEncoding=e,this},Object.defineProperty(v.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),v.prototype._write=function(e,t,r){r(new Error("_write() is not implemented"))},v.prototype._writev=null,v.prototype.end=function(e,t,r){var n=this._writableState;"function"==typeof e?(r=e,e=null,t=null):"function"==typeof t&&(r=t,t=null),null!=e&&this.write(e,t),n.corked&&(n.corked=1,this.uncork()),n.ending||n.finished||function(e,t,r){t.ending=!0,M(e,t),r&&(t.finished?o.nextTick(r):e.once("finish",r));t.ended=!0,e.writable=!1}(this,n,r)},Object.defineProperty(v.prototype,"destroyed",{get:function(){return void 0!==this._writableState&&this._writableState.destroyed},set:function(e){this._writableState&&(this._writableState.destroyed=e)}}),v.prototype.destroy=b.destroy,v.prototype._undestroy=b.undestroy,v.prototype._destroy=function(e,t){this.end(),t(e)}}).call(this,r(4),r(104).setImmediate,r(9))},function(e,t,r){"use strict";var n=r(0).Buffer,i=n.isEncoding||function(e){switch((e=""+e)&&e.toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":case"raw":return!0;default:return!1}};function o(e){var t;switch(this.encoding=function(e){var t=function(e){if(!e)return"utf8";for(var t;;)switch(e){case"utf8":case"utf-8":return"utf8";case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return"utf16le";case"latin1":case"binary":return"latin1";case"base64":case"ascii":case"hex":return e;default:if(t)return;e=(""+e).toLowerCase(),t=!0}}(e);if("string"!=typeof t&&(n.isEncoding===i||!i(e)))throw new Error("Unknown encoding: "+e);return t||e}(e),this.encoding){case"utf16le":this.text=f,this.end=c,t=4;break;case"utf8":this.fillLast=s,t=4;break;case"base64":this.text=u,this.end=h,t=3;break;default:return this.write=d,void(this.end=l)}this.lastNeed=0,this.lastTotal=0,this.lastChar=n.allocUnsafe(t)}function a(e){return e<=127?0:e>>5==6?2:e>>4==14?3:e>>3==30?4:e>>6==2?-1:-2}function s(e){var t=this.lastTotal-this.lastNeed,r=function(e,t,r){if(128!=(192&t[0]))return e.lastNeed=0,"�";if(e.lastNeed>1&&t.length>1){if(128!=(192&t[1]))return e.lastNeed=1,"�";if(e.lastNeed>2&&t.length>2&&128!=(192&t[2]))return e.lastNeed=2,"�"}}(this,e);return void 0!==r?r:this.lastNeed<=e.length?(e.copy(this.lastChar,t,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal)):(e.copy(this.lastChar,t,0,e.length),void(this.lastNeed-=e.length))}function f(e,t){if((e.length-t)%2==0){var r=e.toString("utf16le",t);if(r){var n=r.charCodeAt(r.length-1);if(n>=55296&&n<=56319)return this.lastNeed=2,this.lastTotal=4,this.lastChar[0]=e[e.length-2],this.lastChar[1]=e[e.length-1],r.slice(0,-1)}return r}return this.lastNeed=1,this.lastTotal=2,this.lastChar[0]=e[e.length-1],e.toString("utf16le",t,e.length-1)}function c(e){var t=e&&e.length?this.write(e):"";if(this.lastNeed){var r=this.lastTotal-this.lastNeed;return t+this.lastChar.toString("utf16le",0,r)}return t}function u(e,t){var r=(e.length-t)%3;return 0===r?e.toString("base64",t):(this.lastNeed=3-r,this.lastTotal=3,1===r?this.lastChar[0]=e[e.length-1]:(this.lastChar[0]=e[e.length-2],this.lastChar[1]=e[e.length-1]),e.toString("base64",t,e.length-r))}function h(e){var t=e&&e.length?this.write(e):"";return this.lastNeed?t+this.lastChar.toString("base64",0,3-this.lastNeed):t}function d(e){return e.toString(this.encoding)}function l(e){return e&&e.length?this.write(e):""}t.StringDecoder=o,o.prototype.write=function(e){if(0===e.length)return"";var t,r;if(this.lastNeed){if(void 0===(t=this.fillLast(e)))return"";r=this.lastNeed,this.lastNeed=0}else r=0;return r<e.length?t?t+this.text(e,r):this.text(e,r):t||""},o.prototype.end=function(e){var t=e&&e.length?this.write(e):"";return this.lastNeed?t+"�":t},o.prototype.text=function(e,t){var r=function(e,t,r){var n=t.length-1;if(n<r)return 0;var i=a(t[n]);if(i>=0)return i>0&&(e.lastNeed=i-1),i;if(--n<r||-2===i)return 0;if((i=a(t[n]))>=0)return i>0&&(e.lastNeed=i-2),i;if(--n<r||-2===i)return 0;if((i=a(t[n]))>=0)return i>0&&(2===i?i=0:e.lastNeed=i-3),i;return 0}(this,e,t);if(!this.lastNeed)return e.toString("utf8",t);this.lastTotal=r;var n=e.length-(r-this.lastNeed);return e.copy(this.lastChar,0,n),e.toString("utf8",t,n)},o.prototype.fillLast=function(e){if(this.lastNeed<=e.length)return e.copy(this.lastChar,this.lastTotal-this.lastNeed,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal);e.copy(this.lastChar,this.lastTotal-this.lastNeed,0,e.length),this.lastNeed-=e.length}},function(e,t,r){"use strict";var n=r(1),i=r(52),o=r(0).Buffer,a=new Array(16);function s(){i.call(this,64),this._a=1732584193,this._b=4023233417,this._c=2562383102,this._d=271733878}function f(e,t){return e<<t|e>>>32-t}function c(e,t,r,n,i,o,a){return f(e+(t&r|~t&n)+i+o|0,a)+t|0}function u(e,t,r,n,i,o,a){return f(e+(t&n|r&~n)+i+o|0,a)+t|0}function h(e,t,r,n,i,o,a){return f(e+(t^r^n)+i+o|0,a)+t|0}function d(e,t,r,n,i,o,a){return f(e+(r^(t|~n))+i+o|0,a)+t|0}n(s,i),s.prototype._update=function(){for(var e=a,t=0;t<16;++t)e[t]=this._block.readInt32LE(4*t);var r=this._a,n=this._b,i=this._c,o=this._d;r=c(r,n,i,o,e[0],3614090360,7),o=c(o,r,n,i,e[1],3905402710,12),i=c(i,o,r,n,e[2],606105819,17),n=c(n,i,o,r,e[3],3250441966,22),r=c(r,n,i,o,e[4],4118548399,7),o=c(o,r,n,i,e[5],1200080426,12),i=c(i,o,r,n,e[6],2821735955,17),n=c(n,i,o,r,e[7],4249261313,22),r=c(r,n,i,o,e[8],1770035416,7),o=c(o,r,n,i,e[9],2336552879,12),i=c(i,o,r,n,e[10],4294925233,17),n=c(n,i,o,r,e[11],2304563134,22),r=c(r,n,i,o,e[12],1804603682,7),o=c(o,r,n,i,e[13],4254626195,12),i=c(i,o,r,n,e[14],2792965006,17),r=u(r,n=c(n,i,o,r,e[15],1236535329,22),i,o,e[1],4129170786,5),o=u(o,r,n,i,e[6],3225465664,9),i=u(i,o,r,n,e[11],643717713,14),n=u(n,i,o,r,e[0],3921069994,20),r=u(r,n,i,o,e[5],3593408605,5),o=u(o,r,n,i,e[10],38016083,9),i=u(i,o,r,n,e[15],3634488961,14),n=u(n,i,o,r,e[4],3889429448,20),r=u(r,n,i,o,e[9],568446438,5),o=u(o,r,n,i,e[14],3275163606,9),i=u(i,o,r,n,e[3],4107603335,14),n=u(n,i,o,r,e[8],1163531501,20),r=u(r,n,i,o,e[13],2850285829,5),o=u(o,r,n,i,e[2],4243563512,9),i=u(i,o,r,n,e[7],1735328473,14),r=h(r,n=u(n,i,o,r,e[12],2368359562,20),i,o,e[5],4294588738,4),o=h(o,r,n,i,e[8],2272392833,11),i=h(i,o,r,n,e[11],1839030562,16),n=h(n,i,o,r,e[14],4259657740,23),r=h(r,n,i,o,e[1],2763975236,4),o=h(o,r,n,i,e[4],1272893353,11),i=h(i,o,r,n,e[7],4139469664,16),n=h(n,i,o,r,e[10],3200236656,23),r=h(r,n,i,o,e[13],681279174,4),o=h(o,r,n,i,e[0],3936430074,11),i=h(i,o,r,n,e[3],3572445317,16),n=h(n,i,o,r,e[6],76029189,23),r=h(r,n,i,o,e[9],3654602809,4),o=h(o,r,n,i,e[12],3873151461,11),i=h(i,o,r,n,e[15],530742520,16),r=d(r,n=h(n,i,o,r,e[2],3299628645,23),i,o,e[0],4096336452,6),o=d(o,r,n,i,e[7],1126891415,10),i=d(i,o,r,n,e[14],2878612391,15),n=d(n,i,o,r,e[5],4237533241,21),r=d(r,n,i,o,e[12],1700485571,6),o=d(o,r,n,i,e[3],2399980690,10),i=d(i,o,r,n,e[10],4293915773,15),n=d(n,i,o,r,e[1],2240044497,21),r=d(r,n,i,o,e[8],1873313359,6),o=d(o,r,n,i,e[15],4264355552,10),i=d(i,o,r,n,e[6],2734768916,15),n=d(n,i,o,r,e[13],1309151649,21),r=d(r,n,i,o,e[4],4149444226,6),o=d(o,r,n,i,e[11],3174756917,10),i=d(i,o,r,n,e[2],718787259,15),n=d(n,i,o,r,e[9],3951481745,21),this._a=this._a+r|0,this._b=this._b+n|0,this._c=this._c+i|0,this._d=this._d+o|0},s.prototype._digest=function(){this._block[this._blockOffset++]=128,this._blockOffset>56&&(this._block.fill(0,this._blockOffset,64),this._update(),this._blockOffset=0),this._block.fill(0,this._blockOffset,56),this._block.writeUInt32LE(this._length[0],56),this._block.writeUInt32LE(this._length[1],60),this._update();var e=o.allocUnsafe(16);return e.writeInt32LE(this._a,0),e.writeInt32LE(this._b,4),e.writeInt32LE(this._c,8),e.writeInt32LE(this._d,12),e},e.exports=s},function(e,t,r){"use strict";var n=r(2).Buffer,i=r(1),o=r(52),a=new Array(16),s=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,7,4,13,1,10,6,15,3,12,0,9,5,2,14,11,8,3,10,14,4,9,15,8,1,2,7,0,6,13,11,5,12,1,9,11,10,0,8,12,4,13,3,7,15,14,5,6,2,4,0,5,9,7,12,2,10,14,1,3,8,11,6,15,13],f=[5,14,7,0,9,2,11,4,13,6,15,8,1,10,3,12,6,11,3,7,0,13,5,10,14,15,8,12,4,9,1,2,15,5,1,3,7,14,6,9,11,8,12,2,10,0,4,13,8,6,4,1,3,11,15,0,5,12,2,13,9,7,10,14,12,15,10,4,1,5,8,7,6,2,13,14,0,3,9,11],c=[11,14,15,12,5,8,7,9,11,13,14,15,6,7,9,8,7,6,8,13,11,9,7,15,7,12,15,9,11,7,13,12,11,13,6,7,14,9,13,15,14,8,13,6,5,12,7,5,11,12,14,15,14,15,9,8,9,14,5,6,8,6,5,12,9,15,5,11,6,8,13,12,5,12,13,14,11,8,5,6],u=[8,9,9,11,13,15,15,5,7,7,8,11,14,14,12,6,9,13,15,7,12,8,9,11,7,7,12,7,6,15,13,11,9,7,15,11,8,6,6,14,12,13,5,14,13,13,7,5,15,5,8,11,14,14,6,14,6,9,12,9,12,5,15,8,8,5,12,9,12,5,14,6,8,13,6,5,15,13,11,11],h=[0,1518500249,1859775393,2400959708,2840853838],d=[1352829926,1548603684,1836072691,2053994217,0];function l(){o.call(this,64),this._a=1732584193,this._b=4023233417,this._c=2562383102,this._d=271733878,this._e=3285377520}function p(e,t){return e<<t|e>>>32-t}function b(e,t,r,n,i,o,a,s){return p(e+(t^r^n)+o+a|0,s)+i|0}function y(e,t,r,n,i,o,a,s){return p(e+(t&r|~t&n)+o+a|0,s)+i|0}function m(e,t,r,n,i,o,a,s){return p(e+((t|~r)^n)+o+a|0,s)+i|0}function v(e,t,r,n,i,o,a,s){return p(e+(t&n|r&~n)+o+a|0,s)+i|0}function g(e,t,r,n,i,o,a,s){return p(e+(t^(r|~n))+o+a|0,s)+i|0}i(l,o),l.prototype._update=function(){for(var e=a,t=0;t<16;++t)e[t]=this._block.readInt32LE(4*t);for(var r=0|this._a,n=0|this._b,i=0|this._c,o=0|this._d,l=0|this._e,w=0|this._a,_=0|this._b,S=0|this._c,E=0|this._d,M=0|this._e,k=0;k<80;k+=1){var x,A;k<16?(x=b(r,n,i,o,l,e[s[k]],h[0],c[k]),A=g(w,_,S,E,M,e[f[k]],d[0],u[k])):k<32?(x=y(r,n,i,o,l,e[s[k]],h[1],c[k]),A=v(w,_,S,E,M,e[f[k]],d[1],u[k])):k<48?(x=m(r,n,i,o,l,e[s[k]],h[2],c[k]),A=m(w,_,S,E,M,e[f[k]],d[2],u[k])):k<64?(x=v(r,n,i,o,l,e[s[k]],h[3],c[k]),A=y(w,_,S,E,M,e[f[k]],d[3],u[k])):(x=g(r,n,i,o,l,e[s[k]],h[4],c[k]),A=b(w,_,S,E,M,e[f[k]],d[4],u[k])),r=l,l=o,o=p(i,10),i=n,n=x,w=M,M=E,E=p(S,10),S=_,_=A}var B=this._b+i+E|0;this._b=this._c+o+M|0,this._c=this._d+l+w|0,this._d=this._e+r+_|0,this._e=this._a+n+S|0,this._a=B},l.prototype._digest=function(){this._block[this._blockOffset++]=128,this._blockOffset>56&&(this._block.fill(0,this._blockOffset,64),this._update(),this._blockOffset=0),this._block.fill(0,this._blockOffset,56),this._block.writeUInt32LE(this._length[0],56),this._block.writeUInt32LE(this._length[1],60),this._update();var e=n.alloc?n.alloc(20):new n(20);return e.writeInt32LE(this._a,0),e.writeInt32LE(this._b,4),e.writeInt32LE(this._c,8),e.writeInt32LE(this._d,12),e.writeInt32LE(this._e,16),e},e.exports=l},function(e,t,r){(t=e.exports=function(e){e=e.toLowerCase();var r=t[e];if(!r)throw new Error(e+" is not supported (we accept pull requests)");return new r}).sha=r(115),t.sha1=r(116),t.sha224=r(117),t.sha256=r(53),t.sha384=r(118),t.sha512=r(54)},function(e,t,r){"use strict";t.utils=r(124),t.Cipher=r(125),t.DES=r(126),t.CBC=r(127),t.EDE=r(128)},function(e,t,r){var n=r(129),i=r(137),o=r(64);t.createCipher=t.Cipher=n.createCipher,t.createCipheriv=t.Cipheriv=n.createCipheriv,t.createDecipher=t.Decipher=i.createDecipher,t.createDecipheriv=t.Decipheriv=i.createDecipheriv,t.listCiphers=t.getCiphers=function(){return Object.keys(o)}},function(e,t,r){var n={ECB:r(130),CBC:r(131),CFB:r(132),CFB8:r(133),CFB1:r(134),OFB:r(135),CTR:r(62),GCM:r(62)},i=r(64);for(var o in i)i[o].module=n[i[o].mode];e.exports=i},function(e,t,r){var n;function i(e){this.rand=e}if(e.exports=function(e){return n||(n=new i(null)),n.generate(e)},e.exports.Rand=i,i.prototype.generate=function(e){return this._rand(e)},i.prototype._rand=function(e){if(this.rand.getBytes)return this.rand.getBytes(e);for(var t=new Uint8Array(e),r=0;r<t.length;r++)t[r]=this.rand.getByte();return t},"object"==typeof self)self.crypto&&self.crypto.getRandomValues?i.prototype._rand=function(e){var t=new Uint8Array(e);return self.crypto.getRandomValues(t),t}:self.msCrypto&&self.msCrypto.getRandomValues?i.prototype._rand=function(e){var t=new Uint8Array(e);return self.msCrypto.getRandomValues(t),t}:"object"==typeof window&&(i.prototype._rand=function(){throw new Error("Not implemented yet")});else try{var o=r(142);if("function"!=typeof o.randomBytes)throw new Error("Not supported");i.prototype._rand=function(e){return o.randomBytes(e)}}catch(e){}},function(e,t,r){(function(t){var n=r(3),i=r(13);function o(e,r){var i=function(e){var t=a(e);return{blinder:t.toRed(n.mont(e.modulus)).redPow(new n(e.publicExponent)).fromRed(),unblinder:t.invm(e.modulus)}}(r),o=r.modulus.byteLength(),s=(n.mont(r.modulus),new n(e).mul(i.blinder).umod(r.modulus)),f=s.toRed(n.mont(r.prime1)),c=s.toRed(n.mont(r.prime2)),u=r.coefficient,h=r.prime1,d=r.prime2,l=f.redPow(r.exponent1),p=c.redPow(r.exponent2);l=l.fromRed(),p=p.fromRed();var b=l.isub(p).imul(u).umod(h);return b.imul(d),p.iadd(b),new t(p.imul(i.unblinder).umod(r.modulus).toArray(!1,o))}function a(e){for(var t=e.modulus.byteLength(),r=new n(i(t));r.cmp(e.modulus)>=0||!r.umod(e.prime1)||!r.umod(e.prime2);)r=new n(i(t));return r}e.exports=o,o.getr=a}).call(this,r(2).Buffer)},function(e,t,r){"use strict";var n=t;n.version=r(147).version,n.utils=r(7),n.rand=r(39),n.curve=r(70),n.curves=r(42),n.ec=r(158),n.eddsa=r(162)},function(e,t,r){"use strict";var n,i=t,o=r(43),a=r(70),s=r(7).assert;function f(e){"short"===e.type?this.curve=new a.short(e):"edwards"===e.type?this.curve=new a.edwards(e):this.curve=new a.mont(e),this.g=this.curve.g,this.n=this.curve.n,this.hash=e.hash,s(this.g.validate(),"Invalid curve"),s(this.g.mul(this.n).isInfinity(),"Invalid curve, G*N != O")}function c(e,t){Object.defineProperty(i,e,{configurable:!0,enumerable:!0,get:function(){var r=new f(t);return Object.defineProperty(i,e,{configurable:!0,enumerable:!0,value:r}),r}})}i.PresetCurve=f,c("p192",{type:"short",prime:"p192",p:"ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff",a:"ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc",b:"64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1",n:"ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831",hash:o.sha256,gRed:!1,g:["188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012","07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811"]}),c("p224",{type:"short",prime:"p224",p:"ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001",a:"ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe",b:"b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4",n:"ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d",hash:o.sha256,gRed:!1,g:["b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21","bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34"]}),c("p256",{type:"short",prime:null,p:"ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff",a:"ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc",b:"5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b",n:"ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551",hash:o.sha256,gRed:!1,g:["6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296","4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5"]}),c("p384",{type:"short",prime:null,p:"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff",a:"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc",b:"b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef",n:"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973",hash:o.sha384,gRed:!1,g:["aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7","3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f"]}),c("p521",{type:"short",prime:null,p:"000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff",a:"000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc",b:"00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00",n:"000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409",hash:o.sha512,gRed:!1,g:["000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66","00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650"]}),c("curve25519",{type:"mont",prime:"p25519",p:"7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",a:"76d06",b:"1",n:"1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",hash:o.sha256,gRed:!1,g:["9"]}),c("ed25519",{type:"edwards",prime:"p25519",p:"7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",a:"-1",c:"1",d:"52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3",n:"1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",hash:o.sha256,gRed:!1,g:["216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a","6666666666666666666666666666666666666666666666666666666666666658"]});try{n=r(157)}catch(e){n=void 0}c("secp256k1",{type:"short",prime:"k256",p:"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f",a:"0",b:"7",n:"ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141",h:"1",hash:o.sha256,beta:"7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee",lambda:"5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72",basis:[{a:"3086d221a7d46bcde86c90e49284eb15",b:"-e4437ed6010e88286f547fa90abfe4c3"},{a:"114ca50f7a8e2f3f657c1108d9d44cfd8",b:"3086d221a7d46bcde86c90e49284eb15"}],gRed:!1,g:["79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798","483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8",n]})},function(e,t,r){var n=t;n.utils=r(8),n.common=r(18),n.sha=r(151),n.ripemd=r(155),n.hmac=r(156),n.sha1=n.sha.sha1,n.sha256=n.sha.sha256,n.sha224=n.sha.sha224,n.sha384=n.sha.sha384,n.sha512=n.sha.sha512,n.ripemd160=n.ripemd.ripemd160},function(e,t,r){var n=r(28);e.exports=function(e,t){t=t||{};var r=n.decode(e,t);if(!r)return null;var i=r.payload;if("string"==typeof i)try{var o=JSON.parse(i);null!==o&&"object"==typeof o&&(i=o)}catch(e){}return!0===t.complete?{header:r.header,payload:i,signature:r.signature}:i}},function(e,t){var r={}.toString;e.exports=Array.isArray||function(e){return"[object Array]"==r.call(e)}},function(e,t,r){(function(t){var n=r(0).Buffer,i=r(12);function o(e){if(this.buffer=null,this.writable=!0,this.readable=!0,!e)return this.buffer=n.alloc(0),this;if("function"==typeof e.pipe)return this.buffer=n.alloc(0),e.pipe(this),this;if(e.length||"object"==typeof e)return this.buffer=e,this.writable=!1,t.nextTick(function(){this.emit("end",e),this.readable=!1,this.emit("close")}.bind(this)),this;throw new TypeError("Unexpected data type ("+typeof e+")")}r(22).inherits(o,i),o.prototype.write=function(e){this.buffer=n.concat([this.buffer,n.from(e)]),this.emit("data",e)},o.prototype.end=function(e){e&&this.write(e),this.emit("end",e),this.emit("close"),this.writable=!1,this.readable=!1},e.exports=o}).call(this,r(4))},function(e,t,r){"use strict";(function(t,n){var i=r(21);e.exports=g;var o,a=r(45);g.ReadableState=v;r(29).EventEmitter;var s=function(e,t){return e.listeners(t).length},f=r(48),c=r(0).Buffer,u=t.Uint8Array||function(){};var h=r(15);h.inherits=r(1);var d=r(101),l=void 0;l=d&&d.debuglog?d.debuglog("stream"):function(){};var p,b=r(102),y=r(49);h.inherits(g,f);var m=["error","close","destroy","pause","resume"];function v(e,t){e=e||{};var n=t instanceof(o=o||r(11));this.objectMode=!!e.objectMode,n&&(this.objectMode=this.objectMode||!!e.readableObjectMode);var i=e.highWaterMark,a=e.readableHighWaterMark,s=this.objectMode?16:16384;this.highWaterMark=i||0===i?i:n&&(a||0===a)?a:s,this.highWaterMark=Math.floor(this.highWaterMark),this.buffer=new b,this.length=0,this.pipes=null,this.pipesCount=0,this.flowing=null,this.ended=!1,this.endEmitted=!1,this.reading=!1,this.sync=!0,this.needReadable=!1,this.emittedReadable=!1,this.readableListening=!1,this.resumeScheduled=!1,this.destroyed=!1,this.defaultEncoding=e.defaultEncoding||"utf8",this.awaitDrain=0,this.readingMore=!1,this.decoder=null,this.encoding=null,e.encoding&&(p||(p=r(32).StringDecoder),this.decoder=new p(e.encoding),this.encoding=e.encoding)}function g(e){if(o=o||r(11),!(this instanceof g))return new g(e);this._readableState=new v(e,this),this.readable=!0,e&&("function"==typeof e.read&&(this._read=e.read),"function"==typeof e.destroy&&(this._destroy=e.destroy)),f.call(this)}function w(e,t,r,n,i){var o,a=e._readableState;null===t?(a.reading=!1,function(e,t){if(t.ended)return;if(t.decoder){var r=t.decoder.end();r&&r.length&&(t.buffer.push(r),t.length+=t.objectMode?1:r.length)}t.ended=!0,M(e)}(e,a)):(i||(o=function(e,t){var r;n=t,c.isBuffer(n)||n instanceof u||"string"==typeof t||void 0===t||e.objectMode||(r=new TypeError("Invalid non-string/buffer chunk"));var n;return r}(a,t)),o?e.emit("error",o):a.objectMode||t&&t.length>0?("string"==typeof t||a.objectMode||Object.getPrototypeOf(t)===c.prototype||(t=function(e){return c.from(e)}(t)),n?a.endEmitted?e.emit("error",new Error("stream.unshift() after end event")):_(e,a,t,!0):a.ended?e.emit("error",new Error("stream.push() after EOF")):(a.reading=!1,a.decoder&&!r?(t=a.decoder.write(t),a.objectMode||0!==t.length?_(e,a,t,!1):x(e,a)):_(e,a,t,!1))):n||(a.reading=!1));return function(e){return!e.ended&&(e.needReadable||e.length<e.highWaterMark||0===e.length)}(a)}function _(e,t,r,n){t.flowing&&0===t.length&&!t.sync?(e.emit("data",r),e.read(0)):(t.length+=t.objectMode?1:r.length,n?t.buffer.unshift(r):t.buffer.push(r),t.needReadable&&M(e)),x(e,t)}Object.defineProperty(g.prototype,"destroyed",{get:function(){return void 0!==this._readableState&&this._readableState.destroyed},set:function(e){this._readableState&&(this._readableState.destroyed=e)}}),g.prototype.destroy=y.destroy,g.prototype._undestroy=y.undestroy,g.prototype._destroy=function(e,t){this.push(null),t(e)},g.prototype.push=function(e,t){var r,n=this._readableState;return n.objectMode?r=!0:"string"==typeof e&&((t=t||n.defaultEncoding)!==n.encoding&&(e=c.from(e,t),t=""),r=!0),w(this,e,t,!1,r)},g.prototype.unshift=function(e){return w(this,e,null,!0,!1)},g.prototype.isPaused=function(){return!1===this._readableState.flowing},g.prototype.setEncoding=function(e){return p||(p=r(32).StringDecoder),this._readableState.decoder=new p(e),this._readableState.encoding=e,this};var S=8388608;function E(e,t){return e<=0||0===t.length&&t.ended?0:t.objectMode?1:e!=e?t.flowing&&t.length?t.buffer.head.data.length:t.length:(e>t.highWaterMark&&(t.highWaterMark=function(e){return e>=S?e=S:(e--,e|=e>>>1,e|=e>>>2,e|=e>>>4,e|=e>>>8,e|=e>>>16,e++),e}(e)),e<=t.length?e:t.ended?t.length:(t.needReadable=!0,0))}function M(e){var t=e._readableState;t.needReadable=!1,t.emittedReadable||(l("emitReadable",t.flowing),t.emittedReadable=!0,t.sync?i.nextTick(k,e):k(e))}function k(e){l("emit readable"),e.emit("readable"),j(e)}function x(e,t){t.readingMore||(t.readingMore=!0,i.nextTick(A,e,t))}function A(e,t){for(var r=t.length;!t.reading&&!t.flowing&&!t.ended&&t.length<t.highWaterMark&&(l("maybeReadMore read 0"),e.read(0),r!==t.length);)r=t.length;t.readingMore=!1}function B(e){l("readable nexttick read 0"),e.read(0)}function I(e,t){t.reading||(l("resume read 0"),e.read(0)),t.resumeScheduled=!1,t.awaitDrain=0,e.emit("resume"),j(e),t.flowing&&!t.reading&&e.read(0)}function j(e){var t=e._readableState;for(l("flow",t.flowing);t.flowing&&null!==e.read(););}function R(e,t){return 0===t.length?null:(t.objectMode?r=t.buffer.shift():!e||e>=t.length?(r=t.decoder?t.buffer.join(""):1===t.buffer.length?t.buffer.head.data:t.buffer.concat(t.length),t.buffer.clear()):r=function(e,t,r){var n;e<t.head.data.length?(n=t.head.data.slice(0,e),t.head.data=t.head.data.slice(e)):n=e===t.head.data.length?t.shift():r?function(e,t){var r=t.head,n=1,i=r.data;e-=i.length;for(;r=r.next;){var o=r.data,a=e>o.length?o.length:e;if(a===o.length?i+=o:i+=o.slice(0,e),0===(e-=a)){a===o.length?(++n,r.next?t.head=r.next:t.head=t.tail=null):(t.head=r,r.data=o.slice(a));break}++n}return t.length-=n,i}(e,t):function(e,t){var r=c.allocUnsafe(e),n=t.head,i=1;n.data.copy(r),e-=n.data.length;for(;n=n.next;){var o=n.data,a=e>o.length?o.length:e;if(o.copy(r,r.length-e,0,a),0===(e-=a)){a===o.length?(++i,n.next?t.head=n.next:t.head=t.tail=null):(t.head=n,n.data=o.slice(a));break}++i}return t.length-=i,r}(e,t);return n}(e,t.buffer,t.decoder),r);var r}function T(e){var t=e._readableState;if(t.length>0)throw new Error('"endReadable()" called on non-empty stream');t.endEmitted||(t.ended=!0,i.nextTick(P,t,e))}function P(e,t){e.endEmitted||0!==e.length||(e.endEmitted=!0,t.readable=!1,t.emit("end"))}function C(e,t){for(var r=0,n=e.length;r<n;r++)if(e[r]===t)return r;return-1}g.prototype.read=function(e){l("read",e),e=parseInt(e,10);var t=this._readableState,r=e;if(0!==e&&(t.emittedReadable=!1),0===e&&t.needReadable&&(t.length>=t.highWaterMark||t.ended))return l("read: emitReadable",t.length,t.ended),0===t.length&&t.ended?T(this):M(this),null;if(0===(e=E(e,t))&&t.ended)return 0===t.length&&T(this),null;var n,i=t.needReadable;return l("need readable",i),(0===t.length||t.length-e<t.highWaterMark)&&l("length less than watermark",i=!0),t.ended||t.reading?l("reading or ended",i=!1):i&&(l("do read"),t.reading=!0,t.sync=!0,0===t.length&&(t.needReadable=!0),this._read(t.highWaterMark),t.sync=!1,t.reading||(e=E(r,t))),null===(n=e>0?R(e,t):null)?(t.needReadable=!0,e=0):t.length-=e,0===t.length&&(t.ended||(t.needReadable=!0),r!==e&&t.ended&&T(this)),null!==n&&this.emit("data",n),n},g.prototype._read=function(e){this.emit("error",new Error("_read() is not implemented"))},g.prototype.pipe=function(e,t){var r=this,o=this._readableState;switch(o.pipesCount){case 0:o.pipes=e;break;case 1:o.pipes=[o.pipes,e];break;default:o.pipes.push(e)}o.pipesCount+=1,l("pipe count=%d opts=%j",o.pipesCount,t);var f=(!t||!1!==t.end)&&e!==n.stdout&&e!==n.stderr?u:g;function c(t,n){l("onunpipe"),t===r&&n&&!1===n.hasUnpiped&&(n.hasUnpiped=!0,l("cleanup"),e.removeListener("close",m),e.removeListener("finish",v),e.removeListener("drain",h),e.removeListener("error",y),e.removeListener("unpipe",c),r.removeListener("end",u),r.removeListener("end",g),r.removeListener("data",b),d=!0,!o.awaitDrain||e._writableState&&!e._writableState.needDrain||h())}function u(){l("onend"),e.end()}o.endEmitted?i.nextTick(f):r.once("end",f),e.on("unpipe",c);var h=function(e){return function(){var t=e._readableState;l("pipeOnDrain",t.awaitDrain),t.awaitDrain&&t.awaitDrain--,0===t.awaitDrain&&s(e,"data")&&(t.flowing=!0,j(e))}}(r);e.on("drain",h);var d=!1;var p=!1;function b(t){l("ondata"),p=!1,!1!==e.write(t)||p||((1===o.pipesCount&&o.pipes===e||o.pipesCount>1&&-1!==C(o.pipes,e))&&!d&&(l("false write response, pause",r._readableState.awaitDrain),r._readableState.awaitDrain++,p=!0),r.pause())}function y(t){l("onerror",t),g(),e.removeListener("error",y),0===s(e,"error")&&e.emit("error",t)}function m(){e.removeListener("finish",v),g()}function v(){l("onfinish"),e.removeListener("close",m),g()}function g(){l("unpipe"),r.unpipe(e)}return r.on("data",b),function(e,t,r){if("function"==typeof e.prependListener)return e.prependListener(t,r);e._events&&e._events[t]?a(e._events[t])?e._events[t].unshift(r):e._events[t]=[r,e._events[t]]:e.on(t,r)}(e,"error",y),e.once("close",m),e.once("finish",v),e.emit("pipe",r),o.flowing||(l("pipe resume"),r.resume()),e},g.prototype.unpipe=function(e){var t=this._readableState,r={hasUnpiped:!1};if(0===t.pipesCount)return this;if(1===t.pipesCount)return e&&e!==t.pipes?this:(e||(e=t.pipes),t.pipes=null,t.pipesCount=0,t.flowing=!1,e&&e.emit("unpipe",this,r),this);if(!e){var n=t.pipes,i=t.pipesCount;t.pipes=null,t.pipesCount=0,t.flowing=!1;for(var o=0;o<i;o++)n[o].emit("unpipe",this,r);return this}var a=C(t.pipes,e);return-1===a?this:(t.pipes.splice(a,1),t.pipesCount-=1,1===t.pipesCount&&(t.pipes=t.pipes[0]),e.emit("unpipe",this,r),this)},g.prototype.on=function(e,t){var r=f.prototype.on.call(this,e,t);if("data"===e)!1!==this._readableState.flowing&&this.resume();else if("readable"===e){var n=this._readableState;n.endEmitted||n.readableListening||(n.readableListening=n.needReadable=!0,n.emittedReadable=!1,n.reading?n.length&&M(this):i.nextTick(B,this))}return r},g.prototype.addListener=g.prototype.on,g.prototype.resume=function(){var e=this._readableState;return e.flowing||(l("resume"),e.flowing=!0,function(e,t){t.resumeScheduled||(t.resumeScheduled=!0,i.nextTick(I,e,t))}(this,e)),this},g.prototype.pause=function(){return l("call pause flowing=%j",this._readableState.flowing),!1!==this._readableState.flowing&&(l("pause"),this._readableState.flowing=!1,this.emit("pause")),this},g.prototype.wrap=function(e){var t=this,r=this._readableState,n=!1;for(var i in e.on("end",(function(){if(l("wrapped end"),r.decoder&&!r.ended){var e=r.decoder.end();e&&e.length&&t.push(e)}t.push(null)})),e.on("data",(function(i){(l("wrapped data"),r.decoder&&(i=r.decoder.write(i)),r.objectMode&&null==i)||(r.objectMode||i&&i.length)&&(t.push(i)||(n=!0,e.pause()))})),e)void 0===this[i]&&"function"==typeof e[i]&&(this[i]=function(t){return function(){return e[t].apply(e,arguments)}}(i));for(var o=0;o<m.length;o++)e.on(m[o],this.emit.bind(this,m[o]));return this._read=function(t){l("wrapped _read",t),n&&(n=!1,e.resume())},this},Object.defineProperty(g.prototype,"readableHighWaterMark",{enumerable:!1,get:function(){return this._readableState.highWaterMark}}),g._fromList=R}).call(this,r(9),r(4))},function(e,t,r){e.exports=r(29).EventEmitter},function(e,t,r){"use strict";var n=r(21);function i(e,t){e.emit("error",t)}e.exports={destroy:function(e,t){var r=this,o=this._readableState&&this._readableState.destroyed,a=this._writableState&&this._writableState.destroyed;return o||a?(t?t(e):!e||this._writableState&&this._writableState.errorEmitted||n.nextTick(i,this,e),this):(this._readableState&&(this._readableState.destroyed=!0),this._writableState&&(this._writableState.destroyed=!0),this._destroy(e||null,(function(e){!t&&e?(n.nextTick(i,r,e),r._writableState&&(r._writableState.errorEmitted=!0)):t&&t(e)})),this)},undestroy:function(){this._readableState&&(this._readableState.destroyed=!1,this._readableState.reading=!1,this._readableState.ended=!1,this._readableState.endEmitted=!1),this._writableState&&(this._writableState.destroyed=!1,this._writableState.ended=!1,this._writableState.ending=!1,this._writableState.finished=!1,this._writableState.errorEmitted=!1)}}},function(e,t,r){"use strict";e.exports=a;var n=r(11),i=r(15);function o(e,t){var r=this._transformState;r.transforming=!1;var n=r.writecb;if(!n)return this.emit("error",new Error("write callback called multiple times"));r.writechunk=null,r.writecb=null,null!=t&&this.push(t),n(e);var i=this._readableState;i.reading=!1,(i.needReadable||i.length<i.highWaterMark)&&this._read(i.highWaterMark)}function a(e){if(!(this instanceof a))return new a(e);n.call(this,e),this._transformState={afterTransform:o.bind(this),needTransform:!1,transforming:!1,writecb:null,writechunk:null,writeencoding:null},this._readableState.needReadable=!0,this._readableState.sync=!1,e&&("function"==typeof e.transform&&(this._transform=e.transform),"function"==typeof e.flush&&(this._flush=e.flush)),this.on("prefinish",s)}function s(){var e=this;"function"==typeof this._flush?this._flush((function(t,r){f(e,t,r)})):f(this,null,null)}function f(e,t,r){if(t)return e.emit("error",t);if(null!=r&&e.push(r),e._writableState.length)throw new Error("Calling transform done when ws.length != 0");if(e._transformState.transforming)throw new Error("Calling transform done when still transforming");return e.push(null)}i.inherits=r(1),i.inherits(a,n),a.prototype.push=function(e,t){return this._transformState.needTransform=!1,n.prototype.push.call(this,e,t)},a.prototype._transform=function(e,t,r){throw new Error("_transform() is not implemented")},a.prototype._write=function(e,t,r){var n=this._transformState;if(n.writecb=r,n.writechunk=e,n.writeencoding=t,!n.transforming){var i=this._readableState;(n.needTransform||i.needReadable||i.length<i.highWaterMark)&&this._read(i.highWaterMark)}},a.prototype._read=function(e){var t=this._transformState;null!==t.writechunk&&t.writecb&&!t.transforming?(t.transforming=!0,this._transform(t.writechunk,t.writeencoding,t.afterTransform)):t.needTransform=!0},a.prototype._destroy=function(e,t){var r=this;n.prototype._destroy.call(this,e,(function(e){t(e),r.emit("close")}))}},function(e,t,r){var n=r(113),i=r(0).Buffer,o=r(114),a=r(184),s=r(22),f="secret must be a string or buffer",c="key must be a string or a buffer",u="key must be a string, a buffer or an object",h="function"==typeof o.createPublicKey;function d(e){if(!i.isBuffer(e)&&"string"!=typeof e){if(!h)throw y(c);if("object"!=typeof e)throw y(c);if("string"!=typeof e.type)throw y(c);if("string"!=typeof e.asymmetricKeyType)throw y(c);if("function"!=typeof e.export)throw y(c)}}function l(e){if(!i.isBuffer(e)&&"string"!=typeof e&&"object"!=typeof e)throw y(u)}function p(e){return e.replace(/=/g,"").replace(/\+/g,"-").replace(/\//g,"_")}function b(e){var t=4-(e=e.toString()).length%4;if(4!==t)for(var r=0;r<t;++r)e+="=";return e.replace(/\-/g,"+").replace(/_/g,"/")}function y(e){var t=[].slice.call(arguments,1),r=s.format.bind(s,e).apply(null,t);return new TypeError(r)}function m(e){var t;return t=e,i.isBuffer(t)||"string"==typeof t||(e=JSON.stringify(e)),e}function v(e){return function(t,r){!function(e){if(!i.isBuffer(e)){if("string"==typeof e)return e;if(!h)throw y(f);if("object"!=typeof e)throw y(f);if("secret"!==e.type)throw y(f);if("function"!=typeof e.export)throw y(f)}}(r),t=m(t);var n=o.createHmac("sha"+e,r);return p((n.update(t),n.digest("base64")))}}function g(e){return function(t,r,o){var a=v(e)(t,o);return n(i.from(r),i.from(a))}}function w(e){return function(t,r){l(r),t=m(t);var n=o.createSign("RSA-SHA"+e);return p((n.update(t),n.sign(r,"base64")))}}function _(e){return function(t,r,n){d(n),t=m(t),r=b(r);var i=o.createVerify("RSA-SHA"+e);return i.update(t),i.verify(n,r,"base64")}}function S(e){return function(t,r){l(r),t=m(t);var n=o.createSign("RSA-SHA"+e);return p((n.update(t),n.sign({key:r,padding:o.constants.RSA_PKCS1_PSS_PADDING,saltLength:o.constants.RSA_PSS_SALTLEN_DIGEST},"base64")))}}function E(e){return function(t,r,n){d(n),t=m(t),r=b(r);var i=o.createVerify("RSA-SHA"+e);return i.update(t),i.verify({key:n,padding:o.constants.RSA_PKCS1_PSS_PADDING,saltLength:o.constants.RSA_PSS_SALTLEN_DIGEST},r,"base64")}}function M(e){var t=w(e);return function(){var r=t.apply(null,arguments);return r=a.derToJose(r,"ES"+e)}}function k(e){var t=_(e);return function(r,n,i){return n=a.joseToDer(n,"ES"+e).toString("base64"),t(r,n,i)}}function x(){return function(){return""}}function A(){return function(e,t){return""===t}}h&&(c+=" or a KeyObject",f+="or a KeyObject"),e.exports=function(e){var t={hs:v,rs:w,ps:S,es:M,none:x},r={hs:g,rs:_,ps:E,es:k,none:A},n=e.match(/^(RS|PS|ES|HS)(256|384|512)$|^(none)$/i);if(!n)throw y('"%s" is not a valid algorithm.\n  Supported algorithms are:\n  "HS256", "HS384", "HS512", "RS256", "RS384", "RS512", "PS256", "PS384", "PS512", "ES256", "ES384", "ES512" and "none".',e);var i=(n[1]||n[3]).toLowerCase(),o=n[2];return{sign:t[i](o),verify:r[i](o)}}},function(e,t,r){"use strict";var n=r(0).Buffer,i=r(12).Transform;function o(e){i.call(this),this._block=n.allocUnsafe(e),this._blockSize=e,this._blockOffset=0,this._length=[0,0,0,0],this._finalized=!1}r(1)(o,i),o.prototype._transform=function(e,t,r){var n=null;try{this.update(e,t)}catch(e){n=e}r(n)},o.prototype._flush=function(e){var t=null;try{this.push(this.digest())}catch(e){t=e}e(t)},o.prototype.update=function(e,t){if(function(e,t){if(!n.isBuffer(e)&&"string"!=typeof e)throw new TypeError(t+" must be a string or a buffer")}(e,"Data"),this._finalized)throw new Error("Digest already called");n.isBuffer(e)||(e=n.from(e,t));for(var r=this._block,i=0;this._blockOffset+e.length-i>=this._blockSize;){for(var o=this._blockOffset;o<this._blockSize;)r[o++]=e[i++];this._update(),this._blockOffset=0}for(;i<e.length;)r[this._blockOffset++]=e[i++];for(var a=0,s=8*e.length;s>0;++a)this._length[a]+=s,(s=this._length[a]/4294967296|0)>0&&(this._length[a]-=4294967296*s);return this},o.prototype._update=function(){throw new Error("_update is not implemented")},o.prototype.digest=function(e){if(this._finalized)throw new Error("Digest already called");this._finalized=!0;var t=this._digest();void 0!==e&&(t=t.toString(e)),this._block.fill(0),this._blockOffset=0;for(var r=0;r<4;++r)this._length[r]=0;return t},o.prototype._digest=function(){throw new Error("_digest is not implemented")},e.exports=o},function(e,t,r){var n=r(1),i=r(14),o=r(0).Buffer,a=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298],s=new Array(64);function f(){this.init(),this._w=s,i.call(this,64,56)}function c(e,t,r){return r^e&(t^r)}function u(e,t,r){return e&t|r&(e|t)}function h(e){return(e>>>2|e<<30)^(e>>>13|e<<19)^(e>>>22|e<<10)}function d(e){return(e>>>6|e<<26)^(e>>>11|e<<21)^(e>>>25|e<<7)}function l(e){return(e>>>7|e<<25)^(e>>>18|e<<14)^e>>>3}n(f,i),f.prototype.init=function(){return this._a=1779033703,this._b=3144134277,this._c=1013904242,this._d=2773480762,this._e=1359893119,this._f=2600822924,this._g=528734635,this._h=1541459225,this},f.prototype._update=function(e){for(var t,r=this._w,n=0|this._a,i=0|this._b,o=0|this._c,s=0|this._d,f=0|this._e,p=0|this._f,b=0|this._g,y=0|this._h,m=0;m<16;++m)r[m]=e.readInt32BE(4*m);for(;m<64;++m)r[m]=0|(((t=r[m-2])>>>17|t<<15)^(t>>>19|t<<13)^t>>>10)+r[m-7]+l(r[m-15])+r[m-16];for(var v=0;v<64;++v){var g=y+d(f)+c(f,p,b)+a[v]+r[v]|0,w=h(n)+u(n,i,o)|0;y=b,b=p,p=f,f=s+g|0,s=o,o=i,i=n,n=g+w|0}this._a=n+this._a|0,this._b=i+this._b|0,this._c=o+this._c|0,this._d=s+this._d|0,this._e=f+this._e|0,this._f=p+this._f|0,this._g=b+this._g|0,this._h=y+this._h|0},f.prototype._hash=function(){var e=o.allocUnsafe(32);return e.writeInt32BE(this._a,0),e.writeInt32BE(this._b,4),e.writeInt32BE(this._c,8),e.writeInt32BE(this._d,12),e.writeInt32BE(this._e,16),e.writeInt32BE(this._f,20),e.writeInt32BE(this._g,24),e.writeInt32BE(this._h,28),e},e.exports=f},function(e,t,r){var n=r(1),i=r(14),o=r(0).Buffer,a=[1116352408,3609767458,1899447441,602891725,3049323471,3964484399,3921009573,2173295548,961987163,4081628472,1508970993,3053834265,2453635748,2937671579,2870763221,3664609560,3624381080,2734883394,310598401,1164996542,607225278,1323610764,1426881987,3590304994,1925078388,4068182383,2162078206,991336113,2614888103,633803317,3248222580,3479774868,3835390401,2666613458,4022224774,944711139,264347078,2341262773,604807628,2007800933,770255983,1495990901,1249150122,1856431235,1555081692,3175218132,1996064986,2198950837,2554220882,3999719339,2821834349,766784016,2952996808,2566594879,3210313671,3203337956,3336571891,1034457026,3584528711,2466948901,113926993,3758326383,338241895,168717936,666307205,1188179964,773529912,1546045734,1294757372,1522805485,1396182291,2643833823,1695183700,2343527390,1986661051,1014477480,2177026350,1206759142,2456956037,344077627,2730485921,1290863460,2820302411,3158454273,3259730800,3505952657,3345764771,106217008,3516065817,3606008344,3600352804,1432725776,4094571909,1467031594,275423344,851169720,430227734,3100823752,506948616,1363258195,659060556,3750685593,883997877,3785050280,958139571,3318307427,1322822218,3812723403,1537002063,2003034995,1747873779,3602036899,1955562222,1575990012,2024104815,1125592928,2227730452,2716904306,2361852424,442776044,2428436474,593698344,2756734187,3733110249,3204031479,2999351573,3329325298,3815920427,3391569614,3928383900,3515267271,566280711,3940187606,3454069534,4118630271,4000239992,116418474,1914138554,174292421,2731055270,289380356,3203993006,460393269,320620315,685471733,587496836,852142971,1086792851,1017036298,365543100,1126000580,2618297676,1288033470,3409855158,1501505948,4234509866,1607167915,987167468,1816402316,1246189591],s=new Array(160);function f(){this.init(),this._w=s,i.call(this,128,112)}function c(e,t,r){return r^e&(t^r)}function u(e,t,r){return e&t|r&(e|t)}function h(e,t){return(e>>>28|t<<4)^(t>>>2|e<<30)^(t>>>7|e<<25)}function d(e,t){return(e>>>14|t<<18)^(e>>>18|t<<14)^(t>>>9|e<<23)}function l(e,t){return(e>>>1|t<<31)^(e>>>8|t<<24)^e>>>7}function p(e,t){return(e>>>1|t<<31)^(e>>>8|t<<24)^(e>>>7|t<<25)}function b(e,t){return(e>>>19|t<<13)^(t>>>29|e<<3)^e>>>6}function y(e,t){return(e>>>19|t<<13)^(t>>>29|e<<3)^(e>>>6|t<<26)}function m(e,t){return e>>>0<t>>>0?1:0}n(f,i),f.prototype.init=function(){return this._ah=1779033703,this._bh=3144134277,this._ch=1013904242,this._dh=2773480762,this._eh=1359893119,this._fh=2600822924,this._gh=528734635,this._hh=1541459225,this._al=4089235720,this._bl=2227873595,this._cl=4271175723,this._dl=1595750129,this._el=2917565137,this._fl=725511199,this._gl=4215389547,this._hl=327033209,this},f.prototype._update=function(e){for(var t=this._w,r=0|this._ah,n=0|this._bh,i=0|this._ch,o=0|this._dh,s=0|this._eh,f=0|this._fh,v=0|this._gh,g=0|this._hh,w=0|this._al,_=0|this._bl,S=0|this._cl,E=0|this._dl,M=0|this._el,k=0|this._fl,x=0|this._gl,A=0|this._hl,B=0;B<32;B+=2)t[B]=e.readInt32BE(4*B),t[B+1]=e.readInt32BE(4*B+4);for(;B<160;B+=2){var I=t[B-30],j=t[B-30+1],R=l(I,j),T=p(j,I),P=b(I=t[B-4],j=t[B-4+1]),C=y(j,I),O=t[B-14],D=t[B-14+1],N=t[B-32],L=t[B-32+1],U=T+D|0,q=R+O+m(U,T)|0;q=(q=q+P+m(U=U+C|0,C)|0)+N+m(U=U+L|0,L)|0,t[B]=q,t[B+1]=U}for(var z=0;z<160;z+=2){q=t[z],U=t[z+1];var F=u(r,n,i),K=u(w,_,S),H=h(r,w),V=h(w,r),Y=d(s,M),W=d(M,s),X=a[z],J=a[z+1],$=c(s,f,v),G=c(M,k,x),Z=A+W|0,Q=g+Y+m(Z,A)|0;Q=(Q=(Q=Q+$+m(Z=Z+G|0,G)|0)+X+m(Z=Z+J|0,J)|0)+q+m(Z=Z+U|0,U)|0;var ee=V+K|0,te=H+F+m(ee,V)|0;g=v,A=x,v=f,x=k,f=s,k=M,s=o+Q+m(M=E+Z|0,E)|0,o=i,E=S,i=n,S=_,n=r,_=w,r=Q+te+m(w=Z+ee|0,Z)|0}this._al=this._al+w|0,this._bl=this._bl+_|0,this._cl=this._cl+S|0,this._dl=this._dl+E|0,this._el=this._el+M|0,this._fl=this._fl+k|0,this._gl=this._gl+x|0,this._hl=this._hl+A|0,this._ah=this._ah+r+m(this._al,w)|0,this._bh=this._bh+n+m(this._bl,_)|0,this._ch=this._ch+i+m(this._cl,S)|0,this._dh=this._dh+o+m(this._dl,E)|0,this._eh=this._eh+s+m(this._el,M)|0,this._fh=this._fh+f+m(this._fl,k)|0,this._gh=this._gh+v+m(this._gl,x)|0,this._hh=this._hh+g+m(this._hl,A)|0},f.prototype._hash=function(){var e=o.allocUnsafe(64);function t(t,r,n){e.writeInt32BE(t,n),e.writeInt32BE(r,n+4)}return t(this._ah,this._al,0),t(this._bh,this._bl,8),t(this._ch,this._cl,16),t(this._dh,this._dl,24),t(this._eh,this._el,32),t(this._fh,this._fl,40),t(this._gh,this._gl,48),t(this._hh,this._hl,56),e},e.exports=f},function(e,t,r){"use strict";var n=r(1),i=r(119),o=r(10),a=r(0).Buffer,s=r(56),f=r(34),c=r(35),u=a.alloc(128);function h(e,t){o.call(this,"digest"),"string"==typeof t&&(t=a.from(t));var r="sha512"===e||"sha384"===e?128:64;(this._alg=e,this._key=t,t.length>r)?t=("rmd160"===e?new f:c(e)).update(t).digest():t.length<r&&(t=a.concat([t,u],r));for(var n=this._ipad=a.allocUnsafe(r),i=this._opad=a.allocUnsafe(r),s=0;s<r;s++)n[s]=54^t[s],i[s]=92^t[s];this._hash="rmd160"===e?new f:c(e),this._hash.update(n)}n(h,o),h.prototype._update=function(e){this._hash.update(e)},h.prototype._final=function(){var e=this._hash.digest();return("rmd160"===this._alg?new f:c(this._alg)).update(this._opad).update(e).digest()},e.exports=function(e,t){return"rmd160"===(e=e.toLowerCase())||"ripemd160"===e?new h("rmd160",t):"md5"===e?new i(s,t):new h(e,t)}},function(e,t,r){var n=r(33);e.exports=function(e){return(new n).update(e).digest()}},function(e){e.exports=JSON.parse('{"sha224WithRSAEncryption":{"sign":"rsa","hash":"sha224","id":"302d300d06096086480165030402040500041c"},"RSA-SHA224":{"sign":"ecdsa/rsa","hash":"sha224","id":"302d300d06096086480165030402040500041c"},"sha256WithRSAEncryption":{"sign":"rsa","hash":"sha256","id":"3031300d060960864801650304020105000420"},"RSA-SHA256":{"sign":"ecdsa/rsa","hash":"sha256","id":"3031300d060960864801650304020105000420"},"sha384WithRSAEncryption":{"sign":"rsa","hash":"sha384","id":"3041300d060960864801650304020205000430"},"RSA-SHA384":{"sign":"ecdsa/rsa","hash":"sha384","id":"3041300d060960864801650304020205000430"},"sha512WithRSAEncryption":{"sign":"rsa","hash":"sha512","id":"3051300d060960864801650304020305000440"},"RSA-SHA512":{"sign":"ecdsa/rsa","hash":"sha512","id":"3051300d060960864801650304020305000440"},"RSA-SHA1":{"sign":"rsa","hash":"sha1","id":"3021300906052b0e03021a05000414"},"ecdsa-with-SHA1":{"sign":"ecdsa","hash":"sha1","id":""},"sha256":{"sign":"ecdsa","hash":"sha256","id":""},"sha224":{"sign":"ecdsa","hash":"sha224","id":""},"sha384":{"sign":"ecdsa","hash":"sha384","id":""},"sha512":{"sign":"ecdsa","hash":"sha512","id":""},"DSA-SHA":{"sign":"dsa","hash":"sha1","id":""},"DSA-SHA1":{"sign":"dsa","hash":"sha1","id":""},"DSA":{"sign":"dsa","hash":"sha1","id":""},"DSA-WITH-SHA224":{"sign":"dsa","hash":"sha224","id":""},"DSA-SHA224":{"sign":"dsa","hash":"sha224","id":""},"DSA-WITH-SHA256":{"sign":"dsa","hash":"sha256","id":""},"DSA-SHA256":{"sign":"dsa","hash":"sha256","id":""},"DSA-WITH-SHA384":{"sign":"dsa","hash":"sha384","id":""},"DSA-SHA384":{"sign":"dsa","hash":"sha384","id":""},"DSA-WITH-SHA512":{"sign":"dsa","hash":"sha512","id":""},"DSA-SHA512":{"sign":"dsa","hash":"sha512","id":""},"DSA-RIPEMD160":{"sign":"dsa","hash":"rmd160","id":""},"ripemd160WithRSA":{"sign":"rsa","hash":"rmd160","id":"3021300906052b2403020105000414"},"RSA-RIPEMD160":{"sign":"rsa","hash":"rmd160","id":"3021300906052b2403020105000414"},"md5WithRSAEncryption":{"sign":"rsa","hash":"md5","id":"3020300c06082a864886f70d020505000410"},"RSA-MD5":{"sign":"rsa","hash":"md5","id":"3020300c06082a864886f70d020505000410"}}')},function(e,t,r){t.pbkdf2=r(121),t.pbkdf2Sync=r(61)},function(e,t,r){(function(t){var r=Math.pow(2,30)-1;function n(e,r){if("string"!=typeof e&&!t.isBuffer(e))throw new TypeError(r+" must be a buffer or string")}e.exports=function(e,t,i,o){if(n(e,"Password"),n(t,"Salt"),"number"!=typeof i)throw new TypeError("Iterations not a number");if(i<0)throw new TypeError("Bad iterations");if("number"!=typeof o)throw new TypeError("Key length not a number");if(o<0||o>r||o!=o)throw new TypeError("Bad key length")}}).call(this,r(2).Buffer)},function(e,t,r){(function(t){var r;t.browser?r="utf-8":r=parseInt(t.version.split(".")[0].slice(1),10)>=6?"utf-8":"binary";e.exports=r}).call(this,r(4))},function(e,t,r){var n=r(56),i=r(34),o=r(35),a=r(59),s=r(60),f=r(0).Buffer,c=f.alloc(128),u={md5:16,sha1:20,sha224:28,sha256:32,sha384:48,sha512:64,rmd160:20,ripemd160:20};function h(e,t,r){var a=function(e){return"rmd160"===e||"ripemd160"===e?function(e){return(new i).update(e).digest()}:"md5"===e?n:function(t){return o(e).update(t).digest()}}(e),s="sha512"===e||"sha384"===e?128:64;t.length>s?t=a(t):t.length<s&&(t=f.concat([t,c],s));for(var h=f.allocUnsafe(s+u[e]),d=f.allocUnsafe(s+u[e]),l=0;l<s;l++)h[l]=54^t[l],d[l]=92^t[l];var p=f.allocUnsafe(s+r+4);h.copy(p,0,0,s),this.ipad1=p,this.ipad2=h,this.opad=d,this.alg=e,this.blocksize=s,this.hash=a,this.size=u[e]}h.prototype.run=function(e,t){return e.copy(t,this.blocksize),this.hash(t).copy(this.opad,this.blocksize),this.hash(this.opad)},e.exports=function(e,t,r,n,i){a(e,t,r,n),f.isBuffer(e)||(e=f.from(e,s)),f.isBuffer(t)||(t=f.from(t,s));var o=new h(i=i||"sha1",e,t.length),c=f.allocUnsafe(n),d=f.allocUnsafe(t.length+4);t.copy(d,0,0,t.length);for(var l=0,p=u[i],b=Math.ceil(n/p),y=1;y<=b;y++){d.writeUInt32BE(y,t.length);for(var m=o.run(d,o.ipad1),v=m,g=1;g<r;g++){v=o.run(v,o.ipad2);for(var w=0;w<p;w++)m[w]^=v[w]}m.copy(c,l),l+=p}return c}},function(e,t,r){var n=r(17),i=r(0).Buffer,o=r(63);function a(e){var t=e._cipher.encryptBlockRaw(e._prev);return o(e._prev),t}t.encrypt=function(e,t){var r=Math.ceil(t.length/16),o=e._cache.length;e._cache=i.concat([e._cache,i.allocUnsafe(16*r)]);for(var s=0;s<r;s++){var f=a(e),c=o+16*s;e._cache.writeUInt32BE(f[0],c+0),e._cache.writeUInt32BE(f[1],c+4),e._cache.writeUInt32BE(f[2],c+8),e._cache.writeUInt32BE(f[3],c+12)}var u=e._cache.slice(0,t.length);return e._cache=e._cache.slice(t.length),n(t,u)}},function(e,t){e.exports=function(e){for(var t,r=e.length;r--;){if(255!==(t=e.readUInt8(r))){t++,e.writeUInt8(t,r);break}e.writeUInt8(0,r)}}},function(e){e.exports=JSON.parse('{"aes-128-ecb":{"cipher":"AES","key":128,"iv":0,"mode":"ECB","type":"block"},"aes-192-ecb":{"cipher":"AES","key":192,"iv":0,"mode":"ECB","type":"block"},"aes-256-ecb":{"cipher":"AES","key":256,"iv":0,"mode":"ECB","type":"block"},"aes-128-cbc":{"cipher":"AES","key":128,"iv":16,"mode":"CBC","type":"block"},"aes-192-cbc":{"cipher":"AES","key":192,"iv":16,"mode":"CBC","type":"block"},"aes-256-cbc":{"cipher":"AES","key":256,"iv":16,"mode":"CBC","type":"block"},"aes128":{"cipher":"AES","key":128,"iv":16,"mode":"CBC","type":"block"},"aes192":{"cipher":"AES","key":192,"iv":16,"mode":"CBC","type":"block"},"aes256":{"cipher":"AES","key":256,"iv":16,"mode":"CBC","type":"block"},"aes-128-cfb":{"cipher":"AES","key":128,"iv":16,"mode":"CFB","type":"stream"},"aes-192-cfb":{"cipher":"AES","key":192,"iv":16,"mode":"CFB","type":"stream"},"aes-256-cfb":{"cipher":"AES","key":256,"iv":16,"mode":"CFB","type":"stream"},"aes-128-cfb8":{"cipher":"AES","key":128,"iv":16,"mode":"CFB8","type":"stream"},"aes-192-cfb8":{"cipher":"AES","key":192,"iv":16,"mode":"CFB8","type":"stream"},"aes-256-cfb8":{"cipher":"AES","key":256,"iv":16,"mode":"CFB8","type":"stream"},"aes-128-cfb1":{"cipher":"AES","key":128,"iv":16,"mode":"CFB1","type":"stream"},"aes-192-cfb1":{"cipher":"AES","key":192,"iv":16,"mode":"CFB1","type":"stream"},"aes-256-cfb1":{"cipher":"AES","key":256,"iv":16,"mode":"CFB1","type":"stream"},"aes-128-ofb":{"cipher":"AES","key":128,"iv":16,"mode":"OFB","type":"stream"},"aes-192-ofb":{"cipher":"AES","key":192,"iv":16,"mode":"OFB","type":"stream"},"aes-256-ofb":{"cipher":"AES","key":256,"iv":16,"mode":"OFB","type":"stream"},"aes-128-ctr":{"cipher":"AES","key":128,"iv":16,"mode":"CTR","type":"stream"},"aes-192-ctr":{"cipher":"AES","key":192,"iv":16,"mode":"CTR","type":"stream"},"aes-256-ctr":{"cipher":"AES","key":256,"iv":16,"mode":"CTR","type":"stream"},"aes-128-gcm":{"cipher":"AES","key":128,"iv":12,"mode":"GCM","type":"auth"},"aes-192-gcm":{"cipher":"AES","key":192,"iv":12,"mode":"GCM","type":"auth"},"aes-256-gcm":{"cipher":"AES","key":256,"iv":12,"mode":"GCM","type":"auth"}}')},function(e,t,r){var n=r(23),i=r(0).Buffer,o=r(10),a=r(1),s=r(136),f=r(17),c=r(63);function u(e,t,r,a){o.call(this);var f=i.alloc(4,0);this._cipher=new n.AES(t);var u=this._cipher.encryptBlock(f);this._ghash=new s(u),r=function(e,t,r){if(12===t.length)return e._finID=i.concat([t,i.from([0,0,0,1])]),i.concat([t,i.from([0,0,0,2])]);var n=new s(r),o=t.length,a=o%16;n.update(t),a&&(a=16-a,n.update(i.alloc(a,0))),n.update(i.alloc(8,0));var f=8*o,u=i.alloc(8);u.writeUIntBE(f,0,8),n.update(u),e._finID=n.state;var h=i.from(e._finID);return c(h),h}(this,r,u),this._prev=i.from(r),this._cache=i.allocUnsafe(0),this._secCache=i.allocUnsafe(0),this._decrypt=a,this._alen=0,this._len=0,this._mode=e,this._authTag=null,this._called=!1}a(u,o),u.prototype._update=function(e){if(!this._called&&this._alen){var t=16-this._alen%16;t<16&&(t=i.alloc(t,0),this._ghash.update(t))}this._called=!0;var r=this._mode.encrypt(this,e);return this._decrypt?this._ghash.update(e):this._ghash.update(r),this._len+=e.length,r},u.prototype._final=function(){if(this._decrypt&&!this._authTag)throw new Error("Unsupported state or unable to authenticate data");var e=f(this._ghash.final(8*this._alen,8*this._len),this._cipher.encryptBlock(this._finID));if(this._decrypt&&function(e,t){var r=0;e.length!==t.length&&r++;for(var n=Math.min(e.length,t.length),i=0;i<n;++i)r+=e[i]^t[i];return r}(e,this._authTag))throw new Error("Unsupported state or unable to authenticate data");this._authTag=e,this._cipher.scrub()},u.prototype.getAuthTag=function(){if(this._decrypt||!i.isBuffer(this._authTag))throw new Error("Attempting to get auth tag in unsupported state");return this._authTag},u.prototype.setAuthTag=function(e){if(!this._decrypt)throw new Error("Attempting to set auth tag in unsupported state");this._authTag=e},u.prototype.setAAD=function(e){if(this._called)throw new Error("Attempting to set AAD in unsupported state");this._ghash.update(e),this._alen+=e.length},e.exports=u},function(e,t,r){var n=r(23),i=r(0).Buffer,o=r(10);function a(e,t,r,a){o.call(this),this._cipher=new n.AES(t),this._prev=i.from(r),this._cache=i.allocUnsafe(0),this._secCache=i.allocUnsafe(0),this._decrypt=a,this._mode=e}r(1)(a,o),a.prototype._update=function(e){return this._mode.encrypt(this,e,this._decrypt)},a.prototype._final=function(){this._cipher.scrub()},e.exports=a},function(e,t,r){var n=r(13);e.exports=v,v.simpleSieve=y,v.fermatTest=m;var i=r(3),o=new i(24),a=new(r(68)),s=new i(1),f=new i(2),c=new i(5),u=(new i(16),new i(8),new i(10)),h=new i(3),d=(new i(7),new i(11)),l=new i(4),p=(new i(12),null);function b(){if(null!==p)return p;var e=[];e[0]=2;for(var t=1,r=3;r<1048576;r+=2){for(var n=Math.ceil(Math.sqrt(r)),i=0;i<t&&e[i]<=n&&r%e[i]!=0;i++);t!==i&&e[i]<=n||(e[t++]=r)}return p=e,e}function y(e){for(var t=b(),r=0;r<t.length;r++)if(0===e.modn(t[r]))return 0===e.cmpn(t[r]);return!0}function m(e){var t=i.mont(e);return 0===f.toRed(t).redPow(e.subn(1)).fromRed().cmpn(1)}function v(e,t){if(e<16)return new i(2===t||5===t?[140,123]:[140,39]);var r,p;for(t=new i(t);;){for(r=new i(n(Math.ceil(e/8)));r.bitLength()>e;)r.ishrn(1);if(r.isEven()&&r.iadd(s),r.testn(1)||r.iadd(f),t.cmp(f)){if(!t.cmp(c))for(;r.mod(u).cmp(h);)r.iadd(l)}else for(;r.mod(o).cmp(d);)r.iadd(l);if(y(p=r.shrn(1))&&y(r)&&m(p)&&m(r)&&a.test(p)&&a.test(r))return r}}},function(e,t,r){var n=r(3),i=r(39);function o(e){this.rand=e||new i.Rand}e.exports=o,o.create=function(e){return new o(e)},o.prototype._randbelow=function(e){var t=e.bitLength(),r=Math.ceil(t/8);do{var i=new n(this.rand.generate(r))}while(i.cmp(e)>=0);return i},o.prototype._randrange=function(e,t){var r=t.sub(e);return e.add(this._randbelow(r))},o.prototype.test=function(e,t,r){var i=e.bitLength(),o=n.mont(e),a=new n(1).toRed(o);t||(t=Math.max(1,i/48|0));for(var s=e.subn(1),f=0;!s.testn(f);f++);for(var c=e.shrn(f),u=s.toRed(o);t>0;t--){var h=this._randrange(new n(2),s);r&&r(h);var d=h.toRed(o).redPow(c);if(0!==d.cmp(a)&&0!==d.cmp(u)){for(var l=1;l<f;l++){if(0===(d=d.redSqr()).cmp(a))return!1;if(0===d.cmp(u))break}if(l===f)return!1}}return!0},o.prototype.getDivisor=function(e,t){var r=e.bitLength(),i=n.mont(e),o=new n(1).toRed(i);t||(t=Math.max(1,r/48|0));for(var a=e.subn(1),s=0;!a.testn(s);s++);for(var f=e.shrn(s),c=a.toRed(i);t>0;t--){var u=this._randrange(new n(2),a),h=e.gcd(u);if(0!==h.cmpn(1))return h;var d=u.toRed(i).redPow(f);if(0!==d.cmp(o)&&0!==d.cmp(c)){for(var l=1;l<s;l++){if(0===(d=d.redSqr()).cmp(o))return d.fromRed().subn(1).gcd(e);if(0===d.cmp(c))break}if(l===s)return(d=d.redSqr()).fromRed().subn(1).gcd(e)}}return!1}},function(e,t,r){"use strict";var n=t;function i(e){return 1===e.length?"0"+e:e}function o(e){for(var t="",r=0;r<e.length;r++)t+=i(e[r].toString(16));return t}n.toArray=function(e,t){if(Array.isArray(e))return e.slice();if(!e)return[];var r=[];if("string"!=typeof e){for(var n=0;n<e.length;n++)r[n]=0|e[n];return r}if("hex"===t){(e=e.replace(/[^a-z0-9]+/gi,"")).length%2!=0&&(e="0"+e);for(n=0;n<e.length;n+=2)r.push(parseInt(e[n]+e[n+1],16))}else for(n=0;n<e.length;n++){var i=e.charCodeAt(n),o=i>>8,a=255&i;o?r.push(o,a):r.push(a)}return r},n.zero2=i,n.toHex=o,n.encode=function(e,t){return"hex"===t?o(e):e}},function(e,t,r){"use strict";var n=t;n.base=r(25),n.short=r(148),n.mont=r(149),n.edwards=r(150)},function(e,t,r){"use strict";var n=r(8).rotr32;function i(e,t,r){return e&t^~e&r}function o(e,t,r){return e&t^e&r^t&r}function a(e,t,r){return e^t^r}t.ft_1=function(e,t,r,n){return 0===e?i(t,r,n):1===e||3===e?a(t,r,n):2===e?o(t,r,n):void 0},t.ch32=i,t.maj32=o,t.p32=a,t.s0_256=function(e){return n(e,2)^n(e,13)^n(e,22)},t.s1_256=function(e){return n(e,6)^n(e,11)^n(e,25)},t.g0_256=function(e){return n(e,7)^n(e,18)^e>>>3},t.g1_256=function(e){return n(e,17)^n(e,19)^e>>>10}},function(e,t,r){"use strict";var n=r(8),i=r(18),o=r(71),a=r(6),s=n.sum32,f=n.sum32_4,c=n.sum32_5,u=o.ch32,h=o.maj32,d=o.s0_256,l=o.s1_256,p=o.g0_256,b=o.g1_256,y=i.BlockHash,m=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298];function v(){if(!(this instanceof v))return new v;y.call(this),this.h=[1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225],this.k=m,this.W=new Array(64)}n.inherits(v,y),e.exports=v,v.blockSize=512,v.outSize=256,v.hmacStrength=192,v.padLength=64,v.prototype._update=function(e,t){for(var r=this.W,n=0;n<16;n++)r[n]=e[t+n];for(;n<r.length;n++)r[n]=f(b(r[n-2]),r[n-7],p(r[n-15]),r[n-16]);var i=this.h[0],o=this.h[1],y=this.h[2],m=this.h[3],v=this.h[4],g=this.h[5],w=this.h[6],_=this.h[7];for(a(this.k.length===r.length),n=0;n<r.length;n++){var S=c(_,l(v),u(v,g,w),this.k[n],r[n]),E=s(d(i),h(i,o,y));_=w,w=g,g=v,v=s(m,S),m=y,y=o,o=i,i=s(S,E)}this.h[0]=s(this.h[0],i),this.h[1]=s(this.h[1],o),this.h[2]=s(this.h[2],y),this.h[3]=s(this.h[3],m),this.h[4]=s(this.h[4],v),this.h[5]=s(this.h[5],g),this.h[6]=s(this.h[6],w),this.h[7]=s(this.h[7],_)},v.prototype._digest=function(e){return"hex"===e?n.toHex32(this.h,"big"):n.split32(this.h,"big")}},function(e,t,r){"use strict";var n=r(8),i=r(18),o=r(6),a=n.rotr64_hi,s=n.rotr64_lo,f=n.shr64_hi,c=n.shr64_lo,u=n.sum64,h=n.sum64_hi,d=n.sum64_lo,l=n.sum64_4_hi,p=n.sum64_4_lo,b=n.sum64_5_hi,y=n.sum64_5_lo,m=i.BlockHash,v=[1116352408,3609767458,1899447441,602891725,3049323471,3964484399,3921009573,2173295548,961987163,4081628472,1508970993,3053834265,2453635748,2937671579,2870763221,3664609560,3624381080,2734883394,310598401,1164996542,607225278,1323610764,1426881987,3590304994,1925078388,4068182383,2162078206,991336113,2614888103,633803317,3248222580,3479774868,3835390401,2666613458,4022224774,944711139,264347078,2341262773,604807628,2007800933,770255983,1495990901,1249150122,1856431235,1555081692,3175218132,1996064986,2198950837,2554220882,3999719339,2821834349,766784016,2952996808,2566594879,3210313671,3203337956,3336571891,1034457026,3584528711,2466948901,113926993,3758326383,338241895,168717936,666307205,1188179964,773529912,1546045734,1294757372,1522805485,1396182291,2643833823,1695183700,2343527390,1986661051,1014477480,2177026350,1206759142,2456956037,344077627,2730485921,1290863460,2820302411,3158454273,3259730800,3505952657,3345764771,106217008,3516065817,3606008344,3600352804,1432725776,4094571909,1467031594,275423344,851169720,430227734,3100823752,506948616,1363258195,659060556,3750685593,883997877,3785050280,958139571,3318307427,1322822218,3812723403,1537002063,2003034995,1747873779,3602036899,1955562222,1575990012,2024104815,1125592928,2227730452,2716904306,2361852424,442776044,2428436474,593698344,2756734187,3733110249,3204031479,2999351573,3329325298,3815920427,3391569614,3928383900,3515267271,566280711,3940187606,3454069534,4118630271,4000239992,116418474,1914138554,174292421,2731055270,289380356,3203993006,460393269,320620315,685471733,587496836,852142971,1086792851,1017036298,365543100,1126000580,2618297676,1288033470,3409855158,1501505948,4234509866,1607167915,987167468,1816402316,1246189591];function g(){if(!(this instanceof g))return new g;m.call(this),this.h=[1779033703,4089235720,3144134277,2227873595,1013904242,4271175723,2773480762,1595750129,1359893119,2917565137,2600822924,725511199,528734635,4215389547,1541459225,327033209],this.k=v,this.W=new Array(160)}function w(e,t,r,n,i){var o=e&r^~e&i;return o<0&&(o+=4294967296),o}function _(e,t,r,n,i,o){var a=t&n^~t&o;return a<0&&(a+=4294967296),a}function S(e,t,r,n,i){var o=e&r^e&i^r&i;return o<0&&(o+=4294967296),o}function E(e,t,r,n,i,o){var a=t&n^t&o^n&o;return a<0&&(a+=4294967296),a}function M(e,t){var r=a(e,t,28)^a(t,e,2)^a(t,e,7);return r<0&&(r+=4294967296),r}function k(e,t){var r=s(e,t,28)^s(t,e,2)^s(t,e,7);return r<0&&(r+=4294967296),r}function x(e,t){var r=a(e,t,14)^a(e,t,18)^a(t,e,9);return r<0&&(r+=4294967296),r}function A(e,t){var r=s(e,t,14)^s(e,t,18)^s(t,e,9);return r<0&&(r+=4294967296),r}function B(e,t){var r=a(e,t,1)^a(e,t,8)^f(e,t,7);return r<0&&(r+=4294967296),r}function I(e,t){var r=s(e,t,1)^s(e,t,8)^c(e,t,7);return r<0&&(r+=4294967296),r}function j(e,t){var r=a(e,t,19)^a(t,e,29)^f(e,t,6);return r<0&&(r+=4294967296),r}function R(e,t){var r=s(e,t,19)^s(t,e,29)^c(e,t,6);return r<0&&(r+=4294967296),r}n.inherits(g,m),e.exports=g,g.blockSize=1024,g.outSize=512,g.hmacStrength=192,g.padLength=128,g.prototype._prepareBlock=function(e,t){for(var r=this.W,n=0;n<32;n++)r[n]=e[t+n];for(;n<r.length;n+=2){var i=j(r[n-4],r[n-3]),o=R(r[n-4],r[n-3]),a=r[n-14],s=r[n-13],f=B(r[n-30],r[n-29]),c=I(r[n-30],r[n-29]),u=r[n-32],h=r[n-31];r[n]=l(i,o,a,s,f,c,u,h),r[n+1]=p(i,o,a,s,f,c,u,h)}},g.prototype._update=function(e,t){this._prepareBlock(e,t);var r=this.W,n=this.h[0],i=this.h[1],a=this.h[2],s=this.h[3],f=this.h[4],c=this.h[5],l=this.h[6],p=this.h[7],m=this.h[8],v=this.h[9],g=this.h[10],B=this.h[11],I=this.h[12],j=this.h[13],R=this.h[14],T=this.h[15];o(this.k.length===r.length);for(var P=0;P<r.length;P+=2){var C=R,O=T,D=x(m,v),N=A(m,v),L=w(m,v,g,B,I),U=_(m,v,g,B,I,j),q=this.k[P],z=this.k[P+1],F=r[P],K=r[P+1],H=b(C,O,D,N,L,U,q,z,F,K),V=y(C,O,D,N,L,U,q,z,F,K);C=M(n,i),O=k(n,i),D=S(n,i,a,s,f),N=E(n,i,a,s,f,c);var Y=h(C,O,D,N),W=d(C,O,D,N);R=I,T=j,I=g,j=B,g=m,B=v,m=h(l,p,H,V),v=d(p,p,H,V),l=f,p=c,f=a,c=s,a=n,s=i,n=h(H,V,Y,W),i=d(H,V,Y,W)}u(this.h,0,n,i),u(this.h,2,a,s),u(this.h,4,f,c),u(this.h,6,l,p),u(this.h,8,m,v),u(this.h,10,g,B),u(this.h,12,I,j),u(this.h,14,R,T)},g.prototype._digest=function(e){return"hex"===e?n.toHex32(this.h,"big"):n.split32(this.h,"big")}},function(e,t,r){var n=r(1),i=r(20).Reporter,o=r(2).Buffer;function a(e,t){i.call(this,t),o.isBuffer(e)?(this.base=e,this.offset=0,this.length=e.length):this.error("Input not Buffer")}function s(e,t){if(Array.isArray(e))this.length=0,this.value=e.map((function(e){return e instanceof s||(e=new s(e,t)),this.length+=e.length,e}),this);else if("number"==typeof e){if(!(0<=e&&e<=255))return t.error("non-byte EncoderBuffer value");this.value=e,this.length=1}else if("string"==typeof e)this.value=e,this.length=o.byteLength(e);else{if(!o.isBuffer(e))return t.error("Unsupported type: "+typeof e);this.value=e,this.length=e.length}}n(a,i),t.DecoderBuffer=a,a.prototype.save=function(){return{offset:this.offset,reporter:i.prototype.save.call(this)}},a.prototype.restore=function(e){var t=new a(this.base);return t.offset=e.offset,t.length=this.offset,this.offset=e.offset,i.prototype.restore.call(this,e.reporter),t},a.prototype.isEmpty=function(){return this.offset===this.length},a.prototype.readUInt8=function(e){return this.offset+1<=this.length?this.base.readUInt8(this.offset++,!0):this.error(e||"DecoderBuffer overrun")},a.prototype.skip=function(e,t){if(!(this.offset+e<=this.length))return this.error(t||"DecoderBuffer overrun");var r=new a(this.base);return r._reporterState=this._reporterState,r.offset=this.offset,r.length=this.offset+e,this.offset+=e,r},a.prototype.raw=function(e){return this.base.slice(e?e.offset:this.offset,this.length)},t.EncoderBuffer=s,s.prototype.join=function(e,t){return e||(e=new o(this.length)),t||(t=0),0===this.length?e:(Array.isArray(this.value)?this.value.forEach((function(r){r.join(e,t),t+=r.length})):("number"==typeof this.value?e[t]=this.value:"string"==typeof this.value?e.write(this.value,t):o.isBuffer(this.value)&&this.value.copy(e,t),t+=this.length),e)}},function(e,t,r){var n=t;n._reverse=function(e){var t={};return Object.keys(e).forEach((function(r){(0|r)==r&&(r|=0);var n=e[r];t[n]=r})),t},n.der=r(170)},function(e,t,r){var n=r(1),i=r(19),o=i.base,a=i.bignum,s=i.constants.der;function f(e){this.enc="der",this.name=e.name,this.entity=e,this.tree=new c,this.tree._init(e.body)}function c(e){o.Node.call(this,"der",e)}function u(e,t){var r=e.readUInt8(t);if(e.isError(r))return r;var n=s.tagClass[r>>6],i=0==(32&r);if(31==(31&r)){var o=r;for(r=0;128==(128&o);){if(o=e.readUInt8(t),e.isError(o))return o;r<<=7,r|=127&o}}else r&=31;return{cls:n,primitive:i,tag:r,tagStr:s.tag[r]}}function h(e,t,r){var n=e.readUInt8(r);if(e.isError(n))return n;if(!t&&128===n)return null;if(0==(128&n))return n;var i=127&n;if(i>4)return e.error("length octect is too long");n=0;for(var o=0;o<i;o++){n<<=8;var a=e.readUInt8(r);if(e.isError(a))return a;n|=a}return n}e.exports=f,f.prototype.decode=function(e,t){return e instanceof o.DecoderBuffer||(e=new o.DecoderBuffer(e,t)),this.tree._decode(e,t)},n(c,o.Node),c.prototype._peekTag=function(e,t,r){if(e.isEmpty())return!1;var n=e.save(),i=u(e,'Failed to peek tag: "'+t+'"');return e.isError(i)?i:(e.restore(n),i.tag===t||i.tagStr===t||i.tagStr+"of"===t||r)},c.prototype._decodeTag=function(e,t,r){var n=u(e,'Failed to decode tag of "'+t+'"');if(e.isError(n))return n;var i=h(e,n.primitive,'Failed to get length of "'+t+'"');if(e.isError(i))return i;if(!r&&n.tag!==t&&n.tagStr!==t&&n.tagStr+"of"!==t)return e.error('Failed to match tag: "'+t+'"');if(n.primitive||null!==i)return e.skip(i,'Failed to match body of: "'+t+'"');var o=e.save(),a=this._skipUntilEnd(e,'Failed to skip indefinite length body: "'+this.tag+'"');return e.isError(a)?a:(i=e.offset-o.offset,e.restore(o),e.skip(i,'Failed to match body of: "'+t+'"'))},c.prototype._skipUntilEnd=function(e,t){for(;;){var r=u(e,t);if(e.isError(r))return r;var n,i=h(e,r.primitive,t);if(e.isError(i))return i;if(n=r.primitive||null!==i?e.skip(i):this._skipUntilEnd(e,t),e.isError(n))return n;if("end"===r.tagStr)break}},c.prototype._decodeList=function(e,t,r,n){for(var i=[];!e.isEmpty();){var o=this._peekTag(e,"end");if(e.isError(o))return o;var a=r.decode(e,"der",n);if(e.isError(a)&&o)break;i.push(a)}return i},c.prototype._decodeStr=function(e,t){if("bitstr"===t){var r=e.readUInt8();return e.isError(r)?r:{unused:r,data:e.raw()}}if("bmpstr"===t){var n=e.raw();if(n.length%2==1)return e.error("Decoding of string type: bmpstr length mismatch");for(var i="",o=0;o<n.length/2;o++)i+=String.fromCharCode(n.readUInt16BE(2*o));return i}if("numstr"===t){var a=e.raw().toString("ascii");return this._isNumstr(a)?a:e.error("Decoding of string type: numstr unsupported characters")}if("octstr"===t)return e.raw();if("objDesc"===t)return e.raw();if("printstr"===t){var s=e.raw().toString("ascii");return this._isPrintstr(s)?s:e.error("Decoding of string type: printstr unsupported characters")}return/str$/.test(t)?e.raw().toString():e.error("Decoding of string type: "+t+" unsupported")},c.prototype._decodeObjid=function(e,t,r){for(var n,i=[],o=0;!e.isEmpty();){var a=e.readUInt8();o<<=7,o|=127&a,0==(128&a)&&(i.push(o),o=0)}128&a&&i.push(o);var s=i[0]/40|0,f=i[0]%40;if(n=r?i:[s,f].concat(i.slice(1)),t){var c=t[n.join(" ")];void 0===c&&(c=t[n.join(".")]),void 0!==c&&(n=c)}return n},c.prototype._decodeTime=function(e,t){var r=e.raw().toString();if("gentime"===t)var n=0|r.slice(0,4),i=0|r.slice(4,6),o=0|r.slice(6,8),a=0|r.slice(8,10),s=0|r.slice(10,12),f=0|r.slice(12,14);else{if("utctime"!==t)return e.error("Decoding "+t+" time is not supported yet");n=0|r.slice(0,2),i=0|r.slice(2,4),o=0|r.slice(4,6),a=0|r.slice(6,8),s=0|r.slice(8,10),f=0|r.slice(10,12);n=n<70?2e3+n:1900+n}return Date.UTC(n,i-1,o,a,s,f,0)},c.prototype._decodeNull=function(e){return null},c.prototype._decodeBool=function(e){var t=e.readUInt8();return e.isError(t)?t:0!==t},c.prototype._decodeInt=function(e,t){var r=e.raw(),n=new a(r);return t&&(n=t[n.toString(10)]||n),n},c.prototype._use=function(e,t){return"function"==typeof e&&(e=e(t)),e._getDecoder("der").tree}},function(e,t,r){var n=r(1),i=r(2).Buffer,o=r(19),a=o.base,s=o.constants.der;function f(e){this.enc="der",this.name=e.name,this.entity=e,this.tree=new c,this.tree._init(e.body)}function c(e){a.Node.call(this,"der",e)}function u(e){return e<10?"0"+e:e}e.exports=f,f.prototype.encode=function(e,t){return this.tree._encode(e,t).join()},n(c,a.Node),c.prototype._encodeComposite=function(e,t,r,n){var o,a=function(e,t,r,n){var i;"seqof"===e?e="seq":"setof"===e&&(e="set");if(s.tagByName.hasOwnProperty(e))i=s.tagByName[e];else{if("number"!=typeof e||(0|e)!==e)return n.error("Unknown tag: "+e);i=e}if(i>=31)return n.error("Multi-octet tag encoding unsupported");t||(i|=32);return i|=s.tagClassByName[r||"universal"]<<6}(e,t,r,this.reporter);if(n.length<128)return(o=new i(2))[0]=a,o[1]=n.length,this._createEncoderBuffer([o,n]);for(var f=1,c=n.length;c>=256;c>>=8)f++;(o=new i(2+f))[0]=a,o[1]=128|f;c=1+f;for(var u=n.length;u>0;c--,u>>=8)o[c]=255&u;return this._createEncoderBuffer([o,n])},c.prototype._encodeStr=function(e,t){if("bitstr"===t)return this._createEncoderBuffer([0|e.unused,e.data]);if("bmpstr"===t){for(var r=new i(2*e.length),n=0;n<e.length;n++)r.writeUInt16BE(e.charCodeAt(n),2*n);return this._createEncoderBuffer(r)}return"numstr"===t?this._isNumstr(e)?this._createEncoderBuffer(e):this.reporter.error("Encoding of string type: numstr supports only digits and space"):"printstr"===t?this._isPrintstr(e)?this._createEncoderBuffer(e):this.reporter.error("Encoding of string type: printstr supports only latin upper and lower case letters, digits, space, apostrophe, left and rigth parenthesis, plus sign, comma, hyphen, dot, slash, colon, equal sign, question mark"):/str$/.test(t)?this._createEncoderBuffer(e):"objDesc"===t?this._createEncoderBuffer(e):this.reporter.error("Encoding of string type: "+t+" unsupported")},c.prototype._encodeObjid=function(e,t,r){if("string"==typeof e){if(!t)return this.reporter.error("string objid given, but no values map found");if(!t.hasOwnProperty(e))return this.reporter.error("objid not found in values map");e=t[e].split(/[\s\.]+/g);for(var n=0;n<e.length;n++)e[n]|=0}else if(Array.isArray(e)){e=e.slice();for(n=0;n<e.length;n++)e[n]|=0}if(!Array.isArray(e))return this.reporter.error("objid() should be either array or string, got: "+JSON.stringify(e));if(!r){if(e[1]>=40)return this.reporter.error("Second objid identifier OOB");e.splice(0,2,40*e[0]+e[1])}var o=0;for(n=0;n<e.length;n++){var a=e[n];for(o++;a>=128;a>>=7)o++}var s=new i(o),f=s.length-1;for(n=e.length-1;n>=0;n--){a=e[n];for(s[f--]=127&a;(a>>=7)>0;)s[f--]=128|127&a}return this._createEncoderBuffer(s)},c.prototype._encodeTime=function(e,t){var r,n=new Date(e);return"gentime"===t?r=[u(n.getFullYear()),u(n.getUTCMonth()+1),u(n.getUTCDate()),u(n.getUTCHours()),u(n.getUTCMinutes()),u(n.getUTCSeconds()),"Z"].join(""):"utctime"===t?r=[u(n.getFullYear()%100),u(n.getUTCMonth()+1),u(n.getUTCDate()),u(n.getUTCHours()),u(n.getUTCMinutes()),u(n.getUTCSeconds()),"Z"].join(""):this.reporter.error("Encoding "+t+" time is not supported yet"),this._encodeStr(r,"octstr")},c.prototype._encodeNull=function(){return this._createEncoderBuffer("")},c.prototype._encodeInt=function(e,t){if("string"==typeof e){if(!t)return this.reporter.error("String int or enum given, but no values map");if(!t.hasOwnProperty(e))return this.reporter.error("Values map doesn't contain: "+JSON.stringify(e));e=t[e]}if("number"!=typeof e&&!i.isBuffer(e)){var r=e.toArray();!e.sign&&128&r[0]&&r.unshift(0),e=new i(r)}if(i.isBuffer(e)){var n=e.length;0===e.length&&n++;var o=new i(n);return e.copy(o),0===e.length&&(o[0]=0),this._createEncoderBuffer(o)}if(e<128)return this._createEncoderBuffer(e);if(e<256)return this._createEncoderBuffer([0,e]);n=1;for(var a=e;a>=256;a>>=8)n++;for(a=(o=new Array(n)).length-1;a>=0;a--)o[a]=255&e,e>>=8;return 128&o[0]&&o.unshift(0),this._createEncoderBuffer(new i(o))},c.prototype._encodeBool=function(e){return this._createEncoderBuffer(e?255:0)},c.prototype._use=function(e,t){return"function"==typeof e&&(e=e(t)),e._getEncoder("der").tree},c.prototype._skipDefault=function(e,t,r){var n,i=this._baseState;if(null===i.default)return!1;var o=e.join();if(void 0===i.defaultBuffer&&(i.defaultBuffer=this._encodeValue(i.default,t,r).join()),o.length!==i.defaultBuffer.length)return!1;for(n=0;n<o.length;n++)if(o[n]!==i.defaultBuffer[n])return!1;return!0}},function(e){e.exports=JSON.parse('{"1.3.132.0.10":"secp256k1","1.3.132.0.33":"p224","1.2.840.10045.3.1.1":"p192","1.2.840.10045.3.1.7":"p256","1.3.132.0.34":"p384","1.3.132.0.35":"p521"}')},function(e,t,r){var n=r(16),i=r(0).Buffer;function o(e){var t=i.allocUnsafe(4);return t.writeUInt32BE(e,0),t}e.exports=function(e,t){for(var r,a=i.alloc(0),s=0;a.length<t;)r=o(s++),a=i.concat([a,n("sha1").update(e).update(r).digest()]);return a.slice(0,t)}},function(e,t){e.exports=function(e,t){for(var r=e.length,n=-1;++n<r;)e[n]^=t[n];return e}},function(e,t,r){var n=r(3),i=r(0).Buffer;e.exports=function(e,t){return i.from(e.toRed(n.mont(t.modulus)).redPow(new n(t.publicExponent)).fromRed().toArray())}},function(e,t,r){var n=r(2).Buffer;e.exports=function(e){return"string"==typeof e?e:"number"==typeof e||n.isBuffer(e)?e.toString():JSON.stringify(e)}},function(e,t,r){var n=r(27),i=function(e,t){n.call(this,e),this.name="NotBeforeError",this.date=t};(i.prototype=Object.create(n.prototype)).constructor=i,e.exports=i},function(e,t,r){var n=r(27),i=function(e,t){n.call(this,e),this.name="TokenExpiredError",this.expiredAt=t};(i.prototype=Object.create(n.prototype)).constructor=i,e.exports=i},function(e,t,r){var n=r(188);e.exports=function(e,t){var r=t||Math.floor(Date.now()/1e3);if("string"==typeof e){var i=n(e);if(void 0===i)return;return Math.floor(r+i/1e3)}return"number"==typeof e?r+e:void 0}},function(e,t,r){(function(t){var n=r(189);e.exports=n.satisfies(t.version,"^6.12.0 || >=8.0.0")}).call(this,r(4))},function(e,t,r){"use strict";e.exports=function(e,t){return function(){for(var r=new Array(arguments.length),n=0;n<r.length;n++)r[n]=arguments[n];return e.apply(t,r)}}},function(e,t,r){"use strict";var n=r(5);function i(e){return encodeURIComponent(e).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,r){if(!t)return e;var o;if(r)o=r(t);else if(n.isURLSearchParams(t))o=t.toString();else{var a=[];n.forEach(t,(function(e,t){null!=e&&(n.isArray(e)?t+="[]":e=[e],n.forEach(e,(function(e){n.isDate(e)?e=e.toISOString():n.isObject(e)&&(e=JSON.stringify(e)),a.push(i(t)+"="+i(e))})))})),o=a.join("&")}if(o){var s=e.indexOf("#");-1!==s&&(e=e.slice(0,s)),e+=(-1===e.indexOf("?")?"?":"&")+o}return e}},function(e,t,r){"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},function(e,t,r){"use strict";(function(t){var n=r(5),i=r(204),o={"Content-Type":"application/x-www-form-urlencoded"};function a(e,t){!n.isUndefined(e)&&n.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var s,f={adapter:(void 0!==t&&"[object process]"===Object.prototype.toString.call(t)?s=r(91):"undefined"!=typeof XMLHttpRequest&&(s=r(91)),s),transformRequest:[function(e,t){return i(t,"Accept"),i(t,"Content-Type"),n.isFormData(e)||n.isArrayBuffer(e)||n.isBuffer(e)||n.isStream(e)||n.isFile(e)||n.isBlob(e)?e:n.isArrayBufferView(e)?e.buffer:n.isURLSearchParams(e)?(a(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):n.isObject(e)?(a(t,"application/json;charset=utf-8"),JSON.stringify(e)):e}],transformResponse:[function(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(e){}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,validateStatus:function(e){return e>=200&&e<300}};f.headers={common:{Accept:"application/json, text/plain, */*"}},n.forEach(["delete","get","head"],(function(e){f.headers[e]={}})),n.forEach(["post","put","patch"],(function(e){f.headers[e]=n.merge(o)})),e.exports=f}).call(this,r(4))},function(e,t,r){"use strict";var n=r(5),i=r(205),o=r(88),a=r(207),s=r(208),f=r(92);e.exports=function(e){return new Promise((function(t,c){var u=e.data,h=e.headers;n.isFormData(u)&&delete h["Content-Type"];var d=new XMLHttpRequest;if(e.auth){var l=e.auth.username||"",p=e.auth.password||"";h.Authorization="Basic "+btoa(l+":"+p)}if(d.open(e.method.toUpperCase(),o(e.url,e.params,e.paramsSerializer),!0),d.timeout=e.timeout,d.onreadystatechange=function(){if(d&&4===d.readyState&&(0!==d.status||d.responseURL&&0===d.responseURL.indexOf("file:"))){var r="getAllResponseHeaders"in d?a(d.getAllResponseHeaders()):null,n={data:e.responseType&&"text"!==e.responseType?d.response:d.responseText,status:d.status,statusText:d.statusText,headers:r,config:e,request:d};i(t,c,n),d=null}},d.onabort=function(){d&&(c(f("Request aborted",e,"ECONNABORTED",d)),d=null)},d.onerror=function(){c(f("Network Error",e,null,d)),d=null},d.ontimeout=function(){c(f("timeout of "+e.timeout+"ms exceeded",e,"ECONNABORTED",d)),d=null},n.isStandardBrowserEnv()){var b=r(209),y=(e.withCredentials||s(e.url))&&e.xsrfCookieName?b.read(e.xsrfCookieName):void 0;y&&(h[e.xsrfHeaderName]=y)}if("setRequestHeader"in d&&n.forEach(h,(function(e,t){void 0===u&&"content-type"===t.toLowerCase()?delete h[t]:d.setRequestHeader(t,e)})),e.withCredentials&&(d.withCredentials=!0),e.responseType)try{d.responseType=e.responseType}catch(t){if("json"!==e.responseType)throw t}"function"==typeof e.onDownloadProgress&&d.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&d.upload&&d.upload.addEventListener("progress",e.onUploadProgress),e.cancelToken&&e.cancelToken.promise.then((function(e){d&&(d.abort(),c(e),d=null)})),void 0===u&&(u=null),d.send(u)}))}},function(e,t,r){"use strict";var n=r(206);e.exports=function(e,t,r,i,o){var a=new Error(e);return n(a,t,r,i,o)}},function(e,t,r){"use strict";var n=r(5);e.exports=function(e,t){t=t||{};var r={};return n.forEach(["url","method","params","data"],(function(e){void 0!==t[e]&&(r[e]=t[e])})),n.forEach(["headers","auth","proxy"],(function(i){n.isObject(t[i])?r[i]=n.deepMerge(e[i],t[i]):void 0!==t[i]?r[i]=t[i]:n.isObject(e[i])?r[i]=n.deepMerge(e[i]):void 0!==e[i]&&(r[i]=e[i])})),n.forEach(["baseURL","transformRequest","transformResponse","paramsSerializer","timeout","withCredentials","adapter","responseType","xsrfCookieName","xsrfHeaderName","onUploadProgress","onDownloadProgress","maxContentLength","validateStatus","maxRedirects","httpAgent","httpsAgent","cancelToken","socketPath"],(function(n){void 0!==t[n]?r[n]=t[n]:void 0!==e[n]&&(r[n]=e[n])})),r}},function(e,t,r){"use strict";function n(e){this.message=e}n.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},n.prototype.__CANCEL__=!0,e.exports=n},function(e,t,r){e.exports={decode:r(44),verify:r(187),sign:r(190),JsonWebTokenError:r(27),NotBeforeError:r(83),TokenExpiredError:r(84)}},function(e,t,r){e.exports=r(198)},function(e,t,r){},function(e,t,r){var n=r(0).Buffer,i=r(46),o=r(51),a=r(12),s=r(82),f=r(22);function c(e,t){return n.from(e,t).toString("base64").replace(/=/g,"").replace(/\+/g,"-").replace(/\//g,"_")}function u(e){var t=e.header,r=e.payload,n=e.secret||e.privateKey,i=e.encoding,a=o(t.alg),u=function(e,t,r){r=r||"utf8";var n=c(s(e),"binary"),i=c(s(t),r);return f.format("%s.%s",n,i)}(t,r,i),h=a.sign(u,n);return f.format("%s.%s",u,h)}function h(e){var t=e.secret||e.privateKey||e.key,r=new i(t);this.readable=!0,this.header=e.header,this.encoding=e.encoding,this.secret=this.privateKey=this.key=r,this.payload=new i(e.payload),this.secret.once("close",function(){!this.payload.writable&&this.readable&&this.sign()}.bind(this)),this.payload.once("close",function(){!this.secret.writable&&this.readable&&this.sign()}.bind(this))}f.inherits(h,a),h.prototype.sign=function(){try{var e=u({header:this.header,payload:this.payload.buffer,secret:this.secret.buffer,encoding:this.encoding});return this.emit("done",e),this.emit("data",e),this.emit("end"),this.readable=!1,e}catch(e){this.readable=!1,this.emit("error",e),this.emit("close")}},h.sign=u,e.exports=h},function(e,t,r){"use strict";t.byteLength=function(e){var t=c(e),r=t[0],n=t[1];return 3*(r+n)/4-n},t.toByteArray=function(e){var t,r,n=c(e),a=n[0],s=n[1],f=new o(function(e,t,r){return 3*(t+r)/4-r}(0,a,s)),u=0,h=s>0?a-4:a;for(r=0;r<h;r+=4)t=i[e.charCodeAt(r)]<<18|i[e.charCodeAt(r+1)]<<12|i[e.charCodeAt(r+2)]<<6|i[e.charCodeAt(r+3)],f[u++]=t>>16&255,f[u++]=t>>8&255,f[u++]=255&t;2===s&&(t=i[e.charCodeAt(r)]<<2|i[e.charCodeAt(r+1)]>>4,f[u++]=255&t);1===s&&(t=i[e.charCodeAt(r)]<<10|i[e.charCodeAt(r+1)]<<4|i[e.charCodeAt(r+2)]>>2,f[u++]=t>>8&255,f[u++]=255&t);return f},t.fromByteArray=function(e){for(var t,r=e.length,i=r%3,o=[],a=0,s=r-i;a<s;a+=16383)o.push(u(e,a,a+16383>s?s:a+16383));1===i?(t=e[r-1],o.push(n[t>>2]+n[t<<4&63]+"==")):2===i&&(t=(e[r-2]<<8)+e[r-1],o.push(n[t>>10]+n[t>>4&63]+n[t<<2&63]+"="));return o.join("")};for(var n=[],i=[],o="undefined"!=typeof Uint8Array?Uint8Array:Array,a="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",s=0,f=a.length;s<f;++s)n[s]=a[s],i[a.charCodeAt(s)]=s;function c(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var r=e.indexOf("=");return-1===r&&(r=t),[r,r===t?0:4-r%4]}function u(e,t,r){for(var i,o,a=[],s=t;s<r;s+=3)i=(e[s]<<16&16711680)+(e[s+1]<<8&65280)+(255&e[s+2]),a.push(n[(o=i)>>18&63]+n[o>>12&63]+n[o>>6&63]+n[63&o]);return a.join("")}i["-".charCodeAt(0)]=62,i["_".charCodeAt(0)]=63},function(e,t){t.read=function(e,t,r,n,i){var o,a,s=8*i-n-1,f=(1<<s)-1,c=f>>1,u=-7,h=r?i-1:0,d=r?-1:1,l=e[t+h];for(h+=d,o=l&(1<<-u)-1,l>>=-u,u+=s;u>0;o=256*o+e[t+h],h+=d,u-=8);for(a=o&(1<<-u)-1,o>>=-u,u+=n;u>0;a=256*a+e[t+h],h+=d,u-=8);if(0===o)o=1-c;else{if(o===f)return a?NaN:1/0*(l?-1:1);a+=Math.pow(2,n),o-=c}return(l?-1:1)*a*Math.pow(2,o-n)},t.write=function(e,t,r,n,i,o){var a,s,f,c=8*o-i-1,u=(1<<c)-1,h=u>>1,d=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,l=n?0:o-1,p=n?1:-1,b=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(s=isNaN(t)?1:0,a=u):(a=Math.floor(Math.log(t)/Math.LN2),t*(f=Math.pow(2,-a))<1&&(a--,f*=2),(t+=a+h>=1?d/f:d*Math.pow(2,1-h))*f>=2&&(a++,f/=2),a+h>=u?(s=0,a=u):a+h>=1?(s=(t*f-1)*Math.pow(2,i),a+=h):(s=t*Math.pow(2,h-1)*Math.pow(2,i),a=0));i>=8;e[r+l]=255&s,l+=p,s/=256,i-=8);for(a=a<<i|s,c+=i;c>0;e[r+l]=255&a,l+=p,a/=256,c-=8);e[r+l-p]|=128*b}},function(e,t){},function(e,t,r){"use strict";var n=r(0).Buffer,i=r(103);e.exports=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.head=null,this.tail=null,this.length=0}return e.prototype.push=function(e){var t={data:e,next:null};this.length>0?this.tail.next=t:this.head=t,this.tail=t,++this.length},e.prototype.unshift=function(e){var t={data:e,next:this.head};0===this.length&&(this.tail=t),this.head=t,++this.length},e.prototype.shift=function(){if(0!==this.length){var e=this.head.data;return 1===this.length?this.head=this.tail=null:this.head=this.head.next,--this.length,e}},e.prototype.clear=function(){this.head=this.tail=null,this.length=0},e.prototype.join=function(e){if(0===this.length)return"";for(var t=this.head,r=""+t.data;t=t.next;)r+=e+t.data;return r},e.prototype.concat=function(e){if(0===this.length)return n.alloc(0);if(1===this.length)return this.head.data;for(var t,r,i,o=n.allocUnsafe(e>>>0),a=this.head,s=0;a;)t=a.data,r=o,i=s,t.copy(r,i),s+=a.data.length,a=a.next;return o},e}(),i&&i.inspect&&i.inspect.custom&&(e.exports.prototype[i.inspect.custom]=function(){var e=i.inspect({length:this.length});return this.constructor.name+" "+e})},function(e,t){},function(e,t,r){(function(e){var n=void 0!==e&&e||"undefined"!=typeof self&&self||window,i=Function.prototype.apply;function o(e,t){this._id=e,this._clearFn=t}t.setTimeout=function(){return new o(i.call(setTimeout,n,arguments),clearTimeout)},t.setInterval=function(){return new o(i.call(setInterval,n,arguments),clearInterval)},t.clearTimeout=t.clearInterval=function(e){e&&e.close()},o.prototype.unref=o.prototype.ref=function(){},o.prototype.close=function(){this._clearFn.call(n,this._id)},t.enroll=function(e,t){clearTimeout(e._idleTimeoutId),e._idleTimeout=t},t.unenroll=function(e){clearTimeout(e._idleTimeoutId),e._idleTimeout=-1},t._unrefActive=t.active=function(e){clearTimeout(e._idleTimeoutId);var t=e._idleTimeout;t>=0&&(e._idleTimeoutId=setTimeout((function(){e._onTimeout&&e._onTimeout()}),t))},r(105),t.setImmediate="undefined"!=typeof self&&self.setImmediate||void 0!==e&&e.setImmediate||this&&this.setImmediate,t.clearImmediate="undefined"!=typeof self&&self.clearImmediate||void 0!==e&&e.clearImmediate||this&&this.clearImmediate}).call(this,r(9))},function(e,t,r){(function(e,t){!function(e,r){"use strict";if(!e.setImmediate){var n,i,o,a,s,f=1,c={},u=!1,h=e.document,d=Object.getPrototypeOf&&Object.getPrototypeOf(e);d=d&&d.setTimeout?d:e,"[object process]"==={}.toString.call(e.process)?n=function(e){t.nextTick((function(){p(e)}))}:!function(){if(e.postMessage&&!e.importScripts){var t=!0,r=e.onmessage;return e.onmessage=function(){t=!1},e.postMessage("","*"),e.onmessage=r,t}}()?e.MessageChannel?((o=new MessageChannel).port1.onmessage=function(e){p(e.data)},n=function(e){o.port2.postMessage(e)}):h&&"onreadystatechange"in h.createElement("script")?(i=h.documentElement,n=function(e){var t=h.createElement("script");t.onreadystatechange=function(){p(e),t.onreadystatechange=null,i.removeChild(t),t=null},i.appendChild(t)}):n=function(e){setTimeout(p,0,e)}:(a="setImmediate$"+Math.random()+"$",s=function(t){t.source===e&&"string"==typeof t.data&&0===t.data.indexOf(a)&&p(+t.data.slice(a.length))},e.addEventListener?e.addEventListener("message",s,!1):e.attachEvent("onmessage",s),n=function(t){e.postMessage(a+t,"*")}),d.setImmediate=function(e){"function"!=typeof e&&(e=new Function(""+e));for(var t=new Array(arguments.length-1),r=0;r<t.length;r++)t[r]=arguments[r+1];var i={callback:e,args:t};return c[f]=i,n(f),f++},d.clearImmediate=l}function l(e){delete c[e]}function p(e){if(u)setTimeout(p,0,e);else{var t=c[e];if(t){u=!0;try{!function(e){var t=e.callback,n=e.args;switch(n.length){case 0:t();break;case 1:t(n[0]);break;case 2:t(n[0],n[1]);break;case 3:t(n[0],n[1],n[2]);break;default:t.apply(r,n)}}(t)}finally{l(e),u=!1}}}}}("undefined"==typeof self?void 0===e?this:e:self)}).call(this,r(9),r(4))},function(e,t,r){(function(t){function r(e){try{if(!t.localStorage)return!1}catch(e){return!1}var r=t.localStorage[e];return null!=r&&"true"===String(r).toLowerCase()}e.exports=function(e,t){if(r("noDeprecation"))return e;var n=!1;return function(){if(!n){if(r("throwDeprecation"))throw new Error(t);r("traceDeprecation")?console.trace(t):console.warn(t),n=!0}return e.apply(this,arguments)}}}).call(this,r(9))},function(e,t,r){"use strict";e.exports=o;var n=r(50),i=r(15);function o(e){if(!(this instanceof o))return new o(e);n.call(this,e)}i.inherits=r(1),i.inherits(o,n),o.prototype._transform=function(e,t,r){r(null,e)}},function(e,t,r){e.exports=r(31)},function(e,t,r){e.exports=r(11)},function(e,t,r){e.exports=r(30).Transform},function(e,t,r){e.exports=r(30).PassThrough},function(e,t){e.exports=function(e){return e&&"object"==typeof e&&"function"==typeof e.copy&&"function"==typeof e.fill&&"function"==typeof e.readUInt8}},function(e,t,r){"use strict";var n=r(2).Buffer,i=r(2).SlowBuffer;function o(e,t){if(!n.isBuffer(e)||!n.isBuffer(t))return!1;if(e.length!==t.length)return!1;for(var r=0,i=0;i<e.length;i++)r|=e[i]^t[i];return 0===r}e.exports=o,o.install=function(){n.prototype.equal=i.prototype.equal=function(e){return o(this,e)}};var a=n.prototype.equal,s=i.prototype.equal;o.restore=function(){n.prototype.equal=a,i.prototype.equal=s}},function(e,t,r){"use strict";t.randomBytes=t.rng=t.pseudoRandomBytes=t.prng=r(13),t.createHash=t.Hash=r(16),t.createHmac=t.Hmac=r(55);var n=r(120),i=Object.keys(n),o=["sha1","sha224","sha256","sha384","sha512","md5","rmd160"].concat(i);t.getHashes=function(){return o};var a=r(58);t.pbkdf2=a.pbkdf2,t.pbkdf2Sync=a.pbkdf2Sync;var s=r(122);t.Cipher=s.Cipher,t.createCipher=s.createCipher,t.Cipheriv=s.Cipheriv,t.createCipheriv=s.createCipheriv,t.Decipher=s.Decipher,t.createDecipher=s.createDecipher,t.Decipheriv=s.Decipheriv,t.createDecipheriv=s.createDecipheriv,t.getCiphers=s.getCiphers,t.listCiphers=s.listCiphers;var f=r(139);t.DiffieHellmanGroup=f.DiffieHellmanGroup,t.createDiffieHellmanGroup=f.createDiffieHellmanGroup,t.getDiffieHellman=f.getDiffieHellman,t.createDiffieHellman=f.createDiffieHellman,t.DiffieHellman=f.DiffieHellman;var c=r(145);t.createSign=c.createSign,t.Sign=c.Sign,t.createVerify=c.createVerify,t.Verify=c.Verify,t.createECDH=r(179);var u=r(180);t.publicEncrypt=u.publicEncrypt,t.privateEncrypt=u.privateEncrypt,t.publicDecrypt=u.publicDecrypt,t.privateDecrypt=u.privateDecrypt;var h=r(183);t.randomFill=h.randomFill,t.randomFillSync=h.randomFillSync,t.createCredentials=function(){throw new Error(["sorry, createCredentials is not implemented yet","we accept pull requests","https://github.com/crypto-browserify/crypto-browserify"].join("\n"))},t.constants={DH_CHECK_P_NOT_SAFE_PRIME:2,DH_CHECK_P_NOT_PRIME:1,DH_UNABLE_TO_CHECK_GENERATOR:4,DH_NOT_SUITABLE_GENERATOR:8,NPN_ENABLED:1,ALPN_ENABLED:1,RSA_PKCS1_PADDING:1,RSA_SSLV23_PADDING:2,RSA_NO_PADDING:3,RSA_PKCS1_OAEP_PADDING:4,RSA_X931_PADDING:5,RSA_PKCS1_PSS_PADDING:6,POINT_CONVERSION_COMPRESSED:2,POINT_CONVERSION_UNCOMPRESSED:4,POINT_CONVERSION_HYBRID:6}},function(e,t,r){var n=r(1),i=r(14),o=r(0).Buffer,a=[1518500249,1859775393,-1894007588,-899497514],s=new Array(80);function f(){this.init(),this._w=s,i.call(this,64,56)}function c(e){return e<<30|e>>>2}function u(e,t,r,n){return 0===e?t&r|~t&n:2===e?t&r|t&n|r&n:t^r^n}n(f,i),f.prototype.init=function(){return this._a=1732584193,this._b=4023233417,this._c=2562383102,this._d=271733878,this._e=3285377520,this},f.prototype._update=function(e){for(var t,r=this._w,n=0|this._a,i=0|this._b,o=0|this._c,s=0|this._d,f=0|this._e,h=0;h<16;++h)r[h]=e.readInt32BE(4*h);for(;h<80;++h)r[h]=r[h-3]^r[h-8]^r[h-14]^r[h-16];for(var d=0;d<80;++d){var l=~~(d/20),p=0|((t=n)<<5|t>>>27)+u(l,i,o,s)+f+r[d]+a[l];f=s,s=o,o=c(i),i=n,n=p}this._a=n+this._a|0,this._b=i+this._b|0,this._c=o+this._c|0,this._d=s+this._d|0,this._e=f+this._e|0},f.prototype._hash=function(){var e=o.allocUnsafe(20);return e.writeInt32BE(0|this._a,0),e.writeInt32BE(0|this._b,4),e.writeInt32BE(0|this._c,8),e.writeInt32BE(0|this._d,12),e.writeInt32BE(0|this._e,16),e},e.exports=f},function(e,t,r){var n=r(1),i=r(14),o=r(0).Buffer,a=[1518500249,1859775393,-1894007588,-899497514],s=new Array(80);function f(){this.init(),this._w=s,i.call(this,64,56)}function c(e){return e<<5|e>>>27}function u(e){return e<<30|e>>>2}function h(e,t,r,n){return 0===e?t&r|~t&n:2===e?t&r|t&n|r&n:t^r^n}n(f,i),f.prototype.init=function(){return this._a=1732584193,this._b=4023233417,this._c=2562383102,this._d=271733878,this._e=3285377520,this},f.prototype._update=function(e){for(var t,r=this._w,n=0|this._a,i=0|this._b,o=0|this._c,s=0|this._d,f=0|this._e,d=0;d<16;++d)r[d]=e.readInt32BE(4*d);for(;d<80;++d)r[d]=(t=r[d-3]^r[d-8]^r[d-14]^r[d-16])<<1|t>>>31;for(var l=0;l<80;++l){var p=~~(l/20),b=c(n)+h(p,i,o,s)+f+r[l]+a[p]|0;f=s,s=o,o=u(i),i=n,n=b}this._a=n+this._a|0,this._b=i+this._b|0,this._c=o+this._c|0,this._d=s+this._d|0,this._e=f+this._e|0},f.prototype._hash=function(){var e=o.allocUnsafe(20);return e.writeInt32BE(0|this._a,0),e.writeInt32BE(0|this._b,4),e.writeInt32BE(0|this._c,8),e.writeInt32BE(0|this._d,12),e.writeInt32BE(0|this._e,16),e},e.exports=f},function(e,t,r){var n=r(1),i=r(53),o=r(14),a=r(0).Buffer,s=new Array(64);function f(){this.init(),this._w=s,o.call(this,64,56)}n(f,i),f.prototype.init=function(){return this._a=3238371032,this._b=914150663,this._c=812702999,this._d=4144912697,this._e=4290775857,this._f=1750603025,this._g=1694076839,this._h=3204075428,this},f.prototype._hash=function(){var e=a.allocUnsafe(28);return e.writeInt32BE(this._a,0),e.writeInt32BE(this._b,4),e.writeInt32BE(this._c,8),e.writeInt32BE(this._d,12),e.writeInt32BE(this._e,16),e.writeInt32BE(this._f,20),e.writeInt32BE(this._g,24),e},e.exports=f},function(e,t,r){var n=r(1),i=r(54),o=r(14),a=r(0).Buffer,s=new Array(160);function f(){this.init(),this._w=s,o.call(this,128,112)}n(f,i),f.prototype.init=function(){return this._ah=3418070365,this._bh=1654270250,this._ch=2438529370,this._dh=355462360,this._eh=1731405415,this._fh=2394180231,this._gh=3675008525,this._hh=1203062813,this._al=3238371032,this._bl=914150663,this._cl=812702999,this._dl=4144912697,this._el=4290775857,this._fl=1750603025,this._gl=1694076839,this._hl=3204075428,this},f.prototype._hash=function(){var e=a.allocUnsafe(48);function t(t,r,n){e.writeInt32BE(t,n),e.writeInt32BE(r,n+4)}return t(this._ah,this._al,0),t(this._bh,this._bl,8),t(this._ch,this._cl,16),t(this._dh,this._dl,24),t(this._eh,this._el,32),t(this._fh,this._fl,40),e},e.exports=f},function(e,t,r){"use strict";var n=r(1),i=r(0).Buffer,o=r(10),a=i.alloc(128),s=64;function f(e,t){o.call(this,"digest"),"string"==typeof t&&(t=i.from(t)),this._alg=e,this._key=t,t.length>s?t=e(t):t.length<s&&(t=i.concat([t,a],s));for(var r=this._ipad=i.allocUnsafe(s),n=this._opad=i.allocUnsafe(s),f=0;f<s;f++)r[f]=54^t[f],n[f]=92^t[f];this._hash=[r]}n(f,o),f.prototype._update=function(e){this._hash.push(e)},f.prototype._final=function(){var e=this._alg(i.concat(this._hash));return this._alg(i.concat([this._opad,e]))},e.exports=f},function(e,t,r){e.exports=r(57)},function(e,t,r){(function(t,n){var i,o=r(59),a=r(60),s=r(61),f=r(0).Buffer,c=t.crypto&&t.crypto.subtle,u={sha:"SHA-1","sha-1":"SHA-1",sha1:"SHA-1",sha256:"SHA-256","sha-256":"SHA-256",sha384:"SHA-384","sha-384":"SHA-384","sha-512":"SHA-512",sha512:"SHA-512"},h=[];function d(e,t,r,n,i){return c.importKey("raw",e,{name:"PBKDF2"},!1,["deriveBits"]).then((function(e){return c.deriveBits({name:"PBKDF2",salt:t,iterations:r,hash:{name:i}},e,n<<3)})).then((function(e){return f.from(e)}))}e.exports=function(e,r,l,p,b,y){"function"==typeof b&&(y=b,b=void 0);var m=u[(b=b||"sha1").toLowerCase()];if(!m||"function"!=typeof t.Promise)return n.nextTick((function(){var t;try{t=s(e,r,l,p,b)}catch(e){return y(e)}y(null,t)}));if(o(e,r,l,p),"function"!=typeof y)throw new Error("No callback provided to pbkdf2");f.isBuffer(e)||(e=f.from(e,a)),f.isBuffer(r)||(r=f.from(r,a)),function(e,t){e.then((function(e){n.nextTick((function(){t(null,e)}))}),(function(e){n.nextTick((function(){t(e)}))}))}(function(e){if(t.process&&!t.process.browser)return Promise.resolve(!1);if(!c||!c.importKey||!c.deriveBits)return Promise.resolve(!1);if(void 0!==h[e])return h[e];var r=d(i=i||f.alloc(8),i,10,128,e).then((function(){return!0})).catch((function(){return!1}));return h[e]=r,r}(m).then((function(t){return t?d(e,r,l,p,m):s(e,r,l,p,b)})),y)}}).call(this,r(9),r(4))},function(e,t,r){var n=r(123),i=r(37),o=r(38),a=r(138),s=r(24);function f(e,t,r){if(e=e.toLowerCase(),o[e])return i.createCipheriv(e,t,r);if(a[e])return new n({key:t,iv:r,mode:e});throw new TypeError("invalid suite type")}function c(e,t,r){if(e=e.toLowerCase(),o[e])return i.createDecipheriv(e,t,r);if(a[e])return new n({key:t,iv:r,mode:e,decrypt:!0});throw new TypeError("invalid suite type")}t.createCipher=t.Cipher=function(e,t){var r,n;if(e=e.toLowerCase(),o[e])r=o[e].key,n=o[e].iv;else{if(!a[e])throw new TypeError("invalid suite type");r=8*a[e].key,n=a[e].iv}var i=s(t,!1,r,n);return f(e,i.key,i.iv)},t.createCipheriv=t.Cipheriv=f,t.createDecipher=t.Decipher=function(e,t){var r,n;if(e=e.toLowerCase(),o[e])r=o[e].key,n=o[e].iv;else{if(!a[e])throw new TypeError("invalid suite type");r=8*a[e].key,n=a[e].iv}var i=s(t,!1,r,n);return c(e,i.key,i.iv)},t.createDecipheriv=t.Decipheriv=c,t.listCiphers=t.getCiphers=function(){return Object.keys(a).concat(i.getCiphers())}},function(e,t,r){var n=r(10),i=r(36),o=r(1),a=r(0).Buffer,s={"des-ede3-cbc":i.CBC.instantiate(i.EDE),"des-ede3":i.EDE,"des-ede-cbc":i.CBC.instantiate(i.EDE),"des-ede":i.EDE,"des-cbc":i.CBC.instantiate(i.DES),"des-ecb":i.DES};function f(e){n.call(this);var t,r=e.mode.toLowerCase(),i=s[r];t=e.decrypt?"decrypt":"encrypt";var o=e.key;a.isBuffer(o)||(o=a.from(o)),"des-ede"!==r&&"des-ede-cbc"!==r||(o=a.concat([o,o.slice(0,8)]));var f=e.iv;a.isBuffer(f)||(f=a.from(f)),this._des=i.create({key:o,iv:f,type:t})}s.des=s["des-cbc"],s.des3=s["des-ede3-cbc"],e.exports=f,o(f,n),f.prototype._update=function(e){return a.from(this._des.update(e))},f.prototype._final=function(){return a.from(this._des.final())}},function(e,t,r){"use strict";t.readUInt32BE=function(e,t){return(e[0+t]<<24|e[1+t]<<16|e[2+t]<<8|e[3+t])>>>0},t.writeUInt32BE=function(e,t,r){e[0+r]=t>>>24,e[1+r]=t>>>16&255,e[2+r]=t>>>8&255,e[3+r]=255&t},t.ip=function(e,t,r,n){for(var i=0,o=0,a=6;a>=0;a-=2){for(var s=0;s<=24;s+=8)i<<=1,i|=t>>>s+a&1;for(s=0;s<=24;s+=8)i<<=1,i|=e>>>s+a&1}for(a=6;a>=0;a-=2){for(s=1;s<=25;s+=8)o<<=1,o|=t>>>s+a&1;for(s=1;s<=25;s+=8)o<<=1,o|=e>>>s+a&1}r[n+0]=i>>>0,r[n+1]=o>>>0},t.rip=function(e,t,r,n){for(var i=0,o=0,a=0;a<4;a++)for(var s=24;s>=0;s-=8)i<<=1,i|=t>>>s+a&1,i<<=1,i|=e>>>s+a&1;for(a=4;a<8;a++)for(s=24;s>=0;s-=8)o<<=1,o|=t>>>s+a&1,o<<=1,o|=e>>>s+a&1;r[n+0]=i>>>0,r[n+1]=o>>>0},t.pc1=function(e,t,r,n){for(var i=0,o=0,a=7;a>=5;a--){for(var s=0;s<=24;s+=8)i<<=1,i|=t>>s+a&1;for(s=0;s<=24;s+=8)i<<=1,i|=e>>s+a&1}for(s=0;s<=24;s+=8)i<<=1,i|=t>>s+a&1;for(a=1;a<=3;a++){for(s=0;s<=24;s+=8)o<<=1,o|=t>>s+a&1;for(s=0;s<=24;s+=8)o<<=1,o|=e>>s+a&1}for(s=0;s<=24;s+=8)o<<=1,o|=e>>s+a&1;r[n+0]=i>>>0,r[n+1]=o>>>0},t.r28shl=function(e,t){return e<<t&268435455|e>>>28-t};var n=[14,11,17,4,27,23,25,0,13,22,7,18,5,9,16,24,2,20,12,21,1,8,15,26,15,4,25,19,9,1,26,16,5,11,23,8,12,7,17,0,22,3,10,14,6,20,27,24];t.pc2=function(e,t,r,i){for(var o=0,a=0,s=n.length>>>1,f=0;f<s;f++)o<<=1,o|=e>>>n[f]&1;for(f=s;f<n.length;f++)a<<=1,a|=t>>>n[f]&1;r[i+0]=o>>>0,r[i+1]=a>>>0},t.expand=function(e,t,r){var n=0,i=0;n=(1&e)<<5|e>>>27;for(var o=23;o>=15;o-=4)n<<=6,n|=e>>>o&63;for(o=11;o>=3;o-=4)i|=e>>>o&63,i<<=6;i|=(31&e)<<1|e>>>31,t[r+0]=n>>>0,t[r+1]=i>>>0};var i=[14,0,4,15,13,7,1,4,2,14,15,2,11,13,8,1,3,10,10,6,6,12,12,11,5,9,9,5,0,3,7,8,4,15,1,12,14,8,8,2,13,4,6,9,2,1,11,7,15,5,12,11,9,3,7,14,3,10,10,0,5,6,0,13,15,3,1,13,8,4,14,7,6,15,11,2,3,8,4,14,9,12,7,0,2,1,13,10,12,6,0,9,5,11,10,5,0,13,14,8,7,10,11,1,10,3,4,15,13,4,1,2,5,11,8,6,12,7,6,12,9,0,3,5,2,14,15,9,10,13,0,7,9,0,14,9,6,3,3,4,15,6,5,10,1,2,13,8,12,5,7,14,11,12,4,11,2,15,8,1,13,1,6,10,4,13,9,0,8,6,15,9,3,8,0,7,11,4,1,15,2,14,12,3,5,11,10,5,14,2,7,12,7,13,13,8,14,11,3,5,0,6,6,15,9,0,10,3,1,4,2,7,8,2,5,12,11,1,12,10,4,14,15,9,10,3,6,15,9,0,0,6,12,10,11,1,7,13,13,8,15,9,1,4,3,5,14,11,5,12,2,7,8,2,4,14,2,14,12,11,4,2,1,12,7,4,10,7,11,13,6,1,8,5,5,0,3,15,15,10,13,3,0,9,14,8,9,6,4,11,2,8,1,12,11,7,10,1,13,14,7,2,8,13,15,6,9,15,12,0,5,9,6,10,3,4,0,5,14,3,12,10,1,15,10,4,15,2,9,7,2,12,6,9,8,5,0,6,13,1,3,13,4,14,14,0,7,11,5,3,11,8,9,4,14,3,15,2,5,12,2,9,8,5,12,15,3,10,7,11,0,14,4,1,10,7,1,6,13,0,11,8,6,13,4,13,11,0,2,11,14,7,15,4,0,9,8,1,13,10,3,14,12,3,9,5,7,12,5,2,10,15,6,8,1,6,1,6,4,11,11,13,13,8,12,1,3,4,7,10,14,7,10,9,15,5,6,0,8,15,0,14,5,2,9,3,2,12,13,1,2,15,8,13,4,8,6,10,15,3,11,7,1,4,10,12,9,5,3,6,14,11,5,0,0,14,12,9,7,2,7,2,11,1,4,14,1,7,9,4,12,10,14,8,2,13,0,15,6,12,10,9,13,0,15,3,3,5,5,6,8,11];t.substitute=function(e,t){for(var r=0,n=0;n<4;n++){r<<=4,r|=i[64*n+(e>>>18-6*n&63)]}for(n=0;n<4;n++){r<<=4,r|=i[256+64*n+(t>>>18-6*n&63)]}return r>>>0};var o=[16,25,12,11,3,20,4,15,31,17,9,6,27,14,1,22,30,24,8,18,0,5,29,23,13,19,2,26,10,21,28,7];t.permute=function(e){for(var t=0,r=0;r<o.length;r++)t<<=1,t|=e>>>o[r]&1;return t>>>0},t.padSplit=function(e,t,r){for(var n=e.toString(2);n.length<t;)n="0"+n;for(var i=[],o=0;o<t;o+=r)i.push(n.slice(o,o+r));return i.join(" ")}},function(e,t,r){"use strict";var n=r(6);function i(e){this.options=e,this.type=this.options.type,this.blockSize=8,this._init(),this.buffer=new Array(this.blockSize),this.bufferOff=0}e.exports=i,i.prototype._init=function(){},i.prototype.update=function(e){return 0===e.length?[]:"decrypt"===this.type?this._updateDecrypt(e):this._updateEncrypt(e)},i.prototype._buffer=function(e,t){for(var r=Math.min(this.buffer.length-this.bufferOff,e.length-t),n=0;n<r;n++)this.buffer[this.bufferOff+n]=e[t+n];return this.bufferOff+=r,r},i.prototype._flushBuffer=function(e,t){return this._update(this.buffer,0,e,t),this.bufferOff=0,this.blockSize},i.prototype._updateEncrypt=function(e){var t=0,r=0,n=(this.bufferOff+e.length)/this.blockSize|0,i=new Array(n*this.blockSize);0!==this.bufferOff&&(t+=this._buffer(e,t),this.bufferOff===this.buffer.length&&(r+=this._flushBuffer(i,r)));for(var o=e.length-(e.length-t)%this.blockSize;t<o;t+=this.blockSize)this._update(e,t,i,r),r+=this.blockSize;for(;t<e.length;t++,this.bufferOff++)this.buffer[this.bufferOff]=e[t];return i},i.prototype._updateDecrypt=function(e){for(var t=0,r=0,n=Math.ceil((this.bufferOff+e.length)/this.blockSize)-1,i=new Array(n*this.blockSize);n>0;n--)t+=this._buffer(e,t),r+=this._flushBuffer(i,r);return t+=this._buffer(e,t),i},i.prototype.final=function(e){var t,r;return e&&(t=this.update(e)),r="encrypt"===this.type?this._finalEncrypt():this._finalDecrypt(),t?t.concat(r):r},i.prototype._pad=function(e,t){if(0===t)return!1;for(;t<e.length;)e[t++]=0;return!0},i.prototype._finalEncrypt=function(){if(!this._pad(this.buffer,this.bufferOff))return[];var e=new Array(this.blockSize);return this._update(this.buffer,0,e,0),e},i.prototype._unpad=function(e){return e},i.prototype._finalDecrypt=function(){n.equal(this.bufferOff,this.blockSize,"Not enough data to decrypt");var e=new Array(this.blockSize);return this._flushBuffer(e,0),this._unpad(e)}},function(e,t,r){"use strict";var n=r(6),i=r(1),o=r(36),a=o.utils,s=o.Cipher;function f(){this.tmp=new Array(2),this.keys=null}function c(e){s.call(this,e);var t=new f;this._desState=t,this.deriveKeys(t,e.key)}i(c,s),e.exports=c,c.create=function(e){return new c(e)};var u=[1,1,2,2,2,2,2,2,1,2,2,2,2,2,2,1];c.prototype.deriveKeys=function(e,t){e.keys=new Array(32),n.equal(t.length,this.blockSize,"Invalid key length");var r=a.readUInt32BE(t,0),i=a.readUInt32BE(t,4);a.pc1(r,i,e.tmp,0),r=e.tmp[0],i=e.tmp[1];for(var o=0;o<e.keys.length;o+=2){var s=u[o>>>1];r=a.r28shl(r,s),i=a.r28shl(i,s),a.pc2(r,i,e.keys,o)}},c.prototype._update=function(e,t,r,n){var i=this._desState,o=a.readUInt32BE(e,t),s=a.readUInt32BE(e,t+4);a.ip(o,s,i.tmp,0),o=i.tmp[0],s=i.tmp[1],"encrypt"===this.type?this._encrypt(i,o,s,i.tmp,0):this._decrypt(i,o,s,i.tmp,0),o=i.tmp[0],s=i.tmp[1],a.writeUInt32BE(r,o,n),a.writeUInt32BE(r,s,n+4)},c.prototype._pad=function(e,t){for(var r=e.length-t,n=t;n<e.length;n++)e[n]=r;return!0},c.prototype._unpad=function(e){for(var t=e[e.length-1],r=e.length-t;r<e.length;r++)n.equal(e[r],t);return e.slice(0,e.length-t)},c.prototype._encrypt=function(e,t,r,n,i){for(var o=t,s=r,f=0;f<e.keys.length;f+=2){var c=e.keys[f],u=e.keys[f+1];a.expand(s,e.tmp,0),c^=e.tmp[0],u^=e.tmp[1];var h=a.substitute(c,u),d=s;s=(o^a.permute(h))>>>0,o=d}a.rip(s,o,n,i)},c.prototype._decrypt=function(e,t,r,n,i){for(var o=r,s=t,f=e.keys.length-2;f>=0;f-=2){var c=e.keys[f],u=e.keys[f+1];a.expand(o,e.tmp,0),c^=e.tmp[0],u^=e.tmp[1];var h=a.substitute(c,u),d=o;o=(s^a.permute(h))>>>0,s=d}a.rip(o,s,n,i)}},function(e,t,r){"use strict";var n=r(6),i=r(1),o={};function a(e){n.equal(e.length,8,"Invalid IV length"),this.iv=new Array(8);for(var t=0;t<this.iv.length;t++)this.iv[t]=e[t]}t.instantiate=function(e){function t(t){e.call(this,t),this._cbcInit()}i(t,e);for(var r=Object.keys(o),n=0;n<r.length;n++){var a=r[n];t.prototype[a]=o[a]}return t.create=function(e){return new t(e)},t},o._cbcInit=function(){var e=new a(this.options.iv);this._cbcState=e},o._update=function(e,t,r,n){var i=this._cbcState,o=this.constructor.super_.prototype,a=i.iv;if("encrypt"===this.type){for(var s=0;s<this.blockSize;s++)a[s]^=e[t+s];o._update.call(this,a,0,r,n);for(s=0;s<this.blockSize;s++)a[s]=r[n+s]}else{o._update.call(this,e,t,r,n);for(s=0;s<this.blockSize;s++)r[n+s]^=a[s];for(s=0;s<this.blockSize;s++)a[s]=e[t+s]}}},function(e,t,r){"use strict";var n=r(6),i=r(1),o=r(36),a=o.Cipher,s=o.DES;function f(e,t){n.equal(t.length,24,"Invalid key length");var r=t.slice(0,8),i=t.slice(8,16),o=t.slice(16,24);this.ciphers="encrypt"===e?[s.create({type:"encrypt",key:r}),s.create({type:"decrypt",key:i}),s.create({type:"encrypt",key:o})]:[s.create({type:"decrypt",key:o}),s.create({type:"encrypt",key:i}),s.create({type:"decrypt",key:r})]}function c(e){a.call(this,e);var t=new f(this.type,this.options.key);this._edeState=t}i(c,a),e.exports=c,c.create=function(e){return new c(e)},c.prototype._update=function(e,t,r,n){var i=this._edeState;i.ciphers[0]._update(e,t,r,n),i.ciphers[1]._update(r,n,r,n),i.ciphers[2]._update(r,n,r,n)},c.prototype._pad=s.prototype._pad,c.prototype._unpad=s.prototype._unpad},function(e,t,r){var n=r(38),i=r(65),o=r(0).Buffer,a=r(66),s=r(10),f=r(23),c=r(24);function u(e,t,r){s.call(this),this._cache=new d,this._cipher=new f.AES(t),this._prev=o.from(r),this._mode=e,this._autopadding=!0}r(1)(u,s),u.prototype._update=function(e){var t,r;this._cache.add(e);for(var n=[];t=this._cache.get();)r=this._mode.encrypt(this,t),n.push(r);return o.concat(n)};var h=o.alloc(16,16);function d(){this.cache=o.allocUnsafe(0)}function l(e,t,r){var s=n[e.toLowerCase()];if(!s)throw new TypeError("invalid suite type");if("string"==typeof t&&(t=o.from(t)),t.length!==s.key/8)throw new TypeError("invalid key length "+t.length);if("string"==typeof r&&(r=o.from(r)),"GCM"!==s.mode&&r.length!==s.iv)throw new TypeError("invalid iv length "+r.length);return"stream"===s.type?new a(s.module,t,r):"auth"===s.type?new i(s.module,t,r):new u(s.module,t,r)}u.prototype._final=function(){var e=this._cache.flush();if(this._autopadding)return e=this._mode.encrypt(this,e),this._cipher.scrub(),e;if(!e.equals(h))throw this._cipher.scrub(),new Error("data not multiple of block length")},u.prototype.setAutoPadding=function(e){return this._autopadding=!!e,this},d.prototype.add=function(e){this.cache=o.concat([this.cache,e])},d.prototype.get=function(){if(this.cache.length>15){var e=this.cache.slice(0,16);return this.cache=this.cache.slice(16),e}return null},d.prototype.flush=function(){for(var e=16-this.cache.length,t=o.allocUnsafe(e),r=-1;++r<e;)t.writeUInt8(e,r);return o.concat([this.cache,t])},t.createCipheriv=l,t.createCipher=function(e,t){var r=n[e.toLowerCase()];if(!r)throw new TypeError("invalid suite type");var i=c(t,!1,r.key,r.iv);return l(e,i.key,i.iv)}},function(e,t){t.encrypt=function(e,t){return e._cipher.encryptBlock(t)},t.decrypt=function(e,t){return e._cipher.decryptBlock(t)}},function(e,t,r){var n=r(17);t.encrypt=function(e,t){var r=n(t,e._prev);return e._prev=e._cipher.encryptBlock(r),e._prev},t.decrypt=function(e,t){var r=e._prev;e._prev=t;var i=e._cipher.decryptBlock(t);return n(i,r)}},function(e,t,r){var n=r(0).Buffer,i=r(17);function o(e,t,r){var o=t.length,a=i(t,e._cache);return e._cache=e._cache.slice(o),e._prev=n.concat([e._prev,r?t:a]),a}t.encrypt=function(e,t,r){for(var i,a=n.allocUnsafe(0);t.length;){if(0===e._cache.length&&(e._cache=e._cipher.encryptBlock(e._prev),e._prev=n.allocUnsafe(0)),!(e._cache.length<=t.length)){a=n.concat([a,o(e,t,r)]);break}i=e._cache.length,a=n.concat([a,o(e,t.slice(0,i),r)]),t=t.slice(i)}return a}},function(e,t,r){var n=r(0).Buffer;function i(e,t,r){var i=e._cipher.encryptBlock(e._prev)[0]^t;return e._prev=n.concat([e._prev.slice(1),n.from([r?t:i])]),i}t.encrypt=function(e,t,r){for(var o=t.length,a=n.allocUnsafe(o),s=-1;++s<o;)a[s]=i(e,t[s],r);return a}},function(e,t,r){var n=r(0).Buffer;function i(e,t,r){for(var n,i,a=-1,s=0;++a<8;)n=t&1<<7-a?128:0,s+=(128&(i=e._cipher.encryptBlock(e._prev)[0]^n))>>a%8,e._prev=o(e._prev,r?n:i);return s}function o(e,t){var r=e.length,i=-1,o=n.allocUnsafe(e.length);for(e=n.concat([e,n.from([t])]);++i<r;)o[i]=e[i]<<1|e[i+1]>>7;return o}t.encrypt=function(e,t,r){for(var o=t.length,a=n.allocUnsafe(o),s=-1;++s<o;)a[s]=i(e,t[s],r);return a}},function(e,t,r){(function(e){var n=r(17);function i(e){return e._prev=e._cipher.encryptBlock(e._prev),e._prev}t.encrypt=function(t,r){for(;t._cache.length<r.length;)t._cache=e.concat([t._cache,i(t)]);var o=t._cache.slice(0,r.length);return t._cache=t._cache.slice(r.length),n(r,o)}}).call(this,r(2).Buffer)},function(e,t,r){var n=r(0).Buffer,i=n.alloc(16,0);function o(e){var t=n.allocUnsafe(16);return t.writeUInt32BE(e[0]>>>0,0),t.writeUInt32BE(e[1]>>>0,4),t.writeUInt32BE(e[2]>>>0,8),t.writeUInt32BE(e[3]>>>0,12),t}function a(e){this.h=e,this.state=n.alloc(16,0),this.cache=n.allocUnsafe(0)}a.prototype.ghash=function(e){for(var t=-1;++t<e.length;)this.state[t]^=e[t];this._multiply()},a.prototype._multiply=function(){for(var e,t,r,n=[(e=this.h).readUInt32BE(0),e.readUInt32BE(4),e.readUInt32BE(8),e.readUInt32BE(12)],i=[0,0,0,0],a=-1;++a<128;){for(0!=(this.state[~~(a/8)]&1<<7-a%8)&&(i[0]^=n[0],i[1]^=n[1],i[2]^=n[2],i[3]^=n[3]),r=0!=(1&n[3]),t=3;t>0;t--)n[t]=n[t]>>>1|(1&n[t-1])<<31;n[0]=n[0]>>>1,r&&(n[0]=n[0]^225<<24)}this.state=o(i)},a.prototype.update=function(e){var t;for(this.cache=n.concat([this.cache,e]);this.cache.length>=16;)t=this.cache.slice(0,16),this.cache=this.cache.slice(16),this.ghash(t)},a.prototype.final=function(e,t){return this.cache.length&&this.ghash(n.concat([this.cache,i],16)),this.ghash(o([0,e,0,t])),this.state},e.exports=a},function(e,t,r){var n=r(65),i=r(0).Buffer,o=r(38),a=r(66),s=r(10),f=r(23),c=r(24);function u(e,t,r){s.call(this),this._cache=new h,this._last=void 0,this._cipher=new f.AES(t),this._prev=i.from(r),this._mode=e,this._autopadding=!0}function h(){this.cache=i.allocUnsafe(0)}function d(e,t,r){var s=o[e.toLowerCase()];if(!s)throw new TypeError("invalid suite type");if("string"==typeof r&&(r=i.from(r)),"GCM"!==s.mode&&r.length!==s.iv)throw new TypeError("invalid iv length "+r.length);if("string"==typeof t&&(t=i.from(t)),t.length!==s.key/8)throw new TypeError("invalid key length "+t.length);return"stream"===s.type?new a(s.module,t,r,!0):"auth"===s.type?new n(s.module,t,r,!0):new u(s.module,t,r)}r(1)(u,s),u.prototype._update=function(e){var t,r;this._cache.add(e);for(var n=[];t=this._cache.get(this._autopadding);)r=this._mode.decrypt(this,t),n.push(r);return i.concat(n)},u.prototype._final=function(){var e=this._cache.flush();if(this._autopadding)return function(e){var t=e[15];if(t<1||t>16)throw new Error("unable to decrypt data");var r=-1;for(;++r<t;)if(e[r+(16-t)]!==t)throw new Error("unable to decrypt data");if(16===t)return;return e.slice(0,16-t)}(this._mode.decrypt(this,e));if(e)throw new Error("data not multiple of block length")},u.prototype.setAutoPadding=function(e){return this._autopadding=!!e,this},h.prototype.add=function(e){this.cache=i.concat([this.cache,e])},h.prototype.get=function(e){var t;if(e){if(this.cache.length>16)return t=this.cache.slice(0,16),this.cache=this.cache.slice(16),t}else if(this.cache.length>=16)return t=this.cache.slice(0,16),this.cache=this.cache.slice(16),t;return null},h.prototype.flush=function(){if(this.cache.length)return this.cache},t.createDecipher=function(e,t){var r=o[e.toLowerCase()];if(!r)throw new TypeError("invalid suite type");var n=c(t,!1,r.key,r.iv);return d(e,n.key,n.iv)},t.createDecipheriv=d},function(e,t){t["des-ecb"]={key:8,iv:0},t["des-cbc"]=t.des={key:8,iv:8},t["des-ede3-cbc"]=t.des3={key:24,iv:8},t["des-ede3"]={key:24,iv:0},t["des-ede-cbc"]={key:16,iv:8},t["des-ede"]={key:16,iv:0}},function(e,t,r){(function(e){var n=r(67),i=r(143),o=r(144);var a={binary:!0,hex:!0,base64:!0};t.DiffieHellmanGroup=t.createDiffieHellmanGroup=t.getDiffieHellman=function(t){var r=new e(i[t].prime,"hex"),n=new e(i[t].gen,"hex");return new o(r,n)},t.createDiffieHellman=t.DiffieHellman=function t(r,i,s,f){return e.isBuffer(i)||void 0===a[i]?t(r,"binary",i,s):(i=i||"binary",f=f||"binary",s=s||new e([2]),e.isBuffer(s)||(s=new e(s,f)),"number"==typeof r?new o(n(r,s),s,!0):(e.isBuffer(r)||(r=new e(r,i)),new o(r,s,!0)))}}).call(this,r(2).Buffer)},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t){},function(e,t){},function(e){e.exports=JSON.parse('{"modp1":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a63a3620ffffffffffffffff"},"modp2":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece65381ffffffffffffffff"},"modp5":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff"},"modp14":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aacaa68ffffffffffffffff"},"modp15":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a93ad2caffffffffffffffff"},"modp16":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c934063199ffffffffffffffff"},"modp17":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dcc4024ffffffffffffffff"},"modp18":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dbe115974a3926f12fee5e438777cb6a932df8cd8bec4d073b931ba3bc832b68d9dd300741fa7bf8afc47ed2576f6936ba424663aab639c5ae4f5683423b4742bf1c978238f16cbe39d652de3fdb8befc848ad922222e04a4037c0713eb57a81a23f0c73473fc646cea306b4bcbc8862f8385ddfa9d4b7fa2c087e879683303ed5bdd3a062b3cf5b3a278a66d2a13f83f44f82ddf310ee074ab6a364597e899a0255dc164f31cc50846851df9ab48195ded7ea1b1d510bd7ee74d73faf36bc31ecfa268359046f4eb879f924009438b481c6cd7889a002ed5ee382bc9190da6fc026e479558e4475677e9aa9e3050e2765694dfc81f56e880b96e7160c980dd98edd3dfffffffffffffffff"}}')},function(e,t,r){(function(t){var n=r(3),i=new(r(68)),o=new n(24),a=new n(11),s=new n(10),f=new n(3),c=new n(7),u=r(67),h=r(13);function d(e,r){return r=r||"utf8",t.isBuffer(e)||(e=new t(e,r)),this._pub=new n(e),this}function l(e,r){return r=r||"utf8",t.isBuffer(e)||(e=new t(e,r)),this._priv=new n(e),this}e.exports=b;var p={};function b(e,t,r){this.setGenerator(t),this.__prime=new n(e),this._prime=n.mont(this.__prime),this._primeLen=e.length,this._pub=void 0,this._priv=void 0,this._primeCode=void 0,r?(this.setPublicKey=d,this.setPrivateKey=l):this._primeCode=8}function y(e,r){var n=new t(e.toArray());return r?n.toString(r):n}Object.defineProperty(b.prototype,"verifyError",{enumerable:!0,get:function(){return"number"!=typeof this._primeCode&&(this._primeCode=function(e,t){var r=t.toString("hex"),n=[r,e.toString(16)].join("_");if(n in p)return p[n];var h,d=0;if(e.isEven()||!u.simpleSieve||!u.fermatTest(e)||!i.test(e))return d+=1,d+="02"===r||"05"===r?8:4,p[n]=d,d;switch(i.test(e.shrn(1))||(d+=2),r){case"02":e.mod(o).cmp(a)&&(d+=8);break;case"05":(h=e.mod(s)).cmp(f)&&h.cmp(c)&&(d+=8);break;default:d+=4}return p[n]=d,d}(this.__prime,this.__gen)),this._primeCode}}),b.prototype.generateKeys=function(){return this._priv||(this._priv=new n(h(this._primeLen))),this._pub=this._gen.toRed(this._prime).redPow(this._priv).fromRed(),this.getPublicKey()},b.prototype.computeSecret=function(e){var r=(e=(e=new n(e)).toRed(this._prime)).redPow(this._priv).fromRed(),i=new t(r.toArray()),o=this.getPrime();if(i.length<o.length){var a=new t(o.length-i.length);a.fill(0),i=t.concat([a,i])}return i},b.prototype.getPublicKey=function(e){return y(this._pub,e)},b.prototype.getPrivateKey=function(e){return y(this._priv,e)},b.prototype.getPrime=function(e){return y(this.__prime,e)},b.prototype.getGenerator=function(e){return y(this._gen,e)},b.prototype.setGenerator=function(e,r){return r=r||"utf8",t.isBuffer(e)||(e=new t(e,r)),this.__gen=e,this._gen=new n(e),this}}).call(this,r(2).Buffer)},function(e,t,r){(function(t){var n=r(16),i=r(12),o=r(1),a=r(146),s=r(178),f=r(57);function c(e){i.Writable.call(this);var t=f[e];if(!t)throw new Error("Unknown message digest");this._hashType=t.hash,this._hash=n(t.hash),this._tag=t.id,this._signType=t.sign}function u(e){i.Writable.call(this);var t=f[e];if(!t)throw new Error("Unknown message digest");this._hash=n(t.hash),this._tag=t.id,this._signType=t.sign}function h(e){return new c(e)}function d(e){return new u(e)}Object.keys(f).forEach((function(e){f[e].id=new t(f[e].id,"hex"),f[e.toLowerCase()]=f[e]})),o(c,i.Writable),c.prototype._write=function(e,t,r){this._hash.update(e),r()},c.prototype.update=function(e,r){return"string"==typeof e&&(e=new t(e,r)),this._hash.update(e),this},c.prototype.sign=function(e,t){this.end();var r=this._hash.digest(),n=a(r,e,this._hashType,this._signType,this._tag);return t?n.toString(t):n},o(u,i.Writable),u.prototype._write=function(e,t,r){this._hash.update(e),r()},u.prototype.update=function(e,r){return"string"==typeof e&&(e=new t(e,r)),this._hash.update(e),this},u.prototype.verify=function(e,r,n){"string"==typeof r&&(r=new t(r,n)),this.end();var i=this._hash.digest();return s(r,i,e,this._signType,this._tag)},e.exports={Sign:h,Verify:d,createSign:h,createVerify:d}}).call(this,r(2).Buffer)},function(e,t,r){(function(t){var n=r(55),i=r(40),o=r(41).ec,a=r(3),s=r(26),f=r(78);function c(e,r,i,o){if((e=new t(e.toArray())).length<r.byteLength()){var a=new t(r.byteLength()-e.length);a.fill(0),e=t.concat([a,e])}var s=i.length,f=function(e,r){e=(e=u(e,r)).mod(r);var n=new t(e.toArray());if(n.length<r.byteLength()){var i=new t(r.byteLength()-n.length);i.fill(0),n=t.concat([i,n])}return n}(i,r),c=new t(s);c.fill(1);var h=new t(s);return h.fill(0),h=n(o,h).update(c).update(new t([0])).update(e).update(f).digest(),c=n(o,h).update(c).digest(),{k:h=n(o,h).update(c).update(new t([1])).update(e).update(f).digest(),v:c=n(o,h).update(c).digest()}}function u(e,t){var r=new a(e),n=(e.length<<3)-t.bitLength();return n>0&&r.ishrn(n),r}function h(e,r,i){var o,a;do{for(o=new t(0);8*o.length<e.bitLength();)r.v=n(i,r.k).update(r.v).digest(),o=t.concat([o,r.v]);a=u(o,e),r.k=n(i,r.k).update(r.v).update(new t([0])).digest(),r.v=n(i,r.k).update(r.v).digest()}while(-1!==a.cmp(e));return a}function d(e,t,r,n){return e.toRed(a.mont(r)).redPow(t).fromRed().mod(n)}e.exports=function(e,r,n,l,p){var b=s(r);if(b.curve){if("ecdsa"!==l&&"ecdsa/rsa"!==l)throw new Error("wrong private key type");return function(e,r){var n=f[r.curve.join(".")];if(!n)throw new Error("unknown curve "+r.curve.join("."));var i=new o(n).keyFromPrivate(r.privateKey).sign(e);return new t(i.toDER())}(e,b)}if("dsa"===b.type){if("dsa"!==l)throw new Error("wrong private key type");return function(e,r,n){var i,o=r.params.priv_key,s=r.params.p,f=r.params.q,l=r.params.g,p=new a(0),b=u(e,f).mod(f),y=!1,m=c(o,f,e,n);for(;!1===y;)i=h(f,m,n),p=d(l,i,s,f),0===(y=i.invm(f).imul(b.add(o.mul(p))).mod(f)).cmpn(0)&&(y=!1,p=new a(0));return function(e,r){e=e.toArray(),r=r.toArray(),128&e[0]&&(e=[0].concat(e));128&r[0]&&(r=[0].concat(r));var n=[48,e.length+r.length+4,2,e.length];return n=n.concat(e,[2,r.length],r),new t(n)}(p,y)}(e,b,n)}if("rsa"!==l&&"ecdsa/rsa"!==l)throw new Error("wrong private key type");e=t.concat([p,e]);for(var y=b.modulus.byteLength(),m=[0,1];e.length+m.length+1<y;)m.push(255);m.push(0);for(var v=-1;++v<e.length;)m.push(e[v]);return i(m,b)},e.exports.getKey=c,e.exports.makeKey=h}).call(this,r(2).Buffer)},function(e){e.exports=JSON.parse('{"_args":[["elliptic@6.5.1","C:\\\\Users\\\\Agata\\\\Documents\\\\GitHub\\\\terminarz\\\\frontend"]],"_development":true,"_from":"elliptic@6.5.1","_id":"elliptic@6.5.1","_inBundle":false,"_integrity":"sha512-xvJINNLbTeWQjrl6X+7eQCrIy/YPv5XCpKW6kB5mKvtnGILoLDcySuwomfdzt0BMdLNVnuRNTuzKNHj0bva1Cg==","_location":"/elliptic","_phantomChildren":{},"_requested":{"type":"version","registry":true,"raw":"elliptic@6.5.1","name":"elliptic","escapedName":"elliptic","rawSpec":"6.5.1","saveSpec":null,"fetchSpec":"6.5.1"},"_requiredBy":["/browserify-sign","/create-ecdh"],"_resolved":"https://registry.npmjs.org/elliptic/-/elliptic-6.5.1.tgz","_spec":"6.5.1","_where":"C:\\\\Users\\\\Agata\\\\Documents\\\\GitHub\\\\terminarz\\\\frontend","author":{"name":"Fedor Indutny","email":"fedor@indutny.com"},"bugs":{"url":"https://github.com/indutny/elliptic/issues"},"dependencies":{"bn.js":"^4.4.0","brorand":"^1.0.1","hash.js":"^1.0.0","hmac-drbg":"^1.0.0","inherits":"^2.0.1","minimalistic-assert":"^1.0.0","minimalistic-crypto-utils":"^1.0.0"},"description":"EC cryptography","devDependencies":{"brfs":"^1.4.3","coveralls":"^3.0.4","grunt":"^1.0.4","grunt-browserify":"^5.0.0","grunt-cli":"^1.2.0","grunt-contrib-connect":"^1.0.0","grunt-contrib-copy":"^1.0.0","grunt-contrib-uglify":"^1.0.1","grunt-mocha-istanbul":"^3.0.1","grunt-saucelabs":"^9.0.1","istanbul":"^0.4.2","jscs":"^3.0.7","jshint":"^2.6.0","mocha":"^6.1.4"},"files":["lib"],"homepage":"https://github.com/indutny/elliptic","keywords":["EC","Elliptic","curve","Cryptography"],"license":"MIT","main":"lib/elliptic.js","name":"elliptic","repository":{"type":"git","url":"git+ssh://git@github.com/indutny/elliptic.git"},"scripts":{"jscs":"jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js","jshint":"jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js","lint":"npm run jscs && npm run jshint","test":"npm run lint && npm run unit","unit":"istanbul test _mocha --reporter=spec test/index.js","version":"grunt dist && git add dist/"},"version":"6.5.1"}')},function(e,t,r){"use strict";var n=r(7),i=r(3),o=r(1),a=r(25),s=n.assert;function f(e){a.call(this,"short",e),this.a=new i(e.a,16).toRed(this.red),this.b=new i(e.b,16).toRed(this.red),this.tinv=this.two.redInvm(),this.zeroA=0===this.a.fromRed().cmpn(0),this.threeA=0===this.a.fromRed().sub(this.p).cmpn(-3),this.endo=this._getEndomorphism(e),this._endoWnafT1=new Array(4),this._endoWnafT2=new Array(4)}function c(e,t,r,n){a.BasePoint.call(this,e,"affine"),null===t&&null===r?(this.x=null,this.y=null,this.inf=!0):(this.x=new i(t,16),this.y=new i(r,16),n&&(this.x.forceRed(this.curve.red),this.y.forceRed(this.curve.red)),this.x.red||(this.x=this.x.toRed(this.curve.red)),this.y.red||(this.y=this.y.toRed(this.curve.red)),this.inf=!1)}function u(e,t,r,n){a.BasePoint.call(this,e,"jacobian"),null===t&&null===r&&null===n?(this.x=this.curve.one,this.y=this.curve.one,this.z=new i(0)):(this.x=new i(t,16),this.y=new i(r,16),this.z=new i(n,16)),this.x.red||(this.x=this.x.toRed(this.curve.red)),this.y.red||(this.y=this.y.toRed(this.curve.red)),this.z.red||(this.z=this.z.toRed(this.curve.red)),this.zOne=this.z===this.curve.one}o(f,a),e.exports=f,f.prototype._getEndomorphism=function(e){if(this.zeroA&&this.g&&this.n&&1===this.p.modn(3)){var t,r;if(e.beta)t=new i(e.beta,16).toRed(this.red);else{var n=this._getEndoRoots(this.p);t=(t=n[0].cmp(n[1])<0?n[0]:n[1]).toRed(this.red)}if(e.lambda)r=new i(e.lambda,16);else{var o=this._getEndoRoots(this.n);0===this.g.mul(o[0]).x.cmp(this.g.x.redMul(t))?r=o[0]:(r=o[1],s(0===this.g.mul(r).x.cmp(this.g.x.redMul(t))))}return{beta:t,lambda:r,basis:e.basis?e.basis.map((function(e){return{a:new i(e.a,16),b:new i(e.b,16)}})):this._getEndoBasis(r)}}},f.prototype._getEndoRoots=function(e){var t=e===this.p?this.red:i.mont(e),r=new i(2).toRed(t).redInvm(),n=r.redNeg(),o=new i(3).toRed(t).redNeg().redSqrt().redMul(r);return[n.redAdd(o).fromRed(),n.redSub(o).fromRed()]},f.prototype._getEndoBasis=function(e){for(var t,r,n,o,a,s,f,c,u,h=this.n.ushrn(Math.floor(this.n.bitLength()/2)),d=e,l=this.n.clone(),p=new i(1),b=new i(0),y=new i(0),m=new i(1),v=0;0!==d.cmpn(0);){var g=l.div(d);c=l.sub(g.mul(d)),u=y.sub(g.mul(p));var w=m.sub(g.mul(b));if(!n&&c.cmp(h)<0)t=f.neg(),r=p,n=c.neg(),o=u;else if(n&&2==++v)break;f=c,l=d,d=c,y=p,p=u,m=b,b=w}a=c.neg(),s=u;var _=n.sqr().add(o.sqr());return a.sqr().add(s.sqr()).cmp(_)>=0&&(a=t,s=r),n.negative&&(n=n.neg(),o=o.neg()),a.negative&&(a=a.neg(),s=s.neg()),[{a:n,b:o},{a:a,b:s}]},f.prototype._endoSplit=function(e){var t=this.endo.basis,r=t[0],n=t[1],i=n.b.mul(e).divRound(this.n),o=r.b.neg().mul(e).divRound(this.n),a=i.mul(r.a),s=o.mul(n.a),f=i.mul(r.b),c=o.mul(n.b);return{k1:e.sub(a).sub(s),k2:f.add(c).neg()}},f.prototype.pointFromX=function(e,t){(e=new i(e,16)).red||(e=e.toRed(this.red));var r=e.redSqr().redMul(e).redIAdd(e.redMul(this.a)).redIAdd(this.b),n=r.redSqrt();if(0!==n.redSqr().redSub(r).cmp(this.zero))throw new Error("invalid point");var o=n.fromRed().isOdd();return(t&&!o||!t&&o)&&(n=n.redNeg()),this.point(e,n)},f.prototype.validate=function(e){if(e.inf)return!0;var t=e.x,r=e.y,n=this.a.redMul(t),i=t.redSqr().redMul(t).redIAdd(n).redIAdd(this.b);return 0===r.redSqr().redISub(i).cmpn(0)},f.prototype._endoWnafMulAdd=function(e,t,r){for(var n=this._endoWnafT1,i=this._endoWnafT2,o=0;o<e.length;o++){var a=this._endoSplit(t[o]),s=e[o],f=s._getBeta();a.k1.negative&&(a.k1.ineg(),s=s.neg(!0)),a.k2.negative&&(a.k2.ineg(),f=f.neg(!0)),n[2*o]=s,n[2*o+1]=f,i[2*o]=a.k1,i[2*o+1]=a.k2}for(var c=this._wnafMulAdd(1,n,i,2*o,r),u=0;u<2*o;u++)n[u]=null,i[u]=null;return c},o(c,a.BasePoint),f.prototype.point=function(e,t,r){return new c(this,e,t,r)},f.prototype.pointFromJSON=function(e,t){return c.fromJSON(this,e,t)},c.prototype._getBeta=function(){if(this.curve.endo){var e=this.precomputed;if(e&&e.beta)return e.beta;var t=this.curve.point(this.x.redMul(this.curve.endo.beta),this.y);if(e){var r=this.curve,n=function(e){return r.point(e.x.redMul(r.endo.beta),e.y)};e.beta=t,t.precomputed={beta:null,naf:e.naf&&{wnd:e.naf.wnd,points:e.naf.points.map(n)},doubles:e.doubles&&{step:e.doubles.step,points:e.doubles.points.map(n)}}}return t}},c.prototype.toJSON=function(){return this.precomputed?[this.x,this.y,this.precomputed&&{doubles:this.precomputed.doubles&&{step:this.precomputed.doubles.step,points:this.precomputed.doubles.points.slice(1)},naf:this.precomputed.naf&&{wnd:this.precomputed.naf.wnd,points:this.precomputed.naf.points.slice(1)}}]:[this.x,this.y]},c.fromJSON=function(e,t,r){"string"==typeof t&&(t=JSON.parse(t));var n=e.point(t[0],t[1],r);if(!t[2])return n;function i(t){return e.point(t[0],t[1],r)}var o=t[2];return n.precomputed={beta:null,doubles:o.doubles&&{step:o.doubles.step,points:[n].concat(o.doubles.points.map(i))},naf:o.naf&&{wnd:o.naf.wnd,points:[n].concat(o.naf.points.map(i))}},n},c.prototype.inspect=function(){return this.isInfinity()?"<EC Point Infinity>":"<EC Point x: "+this.x.fromRed().toString(16,2)+" y: "+this.y.fromRed().toString(16,2)+">"},c.prototype.isInfinity=function(){return this.inf},c.prototype.add=function(e){if(this.inf)return e;if(e.inf)return this;if(this.eq(e))return this.dbl();if(this.neg().eq(e))return this.curve.point(null,null);if(0===this.x.cmp(e.x))return this.curve.point(null,null);var t=this.y.redSub(e.y);0!==t.cmpn(0)&&(t=t.redMul(this.x.redSub(e.x).redInvm()));var r=t.redSqr().redISub(this.x).redISub(e.x),n=t.redMul(this.x.redSub(r)).redISub(this.y);return this.curve.point(r,n)},c.prototype.dbl=function(){if(this.inf)return this;var e=this.y.redAdd(this.y);if(0===e.cmpn(0))return this.curve.point(null,null);var t=this.curve.a,r=this.x.redSqr(),n=e.redInvm(),i=r.redAdd(r).redIAdd(r).redIAdd(t).redMul(n),o=i.redSqr().redISub(this.x.redAdd(this.x)),a=i.redMul(this.x.redSub(o)).redISub(this.y);return this.curve.point(o,a)},c.prototype.getX=function(){return this.x.fromRed()},c.prototype.getY=function(){return this.y.fromRed()},c.prototype.mul=function(e){return e=new i(e,16),this.isInfinity()?this:this._hasDoubles(e)?this.curve._fixedNafMul(this,e):this.curve.endo?this.curve._endoWnafMulAdd([this],[e]):this.curve._wnafMul(this,e)},c.prototype.mulAdd=function(e,t,r){var n=[this,t],i=[e,r];return this.curve.endo?this.curve._endoWnafMulAdd(n,i):this.curve._wnafMulAdd(1,n,i,2)},c.prototype.jmulAdd=function(e,t,r){var n=[this,t],i=[e,r];return this.curve.endo?this.curve._endoWnafMulAdd(n,i,!0):this.curve._wnafMulAdd(1,n,i,2,!0)},c.prototype.eq=function(e){return this===e||this.inf===e.inf&&(this.inf||0===this.x.cmp(e.x)&&0===this.y.cmp(e.y))},c.prototype.neg=function(e){if(this.inf)return this;var t=this.curve.point(this.x,this.y.redNeg());if(e&&this.precomputed){var r=this.precomputed,n=function(e){return e.neg()};t.precomputed={naf:r.naf&&{wnd:r.naf.wnd,points:r.naf.points.map(n)},doubles:r.doubles&&{step:r.doubles.step,points:r.doubles.points.map(n)}}}return t},c.prototype.toJ=function(){return this.inf?this.curve.jpoint(null,null,null):this.curve.jpoint(this.x,this.y,this.curve.one)},o(u,a.BasePoint),f.prototype.jpoint=function(e,t,r){return new u(this,e,t,r)},u.prototype.toP=function(){if(this.isInfinity())return this.curve.point(null,null);var e=this.z.redInvm(),t=e.redSqr(),r=this.x.redMul(t),n=this.y.redMul(t).redMul(e);return this.curve.point(r,n)},u.prototype.neg=function(){return this.curve.jpoint(this.x,this.y.redNeg(),this.z)},u.prototype.add=function(e){if(this.isInfinity())return e;if(e.isInfinity())return this;var t=e.z.redSqr(),r=this.z.redSqr(),n=this.x.redMul(t),i=e.x.redMul(r),o=this.y.redMul(t.redMul(e.z)),a=e.y.redMul(r.redMul(this.z)),s=n.redSub(i),f=o.redSub(a);if(0===s.cmpn(0))return 0!==f.cmpn(0)?this.curve.jpoint(null,null,null):this.dbl();var c=s.redSqr(),u=c.redMul(s),h=n.redMul(c),d=f.redSqr().redIAdd(u).redISub(h).redISub(h),l=f.redMul(h.redISub(d)).redISub(o.redMul(u)),p=this.z.redMul(e.z).redMul(s);return this.curve.jpoint(d,l,p)},u.prototype.mixedAdd=function(e){if(this.isInfinity())return e.toJ();if(e.isInfinity())return this;var t=this.z.redSqr(),r=this.x,n=e.x.redMul(t),i=this.y,o=e.y.redMul(t).redMul(this.z),a=r.redSub(n),s=i.redSub(o);if(0===a.cmpn(0))return 0!==s.cmpn(0)?this.curve.jpoint(null,null,null):this.dbl();var f=a.redSqr(),c=f.redMul(a),u=r.redMul(f),h=s.redSqr().redIAdd(c).redISub(u).redISub(u),d=s.redMul(u.redISub(h)).redISub(i.redMul(c)),l=this.z.redMul(a);return this.curve.jpoint(h,d,l)},u.prototype.dblp=function(e){if(0===e)return this;if(this.isInfinity())return this;if(!e)return this.dbl();if(this.curve.zeroA||this.curve.threeA){for(var t=this,r=0;r<e;r++)t=t.dbl();return t}var n=this.curve.a,i=this.curve.tinv,o=this.x,a=this.y,s=this.z,f=s.redSqr().redSqr(),c=a.redAdd(a);for(r=0;r<e;r++){var u=o.redSqr(),h=c.redSqr(),d=h.redSqr(),l=u.redAdd(u).redIAdd(u).redIAdd(n.redMul(f)),p=o.redMul(h),b=l.redSqr().redISub(p.redAdd(p)),y=p.redISub(b),m=l.redMul(y);m=m.redIAdd(m).redISub(d);var v=c.redMul(s);r+1<e&&(f=f.redMul(d)),o=b,s=v,c=m}return this.curve.jpoint(o,c.redMul(i),s)},u.prototype.dbl=function(){return this.isInfinity()?this:this.curve.zeroA?this._zeroDbl():this.curve.threeA?this._threeDbl():this._dbl()},u.prototype._zeroDbl=function(){var e,t,r;if(this.zOne){var n=this.x.redSqr(),i=this.y.redSqr(),o=i.redSqr(),a=this.x.redAdd(i).redSqr().redISub(n).redISub(o);a=a.redIAdd(a);var s=n.redAdd(n).redIAdd(n),f=s.redSqr().redISub(a).redISub(a),c=o.redIAdd(o);c=(c=c.redIAdd(c)).redIAdd(c),e=f,t=s.redMul(a.redISub(f)).redISub(c),r=this.y.redAdd(this.y)}else{var u=this.x.redSqr(),h=this.y.redSqr(),d=h.redSqr(),l=this.x.redAdd(h).redSqr().redISub(u).redISub(d);l=l.redIAdd(l);var p=u.redAdd(u).redIAdd(u),b=p.redSqr(),y=d.redIAdd(d);y=(y=y.redIAdd(y)).redIAdd(y),e=b.redISub(l).redISub(l),t=p.redMul(l.redISub(e)).redISub(y),r=(r=this.y.redMul(this.z)).redIAdd(r)}return this.curve.jpoint(e,t,r)},u.prototype._threeDbl=function(){var e,t,r;if(this.zOne){var n=this.x.redSqr(),i=this.y.redSqr(),o=i.redSqr(),a=this.x.redAdd(i).redSqr().redISub(n).redISub(o);a=a.redIAdd(a);var s=n.redAdd(n).redIAdd(n).redIAdd(this.curve.a),f=s.redSqr().redISub(a).redISub(a);e=f;var c=o.redIAdd(o);c=(c=c.redIAdd(c)).redIAdd(c),t=s.redMul(a.redISub(f)).redISub(c),r=this.y.redAdd(this.y)}else{var u=this.z.redSqr(),h=this.y.redSqr(),d=this.x.redMul(h),l=this.x.redSub(u).redMul(this.x.redAdd(u));l=l.redAdd(l).redIAdd(l);var p=d.redIAdd(d),b=(p=p.redIAdd(p)).redAdd(p);e=l.redSqr().redISub(b),r=this.y.redAdd(this.z).redSqr().redISub(h).redISub(u);var y=h.redSqr();y=(y=(y=y.redIAdd(y)).redIAdd(y)).redIAdd(y),t=l.redMul(p.redISub(e)).redISub(y)}return this.curve.jpoint(e,t,r)},u.prototype._dbl=function(){var e=this.curve.a,t=this.x,r=this.y,n=this.z,i=n.redSqr().redSqr(),o=t.redSqr(),a=r.redSqr(),s=o.redAdd(o).redIAdd(o).redIAdd(e.redMul(i)),f=t.redAdd(t),c=(f=f.redIAdd(f)).redMul(a),u=s.redSqr().redISub(c.redAdd(c)),h=c.redISub(u),d=a.redSqr();d=(d=(d=d.redIAdd(d)).redIAdd(d)).redIAdd(d);var l=s.redMul(h).redISub(d),p=r.redAdd(r).redMul(n);return this.curve.jpoint(u,l,p)},u.prototype.trpl=function(){if(!this.curve.zeroA)return this.dbl().add(this);var e=this.x.redSqr(),t=this.y.redSqr(),r=this.z.redSqr(),n=t.redSqr(),i=e.redAdd(e).redIAdd(e),o=i.redSqr(),a=this.x.redAdd(t).redSqr().redISub(e).redISub(n),s=(a=(a=(a=a.redIAdd(a)).redAdd(a).redIAdd(a)).redISub(o)).redSqr(),f=n.redIAdd(n);f=(f=(f=f.redIAdd(f)).redIAdd(f)).redIAdd(f);var c=i.redIAdd(a).redSqr().redISub(o).redISub(s).redISub(f),u=t.redMul(c);u=(u=u.redIAdd(u)).redIAdd(u);var h=this.x.redMul(s).redISub(u);h=(h=h.redIAdd(h)).redIAdd(h);var d=this.y.redMul(c.redMul(f.redISub(c)).redISub(a.redMul(s)));d=(d=(d=d.redIAdd(d)).redIAdd(d)).redIAdd(d);var l=this.z.redAdd(a).redSqr().redISub(r).redISub(s);return this.curve.jpoint(h,d,l)},u.prototype.mul=function(e,t){return e=new i(e,t),this.curve._wnafMul(this,e)},u.prototype.eq=function(e){if("affine"===e.type)return this.eq(e.toJ());if(this===e)return!0;var t=this.z.redSqr(),r=e.z.redSqr();if(0!==this.x.redMul(r).redISub(e.x.redMul(t)).cmpn(0))return!1;var n=t.redMul(this.z),i=r.redMul(e.z);return 0===this.y.redMul(i).redISub(e.y.redMul(n)).cmpn(0)},u.prototype.eqXToP=function(e){var t=this.z.redSqr(),r=e.toRed(this.curve.red).redMul(t);if(0===this.x.cmp(r))return!0;for(var n=e.clone(),i=this.curve.redN.redMul(t);;){if(n.iadd(this.curve.n),n.cmp(this.curve.p)>=0)return!1;if(r.redIAdd(i),0===this.x.cmp(r))return!0}},u.prototype.inspect=function(){return this.isInfinity()?"<EC JPoint Infinity>":"<EC JPoint x: "+this.x.toString(16,2)+" y: "+this.y.toString(16,2)+" z: "+this.z.toString(16,2)+">"},u.prototype.isInfinity=function(){return 0===this.z.cmpn(0)}},function(e,t,r){"use strict";var n=r(3),i=r(1),o=r(25),a=r(7);function s(e){o.call(this,"mont",e),this.a=new n(e.a,16).toRed(this.red),this.b=new n(e.b,16).toRed(this.red),this.i4=new n(4).toRed(this.red).redInvm(),this.two=new n(2).toRed(this.red),this.a24=this.i4.redMul(this.a.redAdd(this.two))}function f(e,t,r){o.BasePoint.call(this,e,"projective"),null===t&&null===r?(this.x=this.curve.one,this.z=this.curve.zero):(this.x=new n(t,16),this.z=new n(r,16),this.x.red||(this.x=this.x.toRed(this.curve.red)),this.z.red||(this.z=this.z.toRed(this.curve.red)))}i(s,o),e.exports=s,s.prototype.validate=function(e){var t=e.normalize().x,r=t.redSqr(),n=r.redMul(t).redAdd(r.redMul(this.a)).redAdd(t);return 0===n.redSqrt().redSqr().cmp(n)},i(f,o.BasePoint),s.prototype.decodePoint=function(e,t){return this.point(a.toArray(e,t),1)},s.prototype.point=function(e,t){return new f(this,e,t)},s.prototype.pointFromJSON=function(e){return f.fromJSON(this,e)},f.prototype.precompute=function(){},f.prototype._encode=function(){return this.getX().toArray("be",this.curve.p.byteLength())},f.fromJSON=function(e,t){return new f(e,t[0],t[1]||e.one)},f.prototype.inspect=function(){return this.isInfinity()?"<EC Point Infinity>":"<EC Point x: "+this.x.fromRed().toString(16,2)+" z: "+this.z.fromRed().toString(16,2)+">"},f.prototype.isInfinity=function(){return 0===this.z.cmpn(0)},f.prototype.dbl=function(){var e=this.x.redAdd(this.z).redSqr(),t=this.x.redSub(this.z).redSqr(),r=e.redSub(t),n=e.redMul(t),i=r.redMul(t.redAdd(this.curve.a24.redMul(r)));return this.curve.point(n,i)},f.prototype.add=function(){throw new Error("Not supported on Montgomery curve")},f.prototype.diffAdd=function(e,t){var r=this.x.redAdd(this.z),n=this.x.redSub(this.z),i=e.x.redAdd(e.z),o=e.x.redSub(e.z).redMul(r),a=i.redMul(n),s=t.z.redMul(o.redAdd(a).redSqr()),f=t.x.redMul(o.redISub(a).redSqr());return this.curve.point(s,f)},f.prototype.mul=function(e){for(var t=e.clone(),r=this,n=this.curve.point(null,null),i=[];0!==t.cmpn(0);t.iushrn(1))i.push(t.andln(1));for(var o=i.length-1;o>=0;o--)0===i[o]?(r=r.diffAdd(n,this),n=n.dbl()):(n=r.diffAdd(n,this),r=r.dbl());return n},f.prototype.mulAdd=function(){throw new Error("Not supported on Montgomery curve")},f.prototype.jumlAdd=function(){throw new Error("Not supported on Montgomery curve")},f.prototype.eq=function(e){return 0===this.getX().cmp(e.getX())},f.prototype.normalize=function(){return this.x=this.x.redMul(this.z.redInvm()),this.z=this.curve.one,this},f.prototype.getX=function(){return this.normalize(),this.x.fromRed()}},function(e,t,r){"use strict";var n=r(7),i=r(3),o=r(1),a=r(25),s=n.assert;function f(e){this.twisted=1!=(0|e.a),this.mOneA=this.twisted&&-1==(0|e.a),this.extended=this.mOneA,a.call(this,"edwards",e),this.a=new i(e.a,16).umod(this.red.m),this.a=this.a.toRed(this.red),this.c=new i(e.c,16).toRed(this.red),this.c2=this.c.redSqr(),this.d=new i(e.d,16).toRed(this.red),this.dd=this.d.redAdd(this.d),s(!this.twisted||0===this.c.fromRed().cmpn(1)),this.oneC=1==(0|e.c)}function c(e,t,r,n,o){a.BasePoint.call(this,e,"projective"),null===t&&null===r&&null===n?(this.x=this.curve.zero,this.y=this.curve.one,this.z=this.curve.one,this.t=this.curve.zero,this.zOne=!0):(this.x=new i(t,16),this.y=new i(r,16),this.z=n?new i(n,16):this.curve.one,this.t=o&&new i(o,16),this.x.red||(this.x=this.x.toRed(this.curve.red)),this.y.red||(this.y=this.y.toRed(this.curve.red)),this.z.red||(this.z=this.z.toRed(this.curve.red)),this.t&&!this.t.red&&(this.t=this.t.toRed(this.curve.red)),this.zOne=this.z===this.curve.one,this.curve.extended&&!this.t&&(this.t=this.x.redMul(this.y),this.zOne||(this.t=this.t.redMul(this.z.redInvm()))))}o(f,a),e.exports=f,f.prototype._mulA=function(e){return this.mOneA?e.redNeg():this.a.redMul(e)},f.prototype._mulC=function(e){return this.oneC?e:this.c.redMul(e)},f.prototype.jpoint=function(e,t,r,n){return this.point(e,t,r,n)},f.prototype.pointFromX=function(e,t){(e=new i(e,16)).red||(e=e.toRed(this.red));var r=e.redSqr(),n=this.c2.redSub(this.a.redMul(r)),o=this.one.redSub(this.c2.redMul(this.d).redMul(r)),a=n.redMul(o.redInvm()),s=a.redSqrt();if(0!==s.redSqr().redSub(a).cmp(this.zero))throw new Error("invalid point");var f=s.fromRed().isOdd();return(t&&!f||!t&&f)&&(s=s.redNeg()),this.point(e,s)},f.prototype.pointFromY=function(e,t){(e=new i(e,16)).red||(e=e.toRed(this.red));var r=e.redSqr(),n=r.redSub(this.c2),o=r.redMul(this.d).redMul(this.c2).redSub(this.a),a=n.redMul(o.redInvm());if(0===a.cmp(this.zero)){if(t)throw new Error("invalid point");return this.point(this.zero,e)}var s=a.redSqrt();if(0!==s.redSqr().redSub(a).cmp(this.zero))throw new Error("invalid point");return s.fromRed().isOdd()!==t&&(s=s.redNeg()),this.point(s,e)},f.prototype.validate=function(e){if(e.isInfinity())return!0;e.normalize();var t=e.x.redSqr(),r=e.y.redSqr(),n=t.redMul(this.a).redAdd(r),i=this.c2.redMul(this.one.redAdd(this.d.redMul(t).redMul(r)));return 0===n.cmp(i)},o(c,a.BasePoint),f.prototype.pointFromJSON=function(e){return c.fromJSON(this,e)},f.prototype.point=function(e,t,r,n){return new c(this,e,t,r,n)},c.fromJSON=function(e,t){return new c(e,t[0],t[1],t[2])},c.prototype.inspect=function(){return this.isInfinity()?"<EC Point Infinity>":"<EC Point x: "+this.x.fromRed().toString(16,2)+" y: "+this.y.fromRed().toString(16,2)+" z: "+this.z.fromRed().toString(16,2)+">"},c.prototype.isInfinity=function(){return 0===this.x.cmpn(0)&&(0===this.y.cmp(this.z)||this.zOne&&0===this.y.cmp(this.curve.c))},c.prototype._extDbl=function(){var e=this.x.redSqr(),t=this.y.redSqr(),r=this.z.redSqr();r=r.redIAdd(r);var n=this.curve._mulA(e),i=this.x.redAdd(this.y).redSqr().redISub(e).redISub(t),o=n.redAdd(t),a=o.redSub(r),s=n.redSub(t),f=i.redMul(a),c=o.redMul(s),u=i.redMul(s),h=a.redMul(o);return this.curve.point(f,c,h,u)},c.prototype._projDbl=function(){var e,t,r,n=this.x.redAdd(this.y).redSqr(),i=this.x.redSqr(),o=this.y.redSqr();if(this.curve.twisted){var a=(c=this.curve._mulA(i)).redAdd(o);if(this.zOne)e=n.redSub(i).redSub(o).redMul(a.redSub(this.curve.two)),t=a.redMul(c.redSub(o)),r=a.redSqr().redSub(a).redSub(a);else{var s=this.z.redSqr(),f=a.redSub(s).redISub(s);e=n.redSub(i).redISub(o).redMul(f),t=a.redMul(c.redSub(o)),r=a.redMul(f)}}else{var c=i.redAdd(o);s=this.curve._mulC(this.z).redSqr(),f=c.redSub(s).redSub(s);e=this.curve._mulC(n.redISub(c)).redMul(f),t=this.curve._mulC(c).redMul(i.redISub(o)),r=c.redMul(f)}return this.curve.point(e,t,r)},c.prototype.dbl=function(){return this.isInfinity()?this:this.curve.extended?this._extDbl():this._projDbl()},c.prototype._extAdd=function(e){var t=this.y.redSub(this.x).redMul(e.y.redSub(e.x)),r=this.y.redAdd(this.x).redMul(e.y.redAdd(e.x)),n=this.t.redMul(this.curve.dd).redMul(e.t),i=this.z.redMul(e.z.redAdd(e.z)),o=r.redSub(t),a=i.redSub(n),s=i.redAdd(n),f=r.redAdd(t),c=o.redMul(a),u=s.redMul(f),h=o.redMul(f),d=a.redMul(s);return this.curve.point(c,u,d,h)},c.prototype._projAdd=function(e){var t,r,n=this.z.redMul(e.z),i=n.redSqr(),o=this.x.redMul(e.x),a=this.y.redMul(e.y),s=this.curve.d.redMul(o).redMul(a),f=i.redSub(s),c=i.redAdd(s),u=this.x.redAdd(this.y).redMul(e.x.redAdd(e.y)).redISub(o).redISub(a),h=n.redMul(f).redMul(u);return this.curve.twisted?(t=n.redMul(c).redMul(a.redSub(this.curve._mulA(o))),r=f.redMul(c)):(t=n.redMul(c).redMul(a.redSub(o)),r=this.curve._mulC(f).redMul(c)),this.curve.point(h,t,r)},c.prototype.add=function(e){return this.isInfinity()?e:e.isInfinity()?this:this.curve.extended?this._extAdd(e):this._projAdd(e)},c.prototype.mul=function(e){return this._hasDoubles(e)?this.curve._fixedNafMul(this,e):this.curve._wnafMul(this,e)},c.prototype.mulAdd=function(e,t,r){return this.curve._wnafMulAdd(1,[this,t],[e,r],2,!1)},c.prototype.jmulAdd=function(e,t,r){return this.curve._wnafMulAdd(1,[this,t],[e,r],2,!0)},c.prototype.normalize=function(){if(this.zOne)return this;var e=this.z.redInvm();return this.x=this.x.redMul(e),this.y=this.y.redMul(e),this.t&&(this.t=this.t.redMul(e)),this.z=this.curve.one,this.zOne=!0,this},c.prototype.neg=function(){return this.curve.point(this.x.redNeg(),this.y,this.z,this.t&&this.t.redNeg())},c.prototype.getX=function(){return this.normalize(),this.x.fromRed()},c.prototype.getY=function(){return this.normalize(),this.y.fromRed()},c.prototype.eq=function(e){return this===e||0===this.getX().cmp(e.getX())&&0===this.getY().cmp(e.getY())},c.prototype.eqXToP=function(e){var t=e.toRed(this.curve.red).redMul(this.z);if(0===this.x.cmp(t))return!0;for(var r=e.clone(),n=this.curve.redN.redMul(this.z);;){if(r.iadd(this.curve.n),r.cmp(this.curve.p)>=0)return!1;if(t.redIAdd(n),0===this.x.cmp(t))return!0}},c.prototype.toP=c.prototype.normalize,c.prototype.mixedAdd=c.prototype.add},function(e,t,r){"use strict";t.sha1=r(152),t.sha224=r(153),t.sha256=r(72),t.sha384=r(154),t.sha512=r(73)},function(e,t,r){"use strict";var n=r(8),i=r(18),o=r(71),a=n.rotl32,s=n.sum32,f=n.sum32_5,c=o.ft_1,u=i.BlockHash,h=[1518500249,1859775393,2400959708,3395469782];function d(){if(!(this instanceof d))return new d;u.call(this),this.h=[1732584193,4023233417,2562383102,271733878,3285377520],this.W=new Array(80)}n.inherits(d,u),e.exports=d,d.blockSize=512,d.outSize=160,d.hmacStrength=80,d.padLength=64,d.prototype._update=function(e,t){for(var r=this.W,n=0;n<16;n++)r[n]=e[t+n];for(;n<r.length;n++)r[n]=a(r[n-3]^r[n-8]^r[n-14]^r[n-16],1);var i=this.h[0],o=this.h[1],u=this.h[2],d=this.h[3],l=this.h[4];for(n=0;n<r.length;n++){var p=~~(n/20),b=f(a(i,5),c(p,o,u,d),l,r[n],h[p]);l=d,d=u,u=a(o,30),o=i,i=b}this.h[0]=s(this.h[0],i),this.h[1]=s(this.h[1],o),this.h[2]=s(this.h[2],u),this.h[3]=s(this.h[3],d),this.h[4]=s(this.h[4],l)},d.prototype._digest=function(e){return"hex"===e?n.toHex32(this.h,"big"):n.split32(this.h,"big")}},function(e,t,r){"use strict";var n=r(8),i=r(72);function o(){if(!(this instanceof o))return new o;i.call(this),this.h=[3238371032,914150663,812702999,4144912697,4290775857,1750603025,1694076839,3204075428]}n.inherits(o,i),e.exports=o,o.blockSize=512,o.outSize=224,o.hmacStrength=192,o.padLength=64,o.prototype._digest=function(e){return"hex"===e?n.toHex32(this.h.slice(0,7),"big"):n.split32(this.h.slice(0,7),"big")}},function(e,t,r){"use strict";var n=r(8),i=r(73);function o(){if(!(this instanceof o))return new o;i.call(this),this.h=[3418070365,3238371032,1654270250,914150663,2438529370,812702999,355462360,4144912697,1731405415,4290775857,2394180231,1750603025,3675008525,1694076839,1203062813,3204075428]}n.inherits(o,i),e.exports=o,o.blockSize=1024,o.outSize=384,o.hmacStrength=192,o.padLength=128,o.prototype._digest=function(e){return"hex"===e?n.toHex32(this.h.slice(0,12),"big"):n.split32(this.h.slice(0,12),"big")}},function(e,t,r){"use strict";var n=r(8),i=r(18),o=n.rotl32,a=n.sum32,s=n.sum32_3,f=n.sum32_4,c=i.BlockHash;function u(){if(!(this instanceof u))return new u;c.call(this),this.h=[1732584193,4023233417,2562383102,271733878,3285377520],this.endian="little"}function h(e,t,r,n){return e<=15?t^r^n:e<=31?t&r|~t&n:e<=47?(t|~r)^n:e<=63?t&n|r&~n:t^(r|~n)}function d(e){return e<=15?0:e<=31?1518500249:e<=47?1859775393:e<=63?2400959708:2840853838}function l(e){return e<=15?1352829926:e<=31?1548603684:e<=47?1836072691:e<=63?2053994217:0}n.inherits(u,c),t.ripemd160=u,u.blockSize=512,u.outSize=160,u.hmacStrength=192,u.padLength=64,u.prototype._update=function(e,t){for(var r=this.h[0],n=this.h[1],i=this.h[2],c=this.h[3],u=this.h[4],v=r,g=n,w=i,_=c,S=u,E=0;E<80;E++){var M=a(o(f(r,h(E,n,i,c),e[p[E]+t],d(E)),y[E]),u);r=u,u=c,c=o(i,10),i=n,n=M,M=a(o(f(v,h(79-E,g,w,_),e[b[E]+t],l(E)),m[E]),S),v=S,S=_,_=o(w,10),w=g,g=M}M=s(this.h[1],i,_),this.h[1]=s(this.h[2],c,S),this.h[2]=s(this.h[3],u,v),this.h[3]=s(this.h[4],r,g),this.h[4]=s(this.h[0],n,w),this.h[0]=M},u.prototype._digest=function(e){return"hex"===e?n.toHex32(this.h,"little"):n.split32(this.h,"little")};var p=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,7,4,13,1,10,6,15,3,12,0,9,5,2,14,11,8,3,10,14,4,9,15,8,1,2,7,0,6,13,11,5,12,1,9,11,10,0,8,12,4,13,3,7,15,14,5,6,2,4,0,5,9,7,12,2,10,14,1,3,8,11,6,15,13],b=[5,14,7,0,9,2,11,4,13,6,15,8,1,10,3,12,6,11,3,7,0,13,5,10,14,15,8,12,4,9,1,2,15,5,1,3,7,14,6,9,11,8,12,2,10,0,4,13,8,6,4,1,3,11,15,0,5,12,2,13,9,7,10,14,12,15,10,4,1,5,8,7,6,2,13,14,0,3,9,11],y=[11,14,15,12,5,8,7,9,11,13,14,15,6,7,9,8,7,6,8,13,11,9,7,15,7,12,15,9,11,7,13,12,11,13,6,7,14,9,13,15,14,8,13,6,5,12,7,5,11,12,14,15,14,15,9,8,9,14,5,6,8,6,5,12,9,15,5,11,6,8,13,12,5,12,13,14,11,8,5,6],m=[8,9,9,11,13,15,15,5,7,7,8,11,14,14,12,6,9,13,15,7,12,8,9,11,7,7,12,7,6,15,13,11,9,7,15,11,8,6,6,14,12,13,5,14,13,13,7,5,15,5,8,11,14,14,6,14,6,9,12,9,12,5,15,8,8,5,12,9,12,5,14,6,8,13,6,5,15,13,11,11]},function(e,t,r){"use strict";var n=r(8),i=r(6);function o(e,t,r){if(!(this instanceof o))return new o(e,t,r);this.Hash=e,this.blockSize=e.blockSize/8,this.outSize=e.outSize/8,this.inner=null,this.outer=null,this._init(n.toArray(t,r))}e.exports=o,o.prototype._init=function(e){e.length>this.blockSize&&(e=(new this.Hash).update(e).digest()),i(e.length<=this.blockSize);for(var t=e.length;t<this.blockSize;t++)e.push(0);for(t=0;t<e.length;t++)e[t]^=54;for(this.inner=(new this.Hash).update(e),t=0;t<e.length;t++)e[t]^=106;this.outer=(new this.Hash).update(e)},o.prototype.update=function(e,t){return this.inner.update(e,t),this},o.prototype.digest=function(e){return this.outer.update(this.inner.digest()),this.outer.digest(e)}},function(e,t){e.exports={doubles:{step:4,points:[["e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a","f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821"],["8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508","11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf"],["175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739","d3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695"],["363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640","4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9"],["8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c","4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36"],["723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda","96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f"],["eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa","5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999"],["100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0","cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09"],["e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d","9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d"],["feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d","e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088"],["da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1","9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d"],["53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0","5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8"],["8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047","10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a"],["385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862","283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453"],["6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7","7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160"],["3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd","56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0"],["85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83","7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6"],["948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a","53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589"],["6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8","bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17"],["e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d","4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda"],["e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725","7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd"],["213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754","4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2"],["4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c","17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6"],["fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6","6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f"],["76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39","c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01"],["c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891","893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3"],["d895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b","febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f"],["b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03","2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7"],["e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d","eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78"],["a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070","7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1"],["90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4","e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150"],["8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da","662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82"],["e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11","1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc"],["8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e","efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b"],["e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41","2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51"],["b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef","67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45"],["d68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8","db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120"],["324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d","648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84"],["4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96","35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d"],["9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd","ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d"],["6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5","9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8"],["a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266","40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8"],["7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71","34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac"],["928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac","c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f"],["85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751","1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962"],["ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e","493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907"],["827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241","c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec"],["eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3","be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d"],["e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f","4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414"],["1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19","aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd"],["146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be","b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0"],["fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9","6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811"],["da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2","8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1"],["a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13","7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c"],["174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c","ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73"],["959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba","2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd"],["d2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151","e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405"],["64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073","d99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589"],["8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458","38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e"],["13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b","69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27"],["bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366","d3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1"],["8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa","40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482"],["8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0","620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945"],["dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787","7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573"],["f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e","ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82"]]},naf:{wnd:7,points:[["f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9","388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672"],["2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4","d8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6"],["5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc","6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da"],["acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe","cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37"],["774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb","d984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b"],["f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8","ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81"],["d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e","581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58"],["defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34","4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77"],["2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c","85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a"],["352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5","321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c"],["2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f","2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67"],["9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714","73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402"],["daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729","a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55"],["c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db","2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482"],["6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4","e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82"],["1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5","b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396"],["605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479","2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49"],["62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d","80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf"],["80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f","1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a"],["7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb","d0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7"],["d528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9","eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933"],["49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963","758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a"],["77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74","958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6"],["f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530","e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37"],["463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b","5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e"],["f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247","cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6"],["caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1","cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476"],["2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120","4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40"],["7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435","91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61"],["754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18","673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683"],["e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8","59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5"],["186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb","3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b"],["df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f","55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417"],["5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143","efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868"],["290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba","e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a"],["af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45","f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6"],["766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a","744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996"],["59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e","c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e"],["f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8","e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d"],["7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c","30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2"],["948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519","e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e"],["7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab","100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437"],["3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca","ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311"],["d3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf","8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4"],["1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610","68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575"],["733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4","f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d"],["15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c","d56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d"],["a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940","edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629"],["e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980","a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06"],["311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3","66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374"],["34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf","9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee"],["f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63","4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1"],["d7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448","fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b"],["32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf","5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661"],["7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5","8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6"],["ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6","8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e"],["16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5","5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d"],["eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99","f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc"],["78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51","f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4"],["494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5","42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c"],["a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5","204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b"],["c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997","4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913"],["841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881","73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154"],["5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5","39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865"],["36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66","d2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc"],["336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726","ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224"],["8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede","6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e"],["1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94","60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6"],["85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31","3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511"],["29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51","b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b"],["a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252","ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2"],["4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5","cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c"],["d24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b","6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3"],["ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4","322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d"],["af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f","6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700"],["e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889","2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4"],["591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246","b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196"],["11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984","998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4"],["3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a","b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257"],["cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030","bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13"],["c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197","6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096"],["c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593","c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38"],["a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef","21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f"],["347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38","60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448"],["da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a","49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a"],["c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111","5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4"],["4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502","7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437"],["3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea","be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7"],["cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26","8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d"],["b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986","39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a"],["d4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e","62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54"],["48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4","25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77"],["dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda","ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517"],["6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859","cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10"],["e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f","f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125"],["eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c","6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e"],["13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942","fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1"],["ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a","1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2"],["b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80","5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423"],["ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d","438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8"],["8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1","cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758"],["52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63","c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375"],["e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352","6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d"],["7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193","ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec"],["5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00","9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0"],["32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58","ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c"],["e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7","d3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4"],["8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8","c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f"],["4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e","67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649"],["3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d","cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826"],["674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b","299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5"],["d32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f","f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87"],["30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6","462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b"],["be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297","62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc"],["93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a","7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c"],["b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c","ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f"],["d5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52","4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a"],["d3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb","bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46"],["463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065","bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f"],["7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917","603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03"],["74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9","cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08"],["30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3","553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8"],["9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57","712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373"],["176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66","ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3"],["75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8","9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8"],["809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721","9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1"],["1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180","4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9"]]}}},function(e,t,r){"use strict";var n=r(3),i=r(159),o=r(7),a=r(42),s=r(39),f=o.assert,c=r(160),u=r(161);function h(e){if(!(this instanceof h))return new h(e);"string"==typeof e&&(f(a.hasOwnProperty(e),"Unknown curve "+e),e=a[e]),e instanceof a.PresetCurve&&(e={curve:e}),this.curve=e.curve.curve,this.n=this.curve.n,this.nh=this.n.ushrn(1),this.g=this.curve.g,this.g=e.curve.g,this.g.precompute(e.curve.n.bitLength()+1),this.hash=e.hash||e.curve.hash}e.exports=h,h.prototype.keyPair=function(e){return new c(this,e)},h.prototype.keyFromPrivate=function(e,t){return c.fromPrivate(this,e,t)},h.prototype.keyFromPublic=function(e,t){return c.fromPublic(this,e,t)},h.prototype.genKeyPair=function(e){e||(e={});for(var t=new i({hash:this.hash,pers:e.pers,persEnc:e.persEnc||"utf8",entropy:e.entropy||s(this.hash.hmacStrength),entropyEnc:e.entropy&&e.entropyEnc||"utf8",nonce:this.n.toArray()}),r=this.n.byteLength(),o=this.n.sub(new n(2));;){var a=new n(t.generate(r));if(!(a.cmp(o)>0))return a.iaddn(1),this.keyFromPrivate(a)}},h.prototype._truncateToN=function(e,t){var r=8*e.byteLength()-this.n.bitLength();return r>0&&(e=e.ushrn(r)),!t&&e.cmp(this.n)>=0?e.sub(this.n):e},h.prototype.sign=function(e,t,r,o){"object"==typeof r&&(o=r,r=null),o||(o={}),t=this.keyFromPrivate(t,r),e=this._truncateToN(new n(e,16));for(var a=this.n.byteLength(),s=t.getPrivate().toArray("be",a),f=e.toArray("be",a),c=new i({hash:this.hash,entropy:s,nonce:f,pers:o.pers,persEnc:o.persEnc||"utf8"}),h=this.n.sub(new n(1)),d=0;;d++){var l=o.k?o.k(d):new n(c.generate(this.n.byteLength()));if(!((l=this._truncateToN(l,!0)).cmpn(1)<=0||l.cmp(h)>=0)){var p=this.g.mul(l);if(!p.isInfinity()){var b=p.getX(),y=b.umod(this.n);if(0!==y.cmpn(0)){var m=l.invm(this.n).mul(y.mul(t.getPrivate()).iadd(e));if(0!==(m=m.umod(this.n)).cmpn(0)){var v=(p.getY().isOdd()?1:0)|(0!==b.cmp(y)?2:0);return o.canonical&&m.cmp(this.nh)>0&&(m=this.n.sub(m),v^=1),new u({r:y,s:m,recoveryParam:v})}}}}}},h.prototype.verify=function(e,t,r,i){e=this._truncateToN(new n(e,16)),r=this.keyFromPublic(r,i);var o=(t=new u(t,"hex")).r,a=t.s;if(o.cmpn(1)<0||o.cmp(this.n)>=0)return!1;if(a.cmpn(1)<0||a.cmp(this.n)>=0)return!1;var s,f=a.invm(this.n),c=f.mul(e).umod(this.n),h=f.mul(o).umod(this.n);return this.curve._maxwellTrick?!(s=this.g.jmulAdd(c,r.getPublic(),h)).isInfinity()&&s.eqXToP(o):!(s=this.g.mulAdd(c,r.getPublic(),h)).isInfinity()&&0===s.getX().umod(this.n).cmp(o)},h.prototype.recoverPubKey=function(e,t,r,i){f((3&r)===r,"The recovery param is more than two bits"),t=new u(t,i);var o=this.n,a=new n(e),s=t.r,c=t.s,h=1&r,d=r>>1;if(s.cmp(this.curve.p.umod(this.curve.n))>=0&&d)throw new Error("Unable to find sencond key candinate");s=d?this.curve.pointFromX(s.add(this.curve.n),h):this.curve.pointFromX(s,h);var l=t.r.invm(o),p=o.sub(a).mul(l).umod(o),b=c.mul(l).umod(o);return this.g.mulAdd(p,s,b)},h.prototype.getKeyRecoveryParam=function(e,t,r,n){if(null!==(t=new u(t,n)).recoveryParam)return t.recoveryParam;for(var i=0;i<4;i++){var o;try{o=this.recoverPubKey(e,t,i)}catch(e){continue}if(o.eq(r))return i}throw new Error("Unable to find valid recovery factor")}},function(e,t,r){"use strict";var n=r(43),i=r(69),o=r(6);function a(e){if(!(this instanceof a))return new a(e);this.hash=e.hash,this.predResist=!!e.predResist,this.outLen=this.hash.outSize,this.minEntropy=e.minEntropy||this.hash.hmacStrength,this._reseed=null,this.reseedInterval=null,this.K=null,this.V=null;var t=i.toArray(e.entropy,e.entropyEnc||"hex"),r=i.toArray(e.nonce,e.nonceEnc||"hex"),n=i.toArray(e.pers,e.persEnc||"hex");o(t.length>=this.minEntropy/8,"Not enough entropy. Minimum is: "+this.minEntropy+" bits"),this._init(t,r,n)}e.exports=a,a.prototype._init=function(e,t,r){var n=e.concat(t).concat(r);this.K=new Array(this.outLen/8),this.V=new Array(this.outLen/8);for(var i=0;i<this.V.length;i++)this.K[i]=0,this.V[i]=1;this._update(n),this._reseed=1,this.reseedInterval=281474976710656},a.prototype._hmac=function(){return new n.hmac(this.hash,this.K)},a.prototype._update=function(e){var t=this._hmac().update(this.V).update([0]);e&&(t=t.update(e)),this.K=t.digest(),this.V=this._hmac().update(this.V).digest(),e&&(this.K=this._hmac().update(this.V).update([1]).update(e).digest(),this.V=this._hmac().update(this.V).digest())},a.prototype.reseed=function(e,t,r,n){"string"!=typeof t&&(n=r,r=t,t=null),e=i.toArray(e,t),r=i.toArray(r,n),o(e.length>=this.minEntropy/8,"Not enough entropy. Minimum is: "+this.minEntropy+" bits"),this._update(e.concat(r||[])),this._reseed=1},a.prototype.generate=function(e,t,r,n){if(this._reseed>this.reseedInterval)throw new Error("Reseed is required");"string"!=typeof t&&(n=r,r=t,t=null),r&&(r=i.toArray(r,n||"hex"),this._update(r));for(var o=[];o.length<e;)this.V=this._hmac().update(this.V).digest(),o=o.concat(this.V);var a=o.slice(0,e);return this._update(r),this._reseed++,i.encode(a,t)}},function(e,t,r){"use strict";var n=r(3),i=r(7).assert;function o(e,t){this.ec=e,this.priv=null,this.pub=null,t.priv&&this._importPrivate(t.priv,t.privEnc),t.pub&&this._importPublic(t.pub,t.pubEnc)}e.exports=o,o.fromPublic=function(e,t,r){return t instanceof o?t:new o(e,{pub:t,pubEnc:r})},o.fromPrivate=function(e,t,r){return t instanceof o?t:new o(e,{priv:t,privEnc:r})},o.prototype.validate=function(){var e=this.getPublic();return e.isInfinity()?{result:!1,reason:"Invalid public key"}:e.validate()?e.mul(this.ec.curve.n).isInfinity()?{result:!0,reason:null}:{result:!1,reason:"Public key * N != O"}:{result:!1,reason:"Public key is not a point"}},o.prototype.getPublic=function(e,t){return"string"==typeof e&&(t=e,e=null),this.pub||(this.pub=this.ec.g.mul(this.priv)),t?this.pub.encode(t,e):this.pub},o.prototype.getPrivate=function(e){return"hex"===e?this.priv.toString(16,2):this.priv},o.prototype._importPrivate=function(e,t){this.priv=new n(e,t||16),this.priv=this.priv.umod(this.ec.curve.n)},o.prototype._importPublic=function(e,t){if(e.x||e.y)return"mont"===this.ec.curve.type?i(e.x,"Need x coordinate"):"short"!==this.ec.curve.type&&"edwards"!==this.ec.curve.type||i(e.x&&e.y,"Need both x and y coordinate"),void(this.pub=this.ec.curve.point(e.x,e.y));this.pub=this.ec.curve.decodePoint(e,t)},o.prototype.derive=function(e){return e.mul(this.priv).getX()},o.prototype.sign=function(e,t,r){return this.ec.sign(e,this,t,r)},o.prototype.verify=function(e,t){return this.ec.verify(e,t,this)},o.prototype.inspect=function(){return"<Key priv: "+(this.priv&&this.priv.toString(16,2))+" pub: "+(this.pub&&this.pub.inspect())+" >"}},function(e,t,r){"use strict";var n=r(3),i=r(7),o=i.assert;function a(e,t){if(e instanceof a)return e;this._importDER(e,t)||(o(e.r&&e.s,"Signature without r or s"),this.r=new n(e.r,16),this.s=new n(e.s,16),void 0===e.recoveryParam?this.recoveryParam=null:this.recoveryParam=e.recoveryParam)}function s(){this.place=0}function f(e,t){var r=e[t.place++];if(!(128&r))return r;for(var n=15&r,i=0,o=0,a=t.place;o<n;o++,a++)i<<=8,i|=e[a];return t.place=a,i}function c(e){for(var t=0,r=e.length-1;!e[t]&&!(128&e[t+1])&&t<r;)t++;return 0===t?e:e.slice(t)}function u(e,t){if(t<128)e.push(t);else{var r=1+(Math.log(t)/Math.LN2>>>3);for(e.push(128|r);--r;)e.push(t>>>(r<<3)&255);e.push(t)}}e.exports=a,a.prototype._importDER=function(e,t){e=i.toArray(e,t);var r=new s;if(48!==e[r.place++])return!1;if(f(e,r)+r.place!==e.length)return!1;if(2!==e[r.place++])return!1;var o=f(e,r),a=e.slice(r.place,o+r.place);if(r.place+=o,2!==e[r.place++])return!1;var c=f(e,r);if(e.length!==c+r.place)return!1;var u=e.slice(r.place,c+r.place);return 0===a[0]&&128&a[1]&&(a=a.slice(1)),0===u[0]&&128&u[1]&&(u=u.slice(1)),this.r=new n(a),this.s=new n(u),this.recoveryParam=null,!0},a.prototype.toDER=function(e){var t=this.r.toArray(),r=this.s.toArray();for(128&t[0]&&(t=[0].concat(t)),128&r[0]&&(r=[0].concat(r)),t=c(t),r=c(r);!(r[0]||128&r[1]);)r=r.slice(1);var n=[2];u(n,t.length),(n=n.concat(t)).push(2),u(n,r.length);var o=n.concat(r),a=[48];return u(a,o.length),a=a.concat(o),i.encode(a,e)}},function(e,t,r){"use strict";var n=r(43),i=r(42),o=r(7),a=o.assert,s=o.parseBytes,f=r(163),c=r(164);function u(e){if(a("ed25519"===e,"only tested with ed25519 so far"),!(this instanceof u))return new u(e);e=i[e].curve;this.curve=e,this.g=e.g,this.g.precompute(e.n.bitLength()+1),this.pointClass=e.point().constructor,this.encodingLength=Math.ceil(e.n.bitLength()/8),this.hash=n.sha512}e.exports=u,u.prototype.sign=function(e,t){e=s(e);var r=this.keyFromSecret(t),n=this.hashInt(r.messagePrefix(),e),i=this.g.mul(n),o=this.encodePoint(i),a=this.hashInt(o,r.pubBytes(),e).mul(r.priv()),f=n.add(a).umod(this.curve.n);return this.makeSignature({R:i,S:f,Rencoded:o})},u.prototype.verify=function(e,t,r){e=s(e),t=this.makeSignature(t);var n=this.keyFromPublic(r),i=this.hashInt(t.Rencoded(),n.pubBytes(),e),o=this.g.mul(t.S());return t.R().add(n.pub().mul(i)).eq(o)},u.prototype.hashInt=function(){for(var e=this.hash(),t=0;t<arguments.length;t++)e.update(arguments[t]);return o.intFromLE(e.digest()).umod(this.curve.n)},u.prototype.keyFromPublic=function(e){return f.fromPublic(this,e)},u.prototype.keyFromSecret=function(e){return f.fromSecret(this,e)},u.prototype.makeSignature=function(e){return e instanceof c?e:new c(this,e)},u.prototype.encodePoint=function(e){var t=e.getY().toArray("le",this.encodingLength);return t[this.encodingLength-1]|=e.getX().isOdd()?128:0,t},u.prototype.decodePoint=function(e){var t=(e=o.parseBytes(e)).length-1,r=e.slice(0,t).concat(-129&e[t]),n=0!=(128&e[t]),i=o.intFromLE(r);return this.curve.pointFromY(i,n)},u.prototype.encodeInt=function(e){return e.toArray("le",this.encodingLength)},u.prototype.decodeInt=function(e){return o.intFromLE(e)},u.prototype.isPoint=function(e){return e instanceof this.pointClass}},function(e,t,r){"use strict";var n=r(7),i=n.assert,o=n.parseBytes,a=n.cachedProperty;function s(e,t){this.eddsa=e,this._secret=o(t.secret),e.isPoint(t.pub)?this._pub=t.pub:this._pubBytes=o(t.pub)}s.fromPublic=function(e,t){return t instanceof s?t:new s(e,{pub:t})},s.fromSecret=function(e,t){return t instanceof s?t:new s(e,{secret:t})},s.prototype.secret=function(){return this._secret},a(s,"pubBytes",(function(){return this.eddsa.encodePoint(this.pub())})),a(s,"pub",(function(){return this._pubBytes?this.eddsa.decodePoint(this._pubBytes):this.eddsa.g.mul(this.priv())})),a(s,"privBytes",(function(){var e=this.eddsa,t=this.hash(),r=e.encodingLength-1,n=t.slice(0,e.encodingLength);return n[0]&=248,n[r]&=127,n[r]|=64,n})),a(s,"priv",(function(){return this.eddsa.decodeInt(this.privBytes())})),a(s,"hash",(function(){return this.eddsa.hash().update(this.secret()).digest()})),a(s,"messagePrefix",(function(){return this.hash().slice(this.eddsa.encodingLength)})),s.prototype.sign=function(e){return i(this._secret,"KeyPair can only verify"),this.eddsa.sign(e,this)},s.prototype.verify=function(e,t){return this.eddsa.verify(e,t,this)},s.prototype.getSecret=function(e){return i(this._secret,"KeyPair is public only"),n.encode(this.secret(),e)},s.prototype.getPublic=function(e){return n.encode(this.pubBytes(),e)},e.exports=s},function(e,t,r){"use strict";var n=r(3),i=r(7),o=i.assert,a=i.cachedProperty,s=i.parseBytes;function f(e,t){this.eddsa=e,"object"!=typeof t&&(t=s(t)),Array.isArray(t)&&(t={R:t.slice(0,e.encodingLength),S:t.slice(e.encodingLength)}),o(t.R&&t.S,"Signature without R or S"),e.isPoint(t.R)&&(this._R=t.R),t.S instanceof n&&(this._S=t.S),this._Rencoded=Array.isArray(t.R)?t.R:t.Rencoded,this._Sencoded=Array.isArray(t.S)?t.S:t.Sencoded}a(f,"S",(function(){return this.eddsa.decodeInt(this.Sencoded())})),a(f,"R",(function(){return this.eddsa.decodePoint(this.Rencoded())})),a(f,"Rencoded",(function(){return this.eddsa.encodePoint(this.R())})),a(f,"Sencoded",(function(){return this.eddsa.encodeInt(this.S())})),f.prototype.toBytes=function(){return this.Rencoded().concat(this.Sencoded())},f.prototype.toHex=function(){return i.encode(this.toBytes(),"hex").toUpperCase()},e.exports=f},function(e,t,r){"use strict";var n=r(19);t.certificate=r(175);var i=n.define("RSAPrivateKey",(function(){this.seq().obj(this.key("version").int(),this.key("modulus").int(),this.key("publicExponent").int(),this.key("privateExponent").int(),this.key("prime1").int(),this.key("prime2").int(),this.key("exponent1").int(),this.key("exponent2").int(),this.key("coefficient").int())}));t.RSAPrivateKey=i;var o=n.define("RSAPublicKey",(function(){this.seq().obj(this.key("modulus").int(),this.key("publicExponent").int())}));t.RSAPublicKey=o;var a=n.define("SubjectPublicKeyInfo",(function(){this.seq().obj(this.key("algorithm").use(s),this.key("subjectPublicKey").bitstr())}));t.PublicKey=a;var s=n.define("AlgorithmIdentifier",(function(){this.seq().obj(this.key("algorithm").objid(),this.key("none").null_().optional(),this.key("curve").objid().optional(),this.key("params").seq().obj(this.key("p").int(),this.key("q").int(),this.key("g").int()).optional())})),f=n.define("PrivateKeyInfo",(function(){this.seq().obj(this.key("version").int(),this.key("algorithm").use(s),this.key("subjectPrivateKey").octstr())}));t.PrivateKey=f;var c=n.define("EncryptedPrivateKeyInfo",(function(){this.seq().obj(this.key("algorithm").seq().obj(this.key("id").objid(),this.key("decrypt").seq().obj(this.key("kde").seq().obj(this.key("id").objid(),this.key("kdeparams").seq().obj(this.key("salt").octstr(),this.key("iters").int())),this.key("cipher").seq().obj(this.key("algo").objid(),this.key("iv").octstr()))),this.key("subjectPrivateKey").octstr())}));t.EncryptedPrivateKey=c;var u=n.define("DSAPrivateKey",(function(){this.seq().obj(this.key("version").int(),this.key("p").int(),this.key("q").int(),this.key("g").int(),this.key("pub_key").int(),this.key("priv_key").int())}));t.DSAPrivateKey=u,t.DSAparam=n.define("DSAparam",(function(){this.int()}));var h=n.define("ECPrivateKey",(function(){this.seq().obj(this.key("version").int(),this.key("privateKey").octstr(),this.key("parameters").optional().explicit(0).use(d),this.key("publicKey").optional().explicit(1).bitstr())}));t.ECPrivateKey=h;var d=n.define("ECParameters",(function(){this.choice({namedCurve:this.objid()})}));t.signature=n.define("signature",(function(){this.seq().obj(this.key("r").int(),this.key("s").int())}))},function(e,t,r){var n=r(19),i=r(1);function o(e,t){this.name=e,this.body=t,this.decoders={},this.encoders={}}t.define=function(e,t){return new o(e,t)},o.prototype._createNamed=function(e){var t;try{t=r(167).runInThisContext("(function "+this.name+"(entity) {\n  this._initNamed(entity);\n})")}catch(e){t=function(e){this._initNamed(e)}}return i(t,e),t.prototype._initNamed=function(t){e.call(this,t)},new t(this)},o.prototype._getDecoder=function(e){return e=e||"der",this.decoders.hasOwnProperty(e)||(this.decoders[e]=this._createNamed(n.decoders[e])),this.decoders[e]},o.prototype.decode=function(e,t,r){return this._getDecoder(t).decode(e,r)},o.prototype._getEncoder=function(e){return e=e||"der",this.encoders.hasOwnProperty(e)||(this.encoders[e]=this._createNamed(n.encoders[e])),this.encoders[e]},o.prototype.encode=function(e,t,r){return this._getEncoder(t).encode(e,r)}},function(module,exports){var indexOf=function(e,t){if(e.indexOf)return e.indexOf(t);for(var r=0;r<e.length;r++)if(e[r]===t)return r;return-1},Object_keys=function(e){if(Object.keys)return Object.keys(e);var t=[];for(var r in e)t.push(r);return t},forEach=function(e,t){if(e.forEach)return e.forEach(t);for(var r=0;r<e.length;r++)t(e[r],r,e)},defineProp=function(){try{return Object.defineProperty({},"_",{}),function(e,t,r){Object.defineProperty(e,t,{writable:!0,enumerable:!1,configurable:!0,value:r})}}catch(e){return function(e,t,r){e[t]=r}}}(),globals=["Array","Boolean","Date","Error","EvalError","Function","Infinity","JSON","Math","NaN","Number","Object","RangeError","ReferenceError","RegExp","String","SyntaxError","TypeError","URIError","decodeURI","decodeURIComponent","encodeURI","encodeURIComponent","escape","eval","isFinite","isNaN","parseFloat","parseInt","undefined","unescape"];function Context(){}Context.prototype={};var Script=exports.Script=function(e){if(!(this instanceof Script))return new Script(e);this.code=e};Script.prototype.runInContext=function(e){if(!(e instanceof Context))throw new TypeError("needs a 'context' argument.");var t=document.createElement("iframe");t.style||(t.style={}),t.style.display="none",document.body.appendChild(t);var r=t.contentWindow,n=r.eval,i=r.execScript;!n&&i&&(i.call(r,"null"),n=r.eval),forEach(Object_keys(e),(function(t){r[t]=e[t]})),forEach(globals,(function(t){e[t]&&(r[t]=e[t])}));var o=Object_keys(r),a=n.call(r,this.code);return forEach(Object_keys(r),(function(t){(t in e||-1===indexOf(o,t))&&(e[t]=r[t])})),forEach(globals,(function(t){t in e||defineProp(e,t,r[t])})),document.body.removeChild(t),a},Script.prototype.runInThisContext=function(){return eval(this.code)},Script.prototype.runInNewContext=function(e){var t=Script.createContext(e),r=this.runInContext(t);return e&&forEach(Object_keys(t),(function(r){e[r]=t[r]})),r},forEach(Object_keys(Script.prototype),(function(e){exports[e]=Script[e]=function(t){var r=Script(t);return r[e].apply(r,[].slice.call(arguments,1))}})),exports.isContext=function(e){return e instanceof Context},exports.createScript=function(e){return exports.Script(e)},exports.createContext=Script.createContext=function(e){var t=new Context;return"object"==typeof e&&forEach(Object_keys(e),(function(r){t[r]=e[r]})),t}},function(e,t,r){var n=r(1);function i(e){this._reporterState={obj:null,path:[],options:e||{},errors:[]}}function o(e,t){this.path=e,this.rethrow(t)}t.Reporter=i,i.prototype.isError=function(e){return e instanceof o},i.prototype.save=function(){var e=this._reporterState;return{obj:e.obj,pathLen:e.path.length}},i.prototype.restore=function(e){var t=this._reporterState;t.obj=e.obj,t.path=t.path.slice(0,e.pathLen)},i.prototype.enterKey=function(e){return this._reporterState.path.push(e)},i.prototype.exitKey=function(e){var t=this._reporterState;t.path=t.path.slice(0,e-1)},i.prototype.leaveKey=function(e,t,r){var n=this._reporterState;this.exitKey(e),null!==n.obj&&(n.obj[t]=r)},i.prototype.path=function(){return this._reporterState.path.join("/")},i.prototype.enterObject=function(){var e=this._reporterState,t=e.obj;return e.obj={},t},i.prototype.leaveObject=function(e){var t=this._reporterState,r=t.obj;return t.obj=e,r},i.prototype.error=function(e){var t,r=this._reporterState,n=e instanceof o;if(t=n?e:new o(r.path.map((function(e){return"["+JSON.stringify(e)+"]"})).join(""),e.message||e,e.stack),!r.options.partial)throw t;return n||r.errors.push(t),t},i.prototype.wrapResult=function(e){var t=this._reporterState;return t.options.partial?{result:this.isError(e)?null:e,errors:t.errors}:e},n(o,Error),o.prototype.rethrow=function(e){if(this.message=e+" at: "+(this.path||"(shallow)"),Error.captureStackTrace&&Error.captureStackTrace(this,o),!this.stack)try{throw new Error(this.message)}catch(e){this.stack=e.stack}return this}},function(e,t,r){var n=r(20).Reporter,i=r(20).EncoderBuffer,o=r(20).DecoderBuffer,a=r(6),s=["seq","seqof","set","setof","objid","bool","gentime","utctime","null_","enum","int","objDesc","bitstr","bmpstr","charstr","genstr","graphstr","ia5str","iso646str","numstr","octstr","printstr","t61str","unistr","utf8str","videostr"],f=["key","obj","use","optional","explicit","implicit","def","choice","any","contains"].concat(s);function c(e,t){var r={};this._baseState=r,r.enc=e,r.parent=t||null,r.children=null,r.tag=null,r.args=null,r.reverseArgs=null,r.choice=null,r.optional=!1,r.any=!1,r.obj=!1,r.use=null,r.useDecoder=null,r.key=null,r.default=null,r.explicit=null,r.implicit=null,r.contains=null,r.parent||(r.children=[],this._wrap())}e.exports=c;var u=["enc","parent","children","tag","args","reverseArgs","choice","optional","any","obj","use","alteredUse","key","default","explicit","implicit","contains"];c.prototype.clone=function(){var e=this._baseState,t={};u.forEach((function(r){t[r]=e[r]}));var r=new this.constructor(t.parent);return r._baseState=t,r},c.prototype._wrap=function(){var e=this._baseState;f.forEach((function(t){this[t]=function(){var r=new this.constructor(this);return e.children.push(r),r[t].apply(r,arguments)}}),this)},c.prototype._init=function(e){var t=this._baseState;a(null===t.parent),e.call(this),t.children=t.children.filter((function(e){return e._baseState.parent===this}),this),a.equal(t.children.length,1,"Root node can have only one child")},c.prototype._useArgs=function(e){var t=this._baseState,r=e.filter((function(e){return e instanceof this.constructor}),this);e=e.filter((function(e){return!(e instanceof this.constructor)}),this),0!==r.length&&(a(null===t.children),t.children=r,r.forEach((function(e){e._baseState.parent=this}),this)),0!==e.length&&(a(null===t.args),t.args=e,t.reverseArgs=e.map((function(e){if("object"!=typeof e||e.constructor!==Object)return e;var t={};return Object.keys(e).forEach((function(r){r==(0|r)&&(r|=0);var n=e[r];t[n]=r})),t})))},["_peekTag","_decodeTag","_use","_decodeStr","_decodeObjid","_decodeTime","_decodeNull","_decodeInt","_decodeBool","_decodeList","_encodeComposite","_encodeStr","_encodeObjid","_encodeTime","_encodeNull","_encodeInt","_encodeBool"].forEach((function(e){c.prototype[e]=function(){var t=this._baseState;throw new Error(e+" not implemented for encoding: "+t.enc)}})),s.forEach((function(e){c.prototype[e]=function(){var t=this._baseState,r=Array.prototype.slice.call(arguments);return a(null===t.tag),t.tag=e,this._useArgs(r),this}})),c.prototype.use=function(e){a(e);var t=this._baseState;return a(null===t.use),t.use=e,this},c.prototype.optional=function(){return this._baseState.optional=!0,this},c.prototype.def=function(e){var t=this._baseState;return a(null===t.default),t.default=e,t.optional=!0,this},c.prototype.explicit=function(e){var t=this._baseState;return a(null===t.explicit&&null===t.implicit),t.explicit=e,this},c.prototype.implicit=function(e){var t=this._baseState;return a(null===t.explicit&&null===t.implicit),t.implicit=e,this},c.prototype.obj=function(){var e=this._baseState,t=Array.prototype.slice.call(arguments);return e.obj=!0,0!==t.length&&this._useArgs(t),this},c.prototype.key=function(e){var t=this._baseState;return a(null===t.key),t.key=e,this},c.prototype.any=function(){return this._baseState.any=!0,this},c.prototype.choice=function(e){var t=this._baseState;return a(null===t.choice),t.choice=e,this._useArgs(Object.keys(e).map((function(t){return e[t]}))),this},c.prototype.contains=function(e){var t=this._baseState;return a(null===t.use),t.contains=e,this},c.prototype._decode=function(e,t){var r=this._baseState;if(null===r.parent)return e.wrapResult(r.children[0]._decode(e,t));var n,i=r.default,a=!0,s=null;if(null!==r.key&&(s=e.enterKey(r.key)),r.optional){var f=null;if(null!==r.explicit?f=r.explicit:null!==r.implicit?f=r.implicit:null!==r.tag&&(f=r.tag),null!==f||r.any){if(a=this._peekTag(e,f,r.any),e.isError(a))return a}else{var c=e.save();try{null===r.choice?this._decodeGeneric(r.tag,e,t):this._decodeChoice(e,t),a=!0}catch(e){a=!1}e.restore(c)}}if(r.obj&&a&&(n=e.enterObject()),a){if(null!==r.explicit){var u=this._decodeTag(e,r.explicit);if(e.isError(u))return u;e=u}var h=e.offset;if(null===r.use&&null===r.choice){if(r.any)c=e.save();var d=this._decodeTag(e,null!==r.implicit?r.implicit:r.tag,r.any);if(e.isError(d))return d;r.any?i=e.raw(c):e=d}if(t&&t.track&&null!==r.tag&&t.track(e.path(),h,e.length,"tagged"),t&&t.track&&null!==r.tag&&t.track(e.path(),e.offset,e.length,"content"),i=r.any?i:null===r.choice?this._decodeGeneric(r.tag,e,t):this._decodeChoice(e,t),e.isError(i))return i;if(r.any||null!==r.choice||null===r.children||r.children.forEach((function(r){r._decode(e,t)})),r.contains&&("octstr"===r.tag||"bitstr"===r.tag)){var l=new o(i);i=this._getUse(r.contains,e._reporterState.obj)._decode(l,t)}}return r.obj&&a&&(i=e.leaveObject(n)),null===r.key||null===i&&!0!==a?null!==s&&e.exitKey(s):e.leaveKey(s,r.key,i),i},c.prototype._decodeGeneric=function(e,t,r){var n=this._baseState;return"seq"===e||"set"===e?null:"seqof"===e||"setof"===e?this._decodeList(t,e,n.args[0],r):/str$/.test(e)?this._decodeStr(t,e,r):"objid"===e&&n.args?this._decodeObjid(t,n.args[0],n.args[1],r):"objid"===e?this._decodeObjid(t,null,null,r):"gentime"===e||"utctime"===e?this._decodeTime(t,e,r):"null_"===e?this._decodeNull(t,r):"bool"===e?this._decodeBool(t,r):"objDesc"===e?this._decodeStr(t,e,r):"int"===e||"enum"===e?this._decodeInt(t,n.args&&n.args[0],r):null!==n.use?this._getUse(n.use,t._reporterState.obj)._decode(t,r):t.error("unknown tag: "+e)},c.prototype._getUse=function(e,t){var r=this._baseState;return r.useDecoder=this._use(e,t),a(null===r.useDecoder._baseState.parent),r.useDecoder=r.useDecoder._baseState.children[0],r.implicit!==r.useDecoder._baseState.implicit&&(r.useDecoder=r.useDecoder.clone(),r.useDecoder._baseState.implicit=r.implicit),r.useDecoder},c.prototype._decodeChoice=function(e,t){var r=this._baseState,n=null,i=!1;return Object.keys(r.choice).some((function(o){var a=e.save(),s=r.choice[o];try{var f=s._decode(e,t);if(e.isError(f))return!1;n={type:o,value:f},i=!0}catch(t){return e.restore(a),!1}return!0}),this),i?n:e.error("Choice not matched")},c.prototype._createEncoderBuffer=function(e){return new i(e,this.reporter)},c.prototype._encode=function(e,t,r){var n=this._baseState;if(null===n.default||n.default!==e){var i=this._encodeValue(e,t,r);if(void 0!==i&&!this._skipDefault(i,t,r))return i}},c.prototype._encodeValue=function(e,t,r){var i=this._baseState;if(null===i.parent)return i.children[0]._encode(e,t||new n);var o=null;if(this.reporter=t,i.optional&&void 0===e){if(null===i.default)return;e=i.default}var a=null,s=!1;if(i.any)o=this._createEncoderBuffer(e);else if(i.choice)o=this._encodeChoice(e,t);else if(i.contains)a=this._getUse(i.contains,r)._encode(e,t),s=!0;else if(i.children)a=i.children.map((function(r){if("null_"===r._baseState.tag)return r._encode(null,t,e);if(null===r._baseState.key)return t.error("Child should have a key");var n=t.enterKey(r._baseState.key);if("object"!=typeof e)return t.error("Child expected, but input is not object");var i=r._encode(e[r._baseState.key],t,e);return t.leaveKey(n),i}),this).filter((function(e){return e})),a=this._createEncoderBuffer(a);else if("seqof"===i.tag||"setof"===i.tag){if(!i.args||1!==i.args.length)return t.error("Too many args for : "+i.tag);if(!Array.isArray(e))return t.error("seqof/setof, but data is not Array");var f=this.clone();f._baseState.implicit=null,a=this._createEncoderBuffer(e.map((function(r){var n=this._baseState;return this._getUse(n.args[0],e)._encode(r,t)}),f))}else null!==i.use?o=this._getUse(i.use,r)._encode(e,t):(a=this._encodePrimitive(i.tag,e),s=!0);if(!i.any&&null===i.choice){var c=null!==i.implicit?i.implicit:i.tag,u=null===i.implicit?"universal":"context";null===c?null===i.use&&t.error("Tag could be omitted only for .use()"):null===i.use&&(o=this._encodeComposite(c,s,u,a))}return null!==i.explicit&&(o=this._encodeComposite(i.explicit,!1,"context",o)),o},c.prototype._encodeChoice=function(e,t){var r=this._baseState,n=r.choice[e.type];return n||a(!1,e.type+" not found in "+JSON.stringify(Object.keys(r.choice))),n._encode(e.value,t)},c.prototype._encodePrimitive=function(e,t){var r=this._baseState;if(/str$/.test(e))return this._encodeStr(t,e);if("objid"===e&&r.args)return this._encodeObjid(t,r.reverseArgs[0],r.args[1]);if("objid"===e)return this._encodeObjid(t,null,null);if("gentime"===e||"utctime"===e)return this._encodeTime(t,e);if("null_"===e)return this._encodeNull();if("int"===e||"enum"===e)return this._encodeInt(t,r.args&&r.reverseArgs[0]);if("bool"===e)return this._encodeBool(t);if("objDesc"===e)return this._encodeStr(t,e);throw new Error("Unsupported tag: "+e)},c.prototype._isNumstr=function(e){return/^[0-9 ]*$/.test(e)},c.prototype._isPrintstr=function(e){return/^[A-Za-z0-9 '\(\)\+,\-\.\/:=\?]*$/.test(e)}},function(e,t,r){var n=r(75);t.tagClass={0:"universal",1:"application",2:"context",3:"private"},t.tagClassByName=n._reverse(t.tagClass),t.tag={0:"end",1:"bool",2:"int",3:"bitstr",4:"octstr",5:"null_",6:"objid",7:"objDesc",8:"external",9:"real",10:"enum",11:"embed",12:"utf8str",13:"relativeOid",16:"seq",17:"set",18:"numstr",19:"printstr",20:"t61str",21:"videostr",22:"ia5str",23:"utctime",24:"gentime",25:"graphstr",26:"iso646str",27:"genstr",28:"unistr",29:"charstr",30:"bmpstr"},t.tagByName=n._reverse(t.tag)},function(e,t,r){var n=t;n.der=r(76),n.pem=r(172)},function(e,t,r){var n=r(1),i=r(2).Buffer,o=r(76);function a(e){o.call(this,e),this.enc="pem"}n(a,o),e.exports=a,a.prototype.decode=function(e,t){for(var r=e.toString().split(/[\r\n]+/g),n=t.label.toUpperCase(),a=/^-----(BEGIN|END) ([^-]+)-----$/,s=-1,f=-1,c=0;c<r.length;c++){var u=r[c].match(a);if(null!==u&&u[2]===n){if(-1!==s){if("END"!==u[1])break;f=c;break}if("BEGIN"!==u[1])break;s=c}}if(-1===s||-1===f)throw new Error("PEM section not found for: "+n);var h=r.slice(s+1,f).join("");h.replace(/[^a-z0-9\+\/=]+/gi,"");var d=new i(h,"base64");return o.prototype.decode.call(this,d,t)}},function(e,t,r){var n=t;n.der=r(77),n.pem=r(174)},function(e,t,r){var n=r(1),i=r(77);function o(e){i.call(this,e),this.enc="pem"}n(o,i),e.exports=o,o.prototype.encode=function(e,t){for(var r=i.prototype.encode.call(this,e).toString("base64"),n=["-----BEGIN "+t.label+"-----"],o=0;o<r.length;o+=64)n.push(r.slice(o,o+64));return n.push("-----END "+t.label+"-----"),n.join("\n")}},function(e,t,r){"use strict";var n=r(19),i=n.define("Time",(function(){this.choice({utcTime:this.utctime(),generalTime:this.gentime()})})),o=n.define("AttributeTypeValue",(function(){this.seq().obj(this.key("type").objid(),this.key("value").any())})),a=n.define("AlgorithmIdentifier",(function(){this.seq().obj(this.key("algorithm").objid(),this.key("parameters").optional(),this.key("curve").objid().optional())})),s=n.define("SubjectPublicKeyInfo",(function(){this.seq().obj(this.key("algorithm").use(a),this.key("subjectPublicKey").bitstr())})),f=n.define("RelativeDistinguishedName",(function(){this.setof(o)})),c=n.define("RDNSequence",(function(){this.seqof(f)})),u=n.define("Name",(function(){this.choice({rdnSequence:this.use(c)})})),h=n.define("Validity",(function(){this.seq().obj(this.key("notBefore").use(i),this.key("notAfter").use(i))})),d=n.define("Extension",(function(){this.seq().obj(this.key("extnID").objid(),this.key("critical").bool().def(!1),this.key("extnValue").octstr())})),l=n.define("TBSCertificate",(function(){this.seq().obj(this.key("version").explicit(0).int().optional(),this.key("serialNumber").int(),this.key("signature").use(a),this.key("issuer").use(u),this.key("validity").use(h),this.key("subject").use(u),this.key("subjectPublicKeyInfo").use(s),this.key("issuerUniqueID").implicit(1).bitstr().optional(),this.key("subjectUniqueID").implicit(2).bitstr().optional(),this.key("extensions").explicit(3).seqof(d).optional())})),p=n.define("X509Certificate",(function(){this.seq().obj(this.key("tbsCertificate").use(l),this.key("signatureAlgorithm").use(a),this.key("signatureValue").bitstr())}));e.exports=p},function(e){e.exports=JSON.parse('{"2.16.840.1.101.3.4.1.1":"aes-128-ecb","2.16.840.1.101.3.4.1.2":"aes-128-cbc","2.16.840.1.101.3.4.1.3":"aes-128-ofb","2.16.840.1.101.3.4.1.4":"aes-128-cfb","2.16.840.1.101.3.4.1.21":"aes-192-ecb","2.16.840.1.101.3.4.1.22":"aes-192-cbc","2.16.840.1.101.3.4.1.23":"aes-192-ofb","2.16.840.1.101.3.4.1.24":"aes-192-cfb","2.16.840.1.101.3.4.1.41":"aes-256-ecb","2.16.840.1.101.3.4.1.42":"aes-256-cbc","2.16.840.1.101.3.4.1.43":"aes-256-ofb","2.16.840.1.101.3.4.1.44":"aes-256-cfb"}')},function(e,t,r){var n=/Proc-Type: 4,ENCRYPTED[\n\r]+DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)[\n\r]+([0-9A-z\n\r\+\/\=]+)[\n\r]+/m,i=/^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----/m,o=/^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----([0-9A-z\n\r\+\/\=]+)-----END \1-----$/m,a=r(24),s=r(37),f=r(0).Buffer;e.exports=function(e,t){var r,c=e.toString(),u=c.match(n);if(u){var h="aes"+u[1],d=f.from(u[2],"hex"),l=f.from(u[3].replace(/[\r\n]/g,""),"base64"),p=a(t,d.slice(0,8),parseInt(u[1],10)).key,b=[],y=s.createDecipheriv(h,p,d);b.push(y.update(l)),b.push(y.final()),r=f.concat(b)}else{var m=c.match(o);r=new f(m[2].replace(/[\r\n]/g,""),"base64")}return{tag:c.match(i)[1],data:r}}},function(e,t,r){(function(t){var n=r(3),i=r(41).ec,o=r(26),a=r(78);function s(e,t){if(e.cmpn(0)<=0)throw new Error("invalid sig");if(e.cmp(t)>=t)throw new Error("invalid sig")}e.exports=function(e,r,f,c,u){var h=o(f);if("ec"===h.type){if("ecdsa"!==c&&"ecdsa/rsa"!==c)throw new Error("wrong public key type");return function(e,t,r){var n=a[r.data.algorithm.curve.join(".")];if(!n)throw new Error("unknown curve "+r.data.algorithm.curve.join("."));var o=new i(n),s=r.data.subjectPrivateKey.data;return o.verify(t,e,s)}(e,r,h)}if("dsa"===h.type){if("dsa"!==c)throw new Error("wrong public key type");return function(e,t,r){var i=r.data.p,a=r.data.q,f=r.data.g,c=r.data.pub_key,u=o.signature.decode(e,"der"),h=u.s,d=u.r;s(h,a),s(d,a);var l=n.mont(i),p=h.invm(a);return 0===f.toRed(l).redPow(new n(t).mul(p).mod(a)).fromRed().mul(c.toRed(l).redPow(d.mul(p).mod(a)).fromRed()).mod(i).mod(a).cmp(d)}(e,r,h)}if("rsa"!==c&&"ecdsa/rsa"!==c)throw new Error("wrong public key type");r=t.concat([u,r]);for(var d=h.modulus.byteLength(),l=[1],p=0;r.length+l.length+2<d;)l.push(255),p++;l.push(0);for(var b=-1;++b<r.length;)l.push(r[b]);l=new t(l);var y=n.mont(h.modulus);e=(e=new n(e).toRed(y)).redPow(new n(h.publicExponent)),e=new t(e.fromRed().toArray());var m=p<8?1:0;for(d=Math.min(e.length,l.length),e.length!==l.length&&(m=1),b=-1;++b<d;)m|=e[b]^l[b];return 0===m}}).call(this,r(2).Buffer)},function(e,t,r){(function(t){var n=r(41),i=r(3);e.exports=function(e){return new a(e)};var o={secp256k1:{name:"secp256k1",byteLength:32},secp224r1:{name:"p224",byteLength:28},prime256v1:{name:"p256",byteLength:32},prime192v1:{name:"p192",byteLength:24},ed25519:{name:"ed25519",byteLength:32},secp384r1:{name:"p384",byteLength:48},secp521r1:{name:"p521",byteLength:66}};function a(e){this.curveType=o[e],this.curveType||(this.curveType={name:e}),this.curve=new n.ec(this.curveType.name),this.keys=void 0}function s(e,r,n){Array.isArray(e)||(e=e.toArray());var i=new t(e);if(n&&i.length<n){var o=new t(n-i.length);o.fill(0),i=t.concat([o,i])}return r?i.toString(r):i}o.p224=o.secp224r1,o.p256=o.secp256r1=o.prime256v1,o.p192=o.secp192r1=o.prime192v1,o.p384=o.secp384r1,o.p521=o.secp521r1,a.prototype.generateKeys=function(e,t){return this.keys=this.curve.genKeyPair(),this.getPublicKey(e,t)},a.prototype.computeSecret=function(e,r,n){return r=r||"utf8",t.isBuffer(e)||(e=new t(e,r)),s(this.curve.keyFromPublic(e).getPublic().mul(this.keys.getPrivate()).getX(),n,this.curveType.byteLength)},a.prototype.getPublicKey=function(e,t){var r=this.keys.getPublic("compressed"===t,!0);return"hybrid"===t&&(r[r.length-1]%2?r[0]=7:r[0]=6),s(r,e)},a.prototype.getPrivateKey=function(e){return s(this.keys.getPrivate(),e)},a.prototype.setPublicKey=function(e,r){return r=r||"utf8",t.isBuffer(e)||(e=new t(e,r)),this.keys._importPublic(e),this},a.prototype.setPrivateKey=function(e,r){r=r||"utf8",t.isBuffer(e)||(e=new t(e,r));var n=new i(e);return n=n.toString(16),this.keys=this.curve.genKeyPair(),this.keys._importPrivate(n),this}}).call(this,r(2).Buffer)},function(e,t,r){t.publicEncrypt=r(181),t.privateDecrypt=r(182),t.privateEncrypt=function(e,r){return t.publicEncrypt(e,r,!0)},t.publicDecrypt=function(e,r){return t.privateDecrypt(e,r,!0)}},function(e,t,r){var n=r(26),i=r(13),o=r(16),a=r(79),s=r(80),f=r(3),c=r(81),u=r(40),h=r(0).Buffer;e.exports=function(e,t,r){var d;d=e.padding?e.padding:r?1:4;var l,p=n(e);if(4===d)l=function(e,t){var r=e.modulus.byteLength(),n=t.length,c=o("sha1").update(h.alloc(0)).digest(),u=c.length,d=2*u;if(n>r-d-2)throw new Error("message too long");var l=h.alloc(r-n-d-2),p=r-u-1,b=i(u),y=s(h.concat([c,l,h.alloc(1,1),t],p),a(b,p)),m=s(b,a(y,u));return new f(h.concat([h.alloc(1),m,y],r))}(p,t);else if(1===d)l=function(e,t,r){var n,o=t.length,a=e.modulus.byteLength();if(o>a-11)throw new Error("message too long");n=r?h.alloc(a-o-3,255):function(e){var t,r=h.allocUnsafe(e),n=0,o=i(2*e),a=0;for(;n<e;)a===o.length&&(o=i(2*e),a=0),(t=o[a++])&&(r[n++]=t);return r}(a-o-3);return new f(h.concat([h.from([0,r?1:2]),n,h.alloc(1),t],a))}(p,t,r);else{if(3!==d)throw new Error("unknown padding");if((l=new f(t)).cmp(p.modulus)>=0)throw new Error("data too long for modulus")}return r?u(l,p):c(l,p)}},function(e,t,r){var n=r(26),i=r(79),o=r(80),a=r(3),s=r(40),f=r(16),c=r(81),u=r(0).Buffer;e.exports=function(e,t,r){var h;h=e.padding?e.padding:r?1:4;var d,l=n(e),p=l.modulus.byteLength();if(t.length>p||new a(t).cmp(l.modulus)>=0)throw new Error("decryption error");d=r?c(new a(t),l):s(t,l);var b=u.alloc(p-d.length);if(d=u.concat([b,d],p),4===h)return function(e,t){var r=e.modulus.byteLength(),n=f("sha1").update(u.alloc(0)).digest(),a=n.length;if(0!==t[0])throw new Error("decryption error");var s=t.slice(1,a+1),c=t.slice(a+1),h=o(s,i(c,a)),d=o(c,i(h,r-a-1));if(function(e,t){e=u.from(e),t=u.from(t);var r=0,n=e.length;e.length!==t.length&&(r++,n=Math.min(e.length,t.length));var i=-1;for(;++i<n;)r+=e[i]^t[i];return r}(n,d.slice(0,a)))throw new Error("decryption error");var l=a;for(;0===d[l];)l++;if(1!==d[l++])throw new Error("decryption error");return d.slice(l)}(l,d);if(1===h)return function(e,t,r){var n=t.slice(0,2),i=2,o=0;for(;0!==t[i++];)if(i>=t.length){o++;break}var a=t.slice(2,i-1);("0002"!==n.toString("hex")&&!r||"0001"!==n.toString("hex")&&r)&&o++;a.length<8&&o++;if(o)throw new Error("decryption error");return t.slice(i)}(0,d,r);if(3===h)return d;throw new Error("unknown padding")}},function(e,t,r){"use strict";(function(e,n){function i(){throw new Error("secure random number generation not supported by this browser\nuse chrome, FireFox or Internet Explorer 11")}var o=r(0),a=r(13),s=o.Buffer,f=o.kMaxLength,c=e.crypto||e.msCrypto,u=Math.pow(2,32)-1;function h(e,t){if("number"!=typeof e||e!=e)throw new TypeError("offset must be a number");if(e>u||e<0)throw new TypeError("offset must be a uint32");if(e>f||e>t)throw new RangeError("offset out of range")}function d(e,t,r){if("number"!=typeof e||e!=e)throw new TypeError("size must be a number");if(e>u||e<0)throw new TypeError("size must be a uint32");if(e+t>r||e>f)throw new RangeError("buffer too small")}function l(e,t,r,i){if(n.browser){var o=e.buffer,s=new Uint8Array(o,t,r);return c.getRandomValues(s),i?void n.nextTick((function(){i(null,e)})):e}if(!i)return a(r).copy(e,t),e;a(r,(function(r,n){if(r)return i(r);n.copy(e,t),i(null,e)}))}c&&c.getRandomValues||!n.browser?(t.randomFill=function(t,r,n,i){if(!(s.isBuffer(t)||t instanceof e.Uint8Array))throw new TypeError('"buf" argument must be a Buffer or Uint8Array');if("function"==typeof r)i=r,r=0,n=t.length;else if("function"==typeof n)i=n,n=t.length-r;else if("function"!=typeof i)throw new TypeError('"cb" argument must be a function');return h(r,t.length),d(n,r,t.length),l(t,r,n,i)},t.randomFillSync=function(t,r,n){void 0===r&&(r=0);if(!(s.isBuffer(t)||t instanceof e.Uint8Array))throw new TypeError('"buf" argument must be a Buffer or Uint8Array');h(r,t.length),void 0===n&&(n=t.length-r);return d(n,r,t.length),l(t,r,n)}):(t.randomFill=i,t.randomFillSync=i)}).call(this,r(9),r(4))},function(e,t,r){"use strict";var n=r(0).Buffer,i=r(185),o=128,a=48,s=2;function f(e){if(n.isBuffer(e))return e;if("string"==typeof e)return n.from(e,"base64");throw new TypeError("ECDSA signature must be a Base64 string or a Buffer")}function c(e,t,r){for(var n=0;t+n<r&&0===e[t+n];)++n;return e[t+n]>=o&&--n,n}e.exports={derToJose:function(e,t){e=f(e);var r=i(t),c=r+1,u=e.length,h=0;if(e[h++]!==a)throw new Error('Could not find expected "seq"');var d=e[h++];if(d===(1|o)&&(d=e[h++]),u-h<d)throw new Error('"seq" specified length of "'+d+'", only "'+(u-h)+'" remaining');if(e[h++]!==s)throw new Error('Could not find expected "int" for "r"');var l=e[h++];if(u-h-2<l)throw new Error('"r" specified length of "'+l+'", only "'+(u-h-2)+'" available');if(c<l)throw new Error('"r" specified length of "'+l+'", max of "'+c+'" is acceptable');var p=h;if(h+=l,e[h++]!==s)throw new Error('Could not find expected "int" for "s"');var b=e[h++];if(u-h!==b)throw new Error('"s" specified length of "'+b+'", expected "'+(u-h)+'"');if(c<b)throw new Error('"s" specified length of "'+b+'", max of "'+c+'" is acceptable');var y=h;if((h+=b)!==u)throw new Error('Expected to consume entire buffer, but "'+(u-h)+'" bytes remain');var m=r-l,v=r-b,g=n.allocUnsafe(m+l+v+b);for(h=0;h<m;++h)g[h]=0;e.copy(g,h,p+Math.max(-m,0),p+l);for(var w=h=r;h<w+v;++h)g[h]=0;return e.copy(g,h,y+Math.max(-v,0),y+b),g=(g=g.toString("base64")).replace(/=/g,"").replace(/\+/g,"-").replace(/\//g,"_")},joseToDer:function(e,t){e=f(e);var r=i(t),u=e.length;if(u!==2*r)throw new TypeError('"'+t+'" signatures must be "'+2*r+'" bytes, saw "'+u+'"');var h=c(e,0,r),d=c(e,r,e.length),l=r-h,p=r-d,b=2+l+1+1+p,y=b<o,m=n.allocUnsafe((y?2:3)+b),v=0;return m[v++]=a,y?m[v++]=b:(m[v++]=1|o,m[v++]=255&b),m[v++]=s,m[v++]=l,h<0?(m[v++]=0,v+=e.copy(m,v,0,r)):v+=e.copy(m,v,h,r),m[v++]=s,m[v++]=p,d<0?(m[v++]=0,e.copy(m,v,r)):e.copy(m,v,r+d),m}}},function(e,t,r){"use strict";function n(e){return(e/8|0)+(e%8==0?0:1)}var i={ES256:n(256),ES384:n(384),ES512:n(521)};e.exports=function(e){var t=i[e];if(t)return t;throw new Error('Unknown algorithm "'+e+'"')}},function(e,t,r){var n=r(0).Buffer,i=r(46),o=r(51),a=r(12),s=r(82),f=r(22),c=/^[a-zA-Z0-9\-_]+?\.[a-zA-Z0-9\-_]+?\.([a-zA-Z0-9\-_]+)?$/;function u(e){if(function(e){return"[object Object]"===Object.prototype.toString.call(e)}(e))return e;try{return JSON.parse(e)}catch(e){return}}function h(e){var t=e.split(".",1)[0];return u(n.from(t,"base64").toString("binary"))}function d(e){return e.split(".")[2]}function l(e){return c.test(e)&&!!h(e)}function p(e,t,r){if(!t){var n=new Error("Missing algorithm parameter for jws.verify");throw n.code="MISSING_ALGORITHM",n}var i=d(e=s(e)),a=function(e){return e.split(".",2).join(".")}(e);return o(t).verify(a,i,r)}function b(e,t){if(t=t||{},!l(e=s(e)))return null;var r=h(e);if(!r)return null;var i=function(e,t){t=t||"utf8";var r=e.split(".")[1];return n.from(r,"base64").toString(t)}(e);return("JWT"===r.typ||t.json)&&(i=JSON.parse(i,t.encoding)),{header:r,payload:i,signature:d(e)}}function y(e){var t=(e=e||{}).secret||e.publicKey||e.key,r=new i(t);this.readable=!0,this.algorithm=e.algorithm,this.encoding=e.encoding,this.secret=this.publicKey=this.key=r,this.signature=new i(e.signature),this.secret.once("close",function(){!this.signature.writable&&this.readable&&this.verify()}.bind(this)),this.signature.once("close",function(){!this.secret.writable&&this.readable&&this.verify()}.bind(this))}f.inherits(y,a),y.prototype.verify=function(){try{var e=p(this.signature.buffer,this.algorithm,this.key.buffer),t=b(this.signature.buffer,this.encoding);return this.emit("done",e,t),this.emit("data",e),this.emit("end"),this.readable=!1,e}catch(e){this.readable=!1,this.emit("error",e),this.emit("close")}},y.decode=b,y.isValid=l,y.verify=p,e.exports=y},function(e,t,r){var n=r(27),i=r(83),o=r(84),a=r(44),s=r(85),f=r(86),c=r(28),u=["RS256","RS384","RS512","ES256","ES384","ES512"],h=["RS256","RS384","RS512"],d=["HS256","HS384","HS512"];f&&(u.splice(3,0,"PS256","PS384","PS512"),h.splice(3,0,"PS256","PS384","PS512")),e.exports=function(e,t,r,f){var l;if("function"!=typeof r||f||(f=r,r={}),r||(r={}),r=Object.assign({},r),l=f||function(e,t){if(e)throw e;return t},r.clockTimestamp&&"number"!=typeof r.clockTimestamp)return l(new n("clockTimestamp must be a number"));if(void 0!==r.nonce&&("string"!=typeof r.nonce||""===r.nonce.trim()))return l(new n("nonce must be a non-empty string"));var p=r.clockTimestamp||Math.floor(Date.now()/1e3);if(!e)return l(new n("jwt must be provided"));if("string"!=typeof e)return l(new n("jwt must be a string"));var b,y=e.split(".");if(3!==y.length)return l(new n("jwt malformed"));try{b=a(e,{complete:!0})}catch(e){return l(e)}if(!b)return l(new n("invalid token"));var m,v=b.header;if("function"==typeof t){if(!f)return l(new n("verify must be called asynchronous if secret or public key is provided as a callback"));m=t}else m=function(e,r){return r(null,t)};return m(v,(function(t,a){if(t)return l(new n("error in secret or public key callback: "+t.message));var f,m=""!==y[2].trim();if(!m&&a)return l(new n("jwt signature is required"));if(m&&!a)return l(new n("secret or public key must be provided"));if(m||r.algorithms||(r.algorithms=["none"]),r.algorithms||(r.algorithms=~a.toString().indexOf("BEGIN CERTIFICATE")||~a.toString().indexOf("BEGIN PUBLIC KEY")?u:~a.toString().indexOf("BEGIN RSA PUBLIC KEY")?h:d),!~r.algorithms.indexOf(b.header.alg))return l(new n("invalid algorithm"));try{f=c.verify(e,b.header.alg,a)}catch(e){return l(e)}if(!f)return l(new n("invalid signature"));var g=b.payload;if(void 0!==g.nbf&&!r.ignoreNotBefore){if("number"!=typeof g.nbf)return l(new n("invalid nbf value"));if(g.nbf>p+(r.clockTolerance||0))return l(new i("jwt not active",new Date(1e3*g.nbf)))}if(void 0!==g.exp&&!r.ignoreExpiration){if("number"!=typeof g.exp)return l(new n("invalid exp value"));if(p>=g.exp+(r.clockTolerance||0))return l(new o("jwt expired",new Date(1e3*g.exp)))}if(r.audience){var w=Array.isArray(r.audience)?r.audience:[r.audience];if(!(Array.isArray(g.aud)?g.aud:[g.aud]).some((function(e){return w.some((function(t){return t instanceof RegExp?t.test(e):t===e}))})))return l(new n("jwt audience invalid. expected: "+w.join(" or ")))}if(r.issuer&&("string"==typeof r.issuer&&g.iss!==r.issuer||Array.isArray(r.issuer)&&-1===r.issuer.indexOf(g.iss)))return l(new n("jwt issuer invalid. expected: "+r.issuer));if(r.subject&&g.sub!==r.subject)return l(new n("jwt subject invalid. expected: "+r.subject));if(r.jwtid&&g.jti!==r.jwtid)return l(new n("jwt jwtid invalid. expected: "+r.jwtid));if(r.nonce&&g.nonce!==r.nonce)return l(new n("jwt nonce invalid. expected: "+r.nonce));if(r.maxAge){if("number"!=typeof g.iat)return l(new n("iat required when maxAge is specified"));var _=s(r.maxAge,g.iat);if(void 0===_)return l(new n('"maxAge" should be a number of seconds or string representing a timespan eg: "1d", "20h", 60'));if(p>=_+(r.clockTolerance||0))return l(new o("maxAge exceeded",new Date(1e3*_)))}if(!0===r.complete){var S=b.signature;return l(null,{header:v,payload:g,signature:S})}return l(null,g)}))}},function(e,t){var r=1e3,n=60*r,i=60*n,o=24*i,a=7*o,s=365.25*o;function f(e,t,r,n){var i=t>=1.5*r;return Math.round(e/r)+" "+n+(i?"s":"")}e.exports=function(e,t){t=t||{};var c=typeof e;if("string"===c&&e.length>0)return function(e){if((e=String(e)).length>100)return;var t=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(e);if(!t)return;var f=parseFloat(t[1]);switch((t[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return f*s;case"weeks":case"week":case"w":return f*a;case"days":case"day":case"d":return f*o;case"hours":case"hour":case"hrs":case"hr":case"h":return f*i;case"minutes":case"minute":case"mins":case"min":case"m":return f*n;case"seconds":case"second":case"secs":case"sec":case"s":return f*r;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return f;default:return}}(e);if("number"===c&&isFinite(e))return t.long?function(e){var t=Math.abs(e);if(t>=o)return f(e,t,o,"day");if(t>=i)return f(e,t,i,"hour");if(t>=n)return f(e,t,n,"minute");if(t>=r)return f(e,t,r,"second");return e+" ms"}(e):function(e){var t=Math.abs(e);if(t>=o)return Math.round(e/o)+"d";if(t>=i)return Math.round(e/i)+"h";if(t>=n)return Math.round(e/n)+"m";if(t>=r)return Math.round(e/r)+"s";return e+"ms"}(e);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))}},function(e,t,r){(function(r){var n;t=e.exports=X,n="object"==typeof r&&r.env&&r.env.NODE_DEBUG&&/\bsemver\b/i.test(r.env.NODE_DEBUG)?function(){var e=Array.prototype.slice.call(arguments,0);e.unshift("SEMVER"),console.log.apply(console,e)}:function(){},t.SEMVER_SPEC_VERSION="2.0.0";var i=256,o=Number.MAX_SAFE_INTEGER||9007199254740991,a=t.re=[],s=t.src=[],f=0,c=f++;s[c]="0|[1-9]\\d*";var u=f++;s[u]="[0-9]+";var h=f++;s[h]="\\d*[a-zA-Z-][a-zA-Z0-9-]*";var d=f++;s[d]="("+s[c]+")\\.("+s[c]+")\\.("+s[c]+")";var l=f++;s[l]="("+s[u]+")\\.("+s[u]+")\\.("+s[u]+")";var p=f++;s[p]="(?:"+s[c]+"|"+s[h]+")";var b=f++;s[b]="(?:"+s[u]+"|"+s[h]+")";var y=f++;s[y]="(?:-("+s[p]+"(?:\\."+s[p]+")*))";var m=f++;s[m]="(?:-?("+s[b]+"(?:\\."+s[b]+")*))";var v=f++;s[v]="[0-9A-Za-z-]+";var g=f++;s[g]="(?:\\+("+s[v]+"(?:\\."+s[v]+")*))";var w=f++,_="v?"+s[d]+s[y]+"?"+s[g]+"?";s[w]="^"+_+"$";var S="[v=\\s]*"+s[l]+s[m]+"?"+s[g]+"?",E=f++;s[E]="^"+S+"$";var M=f++;s[M]="((?:<|>)?=?)";var k=f++;s[k]=s[u]+"|x|X|\\*";var x=f++;s[x]=s[c]+"|x|X|\\*";var A=f++;s[A]="[v=\\s]*("+s[x]+")(?:\\.("+s[x]+")(?:\\.("+s[x]+")(?:"+s[y]+")?"+s[g]+"?)?)?";var B=f++;s[B]="[v=\\s]*("+s[k]+")(?:\\.("+s[k]+")(?:\\.("+s[k]+")(?:"+s[m]+")?"+s[g]+"?)?)?";var I=f++;s[I]="^"+s[M]+"\\s*"+s[A]+"$";var j=f++;s[j]="^"+s[M]+"\\s*"+s[B]+"$";var R=f++;s[R]="(?:^|[^\\d])(\\d{1,16})(?:\\.(\\d{1,16}))?(?:\\.(\\d{1,16}))?(?:$|[^\\d])";var T=f++;s[T]="(?:~>?)";var P=f++;s[P]="(\\s*)"+s[T]+"\\s+",a[P]=new RegExp(s[P],"g");var C=f++;s[C]="^"+s[T]+s[A]+"$";var O=f++;s[O]="^"+s[T]+s[B]+"$";var D=f++;s[D]="(?:\\^)";var N=f++;s[N]="(\\s*)"+s[D]+"\\s+",a[N]=new RegExp(s[N],"g");var L=f++;s[L]="^"+s[D]+s[A]+"$";var U=f++;s[U]="^"+s[D]+s[B]+"$";var q=f++;s[q]="^"+s[M]+"\\s*("+S+")$|^$";var z=f++;s[z]="^"+s[M]+"\\s*("+_+")$|^$";var F=f++;s[F]="(\\s*)"+s[M]+"\\s*("+S+"|"+s[A]+")",a[F]=new RegExp(s[F],"g");var K=f++;s[K]="^\\s*("+s[A]+")\\s+-\\s+("+s[A]+")\\s*$";var H=f++;s[H]="^\\s*("+s[B]+")\\s+-\\s+("+s[B]+")\\s*$";var V=f++;s[V]="(<|>)?=?\\s*\\*";for(var Y=0;Y<35;Y++)n(Y,s[Y]),a[Y]||(a[Y]=new RegExp(s[Y]));function W(e,t){if(t&&"object"==typeof t||(t={loose:!!t,includePrerelease:!1}),e instanceof X)return e;if("string"!=typeof e)return null;if(e.length>i)return null;if(!(t.loose?a[E]:a[w]).test(e))return null;try{return new X(e,t)}catch(e){return null}}function X(e,t){if(t&&"object"==typeof t||(t={loose:!!t,includePrerelease:!1}),e instanceof X){if(e.loose===t.loose)return e;e=e.version}else if("string"!=typeof e)throw new TypeError("Invalid Version: "+e);if(e.length>i)throw new TypeError("version is longer than "+i+" characters");if(!(this instanceof X))return new X(e,t);n("SemVer",e,t),this.options=t,this.loose=!!t.loose;var r=e.trim().match(t.loose?a[E]:a[w]);if(!r)throw new TypeError("Invalid Version: "+e);if(this.raw=e,this.major=+r[1],this.minor=+r[2],this.patch=+r[3],this.major>o||this.major<0)throw new TypeError("Invalid major version");if(this.minor>o||this.minor<0)throw new TypeError("Invalid minor version");if(this.patch>o||this.patch<0)throw new TypeError("Invalid patch version");r[4]?this.prerelease=r[4].split(".").map((function(e){if(/^[0-9]+$/.test(e)){var t=+e;if(t>=0&&t<o)return t}return e})):this.prerelease=[],this.build=r[5]?r[5].split("."):[],this.format()}t.parse=W,t.valid=function(e,t){var r=W(e,t);return r?r.version:null},t.clean=function(e,t){var r=W(e.trim().replace(/^[=v]+/,""),t);return r?r.version:null},t.SemVer=X,X.prototype.format=function(){return this.version=this.major+"."+this.minor+"."+this.patch,this.prerelease.length&&(this.version+="-"+this.prerelease.join(".")),this.version},X.prototype.toString=function(){return this.version},X.prototype.compare=function(e){return n("SemVer.compare",this.version,this.options,e),e instanceof X||(e=new X(e,this.options)),this.compareMain(e)||this.comparePre(e)},X.prototype.compareMain=function(e){return e instanceof X||(e=new X(e,this.options)),$(this.major,e.major)||$(this.minor,e.minor)||$(this.patch,e.patch)},X.prototype.comparePre=function(e){if(e instanceof X||(e=new X(e,this.options)),this.prerelease.length&&!e.prerelease.length)return-1;if(!this.prerelease.length&&e.prerelease.length)return 1;if(!this.prerelease.length&&!e.prerelease.length)return 0;var t=0;do{var r=this.prerelease[t],i=e.prerelease[t];if(n("prerelease compare",t,r,i),void 0===r&&void 0===i)return 0;if(void 0===i)return 1;if(void 0===r)return-1;if(r!==i)return $(r,i)}while(++t)},X.prototype.inc=function(e,t){switch(e){case"premajor":this.prerelease.length=0,this.patch=0,this.minor=0,this.major++,this.inc("pre",t);break;case"preminor":this.prerelease.length=0,this.patch=0,this.minor++,this.inc("pre",t);break;case"prepatch":this.prerelease.length=0,this.inc("patch",t),this.inc("pre",t);break;case"prerelease":0===this.prerelease.length&&this.inc("patch",t),this.inc("pre",t);break;case"major":0===this.minor&&0===this.patch&&0!==this.prerelease.length||this.major++,this.minor=0,this.patch=0,this.prerelease=[];break;case"minor":0===this.patch&&0!==this.prerelease.length||this.minor++,this.patch=0,this.prerelease=[];break;case"patch":0===this.prerelease.length&&this.patch++,this.prerelease=[];break;case"pre":if(0===this.prerelease.length)this.prerelease=[0];else{for(var r=this.prerelease.length;--r>=0;)"number"==typeof this.prerelease[r]&&(this.prerelease[r]++,r=-2);-1===r&&this.prerelease.push(0)}t&&(this.prerelease[0]===t?isNaN(this.prerelease[1])&&(this.prerelease=[t,0]):this.prerelease=[t,0]);break;default:throw new Error("invalid increment argument: "+e)}return this.format(),this.raw=this.version,this},t.inc=function(e,t,r,n){"string"==typeof r&&(n=r,r=void 0);try{return new X(e,r).inc(t,n).version}catch(e){return null}},t.diff=function(e,t){if(ee(e,t))return null;var r=W(e),n=W(t),i="";if(r.prerelease.length||n.prerelease.length){i="pre";var o="prerelease"}for(var a in r)if(("major"===a||"minor"===a||"patch"===a)&&r[a]!==n[a])return i+a;return o},t.compareIdentifiers=$;var J=/^[0-9]+$/;function $(e,t){var r=J.test(e),n=J.test(t);return r&&n&&(e=+e,t=+t),e===t?0:r&&!n?-1:n&&!r?1:e<t?-1:1}function G(e,t,r){return new X(e,r).compare(new X(t,r))}function Z(e,t,r){return G(e,t,r)>0}function Q(e,t,r){return G(e,t,r)<0}function ee(e,t,r){return 0===G(e,t,r)}function te(e,t,r){return 0!==G(e,t,r)}function re(e,t,r){return G(e,t,r)>=0}function ne(e,t,r){return G(e,t,r)<=0}function ie(e,t,r,n){switch(t){case"===":return"object"==typeof e&&(e=e.version),"object"==typeof r&&(r=r.version),e===r;case"!==":return"object"==typeof e&&(e=e.version),"object"==typeof r&&(r=r.version),e!==r;case"":case"=":case"==":return ee(e,r,n);case"!=":return te(e,r,n);case">":return Z(e,r,n);case">=":return re(e,r,n);case"<":return Q(e,r,n);case"<=":return ne(e,r,n);default:throw new TypeError("Invalid operator: "+t)}}function oe(e,t){if(t&&"object"==typeof t||(t={loose:!!t,includePrerelease:!1}),e instanceof oe){if(e.loose===!!t.loose)return e;e=e.value}if(!(this instanceof oe))return new oe(e,t);n("comparator",e,t),this.options=t,this.loose=!!t.loose,this.parse(e),this.semver===ae?this.value="":this.value=this.operator+this.semver.version,n("comp",this)}t.rcompareIdentifiers=function(e,t){return $(t,e)},t.major=function(e,t){return new X(e,t).major},t.minor=function(e,t){return new X(e,t).minor},t.patch=function(e,t){return new X(e,t).patch},t.compare=G,t.compareLoose=function(e,t){return G(e,t,!0)},t.rcompare=function(e,t,r){return G(t,e,r)},t.sort=function(e,r){return e.sort((function(e,n){return t.compare(e,n,r)}))},t.rsort=function(e,r){return e.sort((function(e,n){return t.rcompare(e,n,r)}))},t.gt=Z,t.lt=Q,t.eq=ee,t.neq=te,t.gte=re,t.lte=ne,t.cmp=ie,t.Comparator=oe;var ae={};function se(e,t){if(t&&"object"==typeof t||(t={loose:!!t,includePrerelease:!1}),e instanceof se)return e.loose===!!t.loose&&e.includePrerelease===!!t.includePrerelease?e:new se(e.raw,t);if(e instanceof oe)return new se(e.value,t);if(!(this instanceof se))return new se(e,t);if(this.options=t,this.loose=!!t.loose,this.includePrerelease=!!t.includePrerelease,this.raw=e,this.set=e.split(/\s*\|\|\s*/).map((function(e){return this.parseRange(e.trim())}),this).filter((function(e){return e.length})),!this.set.length)throw new TypeError("Invalid SemVer Range: "+e);this.format()}function fe(e){return!e||"x"===e.toLowerCase()||"*"===e}function ce(e,t,r,n,i,o,a,s,f,c,u,h,d){return((t=fe(r)?"":fe(n)?">="+r+".0.0":fe(i)?">="+r+"."+n+".0":">="+t)+" "+(s=fe(f)?"":fe(c)?"<"+(+f+1)+".0.0":fe(u)?"<"+f+"."+(+c+1)+".0":h?"<="+f+"."+c+"."+u+"-"+h:"<="+s)).trim()}function ue(e,t,r){for(var i=0;i<e.length;i++)if(!e[i].test(t))return!1;if(t.prerelease.length&&!r.includePrerelease){for(i=0;i<e.length;i++)if(n(e[i].semver),e[i].semver!==ae&&e[i].semver.prerelease.length>0){var o=e[i].semver;if(o.major===t.major&&o.minor===t.minor&&o.patch===t.patch)return!0}return!1}return!0}function he(e,t,r){try{t=new se(t,r)}catch(e){return!1}return t.test(e)}function de(e,t,r,n){var i,o,a,s,f;switch(e=new X(e,n),t=new se(t,n),r){case">":i=Z,o=ne,a=Q,s=">",f=">=";break;case"<":i=Q,o=re,a=Z,s="<",f="<=";break;default:throw new TypeError('Must provide a hilo val of "<" or ">"')}if(he(e,t,n))return!1;for(var c=0;c<t.set.length;++c){var u=t.set[c],h=null,d=null;if(u.forEach((function(e){e.semver===ae&&(e=new oe(">=0.0.0")),h=h||e,d=d||e,i(e.semver,h.semver,n)?h=e:a(e.semver,d.semver,n)&&(d=e)})),h.operator===s||h.operator===f)return!1;if((!d.operator||d.operator===s)&&o(e,d.semver))return!1;if(d.operator===f&&a(e,d.semver))return!1}return!0}oe.prototype.parse=function(e){var t=this.options.loose?a[q]:a[z],r=e.match(t);if(!r)throw new TypeError("Invalid comparator: "+e);this.operator=r[1],"="===this.operator&&(this.operator=""),r[2]?this.semver=new X(r[2],this.options.loose):this.semver=ae},oe.prototype.toString=function(){return this.value},oe.prototype.test=function(e){return n("Comparator.test",e,this.options.loose),this.semver===ae||("string"==typeof e&&(e=new X(e,this.options)),ie(e,this.operator,this.semver,this.options))},oe.prototype.intersects=function(e,t){if(!(e instanceof oe))throw new TypeError("a Comparator is required");var r;if(t&&"object"==typeof t||(t={loose:!!t,includePrerelease:!1}),""===this.operator)return r=new se(e.value,t),he(this.value,r,t);if(""===e.operator)return r=new se(this.value,t),he(e.semver,r,t);var n=!(">="!==this.operator&&">"!==this.operator||">="!==e.operator&&">"!==e.operator),i=!("<="!==this.operator&&"<"!==this.operator||"<="!==e.operator&&"<"!==e.operator),o=this.semver.version===e.semver.version,a=!(">="!==this.operator&&"<="!==this.operator||">="!==e.operator&&"<="!==e.operator),s=ie(this.semver,"<",e.semver,t)&&(">="===this.operator||">"===this.operator)&&("<="===e.operator||"<"===e.operator),f=ie(this.semver,">",e.semver,t)&&("<="===this.operator||"<"===this.operator)&&(">="===e.operator||">"===e.operator);return n||i||o&&a||s||f},t.Range=se,se.prototype.format=function(){return this.range=this.set.map((function(e){return e.join(" ").trim()})).join("||").trim(),this.range},se.prototype.toString=function(){return this.range},se.prototype.parseRange=function(e){var t=this.options.loose;e=e.trim();var r=t?a[H]:a[K];e=e.replace(r,ce),n("hyphen replace",e),e=e.replace(a[F],"$1$2$3"),n("comparator trim",e,a[F]),e=(e=(e=e.replace(a[P],"$1~")).replace(a[N],"$1^")).split(/\s+/).join(" ");var i=t?a[q]:a[z],o=e.split(" ").map((function(e){return function(e,t){return n("comp",e,t),e=function(e,t){return e.trim().split(/\s+/).map((function(e){return function(e,t){n("caret",e,t);var r=t.loose?a[U]:a[L];return e.replace(r,(function(t,r,i,o,a){var s;return n("caret",e,t,r,i,o,a),fe(r)?s="":fe(i)?s=">="+r+".0.0 <"+(+r+1)+".0.0":fe(o)?s="0"===r?">="+r+"."+i+".0 <"+r+"."+(+i+1)+".0":">="+r+"."+i+".0 <"+(+r+1)+".0.0":a?(n("replaceCaret pr",a),s="0"===r?"0"===i?">="+r+"."+i+"."+o+"-"+a+" <"+r+"."+i+"."+(+o+1):">="+r+"."+i+"."+o+"-"+a+" <"+r+"."+(+i+1)+".0":">="+r+"."+i+"."+o+"-"+a+" <"+(+r+1)+".0.0"):(n("no pr"),s="0"===r?"0"===i?">="+r+"."+i+"."+o+" <"+r+"."+i+"."+(+o+1):">="+r+"."+i+"."+o+" <"+r+"."+(+i+1)+".0":">="+r+"."+i+"."+o+" <"+(+r+1)+".0.0"),n("caret return",s),s}))}(e,t)})).join(" ")}(e,t),n("caret",e),e=function(e,t){return e.trim().split(/\s+/).map((function(e){return function(e,t){var r=t.loose?a[O]:a[C];return e.replace(r,(function(t,r,i,o,a){var s;return n("tilde",e,t,r,i,o,a),fe(r)?s="":fe(i)?s=">="+r+".0.0 <"+(+r+1)+".0.0":fe(o)?s=">="+r+"."+i+".0 <"+r+"."+(+i+1)+".0":a?(n("replaceTilde pr",a),s=">="+r+"."+i+"."+o+"-"+a+" <"+r+"."+(+i+1)+".0"):s=">="+r+"."+i+"."+o+" <"+r+"."+(+i+1)+".0",n("tilde return",s),s}))}(e,t)})).join(" ")}(e,t),n("tildes",e),e=function(e,t){return n("replaceXRanges",e,t),e.split(/\s+/).map((function(e){return function(e,t){e=e.trim();var r=t.loose?a[j]:a[I];return e.replace(r,(function(t,r,i,o,a,s){n("xRange",e,t,r,i,o,a,s);var f=fe(i),c=f||fe(o),u=c||fe(a);return"="===r&&u&&(r=""),f?t=">"===r||"<"===r?"<0.0.0":"*":r&&u?(c&&(o=0),a=0,">"===r?(r=">=",c?(i=+i+1,o=0,a=0):(o=+o+1,a=0)):"<="===r&&(r="<",c?i=+i+1:o=+o+1),t=r+i+"."+o+"."+a):c?t=">="+i+".0.0 <"+(+i+1)+".0.0":u&&(t=">="+i+"."+o+".0 <"+i+"."+(+o+1)+".0"),n("xRange return",t),t}))}(e,t)})).join(" ")}(e,t),n("xrange",e),e=function(e,t){return n("replaceStars",e,t),e.trim().replace(a[V],"")}(e,t),n("stars",e),e}(e,this.options)}),this).join(" ").split(/\s+/);return this.options.loose&&(o=o.filter((function(e){return!!e.match(i)}))),o=o.map((function(e){return new oe(e,this.options)}),this)},se.prototype.intersects=function(e,t){if(!(e instanceof se))throw new TypeError("a Range is required");return this.set.some((function(r){return r.every((function(r){return e.set.some((function(e){return e.every((function(e){return r.intersects(e,t)}))}))}))}))},t.toComparators=function(e,t){return new se(e,t).set.map((function(e){return e.map((function(e){return e.value})).join(" ").trim().split(" ")}))},se.prototype.test=function(e){if(!e)return!1;"string"==typeof e&&(e=new X(e,this.options));for(var t=0;t<this.set.length;t++)if(ue(this.set[t],e,this.options))return!0;return!1},t.satisfies=he,t.maxSatisfying=function(e,t,r){var n=null,i=null;try{var o=new se(t,r)}catch(e){return null}return e.forEach((function(e){o.test(e)&&(n&&-1!==i.compare(e)||(i=new X(n=e,r)))})),n},t.minSatisfying=function(e,t,r){var n=null,i=null;try{var o=new se(t,r)}catch(e){return null}return e.forEach((function(e){o.test(e)&&(n&&1!==i.compare(e)||(i=new X(n=e,r)))})),n},t.minVersion=function(e,t){e=new se(e,t);var r=new X("0.0.0");if(e.test(r))return r;if(r=new X("0.0.0-0"),e.test(r))return r;r=null;for(var n=0;n<e.set.length;++n){e.set[n].forEach((function(e){var t=new X(e.semver.version);switch(e.operator){case">":0===t.prerelease.length?t.patch++:t.prerelease.push(0),t.raw=t.format();case"":case">=":r&&!Z(r,t)||(r=t);break;case"<":case"<=":break;default:throw new Error("Unexpected operation: "+e.operator)}}))}if(r&&e.test(r))return r;return null},t.validRange=function(e,t){try{return new se(e,t).range||"*"}catch(e){return null}},t.ltr=function(e,t,r){return de(e,t,"<",r)},t.gtr=function(e,t,r){return de(e,t,">",r)},t.outside=de,t.prerelease=function(e,t){var r=W(e,t);return r&&r.prerelease.length?r.prerelease:null},t.intersects=function(e,t,r){return e=new se(e,r),t=new se(t,r),e.intersects(t)},t.coerce=function(e){if(e instanceof X)return e;if("string"!=typeof e)return null;var t=e.match(a[R]);if(null==t)return null;return W(t[1]+"."+(t[2]||"0")+"."+(t[3]||"0"))}}).call(this,r(4))},function(e,t,r){(function(t){var n=r(85),i=r(86),o=r(28),a=r(191),s=r(192),f=r(193),c=r(194),u=r(195),h=r(196),d=r(197),l=["RS256","RS384","RS512","ES256","ES384","ES512","HS256","HS384","HS512","none"];i&&l.splice(3,0,"PS256","PS384","PS512");var p={expiresIn:{isValid:function(e){return f(e)||h(e)&&e},message:'"expiresIn" should be a number of seconds or string representing a timespan'},notBefore:{isValid:function(e){return f(e)||h(e)&&e},message:'"notBefore" should be a number of seconds or string representing a timespan'},audience:{isValid:function(e){return h(e)||Array.isArray(e)},message:'"audience" must be a string or array'},algorithm:{isValid:a.bind(null,l),message:'"algorithm" must be a valid string enum value'},header:{isValid:u,message:'"header" must be an object'},encoding:{isValid:h,message:'"encoding" must be a string'},issuer:{isValid:h,message:'"issuer" must be a string'},subject:{isValid:h,message:'"subject" must be a string'},jwtid:{isValid:h,message:'"jwtid" must be a string'},noTimestamp:{isValid:s,message:'"noTimestamp" must be a boolean'},keyid:{isValid:h,message:'"keyid" must be a string'},mutatePayload:{isValid:s,message:'"mutatePayload" must be a boolean'}},b={iat:{isValid:c,message:'"iat" should be a number of seconds'},exp:{isValid:c,message:'"exp" should be a number of seconds'},nbf:{isValid:c,message:'"nbf" should be a number of seconds'}};function y(e,t,r,n){if(!u(r))throw new Error('Expected "'+n+'" to be a plain object.');Object.keys(r).forEach((function(i){var o=e[i];if(o){if(!o.isValid(r[i]))throw new Error(o.message)}else if(!t)throw new Error('"'+i+'" is not allowed in "'+n+'"')}))}var m={audience:"aud",issuer:"iss",subject:"sub",jwtid:"jti"},v=["expiresIn","notBefore","noTimestamp","audience","issuer","subject","jwtid"];e.exports=function(e,r,i,a){"function"==typeof i?(a=i,i={}):i=i||{};var s="object"==typeof e&&!t.isBuffer(e),f=Object.assign({alg:i.algorithm||"HS256",typ:s?"JWT":void 0,kid:i.keyid},i.header);function c(e){if(a)return a(e);throw e}if(!r&&"none"!==i.algorithm)return c(new Error("secretOrPrivateKey must have a value"));if(void 0===e)return c(new Error("payload is required"));if(s){try{!function(e){y(b,!0,e,"payload")}(e)}catch(e){return c(e)}i.mutatePayload||(e=Object.assign({},e))}else{var u=v.filter((function(e){return void 0!==i[e]}));if(u.length>0)return c(new Error("invalid "+u.join(",")+" option for "+typeof e+" payload"))}if(void 0!==e.exp&&void 0!==i.expiresIn)return c(new Error('Bad "options.expiresIn" option the payload already has an "exp" property.'));if(void 0!==e.nbf&&void 0!==i.notBefore)return c(new Error('Bad "options.notBefore" option the payload already has an "nbf" property.'));try{!function(e){y(p,!1,e,"options")}(i)}catch(e){return c(e)}var h=e.iat||Math.floor(Date.now()/1e3);if(i.noTimestamp?delete e.iat:s&&(e.iat=h),void 0!==i.notBefore){try{e.nbf=n(i.notBefore,h)}catch(e){return c(e)}if(void 0===e.nbf)return c(new Error('"notBefore" should be a number of seconds or string representing a timespan eg: "1d", "20h", 60'))}if(void 0!==i.expiresIn&&"object"==typeof e){try{e.exp=n(i.expiresIn,h)}catch(e){return c(e)}if(void 0===e.exp)return c(new Error('"expiresIn" should be a number of seconds or string representing a timespan eg: "1d", "20h", 60'))}Object.keys(m).forEach((function(t){var r=m[t];if(void 0!==i[t]){if(void 0!==e[r])return c(new Error('Bad "options.'+t+'" option. The payload already has an "'+r+'" property.'));e[r]=i[t]}}));var l=i.encoding||"utf8";if("function"!=typeof a)return o.sign({header:f,payload:e,secret:r,encoding:l});a=a&&d(a),o.createSign({header:f,privateKey:r,payload:e,encoding:l}).once("error",a).once("done",(function(e){a(null,e)}))}}).call(this,r(2).Buffer)},function(e,t){var r=1/0,n=9007199254740991,i=17976931348623157e292,o=NaN,a="[object Arguments]",s="[object Function]",f="[object GeneratorFunction]",c="[object String]",u="[object Symbol]",h=/^\s+|\s+$/g,d=/^[-+]0x[0-9a-f]+$/i,l=/^0b[01]+$/i,p=/^0o[0-7]+$/i,b=/^(?:0|[1-9]\d*)$/,y=parseInt;function m(e){return e!=e}function v(e,t){return function(e,t){for(var r=-1,n=e?e.length:0,i=Array(n);++r<n;)i[r]=t(e[r],r,e);return i}(t,(function(t){return e[t]}))}var g,w,_=Object.prototype,S=_.hasOwnProperty,E=_.toString,M=_.propertyIsEnumerable,k=(g=Object.keys,w=Object,function(e){return g(w(e))}),x=Math.max;function A(e,t){var r=j(e)||function(e){return function(e){return P(e)&&R(e)}(e)&&S.call(e,"callee")&&(!M.call(e,"callee")||E.call(e)==a)}(e)?function(e,t){for(var r=-1,n=Array(e);++r<e;)n[r]=t(r);return n}(e.length,String):[],n=r.length,i=!!n;for(var o in e)!t&&!S.call(e,o)||i&&("length"==o||I(o,n))||r.push(o);return r}function B(e){if(r=(t=e)&&t.constructor,n="function"==typeof r&&r.prototype||_,t!==n)return k(e);var t,r,n,i=[];for(var o in Object(e))S.call(e,o)&&"constructor"!=o&&i.push(o);return i}function I(e,t){return!!(t=null==t?n:t)&&("number"==typeof e||b.test(e))&&e>-1&&e%1==0&&e<t}var j=Array.isArray;function R(e){return null!=e&&function(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=n}(e.length)&&!function(e){var t=T(e)?E.call(e):"";return t==s||t==f}(e)}function T(e){var t=typeof e;return!!e&&("object"==t||"function"==t)}function P(e){return!!e&&"object"==typeof e}e.exports=function(e,t,n,a){var s;e=R(e)?e:(s=e)?v(s,function(e){return R(e)?A(e):B(e)}(s)):[],n=n&&!a?function(e){var t=function(e){if(!e)return 0===e?e:0;if((e=function(e){if("number"==typeof e)return e;if(function(e){return"symbol"==typeof e||P(e)&&E.call(e)==u}(e))return o;if(T(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=T(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=e.replace(h,"");var r=l.test(e);return r||p.test(e)?y(e.slice(2),r?2:8):d.test(e)?o:+e}(e))===r||e===-r){return(e<0?-1:1)*i}return e==e?e:0}(e),n=t%1;return t==t?n?t-n:t:0}(n):0;var f=e.length;return n<0&&(n=x(f+n,0)),function(e){return"string"==typeof e||!j(e)&&P(e)&&E.call(e)==c}(e)?n<=f&&e.indexOf(t,n)>-1:!!f&&function(e,t,r){if(t!=t)return function(e,t,r,n){for(var i=e.length,o=r+(n?1:-1);n?o--:++o<i;)if(t(e[o],o,e))return o;return-1}(e,m,r);for(var n=r-1,i=e.length;++n<i;)if(e[n]===t)return n;return-1}(e,t,n)>-1}},function(e,t){var r="[object Boolean]",n=Object.prototype.toString;e.exports=function(e){return!0===e||!1===e||function(e){return!!e&&"object"==typeof e}(e)&&n.call(e)==r}},function(e,t){var r=1/0,n=17976931348623157e292,i=NaN,o="[object Symbol]",a=/^\s+|\s+$/g,s=/^[-+]0x[0-9a-f]+$/i,f=/^0b[01]+$/i,c=/^0o[0-7]+$/i,u=parseInt,h=Object.prototype.toString;function d(e){var t=typeof e;return!!e&&("object"==t||"function"==t)}e.exports=function(e){return"number"==typeof e&&e==function(e){var t=function(e){if(!e)return 0===e?e:0;if((e=function(e){if("number"==typeof e)return e;if(function(e){return"symbol"==typeof e||function(e){return!!e&&"object"==typeof e}(e)&&h.call(e)==o}(e))return i;if(d(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=d(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=e.replace(a,"");var r=f.test(e);return r||c.test(e)?u(e.slice(2),r?2:8):s.test(e)?i:+e}(e))===r||e===-r){return(e<0?-1:1)*n}return e==e?e:0}(e),l=t%1;return t==t?l?t-l:t:0}(e)}},function(e,t){var r="[object Number]",n=Object.prototype.toString;e.exports=function(e){return"number"==typeof e||function(e){return!!e&&"object"==typeof e}(e)&&n.call(e)==r}},function(e,t){var r="[object Object]";var n,i,o=Function.prototype,a=Object.prototype,s=o.toString,f=a.hasOwnProperty,c=s.call(Object),u=a.toString,h=(n=Object.getPrototypeOf,i=Object,function(e){return n(i(e))});e.exports=function(e){if(!function(e){return!!e&&"object"==typeof e}(e)||u.call(e)!=r||function(e){var t=!1;if(null!=e&&"function"!=typeof e.toString)try{t=!!(e+"")}catch(e){}return t}(e))return!1;var t=h(e);if(null===t)return!0;var n=f.call(t,"constructor")&&t.constructor;return"function"==typeof n&&n instanceof n&&s.call(n)==c}},function(e,t){var r="[object String]",n=Object.prototype.toString,i=Array.isArray;e.exports=function(e){return"string"==typeof e||!i(e)&&function(e){return!!e&&"object"==typeof e}(e)&&n.call(e)==r}},function(e,t){var r="Expected a function",n=1/0,i=17976931348623157e292,o=NaN,a="[object Symbol]",s=/^\s+|\s+$/g,f=/^[-+]0x[0-9a-f]+$/i,c=/^0b[01]+$/i,u=/^0o[0-7]+$/i,h=parseInt,d=Object.prototype.toString;function l(e,t){var l;if("function"!=typeof t)throw new TypeError(r);return e=function(e){var t=function(e){if(!e)return 0===e?e:0;if((e=function(e){if("number"==typeof e)return e;if(function(e){return"symbol"==typeof e||function(e){return!!e&&"object"==typeof e}(e)&&d.call(e)==a}(e))return o;if(p(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=p(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=e.replace(s,"");var r=c.test(e);return r||u.test(e)?h(e.slice(2),r?2:8):f.test(e)?o:+e}(e))===n||e===-n){return(e<0?-1:1)*i}return e==e?e:0}(e),r=t%1;return t==t?r?t-r:t:0}(e),function(){return--e>0&&(l=t.apply(this,arguments)),e<=1&&(t=void 0),l}}function p(e){var t=typeof e;return!!e&&("object"==t||"function"==t)}e.exports=function(e){return l(2,e)}},function(e,t,r){"use strict";var n=r(5),i=r(87),o=r(200),a=r(93);function s(e){var t=new o(e),r=i(o.prototype.request,t);return n.extend(r,o.prototype,t),n.extend(r,t),r}var f=s(r(90));f.Axios=o,f.create=function(e){return s(a(f.defaults,e))},f.Cancel=r(94),f.CancelToken=r(212),f.isCancel=r(89),f.all=function(e){return Promise.all(e)},f.spread=r(213),e.exports=f,e.exports.default=f},function(e,t){
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
e.exports=function(e){return null!=e&&null!=e.constructor&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)}},function(e,t,r){"use strict";var n=r(5),i=r(88),o=r(201),a=r(202),s=r(93);function f(e){this.defaults=e,this.interceptors={request:new o,response:new o}}f.prototype.request=function(e){"string"==typeof e?(e=arguments[1]||{}).url=arguments[0]:e=e||{},(e=s(this.defaults,e)).method=e.method?e.method.toLowerCase():"get";var t=[a,void 0],r=Promise.resolve(e);for(this.interceptors.request.forEach((function(e){t.unshift(e.fulfilled,e.rejected)})),this.interceptors.response.forEach((function(e){t.push(e.fulfilled,e.rejected)}));t.length;)r=r.then(t.shift(),t.shift());return r},f.prototype.getUri=function(e){return e=s(this.defaults,e),i(e.url,e.params,e.paramsSerializer).replace(/^\?/,"")},n.forEach(["delete","get","head","options"],(function(e){f.prototype[e]=function(t,r){return this.request(n.merge(r||{},{method:e,url:t}))}})),n.forEach(["post","put","patch"],(function(e){f.prototype[e]=function(t,r,i){return this.request(n.merge(i||{},{method:e,url:t,data:r}))}})),e.exports=f},function(e,t,r){"use strict";var n=r(5);function i(){this.handlers=[]}i.prototype.use=function(e,t){return this.handlers.push({fulfilled:e,rejected:t}),this.handlers.length-1},i.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},i.prototype.forEach=function(e){n.forEach(this.handlers,(function(t){null!==t&&e(t)}))},e.exports=i},function(e,t,r){"use strict";var n=r(5),i=r(203),o=r(89),a=r(90),s=r(210),f=r(211);function c(e){e.cancelToken&&e.cancelToken.throwIfRequested()}e.exports=function(e){return c(e),e.baseURL&&!s(e.url)&&(e.url=f(e.baseURL,e.url)),e.headers=e.headers||{},e.data=i(e.data,e.headers,e.transformRequest),e.headers=n.merge(e.headers.common||{},e.headers[e.method]||{},e.headers||{}),n.forEach(["delete","get","head","post","put","patch","common"],(function(t){delete e.headers[t]})),(e.adapter||a.adapter)(e).then((function(t){return c(e),t.data=i(t.data,t.headers,e.transformResponse),t}),(function(t){return o(t)||(c(e),t&&t.response&&(t.response.data=i(t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)}))}},function(e,t,r){"use strict";var n=r(5);e.exports=function(e,t,r){return n.forEach(r,(function(r){e=r(e,t)})),e}},function(e,t,r){"use strict";var n=r(5);e.exports=function(e,t){n.forEach(e,(function(r,n){n!==t&&n.toUpperCase()===t.toUpperCase()&&(e[t]=r,delete e[n])}))}},function(e,t,r){"use strict";var n=r(92);e.exports=function(e,t,r){var i=r.config.validateStatus;!i||i(r.status)?e(r):t(n("Request failed with status code "+r.status,r.config,null,r.request,r))}},function(e,t,r){"use strict";e.exports=function(e,t,r,n,i){return e.config=t,r&&(e.code=r),e.request=n,e.response=i,e.isAxiosError=!0,e.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code}},e}},function(e,t,r){"use strict";var n=r(5),i=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,r,o,a={};return e?(n.forEach(e.split("\n"),(function(e){if(o=e.indexOf(":"),t=n.trim(e.substr(0,o)).toLowerCase(),r=n.trim(e.substr(o+1)),t){if(a[t]&&i.indexOf(t)>=0)return;a[t]="set-cookie"===t?(a[t]?a[t]:[]).concat([r]):a[t]?a[t]+", "+r:r}})),a):a}},function(e,t,r){"use strict";var n=r(5);e.exports=n.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),r=document.createElement("a");function i(e){var n=e;return t&&(r.setAttribute("href",n),n=r.href),r.setAttribute("href",n),{href:r.href,protocol:r.protocol?r.protocol.replace(/:$/,""):"",host:r.host,search:r.search?r.search.replace(/^\?/,""):"",hash:r.hash?r.hash.replace(/^#/,""):"",hostname:r.hostname,port:r.port,pathname:"/"===r.pathname.charAt(0)?r.pathname:"/"+r.pathname}}return e=i(window.location.href),function(t){var r=n.isString(t)?i(t):t;return r.protocol===e.protocol&&r.host===e.host}}():function(){return!0}},function(e,t,r){"use strict";var n=r(5);e.exports=n.isStandardBrowserEnv()?{write:function(e,t,r,i,o,a){var s=[];s.push(e+"="+encodeURIComponent(t)),n.isNumber(r)&&s.push("expires="+new Date(r).toGMTString()),n.isString(i)&&s.push("path="+i),n.isString(o)&&s.push("domain="+o),!0===a&&s.push("secure"),document.cookie=s.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},function(e,t,r){"use strict";e.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},function(e,t,r){"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},function(e,t,r){"use strict";var n=r(94);function i(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise((function(e){t=e}));var r=this;e((function(e){r.reason||(r.reason=new n(e),t(r.reason))}))}i.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},i.source=function(){var e;return{token:new i((function(t){e=t})),cancel:e}},e.exports=i},function(e,t,r){"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},function(e,t,r){"use strict";r.r(t);r(97);const n=e=>{document.location.href=`${e}.html`};window.onload=()=>{const e=window.location.pathname;if("/index.html"!==e&&"/"!==e){null==localStorage.getItem("userData")&&n("index")}},function(){const e=document.getElementById("LogoutButton");e&&e.addEventListener("click",e=>{e.preventDefault(),localStorage.removeItem("userData"),n("index")})}();var i=r(95),o=r.n(i),a=r(96);const s=r.n(a).a.create({baseURL:"https://cors-anywhere.herokuapp.com/https://api-terminarz.herokuapp.com/api",timeout:1500});async function f(e,t,r){try{const n=await s.post(r,{login:e,password:t});return{data:n.data,status:n.status}}catch(e){return!1}}document.getElementById("logButton").addEventListener("click",async e=>{e.preventDefault();const t=document.getElementById("logLogin").value,r=document.getElementById("logPassword").value,i=await f(t,r,"./auth");if(!1!==i){if(200===i.status){document.getElementById("logFailure").innerHTML="";const e={token:i.data,userId:o.a.decode(i.data)._id};localStorage.setItem("userData",JSON.stringify(e)),n("new")}}else document.getElementById("logFailure").innerHTML="Nieprawidłowy login lub hasło"}),document.getElementById("regButton").addEventListener("click",async e=>{e.preventDefault();const t=document.getElementById("regLogin").value,r=document.getElementById("regPassword").value,i=document.getElementById("regConfirmPassword").value;let o=document.getElementById("regFailure");if(r!==i)return void(o.innerHTML="Wpisane hasła różnią się ");const a=await f(t,r,"./users");!1!==a?(200==a.status&&(o.innerHTML="",userId=a.data._id,n("new")),(e=>console.log(e))(a)):o.innerHTML="Użytkownik został już zarejestowany"})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NhZmUtYnVmZmVyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pbmhlcml0cy9pbmhlcml0c19icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9idWZmZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JuLmpzL2xpYi9ibi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21pbmltYWxpc3RpYy1hc3NlcnQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VsbGlwdGljL2xpYi9lbGxpcHRpYy91dGlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGFzaC5qcy9saWIvaGFzaC91dGlscy5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jaXBoZXItYmFzZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9fc3RyZWFtX2R1cGxleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3RyZWFtLWJyb3dzZXJpZnkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JhbmRvbWJ5dGVzL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NoYS5qcy9oYXNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLXV0aWwtaXMvbGliL3V0aWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NyZWF0ZS1oYXNoL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2J1ZmZlci14b3IvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hhc2guanMvbGliL2hhc2gvY29tbW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hc24xLmpzL2xpYi9hc24xLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hc24xLmpzL2xpYi9hc24xL2Jhc2UvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb2Nlc3MtbmV4dGljay1hcmdzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy91dGlsL3V0aWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL2Flcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXZwX2J5dGVzdG9rZXkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VsbGlwdGljL2xpYi9lbGxpcHRpYy9jdXJ2ZS9iYXNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wYXJzZS1hc24xL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qc29ud2VidG9rZW4vbGliL0pzb25XZWJUb2tlbkVycm9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qd3MvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2V2ZW50cy9ldmVudHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9yZWFkYWJsZS1icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL19zdHJlYW1fd3JpdGFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0cmluZ19kZWNvZGVyL2xpYi9zdHJpbmdfZGVjb2Rlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWQ1LmpzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yaXBlbWQxNjAvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NoYS5qcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGVzLmpzL2xpYi9kZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL21vZGVzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9icm9yYW5kL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LXJzYS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZWxsaXB0aWMvbGliL2VsbGlwdGljLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lbGxpcHRpYy9saWIvZWxsaXB0aWMvY3VydmVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oYXNoLmpzL2xpYi9oYXNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qc29ud2VidG9rZW4vZGVjb2RlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pc2FycmF5L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qd3MvbGliL2RhdGEtc3RyZWFtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL19zdHJlYW1fcmVhZGFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvaW50ZXJuYWwvc3RyZWFtcy9zdHJlYW0tYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9pbnRlcm5hbC9zdHJlYW1zL2Rlc3Ryb3kuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvX3N0cmVhbV90cmFuc2Zvcm0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2p3YS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGFzaC1iYXNlL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zaGEuanMvc2hhMjU2LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zaGEuanMvc2hhNTEyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jcmVhdGUtaG1hYy9icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jcmVhdGUtaGFzaC9tZDUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Bia2RmMi9icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wYmtkZjIvbGliL3ByZWNvbmRpdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcGJrZGYyL2xpYi9kZWZhdWx0LWVuY29kaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wYmtkZjIvbGliL3N5bmMtYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1hZXMvbW9kZXMvY3RyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9pbmNyMzIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL2F1dGhDaXBoZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL3N0cmVhbUNpcGhlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGlmZmllLWhlbGxtYW4vbGliL2dlbmVyYXRlUHJpbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21pbGxlci1yYWJpbi9saWIvbXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21pbmltYWxpc3RpYy1jcnlwdG8tdXRpbHMvbGliL3V0aWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lbGxpcHRpYy9saWIvZWxsaXB0aWMvY3VydmUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hhc2guanMvbGliL2hhc2gvc2hhL2NvbW1vbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGFzaC5qcy9saWIvaGFzaC9zaGEvMjU2LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oYXNoLmpzL2xpYi9oYXNoL3NoYS81MTIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FzbjEuanMvbGliL2FzbjEvYmFzZS9idWZmZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FzbjEuanMvbGliL2FzbjEvY29uc3RhbnRzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hc24xLmpzL2xpYi9hc24xL2RlY29kZXJzL2Rlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXNuMS5qcy9saWIvYXNuMS9lbmNvZGVycy9kZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3B1YmxpYy1lbmNyeXB0L21nZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHVibGljLWVuY3J5cHQveG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wdWJsaWMtZW5jcnlwdC93aXRoUHVibGljLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qd3MvbGliL3Rvc3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qc29ud2VidG9rZW4vbGliL05vdEJlZm9yZUVycm9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qc29ud2VidG9rZW4vbGliL1Rva2VuRXhwaXJlZEVycm9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qc29ud2VidG9rZW4vbGliL3RpbWVzcGFuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qc29ud2VidG9rZW4vbGliL3BzU3VwcG9ydGVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9iaW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9idWlsZFVSTC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9pc0NhbmNlbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2RlZmF1bHRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvYWRhcHRlcnMveGhyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9jcmVhdGVFcnJvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvbWVyZ2VDb25maWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvQ2FuY2VsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qc29ud2VidG9rZW4vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qd3MvbGliL3NpZ24tc3RyZWFtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYXNlNjQtanMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2llZWU3NTQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvaW50ZXJuYWwvc3RyZWFtcy9CdWZmZXJMaXN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy90aW1lcnMtYnJvd3NlcmlmeS9tYWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZXRpbW1lZGlhdGUvc2V0SW1tZWRpYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy91dGlsLWRlcHJlY2F0ZS9icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL19zdHJlYW1fcGFzc3Rocm91Z2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS93cml0YWJsZS1icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vZHVwbGV4LWJyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS90cmFuc2Zvcm0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9wYXNzdGhyb3VnaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdXRpbC9zdXBwb3J0L2lzQnVmZmVyQnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnVmZmVyLWVxdWFsLWNvbnN0YW50LXRpbWUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zaGEuanMvc2hhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zaGEuanMvc2hhMS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2hhLmpzL3NoYTIyNC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2hhLmpzL3NoYTM4NC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY3JlYXRlLWhtYWMvbGVnYWN5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LXNpZ24vYWxnb3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Bia2RmMi9saWIvYXN5bmMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktY2lwaGVyL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktZGVzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kZXMuanMvbGliL2Rlcy91dGlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGVzLmpzL2xpYi9kZXMvY2lwaGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kZXMuanMvbGliL2Rlcy9kZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Rlcy5qcy9saWIvZGVzL2NiYy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGVzLmpzL2xpYi9kZXMvZWRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9lbmNyeXB0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL21vZGVzL2VjYi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1hZXMvbW9kZXMvY2JjLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9tb2Rlcy9jZmIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL21vZGVzL2NmYjguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL21vZGVzL2NmYjEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL21vZGVzL29mYi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1hZXMvZ2hhc2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL2RlY3J5cHRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1kZXMvbW9kZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RpZmZpZS1oZWxsbWFuL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL21vZHVsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGlmZmllLWhlbGxtYW4vbGliL2RoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LXNpZ24vYnJvd3Nlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1zaWduL2Jyb3dzZXIvc2lnbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZWxsaXB0aWMvbGliL2VsbGlwdGljL2N1cnZlL3Nob3J0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lbGxpcHRpYy9saWIvZWxsaXB0aWMvY3VydmUvbW9udC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZWxsaXB0aWMvbGliL2VsbGlwdGljL2N1cnZlL2Vkd2FyZHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hhc2guanMvbGliL2hhc2gvc2hhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oYXNoLmpzL2xpYi9oYXNoL3NoYS8xLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oYXNoLmpzL2xpYi9oYXNoL3NoYS8yMjQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hhc2guanMvbGliL2hhc2gvc2hhLzM4NC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGFzaC5qcy9saWIvaGFzaC9yaXBlbWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hhc2guanMvbGliL2hhc2gvaG1hYy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZWxsaXB0aWMvbGliL2VsbGlwdGljL3ByZWNvbXB1dGVkL3NlY3AyNTZrMS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZWxsaXB0aWMvbGliL2VsbGlwdGljL2VjL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9obWFjLWRyYmcvbGliL2htYWMtZHJiZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZWxsaXB0aWMvbGliL2VsbGlwdGljL2VjL2tleS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZWxsaXB0aWMvbGliL2VsbGlwdGljL2VjL3NpZ25hdHVyZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZWxsaXB0aWMvbGliL2VsbGlwdGljL2VkZHNhL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lbGxpcHRpYy9saWIvZWxsaXB0aWMvZWRkc2Eva2V5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lbGxpcHRpYy9saWIvZWxsaXB0aWMvZWRkc2Evc2lnbmF0dXJlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wYXJzZS1hc24xL2FzbjEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FzbjEuanMvbGliL2FzbjEvYXBpLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy92bS1icm93c2VyaWZ5L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hc24xLmpzL2xpYi9hc24xL2Jhc2UvcmVwb3J0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FzbjEuanMvbGliL2FzbjEvYmFzZS9ub2RlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hc24xLmpzL2xpYi9hc24xL2NvbnN0YW50cy9kZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FzbjEuanMvbGliL2FzbjEvZGVjb2RlcnMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FzbjEuanMvbGliL2FzbjEvZGVjb2RlcnMvcGVtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hc24xLmpzL2xpYi9hc24xL2VuY29kZXJzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hc24xLmpzL2xpYi9hc24xL2VuY29kZXJzL3BlbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcGFyc2UtYXNuMS9jZXJ0aWZpY2F0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcGFyc2UtYXNuMS9maXhQcm9jLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LXNpZ24vYnJvd3Nlci92ZXJpZnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NyZWF0ZS1lY2RoL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3B1YmxpYy1lbmNyeXB0L2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3B1YmxpYy1lbmNyeXB0L3B1YmxpY0VuY3J5cHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3B1YmxpYy1lbmNyeXB0L3ByaXZhdGVEZWNyeXB0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yYW5kb21maWxsL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VjZHNhLXNpZy1mb3JtYXR0ZXIvc3JjL2VjZHNhLXNpZy1mb3JtYXR0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VjZHNhLXNpZy1mb3JtYXR0ZXIvc3JjL3BhcmFtLWJ5dGVzLWZvci1hbGcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2p3cy9saWIvdmVyaWZ5LXN0cmVhbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanNvbndlYnRva2VuL3ZlcmlmeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanNvbndlYnRva2VuL25vZGVfbW9kdWxlcy9tcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2VtdmVyL3NlbXZlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanNvbndlYnRva2VuL3NpZ24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC5pbmNsdWRlcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLmlzYm9vbGVhbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLmlzaW50ZWdlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLmlzbnVtYmVyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2guaXNwbGFpbm9iamVjdC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLmlzc3RyaW5nL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gub25jZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2F4aW9zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9ub2RlX21vZHVsZXMvaXMtYnVmZmVyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9BeGlvcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvSW50ZXJjZXB0b3JNYW5hZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9kaXNwYXRjaFJlcXVlc3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL3RyYW5zZm9ybURhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL25vcm1hbGl6ZUhlYWRlck5hbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL3NldHRsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvZW5oYW5jZUVycm9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9wYXJzZUhlYWRlcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzVVJMU2FtZU9yaWdpbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvY29va2llcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvY29tYmluZVVSTHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvQ2FuY2VsVG9rZW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3NwcmVhZC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvY2hhbmdlUGFnZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvTG9nT3V0LmpzIiwid2VicGFjazovLy8uL3NyYy9BUElDb21tdW5pY2F0aW9uL2F4aW9zSW5zdGF0bmNlLmpzIiwid2VicGFjazovLy8uL3NyYy9BUElDb21tdW5pY2F0aW9uL1VzZXJzLmpzIiwid2VicGFjazovLy8uL3NyYy9qcy9Mb2dnaW5nLmpzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiYnVmZmVyIiwiQnVmZmVyIiwiY29weVByb3BzIiwic3JjIiwiZHN0IiwiU2FmZUJ1ZmZlciIsImFyZyIsImVuY29kaW5nT3JPZmZzZXQiLCJsZW5ndGgiLCJmcm9tIiwiYWxsb2MiLCJhbGxvY1Vuc2FmZSIsImFsbG9jVW5zYWZlU2xvdyIsIlR5cGVFcnJvciIsInNpemUiLCJmaWxsIiwiZW5jb2RpbmciLCJidWYiLCJ1bmRlZmluZWQiLCJTbG93QnVmZmVyIiwiY3RvciIsInN1cGVyQ3RvciIsInN1cGVyXyIsImNvbnN0cnVjdG9yIiwid3JpdGFibGUiLCJjb25maWd1cmFibGUiLCJUZW1wQ3RvciIsImJhc2U2NCIsImllZWU3NTQiLCJpc0FycmF5Iiwia01heExlbmd0aCIsIlRZUEVEX0FSUkFZX1NVUFBPUlQiLCJjcmVhdGVCdWZmZXIiLCJ0aGF0IiwiUmFuZ2VFcnJvciIsIlVpbnQ4QXJyYXkiLCJfX3Byb3RvX18iLCJ0aGlzIiwiRXJyb3IiLCJBcnJheUJ1ZmZlciIsImFycmF5IiwiYnl0ZU9mZnNldCIsImJ5dGVMZW5ndGgiLCJmcm9tQXJyYXlMaWtlIiwiZnJvbUFycmF5QnVmZmVyIiwic3RyaW5nIiwiaXNFbmNvZGluZyIsImFjdHVhbCIsIndyaXRlIiwic2xpY2UiLCJmcm9tU3RyaW5nIiwib2JqIiwiaXNCdWZmZXIiLCJsZW4iLCJjaGVja2VkIiwiY29weSIsInZhbCIsInR5cGUiLCJkYXRhIiwiZnJvbU9iamVjdCIsImFzc2VydFNpemUiLCJ0b1N0cmluZyIsImlzVmlldyIsImxvd2VyZWRDYXNlIiwidXRmOFRvQnl0ZXMiLCJiYXNlNjRUb0J5dGVzIiwidG9Mb3dlckNhc2UiLCJzbG93VG9TdHJpbmciLCJzdGFydCIsImVuZCIsImhleFNsaWNlIiwidXRmOFNsaWNlIiwiYXNjaWlTbGljZSIsImxhdGluMVNsaWNlIiwiYmFzZTY0U2xpY2UiLCJ1dGYxNmxlU2xpY2UiLCJzd2FwIiwiYiIsImJpZGlyZWN0aW9uYWxJbmRleE9mIiwiZGlyIiwiaXNOYU4iLCJhcnJheUluZGV4T2YiLCJpbmRleE9mIiwibGFzdEluZGV4T2YiLCJhcnIiLCJpbmRleFNpemUiLCJhcnJMZW5ndGgiLCJ2YWxMZW5ndGgiLCJTdHJpbmciLCJyZWFkIiwicmVhZFVJbnQxNkJFIiwiZm91bmRJbmRleCIsImZvdW5kIiwiaiIsImhleFdyaXRlIiwib2Zmc2V0IiwiTnVtYmVyIiwicmVtYWluaW5nIiwic3RyTGVuIiwicGFyc2VkIiwicGFyc2VJbnQiLCJzdWJzdHIiLCJ1dGY4V3JpdGUiLCJibGl0QnVmZmVyIiwiYXNjaWlXcml0ZSIsInN0ciIsImJ5dGVBcnJheSIsInB1c2giLCJjaGFyQ29kZUF0IiwiYXNjaWlUb0J5dGVzIiwibGF0aW4xV3JpdGUiLCJiYXNlNjRXcml0ZSIsInVjczJXcml0ZSIsInVuaXRzIiwiaGkiLCJsbyIsInV0ZjE2bGVUb0J5dGVzIiwiZnJvbUJ5dGVBcnJheSIsIk1hdGgiLCJtaW4iLCJyZXMiLCJzZWNvbmRCeXRlIiwidGhpcmRCeXRlIiwiZm91cnRoQnl0ZSIsInRlbXBDb2RlUG9pbnQiLCJmaXJzdEJ5dGUiLCJjb2RlUG9pbnQiLCJieXRlc1BlclNlcXVlbmNlIiwiY29kZVBvaW50cyIsIk1BWF9BUkdVTUVOVFNfTEVOR1RIIiwiZnJvbUNoYXJDb2RlIiwiYXBwbHkiLCJkZWNvZGVDb2RlUG9pbnRzQXJyYXkiLCJJTlNQRUNUX01BWF9CWVRFUyIsImdsb2JhbCIsImZvbyIsInN1YmFycmF5IiwiZSIsInR5cGVkQXJyYXlTdXBwb3J0IiwicG9vbFNpemUiLCJfYXVnbWVudCIsInNwZWNpZXMiLCJfaXNCdWZmZXIiLCJjb21wYXJlIiwiYSIsIngiLCJ5IiwiY29uY2F0IiwibGlzdCIsInBvcyIsInN3YXAxNiIsInN3YXAzMiIsInN3YXA2NCIsImFyZ3VtZW50cyIsImVxdWFscyIsImluc3BlY3QiLCJtYXgiLCJtYXRjaCIsImpvaW4iLCJ0YXJnZXQiLCJ0aGlzU3RhcnQiLCJ0aGlzRW5kIiwidGhpc0NvcHkiLCJ0YXJnZXRDb3B5IiwiaW5jbHVkZXMiLCJpc0Zpbml0ZSIsInRvSlNPTiIsIkFycmF5IiwiX2FyciIsInJldCIsIm91dCIsInRvSGV4IiwiYnl0ZXMiLCJjaGVja09mZnNldCIsImV4dCIsImNoZWNrSW50Iiwib2JqZWN0V3JpdGVVSW50MTYiLCJsaXR0bGVFbmRpYW4iLCJvYmplY3RXcml0ZVVJbnQzMiIsImNoZWNrSUVFRTc1NCIsIndyaXRlRmxvYXQiLCJub0Fzc2VydCIsIndyaXRlRG91YmxlIiwibmV3QnVmIiwic2xpY2VMZW4iLCJyZWFkVUludExFIiwibXVsIiwicmVhZFVJbnRCRSIsInJlYWRVSW50OCIsInJlYWRVSW50MTZMRSIsInJlYWRVSW50MzJMRSIsInJlYWRVSW50MzJCRSIsInJlYWRJbnRMRSIsInBvdyIsInJlYWRJbnRCRSIsInJlYWRJbnQ4IiwicmVhZEludDE2TEUiLCJyZWFkSW50MTZCRSIsInJlYWRJbnQzMkxFIiwicmVhZEludDMyQkUiLCJyZWFkRmxvYXRMRSIsInJlYWRGbG9hdEJFIiwicmVhZERvdWJsZUxFIiwicmVhZERvdWJsZUJFIiwid3JpdGVVSW50TEUiLCJ3cml0ZVVJbnRCRSIsIndyaXRlVUludDgiLCJmbG9vciIsIndyaXRlVUludDE2TEUiLCJ3cml0ZVVJbnQxNkJFIiwid3JpdGVVSW50MzJMRSIsIndyaXRlVUludDMyQkUiLCJ3cml0ZUludExFIiwibGltaXQiLCJzdWIiLCJ3cml0ZUludEJFIiwid3JpdGVJbnQ4Iiwid3JpdGVJbnQxNkxFIiwid3JpdGVJbnQxNkJFIiwid3JpdGVJbnQzMkxFIiwid3JpdGVJbnQzMkJFIiwid3JpdGVGbG9hdExFIiwid3JpdGVGbG9hdEJFIiwid3JpdGVEb3VibGVMRSIsIndyaXRlRG91YmxlQkUiLCJ0YXJnZXRTdGFydCIsInNldCIsImNvZGUiLCJJTlZBTElEX0JBU0U2NF9SRSIsIkluZmluaXR5IiwibGVhZFN1cnJvZ2F0ZSIsInRvQnl0ZUFycmF5IiwidHJpbSIsInJlcGxhY2UiLCJzdHJpbmd0cmltIiwiYmFzZTY0Y2xlYW4iLCJhc3NlcnQiLCJtc2ciLCJpbmhlcml0cyIsIkJOIiwibnVtYmVyIiwiYmFzZSIsImVuZGlhbiIsImlzQk4iLCJuZWdhdGl2ZSIsIndvcmRzIiwicmVkIiwiX2luaXQiLCJ3b3JkU2l6ZSIsInBhcnNlSGV4IiwicGFyc2VCYXNlIiwibnVtIiwibGVmdCIsInJpZ2h0IiwiY21wIiwiX2luaXROdW1iZXIiLCJfaW5pdEFycmF5IiwiX3BhcnNlSGV4IiwiX3BhcnNlQmFzZSIsInN0cmlwIiwidG9BcnJheSIsImNlaWwiLCJ3Iiwib2ZmIiwibGltYkxlbiIsImxpbWJQb3ciLCJ0b3RhbCIsIm1vZCIsIndvcmQiLCJpbXVsbiIsIl9pYWRkbiIsImRlc3QiLCJjbG9uZSIsIl9leHBhbmQiLCJfbm9ybVNpZ24iLCJ6ZXJvcyIsImdyb3VwU2l6ZXMiLCJncm91cEJhc2VzIiwic21hbGxNdWxUbyIsInNlbGYiLCJjYXJyeSIsImsiLCJuY2FycnkiLCJyd29yZCIsIm1heEoiLCJwYWRkaW5nIiwiZ3JvdXBTaXplIiwiZ3JvdXBCYXNlIiwiaXNaZXJvIiwibW9kbiIsImlkaXZuIiwidG9OdW1iZXIiLCJ0b0J1ZmZlciIsInRvQXJyYXlMaWtlIiwiQXJyYXlUeXBlIiwicmVxTGVuZ3RoIiwicSIsImFuZGxuIiwiaXVzaHJuIiwiY2x6MzIiLCJfY291bnRCaXRzIiwiX3plcm9CaXRzIiwiYml0TGVuZ3RoIiwiemVyb0JpdHMiLCJ0b1R3b3MiLCJ3aWR0aCIsImFicyIsImlub3RuIiwiaWFkZG4iLCJmcm9tVHdvcyIsInRlc3RuIiwibm90biIsImluZWciLCJpc05lZyIsIm5lZyIsIml1b3IiLCJpb3IiLCJvciIsInVvciIsIml1YW5kIiwiaWFuZCIsImFuZCIsInVhbmQiLCJpdXhvciIsIml4b3IiLCJ4b3IiLCJ1eG9yIiwiYnl0ZXNOZWVkZWQiLCJiaXRzTGVmdCIsInNldG4iLCJiaXQiLCJ3Yml0IiwiaWFkZCIsImlzdWIiLCJhZGQiLCJjb21iMTBNdWxUbyIsIm1pZCIsImEwIiwiYWwwIiwiYWgwIiwiYTEiLCJhbDEiLCJhaDEiLCJhMiIsImFsMiIsImFoMiIsImEzIiwiYWwzIiwiYWgzIiwiYTQiLCJhbDQiLCJhaDQiLCJhNSIsImFsNSIsImFoNSIsImE2IiwiYWw2IiwiYWg2IiwiYTciLCJhbDciLCJhaDciLCJhOCIsImFsOCIsImFoOCIsImE5IiwiYWw5IiwiYWg5IiwiYjAiLCJibDAiLCJiaDAiLCJiMSIsImJsMSIsImJoMSIsImIyIiwiYmwyIiwiYmgyIiwiYjMiLCJibDMiLCJiaDMiLCJiNCIsImJsNCIsImJoNCIsImI1IiwiYmw1IiwiYmg1IiwiYjYiLCJibDYiLCJiaDYiLCJiNyIsImJsNyIsImJoNyIsImI4IiwiYmw4IiwiYmg4IiwiYjkiLCJibDkiLCJiaDkiLCJ3MCIsImltdWwiLCJ3MSIsIncyIiwidzMiLCJ3NCIsInc1IiwidzYiLCJ3NyIsInc4IiwidzkiLCJ3MTAiLCJ3MTEiLCJ3MTIiLCJ3MTMiLCJ3MTQiLCJ3MTUiLCJ3MTYiLCJ3MTciLCJ3MTgiLCJqdW1ib011bFRvIiwiRkZUTSIsIm11bHAiLCJtdWxUbyIsImhuY2FycnkiLCJiaWdNdWxUbyIsIm1ha2VSQlQiLCJOIiwicmV2QmluIiwicmIiLCJwZXJtdXRlIiwicmJ0IiwicndzIiwiaXdzIiwicnR3cyIsIml0d3MiLCJ0cmFuc2Zvcm0iLCJydHdkZiIsImNvcyIsIlBJIiwiaXR3ZGYiLCJzaW4iLCJydHdkZl8iLCJpdHdkZl8iLCJyZSIsImllIiwicm8iLCJpbyIsInJ4IiwiZ3Vlc3NMZW4xM2IiLCJvZGQiLCJjb25qdWdhdGUiLCJub3JtYWxpemUxM2IiLCJ3cyIsInJvdW5kIiwiY29udmVydDEzYiIsInN0dWIiLCJwaCIsIl8iLCJyd3N0IiwiaXdzdCIsIm5yd3MiLCJucndzdCIsIm5pd3N0Iiwicm13cyIsIm11bGYiLCJtdWxuIiwic3FyIiwiaXNxciIsInRvQml0QXJyYXkiLCJpdXNobG4iLCJiaXRzIiwiY2FycnlNYXNrIiwibmV3Q2FycnkiLCJpc2hsbiIsImhpbnQiLCJleHRlbmRlZCIsImgiLCJtYXNrIiwibWFza2VkV29yZHMiLCJpc2hybiIsInNobG4iLCJ1c2hsbiIsInNocm4iLCJ1c2hybiIsImltYXNrbiIsIm1hc2tuIiwiaXN1Ym4iLCJhZGRuIiwic3VibiIsImlhYnMiLCJfaXNobG5zdWJtdWwiLCJzaGlmdCIsIl93b3JkRGl2IiwiYmhpIiwiZGlmZiIsInFqIiwiZGl2IiwiZGl2bW9kIiwicG9zaXRpdmUiLCJkaXZuIiwidW1vZCIsImRpdlJvdW5kIiwiZG0iLCJoYWxmIiwicjIiLCJhY2MiLCJlZ2NkIiwiQSIsIkIiLCJDIiwiRCIsImciLCJpc0V2ZW4iLCJ5cCIsInhwIiwiaW0iLCJpc09kZCIsImptIiwiZ2NkIiwiX2ludm1wIiwieDEiLCJ4MiIsImRlbHRhIiwiY21wbiIsImludm0iLCJiaW5jbiIsInVjbXAiLCJndG4iLCJndCIsImd0ZW4iLCJndGUiLCJsdG4iLCJsdCIsImx0ZW4iLCJsdGUiLCJlcW4iLCJlcSIsIlJlZCIsInRvUmVkIiwiY3R4IiwiY29udmVydFRvIiwiX2ZvcmNlUmVkIiwiZnJvbVJlZCIsImNvbnZlcnRGcm9tIiwiZm9yY2VSZWQiLCJyZWRBZGQiLCJyZWRJQWRkIiwicmVkU3ViIiwicmVkSVN1YiIsInJlZFNobCIsInNobCIsInJlZE11bCIsIl92ZXJpZnkyIiwicmVkSU11bCIsInJlZFNxciIsIl92ZXJpZnkxIiwicmVkSVNxciIsInJlZFNxcnQiLCJzcXJ0IiwicmVkSW52bSIsInJlZE5lZyIsInJlZFBvdyIsInByaW1lcyIsImsyNTYiLCJwMjI0IiwicDE5MiIsInAyNTUxOSIsIk1QcmltZSIsInRtcCIsIl90bXAiLCJLMjU2IiwiUDIyNCIsIlAxOTIiLCJQMjU1MTkiLCJwcmltZSIsIl9wcmltZSIsIk1vbnQiLCJpbW9kIiwicmludiIsIm1pbnYiLCJpcmVkdWNlIiwicmxlbiIsInNwbGl0IiwiaW11bEsiLCJpbnB1dCIsIm91dHB1dCIsIm91dExlbiIsInByZXYiLCJuZXh0IiwibW9kMyIsIm9uZSIsIm5PbmUiLCJscG93IiwieiIsImludiIsInduZCIsImN1cnJlbnQiLCJjdXJyZW50TGVuIiwibW9udCIsInUiLCJjYWNoZWRTZXRUaW1lb3V0IiwiY2FjaGVkQ2xlYXJUaW1lb3V0IiwicHJvY2VzcyIsImRlZmF1bHRTZXRUaW1vdXQiLCJkZWZhdWx0Q2xlYXJUaW1lb3V0IiwicnVuVGltZW91dCIsImZ1biIsInNldFRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJjdXJyZW50UXVldWUiLCJxdWV1ZSIsImRyYWluaW5nIiwicXVldWVJbmRleCIsImNsZWFuVXBOZXh0VGljayIsImRyYWluUXVldWUiLCJ0aW1lb3V0IiwicnVuIiwibWFya2VyIiwicnVuQ2xlYXJUaW1lb3V0IiwiSXRlbSIsIm5vb3AiLCJuZXh0VGljayIsImFyZ3MiLCJ0aXRsZSIsImJyb3dzZXIiLCJlbnYiLCJhcmd2IiwidmVyc2lvbiIsInZlcnNpb25zIiwib24iLCJhZGRMaXN0ZW5lciIsIm9uY2UiLCJyZW1vdmVMaXN0ZW5lciIsInJlbW92ZUFsbExpc3RlbmVycyIsImVtaXQiLCJwcmVwZW5kTGlzdGVuZXIiLCJwcmVwZW5kT25jZUxpc3RlbmVyIiwibGlzdGVuZXJzIiwiYmluZGluZyIsImN3ZCIsImNoZGlyIiwidW1hc2siLCJpc09iamVjdCIsImlzRnVuY3Rpb24iLCJmb3JFYWNoIiwiZm4iLCJpc0FycmF5QnVmZmVyIiwiaXNGb3JtRGF0YSIsIkZvcm1EYXRhIiwiaXNBcnJheUJ1ZmZlclZpZXciLCJpc1N0cmluZyIsImlzTnVtYmVyIiwiaXNVbmRlZmluZWQiLCJpc0RhdGUiLCJpc0ZpbGUiLCJpc0Jsb2IiLCJpc1N0cmVhbSIsInBpcGUiLCJpc1VSTFNlYXJjaFBhcmFtcyIsIlVSTFNlYXJjaFBhcmFtcyIsImlzU3RhbmRhcmRCcm93c2VyRW52IiwibmF2aWdhdG9yIiwicHJvZHVjdCIsIndpbmRvdyIsImRvY3VtZW50IiwibWVyZ2UiLCJyZXN1bHQiLCJhc3NpZ25WYWx1ZSIsImRlZXBNZXJnZSIsImV4dGVuZCIsInRoaXNBcmciLCJlcXVhbCIsInV0aWxzIiwibWluQXNzZXJ0IiwibWluVXRpbHMiLCJ6ZXJvMiIsImVuY29kZSIsImdldE5BRiIsIm5hZiIsImdldEpTRiIsImsxIiwiazIiLCJqc2YiLCJkMSIsImQyIiwidTEiLCJ1MiIsIm04IiwibTE0IiwibTI0IiwiY2FjaGVkUHJvcGVydHkiLCJjb21wdXRlciIsInBhcnNlQnl0ZXMiLCJpbnRGcm9tTEUiLCJpc1N1cnJvZ2F0ZVBhaXIiLCJodG9ubCIsInplcm84IiwiZW5jIiwidG9IZXgzMiIsImpvaW4zMiIsInNwbGl0MzIiLCJyb3RyMzIiLCJyb3RsMzIiLCJzdW0zMiIsInN1bTMyXzMiLCJzdW0zMl80Iiwic3VtMzJfNSIsInN1bTY0IiwiYWgiLCJhbCIsImJoIiwic3VtNjRfaGkiLCJibCIsInN1bTY0X2xvIiwic3VtNjRfNF9oaSIsImNoIiwiY2wiLCJkaCIsImRsIiwic3VtNjRfNF9sbyIsInN1bTY0XzVfaGkiLCJlaCIsImVsIiwic3VtNjRfNV9sbyIsInJvdHI2NF9oaSIsInJvdHI2NF9sbyIsInNocjY0X2hpIiwic2hyNjRfbG8iLCJGdW5jdGlvbiIsIlRyYW5zZm9ybSIsIlN0cmluZ0RlY29kZXIiLCJDaXBoZXJCYXNlIiwiaGFzaE1vZGUiLCJfZmluYWxPckRpZ2VzdCIsImZpbmFsIiwiX2ZpbmFsIiwiX19maW5hbCIsIl9kZWNvZGVyIiwiX2VuY29kaW5nIiwidXBkYXRlIiwiaW5wdXRFbmMiLCJvdXRwdXRFbmMiLCJvdXREYXRhIiwiX3VwZGF0ZSIsIl90b1N0cmluZyIsInNldEF1dG9QYWRkaW5nIiwiZ2V0QXV0aFRhZyIsInNldEF1dGhUYWciLCJzZXRBQUQiLCJfdHJhbnNmb3JtIiwiZXJyIiwiX2ZsdXNoIiwiZG9uZSIsImZpbiIsInBuYSIsIm9iamVjdEtleXMiLCJrZXlzIiwiRHVwbGV4IiwidXRpbCIsIlJlYWRhYmxlIiwiV3JpdGFibGUiLCJ2IiwibWV0aG9kIiwib3B0aW9ucyIsInJlYWRhYmxlIiwiYWxsb3dIYWxmT3BlbiIsIm9uZW5kIiwiX3dyaXRhYmxlU3RhdGUiLCJlbmRlZCIsIm9uRW5kTlQiLCJoaWdoV2F0ZXJNYXJrIiwiX3JlYWRhYmxlU3RhdGUiLCJkZXN0cm95ZWQiLCJfZGVzdHJveSIsImNiIiwiU3RyZWFtIiwiRUUiLCJFdmVudEVtaXR0ZXIiLCJQYXNzVGhyb3VnaCIsInNvdXJjZSIsIm9uZGF0YSIsImNodW5rIiwicGF1c2UiLCJvbmRyYWluIiwicmVzdW1lIiwiX2lzU3RkaW8iLCJvbmNsb3NlIiwiZGlkT25FbmQiLCJkZXN0cm95Iiwib25lcnJvciIsImVyIiwiY2xlYW51cCIsImxpc3RlbmVyQ291bnQiLCJNQVhfQllURVMiLCJNQVhfVUlOVDMyIiwiY3J5cHRvIiwibXNDcnlwdG8iLCJnZXRSYW5kb21WYWx1ZXMiLCJnZW5lcmF0ZWQiLCJIYXNoIiwiYmxvY2tTaXplIiwiZmluYWxTaXplIiwiX2Jsb2NrIiwiX2ZpbmFsU2l6ZSIsIl9ibG9ja1NpemUiLCJfbGVuIiwiYmxvY2siLCJhY2N1bSIsImFzc2lnbmVkIiwicmVtYWluZGVyIiwiZGlnZXN0IiwicmVtIiwibG93Qml0cyIsImhpZ2hCaXRzIiwiaGFzaCIsIl9oYXNoIiwib2JqZWN0VG9TdHJpbmciLCJpc0Jvb2xlYW4iLCJpc051bGwiLCJpc051bGxPclVuZGVmaW5lZCIsImlzU3ltYm9sIiwiaXNSZWdFeHAiLCJpc0Vycm9yIiwiaXNQcmltaXRpdmUiLCJNRDUiLCJSSVBFTUQxNjAiLCJzaGEiLCJCYXNlIiwiYWxnIiwiQmxvY2tIYXNoIiwicGVuZGluZyIsInBlbmRpbmdUb3RhbCIsIm91dFNpemUiLCJobWFjU3RyZW5ndGgiLCJwYWRMZW5ndGgiLCJfZGVsdGE4IiwiX2RlbHRhMzIiLCJfcGFkIiwiX2RpZ2VzdCIsImFzbjEiLCJiaWdudW0iLCJkZWZpbmUiLCJjb25zdGFudHMiLCJkZWNvZGVycyIsImVuY29kZXJzIiwiUmVwb3J0ZXIiLCJEZWNvZGVyQnVmZmVyIiwiRW5jb2RlckJ1ZmZlciIsIk5vZGUiLCJhcmcxIiwiYXJnMiIsImFyZzMiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIiwiZGVzY3JpcHRvcnMiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJmb3JtYXRSZWdFeHAiLCJmb3JtYXQiLCJmIiwib2JqZWN0cyIsIkpTT04iLCJzdHJpbmdpZnkiLCJkZXByZWNhdGUiLCJub0RlcHJlY2F0aW9uIiwid2FybmVkIiwidGhyb3dEZXByZWNhdGlvbiIsInRyYWNlRGVwcmVjYXRpb24iLCJjb25zb2xlIiwidHJhY2UiLCJlcnJvciIsImRlYnVnRW52aXJvbiIsImRlYnVncyIsIm9wdHMiLCJzZWVuIiwic3R5bGl6ZSIsInN0eWxpemVOb0NvbG9yIiwiZGVwdGgiLCJjb2xvcnMiLCJzaG93SGlkZGVuIiwiX2V4dGVuZCIsImN1c3RvbUluc3BlY3QiLCJzdHlsaXplV2l0aENvbG9yIiwiZm9ybWF0VmFsdWUiLCJzdHlsZVR5cGUiLCJzdHlsZSIsInN0eWxlcyIsInJlY3Vyc2VUaW1lcyIsInByaW1pdGl2ZSIsInNpbXBsZSIsImZvcm1hdFByaW1pdGl2ZSIsInZpc2libGVLZXlzIiwiaWR4IiwiYXJyYXlUb0hhc2giLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiZm9ybWF0RXJyb3IiLCJSZWdFeHAiLCJEYXRlIiwiYnJhY2VzIiwidG9VVENTdHJpbmciLCJmb3JtYXRQcm9wZXJ0eSIsImZvcm1hdEFycmF5IiwibWFwIiwicG9wIiwicmVkdWNlIiwiY3VyIiwibnVtTGluZXNFc3QiLCJyZWR1Y2VUb1NpbmdsZVN0cmluZyIsImRlc2MiLCJsaW5lIiwiYXIiLCJwYWQiLCJkZWJ1Z2xvZyIsIk5PREVfREVCVUciLCJ0b1VwcGVyQ2FzZSIsInRlc3QiLCJwaWQiLCJtb250aHMiLCJ0aW1lc3RhbXAiLCJ0aW1lIiwiZ2V0SG91cnMiLCJnZXRNaW51dGVzIiwiZ2V0U2Vjb25kcyIsImdldERhdGUiLCJnZXRNb250aCIsInByb3AiLCJsb2ciLCJvcmlnaW4iLCJrQ3VzdG9tUHJvbWlzaWZpZWRTeW1ib2wiLCJjYWxsYmFja2lmeU9uUmVqZWN0ZWQiLCJyZWFzb24iLCJuZXdSZWFzb24iLCJwcm9taXNpZnkiLCJvcmlnaW5hbCIsInByb21pc2VSZXNvbHZlIiwicHJvbWlzZVJlamVjdCIsInByb21pc2UiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsInNldFByb3RvdHlwZU9mIiwiZ2V0UHJvdG90eXBlT2YiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiY3VzdG9tIiwiY2FsbGJhY2tpZnkiLCJjYWxsYmFja2lmaWVkIiwibWF5YmVDYiIsInRoZW4iLCJyZWoiLCJhc1VJbnQzMkFycmF5Iiwic2NydWJWZWMiLCJjcnlwdEJsb2NrIiwiTSIsImtleVNjaGVkdWxlIiwiU1VCX01JWCIsIlNCT1giLCJuUm91bmRzIiwidDAiLCJ0MSIsInQyIiwidDMiLCJTVUJfTUlYMCIsIlNVQl9NSVgxIiwiU1VCX01JWDIiLCJTVUJfTUlYMyIsInMwIiwiczEiLCJzMiIsInMzIiwia3NSb3ciLCJSQ09OIiwiRyIsIklOVl9TQk9YIiwiSU5WX1NVQl9NSVgiLCJ4aSIsInN4IiwieDQiLCJ4OCIsIkFFUyIsIl9rZXkiLCJfcmVzZXQiLCJrZXlTaXplIiwia2V5V29yZHMiLCJrc1Jvd3MiLCJpbnZLZXlTY2hlZHVsZSIsImlrIiwia3NSIiwidHQiLCJfblJvdW5kcyIsIl9rZXlTY2hlZHVsZSIsIl9pbnZLZXlTY2hlZHVsZSIsImVuY3J5cHRCbG9ja1JhdyIsImVuY3J5cHRCbG9jayIsImRlY3J5cHRCbG9jayIsIm0xIiwic2NydWIiLCJwYXNzd29yZCIsInNhbHQiLCJrZXlCaXRzIiwiaXZMZW4iLCJrZXlMZW4iLCJpdiIsInVzZWQiLCJrZXlTdGFydCIsIml2U3RhcnQiLCJCYXNlQ3VydmUiLCJjb25mIiwiemVybyIsInR3byIsInBvaW50RnJvbUpTT04iLCJnUmVkIiwiX3duYWZUMSIsIl93bmFmVDIiLCJfd25hZlQzIiwiX3duYWZUNCIsImFkanVzdENvdW50IiwicmVkTiIsIl9tYXh3ZWxsVHJpY2siLCJCYXNlUG9pbnQiLCJjdXJ2ZSIsInByZWNvbXB1dGVkIiwicG9pbnQiLCJ2YWxpZGF0ZSIsIl9maXhlZE5hZk11bCIsImRvdWJsZXMiLCJfZ2V0RG91YmxlcyIsIkkiLCJzdGVwIiwicmVwciIsIm5hZlciLCJqcG9pbnQiLCJtaXhlZEFkZCIsInBvaW50cyIsInRvUCIsIl93bmFmTXVsIiwibmFmUG9pbnRzIiwiX2dldE5BRlBvaW50cyIsImRibHAiLCJfd25hZk11bEFkZCIsImRlZlciLCJjb2VmZnMiLCJqYWNvYmlhblJlc3VsdCIsInduZFdpZHRoIiwiY29tYiIsInRvSiIsImluZGV4IiwiamEiLCJqYiIsImRlY29kZVBvaW50IiwicG9pbnRGcm9tWCIsImVuY29kZUNvbXByZXNzZWQiLCJfZW5jb2RlIiwiY29tcGFjdCIsImdldFgiLCJnZXRZIiwicHJlY29tcHV0ZSIsInBvd2VyIiwiYmV0YSIsIl9nZXRCZXRhIiwiX2hhc0RvdWJsZXMiLCJkYmwiLCJhZXNpZCIsImZpeFByb2MiLCJjaXBoZXJzIiwiY29tcGF0IiwicGFyc2VLZXlzIiwicGFzc3BocmFzZSIsInN1YnR5cGUiLCJuZGF0YSIsInN0cmlwcGVkIiwidGFnIiwiY2VydGlmaWNhdGUiLCJkZWNvZGUiLCJ0YnNDZXJ0aWZpY2F0ZSIsInN1YmplY3RQdWJsaWNLZXlJbmZvIiwiUHVibGljS2V5IiwiYWxnb3JpdGhtIiwiUlNBUHVibGljS2V5Iiwic3ViamVjdFB1YmxpY0tleSIsInN1YmplY3RQcml2YXRlS2V5IiwicGFyYW1zIiwicHViX2tleSIsIkRTQXBhcmFtIiwiZGVjcnlwdCIsImtkZSIsImtkZXBhcmFtcyIsIml0ZXJzIiwiYWxnbyIsImNpcGhlciIsImNpcGhlclRleHQiLCJrZXlsZW4iLCJwYmtkZjJTeW5jIiwiY3JlYXRlRGVjaXBoZXJpdiIsIkVuY3J5cHRlZFByaXZhdGVLZXkiLCJQcml2YXRlS2V5IiwiUlNBUHJpdmF0ZUtleSIsInByaXZhdGVLZXkiLCJFQ1ByaXZhdGVLZXkiLCJwcml2X2tleSIsIkRTQVByaXZhdGVLZXkiLCJwYXJhbWV0ZXJzIiwic2lnbmF0dXJlIiwiSnNvbldlYlRva2VuRXJyb3IiLCJtZXNzYWdlIiwiY2FwdHVyZVN0YWNrVHJhY2UiLCJpbm5lciIsIlNpZ25TdHJlYW0iLCJWZXJpZnlTdHJlYW0iLCJBTEdPUklUSE1TIiwic2lnbiIsInZlcmlmeSIsImlzVmFsaWQiLCJjcmVhdGVTaWduIiwiY3JlYXRlVmVyaWZ5IiwiUmVmbGVjdE93bktleXMiLCJSIiwiUmVmbGVjdCIsIlJlZmxlY3RBcHBseSIsInJlY2VpdmVyIiwib3duS2V5cyIsImdldE93blByb3BlcnR5U3ltYm9scyIsIk51bWJlcklzTmFOIiwiaW5pdCIsIl9ldmVudHMiLCJfZXZlbnRzQ291bnQiLCJfbWF4TGlzdGVuZXJzIiwiZGVmYXVsdE1heExpc3RlbmVycyIsIiRnZXRNYXhMaXN0ZW5lcnMiLCJfYWRkTGlzdGVuZXIiLCJsaXN0ZW5lciIsInByZXBlbmQiLCJldmVudHMiLCJleGlzdGluZyIsIndhcm5pbmciLCJuZXdMaXN0ZW5lciIsInVuc2hpZnQiLCJlbWl0dGVyIiwiY291bnQiLCJ3YXJuIiwib25jZVdyYXBwZXIiLCJmaXJlZCIsIndyYXBGbiIsIl9vbmNlV3JhcCIsInN0YXRlIiwid3JhcHBlZCIsIl9saXN0ZW5lcnMiLCJ1bndyYXAiLCJldmxpc3RlbmVyIiwidW53cmFwTGlzdGVuZXJzIiwiYXJyYXlDbG9uZSIsInNldE1heExpc3RlbmVycyIsImdldE1heExpc3RlbmVycyIsImRvRXJyb3IiLCJjb250ZXh0IiwiaGFuZGxlciIsInBvc2l0aW9uIiwib3JpZ2luYWxMaXN0ZW5lciIsInNwbGljZU9uZSIsInJhd0xpc3RlbmVycyIsImV2ZW50TmFtZXMiLCJDb3JrZWRSZXF1ZXN0IiwiX3RoaXMiLCJlbnRyeSIsImZpbmlzaCIsImNvcmtSZXEiLCJjYWxsYmFjayIsInBlbmRpbmdjYiIsImNvcmtlZFJlcXVlc3RzRnJlZSIsIm9uQ29ya2VkRmluaXNoIiwiYXN5bmNXcml0ZSIsInNldEltbWVkaWF0ZSIsIldyaXRhYmxlU3RhdGUiLCJpbnRlcm5hbFV0aWwiLCJPdXJVaW50OEFycmF5IiwicmVhbEhhc0luc3RhbmNlIiwiZGVzdHJveUltcGwiLCJub3AiLCJzdHJlYW0iLCJpc0R1cGxleCIsIm9iamVjdE1vZGUiLCJ3cml0YWJsZU9iamVjdE1vZGUiLCJod20iLCJ3cml0YWJsZUh3bSIsIndyaXRhYmxlSGlnaFdhdGVyTWFyayIsImRlZmF1bHRId20iLCJmaW5hbENhbGxlZCIsIm5lZWREcmFpbiIsImVuZGluZyIsImZpbmlzaGVkIiwibm9EZWNvZGUiLCJkZWNvZGVTdHJpbmdzIiwiZGVmYXVsdEVuY29kaW5nIiwid3JpdGluZyIsImNvcmtlZCIsInN5bmMiLCJidWZmZXJQcm9jZXNzaW5nIiwib253cml0ZSIsIndyaXRlY2IiLCJ3cml0ZWxlbiIsIm9ud3JpdGVTdGF0ZVVwZGF0ZSIsImZpbmlzaE1heWJlIiwiZXJyb3JFbWl0dGVkIiwib253cml0ZUVycm9yIiwibmVlZEZpbmlzaCIsImJ1ZmZlcmVkUmVxdWVzdCIsImNsZWFyQnVmZmVyIiwiYWZ0ZXJXcml0ZSIsImxhc3RCdWZmZXJlZFJlcXVlc3QiLCJwcmVmaW5pc2hlZCIsImJ1ZmZlcmVkUmVxdWVzdENvdW50IiwiX3dyaXRlIiwid3JpdGV2IiwiX3dyaXRldiIsImRvV3JpdGUiLCJvbndyaXRlRHJhaW4iLCJob2xkZXIiLCJhbGxCdWZmZXJzIiwiaXNCdWYiLCJjYWxsRmluYWwiLCJuZWVkIiwicHJlZmluaXNoIiwiZ2V0QnVmZmVyIiwiaGFzSW5zdGFuY2UiLCJfdWludDhBcnJheVRvQnVmZmVyIiwid3JpdGVBZnRlckVuZCIsInZhbGlkIiwidmFsaWRDaHVuayIsIm5ld0NodW5rIiwiZGVjb2RlQ2h1bmsiLCJsYXN0Iiwid3JpdGVPckJ1ZmZlciIsImNvcmsiLCJ1bmNvcmsiLCJzZXREZWZhdWx0RW5jb2RpbmciLCJlbmRXcml0YWJsZSIsIl91bmRlc3Ryb3kiLCJ1bmRlc3Ryb3kiLCJuYiIsIm5lbmMiLCJyZXRyaWVkIiwiX25vcm1hbGl6ZUVuY29kaW5nIiwibm9ybWFsaXplRW5jb2RpbmciLCJ0ZXh0IiwidXRmMTZUZXh0IiwidXRmMTZFbmQiLCJmaWxsTGFzdCIsInV0ZjhGaWxsTGFzdCIsImJhc2U2NFRleHQiLCJiYXNlNjRFbmQiLCJzaW1wbGVXcml0ZSIsInNpbXBsZUVuZCIsImxhc3ROZWVkIiwibGFzdFRvdGFsIiwibGFzdENoYXIiLCJ1dGY4Q2hlY2tCeXRlIiwiYnl0ZSIsInV0ZjhDaGVja0V4dHJhQnl0ZXMiLCJ1dGY4Q2hlY2tJbmNvbXBsZXRlIiwiSGFzaEJhc2UiLCJBUlJBWTE2IiwiX2EiLCJfYiIsIl9jIiwiX2QiLCJyb3RsIiwiZm5GIiwiZm5HIiwiZm5IIiwiZm5JIiwiX2Jsb2NrT2Zmc2V0IiwiX2xlbmd0aCIsInpsIiwienIiLCJzbCIsInNyIiwiaGwiLCJociIsIl9lIiwiZm4xIiwiZm4yIiwiZm4zIiwiZm40IiwiZm41IiwiYnIiLCJjciIsImRyIiwidGwiLCJ0ciIsIkFsZ29yaXRobSIsInNoYTEiLCJzaGEyMjQiLCJzaGEyNTYiLCJzaGEzODQiLCJzaGE1MTIiLCJDaXBoZXIiLCJERVMiLCJDQkMiLCJFREUiLCJkZWNpcGhlcnMiLCJtb2RlcyIsImNyZWF0ZUNpcGhlciIsImNyZWF0ZUNpcGhlcml2IiwiQ2lwaGVyaXYiLCJjcmVhdGVEZWNpcGhlciIsIkRlY2lwaGVyIiwiRGVjaXBoZXJpdiIsImxpc3RDaXBoZXJzIiwiZ2V0Q2lwaGVycyIsIm1vZGVNb2R1bGVzIiwiRUNCIiwiQ0ZCIiwiQ0ZCOCIsIkNGQjEiLCJPRkIiLCJDVFIiLCJHQ00iLCJSYW5kIiwicmFuZCIsImdlbmVyYXRlIiwiX3JhbmQiLCJnZXRCeXRlcyIsImdldEJ5dGUiLCJyYW5kb21CeXRlcyIsImNydCIsInByaXYiLCJibGluZHMiLCJnZXRyIiwiYmxpbmRlciIsImJuIiwibW9kdWx1cyIsInB1YmxpY0V4cG9uZW50IiwidW5ibGluZGVyIiwiYmxpbmQiLCJibGluZGVkIiwiYzEiLCJwcmltZTEiLCJjMiIsInByaW1lMiIsInFpbnYiLCJjb2VmZmljaWVudCIsImV4cG9uZW50MSIsIm0yIiwiZXhwb25lbnQyIiwiZWxsaXB0aWMiLCJjdXJ2ZXMiLCJlYyIsImVkZHNhIiwicHJlIiwiUHJlc2V0Q3VydmUiLCJzaG9ydCIsImVkd2FyZHMiLCJpc0luZmluaXR5IiwiZGVmaW5lQ3VydmUiLCJsYW1iZGEiLCJiYXNpcyIsImNvbW1vbiIsInJpcGVtZCIsImhtYWMiLCJyaXBlbWQxNjAiLCJqd3MiLCJqd3QiLCJkZWNvZGVkIiwicGF5bG9hZCIsInBhcnNlIiwiY29tcGxldGUiLCJoZWFkZXIiLCJEYXRhU3RyZWFtIiwiUmVhZGFibGVTdGF0ZSIsIkVFbGlzdGVuZXJDb3VudCIsImRlYnVnVXRpbCIsImRlYnVnIiwiQnVmZmVyTGlzdCIsImtQcm94eUV2ZW50cyIsInJlYWRhYmxlT2JqZWN0TW9kZSIsInJlYWRhYmxlSHdtIiwicmVhZGFibGVIaWdoV2F0ZXJNYXJrIiwicGlwZXMiLCJwaXBlc0NvdW50IiwiZmxvd2luZyIsImVuZEVtaXR0ZWQiLCJyZWFkaW5nIiwibmVlZFJlYWRhYmxlIiwiZW1pdHRlZFJlYWRhYmxlIiwicmVhZGFibGVMaXN0ZW5pbmciLCJyZXN1bWVTY2hlZHVsZWQiLCJhd2FpdERyYWluIiwicmVhZGluZ01vcmUiLCJkZWNvZGVyIiwiX3JlYWQiLCJyZWFkYWJsZUFkZENodW5rIiwiYWRkVG9Gcm9udCIsInNraXBDaHVua0NoZWNrIiwiZW1pdFJlYWRhYmxlIiwib25Fb2ZDaHVuayIsImNodW5rSW52YWxpZCIsImFkZENodW5rIiwibWF5YmVSZWFkTW9yZSIsIm5lZWRNb3JlRGF0YSIsImlzUGF1c2VkIiwic2V0RW5jb2RpbmciLCJNQVhfSFdNIiwiaG93TXVjaFRvUmVhZCIsImhlYWQiLCJjb21wdXRlTmV3SGlnaFdhdGVyTWFyayIsImVtaXRSZWFkYWJsZV8iLCJmbG93IiwibWF5YmVSZWFkTW9yZV8iLCJuUmVhZGluZ05leHRUaWNrIiwicmVzdW1lXyIsImZyb21MaXN0IiwiY2xlYXIiLCJoYXNTdHJpbmdzIiwidGFpbCIsImNvcHlGcm9tQnVmZmVyU3RyaW5nIiwiY29weUZyb21CdWZmZXIiLCJmcm9tTGlzdFBhcnRpYWwiLCJlbmRSZWFkYWJsZSIsImVuZFJlYWRhYmxlTlQiLCJ4cyIsIm5PcmlnIiwiZG9SZWFkIiwicGlwZU9wdHMiLCJlbmRGbiIsInN0ZG91dCIsInN0ZGVyciIsInVucGlwZSIsIm9udW5waXBlIiwidW5waXBlSW5mbyIsImhhc1VucGlwZWQiLCJvbmZpbmlzaCIsImNsZWFuZWRVcCIsInBpcGVPbkRyYWluIiwiaW5jcmVhc2VkQXdhaXREcmFpbiIsImV2ZW50IiwiZGVzdHMiLCJzcGxpY2UiLCJldiIsIndyYXAiLCJwYXVzZWQiLCJfZnJvbUxpc3QiLCJlbWl0RXJyb3JOVCIsInJlYWRhYmxlRGVzdHJveWVkIiwid3JpdGFibGVEZXN0cm95ZWQiLCJhZnRlclRyYW5zZm9ybSIsInRzIiwiX3RyYW5zZm9ybVN0YXRlIiwidHJhbnNmb3JtaW5nIiwid3JpdGVjaHVuayIsInJzIiwibmVlZFRyYW5zZm9ybSIsIndyaXRlZW5jb2RpbmciLCJmbHVzaCIsIl90aGlzMiIsImVycjIiLCJidWZmZXJFcXVhbCIsImZvcm1hdEVjZHNhIiwiTVNHX0lOVkFMSURfU0VDUkVUIiwiTVNHX0lOVkFMSURfVkVSSUZJRVJfS0VZIiwiTVNHX0lOVkFMSURfU0lHTkVSX0tFWSIsInN1cHBvcnRzS2V5T2JqZWN0cyIsImNyZWF0ZVB1YmxpY0tleSIsImNoZWNrSXNQdWJsaWNLZXkiLCJ0eXBlRXJyb3IiLCJhc3ltbWV0cmljS2V5VHlwZSIsImV4cG9ydCIsImNoZWNrSXNQcml2YXRlS2V5IiwiZnJvbUJhc2U2NCIsInRvQmFzZTY0IiwiYmFzZTY0dXJsIiwidGVtcGxhdGUiLCJlcnJNc2ciLCJub3JtYWxpemVJbnB1dCIsInRoaW5nIiwiY3JlYXRlSG1hY1NpZ25lciIsInNlY3JldCIsImNoZWNrSXNTZWNyZXRLZXkiLCJjcmVhdGVIbWFjIiwiY3JlYXRlSG1hY1ZlcmlmaWVyIiwiY29tcHV0ZWRTaWciLCJjcmVhdGVLZXlTaWduZXIiLCJzaWduZXIiLCJjcmVhdGVLZXlWZXJpZmllciIsInB1YmxpY0tleSIsInZlcmlmaWVyIiwiY3JlYXRlUFNTS2V5U2lnbmVyIiwiUlNBX1BLQ1MxX1BTU19QQURESU5HIiwic2FsdExlbmd0aCIsIlJTQV9QU1NfU0FMVExFTl9ESUdFU1QiLCJjcmVhdGVQU1NLZXlWZXJpZmllciIsImNyZWF0ZUVDRFNBU2lnbmVyIiwiZGVyVG9Kb3NlIiwiY3JlYXRlRUNEU0FWZXJpZmVyIiwiam9zZVRvRGVyIiwiY3JlYXRlTm9uZVNpZ25lciIsImNyZWF0ZU5vbmVWZXJpZmllciIsInNpZ25lckZhY3RvcmllcyIsImhzIiwicHMiLCJlcyIsIm5vbmUiLCJ2ZXJpZmllckZhY3RvcmllcyIsIl9maW5hbGl6ZWQiLCJwcmVmaXgiLCJ0aHJvd0lmTm90U3RyaW5nT3JCdWZmZXIiLCJLIiwiVyIsIlNoYTI1NiIsIl93IiwibWFqIiwic2lnbWEwIiwic2lnbWExIiwiZ2FtbWEwIiwiX2YiLCJfZyIsIl9oIiwiVDEiLCJUMiIsIkgiLCJTaGE1MTIiLCJDaCIsInhsIiwiR2FtbWEwIiwiR2FtbWEwbCIsIkdhbW1hMSIsIkdhbW1hMWwiLCJnZXRDYXJyeSIsIl9haCIsIl9iaCIsIl9jaCIsIl9kaCIsIl9laCIsIl9maCIsIl9naCIsIl9oaCIsIl9hbCIsIl9ibCIsIl9jbCIsIl9kbCIsIl9lbCIsIl9mbCIsIl9nbCIsIl9obCIsImZoIiwiZ2giLCJoaCIsImZsIiwiZ2wiLCJ4aCIsImdhbW1hMGwiLCJnYW1tYTEiLCJnYW1tYTFsIiwiV2k3aCIsIldpN2wiLCJXaTE2aCIsIldpMTZsIiwiV2lsIiwiV2loIiwibWFqaCIsIm1hamwiLCJzaWdtYTBoIiwic2lnbWEwbCIsInNpZ21hMWgiLCJzaWdtYTFsIiwiS2loIiwiS2lsIiwiY2hoIiwiY2hsIiwidDFsIiwidDFoIiwidDJsIiwidDJoIiwid3JpdGVJbnQ2NEJFIiwiTGVnYWN5IiwibWQ1IiwiWkVST1MiLCJIbWFjIiwiYmxvY2tzaXplIiwiX2FsZyIsImlwYWQiLCJfaXBhZCIsIm9wYWQiLCJfb3BhZCIsInBia2RmMiIsImNoZWNrQnVmZmVyIiwiaXRlcmF0aW9ucyIsIk1BWF9BTExPQyIsImNoZWNrUGFyYW1ldGVycyIsInNpemVzIiwicm1kMTYwIiwic2FsdExlbiIsImdldERpZ2VzdCIsImlwYWQxIiwiaXBhZDIiLCJESyIsImJsb2NrMSIsImRlc3RQb3MiLCJoTGVuIiwiVCIsIlUiLCJpbmNyMzIiLCJnZXRCbG9jayIsIl9jaXBoZXIiLCJfcHJldiIsImVuY3J5cHQiLCJjaHVua051bSIsIl9jYWNoZSIsIml0ZW0iLCJhZXMiLCJHSEFTSCIsIlN0cmVhbUNpcGhlciIsImNrIiwiX2doYXNoIiwiX2ZpbklEIiwiZ2hhc2giLCJ0b1BhZCIsIml2Qml0cyIsImNhbGNJdiIsIl9zZWNDYWNoZSIsIl9kZWNyeXB0IiwiX2FsZW4iLCJfbW9kZSIsIl9hdXRoVGFnIiwiX2NhbGxlZCIsInJ1bXAiLCJ4b3JUZXN0IiwiZmluZFByaW1lIiwic2ltcGxlU2lldmUiLCJmZXJtYXRUZXN0IiwiVFdFTlRZRk9VUiIsIm1pbGxlclJhYmluIiwiT05FIiwiVFdPIiwiRklWRSIsIlRFTiIsIlRIUkVFIiwiRUxFVkVOIiwiRk9VUiIsIl9nZXRQcmltZXMiLCJnZW4iLCJuMiIsImJyb3JhbmQiLCJNaWxsZXJSYWJpbiIsIl9yYW5kYmVsb3ciLCJtaW5fYnl0ZXMiLCJfcmFuZHJhbmdlIiwic3RvcCIsInJvbmUiLCJuMSIsInJuMSIsImdldERpdmlzb3IiLCJjaDMyIiwibWFqMzIiLCJwMzIiLCJmdF8xIiwiczBfMjU2IiwiczFfMjU2IiwiZzBfMjU2IiwiZzFfMjU2Iiwic2hhQ29tbW9uIiwic2hhMjU2X0siLCJTSEEyNTYiLCJzaGE1MTJfSyIsIlNIQTUxMiIsImNoNjRfaGkiLCJ5aCIsInlsIiwiemgiLCJjaDY0X2xvIiwibWFqNjRfaGkiLCJtYWo2NF9sbyIsInMwXzUxMl9oaSIsInMwXzUxMl9sbyIsInMxXzUxMl9oaSIsInMxXzUxMl9sbyIsImcwXzUxMl9oaSIsImcwXzUxMl9sbyIsImcxXzUxMl9oaSIsImcxXzUxMl9sbyIsIl9wcmVwYXJlQmxvY2siLCJjMF9oaSIsImMwX2xvIiwiYzFfaGkiLCJjMV9sbyIsImMyX2hpIiwiYzJfbG8iLCJjM19oaSIsImMzX2xvIiwiYzRfaGkiLCJjNF9sbyIsIlQxX2hpIiwiVDFfbG8iLCJUMl9oaSIsIlQyX2xvIiwicmVwb3J0ZXIiLCJzYXZlIiwicmVzdG9yZSIsImlzRW1wdHkiLCJmYWlsIiwic2tpcCIsIl9yZXBvcnRlclN0YXRlIiwicmF3IiwiX3JldmVyc2UiLCJkZXIiLCJERVJEZWNvZGVyIiwiZW50aXR5IiwidHJlZSIsIkRFUk5vZGUiLCJib2R5IiwicGFyZW50IiwiZGVyRGVjb2RlVGFnIiwiY2xzIiwidGFnQ2xhc3MiLCJvY3QiLCJ0YWdTdHIiLCJkZXJEZWNvZGVMZW4iLCJfZGVjb2RlIiwiX3BlZWtUYWciLCJhbnkiLCJkZWNvZGVkVGFnIiwiX2RlY29kZVRhZyIsIl9za2lwVW50aWxFbmQiLCJfZGVjb2RlTGlzdCIsInBvc3NpYmxlRW5kIiwiX2RlY29kZVN0ciIsInVudXNlZCIsIm51bXN0ciIsIl9pc051bXN0ciIsInByaW50c3RyIiwiX2lzUHJpbnRzdHIiLCJfZGVjb2RlT2JqaWQiLCJ2YWx1ZXMiLCJyZWxhdGl2ZSIsImlkZW50aWZpZXJzIiwiaWRlbnQiLCJzdWJpZGVudCIsImZpcnN0Iiwic2Vjb25kIiwiX2RlY29kZVRpbWUiLCJ5ZWFyIiwibW9uIiwiZGF5IiwiaG91ciIsInNlYyIsIlVUQyIsIl9kZWNvZGVOdWxsIiwiX2RlY29kZUJvb2wiLCJfZGVjb2RlSW50IiwiX3VzZSIsIl9nZXREZWNvZGVyIiwiREVSRW5jb2RlciIsIl9lbmNvZGVDb21wb3NpdGUiLCJjb250ZW50IiwiZW5jb2RlZFRhZyIsInRhZ0J5TmFtZSIsInRhZ0NsYXNzQnlOYW1lIiwiZW5jb2RlVGFnIiwiX2NyZWF0ZUVuY29kZXJCdWZmZXIiLCJsZW5PY3RldHMiLCJfZW5jb2RlU3RyIiwiX2VuY29kZU9iamlkIiwiaWQiLCJvYmppZCIsIl9lbmNvZGVUaW1lIiwiZGF0ZSIsImdldEZ1bGxZZWFyIiwiZ2V0VVRDTW9udGgiLCJnZXRVVENEYXRlIiwiZ2V0VVRDSG91cnMiLCJnZXRVVENNaW51dGVzIiwiZ2V0VVRDU2Vjb25kcyIsIl9lbmNvZGVOdWxsIiwiX2VuY29kZUludCIsIm51bUFycmF5IiwiX2VuY29kZUJvb2wiLCJfZ2V0RW5jb2RlciIsIl9za2lwRGVmYXVsdCIsImRhdGFCdWZmZXIiLCJfYmFzZVN0YXRlIiwiZGVmYXVsdEJ1ZmZlciIsIl9lbmNvZGVWYWx1ZSIsImNyZWF0ZUhhc2giLCJpMm9wcyIsInNlZWQiLCJwYWRkZWRNc2ciLCJOb3RCZWZvcmVFcnJvciIsIlRva2VuRXhwaXJlZEVycm9yIiwiZXhwaXJlZEF0IiwibXMiLCJpYXQiLCJub3ciLCJtaWxsaXNlY29uZHMiLCJzZW12ZXIiLCJzYXRpc2ZpZXMiLCJlbmNvZGVVUklDb21wb25lbnQiLCJ1cmwiLCJwYXJhbXNTZXJpYWxpemVyIiwic2VyaWFsaXplZFBhcmFtcyIsInBhcnRzIiwidG9JU09TdHJpbmciLCJoYXNobWFya0luZGV4IiwiX19DQU5DRUxfXyIsIm5vcm1hbGl6ZUhlYWRlck5hbWUiLCJERUZBVUxUX0NPTlRFTlRfVFlQRSIsInNldENvbnRlbnRUeXBlSWZVbnNldCIsImhlYWRlcnMiLCJhZGFwdGVyIiwiZGVmYXVsdHMiLCJYTUxIdHRwUmVxdWVzdCIsInRyYW5zZm9ybVJlcXVlc3QiLCJ0cmFuc2Zvcm1SZXNwb25zZSIsInhzcmZDb29raWVOYW1lIiwieHNyZkhlYWRlck5hbWUiLCJtYXhDb250ZW50TGVuZ3RoIiwidmFsaWRhdGVTdGF0dXMiLCJzdGF0dXMiLCJzZXR0bGUiLCJidWlsZFVSTCIsInBhcnNlSGVhZGVycyIsImlzVVJMU2FtZU9yaWdpbiIsImNyZWF0ZUVycm9yIiwiY29uZmlnIiwicmVxdWVzdERhdGEiLCJyZXF1ZXN0SGVhZGVycyIsInJlcXVlc3QiLCJhdXRoIiwidXNlcm5hbWUiLCJBdXRob3JpemF0aW9uIiwiYnRvYSIsIm9wZW4iLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZWFkeVN0YXRlIiwicmVzcG9uc2VVUkwiLCJyZXNwb25zZUhlYWRlcnMiLCJnZXRBbGxSZXNwb25zZUhlYWRlcnMiLCJyZXNwb25zZSIsInJlc3BvbnNlVHlwZSIsInJlc3BvbnNlVGV4dCIsInN0YXR1c1RleHQiLCJvbmFib3J0Iiwib250aW1lb3V0IiwiY29va2llcyIsInhzcmZWYWx1ZSIsIndpdGhDcmVkZW50aWFscyIsInNldFJlcXVlc3RIZWFkZXIiLCJvbkRvd25sb2FkUHJvZ3Jlc3MiLCJhZGRFdmVudExpc3RlbmVyIiwib25VcGxvYWRQcm9ncmVzcyIsInVwbG9hZCIsImNhbmNlbFRva2VuIiwiY2FuY2VsIiwiYWJvcnQiLCJzZW5kIiwiZW5oYW5jZUVycm9yIiwiY29uZmlnMSIsImNvbmZpZzIiLCJDYW5jZWwiLCJqd2EiLCJqd3NTaWduIiwic2VjcmV0T3JLZXkiLCJzZWN1cmVkSW5wdXQiLCJlbmNvZGVkSGVhZGVyIiwiZW5jb2RlZFBheWxvYWQiLCJqd3NTZWN1cmVkSW5wdXQiLCJzZWNyZXRTdHJlYW0iLCJiNjQiLCJsZW5zIiwiZ2V0TGVucyIsInZhbGlkTGVuIiwicGxhY2VIb2xkZXJzTGVuIiwiQXJyIiwiX2J5dGVMZW5ndGgiLCJjdXJCeXRlIiwicmV2TG9va3VwIiwidWludDgiLCJleHRyYUJ5dGVzIiwibGVuMiIsImVuY29kZUNodW5rIiwibG9va3VwIiwiaXNMRSIsIm1MZW4iLCJuQnl0ZXMiLCJlTGVuIiwiZU1heCIsImVCaWFzIiwibkJpdHMiLCJOYU4iLCJydCIsIkxOMiIsImluc3RhbmNlIiwiQ29uc3RydWN0b3IiLCJfY2xhc3NDYWxsQ2hlY2siLCJUaW1lb3V0IiwiY2xlYXJGbiIsIl9pZCIsIl9jbGVhckZuIiwic2NvcGUiLCJzZXRJbnRlcnZhbCIsImNsZWFySW50ZXJ2YWwiLCJjbG9zZSIsInVucmVmIiwicmVmIiwiZW5yb2xsIiwibXNlY3MiLCJfaWRsZVRpbWVvdXRJZCIsIl9pZGxlVGltZW91dCIsInVuZW5yb2xsIiwiX3VucmVmQWN0aXZlIiwiYWN0aXZlIiwiX29uVGltZW91dCIsImNsZWFySW1tZWRpYXRlIiwicmVnaXN0ZXJJbW1lZGlhdGUiLCJodG1sIiwiY2hhbm5lbCIsIm1lc3NhZ2VQcmVmaXgiLCJvbkdsb2JhbE1lc3NhZ2UiLCJuZXh0SGFuZGxlIiwidGFza3NCeUhhbmRsZSIsImN1cnJlbnRseVJ1bm5pbmdBVGFzayIsImRvYyIsImF0dGFjaFRvIiwiaGFuZGxlIiwicnVuSWZQcmVzZW50IiwicG9zdE1lc3NhZ2UiLCJpbXBvcnRTY3JpcHRzIiwicG9zdE1lc3NhZ2VJc0FzeW5jaHJvbm91cyIsIm9sZE9uTWVzc2FnZSIsIm9ubWVzc2FnZSIsImNhblVzZVBvc3RNZXNzYWdlIiwiTWVzc2FnZUNoYW5uZWwiLCJwb3J0MSIsInBvcnQyIiwiY3JlYXRlRWxlbWVudCIsImRvY3VtZW50RWxlbWVudCIsInNjcmlwdCIsInJlbW92ZUNoaWxkIiwiYXBwZW5kQ2hpbGQiLCJyYW5kb20iLCJhdHRhY2hFdmVudCIsInRhc2siLCJsb2NhbFN0b3JhZ2UiLCJidWZmZXJFcSIsImluc3RhbGwiLCJvcmlnQnVmRXF1YWwiLCJvcmlnU2xvd0J1ZkVxdWFsIiwicm5nIiwicHNldWRvUmFuZG9tQnl0ZXMiLCJwcm5nIiwiYWxnb3MiLCJhbGdvS2V5cyIsImhhc2hlcyIsImdldEhhc2hlcyIsIkRpZmZpZUhlbGxtYW5Hcm91cCIsImNyZWF0ZURpZmZpZUhlbGxtYW5Hcm91cCIsImdldERpZmZpZUhlbGxtYW4iLCJjcmVhdGVEaWZmaWVIZWxsbWFuIiwiRGlmZmllSGVsbG1hbiIsIlNpZ24iLCJWZXJpZnkiLCJjcmVhdGVFQ0RIIiwicHVibGljRW5jcnlwdCIsInByaXZhdGVFbmNyeXB0IiwicHVibGljRGVjcnlwdCIsInByaXZhdGVEZWNyeXB0IiwicmYiLCJyYW5kb21GaWxsIiwicmFuZG9tRmlsbFN5bmMiLCJjcmVhdGVDcmVkZW50aWFscyIsIlNoYSIsInJvdGwzMCIsImZ0IiwiU2hhMSIsInJvdGw1IiwiU2hhMjI0IiwiU2hhMzg0IiwiWkVST19CVUYiLCJzdWJ0bGUiLCJ0b0Jyb3dzZXIiLCJjaGVja3MiLCJicm93c2VyUGJrZGYyIiwiaW1wb3J0S2V5IiwiZGVyaXZlQml0cyIsInJlc29sdmVQcm9taXNlIiwicHJvbSIsImNhdGNoIiwiY2hlY2tOYXRpdmUiLCJyZXNwIiwiYWVzTW9kZXMiLCJkZXNNb2RlcyIsImVidGsiLCJzdWl0ZSIsImRlcyIsImluc3RhbnRpYXRlIiwibW9kZU5hbWUiLCJfZGVzIiwiZGVzMyIsImlwIiwiaW5MIiwiaW5SIiwib3V0TCIsIm91dFIiLCJyaXAiLCJwYzEiLCJyMjhzaGwiLCJwYzJ0YWJsZSIsInBjMiIsImV4cGFuZCIsInNUYWJsZSIsInN1YnN0aXR1dGUiLCJwZXJtdXRlVGFibGUiLCJwYWRTcGxpdCIsImdyb3VwIiwiYnVmZmVyT2ZmIiwiX3VwZGF0ZURlY3J5cHQiLCJfdXBkYXRlRW5jcnlwdCIsIl9idWZmZXIiLCJfZmx1c2hCdWZmZXIiLCJpbnB1dE9mZiIsIm91dHB1dE9mZiIsIl9maW5hbEVuY3J5cHQiLCJfZmluYWxEZWNyeXB0IiwiX3VucGFkIiwiREVTU3RhdGUiLCJfZGVzU3RhdGUiLCJkZXJpdmVLZXlzIiwic2hpZnRUYWJsZSIsImtMIiwia1IiLCJpbnAiLCJpbk9mZiIsIm91dE9mZiIsIl9lbmNyeXB0IiwibFN0YXJ0IiwiclN0YXJ0Iiwia2V5TCIsImtleVIiLCJwcm90byIsIkNCQ1N0YXRlIiwiX2NiY0luaXQiLCJfY2JjU3RhdGUiLCJzdXBlclByb3RvIiwiRURFU3RhdGUiLCJrMyIsIl9lZGVTdGF0ZSIsIk1PREVTIiwiQXV0aENpcGhlciIsIlNwbGl0dGVyIiwiX2F1dG9wYWRkaW5nIiwiUEFERElORyIsImNhY2hlIiwic2V0VG8iLCJwYWRCdWZmIiwiZW5jcnlwdFN0YXJ0IiwiZW5jcnlwdEJ5dGUiLCJieXRlUGFyYW0iLCJzaGlmdEluIiwiWkVST0VTIiwiZnJvbUFycmF5IiwiX211bHRpcGx5IiwibHNiVmkiLCJWaSIsIlppIiwiYWJsIiwiX2xhc3QiLCJwYWRkZWQiLCJ1bnBhZCIsImF1dG9QYWRkaW5nIiwiREgiLCJFTkNPRElOR1MiLCJnZW5lcmF0b3IiLCJnZW5jIiwiZ2VuZXJhdGVQcmltZSIsIndlYnBhY2tQb2x5ZmlsbCIsInBhdGhzIiwiY2hpbGRyZW4iLCJTRVZFTiIsInNldFB1YmxpY0tleSIsInB1YiIsIl9wdWIiLCJzZXRQcml2YXRlS2V5IiwiX3ByaXYiLCJwcmltZUNhY2hlIiwibWFsbGVhYmxlIiwic2V0R2VuZXJhdG9yIiwiX19wcmltZSIsIl9wcmltZUxlbiIsIl9wcmltZUNvZGUiLCJmb3JtYXRSZXR1cm5WYWx1ZSIsImhleCIsImNoZWNrUHJpbWUiLCJfX2dlbiIsImdlbmVyYXRlS2V5cyIsIl9nZW4iLCJnZXRQdWJsaWNLZXkiLCJjb21wdXRlU2VjcmV0Iiwib3RoZXIiLCJnZXRQcmltZSIsImZyb250IiwiZ2V0UHJpdmF0ZUtleSIsImdldEdlbmVyYXRvciIsImFsZ29yaXRobXMiLCJfaGFzaFR5cGUiLCJfdGFnIiwiX3NpZ25UeXBlIiwic2lnIiwiRUMiLCJnZXRLZXkiLCJobGVuIiwiaGJpdHMiLCJiaXRzMmludCIsImJpdHMyb2N0ZXRzIiwib2JpdHMiLCJtYWtlS2V5Iiwia3YiLCJtYWtlUiIsImhhc2hUeXBlIiwic2lnblR5cGUiLCJjdXJ2ZUlkIiwia2V5RnJvbVByaXZhdGUiLCJ0b0RFUiIsImVjU2lnbiIsImRzYVNpZ24iLCJTaG9ydEN1cnZlIiwidGludiIsInplcm9BIiwidGhyZWVBIiwiZW5kbyIsIl9nZXRFbmRvbW9ycGhpc20iLCJfZW5kb1duYWZUMSIsIl9lbmRvV25hZlQyIiwiUG9pbnQiLCJpc1JlZCIsImluZiIsIkpQb2ludCIsInpPbmUiLCJiZXRhcyIsIl9nZXRFbmRvUm9vdHMiLCJsYW1iZGFzIiwidmVjIiwiX2dldEVuZG9CYXNpcyIsIm50aW52IiwicHJldlIiLCJhcHJ4U3FydCIsInkxIiwieTIiLCJsZW4xIiwiX2VuZG9TcGxpdCIsInYxIiwidjIiLCJwMSIsInAyIiwicTEiLCJxMiIsImF4IiwicmhzIiwiX2VuZG9XbmFmTXVsQWRkIiwibnBvaW50cyIsIm5jb2VmZnMiLCJmcm9tSlNPTiIsImVuZG9NdWwiLCJvYmoycG9pbnQiLCJueCIsIm55IiwieXMxIiwiZHlpbnYiLCJtdWxBZGQiLCJqbXVsQWRkIiwiX3ByZWNvbXB1dGUiLCJuZWdhdGUiLCJ6aW52IiwiemludjIiLCJheSIsInB6MiIsInoyIiwiaDIiLCJoMyIsIm56IiwiangiLCJqeSIsImp6Iiwiano0IiwianlkIiwiangyIiwianlkMiIsImp5ZDQiLCJkbnkiLCJfemVyb0RibCIsIl90aHJlZURibCIsIl9kYmwiLCJ4eCIsInl5IiwieXl5eSIsInl5eXk4IiwiYzgiLCJnYW1tYSIsImFscGhhIiwiYmV0YTQiLCJiZXRhOCIsImdnYW1tYTgiLCJqeTIiLCJqeGQ0IiwianlkOCIsInRycGwiLCJ6eiIsIm1tIiwiZWUiLCJ5eXU0Iiwia2Jhc2UiLCJ6MyIsInB6MyIsImVxWFRvUCIsInpzIiwieGMiLCJNb250Q3VydmUiLCJpNCIsImEyNCIsIm5vcm1hbGl6ZSIsImFhIiwiYmIiLCJkaWZmQWRkIiwiZGEiLCJqdW1sQWRkIiwiRWR3YXJkc0N1cnZlIiwidHdpc3RlZCIsIm1PbmVBIiwiZGQiLCJvbmVDIiwiX211bEEiLCJfbXVsQyIsImxocyIsInBvaW50RnJvbVkiLCJfZXh0RGJsIiwibnQiLCJfcHJvakRibCIsIl9leHRBZGQiLCJfcHJvakFkZCIsInppIiwic2hhMV9LIiwiU0hBMSIsIlNIQTIyNCIsIlNIQTM4NCIsIktoIiwiRSIsIkFoIiwiQmgiLCJEaCIsIkVoIiwicmgiLCJzaCIsIm91dGVyIiwiSG1hY0RSQkciLCJLZXlQYWlyIiwiU2lnbmF0dXJlIiwibmgiLCJrZXlQYWlyIiwiZnJvbVByaXZhdGUiLCJrZXlGcm9tUHVibGljIiwiZnJvbVB1YmxpYyIsImdlbktleVBhaXIiLCJkcmJnIiwicGVycyIsInBlcnNFbmMiLCJlbnRyb3B5IiwiZW50cm9weUVuYyIsIm5vbmNlIiwibnMyIiwiX3RydW5jYXRlVG9OIiwidHJ1bmNPbmx5IiwiYmtleSIsImdldFByaXZhdGUiLCJuczEiLCJpdGVyIiwia3AiLCJrcFgiLCJyZWNvdmVyeVBhcmFtIiwiY2Fub25pY2FsIiwic2ludiIsImdldFB1YmxpYyIsInJlY292ZXJQdWJLZXkiLCJpc1lPZGQiLCJpc1NlY29uZEtleSIsInJJbnYiLCJnZXRLZXlSZWNvdmVyeVBhcmFtIiwiUSIsIlFwcmltZSIsInByZWRSZXNpc3QiLCJtaW5FbnRyb3B5IiwiX3Jlc2VlZCIsInJlc2VlZEludGVydmFsIiwiViIsIm5vbmNlRW5jIiwiX2htYWMiLCJrbWFjIiwicmVzZWVkIiwiYWRkRW5jIiwidGVtcCIsIl9pbXBvcnRQcml2YXRlIiwicHJpdkVuYyIsIl9pbXBvcnRQdWJsaWMiLCJwdWJFbmMiLCJkZXJpdmUiLCJfaW1wb3J0REVSIiwiUG9zaXRpb24iLCJwbGFjZSIsImdldExlbmd0aCIsImluaXRpYWwiLCJvY3RldExlbiIsInJtUGFkZGluZyIsImNvbnN0cnVjdExlbmd0aCIsIm9jdGV0cyIsInNsZW4iLCJiYWNrSGFsZiIsIkVERFNBIiwicG9pbnRDbGFzcyIsImVuY29kaW5nTGVuZ3RoIiwia2V5RnJvbVNlY3JldCIsImhhc2hJbnQiLCJSZW5jb2RlZCIsImVuY29kZVBvaW50Iiwic18iLCJwdWJCeXRlcyIsIlMiLCJtYWtlU2lnbmF0dXJlIiwiU0ciLCJmcm9tU2VjcmV0IiwibGFzdEl4Iiwibm9ybWVkIiwieElzT2RkIiwiZW5jb2RlSW50IiwiZGVjb2RlSW50IiwiaXNQb2ludCIsIl9zZWNyZXQiLCJfcHViQnl0ZXMiLCJwcml2Qnl0ZXMiLCJnZXRTZWNyZXQiLCJfUiIsIl9TIiwiX1JlbmNvZGVkIiwiX1NlbmNvZGVkIiwiU2VuY29kZWQiLCJ0b0J5dGVzIiwic2VxIiwiaW50IiwidXNlIiwiQWxnb3JpdGhtSWRlbnRpZmllciIsImJpdHN0ciIsIm51bGxfIiwib3B0aW9uYWwiLCJQcml2YXRlS2V5SW5mbyIsIm9jdHN0ciIsIkVuY3J5cHRlZFByaXZhdGVLZXlJbmZvIiwiZXhwbGljaXQiLCJFQ1BhcmFtZXRlcnMiLCJjaG9pY2UiLCJuYW1lZEN1cnZlIiwiRW50aXR5IiwiX2NyZWF0ZU5hbWVkIiwibmFtZWQiLCJydW5JblRoaXNDb250ZXh0IiwiX2luaXROYW1lZCIsIk9iamVjdF9rZXlzIiwiZGVmaW5lUHJvcCIsImdsb2JhbHMiLCJDb250ZXh0IiwiU2NyaXB0IiwicnVuSW5Db250ZXh0IiwiaWZyYW1lIiwiZGlzcGxheSIsIndpbiIsImNvbnRlbnRXaW5kb3ciLCJ3RXZhbCIsImV2YWwiLCJ3RXhlY1NjcmlwdCIsImV4ZWNTY3JpcHQiLCJ3aW5LZXlzIiwicnVuSW5OZXdDb250ZXh0IiwiY3JlYXRlQ29udGV4dCIsImlzQ29udGV4dCIsImNyZWF0ZVNjcmlwdCIsInBhdGgiLCJlcnJvcnMiLCJSZXBvcnRlckVycm9yIiwicmV0aHJvdyIsInBhdGhMZW4iLCJlbnRlcktleSIsImV4aXRLZXkiLCJsZWF2ZUtleSIsImVudGVyT2JqZWN0IiwibGVhdmVPYmplY3QiLCJpbmhlcml0ZWQiLCJlbGVtIiwic3RhY2siLCJwYXJ0aWFsIiwid3JhcFJlc3VsdCIsInRhZ3MiLCJtZXRob2RzIiwicmV2ZXJzZUFyZ3MiLCJ1c2VEZWNvZGVyIiwiaW1wbGljaXQiLCJjb250YWlucyIsIl93cmFwIiwic3RhdGVQcm9wcyIsImNzdGF0ZSIsImZpbHRlciIsImNoaWxkIiwiX3VzZUFyZ3MiLCJkZWYiLCJuZXdLZXkiLCJwcmV2T2JqIiwicHJlc2VudCIsInByZXZLZXkiLCJfZGVjb2RlR2VuZXJpYyIsIl9kZWNvZGVDaG9pY2UiLCJ0cmFjayIsIl9nZXRVc2UiLCJzb21lIiwibm9kZSIsIl9lbmNvZGVDaG9pY2UiLCJfZW5jb2RlUHJpbWl0aXZlIiwiMCIsIjEiLCIyIiwiMyIsInBlbSIsIlBFTURlY29kZXIiLCJsaW5lcyIsImxhYmVsIiwiUEVNRW5jb2RlciIsImFzbiIsIlRpbWUiLCJ1dGNUaW1lIiwidXRjdGltZSIsImdlbmVyYWxUaW1lIiwiZ2VudGltZSIsIkF0dHJpYnV0ZVR5cGVWYWx1ZSIsIlN1YmplY3RQdWJsaWNLZXlJbmZvIiwiUmVsYXRpdmVEaXN0aW5ndWlzaGVkTmFtZSIsInNldG9mIiwiUkROU2VxdWVuY2UiLCJzZXFvZiIsIk5hbWUiLCJyZG5TZXF1ZW5jZSIsIlZhbGlkaXR5IiwiRXh0ZW5zaW9uIiwiYm9vbCIsIlRCU0NlcnRpZmljYXRlIiwiWDUwOUNlcnRpZmljYXRlIiwiZmluZFByb2MiLCJzdGFydFJlZ2V4IiwiZnVsbFJlZ2V4IiwiZXZwIiwib2tleSIsImRlY3J5cHRlZCIsImNpcGhlcktleSIsIm1hdGNoMiIsImNoZWNrVmFsdWUiLCJwdWJrZXkiLCJlY1ZlcmlmeSIsInVucGFja2VkIiwibW9udHAiLCJkc2FWZXJpZnkiLCJwYWROdW0iLCJFQ0RIIiwiYWxpYXNlcyIsInNlY3AyNTZrMSIsInNlY3AyMjRyMSIsInByaW1lMjU2djEiLCJwcmltZTE5MnYxIiwiZWQyNTUxOSIsInNlY3AzODRyMSIsInNlY3A1MjFyMSIsImN1cnZlVHlwZSIsInAyNTYiLCJzZWNwMjU2cjEiLCJzZWNwMTkycjEiLCJwMzg0IiwicDUyMSIsImluZW5jIiwibWdmIiwid2l0aFB1YmxpYyIsInJldmVyc2UiLCJpSGFzaCIsImhMZW4yIiwiZGJsZW4iLCJtYXNrZWREYiIsIm1hc2tlZFNlZWQiLCJvYWVwIiwibm9uWmVybyIsInBrY3MxIiwiekJ1ZmZlciIsImRiIiwiZGlmIiwib2xkQnJvd3NlciIsInNhZmVCdWZmZXIiLCJyYW5kb21ieXRlcyIsImtCdWZmZXJNYXhMZW5ndGgiLCJrTWF4VWludDMyIiwiYXNzZXJ0T2Zmc2V0IiwiYWN0dWFsRmlsbCIsIm91ckJ1ZiIsInVpbnQiLCJnZXRQYXJhbUJ5dGVzRm9yQWxnIiwiTUFYX09DVEVUIiwiRU5DT0RFRF9UQUdfU0VRIiwiRU5DT0RFRF9UQUdfSU5UIiwiVEFHX0lOVCIsInNpZ25hdHVyZUFzQnVmZmVyIiwiY291bnRQYWRkaW5nIiwicGFyYW1CeXRlcyIsIm1heEVuY29kZWRQYXJhbUxlbmd0aCIsImlucHV0TGVuZ3RoIiwic2VxTGVuZ3RoIiwickxlbmd0aCIsInJPZmZzZXQiLCJzTGVuZ3RoIiwic09mZnNldCIsInJQYWRkaW5nIiwic1BhZGRpbmciLCJzaWduYXR1cmVCeXRlcyIsInJzQnl0ZXMiLCJzaG9ydExlbmd0aCIsImdldFBhcmFtU2l6ZSIsInBhcmFtQnl0ZXNGb3JBbGciLCJFUzI1NiIsIkVTMzg0IiwiRVM1MTIiLCJKV1NfUkVHRVgiLCJzYWZlSnNvblBhcnNlIiwiaGVhZGVyRnJvbUpXUyIsImp3c1NpZyIsInNpZ25hdHVyZUZyb21KV1MiLCJpc1ZhbGlkSndzIiwiandzVmVyaWZ5Iiwic2VjdXJlZElucHV0RnJvbUpXUyIsImp3c0RlY29kZSIsInBheWxvYWRGcm9tSldTIiwidHlwIiwianNvbiIsInRpbWVzcGFuIiwiUFNfU1VQUE9SVEVEIiwiUFVCX0tFWV9BTEdTIiwiUlNBX0tFWV9BTEdTIiwiSFNfQUxHUyIsImp3dFN0cmluZyIsInNlY3JldE9yUHVibGljS2V5IiwiYXNzaWduIiwiY2xvY2tUaW1lc3RhbXAiLCJkZWNvZGVkVG9rZW4iLCJzZWNyZXRDYWxsYmFjayIsImhhc1NpZ25hdHVyZSIsIm5iZiIsImlnbm9yZU5vdEJlZm9yZSIsImNsb2NrVG9sZXJhbmNlIiwiZXhwIiwiaWdub3JlRXhwaXJhdGlvbiIsImF1ZGllbmNlIiwiYXVkaWVuY2VzIiwiYXVkIiwidGFyZ2V0QXVkaWVuY2UiLCJpc3N1ZXIiLCJpc3MiLCJzdWJqZWN0Iiwiand0aWQiLCJqdGkiLCJtYXhBZ2UiLCJtYXhBZ2VUaW1lc3RhbXAiLCJwbHVyYWwiLCJtc0FicyIsImlzUGx1cmFsIiwiZXhlYyIsInBhcnNlRmxvYXQiLCJsb25nIiwiZm10TG9uZyIsImZtdFNob3J0IiwiU0VNVkVSX1NQRUNfVkVSU0lPTiIsIk1BWF9MRU5HVEgiLCJNQVhfU0FGRV9JTlRFR0VSIiwiTlVNRVJJQ0lERU5USUZJRVIiLCJOVU1FUklDSURFTlRJRklFUkxPT1NFIiwiTk9OTlVNRVJJQ0lERU5USUZJRVIiLCJNQUlOVkVSU0lPTiIsIk1BSU5WRVJTSU9OTE9PU0UiLCJQUkVSRUxFQVNFSURFTlRJRklFUiIsIlBSRVJFTEVBU0VJREVOVElGSUVSTE9PU0UiLCJQUkVSRUxFQVNFIiwiUFJFUkVMRUFTRUxPT1NFIiwiQlVJTERJREVOVElGSUVSIiwiQlVJTEQiLCJGVUxMIiwiRlVMTFBMQUlOIiwiTE9PU0VQTEFJTiIsIkxPT1NFIiwiR1RMVCIsIlhSQU5HRUlERU5USUZJRVJMT09TRSIsIlhSQU5HRUlERU5USUZJRVIiLCJYUkFOR0VQTEFJTiIsIlhSQU5HRVBMQUlOTE9PU0UiLCJYUkFOR0UiLCJYUkFOR0VMT09TRSIsIkNPRVJDRSIsIkxPTkVUSUxERSIsIlRJTERFVFJJTSIsIlRJTERFIiwiVElMREVMT09TRSIsIkxPTkVDQVJFVCIsIkNBUkVUVFJJTSIsIkNBUkVUIiwiQ0FSRVRMT09TRSIsIkNPTVBBUkFUT1JMT09TRSIsIkNPTVBBUkFUT1IiLCJDT01QQVJBVE9SVFJJTSIsIkhZUEhFTlJBTkdFIiwiSFlQSEVOUkFOR0VMT09TRSIsIlNUQVIiLCJsb29zZSIsImluY2x1ZGVQcmVyZWxlYXNlIiwiU2VtVmVyIiwibWFqb3IiLCJtaW5vciIsInBhdGNoIiwicHJlcmVsZWFzZSIsImJ1aWxkIiwiY2xlYW4iLCJjb21wYXJlTWFpbiIsImNvbXBhcmVQcmUiLCJjb21wYXJlSWRlbnRpZmllcnMiLCJpbmMiLCJyZWxlYXNlIiwiaWRlbnRpZmllciIsInZlcnNpb24xIiwidmVyc2lvbjIiLCJkZWZhdWx0UmVzdWx0IiwibnVtZXJpYyIsImFudW0iLCJibnVtIiwibmVxIiwib3AiLCJDb21wYXJhdG9yIiwiY29tcCIsIkFOWSIsIm9wZXJhdG9yIiwicmNvbXBhcmVJZGVudGlmaWVycyIsImNvbXBhcmVMb29zZSIsInJjb21wYXJlIiwic29ydCIsInJzb3J0IiwiUmFuZ2UiLCJyYW5nZSIsInBhcnNlUmFuZ2UiLCJpc1giLCJoeXBoZW5SZXBsYWNlIiwiJDAiLCJmTSIsImZtIiwiZnAiLCJmcHIiLCJmYiIsInRvIiwidE0iLCJ0bSIsInRwIiwidHByIiwidGIiLCJ0ZXN0U2V0IiwiYWxsb3dlZCIsIm91dHNpZGUiLCJoaWxvIiwiZ3RmbiIsImx0ZWZuIiwibHRmbiIsImVjb21wIiwiY29tcGFyYXRvcnMiLCJoaWdoIiwibG93IiwiY29tcGFyYXRvciIsImludGVyc2VjdHMiLCJyYW5nZVRtcCIsInNhbWVEaXJlY3Rpb25JbmNyZWFzaW5nIiwic2FtZURpcmVjdGlvbkRlY3JlYXNpbmciLCJzYW1lU2VtVmVyIiwiZGlmZmVyZW50RGlyZWN0aW9uc0luY2x1c2l2ZSIsIm9wcG9zaXRlRGlyZWN0aW9uc0xlc3NUaGFuIiwib3Bwb3NpdGVEaXJlY3Rpb25zR3JlYXRlclRoYW4iLCJjb21wcyIsImNvbXBSZSIsInByIiwicmVwbGFjZUNhcmV0IiwicmVwbGFjZUNhcmV0cyIsInJlcGxhY2VUaWxkZSIsInJlcGxhY2VUaWxkZXMiLCJndGx0IiwieE0iLCJ4bSIsInJlcGxhY2VYUmFuZ2UiLCJyZXBsYWNlWFJhbmdlcyIsInJlcGxhY2VTdGFycyIsInBhcnNlQ29tcGFyYXRvciIsInRoaXNDb21wYXJhdG9ycyIsImV2ZXJ5IiwidGhpc0NvbXBhcmF0b3IiLCJyYW5nZUNvbXBhcmF0b3JzIiwicmFuZ2VDb21wYXJhdG9yIiwidG9Db21wYXJhdG9ycyIsIm1heFNhdGlzZnlpbmciLCJtYXhTViIsInJhbmdlT2JqIiwibWluU2F0aXNmeWluZyIsIm1pblNWIiwibWluVmVyc2lvbiIsIm1pbnZlciIsImNvbXB2ZXIiLCJ2YWxpZFJhbmdlIiwibHRyIiwiZ3RyIiwicjEiLCJjb2VyY2UiLCJpc0ludGVnZXIiLCJpc1BsYWluT2JqZWN0IiwiU1VQUE9SVEVEX0FMR1MiLCJzaWduX29wdGlvbnNfc2NoZW1hIiwiZXhwaXJlc0luIiwibm90QmVmb3JlIiwibm9UaW1lc3RhbXAiLCJrZXlpZCIsIm11dGF0ZVBheWxvYWQiLCJyZWdpc3RlcmVkX2NsYWltc19zY2hlbWEiLCJzY2hlbWEiLCJhbGxvd1Vua25vd24iLCJwYXJhbWV0ZXJOYW1lIiwidmFsaWRhdG9yIiwib3B0aW9uc190b19wYXlsb2FkIiwib3B0aW9uc19mb3Jfb2JqZWN0cyIsInNlY3JldE9yUHJpdmF0ZUtleSIsImlzT2JqZWN0UGF5bG9hZCIsImtpZCIsImZhaWx1cmUiLCJ2YWxpZGF0ZVBheWxvYWQiLCJpbnZhbGlkX29wdGlvbnMiLCJvcHQiLCJ2YWxpZGF0ZU9wdGlvbnMiLCJjbGFpbSIsIklORklOSVRZIiwiTUFYX0lOVEVHRVIiLCJOQU4iLCJhcmdzVGFnIiwiZnVuY1RhZyIsImdlblRhZyIsInN0cmluZ1RhZyIsInN5bWJvbFRhZyIsInJlVHJpbSIsInJlSXNCYWRIZXgiLCJyZUlzQmluYXJ5IiwicmVJc09jdGFsIiwicmVJc1VpbnQiLCJmcmVlUGFyc2VJbnQiLCJiYXNlSXNOYU4iLCJiYXNlVmFsdWVzIiwicHJvcHMiLCJpdGVyYXRlZSIsImFycmF5TWFwIiwiZnVuYyIsIm9iamVjdFByb3RvIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJuYXRpdmVLZXlzIiwibmF0aXZlTWF4IiwiYXJyYXlMaWtlS2V5cyIsImlzT2JqZWN0TGlrZSIsImlzQXJyYXlMaWtlIiwiaXNBcnJheUxpa2VPYmplY3QiLCJpc0FyZ3VtZW50cyIsImJhc2VUaW1lcyIsInNraXBJbmRleGVzIiwiaXNJbmRleCIsImJhc2VLZXlzIiwiQ3RvciIsImlzTGVuZ3RoIiwiY29sbGVjdGlvbiIsImZyb21JbmRleCIsImd1YXJkIiwidmFsdWVPZiIsImlzQmluYXJ5IiwidG9GaW5pdGUiLCJ0b0ludGVnZXIiLCJwcmVkaWNhdGUiLCJmcm9tUmlnaHQiLCJiYXNlRmluZEluZGV4IiwiYmFzZUluZGV4T2YiLCJib29sVGFnIiwibnVtYmVyVGFnIiwib2JqZWN0VGFnIiwiZnVuY1Byb3RvIiwiZnVuY1RvU3RyaW5nIiwib2JqZWN0Q3RvclN0cmluZyIsImdldFByb3RvdHlwZSIsImlzSG9zdE9iamVjdCIsIkZVTkNfRVJST1JfVEVYVCIsImJlZm9yZSIsIkF4aW9zIiwibWVyZ2VDb25maWciLCJjcmVhdGVJbnN0YW5jZSIsImRlZmF1bHRDb25maWciLCJheGlvcyIsImluc3RhbmNlQ29uZmlnIiwiQ2FuY2VsVG9rZW4iLCJpc0NhbmNlbCIsImFsbCIsInByb21pc2VzIiwic3ByZWFkIiwiZGVmYXVsdCIsIkludGVyY2VwdG9yTWFuYWdlciIsImRpc3BhdGNoUmVxdWVzdCIsImludGVyY2VwdG9ycyIsImNoYWluIiwiaW50ZXJjZXB0b3IiLCJmdWxmaWxsZWQiLCJyZWplY3RlZCIsImdldFVyaSIsImhhbmRsZXJzIiwiZWplY3QiLCJ0cmFuc2Zvcm1EYXRhIiwiaXNBYnNvbHV0ZVVSTCIsImNvbWJpbmVVUkxzIiwidGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZCIsInRocm93SWZSZXF1ZXN0ZWQiLCJiYXNlVVJMIiwiZm5zIiwibm9ybWFsaXplZE5hbWUiLCJpc0F4aW9zRXJyb3IiLCJkZXNjcmlwdGlvbiIsImZpbGVOYW1lIiwibGluZU51bWJlciIsImNvbHVtbk51bWJlciIsImlnbm9yZUR1cGxpY2F0ZU9mIiwib3JpZ2luVVJMIiwibXNpZSIsInVzZXJBZ2VudCIsInVybFBhcnNpbmdOb2RlIiwicmVzb2x2ZVVSTCIsImhyZWYiLCJzZXRBdHRyaWJ1dGUiLCJwcm90b2NvbCIsImhvc3QiLCJzZWFyY2giLCJob3N0bmFtZSIsInBvcnQiLCJwYXRobmFtZSIsImNoYXJBdCIsImxvY2F0aW9uIiwicmVxdWVzdFVSTCIsImV4cGlyZXMiLCJkb21haW4iLCJzZWN1cmUiLCJjb29raWUiLCJ0b0dNVFN0cmluZyIsImRlY29kZVVSSUNvbXBvbmVudCIsInJlbW92ZSIsInJlbGF0aXZlVVJMIiwiZXhlY3V0b3IiLCJ0b2tlbiIsImNoYW5nZVBhZ2UiLCJwYWdlIiwib25sb2FkIiwiZ2V0SXRlbSIsImxvZ291dCIsImdldEVsZW1lbnRCeUlkIiwicHJldmVudERlZmF1bHQiLCJyZW1vdmVJdGVtIiwiYXN5bmMiLCJWYWxpZGF0ZVVzZXIiLCJsb2dpbiIsInBvc3QiLCJpbm5lckhUTUwiLCJ1c2VySWQiLCJzZXRJdGVtIiwiY29uZmlybVBhc3N3b3JkIiwicmVnRmFpbHVyZSJdLCJtYXBwaW5ncyI6ImFBQ0UsSUFBSUEsRUFBbUIsR0FHdkIsU0FBU0MsRUFBb0JDLEdBRzVCLEdBQUdGLEVBQWlCRSxHQUNuQixPQUFPRixFQUFpQkUsR0FBVUMsUUFHbkMsSUFBSUMsRUFBU0osRUFBaUJFLEdBQVksQ0FDekNHLEVBQUdILEVBQ0hJLEdBQUcsRUFDSEgsUUFBUyxJQVVWLE9BTkFJLEVBQVFMLEdBQVVNLEtBQUtKLEVBQU9ELFFBQVNDLEVBQVFBLEVBQU9ELFFBQVNGLEdBRy9ERyxFQUFPRSxHQUFJLEVBR0pGLEVBQU9ELFFBS2ZGLEVBQW9CUSxFQUFJRixFQUd4Qk4sRUFBb0JTLEVBQUlWLEVBR3hCQyxFQUFvQlUsRUFBSSxTQUFTUixFQUFTUyxFQUFNQyxHQUMzQ1osRUFBb0JhLEVBQUVYLEVBQVNTLElBQ2xDRyxPQUFPQyxlQUFlYixFQUFTUyxFQUFNLENBQUVLLFlBQVksRUFBTUMsSUFBS0wsS0FLaEVaLEVBQW9Ca0IsRUFBSSxTQUFTaEIsR0FDWCxvQkFBWGlCLFFBQTBCQSxPQUFPQyxhQUMxQ04sT0FBT0MsZUFBZWIsRUFBU2lCLE9BQU9DLFlBQWEsQ0FBRUMsTUFBTyxXQUU3RFAsT0FBT0MsZUFBZWIsRUFBUyxhQUFjLENBQUVtQixPQUFPLEtBUXZEckIsRUFBb0JzQixFQUFJLFNBQVNELEVBQU9FLEdBRXZDLEdBRFUsRUFBUEEsSUFBVUYsRUFBUXJCLEVBQW9CcUIsSUFDL0IsRUFBUEUsRUFBVSxPQUFPRixFQUNwQixHQUFXLEVBQVBFLEdBQThCLGlCQUFWRixHQUFzQkEsR0FBU0EsRUFBTUcsV0FBWSxPQUFPSCxFQUNoRixJQUFJSSxFQUFLWCxPQUFPWSxPQUFPLE1BR3ZCLEdBRkExQixFQUFvQmtCLEVBQUVPLEdBQ3RCWCxPQUFPQyxlQUFlVSxFQUFJLFVBQVcsQ0FBRVQsWUFB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RyxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FDbEQsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksR0FDbEQsR0FBSSxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsSUFHaERDLEVBQUssQ0FDUCxHQUFJLEdBQUksR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUNyRCxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEdBQUksRUFBRyxHQUFJLEdBQUksRUFBRyxHQUFJLEVBQUcsR0FBSSxHQUNwRCxHQUFJLEdBQUksRUFBRyxFQUFHLEdBQUksRUFBRyxHQUFJLEdBQUksR0FBSSxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksRUFBRyxFQUNyRCxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUNwRCxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxHQUFJLEdBQUksR0FBSSxHQUFJLEVBQUcsRUFBRyxHQUduREMsRUFBSyxDQUNQLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSSxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUksR0FBSSxHQUFJLEVBQ3JELEVBQUcsR0FBSSxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxHQUFJLEdBQ3BELEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJLEdBQUksRUFBRyxHQUFJLEdBQUksR0FBSSxFQUFHLEVBQ3JELEdBQUksRUFBRyxFQUFHLEdBQUks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QUksRUFBRyxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQ2pELEdBQUksRUFBRyxFQUFHLEdBQUksRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEdBQUksRUFBRyxFQUFHLEdBRXBELEVBQUcsR0FBSSxHQUFJLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEVBQ25ELEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsR0FBSSxHQUFJLEVBQUcsR0FBSSxHQUFJLEVBQ25ELEdBQUksRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUksR0FBSSxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQ3BELEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBRWpELEVBQUcsR0FBSSxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQ3BELEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUksR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQ2xELEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxHQUFJLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQ25ELEdBQUksRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBRWxELEdBQUksR0FBSSxFQUFHLEdBQUksR0FBSSxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQ25ELEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEVBQ25ELEVBQUcsRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEdBQ2xELEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxFQUFHLEdBRWxELEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQ25ELEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQ2xELEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSSxHQUFJLEdBQUksRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQ3BELEdBQUksRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBRWpELEdBQUksRUFBRyxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQ25ELEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQ25ELEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJLEdBQUksRUFBRyxFQUFHLEdBQ2xELEVBQUcsR0FBSSxFQUFHLEdBQUksR0FBSSxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLElBR3BEcC9ELEVBQVFxL0QsV0FBYSxTQUFv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SSxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFDbkQsR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FDbEQsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksR0FDbEQsR0FBSSxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsSUFHaERuc0UsRUFBSSxDQUNOLEdBQUksR0FBSSxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUksR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQ3JELEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsR0FBSSxFQUFHLEdBQUksR0FBSSxFQUFHLEdBQUksRUFBRyxHQUFJLEdBQ3BELEdBQUksR0FBSSxFQUFHLEVBQUcsR0FBSSxFQUFHLEdBQUksR0FBSSxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQ3JELEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQ3BELEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEdBQUksR0FBSSxHQUFJLEdBQUksRUFBRyxFQUFHLEdBR25Eb3NFLEVBQUssQ0FDUCxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUksR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJLEdBQUksR0FBSSxFQUNyRCxFQUFHLEdBQUksR0FBSSxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksR0FBSSxHQUNwRCxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxF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QUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0EsbUVBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG1FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLGtFQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxrRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0EsbUVBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLGtFQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxzRUFJTmhXLElBQUssQ0FDSG5GLElBQUssRUFDTG1iLE9BQVEsQ0FDTixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxtRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0EsbUVBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0EsbUVBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0EsbUVBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLGtFQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0EsbUVBRUYsQ0FDRSxtRUFDQSxtRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG1FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxtRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0Usa0VBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0EsbUVBRUYsQ0FDRSxtRUFDQSxtRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxrRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0EsbUVBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG1FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxrRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLGlFQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLGtFQUNBLG9FQUVGLENBQ0UsbUVBQ0EsbUVBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxtRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxtRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0EsbUVBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9F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RzNCLE1BQU0xcEUsUUFBZ0J1cEUsRUFBYUMsRUFBT2gxRCxFQUFVLFlBQ3RDLElBQVh4VSxHQUtzQixLQUFqQkEsRUFBTzBuQyxTQUVYb2lDLEVBQVdKLFVBQVksR0FDdkJDLE9BQVMzcEUsRUFBTzlsQixLQUFLdXlELElBRXJCcThCLEVBQVcsUUEvREEsQ0FBQzl1RixHQUFRd3lCLFFBQVEwRCxJQUFJbDJCLEdBaUVwQ2syQixDQUFJbFEsSUFWQThwRSxFQUFXSixVQUFZIiwiZmlsZSI6Im5ldy5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAyMTQpO1xuIiwiLyogZXNsaW50LWRpc2FibGUgbm9kZS9uby1kZXByZWNhdGVkLWFwaSAqL1xudmFyIGJ1ZmZlciA9IHJlcXVpcmUoJ2J1ZmZlcicpXG52YXIgQnVmZmVyID0gYnVmZmVyLkJ1ZmZlclxuXG4vLyBhbHRlcm5hdGl2ZSB0byB1c2luZyBPYmplY3Qua2V5cyBmb3Igb2xkIGJyb3dzZXJzXG5mdW5jdGlvbiBjb3B5UHJvcHMgKHNyYywgZHN0KSB7XG4gIGZvciAodmFyIGtleSBpbiBzcmMpIHtcbiAgICBkc3Rba2V5XSA9IHNyY1trZXldXG4gIH1cbn1cbmlmIChCdWZmZXIuZnJvbSAmJiBCdWZmZXIuYWxsb2MgJiYgQnVmZmVyLmFsbG9jVW5zYWZlICYmIEJ1ZmZlci5hbGxvY1Vuc2FmZVNsb3cpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBidWZmZXJcbn0gZWxzZSB7XG4gIC8vIENvcHkgcHJvcGVydGllcyBmcm9tIHJlcXVpcmUoJ2J1ZmZlcicpXG4gIGNvcHlQcm9wcyhidWZmZXIsIGV4cG9ydHMpXG4gIGV4cG9ydHMuQnVmZmVyID0gU2FmZUJ1ZmZlclxufVxuXG5mdW5jdGlvbiBTYWZlQnVmZmVyIChhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gQnVmZmVyKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG4vLyBDb3B5IHN0YXRpYyBtZXRob2RzIGZyb20gQnVmZmVyXG5jb3B5UHJvcHMoQnVmZmVyLCBTYWZlQnVmZmVyKVxuXG5TYWZlQnVmZmVyLmZyb20gPSBmdW5jdGlvbiAoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgaWYgKHR5cGVvZiBhcmcgPT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBub3QgYmUgYSBudW1iZXInKVxuICB9XG4gIHJldHVybiBCdWZmZXIoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG59XG5cblNhZmVCdWZmZXIuYWxsb2MgPSBmdW5jdGlvbiAoc2l6ZSwgZmlsbCwgZW5jb2RpbmcpIHtcbiAgaWYgKHR5cGVvZiBzaXplICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBudW1iZXInKVxuICB9XG4gIHZhciBidWYgPSBCdWZmZXIoc2l6ZSlcbiAgaWYgKGZpbGwgIT09IHVuZGVmaW5lZCkge1xuICAgIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnKSB7XG4gICAgICBidWYuZmlsbChmaWxsLCBlbmNvZGluZylcbiAgICB9IGVsc2Uge1xuICAgICAgYnVmLmZpbGwoZmlsbClcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgYnVmLmZpbGwoMClcbiAgfVxuICByZXR1cm4gYnVmXG59XG5cblNhZmVCdWZmZXIuYWxsb2NVbnNhZmUgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICBpZiAodHlwZW9mIHNpemUgIT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIG51bWJlcicpXG4gIH1cbiAgcmV0dXJuIEJ1ZmZlcihzaXplKVxufVxuXG5TYWZlQnVmZmVyLmFsbG9jVW5zYWZlU2xvdyA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgbnVtYmVyJylcbiAgfVxuICByZXR1cm4gYnVmZmVyLlNsb3dCdWZmZXIoc2l6ZSlcbn1cbiIsImlmICh0eXBlb2YgT2JqZWN0LmNyZWF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAvLyBpbXBsZW1lbnRhdGlvbiBmcm9tIHN0YW5kYXJkIG5vZGUuanMgJ3V0aWwnIG1vZHVsZVxuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGluaGVyaXRzKGN0b3IsIHN1cGVyQ3Rvcikge1xuICAgIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yXG4gICAgY3Rvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ3Rvci5wcm90b3R5cGUsIHtcbiAgICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICAgIHZhbHVlOiBjdG9yLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgfVxuICAgIH0pO1xuICB9O1xufSBlbHNlIHtcbiAgLy8gb2xkIHNjaG9vbCBzaGltIGZvciBvbGQgYnJvd3NlcnNcbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpbmhlcml0cyhjdG9yLCBzdXBlckN0b3IpIHtcbiAgICBjdG9yLnN1cGVyXyA9IHN1cGVyQ3RvclxuICAgIHZhciBUZW1wQ3RvciA9IGZ1bmN0aW9uICgpIHt9XG4gICAgVGVtcEN0b3IucHJvdG90eXBlID0gc3VwZXJDdG9yLnByb3RvdHlwZVxuICAgIGN0b3IucHJvdG90eXBlID0gbmV3IFRlbXBDdG9yKClcbiAgICBjdG9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGN0b3JcbiAgfVxufVxuIiwiLyohXG4gKiBUaGUgYnVmZmVyIG1vZHVsZSBmcm9tIG5vZGUuanMsIGZvciB0aGUgYnJvd3Nlci5cbiAqXG4gKiBAYXV0aG9yICAgRmVyb3NzIEFib3VraGFkaWplaCA8ZmVyb3NzQGZlcm9zcy5vcmc+IDxodHRwOi8vZmVyb3NzLm9yZz5cbiAqIEBsaWNlbnNlICBNSVRcbiAqL1xuLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gKi9cblxuJ3VzZSBzdHJpY3QnXG5cbnZhciBiYXNlNjQgPSByZXF1aXJlKCdiYXNlNjQtanMnKVxudmFyIGllZWU3NTQgPSByZXF1aXJlKCdpZWVlNzU0JylcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnaXNhcnJheScpXG5cbmV4cG9ydHMuQnVmZmVyID0gQnVmZmVyXG5leHBvcnRzLlNsb3dCdWZmZXIgPSBTbG93QnVmZmVyXG5leHBvcnRzLklOU1BFQ1RfTUFYX0JZVEVTID0gNTBcblxuLyoqXG4gKiBJZiBgQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlRgOlxuICogICA9PT0gdHJ1ZSAgICBVc2UgVWludDhBcnJheSBpbXBsZW1lbnRhdGlvbiAoZmFzdGVzdClcbiAqICAgPT09IGZhbHNlICAgVXNlIE9iamVjdCBpbXBsZW1lbnRhdGlvbiAobW9zdCBjb21wYXRpYmxlLCBldmVuIElFNilcbiAqXG4gKiBCcm93c2VycyB0aGF0IHN1cHBvcnQgdHlwZWQgYXJyYXlzIGFyZSBJRSAxMCssIEZpcmVmb3ggNCssIENocm9tZSA3KywgU2FmYXJpIDUuMSssXG4gKiBPcGVyYSAxMS42KywgaU9TIDQuMisuXG4gKlxuICogRHVlIHRvIHZhcmlvdXMgYnJvd3NlciBidWdzLCBzb21ldGltZXMgdGhlIE9iamVjdCBpbXBsZW1lbnRhdGlvbiB3aWxsIGJlIHVzZWQgZXZlblxuICogd2hlbiB0aGUgYnJvd3NlciBzdXBwb3J0cyB0eXBlZCBhcnJheXMuXG4gKlxuICogTm90ZTpcbiAqXG4gKiAgIC0gRmlyZWZveCA0LTI5IGxhY2tzIHN1cHBvcnQgZm9yIGFkZGluZyBuZXcgcHJvcGVydGllcyB0byBgVWludDhBcnJheWAgaW5zdGFuY2VzLFxuICogICAgIFNlZTogaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9Njk1NDM4LlxuICpcbiAqICAgLSBDaHJvbWUgOS0xMCBpcyBtaXNzaW5nIHRoZSBgVHlwZWRBcnJheS5wcm90b3R5cGUuc3ViYXJyYXlgIGZ1bmN0aW9uLlxuICpcbiAqICAgLSBJRTEwIGhhcyBhIGJyb2tlbiBgVHlwZWRBcnJheS5wcm90b3R5cGUuc3ViYXJyYXlgIGZ1bmN0aW9uIHdoaWNoIHJldHVybnMgYXJyYXlzIG9mXG4gKiAgICAgaW5jb3JyZWN0IGxlbmd0aCBpbiBzb21lIHNpdHVhdGlvbnMuXG5cbiAqIFdlIGRldGVjdCB0aGVzZSBidWdneSBicm93c2VycyBhbmQgc2V0IGBCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVGAgdG8gYGZhbHNlYCBzbyB0aGV5XG4gKiBnZXQgdGhlIE9iamVjdCBpbXBsZW1lbnRhdGlvbiwgd2hpY2ggaXMgc2xvd2VyIGJ1dCBiZWhhdmVzIGNvcnJlY3RseS5cbiAqL1xuQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgPSBnbG9iYWwuVFlQRURfQVJSQVlfU1VQUE9SVCAhPT0gdW5kZWZpbmVkXG4gID8gZ2xvYmFsLlRZUEVEX0FSUkFZX1NVUFBPUlRcbiAgOiB0eXBlZEFycmF5U3VwcG9ydCgpXG5cbi8qXG4gKiBFeHBvcnQga01heExlbmd0aCBhZnRlciB0eXBlZCBhcnJheSBzdXBwb3J0IGlzIGRldGVybWluZWQuXG4gKi9cbmV4cG9ydHMua01heExlbmd0aCA9IGtNYXhMZW5ndGgoKVxuXG5mdW5jdGlvbiB0eXBlZEFycmF5U3VwcG9ydCAoKSB7XG4gIHRyeSB7XG4gICAgdmFyIGFyciA9IG5ldyBVaW50OEFycmF5KDEpXG4gICAgYXJyLl9fcHJvdG9fXyA9IHtfX3Byb3RvX186IFVpbnQ4QXJyYXkucHJvdG90eXBlLCBmb286IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDQyIH19XG4gICAgcmV0dXJuIGFyci5mb28oKSA9PT0gNDIgJiYgLy8gdHlwZWQgYXJyYXkgaW5zdGFuY2VzIGNhbiBiZSBhdWdtZW50ZWRcbiAgICAgICAgdHlwZW9mIGFyci5zdWJhcnJheSA9PT0gJ2Z1bmN0aW9uJyAmJiAvLyBjaHJvbWUgOS0xMCBsYWNrIGBzdWJhcnJheWBcbiAgICAgICAgYXJyLnN1YmFycmF5KDEsIDEpLmJ5dGVMZW5ndGggPT09IDAgLy8gaWUxMCBoYXMgYnJva2VuIGBzdWJhcnJheWBcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbmZ1bmN0aW9uIGtNYXhMZW5ndGggKCkge1xuICByZXR1cm4gQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlRcbiAgICA/IDB4N2ZmZmZmZmZcbiAgICA6IDB4M2ZmZmZmZmZcbn1cblxuZnVuY3Rpb24gY3JlYXRlQnVmZmVyICh0aGF0LCBsZW5ndGgpIHtcbiAgaWYgKGtNYXhMZW5ndGgoKSA8IGxlbmd0aCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbnZhbGlkIHR5cGVkIGFycmF5IGxlbmd0aCcpXG4gIH1cbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgLy8gUmV0dXJuIGFuIGF1Z21lbnRlZCBgVWludDhBcnJheWAgaW5zdGFuY2UsIGZvciBiZXN0IHBlcmZvcm1hbmNlXG4gICAgdGhhdCA9IG5ldyBVaW50OEFycmF5KGxlbmd0aClcbiAgICB0aGF0Ll9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgfSBlbHNlIHtcbiAgICAvLyBGYWxsYmFjazogUmV0dXJuIGFuIG9iamVjdCBpbnN0YW5jZSBvZiB0aGUgQnVmZmVyIGNsYXNzXG4gICAgaWYgKHRoYXQgPT09IG51bGwpIHtcbiAgICAgIHRoYXQgPSBuZXcgQnVmZmVyKGxlbmd0aClcbiAgICB9XG4gICAgdGhhdC5sZW5ndGggPSBsZW5ndGhcbiAgfVxuXG4gIHJldHVybiB0aGF0XG59XG5cbi8qKlxuICogVGhlIEJ1ZmZlciBjb25zdHJ1Y3RvciByZXR1cm5zIGluc3RhbmNlcyBvZiBgVWludDhBcnJheWAgdGhhdCBoYXZlIHRoZWlyXG4gKiBwcm90b3R5cGUgY2hhbmdlZCB0byBgQnVmZmVyLnByb3RvdHlwZWAuIEZ1cnRoZXJtb3JlLCBgQnVmZmVyYCBpcyBhIHN1YmNsYXNzIG9mXG4gKiBgVWludDhBcnJheWAsIHNvIHRoZSByZXR1cm5lZCBpbnN0YW5jZXMgd2lsbCBoYXZlIGFsbCB0aGUgbm9kZSBgQnVmZmVyYCBtZXRob2RzXG4gKiBhbmQgdGhlIGBVaW50OEFycmF5YCBtZXRob2RzLiBTcXVhcmUgYnJhY2tldCBub3RhdGlvbiB3b3JrcyBhcyBleHBlY3RlZCAtLSBpdFxuICogcmV0dXJucyBhIHNpbmdsZSBvY3RldC5cbiAqXG4gKiBUaGUgYFVpbnQ4QXJyYXlgIHByb3RvdHlwZSByZW1haW5zIHVubW9kaWZpZWQuXG4gKi9cblxuZnVuY3Rpb24gQnVmZmVyIChhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICBpZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUICYmICEodGhpcyBpbnN0YW5jZW9mIEJ1ZmZlcikpIHtcbiAgICByZXR1cm4gbmV3IEJ1ZmZlcihhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIC8vIENvbW1vbiBjYXNlLlxuICBpZiAodHlwZW9mIGFyZyA9PT0gJ251bWJlcicpIHtcbiAgICBpZiAodHlwZW9mIGVuY29kaW5nT3JPZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdJZiBlbmNvZGluZyBpcyBzcGVjaWZpZWQgdGhlbiB0aGUgZmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZydcbiAgICAgIClcbiAgICB9XG4gICAgcmV0dXJuIGFsbG9jVW5zYWZlKHRoaXMsIGFyZylcbiAgfVxuICByZXR1cm4gZnJvbSh0aGlzLCBhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuQnVmZmVyLnBvb2xTaXplID0gODE5MiAvLyBub3QgdXNlZCBieSB0aGlzIGltcGxlbWVudGF0aW9uXG5cbi8vIFRPRE86IExlZ2FjeSwgbm90IG5lZWRlZCBhbnltb3JlLiBSZW1vdmUgaW4gbmV4dCBtYWpvciB2ZXJzaW9uLlxuQnVmZmVyLl9hdWdtZW50ID0gZnVuY3Rpb24gKGFycikge1xuICBhcnIuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxuICByZXR1cm4gYXJyXG59XG5cbmZ1bmN0aW9uIGZyb20gKHRoYXQsIHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcInZhbHVlXCIgYXJndW1lbnQgbXVzdCBub3QgYmUgYSBudW1iZXInKVxuICB9XG5cbiAgaWYgKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiYgdmFsdWUgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xuICAgIHJldHVybiBmcm9tQXJyYXlCdWZmZXIodGhhdCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGZyb21TdHJpbmcodGhhdCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQpXG4gIH1cblxuICByZXR1cm4gZnJvbU9iamVjdCh0aGF0LCB2YWx1ZSlcbn1cblxuLyoqXG4gKiBGdW5jdGlvbmFsbHkgZXF1aXZhbGVudCB0byBCdWZmZXIoYXJnLCBlbmNvZGluZykgYnV0IHRocm93cyBhIFR5cGVFcnJvclxuICogaWYgdmFsdWUgaXMgYSBudW1iZXIuXG4gKiBCdWZmZXIuZnJvbShzdHJbLCBlbmNvZGluZ10pXG4gKiBCdWZmZXIuZnJvbShhcnJheSlcbiAqIEJ1ZmZlci5mcm9tKGJ1ZmZlcilcbiAqIEJ1ZmZlci5mcm9tKGFycmF5QnVmZmVyWywgYnl0ZU9mZnNldFssIGxlbmd0aF1dKVxuICoqL1xuQnVmZmVyLmZyb20gPSBmdW5jdGlvbiAodmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gZnJvbShudWxsLCB2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG5pZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgQnVmZmVyLnByb3RvdHlwZS5fX3Byb3RvX18gPSBVaW50OEFycmF5LnByb3RvdHlwZVxuICBCdWZmZXIuX19wcm90b19fID0gVWludDhBcnJheVxuICBpZiAodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnNwZWNpZXMgJiZcbiAgICAgIEJ1ZmZlcltTeW1ib2wuc3BlY2llc10gPT09IEJ1ZmZlcikge1xuICAgIC8vIEZpeCBzdWJhcnJheSgpIGluIEVTMjAxNi4gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlci9wdWxsLzk3XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEJ1ZmZlciwgU3ltYm9sLnNwZWNpZXMsIHtcbiAgICAgIHZhbHVlOiBudWxsLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSlcbiAgfVxufVxuXG5mdW5jdGlvbiBhc3NlcnRTaXplIChzaXplKSB7XG4gIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcInNpemVcIiBhcmd1bWVudCBtdXN0IGJlIGEgbnVtYmVyJylcbiAgfSBlbHNlIGlmIChzaXplIDwgMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcInNpemVcIiBhcmd1bWVudCBtdXN0IG5vdCBiZSBuZWdhdGl2ZScpXG4gIH1cbn1cblxuZnVuY3Rpb24gYWxsb2MgKHRoYXQsIHNpemUsIGZpbGwsIGVuY29kaW5nKSB7XG4gIGFzc2VydFNpemUoc2l6ZSlcbiAgaWYgKHNpemUgPD0gMCkge1xuICAgIHJldHVybiBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSlcbiAgfVxuICBpZiAoZmlsbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgLy8gT25seSBwYXkgYXR0ZW50aW9uIHRvIGVuY29kaW5nIGlmIGl0J3MgYSBzdHJpbmcuIFRoaXNcbiAgICAvLyBwcmV2ZW50cyBhY2NpZGVudGFsbHkgc2VuZGluZyBpbiBhIG51bWJlciB0aGF0IHdvdWxkXG4gICAgLy8gYmUgaW50ZXJwcmV0dGVkIGFzIGEgc3RhcnQgb2Zmc2V0LlxuICAgIHJldHVybiB0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnXG4gICAgICA/IGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplKS5maWxsKGZpbGwsIGVuY29kaW5nKVxuICAgICAgOiBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSkuZmlsbChmaWxsKVxuICB9XG4gIHJldHVybiBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSlcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IGZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuXG4gKiBhbGxvYyhzaXplWywgZmlsbFssIGVuY29kaW5nXV0pXG4gKiovXG5CdWZmZXIuYWxsb2MgPSBmdW5jdGlvbiAoc2l6ZSwgZmlsbCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGFsbG9jKG51bGwsIHNpemUsIGZpbGwsIGVuY29kaW5nKVxufVxuXG5mdW5jdGlvbiBhbGxvY1Vuc2FmZSAodGhhdCwgc2l6ZSkge1xuICBhc3NlcnRTaXplKHNpemUpXG4gIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSA8IDAgPyAwIDogY2hlY2tlZChzaXplKSB8IDApXG4gIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNpemU7ICsraSkge1xuICAgICAgdGhhdFtpXSA9IDBcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRoYXRcbn1cblxuLyoqXG4gKiBFcXVpdmFsZW50IHRvIEJ1ZmZlcihudW0pLCBieSBkZWZhdWx0IGNyZWF0ZXMgYSBub24temVyby1maWxsZWQgQnVmZmVyIGluc3RhbmNlLlxuICogKi9cbkJ1ZmZlci5hbGxvY1Vuc2FmZSA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIHJldHVybiBhbGxvY1Vuc2FmZShudWxsLCBzaXplKVxufVxuLyoqXG4gKiBFcXVpdmFsZW50IHRvIFNsb3dCdWZmZXIobnVtKSwgYnkgZGVmYXVsdCBjcmVhdGVzIGEgbm9uLXplcm8tZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS5cbiAqL1xuQnVmZmVyLmFsbG9jVW5zYWZlU2xvdyA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIHJldHVybiBhbGxvY1Vuc2FmZShudWxsLCBzaXplKVxufVxuXG5mdW5jdGlvbiBmcm9tU3RyaW5nICh0aGF0LCBzdHJpbmcsIGVuY29kaW5nKSB7XG4gIGlmICh0eXBlb2YgZW5jb2RpbmcgIT09ICdzdHJpbmcnIHx8IGVuY29kaW5nID09PSAnJykge1xuICAgIGVuY29kaW5nID0gJ3V0ZjgnXG4gIH1cblxuICBpZiAoIUJ1ZmZlci5pc0VuY29kaW5nKGVuY29kaW5nKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wiZW5jb2RpbmdcIiBtdXN0IGJlIGEgdmFsaWQgc3RyaW5nIGVuY29kaW5nJylcbiAgfVxuXG4gIHZhciBsZW5ndGggPSBieXRlTGVuZ3RoKHN0cmluZywgZW5jb2RpbmcpIHwgMFxuICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIGxlbmd0aClcblxuICB2YXIgYWN0dWFsID0gdGhhdC53cml0ZShzdHJpbmcsIGVuY29kaW5nKVxuXG4gIGlmIChhY3R1YWwgIT09IGxlbmd0aCkge1xuICAgIC8vIFdyaXRpbmcgYSBoZXggc3RyaW5nLCBmb3IgZXhhbXBsZSwgdGhhdCBjb250YWlucyBpbnZhbGlkIGNoYXJhY3RlcnMgd2lsbFxuICAgIC8vIGNhdXNlIGV2ZXJ5dGhpbmcgYWZ0ZXIgdGhlIGZpcnN0IGludmFsaWQgY2hhcmFjdGVyIHRvIGJlIGlnbm9yZWQuIChlLmcuXG4gICAgLy8gJ2FieHhjZCcgd2lsbCBiZSB0cmVhdGVkIGFzICdhYicpXG4gICAgdGhhdCA9IHRoYXQuc2xpY2UoMCwgYWN0dWFsKVxuICB9XG5cbiAgcmV0dXJuIHRoYXRcbn1cblxuZnVuY3Rpb24gZnJvbUFycmF5TGlrZSAodGhhdCwgYXJyYXkpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCA8IDAgPyAwIDogY2hlY2tlZChhcnJheS5sZW5ndGgpIHwgMFxuICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIGxlbmd0aClcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkgKz0gMSkge1xuICAgIHRoYXRbaV0gPSBhcnJheVtpXSAmIDI1NVxuICB9XG4gIHJldHVybiB0aGF0XG59XG5cbmZ1bmN0aW9uIGZyb21BcnJheUJ1ZmZlciAodGhhdCwgYXJyYXksIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICBhcnJheS5ieXRlTGVuZ3RoIC8vIHRoaXMgdGhyb3dzIGlmIGBhcnJheWAgaXMgbm90IGEgdmFsaWQgQXJyYXlCdWZmZXJcblxuICBpZiAoYnl0ZU9mZnNldCA8IDAgfHwgYXJyYXkuYnl0ZUxlbmd0aCA8IGJ5dGVPZmZzZXQpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXFwnb2Zmc2V0XFwnIGlzIG91dCBvZiBib3VuZHMnKVxuICB9XG5cbiAgaWYgKGFycmF5LmJ5dGVMZW5ndGggPCBieXRlT2Zmc2V0ICsgKGxlbmd0aCB8fCAwKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcXCdsZW5ndGhcXCcgaXMgb3V0IG9mIGJvdW5kcycpXG4gIH1cblxuICBpZiAoYnl0ZU9mZnNldCA9PT0gdW5kZWZpbmVkICYmIGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgYXJyYXkgPSBuZXcgVWludDhBcnJheShhcnJheSlcbiAgfSBlbHNlIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXksIGJ5dGVPZmZzZXQpXG4gIH0gZWxzZSB7XG4gICAgYXJyYXkgPSBuZXcgVWludDhBcnJheShhcnJheSwgYnl0ZU9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgLy8gUmV0dXJuIGFuIGF1Z21lbnRlZCBgVWludDhBcnJheWAgaW5zdGFuY2UsIGZvciBiZXN0IHBlcmZvcm1hbmNlXG4gICAgdGhhdCA9IGFycmF5XG4gICAgdGhhdC5fX3Byb3RvX18gPSBCdWZmZXIucHJvdG90eXBlXG4gIH0gZWxzZSB7XG4gICAgLy8gRmFsbGJhY2s6IFJldHVybiBhbiBvYmplY3QgaW5zdGFuY2Ugb2YgdGhlIEJ1ZmZlciBjbGFzc1xuICAgIHRoYXQgPSBmcm9tQXJyYXlMaWtlKHRoYXQsIGFycmF5KVxuICB9XG4gIHJldHVybiB0aGF0XG59XG5cbmZ1bmN0aW9uIGZyb21PYmplY3QgKHRoYXQsIG9iaikge1xuICBpZiAoQnVmZmVyLmlzQnVmZmVyKG9iaikpIHtcbiAgICB2YXIgbGVuID0gY2hlY2tlZChvYmoubGVuZ3RoKSB8IDBcbiAgICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIGxlbilcblxuICAgIGlmICh0aGF0Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHRoYXRcbiAgICB9XG5cbiAgICBvYmouY29weSh0aGF0LCAwLCAwLCBsZW4pXG4gICAgcmV0dXJuIHRoYXRcbiAgfVxuXG4gIGlmIChvYmopIHtcbiAgICBpZiAoKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgb2JqLmJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB8fCAnbGVuZ3RoJyBpbiBvYmopIHtcbiAgICAgIGlmICh0eXBlb2Ygb2JqLmxlbmd0aCAhPT0gJ251bWJlcicgfHwgaXNuYW4ob2JqLmxlbmd0aCkpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcih0aGF0LCAwKVxuICAgICAgfVxuICAgICAgcmV0dXJuIGZyb21BcnJheUxpa2UodGhhdCwgb2JqKVxuICAgIH1cblxuICAgIGlmIChvYmoudHlwZSA9PT0gJ0J1ZmZlcicgJiYgaXNBcnJheShvYmouZGF0YSkpIHtcbiAgICAgIHJldHVybiBmcm9tQXJyYXlMaWtlKHRoYXQsIG9iai5kYXRhKVxuICAgIH1cbiAgfVxuXG4gIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmcsIEJ1ZmZlciwgQXJyYXlCdWZmZXIsIEFycmF5LCBvciBhcnJheS1saWtlIG9iamVjdC4nKVxufVxuXG5mdW5jdGlvbiBjaGVja2VkIChsZW5ndGgpIHtcbiAgLy8gTm90ZTogY2Fubm90IHVzZSBgbGVuZ3RoIDwga01heExlbmd0aCgpYCBoZXJlIGJlY2F1c2UgdGhhdCBmYWlscyB3aGVuXG4gIC8vIGxlbmd0aCBpcyBOYU4gKHdoaWNoIGlzIG90aGVyd2lzZSBjb2VyY2VkIHRvIHplcm8uKVxuICBpZiAobGVuZ3RoID49IGtNYXhMZW5ndGgoKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdBdHRlbXB0IHRvIGFsbG9jYXRlIEJ1ZmZlciBsYXJnZXIgdGhhbiBtYXhpbXVtICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICdzaXplOiAweCcgKyBrTWF4TGVuZ3RoKCkudG9TdHJpbmcoMTYpICsgJyBieXRlcycpXG4gIH1cbiAgcmV0dXJuIGxlbmd0aCB8IDBcbn1cblxuZnVuY3Rpb24gU2xvd0J1ZmZlciAobGVuZ3RoKSB7XG4gIGlmICgrbGVuZ3RoICE9IGxlbmd0aCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGVxZXFlcVxuICAgIGxlbmd0aCA9IDBcbiAgfVxuICByZXR1cm4gQnVmZmVyLmFsbG9jKCtsZW5ndGgpXG59XG5cbkJ1ZmZlci5pc0J1ZmZlciA9IGZ1bmN0aW9uIGlzQnVmZmVyIChiKSB7XG4gIHJldHVybiAhIShiICE9IG51bGwgJiYgYi5faXNCdWZmZXIpXG59XG5cbkJ1ZmZlci5jb21wYXJlID0gZnVuY3Rpb24gY29tcGFyZSAoYSwgYikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihhKSB8fCAhQnVmZmVyLmlzQnVmZmVyKGIpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnRzIG11c3QgYmUgQnVmZmVycycpXG4gIH1cblxuICBpZiAoYSA9PT0gYikgcmV0dXJuIDBcblxuICB2YXIgeCA9IGEubGVuZ3RoXG4gIHZhciB5ID0gYi5sZW5ndGhcblxuICBmb3IgKHZhciBpID0gMCwgbGVuID0gTWF0aC5taW4oeCwgeSk7IGkgPCBsZW47ICsraSkge1xuICAgIGlmIChhW2ldICE9PSBiW2ldKSB7XG4gICAgICB4ID0gYVtpXVxuICAgICAgeSA9IGJbaV1cbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgaWYgKHggPCB5KSByZXR1cm4gLTFcbiAgaWYgKHkgPCB4KSByZXR1cm4gMVxuICByZXR1cm4gMFxufVxuXG5CdWZmZXIuaXNFbmNvZGluZyA9IGZ1bmN0aW9uIGlzRW5jb2RpbmcgKGVuY29kaW5nKSB7XG4gIHN3aXRjaCAoU3RyaW5nKGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgY2FzZSAnaGV4JzpcbiAgICBjYXNlICd1dGY4JzpcbiAgICBjYXNlICd1dGYtOCc6XG4gICAgY2FzZSAnYXNjaWknOlxuICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgY2FzZSAnYmluYXJ5JzpcbiAgICBjYXNlICdiYXNlNjQnOlxuICAgIGNhc2UgJ3VjczInOlxuICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICBjYXNlICd1dGYxNmxlJzpcbiAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG5CdWZmZXIuY29uY2F0ID0gZnVuY3Rpb24gY29uY2F0IChsaXN0LCBsZW5ndGgpIHtcbiAgaWYgKCFpc0FycmF5KGxpc3QpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJsaXN0XCIgYXJndW1lbnQgbXVzdCBiZSBhbiBBcnJheSBvZiBCdWZmZXJzJylcbiAgfVxuXG4gIGlmIChsaXN0Lmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBCdWZmZXIuYWxsb2MoMClcbiAgfVxuXG4gIHZhciBpXG4gIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGxlbmd0aCA9IDBcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7ICsraSkge1xuICAgICAgbGVuZ3RoICs9IGxpc3RbaV0ubGVuZ3RoXG4gICAgfVxuICB9XG5cbiAgdmFyIGJ1ZmZlciA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShsZW5ndGgpXG4gIHZhciBwb3MgPSAwXG4gIGZvciAoaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgKytpKSB7XG4gICAgdmFyIGJ1ZiA9IGxpc3RbaV1cbiAgICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihidWYpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImxpc3RcIiBhcmd1bWVudCBtdXN0IGJlIGFuIEFycmF5IG9mIEJ1ZmZlcnMnKVxuICAgIH1cbiAgICBidWYuY29weShidWZmZXIsIHBvcylcbiAgICBwb3MgKz0gYnVmLmxlbmd0aFxuICB9XG4gIHJldHVybiBidWZmZXJcbn1cblxuZnVuY3Rpb24gYnl0ZUxlbmd0aCAoc3RyaW5nLCBlbmNvZGluZykge1xuICBpZiAoQnVmZmVyLmlzQnVmZmVyKHN0cmluZykpIHtcbiAgICByZXR1cm4gc3RyaW5nLmxlbmd0aFxuICB9XG4gIGlmICh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBBcnJheUJ1ZmZlci5pc1ZpZXcgPT09ICdmdW5jdGlvbicgJiZcbiAgICAgIChBcnJheUJ1ZmZlci5pc1ZpZXcoc3RyaW5nKSB8fCBzdHJpbmcgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikpIHtcbiAgICByZXR1cm4gc3RyaW5nLmJ5dGVMZW5ndGhcbiAgfVxuICBpZiAodHlwZW9mIHN0cmluZyAhPT0gJ3N0cmluZycpIHtcbiAgICBzdHJpbmcgPSAnJyArIHN0cmluZ1xuICB9XG5cbiAgdmFyIGxlbiA9IHN0cmluZy5sZW5ndGhcbiAgaWYgKGxlbiA9PT0gMCkgcmV0dXJuIDBcblxuICAvLyBVc2UgYSBmb3IgbG9vcCB0byBhdm9pZCByZWN1cnNpb25cbiAgdmFyIGxvd2VyZWRDYXNlID0gZmFsc2VcbiAgZm9yICg7Oykge1xuICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gbGVuXG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgIGNhc2UgdW5kZWZpbmVkOlxuICAgICAgICByZXR1cm4gdXRmOFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGhcbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiBsZW4gKiAyXG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gbGVuID4+PiAxXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICByZXR1cm4gYmFzZTY0VG9CeXRlcyhzdHJpbmcpLmxlbmd0aFxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSByZXR1cm4gdXRmOFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGggLy8gYXNzdW1lIHV0ZjhcbiAgICAgICAgZW5jb2RpbmcgPSAoJycgKyBlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICB9XG4gIH1cbn1cbkJ1ZmZlci5ieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aFxuXG5mdW5jdGlvbiBzbG93VG9TdHJpbmcgKGVuY29kaW5nLCBzdGFydCwgZW5kKSB7XG4gIHZhciBsb3dlcmVkQ2FzZSA9IGZhbHNlXG5cbiAgLy8gTm8gbmVlZCB0byB2ZXJpZnkgdGhhdCBcInRoaXMubGVuZ3RoIDw9IE1BWF9VSU5UMzJcIiBzaW5jZSBpdCdzIGEgcmVhZC1vbmx5XG4gIC8vIHByb3BlcnR5IG9mIGEgdHlwZWQgYXJyYXkuXG5cbiAgLy8gVGhpcyBiZWhhdmVzIG5laXRoZXIgbGlrZSBTdHJpbmcgbm9yIFVpbnQ4QXJyYXkgaW4gdGhhdCB3ZSBzZXQgc3RhcnQvZW5kXG4gIC8vIHRvIHRoZWlyIHVwcGVyL2xvd2VyIGJvdW5kcyBpZiB0aGUgdmFsdWUgcGFzc2VkIGlzIG91dCBvZiByYW5nZS5cbiAgLy8gdW5kZWZpbmVkIGlzIGhhbmRsZWQgc3BlY2lhbGx5IGFzIHBlciBFQ01BLTI2MiA2dGggRWRpdGlvbixcbiAgLy8gU2VjdGlvbiAxMy4zLjMuNyBSdW50aW1lIFNlbWFudGljczogS2V5ZWRCaW5kaW5nSW5pdGlhbGl6YXRpb24uXG4gIGlmIChzdGFydCA9PT0gdW5kZWZpbmVkIHx8IHN0YXJ0IDwgMCkge1xuICAgIHN0YXJ0ID0gMFxuICB9XG4gIC8vIFJldHVybiBlYXJseSBpZiBzdGFydCA+IHRoaXMubGVuZ3RoLiBEb25lIGhlcmUgdG8gcHJldmVudCBwb3RlbnRpYWwgdWludDMyXG4gIC8vIGNvZXJjaW9uIGZhaWwgYmVsb3cuXG4gIGlmIChzdGFydCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICBpZiAoZW5kID09PSB1bmRlZmluZWQgfHwgZW5kID4gdGhpcy5sZW5ndGgpIHtcbiAgICBlbmQgPSB0aGlzLmxlbmd0aFxuICB9XG5cbiAgaWYgKGVuZCA8PSAwKSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICAvLyBGb3JjZSBjb2Vyc2lvbiB0byB1aW50MzIuIFRoaXMgd2lsbCBhbHNvIGNvZXJjZSBmYWxzZXkvTmFOIHZhbHVlcyB0byAwLlxuICBlbmQgPj4+PSAwXG4gIHN0YXJ0ID4+Pj0gMFxuXG4gIGlmIChlbmQgPD0gc3RhcnQpIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIGlmICghZW5jb2RpbmcpIGVuY29kaW5nID0gJ3V0ZjgnXG5cbiAgd2hpbGUgKHRydWUpIHtcbiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gaGV4U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICAgIHJldHVybiB1dGY4U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgICByZXR1cm4gYXNjaWlTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuIGxhdGluMVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIHJldHVybiBiYXNlNjRTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gdXRmMTZsZVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICAgICAgICBlbmNvZGluZyA9IChlbmNvZGluZyArICcnKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuXG4vLyBUaGUgcHJvcGVydHkgaXMgdXNlZCBieSBgQnVmZmVyLmlzQnVmZmVyYCBhbmQgYGlzLWJ1ZmZlcmAgKGluIFNhZmFyaSA1LTcpIHRvIGRldGVjdFxuLy8gQnVmZmVyIGluc3RhbmNlcy5cbkJ1ZmZlci5wcm90b3R5cGUuX2lzQnVmZmVyID0gdHJ1ZVxuXG5mdW5jdGlvbiBzd2FwIChiLCBuLCBtKSB7XG4gIHZhciBpID0gYltuXVxuICBiW25dID0gYlttXVxuICBiW21dID0gaVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnN3YXAxNiA9IGZ1bmN0aW9uIHN3YXAxNiAoKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuICUgMiAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgMTYtYml0cycpXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gMikge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDEpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwMzIgPSBmdW5jdGlvbiBzd2FwMzIgKCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbiAlIDQgIT09IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDMyLWJpdHMnKVxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDQpIHtcbiAgICBzd2FwKHRoaXMsIGksIGkgKyAzKVxuICAgIHN3YXAodGhpcywgaSArIDEsIGkgKyAyKVxuICB9XG4gIHJldHVybiB0aGlzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc3dhcDY0ID0gZnVuY3Rpb24gc3dhcDY0ICgpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIGlmIChsZW4gJSA4ICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0J1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiA2NC1iaXRzJylcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSA4KSB7XG4gICAgc3dhcCh0aGlzLCBpLCBpICsgNylcbiAgICBzd2FwKHRoaXMsIGkgKyAxLCBpICsgNilcbiAgICBzd2FwKHRoaXMsIGkgKyAyLCBpICsgNSlcbiAgICBzd2FwKHRoaXMsIGkgKyAzLCBpICsgNClcbiAgfVxuICByZXR1cm4gdGhpc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcgKCkge1xuICB2YXIgbGVuZ3RoID0gdGhpcy5sZW5ndGggfCAwXG4gIGlmIChsZW5ndGggPT09IDApIHJldHVybiAnJ1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIHV0ZjhTbGljZSh0aGlzLCAwLCBsZW5ndGgpXG4gIHJldHVybiBzbG93VG9TdHJpbmcuYXBwbHkodGhpcywgYXJndW1lbnRzKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmVxdWFscyA9IGZ1bmN0aW9uIGVxdWFscyAoYikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihiKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlcicpXG4gIGlmICh0aGlzID09PSBiKSByZXR1cm4gdHJ1ZVxuICByZXR1cm4gQnVmZmVyLmNvbXBhcmUodGhpcywgYikgPT09IDBcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbnNwZWN0ID0gZnVuY3Rpb24gaW5zcGVjdCAoKSB7XG4gIHZhciBzdHIgPSAnJ1xuICB2YXIgbWF4ID0gZXhwb3J0cy5JTlNQRUNUX01BWF9CWVRFU1xuICBpZiAodGhpcy5sZW5ndGggPiAwKSB7XG4gICAgc3RyID0gdGhpcy50b1N0cmluZygnaGV4JywgMCwgbWF4KS5tYXRjaCgvLnsyfS9nKS5qb2luKCcgJylcbiAgICBpZiAodGhpcy5sZW5ndGggPiBtYXgpIHN0ciArPSAnIC4uLiAnXG4gIH1cbiAgcmV0dXJuICc8QnVmZmVyICcgKyBzdHIgKyAnPidcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5jb21wYXJlID0gZnVuY3Rpb24gY29tcGFyZSAodGFyZ2V0LCBzdGFydCwgZW5kLCB0aGlzU3RhcnQsIHRoaXNFbmQpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIodGFyZ2V0KSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXInKVxuICB9XG5cbiAgaWYgKHN0YXJ0ID09PSB1bmRlZmluZWQpIHtcbiAgICBzdGFydCA9IDBcbiAgfVxuICBpZiAoZW5kID09PSB1bmRlZmluZWQpIHtcbiAgICBlbmQgPSB0YXJnZXQgPyB0YXJnZXQubGVuZ3RoIDogMFxuICB9XG4gIGlmICh0aGlzU3RhcnQgPT09IHVuZGVmaW5lZCkge1xuICAgIHRoaXNTdGFydCA9IDBcbiAgfVxuICBpZiAodGhpc0VuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhpc0VuZCA9IHRoaXMubGVuZ3RoXG4gIH1cblxuICBpZiAoc3RhcnQgPCAwIHx8IGVuZCA+IHRhcmdldC5sZW5ndGggfHwgdGhpc1N0YXJ0IDwgMCB8fCB0aGlzRW5kID4gdGhpcy5sZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignb3V0IG9mIHJhbmdlIGluZGV4JylcbiAgfVxuXG4gIGlmICh0aGlzU3RhcnQgPj0gdGhpc0VuZCAmJiBzdGFydCA+PSBlbmQpIHtcbiAgICByZXR1cm4gMFxuICB9XG4gIGlmICh0aGlzU3RhcnQgPj0gdGhpc0VuZCkge1xuICAgIHJldHVybiAtMVxuICB9XG4gIGlmIChzdGFydCA+PSBlbmQpIHtcbiAgICByZXR1cm4gMVxuICB9XG5cbiAgc3RhcnQgPj4+PSAwXG4gIGVuZCA+Pj49IDBcbiAgdGhpc1N0YXJ0ID4+Pj0gMFxuICB0aGlzRW5kID4+Pj0gMFxuXG4gIGlmICh0aGlzID09PSB0YXJnZXQpIHJldHVybiAwXG5cbiAgdmFyIHggPSB0aGlzRW5kIC0gdGhpc1N0YXJ0XG4gIHZhciB5ID0gZW5kIC0gc3RhcnRcbiAgdmFyIGxlbiA9IE1hdGgubWluKHgsIHkpXG5cbiAgdmFyIHRoaXNDb3B5ID0gdGhpcy5zbGljZSh0aGlzU3RhcnQsIHRoaXNFbmQpXG4gIHZhciB0YXJnZXRDb3B5ID0gdGFyZ2V0LnNsaWNlKHN0YXJ0LCBlbmQpXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgIGlmICh0aGlzQ29weVtpXSAhPT0gdGFyZ2V0Q29weVtpXSkge1xuICAgICAgeCA9IHRoaXNDb3B5W2ldXG4gICAgICB5ID0gdGFyZ2V0Q29weVtpXVxuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuICBpZiAoeCA8IHkpIHJldHVybiAtMVxuICBpZiAoeSA8IHgpIHJldHVybiAxXG4gIHJldHVybiAwXG59XG5cbi8vIEZpbmRzIGVpdGhlciB0aGUgZmlyc3QgaW5kZXggb2YgYHZhbGAgaW4gYGJ1ZmZlcmAgYXQgb2Zmc2V0ID49IGBieXRlT2Zmc2V0YCxcbi8vIE9SIHRoZSBsYXN0IGluZGV4IG9mIGB2YWxgIGluIGBidWZmZXJgIGF0IG9mZnNldCA8PSBgYnl0ZU9mZnNldGAuXG4vL1xuLy8gQXJndW1lbnRzOlxuLy8gLSBidWZmZXIgLSBhIEJ1ZmZlciB0byBzZWFyY2hcbi8vIC0gdmFsIC0gYSBzdHJpbmcsIEJ1ZmZlciwgb3IgbnVtYmVyXG4vLyAtIGJ5dGVPZmZzZXQgLSBhbiBpbmRleCBpbnRvIGBidWZmZXJgOyB3aWxsIGJlIGNsYW1wZWQgdG8gYW4gaW50MzJcbi8vIC0gZW5jb2RpbmcgLSBhbiBvcHRpb25hbCBlbmNvZGluZywgcmVsZXZhbnQgaXMgdmFsIGlzIGEgc3RyaW5nXG4vLyAtIGRpciAtIHRydWUgZm9yIGluZGV4T2YsIGZhbHNlIGZvciBsYXN0SW5kZXhPZlxuZnVuY3Rpb24gYmlkaXJlY3Rpb25hbEluZGV4T2YgKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKSB7XG4gIC8vIEVtcHR5IGJ1ZmZlciBtZWFucyBubyBtYXRjaFxuICBpZiAoYnVmZmVyLmxlbmd0aCA9PT0gMCkgcmV0dXJuIC0xXG5cbiAgLy8gTm9ybWFsaXplIGJ5dGVPZmZzZXRcbiAgaWYgKHR5cGVvZiBieXRlT2Zmc2V0ID09PSAnc3RyaW5nJykge1xuICAgIGVuY29kaW5nID0gYnl0ZU9mZnNldFxuICAgIGJ5dGVPZmZzZXQgPSAwXG4gIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA+IDB4N2ZmZmZmZmYpIHtcbiAgICBieXRlT2Zmc2V0ID0gMHg3ZmZmZmZmZlxuICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPCAtMHg4MDAwMDAwMCkge1xuICAgIGJ5dGVPZmZzZXQgPSAtMHg4MDAwMDAwMFxuICB9XG4gIGJ5dGVPZmZzZXQgPSArYnl0ZU9mZnNldCAgLy8gQ29lcmNlIHRvIE51bWJlci5cbiAgaWYgKGlzTmFOKGJ5dGVPZmZzZXQpKSB7XG4gICAgLy8gYnl0ZU9mZnNldDogaXQgaXQncyB1bmRlZmluZWQsIG51bGwsIE5hTiwgXCJmb29cIiwgZXRjLCBzZWFyY2ggd2hvbGUgYnVmZmVyXG4gICAgYnl0ZU9mZnNldCA9IGRpciA/IDAgOiAoYnVmZmVyLmxlbmd0aCAtIDEpXG4gIH1cblxuICAvLyBOb3JtYWxpemUgYnl0ZU9mZnNldDogbmVnYXRpdmUgb2Zmc2V0cyBzdGFydCBmcm9tIHRoZSBlbmQgb2YgdGhlIGJ1ZmZlclxuICBpZiAoYnl0ZU9mZnNldCA8IDApIGJ5dGVPZmZzZXQgPSBidWZmZXIubGVuZ3RoICsgYnl0ZU9mZnNldFxuICBpZiAoYnl0ZU9mZnNldCA+PSBidWZmZXIubGVuZ3RoKSB7XG4gICAgaWYgKGRpcikgcmV0dXJuIC0xXG4gICAgZWxzZSBieXRlT2Zmc2V0ID0gYnVmZmVyLmxlbmd0aCAtIDFcbiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0IDwgMCkge1xuICAgIGlmIChkaXIpIGJ5dGVPZmZzZXQgPSAwXG4gICAgZWxzZSByZXR1cm4gLTFcbiAgfVxuXG4gIC8vIE5vcm1hbGl6ZSB2YWxcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgdmFsID0gQnVmZmVyLmZyb20odmFsLCBlbmNvZGluZylcbiAgfVxuXG4gIC8vIEZpbmFsbHksIHNlYXJjaCBlaXRoZXIgaW5kZXhPZiAoaWYgZGlyIGlzIHRydWUpIG9yIGxhc3RJbmRleE9mXG4gIGlmIChCdWZmZXIuaXNCdWZmZXIodmFsKSkge1xuICAgIC8vIFNwZWNpYWwgY2FzZTogbG9va2luZyBmb3IgZW1wdHkgc3RyaW5nL2J1ZmZlciBhbHdheXMgZmFpbHNcbiAgICBpZiAodmFsLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIC0xXG4gICAgfVxuICAgIHJldHVybiBhcnJheUluZGV4T2YoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpXG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICB2YWwgPSB2YWwgJiAweEZGIC8vIFNlYXJjaCBmb3IgYSBieXRlIHZhbHVlIFswLTI1NV1cbiAgICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgJiZcbiAgICAgICAgdHlwZW9mIFVpbnQ4QXJyYXkucHJvdG90eXBlLmluZGV4T2YgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGlmIChkaXIpIHtcbiAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXkucHJvdG90eXBlLmluZGV4T2YuY2FsbChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBVaW50OEFycmF5LnByb3RvdHlwZS5sYXN0SW5kZXhPZi5jYWxsKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0KVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYXJyYXlJbmRleE9mKGJ1ZmZlciwgWyB2YWwgXSwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcilcbiAgfVxuXG4gIHRocm93IG5ldyBUeXBlRXJyb3IoJ3ZhbCBtdXN0IGJlIHN0cmluZywgbnVtYmVyIG9yIEJ1ZmZlcicpXG59XG5cbmZ1bmN0aW9uIGFycmF5SW5kZXhPZiAoYXJyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpIHtcbiAgdmFyIGluZGV4U2l6ZSA9IDFcbiAgdmFyIGFyckxlbmd0aCA9IGFyci5sZW5ndGhcbiAgdmFyIHZhbExlbmd0aCA9IHZhbC5sZW5ndGhcblxuICBpZiAoZW5jb2RpbmcgIT09IHVuZGVmaW5lZCkge1xuICAgIGVuY29kaW5nID0gU3RyaW5nKGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpXG4gICAgaWYgKGVuY29kaW5nID09PSAndWNzMicgfHwgZW5jb2RpbmcgPT09ICd1Y3MtMicgfHxcbiAgICAgICAgZW5jb2RpbmcgPT09ICd1dGYxNmxlJyB8fCBlbmNvZGluZyA9PT0gJ3V0Zi0xNmxlJykge1xuICAgICAgaWYgKGFyci5sZW5ndGggPCAyIHx8IHZhbC5sZW5ndGggPCAyKSB7XG4gICAgICAgIHJldHVybiAtMVxuICAgICAgfVxuICAgICAgaW5kZXhTaXplID0gMlxuICAgICAgYXJyTGVuZ3RoIC89IDJcbiAgICAgIHZhbExlbmd0aCAvPSAyXG4gICAgICBieXRlT2Zmc2V0IC89IDJcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZWFkIChidWYsIGkpIHtcbiAgICBpZiAoaW5kZXhTaXplID09PSAxKSB7XG4gICAgICByZXR1cm4gYnVmW2ldXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBidWYucmVhZFVJbnQxNkJFKGkgKiBpbmRleFNpemUpXG4gICAgfVxuICB9XG5cbiAgdmFyIGlcbiAgaWYgKGRpcikge1xuICAgIHZhciBmb3VuZEluZGV4ID0gLTFcbiAgICBmb3IgKGkgPSBieXRlT2Zmc2V0OyBpIDwgYXJyTGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChyZWFkKGFyciwgaSkgPT09IHJlYWQodmFsLCBmb3VuZEluZGV4ID09PSAtMSA/IDAgOiBpIC0gZm91bmRJbmRleCkpIHtcbiAgICAgICAgaWYgKGZvdW5kSW5kZXggPT09IC0xKSBmb3VuZEluZGV4ID0gaVxuICAgICAgICBpZiAoaSAtIGZvdW5kSW5kZXggKyAxID09PSB2YWxMZW5ndGgpIHJldHVybiBmb3VuZEluZGV4ICogaW5kZXhTaXplXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoZm91bmRJbmRleCAhPT0gLTEpIGkgLT0gaSAtIGZvdW5kSW5kZXhcbiAgICAgICAgZm91bmRJbmRleCA9IC0xXG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChieXRlT2Zmc2V0ICsgdmFsTGVuZ3RoID4gYXJyTGVuZ3RoKSBieXRlT2Zmc2V0ID0gYXJyTGVuZ3RoIC0gdmFsTGVuZ3RoXG4gICAgZm9yIChpID0gYnl0ZU9mZnNldDsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHZhciBmb3VuZCA9IHRydWVcbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdmFsTGVuZ3RoOyBqKyspIHtcbiAgICAgICAgaWYgKHJlYWQoYXJyLCBpICsgaikgIT09IHJlYWQodmFsLCBqKSkge1xuICAgICAgICAgIGZvdW5kID0gZmFsc2VcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoZm91bmQpIHJldHVybiBpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIC0xXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuaW5jbHVkZXMgPSBmdW5jdGlvbiBpbmNsdWRlcyAodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykge1xuICByZXR1cm4gdGhpcy5pbmRleE9mKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpICE9PSAtMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluZGV4T2YgPSBmdW5jdGlvbiBpbmRleE9mICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7XG4gIHJldHVybiBiaWRpcmVjdGlvbmFsSW5kZXhPZih0aGlzLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCB0cnVlKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmxhc3RJbmRleE9mID0gZnVuY3Rpb24gbGFzdEluZGV4T2YgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGJpZGlyZWN0aW9uYWxJbmRleE9mKHRoaXMsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGZhbHNlKVxufVxuXG5mdW5jdGlvbiBoZXhXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIG9mZnNldCA9IE51bWJlcihvZmZzZXQpIHx8IDBcbiAgdmFyIHJlbWFpbmluZyA9IGJ1Zi5sZW5ndGggLSBvZmZzZXRcbiAgaWYgKCFsZW5ndGgpIHtcbiAgICBsZW5ndGggPSByZW1haW5pbmdcbiAgfSBlbHNlIHtcbiAgICBsZW5ndGggPSBOdW1iZXIobGVuZ3RoKVxuICAgIGlmIChsZW5ndGggPiByZW1haW5pbmcpIHtcbiAgICAgIGxlbmd0aCA9IHJlbWFpbmluZ1xuICAgIH1cbiAgfVxuXG4gIC8vIG11c3QgYmUgYW4gZXZlbiBudW1iZXIgb2YgZGlnaXRzXG4gIHZhciBzdHJMZW4gPSBzdHJpbmcubGVuZ3RoXG4gIGlmIChzdHJMZW4gJSAyICE9PSAwKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIGhleCBzdHJpbmcnKVxuXG4gIGlmIChsZW5ndGggPiBzdHJMZW4gLyAyKSB7XG4gICAgbGVuZ3RoID0gc3RyTGVuIC8gMlxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICB2YXIgcGFyc2VkID0gcGFyc2VJbnQoc3RyaW5nLnN1YnN0cihpICogMiwgMiksIDE2KVxuICAgIGlmIChpc05hTihwYXJzZWQpKSByZXR1cm4gaVxuICAgIGJ1ZltvZmZzZXQgKyBpXSA9IHBhcnNlZFxuICB9XG4gIHJldHVybiBpXG59XG5cbmZ1bmN0aW9uIHV0ZjhXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKHV0ZjhUb0J5dGVzKHN0cmluZywgYnVmLmxlbmd0aCAtIG9mZnNldCksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGFzY2lpV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcihhc2NpaVRvQnl0ZXMoc3RyaW5nKSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gbGF0aW4xV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYXNjaWlXcml0ZShidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGJhc2U2NFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIoYmFzZTY0VG9CeXRlcyhzdHJpbmcpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiB1Y3MyV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcih1dGYxNmxlVG9CeXRlcyhzdHJpbmcsIGJ1Zi5sZW5ndGggLSBvZmZzZXQpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gd3JpdGUgKHN0cmluZywgb2Zmc2V0LCBsZW5ndGgsIGVuY29kaW5nKSB7XG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcpXG4gIGlmIChvZmZzZXQgPT09IHVuZGVmaW5lZCkge1xuICAgIGVuY29kaW5nID0gJ3V0ZjgnXG4gICAgbGVuZ3RoID0gdGhpcy5sZW5ndGhcbiAgICBvZmZzZXQgPSAwXG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcsIGVuY29kaW5nKVxuICB9IGVsc2UgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkICYmIHR5cGVvZiBvZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgZW5jb2RpbmcgPSBvZmZzZXRcbiAgICBsZW5ndGggPSB0aGlzLmxlbmd0aFxuICAgIG9mZnNldCA9IDBcbiAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZywgb2Zmc2V0WywgbGVuZ3RoXVssIGVuY29kaW5nXSlcbiAgfSBlbHNlIGlmIChpc0Zpbml0ZShvZmZzZXQpKSB7XG4gICAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICAgIGlmIChpc0Zpbml0ZShsZW5ndGgpKSB7XG4gICAgICBsZW5ndGggPSBsZW5ndGggfCAwXG4gICAgICBpZiAoZW5jb2RpbmcgPT09IHVuZGVmaW5lZCkgZW5jb2RpbmcgPSAndXRmOCdcbiAgICB9IGVsc2Uge1xuICAgICAgZW5jb2RpbmcgPSBsZW5ndGhcbiAgICAgIGxlbmd0aCA9IHVuZGVmaW5lZFxuICAgIH1cbiAgLy8gbGVnYWN5IHdyaXRlKHN0cmluZywgZW5jb2RpbmcsIG9mZnNldCwgbGVuZ3RoKSAtIHJlbW92ZSBpbiB2MC4xM1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICdCdWZmZXIud3JpdGUoc3RyaW5nLCBlbmNvZGluZywgb2Zmc2V0WywgbGVuZ3RoXSkgaXMgbm8gbG9uZ2VyIHN1cHBvcnRlZCdcbiAgICApXG4gIH1cblxuICB2YXIgcmVtYWluaW5nID0gdGhpcy5sZW5ndGggLSBvZmZzZXRcbiAgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkIHx8IGxlbmd0aCA+IHJlbWFpbmluZykgbGVuZ3RoID0gcmVtYWluaW5nXG5cbiAgaWYgKChzdHJpbmcubGVuZ3RoID4gMCAmJiAobGVuZ3RoIDwgMCB8fCBvZmZzZXQgPCAwKSkgfHwgb2Zmc2V0ID4gdGhpcy5sZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQXR0ZW1wdCB0byB3cml0ZSBvdXRzaWRlIGJ1ZmZlciBib3VuZHMnKVxuICB9XG5cbiAgaWYgKCFlbmNvZGluZykgZW5jb2RpbmcgPSAndXRmOCdcblxuICB2YXIgbG93ZXJlZENhc2UgPSBmYWxzZVxuICBmb3IgKDs7KSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGhleFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgICByZXR1cm4gdXRmOFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgICAgcmV0dXJuIGFzY2lpV3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiBsYXRpbjFXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICAvLyBXYXJuaW5nOiBtYXhMZW5ndGggbm90IHRha2VuIGludG8gYWNjb3VudCBpbiBiYXNlNjRXcml0ZVxuICAgICAgICByZXR1cm4gYmFzZTY0V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuIHVjczJXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAobG93ZXJlZENhc2UpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgICAgICAgZW5jb2RpbmcgPSAoJycgKyBlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICB9XG4gIH1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04gKCkge1xuICByZXR1cm4ge1xuICAgIHR5cGU6ICdCdWZmZXInLFxuICAgIGRhdGE6IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHRoaXMuX2FyciB8fCB0aGlzLCAwKVxuICB9XG59XG5cbmZ1bmN0aW9uIGJhc2U2NFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgaWYgKHN0YXJ0ID09PSAwICYmIGVuZCA9PT0gYnVmLmxlbmd0aCkge1xuICAgIHJldHVybiBiYXNlNjQuZnJvbUJ5dGVBcnJheShidWYpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGJhc2U2NC5mcm9tQnl0ZUFycmF5KGJ1Zi5zbGljZShzdGFydCwgZW5kKSlcbiAgfVxufVxuXG5mdW5jdGlvbiB1dGY4U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG4gIHZhciByZXMgPSBbXVxuXG4gIHZhciBpID0gc3RhcnRcbiAgd2hpbGUgKGkgPCBlbmQpIHtcbiAgICB2YXIgZmlyc3RCeXRlID0gYnVmW2ldXG4gICAgdmFyIGNvZGVQb2ludCA9IG51bGxcbiAgICB2YXIgYnl0ZXNQZXJTZXF1ZW5jZSA9IChmaXJzdEJ5dGUgPiAweEVGKSA/IDRcbiAgICAgIDogKGZpcnN0Qnl0ZSA+IDB4REYpID8gM1xuICAgICAgOiAoZmlyc3RCeXRlID4gMHhCRikgPyAyXG4gICAgICA6IDFcblxuICAgIGlmIChpICsgYnl0ZXNQZXJTZXF1ZW5jZSA8PSBlbmQpIHtcbiAgICAgIHZhciBzZWNvbmRCeXRlLCB0aGlyZEJ5dGUsIGZvdXJ0aEJ5dGUsIHRlbXBDb2RlUG9pbnRcblxuICAgICAgc3dpdGNoIChieXRlc1BlclNlcXVlbmNlKSB7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICBpZiAoZmlyc3RCeXRlIDwgMHg4MCkge1xuICAgICAgICAgICAgY29kZVBvaW50ID0gZmlyc3RCeXRlXG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4MUYpIDw8IDB4NiB8IChzZWNvbmRCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHg3Rikge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIHRoaXJkQnl0ZSA9IGJ1ZltpICsgMl1cbiAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAodGhpcmRCeXRlICYgMHhDMCkgPT09IDB4ODApIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHhGKSA8PCAweEMgfCAoc2Vjb25kQnl0ZSAmIDB4M0YpIDw8IDB4NiB8ICh0aGlyZEJ5dGUgJiAweDNGKVxuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweDdGRiAmJiAodGVtcENvZGVQb2ludCA8IDB4RDgwMCB8fCB0ZW1wQ29kZVBvaW50ID4gMHhERkZGKSkge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgNDpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIHRoaXJkQnl0ZSA9IGJ1ZltpICsgMl1cbiAgICAgICAgICBmb3VydGhCeXRlID0gYnVmW2kgKyAzXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwICYmICh0aGlyZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAoZm91cnRoQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4RikgPDwgMHgxMiB8IChzZWNvbmRCeXRlICYgMHgzRikgPDwgMHhDIHwgKHRoaXJkQnl0ZSAmIDB4M0YpIDw8IDB4NiB8IChmb3VydGhCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHhGRkZGICYmIHRlbXBDb2RlUG9pbnQgPCAweDExMDAwMCkge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChjb2RlUG9pbnQgPT09IG51bGwpIHtcbiAgICAgIC8vIHdlIGRpZCBub3QgZ2VuZXJhdGUgYSB2YWxpZCBjb2RlUG9pbnQgc28gaW5zZXJ0IGFcbiAgICAgIC8vIHJlcGxhY2VtZW50IGNoYXIgKFUrRkZGRCkgYW5kIGFkdmFuY2Ugb25seSAxIGJ5dGVcbiAgICAgIGNvZGVQb2ludCA9IDB4RkZGRFxuICAgICAgYnl0ZXNQZXJTZXF1ZW5jZSA9IDFcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA+IDB4RkZGRikge1xuICAgICAgLy8gZW5jb2RlIHRvIHV0ZjE2IChzdXJyb2dhdGUgcGFpciBkYW5jZSlcbiAgICAgIGNvZGVQb2ludCAtPSAweDEwMDAwXG4gICAgICByZXMucHVzaChjb2RlUG9pbnQgPj4+IDEwICYgMHgzRkYgfCAweEQ4MDApXG4gICAgICBjb2RlUG9pbnQgPSAweERDMDAgfCBjb2RlUG9pbnQgJiAweDNGRlxuICAgIH1cblxuICAgIHJlcy5wdXNoKGNvZGVQb2ludClcbiAgICBpICs9IGJ5dGVzUGVyU2VxdWVuY2VcbiAgfVxuXG4gIHJldHVybiBkZWNvZGVDb2RlUG9pbnRzQXJyYXkocmVzKVxufVxuXG4vLyBCYXNlZCBvbiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yMjc0NzI3Mi82ODA3NDIsIHRoZSBicm93c2VyIHdpdGhcbi8vIHRoZSBsb3dlc3QgbGltaXQgaXMgQ2hyb21lLCB3aXRoIDB4MTAwMDAgYXJncy5cbi8vIFdlIGdvIDEgbWFnbml0dWRlIGxlc3MsIGZvciBzYWZldHlcbnZhciBNQVhfQVJHVU1FTlRTX0xFTkdUSCA9IDB4MTAwMFxuXG5mdW5jdGlvbiBkZWNvZGVDb2RlUG9pbnRzQXJyYXkgKGNvZGVQb2ludHMpIHtcbiAgdmFyIGxlbiA9IGNvZGVQb2ludHMubGVuZ3RoXG4gIGlmIChsZW4gPD0gTUFYX0FSR1VNRU5UU19MRU5HVEgpIHtcbiAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsIGNvZGVQb2ludHMpIC8vIGF2b2lkIGV4dHJhIHNsaWNlKClcbiAgfVxuXG4gIC8vIERlY29kZSBpbiBjaHVua3MgdG8gYXZvaWQgXCJjYWxsIHN0YWNrIHNpemUgZXhjZWVkZWRcIi5cbiAgdmFyIHJlcyA9ICcnXG4gIHZhciBpID0gMFxuICB3aGlsZSAoaSA8IGxlbikge1xuICAgIHJlcyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFxuICAgICAgU3RyaW5nLFxuICAgICAgY29kZVBvaW50cy5zbGljZShpLCBpICs9IE1BWF9BUkdVTUVOVFNfTEVOR1RIKVxuICAgIClcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIGFzY2lpU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgcmV0ID0gJydcbiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKVxuXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgcmV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnVmW2ldICYgMHg3RilcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbmZ1bmN0aW9uIGxhdGluMVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHJldCA9ICcnXG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcblxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgIHJldCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ1ZltpXSlcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbmZ1bmN0aW9uIGhleFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxlbiA9IGJ1Zi5sZW5ndGhcblxuICBpZiAoIXN0YXJ0IHx8IHN0YXJ0IDwgMCkgc3RhcnQgPSAwXG4gIGlmICghZW5kIHx8IGVuZCA8IDAgfHwgZW5kID4gbGVuKSBlbmQgPSBsZW5cblxuICB2YXIgb3V0ID0gJydcbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICBvdXQgKz0gdG9IZXgoYnVmW2ldKVxuICB9XG4gIHJldHVybiBvdXRcbn1cblxuZnVuY3Rpb24gdXRmMTZsZVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGJ5dGVzID0gYnVmLnNsaWNlKHN0YXJ0LCBlbmQpXG4gIHZhciByZXMgPSAnJ1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGJ5dGVzLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgcmVzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnl0ZXNbaV0gKyBieXRlc1tpICsgMV0gKiAyNTYpXG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnNsaWNlID0gZnVuY3Rpb24gc2xpY2UgKHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIHN0YXJ0ID0gfn5zdGFydFxuICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IH5+ZW5kXG5cbiAgaWYgKHN0YXJ0IDwgMCkge1xuICAgIHN0YXJ0ICs9IGxlblxuICAgIGlmIChzdGFydCA8IDApIHN0YXJ0ID0gMFxuICB9IGVsc2UgaWYgKHN0YXJ0ID4gbGVuKSB7XG4gICAgc3RhcnQgPSBsZW5cbiAgfVxuXG4gIGlmIChlbmQgPCAwKSB7XG4gICAgZW5kICs9IGxlblxuICAgIGlmIChlbmQgPCAwKSBlbmQgPSAwXG4gIH0gZWxzZSBpZiAoZW5kID4gbGVuKSB7XG4gICAgZW5kID0gbGVuXG4gIH1cblxuICBpZiAoZW5kIDwgc3RhcnQpIGVuZCA9IHN0YXJ0XG5cbiAgdmFyIG5ld0J1ZlxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICBuZXdCdWYgPSB0aGlzLnN1YmFycmF5KHN0YXJ0LCBlbmQpXG4gICAgbmV3QnVmLl9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgfSBlbHNlIHtcbiAgICB2YXIgc2xpY2VMZW4gPSBlbmQgLSBzdGFydFxuICAgIG5ld0J1ZiA9IG5ldyBCdWZmZXIoc2xpY2VMZW4sIHVuZGVmaW5lZClcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNsaWNlTGVuOyArK2kpIHtcbiAgICAgIG5ld0J1ZltpXSA9IHRoaXNbaSArIHN0YXJ0XVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXdCdWZcbn1cblxuLypcbiAqIE5lZWQgdG8gbWFrZSBzdXJlIHRoYXQgYnVmZmVyIGlzbid0IHRyeWluZyB0byB3cml0ZSBvdXQgb2YgYm91bmRzLlxuICovXG5mdW5jdGlvbiBjaGVja09mZnNldCAob2Zmc2V0LCBleHQsIGxlbmd0aCkge1xuICBpZiAoKG9mZnNldCAlIDEpICE9PSAwIHx8IG9mZnNldCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdvZmZzZXQgaXMgbm90IHVpbnQnKVxuICBpZiAob2Zmc2V0ICsgZXh0ID4gbGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVHJ5aW5nIHRvIGFjY2VzcyBiZXlvbmQgYnVmZmVyIGxlbmd0aCcpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnRMRSA9IGZ1bmN0aW9uIHJlYWRVSW50TEUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcblxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXRdXG4gIHZhciBtdWwgPSAxXG4gIHZhciBpID0gMFxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIGldICogbXVsXG4gIH1cblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnRCRSA9IGZ1bmN0aW9uIHJlYWRVSW50QkUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG4gIH1cblxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAtLWJ5dGVMZW5ndGhdXG4gIHZhciBtdWwgPSAxXG4gIHdoaWxlIChieXRlTGVuZ3RoID4gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIC0tYnl0ZUxlbmd0aF0gKiBtdWxcbiAgfVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDggPSBmdW5jdGlvbiByZWFkVUludDggKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAxLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIHRoaXNbb2Zmc2V0XVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MTZMRSA9IGZ1bmN0aW9uIHJlYWRVSW50MTZMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gdGhpc1tvZmZzZXRdIHwgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDE2QkUgPSBmdW5jdGlvbiByZWFkVUludDE2QkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuICh0aGlzW29mZnNldF0gPDwgOCkgfCB0aGlzW29mZnNldCArIDFdXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQzMkxFID0gZnVuY3Rpb24gcmVhZFVJbnQzMkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICgodGhpc1tvZmZzZXRdKSB8XG4gICAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KSB8XG4gICAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCAxNikpICtcbiAgICAgICh0aGlzW29mZnNldCArIDNdICogMHgxMDAwMDAwKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MzJCRSA9IGZ1bmN0aW9uIHJlYWRVSW50MzJCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdICogMHgxMDAwMDAwKSArXG4gICAgKCh0aGlzW29mZnNldCArIDFdIDw8IDE2KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgOCkgfFxuICAgIHRoaXNbb2Zmc2V0ICsgM10pXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludExFID0gZnVuY3Rpb24gcmVhZEludExFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XVxuICB2YXIgbXVsID0gMVxuICB2YXIgaSA9IDBcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyBpXSAqIG11bFxuICB9XG4gIG11bCAqPSAweDgwXG5cbiAgaWYgKHZhbCA+PSBtdWwpIHZhbCAtPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aClcblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludEJFID0gZnVuY3Rpb24gcmVhZEludEJFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgdmFyIGkgPSBieXRlTGVuZ3RoXG4gIHZhciBtdWwgPSAxXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldCArIC0taV1cbiAgd2hpbGUgKGkgPiAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgLS1pXSAqIG11bFxuICB9XG4gIG11bCAqPSAweDgwXG5cbiAgaWYgKHZhbCA+PSBtdWwpIHZhbCAtPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aClcblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDggPSBmdW5jdGlvbiByZWFkSW50OCAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDEsIHRoaXMubGVuZ3RoKVxuICBpZiAoISh0aGlzW29mZnNldF0gJiAweDgwKSkgcmV0dXJuICh0aGlzW29mZnNldF0pXG4gIHJldHVybiAoKDB4ZmYgLSB0aGlzW29mZnNldF0gKyAxKSAqIC0xKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQxNkxFID0gZnVuY3Rpb24gcmVhZEludDE2TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XSB8ICh0aGlzW29mZnNldCArIDFdIDw8IDgpXG4gIHJldHVybiAodmFsICYgMHg4MDAwKSA/IHZhbCB8IDB4RkZGRjAwMDAgOiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MTZCRSA9IGZ1bmN0aW9uIHJlYWRJbnQxNkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldCArIDFdIHwgKHRoaXNbb2Zmc2V0XSA8PCA4KVxuICByZXR1cm4gKHZhbCAmIDB4ODAwMCkgPyB2YWwgfCAweEZGRkYwMDAwIDogdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDMyTEUgPSBmdW5jdGlvbiByZWFkSW50MzJMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdKSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOCkgfFxuICAgICh0aGlzW29mZnNldCArIDJdIDw8IDE2KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgM10gPDwgMjQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDMyQkUgPSBmdW5jdGlvbiByZWFkSW50MzJCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdIDw8IDI0KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgMTYpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCA4KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgM10pXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEZsb2F0TEUgPSBmdW5jdGlvbiByZWFkRmxvYXRMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgdHJ1ZSwgMjMsIDQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEZsb2F0QkUgPSBmdW5jdGlvbiByZWFkRmxvYXRCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgZmFsc2UsIDIzLCA0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWREb3VibGVMRSA9IGZ1bmN0aW9uIHJlYWREb3VibGVMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDgsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgdHJ1ZSwgNTIsIDgpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZERvdWJsZUJFID0gZnVuY3Rpb24gcmVhZERvdWJsZUJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgOCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCBmYWxzZSwgNTIsIDgpXG59XG5cbmZ1bmN0aW9uIGNoZWNrSW50IChidWYsIHZhbHVlLCBvZmZzZXQsIGV4dCwgbWF4LCBtaW4pIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYnVmKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJidWZmZXJcIiBhcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyIGluc3RhbmNlJylcbiAgaWYgKHZhbHVlID4gbWF4IHx8IHZhbHVlIDwgbWluKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXCJ2YWx1ZVwiIGFyZ3VtZW50IGlzIG91dCBvZiBib3VuZHMnKVxuICBpZiAob2Zmc2V0ICsgZXh0ID4gYnVmLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50TEUgPSBmdW5jdGlvbiB3cml0ZVVJbnRMRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBtYXhCeXRlcyA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKSAtIDFcbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBtYXhCeXRlcywgMClcbiAgfVxuXG4gIHZhciBtdWwgPSAxXG4gIHZhciBpID0gMFxuICB0aGlzW29mZnNldF0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB0aGlzW29mZnNldCArIGldID0gKHZhbHVlIC8gbXVsKSAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50QkUgPSBmdW5jdGlvbiB3cml0ZVVJbnRCRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBtYXhCeXRlcyA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKSAtIDFcbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBtYXhCeXRlcywgMClcbiAgfVxuXG4gIHZhciBpID0gYnl0ZUxlbmd0aCAtIDFcbiAgdmFyIG11bCA9IDFcbiAgdGhpc1tvZmZzZXQgKyBpXSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoLS1pID49IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB0aGlzW29mZnNldCArIGldID0gKHZhbHVlIC8gbXVsKSAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50OCA9IGZ1bmN0aW9uIHdyaXRlVUludDggKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMSwgMHhmZiwgMClcbiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkgdmFsdWUgPSBNYXRoLmZsb29yKHZhbHVlKVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgMVxufVxuXG5mdW5jdGlvbiBvYmplY3RXcml0ZVVJbnQxNiAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4pIHtcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmYgKyB2YWx1ZSArIDFcbiAgZm9yICh2YXIgaSA9IDAsIGogPSBNYXRoLm1pbihidWYubGVuZ3RoIC0gb2Zmc2V0LCAyKTsgaSA8IGo7ICsraSkge1xuICAgIGJ1ZltvZmZzZXQgKyBpXSA9ICh2YWx1ZSAmICgweGZmIDw8ICg4ICogKGxpdHRsZUVuZGlhbiA/IGkgOiAxIC0gaSkpKSkgPj4+XG4gICAgICAobGl0dGxlRW5kaWFuID8gaSA6IDEgLSBpKSAqIDhcbiAgfVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDE2TEUgPSBmdW5jdGlvbiB3cml0ZVVJbnQxNkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4ZmZmZiwgMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQxNkJFID0gZnVuY3Rpb24gd3JpdGVVSW50MTZCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweGZmZmYsIDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5mdW5jdGlvbiBvYmplY3RXcml0ZVVJbnQzMiAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4pIHtcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmZmZmZmICsgdmFsdWUgKyAxXG4gIGZvciAodmFyIGkgPSAwLCBqID0gTWF0aC5taW4oYnVmLmxlbmd0aCAtIG9mZnNldCwgNCk7IGkgPCBqOyArK2kpIHtcbiAgICBidWZbb2Zmc2V0ICsgaV0gPSAodmFsdWUgPj4+IChsaXR0bGVFbmRpYW4gPyBpIDogMyAtIGkpICogOCkgJiAweGZmXG4gIH1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQzMkxFID0gZnVuY3Rpb24gd3JpdGVVSW50MzJMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweGZmZmZmZmZmLCAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlID4+PiAyNClcbiAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiAxNilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDMyQkUgPSBmdW5jdGlvbiB3cml0ZVVJbnQzMkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4ZmZmZmZmZmYsIDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gMjQpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50TEUgPSBmdW5jdGlvbiB3cml0ZUludExFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbGltaXQgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCAtIDEpXG5cbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBsaW1pdCAtIDEsIC1saW1pdClcbiAgfVxuXG4gIHZhciBpID0gMFxuICB2YXIgbXVsID0gMVxuICB2YXIgc3ViID0gMFxuICB0aGlzW29mZnNldF0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICBpZiAodmFsdWUgPCAwICYmIHN1YiA9PT0gMCAmJiB0aGlzW29mZnNldCArIGkgLSAxXSAhPT0gMCkge1xuICAgICAgc3ViID0gMVxuICAgIH1cbiAgICB0aGlzW29mZnNldCArIGldID0gKCh2YWx1ZSAvIG11bCkgPj4gMCkgLSBzdWIgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50QkUgPSBmdW5jdGlvbiB3cml0ZUludEJFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbGltaXQgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCAtIDEpXG5cbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBsaW1pdCAtIDEsIC1saW1pdClcbiAgfVxuXG4gIHZhciBpID0gYnl0ZUxlbmd0aCAtIDFcbiAgdmFyIG11bCA9IDFcbiAgdmFyIHN1YiA9IDBcbiAgdGhpc1tvZmZzZXQgKyBpXSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoLS1pID49IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICBpZiAodmFsdWUgPCAwICYmIHN1YiA9PT0gMCAmJiB0aGlzW29mZnNldCArIGkgKyAxXSAhPT0gMCkge1xuICAgICAgc3ViID0gMVxuICAgIH1cbiAgICB0aGlzW29mZnNldCArIGldID0gKCh2YWx1ZSAvIG11bCkgPj4gMCkgLSBzdWIgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50OCA9IGZ1bmN0aW9uIHdyaXRlSW50OCAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAxLCAweDdmLCAtMHg4MClcbiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkgdmFsdWUgPSBNYXRoLmZsb29yKHZhbHVlKVxuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmYgKyB2YWx1ZSArIDFcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDE2TEUgPSBmdW5jdGlvbiB3cml0ZUludDE2TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHg3ZmZmLCAtMHg4MDAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MTZCRSA9IGZ1bmN0aW9uIHdyaXRlSW50MTZCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweDdmZmYsIC0weDgwMDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MzJMRSA9IGZ1bmN0aW9uIHdyaXRlSW50MzJMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweDdmZmZmZmZmLCAtMHg4MDAwMDAwMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDE2KVxuICAgIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgPj4+IDI0KVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDMyQkUgPSBmdW5jdGlvbiB3cml0ZUludDMyQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHg3ZmZmZmZmZiwgLTB4ODAwMDAwMDApXG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZmZmZmZmZiArIHZhbHVlICsgMVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDI0KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDE2KVxuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuZnVuY3Rpb24gY2hlY2tJRUVFNzU0IChidWYsIHZhbHVlLCBvZmZzZXQsIGV4dCwgbWF4LCBtaW4pIHtcbiAgaWYgKG9mZnNldCArIGV4dCA+IGJ1Zi5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxuICBpZiAob2Zmc2V0IDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG59XG5cbmZ1bmN0aW9uIHdyaXRlRmxvYXQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tJRUVFNzU0KGJ1ZiwgdmFsdWUsIG9mZnNldCwgNCwgMy40MDI4MjM0NjYzODUyODg2ZSszOCwgLTMuNDAyODIzNDY2Mzg1Mjg4NmUrMzgpXG4gIH1cbiAgaWVlZTc1NC53cml0ZShidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgMjMsIDQpXG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVGbG9hdExFID0gZnVuY3Rpb24gd3JpdGVGbG9hdExFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVGbG9hdCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUZsb2F0QkUgPSBmdW5jdGlvbiB3cml0ZUZsb2F0QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZUZsb2F0KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydClcbn1cblxuZnVuY3Rpb24gd3JpdGVEb3VibGUgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tJRUVFNzU0KGJ1ZiwgdmFsdWUsIG9mZnNldCwgOCwgMS43OTc2OTMxMzQ4NjIzMTU3RSszMDgsIC0xLjc5NzY5MzEzNDg2MjMxNTdFKzMwOClcbiAgfVxuICBpZWVlNzU0LndyaXRlKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCA1MiwgOClcbiAgcmV0dXJuIG9mZnNldCArIDhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZURvdWJsZUxFID0gZnVuY3Rpb24gd3JpdGVEb3VibGVMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRG91YmxlKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRG91YmxlQkUgPSBmdW5jdGlvbiB3cml0ZURvdWJsZUJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVEb3VibGUodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KVxufVxuXG4vLyBjb3B5KHRhcmdldEJ1ZmZlciwgdGFyZ2V0U3RhcnQ9MCwgc291cmNlU3RhcnQ9MCwgc291cmNlRW5kPWJ1ZmZlci5sZW5ndGgpXG5CdWZmZXIucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiBjb3B5ICh0YXJnZXQsIHRhcmdldFN0YXJ0LCBzdGFydCwgZW5kKSB7XG4gIGlmICghc3RhcnQpIHN0YXJ0ID0gMFxuICBpZiAoIWVuZCAmJiBlbmQgIT09IDApIGVuZCA9IHRoaXMubGVuZ3RoXG4gIGlmICh0YXJnZXRTdGFydCA+PSB0YXJnZXQubGVuZ3RoKSB0YXJnZXRTdGFydCA9IHRhcmdldC5sZW5ndGhcbiAgaWYgKCF0YXJnZXRTdGFydCkgdGFyZ2V0U3RhcnQgPSAwXG4gIGlmIChlbmQgPiAwICYmIGVuZCA8IHN0YXJ0KSBlbmQgPSBzdGFydFxuXG4gIC8vIENvcHkgMCBieXRlczsgd2UncmUgZG9uZVxuICBpZiAoZW5kID09PSBzdGFydCkgcmV0dXJuIDBcbiAgaWYgKHRhcmdldC5sZW5ndGggPT09IDAgfHwgdGhpcy5sZW5ndGggPT09IDApIHJldHVybiAwXG5cbiAgLy8gRmF0YWwgZXJyb3IgY29uZGl0aW9uc1xuICBpZiAodGFyZ2V0U3RhcnQgPCAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3RhcmdldFN0YXJ0IG91dCBvZiBib3VuZHMnKVxuICB9XG4gIGlmIChzdGFydCA8IDAgfHwgc3RhcnQgPj0gdGhpcy5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdzb3VyY2VTdGFydCBvdXQgb2YgYm91bmRzJylcbiAgaWYgKGVuZCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdzb3VyY2VFbmQgb3V0IG9mIGJvdW5kcycpXG5cbiAgLy8gQXJlIHdlIG9vYj9cbiAgaWYgKGVuZCA+IHRoaXMubGVuZ3RoKSBlbmQgPSB0aGlzLmxlbmd0aFxuICBpZiAodGFyZ2V0Lmxlbmd0aCAtIHRhcmdldFN0YXJ0IDwgZW5kIC0gc3RhcnQpIHtcbiAgICBlbmQgPSB0YXJnZXQubGVuZ3RoIC0gdGFyZ2V0U3RhcnQgKyBzdGFydFxuICB9XG5cbiAgdmFyIGxlbiA9IGVuZCAtIHN0YXJ0XG4gIHZhciBpXG5cbiAgaWYgKHRoaXMgPT09IHRhcmdldCAmJiBzdGFydCA8IHRhcmdldFN0YXJ0ICYmIHRhcmdldFN0YXJ0IDwgZW5kKSB7XG4gICAgLy8gZGVzY2VuZGluZyBjb3B5IGZyb20gZW5kXG4gICAgZm9yIChpID0gbGVuIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgIHRhcmdldFtpICsgdGFyZ2V0U3RhcnRdID0gdGhpc1tpICsgc3RhcnRdXG4gICAgfVxuICB9IGVsc2UgaWYgKGxlbiA8IDEwMDAgfHwgIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgLy8gYXNjZW5kaW5nIGNvcHkgZnJvbSBzdGFydFxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgICAgdGFyZ2V0W2kgKyB0YXJnZXRTdGFydF0gPSB0aGlzW2kgKyBzdGFydF1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgVWludDhBcnJheS5wcm90b3R5cGUuc2V0LmNhbGwoXG4gICAgICB0YXJnZXQsXG4gICAgICB0aGlzLnN1YmFycmF5KHN0YXJ0LCBzdGFydCArIGxlbiksXG4gICAgICB0YXJnZXRTdGFydFxuICAgIClcbiAgfVxuXG4gIHJldHVybiBsZW5cbn1cblxuLy8gVXNhZ2U6XG4vLyAgICBidWZmZXIuZmlsbChudW1iZXJbLCBvZmZzZXRbLCBlbmRdXSlcbi8vICAgIGJ1ZmZlci5maWxsKGJ1ZmZlclssIG9mZnNldFssIGVuZF1dKVxuLy8gICAgYnVmZmVyLmZpbGwoc3RyaW5nWywgb2Zmc2V0WywgZW5kXV1bLCBlbmNvZGluZ10pXG5CdWZmZXIucHJvdG90eXBlLmZpbGwgPSBmdW5jdGlvbiBmaWxsICh2YWwsIHN0YXJ0LCBlbmQsIGVuY29kaW5nKSB7XG4gIC8vIEhhbmRsZSBzdHJpbmcgY2FzZXM6XG4gIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgIGlmICh0eXBlb2Ygc3RhcnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICBlbmNvZGluZyA9IHN0YXJ0XG4gICAgICBzdGFydCA9IDBcbiAgICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZW5kID09PSAnc3RyaW5nJykge1xuICAgICAgZW5jb2RpbmcgPSBlbmRcbiAgICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gICAgfVxuICAgIGlmICh2YWwubGVuZ3RoID09PSAxKSB7XG4gICAgICB2YXIgY29kZSA9IHZhbC5jaGFyQ29kZUF0KDApXG4gICAgICBpZiAoY29kZSA8IDI1Nikge1xuICAgICAgICB2YWwgPSBjb2RlXG4gICAgICB9XG4gICAgfVxuICAgIGlmIChlbmNvZGluZyAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBlbmNvZGluZyAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2VuY29kaW5nIG11c3QgYmUgYSBzdHJpbmcnKVxuICAgIH1cbiAgICBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJyAmJiAhQnVmZmVyLmlzRW5jb2RpbmcoZW5jb2RpbmcpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgdmFsID0gdmFsICYgMjU1XG4gIH1cblxuICAvLyBJbnZhbGlkIHJhbmdlcyBhcmUgbm90IHNldCB0byBhIGRlZmF1bHQsIHNvIGNhbiByYW5nZSBjaGVjayBlYXJseS5cbiAgaWYgKHN0YXJ0IDwgMCB8fCB0aGlzLmxlbmd0aCA8IHN0YXJ0IHx8IHRoaXMubGVuZ3RoIDwgZW5kKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ091dCBvZiByYW5nZSBpbmRleCcpXG4gIH1cblxuICBpZiAoZW5kIDw9IHN0YXJ0KSB7XG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIHN0YXJ0ID0gc3RhcnQgPj4+IDBcbiAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyB0aGlzLmxlbmd0aCA6IGVuZCA+Pj4gMFxuXG4gIGlmICghdmFsKSB2YWwgPSAwXG5cbiAgdmFyIGlcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgZm9yIChpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgICAgdGhpc1tpXSA9IHZhbFxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgYnl0ZXMgPSBCdWZmZXIuaXNCdWZmZXIodmFsKVxuICAgICAgPyB2YWxcbiAgICAgIDogdXRmOFRvQnl0ZXMobmV3IEJ1ZmZlcih2YWwsIGVuY29kaW5nKS50b1N0cmluZygpKVxuICAgIHZhciBsZW4gPSBieXRlcy5sZW5ndGhcbiAgICBmb3IgKGkgPSAwOyBpIDwgZW5kIC0gc3RhcnQ7ICsraSkge1xuICAgICAgdGhpc1tpICsgc3RhcnRdID0gYnl0ZXNbaSAlIGxlbl1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpc1xufVxuXG4vLyBIRUxQRVIgRlVOQ1RJT05TXG4vLyA9PT09PT09PT09PT09PT09XG5cbnZhciBJTlZBTElEX0JBU0U2NF9SRSA9IC9bXitcXC8wLTlBLVphLXotX10vZ1xuXG5mdW5jdGlvbiBiYXNlNjRjbGVhbiAoc3RyKSB7XG4gIC8vIE5vZGUgc3RyaXBzIG91dCBpbnZhbGlkIGNoYXJhY3RlcnMgbGlrZSBcXG4gYW5kIFxcdCBmcm9tIHRoZSBzdHJpbmcsIGJhc2U2NC1qcyBkb2VzIG5vdFxuICBzdHIgPSBzdHJpbmd0cmltKHN0cikucmVwbGFjZShJTlZBTElEX0JBU0U2NF9SRSwgJycpXG4gIC8vIE5vZGUgY29udmVydHMgc3RyaW5ncyB3aXRoIGxlbmd0aCA8IDIgdG8gJydcbiAgaWYgKHN0ci5sZW5ndGggPCAyKSByZXR1cm4gJydcbiAgLy8gTm9kZSBhbGxvd3MgZm9yIG5vbi1wYWRkZWQgYmFzZTY0IHN0cmluZ3MgKG1pc3NpbmcgdHJhaWxpbmcgPT09KSwgYmFzZTY0LWpzIGRvZXMgbm90XG4gIHdoaWxlIChzdHIubGVuZ3RoICUgNCAhPT0gMCkge1xuICAgIHN0ciA9IHN0ciArICc9J1xuICB9XG4gIHJldHVybiBzdHJcbn1cblxuZnVuY3Rpb24gc3RyaW5ndHJpbSAoc3RyKSB7XG4gIGlmIChzdHIudHJpbSkgcmV0dXJuIHN0ci50cmltKClcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9eXFxzK3xcXHMrJC9nLCAnJylcbn1cblxuZnVuY3Rpb24gdG9IZXggKG4pIHtcbiAgaWYgKG4gPCAxNikgcmV0dXJuICcwJyArIG4udG9TdHJpbmcoMTYpXG4gIHJldHVybiBuLnRvU3RyaW5nKDE2KVxufVxuXG5mdW5jdGlvbiB1dGY4VG9CeXRlcyAoc3RyaW5nLCB1bml0cykge1xuICB1bml0cyA9IHVuaXRzIHx8IEluZmluaXR5XG4gIHZhciBjb2RlUG9pbnRcbiAgdmFyIGxlbmd0aCA9IHN0cmluZy5sZW5ndGhcbiAgdmFyIGxlYWRTdXJyb2dhdGUgPSBudWxsXG4gIHZhciBieXRlcyA9IFtdXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIGNvZGVQb2ludCA9IHN0cmluZy5jaGFyQ29kZUF0KGkpXG5cbiAgICAvLyBpcyBzdXJyb2dhdGUgY29tcG9uZW50XG4gICAgaWYgKGNvZGVQb2ludCA+IDB4RDdGRiAmJiBjb2RlUG9pbnQgPCAweEUwMDApIHtcbiAgICAgIC8vIGxhc3QgY2hhciB3YXMgYSBsZWFkXG4gICAgICBpZiAoIWxlYWRTdXJyb2dhdGUpIHtcbiAgICAgICAgLy8gbm8gbGVhZCB5ZXRcbiAgICAgICAgaWYgKGNvZGVQb2ludCA+IDB4REJGRikge1xuICAgICAgICAgIC8vIHVuZXhwZWN0ZWQgdHJhaWxcbiAgICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9IGVsc2UgaWYgKGkgKyAxID09PSBsZW5ndGgpIHtcbiAgICAgICAgICAvLyB1bnBhaXJlZCBsZWFkXG4gICAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHZhbGlkIGxlYWRcbiAgICAgICAgbGVhZFN1cnJvZ2F0ZSA9IGNvZGVQb2ludFxuXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIC8vIDIgbGVhZHMgaW4gYSByb3dcbiAgICAgIGlmIChjb2RlUG9pbnQgPCAweERDMDApIHtcbiAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgIGxlYWRTdXJyb2dhdGUgPSBjb2RlUG9pbnRcbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgLy8gdmFsaWQgc3Vycm9nYXRlIHBhaXJcbiAgICAgIGNvZGVQb2ludCA9IChsZWFkU3Vycm9nYXRlIC0gMHhEODAwIDw8IDEwIHwgY29kZVBvaW50IC0gMHhEQzAwKSArIDB4MTAwMDBcbiAgICB9IGVsc2UgaWYgKGxlYWRTdXJyb2dhdGUpIHtcbiAgICAgIC8vIHZhbGlkIGJtcCBjaGFyLCBidXQgbGFzdCBjaGFyIHdhcyBhIGxlYWRcbiAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgIH1cblxuICAgIGxlYWRTdXJyb2dhdGUgPSBudWxsXG5cbiAgICAvLyBlbmNvZGUgdXRmOFxuICAgIGlmIChjb2RlUG9pbnQgPCAweDgwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDEpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goY29kZVBvaW50KVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHg4MDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gMikgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiB8IDB4QzAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDEwMDAwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDMpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgIGNvZGVQb2ludCA+PiAweEMgfCAweEUwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHg2ICYgMHgzRiB8IDB4ODAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDExMDAwMCkge1xuICAgICAgaWYgKCh1bml0cyAtPSA0KSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHgxMiB8IDB4RjAsXG4gICAgICAgIGNvZGVQb2ludCA+PiAweEMgJiAweDNGIHwgMHg4MCxcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiAmIDB4M0YgfCAweDgwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgY29kZSBwb2ludCcpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGJ5dGVzXG59XG5cbmZ1bmN0aW9uIGFzY2lpVG9CeXRlcyAoc3RyKSB7XG4gIHZhciBieXRlQXJyYXkgPSBbXVxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSkge1xuICAgIC8vIE5vZGUncyBjb2RlIHNlZW1zIHRvIGJlIGRvaW5nIHRoaXMgYW5kIG5vdCAmIDB4N0YuLlxuICAgIGJ5dGVBcnJheS5wdXNoKHN0ci5jaGFyQ29kZUF0KGkpICYgMHhGRilcbiAgfVxuICByZXR1cm4gYnl0ZUFycmF5XG59XG5cbmZ1bmN0aW9uIHV0ZjE2bGVUb0J5dGVzIChzdHIsIHVuaXRzKSB7XG4gIHZhciBjLCBoaSwgbG9cbiAgdmFyIGJ5dGVBcnJheSA9IFtdXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgKytpKSB7XG4gICAgaWYgKCh1bml0cyAtPSAyKSA8IDApIGJyZWFrXG5cbiAgICBjID0gc3RyLmNoYXJDb2RlQXQoaSlcbiAgICBoaSA9IGMgPj4gOFxuICAgIGxvID0gYyAlIDI1NlxuICAgIGJ5dGVBcnJheS5wdXNoKGxvKVxuICAgIGJ5dGVBcnJheS5wdXNoKGhpKVxuICB9XG5cbiAgcmV0dXJuIGJ5dGVBcnJheVxufVxuXG5mdW5jdGlvbiBiYXNlNjRUb0J5dGVzIChzdHIpIHtcbiAgcmV0dXJuIGJhc2U2NC50b0J5dGVBcnJheShiYXNlNjRjbGVhbihzdHIpKVxufVxuXG5mdW5jdGlvbiBibGl0QnVmZmVyIChzcmMsIGRzdCwgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIGlmICgoaSArIG9mZnNldCA+PSBkc3QubGVuZ3RoKSB8fCAoaSA+PSBzcmMubGVuZ3RoKSkgYnJlYWtcbiAgICBkc3RbaSArIG9mZnNldF0gPSBzcmNbaV1cbiAgfVxuICByZXR1cm4gaVxufVxuXG5mdW5jdGlvbiBpc25hbiAodmFsKSB7XG4gIHJldHVybiB2YWwgIT09IHZhbCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNlbGYtY29tcGFyZVxufVxuIiwiKGZ1bmN0aW9uIChtb2R1bGUsIGV4cG9ydHMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8vIFV0aWxzXG4gIGZ1bmN0aW9uIGFzc2VydCAodmFsLCBtc2cpIHtcbiAgICBpZiAoIXZhbCkgdGhyb3cgbmV3IEVycm9yKG1zZyB8fCAnQXNzZXJ0aW9uIGZhaWxlZCcpO1xuICB9XG5cbiAgLy8gQ291bGQgdXNlIGBpbmhlcml0c2AgbW9kdWxlLCBidXQgZG9uJ3Qgd2FudCB0byBtb3ZlIGZyb20gc2luZ2xlIGZpbGVcbiAgLy8gYXJjaGl0ZWN0dXJlIHlldC5cbiAgZnVuY3Rpb24gaW5oZXJpdHMgKGN0b3IsIHN1cGVyQ3Rvcikge1xuICAgIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yO1xuICAgIHZhciBUZW1wQ3RvciA9IGZ1bmN0aW9uICgpIHt9O1xuICAgIFRlbXBDdG9yLnByb3RvdHlwZSA9IHN1cGVyQ3Rvci5wcm90b3R5cGU7XG4gICAgY3Rvci5wcm90b3R5cGUgPSBuZXcgVGVtcEN0b3IoKTtcbiAgICBjdG9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGN0b3I7XG4gIH1cblxuICAvLyBCTlxuXG4gIGZ1bmN0aW9uIEJOIChudW1iZXIsIGJhc2UsIGVuZGlhbikge1xuICAgIGlmIChCTi5pc0JOKG51bWJlcikpIHtcbiAgICAgIHJldHVybiBudW1iZXI7XG4gICAgfVxuXG4gICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgdGhpcy53b3JkcyA9IG51bGw7XG4gICAgdGhpcy5sZW5ndGggPSAwO1xuXG4gICAgLy8gUmVkdWN0aW9uIGNvbnRleHRcbiAgICB0aGlzLnJlZCA9IG51bGw7XG5cbiAgICBpZiAobnVtYmVyICE9PSBudWxsKSB7XG4gICAgICBpZiAoYmFzZSA9PT0gJ2xlJyB8fCBiYXNlID09PSAnYmUnKSB7XG4gICAgICAgIGVuZGlhbiA9IGJhc2U7XG4gICAgICAgIGJhc2UgPSAxMDtcbiAgICAgIH1cblxuICAgICAgdGhpcy5faW5pdChudW1iZXIgfHwgMCwgYmFzZSB8fCAxMCwgZW5kaWFuIHx8ICdiZScpO1xuICAgIH1cbiAgfVxuICBpZiAodHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IEJOO1xuICB9IGVsc2Uge1xuICAgIGV4cG9ydHMuQk4gPSBCTjtcbiAgfVxuXG4gIEJOLkJOID0gQk47XG4gIEJOLndvcmRTaXplID0gMjY7XG5cbiAgdmFyIEJ1ZmZlcjtcbiAgdHJ5IHtcbiAgICBCdWZmZXIgPSByZXF1aXJlKCdidWZmZXInKS5CdWZmZXI7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgfVxuXG4gIEJOLmlzQk4gPSBmdW5jdGlvbiBpc0JOIChudW0pIHtcbiAgICBpZiAobnVtIGluc3RhbmNlb2YgQk4pIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBudW0gIT09IG51bGwgJiYgdHlwZW9mIG51bSA9PT0gJ29iamVjdCcgJiZcbiAgICAgIG51bS5jb25zdHJ1Y3Rvci53b3JkU2l6ZSA9PT0gQk4ud29yZFNpemUgJiYgQXJyYXkuaXNBcnJheShudW0ud29yZHMpO1xuICB9O1xuXG4gIEJOLm1heCA9IGZ1bmN0aW9uIG1heCAobGVmdCwgcmlnaHQpIHtcbiAgICBpZiAobGVmdC5jbXAocmlnaHQpID4gMCkgcmV0dXJuIGxlZnQ7XG4gICAgcmV0dXJuIHJpZ2h0O1xuICB9O1xuXG4gIEJOLm1pbiA9IGZ1bmN0aW9uIG1pbiAobGVmdCwgcmlnaHQpIHtcbiAgICBpZiAobGVmdC5jbXAocmlnaHQpIDwgMCkgcmV0dXJuIGxlZnQ7XG4gICAgcmV0dXJuIHJpZ2h0O1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5faW5pdCA9IGZ1bmN0aW9uIGluaXQgKG51bWJlciwgYmFzZSwgZW5kaWFuKSB7XG4gICAgaWYgKHR5cGVvZiBudW1iZXIgPT09ICdudW1iZXInKSB7XG4gICAgICByZXR1cm4gdGhpcy5faW5pdE51bWJlcihudW1iZXIsIGJhc2UsIGVuZGlhbik7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBudW1iZXIgPT09ICdvYmplY3QnKSB7XG4gICAgICByZXR1cm4gdGhpcy5faW5pdEFycmF5KG51bWJlciwgYmFzZSwgZW5kaWFuKTtcbiAgICB9XG5cbiAgICBpZiAoYmFzZSA9PT0gJ2hleCcpIHtcbiAgICAgIGJhc2UgPSAxNjtcbiAgICB9XG4gICAgYXNzZXJ0KGJhc2UgPT09IChiYXNlIHwgMCkgJiYgYmFzZSA+PSAyICYmIGJhc2UgPD0gMzYpO1xuXG4gICAgbnVtYmVyID0gbnVtYmVyLnRvU3RyaW5nKCkucmVwbGFjZSgvXFxzKy9nLCAnJyk7XG4gICAgdmFyIHN0YXJ0ID0gMDtcbiAgICBpZiAobnVtYmVyWzBdID09PSAnLScpIHtcbiAgICAgIHN0YXJ0Kys7XG4gICAgfVxuXG4gICAgaWYgKGJhc2UgPT09IDE2KSB7XG4gICAgICB0aGlzLl9wYXJzZUhleChudW1iZXIsIHN0YXJ0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fcGFyc2VCYXNlKG51bWJlciwgYmFzZSwgc3RhcnQpO1xuICAgIH1cblxuICAgIGlmIChudW1iZXJbMF0gPT09ICctJykge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDE7XG4gICAgfVxuXG4gICAgdGhpcy5zdHJpcCgpO1xuXG4gICAgaWYgKGVuZGlhbiAhPT0gJ2xlJykgcmV0dXJuO1xuXG4gICAgdGhpcy5faW5pdEFycmF5KHRoaXMudG9BcnJheSgpLCBiYXNlLCBlbmRpYW4pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5faW5pdE51bWJlciA9IGZ1bmN0aW9uIF9pbml0TnVtYmVyIChudW1iZXIsIGJhc2UsIGVuZGlhbikge1xuICAgIGlmIChudW1iZXIgPCAwKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMTtcbiAgICAgIG51bWJlciA9IC1udW1iZXI7XG4gICAgfVxuICAgIGlmIChudW1iZXIgPCAweDQwMDAwMDApIHtcbiAgICAgIHRoaXMud29yZHMgPSBbIG51bWJlciAmIDB4M2ZmZmZmZiBdO1xuICAgICAgdGhpcy5sZW5ndGggPSAxO1xuICAgIH0gZWxzZSBpZiAobnVtYmVyIDwgMHgxMDAwMDAwMDAwMDAwMCkge1xuICAgICAgdGhpcy53b3JkcyA9IFtcbiAgICAgICAgbnVtYmVyICYgMHgzZmZmZmZmLFxuICAgICAgICAobnVtYmVyIC8gMHg0MDAwMDAwKSAmIDB4M2ZmZmZmZlxuICAgICAgXTtcbiAgICAgIHRoaXMubGVuZ3RoID0gMjtcbiAgICB9IGVsc2Uge1xuICAgICAgYXNzZXJ0KG51bWJlciA8IDB4MjAwMDAwMDAwMDAwMDApOyAvLyAyIF4gNTMgKHVuc2FmZSlcbiAgICAgIHRoaXMud29yZHMgPSBbXG4gICAgICAgIG51bWJlciAmIDB4M2ZmZmZmZixcbiAgICAgICAgKG51bWJlciAvIDB4NDAwMDAwMCkgJiAweDNmZmZmZmYsXG4gICAgICAgIDFcbiAgICAgIF07XG4gICAgICB0aGlzLmxlbmd0aCA9IDM7XG4gICAgfVxuXG4gICAgaWYgKGVuZGlhbiAhPT0gJ2xlJykgcmV0dXJuO1xuXG4gICAgLy8gUmV2ZXJzZSB0aGUgYnl0ZXNcbiAgICB0aGlzLl9pbml0QXJyYXkodGhpcy50b0FycmF5KCksIGJhc2UsIGVuZGlhbik7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl9pbml0QXJyYXkgPSBmdW5jdGlvbiBfaW5pdEFycmF5IChudW1iZXIsIGJhc2UsIGVuZGlhbikge1xuICAgIC8vIFBlcmhhcHMgYSBVaW50OEFycmF5XG4gICAgYXNzZXJ0KHR5cGVvZiBudW1iZXIubGVuZ3RoID09PSAnbnVtYmVyJyk7XG4gICAgaWYgKG51bWJlci5sZW5ndGggPD0gMCkge1xuICAgICAgdGhpcy53b3JkcyA9IFsgMCBdO1xuICAgICAgdGhpcy5sZW5ndGggPSAxO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgdGhpcy5sZW5ndGggPSBNYXRoLmNlaWwobnVtYmVyLmxlbmd0aCAvIDMpO1xuICAgIHRoaXMud29yZHMgPSBuZXcgQXJyYXkodGhpcy5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IDA7XG4gICAgfVxuXG4gICAgdmFyIGosIHc7XG4gICAgdmFyIG9mZiA9IDA7XG4gICAgaWYgKGVuZGlhbiA9PT0gJ2JlJykge1xuICAgICAgZm9yIChpID0gbnVtYmVyLmxlbmd0aCAtIDEsIGogPSAwOyBpID49IDA7IGkgLT0gMykge1xuICAgICAgICB3ID0gbnVtYmVyW2ldIHwgKG51bWJlcltpIC0gMV0gPDwgOCkgfCAobnVtYmVyW2kgLSAyXSA8PCAxNik7XG4gICAgICAgIHRoaXMud29yZHNbal0gfD0gKHcgPDwgb2ZmKSAmIDB4M2ZmZmZmZjtcbiAgICAgICAgdGhpcy53b3Jkc1tqICsgMV0gPSAodyA+Pj4gKDI2IC0gb2ZmKSkgJiAweDNmZmZmZmY7XG4gICAgICAgIG9mZiArPSAyNDtcbiAgICAgICAgaWYgKG9mZiA+PSAyNikge1xuICAgICAgICAgIG9mZiAtPSAyNjtcbiAgICAgICAgICBqKys7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGVuZGlhbiA9PT0gJ2xlJykge1xuICAgICAgZm9yIChpID0gMCwgaiA9IDA7IGkgPCBudW1iZXIubGVuZ3RoOyBpICs9IDMpIHtcbiAgICAgICAgdyA9IG51bWJlcltpXSB8IChudW1iZXJbaSArIDFdIDw8IDgpIHwgKG51bWJlcltpICsgMl0gPDwgMTYpO1xuICAgICAgICB0aGlzLndvcmRzW2pdIHw9ICh3IDw8IG9mZikgJiAweDNmZmZmZmY7XG4gICAgICAgIHRoaXMud29yZHNbaiArIDFdID0gKHcgPj4+ICgyNiAtIG9mZikpICYgMHgzZmZmZmZmO1xuICAgICAgICBvZmYgKz0gMjQ7XG4gICAgICAgIGlmIChvZmYgPj0gMjYpIHtcbiAgICAgICAgICBvZmYgLT0gMjY7XG4gICAgICAgICAgaisrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgZnVuY3Rpb24gcGFyc2VIZXggKHN0ciwgc3RhcnQsIGVuZCkge1xuICAgIHZhciByID0gMDtcbiAgICB2YXIgbGVuID0gTWF0aC5taW4oc3RyLmxlbmd0aCwgZW5kKTtcbiAgICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBsZW47IGkrKykge1xuICAgICAgdmFyIGMgPSBzdHIuY2hhckNvZGVBdChpKSAtIDQ4O1xuXG4gICAgICByIDw8PSA0O1xuXG4gICAgICAvLyAnYScgLSAnZidcbiAgICAgIGlmIChjID49IDQ5ICYmIGMgPD0gNTQpIHtcbiAgICAgICAgciB8PSBjIC0gNDkgKyAweGE7XG5cbiAgICAgIC8vICdBJyAtICdGJ1xuICAgICAgfSBlbHNlIGlmIChjID49IDE3ICYmIGMgPD0gMjIpIHtcbiAgICAgICAgciB8PSBjIC0gMTcgKyAweGE7XG5cbiAgICAgIC8vICcwJyAtICc5J1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgciB8PSBjICYgMHhmO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcjtcbiAgfVxuXG4gIEJOLnByb3RvdHlwZS5fcGFyc2VIZXggPSBmdW5jdGlvbiBfcGFyc2VIZXggKG51bWJlciwgc3RhcnQpIHtcbiAgICAvLyBDcmVhdGUgcG9zc2libHkgYmlnZ2VyIGFycmF5IHRvIGVuc3VyZSB0aGF0IGl0IGZpdHMgdGhlIG51bWJlclxuICAgIHRoaXMubGVuZ3RoID0gTWF0aC5jZWlsKChudW1iZXIubGVuZ3RoIC0gc3RhcnQpIC8gNik7XG4gICAgdGhpcy53b3JkcyA9IG5ldyBBcnJheSh0aGlzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gMDtcbiAgICB9XG5cbiAgICB2YXIgaiwgdztcbiAgICAvLyBTY2FuIDI0LWJpdCBjaHVua3MgYW5kIGFkZCB0aGVtIHRvIHRoZSBudW1iZXJcbiAgICB2YXIgb2ZmID0gMDtcbiAgICBmb3IgKGkgPSBudW1iZXIubGVuZ3RoIC0gNiwgaiA9IDA7IGkgPj0gc3RhcnQ7IGkgLT0gNikge1xuICAgICAgdyA9IHBhcnNlSGV4KG51bWJlciwgaSwgaSArIDYpO1xuICAgICAgdGhpcy53b3Jkc1tqXSB8PSAodyA8PCBvZmYpICYgMHgzZmZmZmZmO1xuICAgICAgLy8gTk9URTogYDB4M2ZmZmZmYCBpcyBpbnRlbnRpb25hbCBoZXJlLCAyNmJpdHMgbWF4IHNoaWZ0ICsgMjRiaXQgaGV4IGxpbWJcbiAgICAgIHRoaXMud29yZHNbaiArIDFdIHw9IHcgPj4+ICgyNiAtIG9mZikgJiAweDNmZmZmZjtcbiAgICAgIG9mZiArPSAyNDtcbiAgICAgIGlmIChvZmYgPj0gMjYpIHtcbiAgICAgICAgb2ZmIC09IDI2O1xuICAgICAgICBqKys7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChpICsgNiAhPT0gc3RhcnQpIHtcbiAgICAgIHcgPSBwYXJzZUhleChudW1iZXIsIHN0YXJ0LCBpICsgNik7XG4gICAgICB0aGlzLndvcmRzW2pdIHw9ICh3IDw8IG9mZikgJiAweDNmZmZmZmY7XG4gICAgICB0aGlzLndvcmRzW2ogKyAxXSB8PSB3ID4+PiAoMjYgLSBvZmYpICYgMHgzZmZmZmY7XG4gICAgfVxuICAgIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBmdW5jdGlvbiBwYXJzZUJhc2UgKHN0ciwgc3RhcnQsIGVuZCwgbXVsKSB7XG4gICAgdmFyIHIgPSAwO1xuICAgIHZhciBsZW4gPSBNYXRoLm1pbihzdHIubGVuZ3RoLCBlbmQpO1xuICAgIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICB2YXIgYyA9IHN0ci5jaGFyQ29kZUF0KGkpIC0gNDg7XG5cbiAgICAgIHIgKj0gbXVsO1xuXG4gICAgICAvLyAnYSdcbiAgICAgIGlmIChjID49IDQ5KSB7XG4gICAgICAgIHIgKz0gYyAtIDQ5ICsgMHhhO1xuXG4gICAgICAvLyAnQSdcbiAgICAgIH0gZWxzZSBpZiAoYyA+PSAxNykge1xuICAgICAgICByICs9IGMgLSAxNyArIDB4YTtcblxuICAgICAgLy8gJzAnIC0gJzknXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByICs9IGM7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByO1xuICB9XG5cbiAgQk4ucHJvdG90eXBlLl9wYXJzZUJhc2UgPSBmdW5jdGlvbiBfcGFyc2VCYXNlIChudW1iZXIsIGJhc2UsIHN0YXJ0KSB7XG4gICAgLy8gSW5pdGlhbGl6ZSBhcyB6ZXJvXG4gICAgdGhpcy53b3JkcyA9IFsgMCBdO1xuICAgIHRoaXMubGVuZ3RoID0gMTtcblxuICAgIC8vIEZpbmQgbGVuZ3RoIG9mIGxpbWIgaW4gYmFzZVxuICAgIGZvciAodmFyIGxpbWJMZW4gPSAwLCBsaW1iUG93ID0gMTsgbGltYlBvdyA8PSAweDNmZmZmZmY7IGxpbWJQb3cgKj0gYmFzZSkge1xuICAgICAgbGltYkxlbisrO1xuICAgIH1cbiAgICBsaW1iTGVuLS07XG4gICAgbGltYlBvdyA9IChsaW1iUG93IC8gYmFzZSkgfCAwO1xuXG4gICAgdmFyIHRvdGFsID0gbnVtYmVyLmxlbmd0aCAtIHN0YXJ0O1xuICAgIHZhciBtb2QgPSB0b3RhbCAlIGxpbWJMZW47XG4gICAgdmFyIGVuZCA9IE1hdGgubWluKHRvdGFsLCB0b3RhbCAtIG1vZCkgKyBzdGFydDtcblxuICAgIHZhciB3b3JkID0gMDtcbiAgICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkgKz0gbGltYkxlbikge1xuICAgICAgd29yZCA9IHBhcnNlQmFzZShudW1iZXIsIGksIGkgKyBsaW1iTGVuLCBiYXNlKTtcblxuICAgICAgdGhpcy5pbXVsbihsaW1iUG93KTtcbiAgICAgIGlmICh0aGlzLndvcmRzWzBdICsgd29yZCA8IDB4NDAwMDAwMCkge1xuICAgICAgICB0aGlzLndvcmRzWzBdICs9IHdvcmQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9pYWRkbih3b3JkKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAobW9kICE9PSAwKSB7XG4gICAgICB2YXIgcG93ID0gMTtcbiAgICAgIHdvcmQgPSBwYXJzZUJhc2UobnVtYmVyLCBpLCBudW1iZXIubGVuZ3RoLCBiYXNlKTtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IG1vZDsgaSsrKSB7XG4gICAgICAgIHBvdyAqPSBiYXNlO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmltdWxuKHBvdyk7XG4gICAgICBpZiAodGhpcy53b3Jkc1swXSArIHdvcmQgPCAweDQwMDAwMDApIHtcbiAgICAgICAgdGhpcy53b3Jkc1swXSArPSB3b3JkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5faWFkZG4od29yZCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gY29weSAoZGVzdCkge1xuICAgIGRlc3Qud29yZHMgPSBuZXcgQXJyYXkodGhpcy5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgZGVzdC53b3Jkc1tpXSA9IHRoaXMud29yZHNbaV07XG4gICAgfVxuICAgIGRlc3QubGVuZ3RoID0gdGhpcy5sZW5ndGg7XG4gICAgZGVzdC5uZWdhdGl2ZSA9IHRoaXMubmVnYXRpdmU7XG4gICAgZGVzdC5yZWQgPSB0aGlzLnJlZDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbiBjbG9uZSAoKSB7XG4gICAgdmFyIHIgPSBuZXcgQk4obnVsbCk7XG4gICAgdGhpcy5jb3B5KHIpO1xuICAgIHJldHVybiByO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5fZXhwYW5kID0gZnVuY3Rpb24gX2V4cGFuZCAoc2l6ZSkge1xuICAgIHdoaWxlICh0aGlzLmxlbmd0aCA8IHNpemUpIHtcbiAgICAgIHRoaXMud29yZHNbdGhpcy5sZW5ndGgrK10gPSAwO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICAvLyBSZW1vdmUgbGVhZGluZyBgMGAgZnJvbSBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLnN0cmlwID0gZnVuY3Rpb24gc3RyaXAgKCkge1xuICAgIHdoaWxlICh0aGlzLmxlbmd0aCA+IDEgJiYgdGhpcy53b3Jkc1t0aGlzLmxlbmd0aCAtIDFdID09PSAwKSB7XG4gICAgICB0aGlzLmxlbmd0aC0tO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fbm9ybVNpZ24oKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX25vcm1TaWduID0gZnVuY3Rpb24gX25vcm1TaWduICgpIHtcbiAgICAvLyAtMCA9IDBcbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDEgJiYgdGhpcy53b3Jkc1swXSA9PT0gMCkge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pbnNwZWN0ID0gZnVuY3Rpb24gaW5zcGVjdCAoKSB7XG4gICAgcmV0dXJuICh0aGlzLnJlZCA/ICc8Qk4tUjogJyA6ICc8Qk46ICcpICsgdGhpcy50b1N0cmluZygxNikgKyAnPic7XG4gIH07XG5cbiAgLypcblxuICB2YXIgemVyb3MgPSBbXTtcbiAgdmFyIGdyb3VwU2l6ZXMgPSBbXTtcbiAgdmFyIGdyb3VwQmFzZXMgPSBbXTtcblxuICB2YXIgcyA9ICcnO1xuICB2YXIgaSA9IC0xO1xuICB3aGlsZSAoKytpIDwgQk4ud29yZFNpemUpIHtcbiAgICB6ZXJvc1tpXSA9IHM7XG4gICAgcyArPSAnMCc7XG4gIH1cbiAgZ3JvdXBTaXplc1swXSA9IDA7XG4gIGdyb3VwU2l6ZXNbMV0gPSAwO1xuICBncm91cEJhc2VzWzBdID0gMDtcbiAgZ3JvdXBCYXNlc1sxXSA9IDA7XG4gIHZhciBiYXNlID0gMiAtIDE7XG4gIHdoaWxlICgrK2Jhc2UgPCAzNiArIDEpIHtcbiAgICB2YXIgZ3JvdXBTaXplID0gMDtcbiAgICB2YXIgZ3JvdXBCYXNlID0gMTtcbiAgICB3aGlsZSAoZ3JvdXBCYXNlIDwgKDEgPDwgQk4ud29yZFNpemUpIC8gYmFzZSkge1xuICAgICAgZ3JvdXBCYXNlICo9IGJhc2U7XG4gICAgICBncm91cFNpemUgKz0gMTtcbiAgICB9XG4gICAgZ3JvdXBTaXplc1tiYXNlXSA9IGdyb3VwU2l6ZTtcbiAgICBncm91cEJhc2VzW2Jhc2VdID0gZ3JvdXBCYXNlO1xuICB9XG5cbiAgKi9cblxuICB2YXIgemVyb3MgPSBbXG4gICAgJycsXG4gICAgJzAnLFxuICAgICcwMCcsXG4gICAgJzAwMCcsXG4gICAgJzAwMDAnLFxuICAgICcwMDAwMCcsXG4gICAgJzAwMDAwMCcsXG4gICAgJzAwMDAwMDAnLFxuICAgICcwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAnXG4gIF07XG5cbiAgdmFyIGdyb3VwU2l6ZXMgPSBbXG4gICAgMCwgMCxcbiAgICAyNSwgMTYsIDEyLCAxMSwgMTAsIDksIDgsXG4gICAgOCwgNywgNywgNywgNywgNiwgNixcbiAgICA2LCA2LCA2LCA2LCA2LCA1LCA1LFxuICAgIDUsIDUsIDUsIDUsIDUsIDUsIDUsXG4gICAgNSwgNSwgNSwgNSwgNSwgNSwgNVxuICBdO1xuXG4gIHZhciBncm91cEJhc2VzID0gW1xuICAgIDAsIDAsXG4gICAgMzM1NTQ0MzIsIDQzMDQ2NzIxLCAxNjc3NzIxNiwgNDg4MjgxMjUsIDYwNDY2MTc2LCA0MDM1MzYwNywgMTY3NzcyMTYsXG4gICAgNDMwNDY3MjEsIDEwMDAwMDAwLCAxOTQ4NzE3MSwgMzU4MzE4MDgsIDYyNzQ4NTE3LCA3NTI5NTM2LCAxMTM5MDYyNSxcbiAgICAxNjc3NzIxNiwgMjQxMzc1NjksIDM0MDEyMjI0LCA0NzA0NTg4MSwgNjQwMDAwMDAsIDQwODQxMDEsIDUxNTM2MzIsXG4gICAgNjQzNjM0MywgNzk2MjYyNCwgOTc2NTYyNSwgMTE4ODEzNzYsIDE0MzQ4OTA3LCAxNzIxMDM2OCwgMjA1MTExNDksXG4gICAgMjQzMDAwMDAsIDI4NjI5MTUxLCAzMzU1NDQzMiwgMzkxMzUzOTMsIDQ1NDM1NDI0LCA1MjUyMTg3NSwgNjA0NjYxNzZcbiAgXTtcblxuICBCTi5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyAoYmFzZSwgcGFkZGluZykge1xuICAgIGJhc2UgPSBiYXNlIHx8IDEwO1xuICAgIHBhZGRpbmcgPSBwYWRkaW5nIHwgMCB8fCAxO1xuXG4gICAgdmFyIG91dDtcbiAgICBpZiAoYmFzZSA9PT0gMTYgfHwgYmFzZSA9PT0gJ2hleCcpIHtcbiAgICAgIG91dCA9ICcnO1xuICAgICAgdmFyIG9mZiA9IDA7XG4gICAgICB2YXIgY2FycnkgPSAwO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciB3ID0gdGhpcy53b3Jkc1tpXTtcbiAgICAgICAgdmFyIHdvcmQgPSAoKCh3IDw8IG9mZikgfCBjYXJyeSkgJiAweGZmZmZmZikudG9TdHJpbmcoMTYpO1xuICAgICAgICBjYXJyeSA9ICh3ID4+PiAoMjQgLSBvZmYpKSAmIDB4ZmZmZmZmO1xuICAgICAgICBpZiAoY2FycnkgIT09IDAgfHwgaSAhPT0gdGhpcy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgb3V0ID0gemVyb3NbNiAtIHdvcmQubGVuZ3RoXSArIHdvcmQgKyBvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb3V0ID0gd29yZCArIG91dDtcbiAgICAgICAgfVxuICAgICAgICBvZmYgKz0gMjtcbiAgICAgICAgaWYgKG9mZiA+PSAyNikge1xuICAgICAgICAgIG9mZiAtPSAyNjtcbiAgICAgICAgICBpLS07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChjYXJyeSAhPT0gMCkge1xuICAgICAgICBvdXQgPSBjYXJyeS50b1N0cmluZygxNikgKyBvdXQ7XG4gICAgICB9XG4gICAgICB3aGlsZSAob3V0Lmxlbmd0aCAlIHBhZGRpbmcgIT09IDApIHtcbiAgICAgICAgb3V0ID0gJzAnICsgb3V0O1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHtcbiAgICAgICAgb3V0ID0gJy0nICsgb3V0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG5cbiAgICBpZiAoYmFzZSA9PT0gKGJhc2UgfCAwKSAmJiBiYXNlID49IDIgJiYgYmFzZSA8PSAzNikge1xuICAgICAgLy8gdmFyIGdyb3VwU2l6ZSA9IE1hdGguZmxvb3IoQk4ud29yZFNpemUgKiBNYXRoLkxOMiAvIE1hdGgubG9nKGJhc2UpKTtcbiAgICAgIHZhciBncm91cFNpemUgPSBncm91cFNpemVzW2Jhc2VdO1xuICAgICAgLy8gdmFyIGdyb3VwQmFzZSA9IE1hdGgucG93KGJhc2UsIGdyb3VwU2l6ZSk7XG4gICAgICB2YXIgZ3JvdXBCYXNlID0gZ3JvdXBCYXNlc1tiYXNlXTtcbiAgICAgIG91dCA9ICcnO1xuICAgICAgdmFyIGMgPSB0aGlzLmNsb25lKCk7XG4gICAgICBjLm5lZ2F0aXZlID0gMDtcbiAgICAgIHdoaWxlICghYy5pc1plcm8oKSkge1xuICAgICAgICB2YXIgciA9IGMubW9kbihncm91cEJhc2UpLnRvU3RyaW5nKGJhc2UpO1xuICAgICAgICBjID0gYy5pZGl2bihncm91cEJhc2UpO1xuXG4gICAgICAgIGlmICghYy5pc1plcm8oKSkge1xuICAgICAgICAgIG91dCA9IHplcm9zW2dyb3VwU2l6ZSAtIHIubGVuZ3RoXSArIHIgKyBvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb3V0ID0gciArIG91dDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHRoaXMuaXNaZXJvKCkpIHtcbiAgICAgICAgb3V0ID0gJzAnICsgb3V0O1xuICAgICAgfVxuICAgICAgd2hpbGUgKG91dC5sZW5ndGggJSBwYWRkaW5nICE9PSAwKSB7XG4gICAgICAgIG91dCA9ICcwJyArIG91dDtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICAgIG91dCA9ICctJyArIG91dDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuXG4gICAgYXNzZXJ0KGZhbHNlLCAnQmFzZSBzaG91bGQgYmUgYmV0d2VlbiAyIGFuZCAzNicpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS50b051bWJlciA9IGZ1bmN0aW9uIHRvTnVtYmVyICgpIHtcbiAgICB2YXIgcmV0ID0gdGhpcy53b3Jkc1swXTtcbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDIpIHtcbiAgICAgIHJldCArPSB0aGlzLndvcmRzWzFdICogMHg0MDAwMDAwO1xuICAgIH0gZWxzZSBpZiAodGhpcy5sZW5ndGggPT09IDMgJiYgdGhpcy53b3Jkc1syXSA9PT0gMHgwMSkge1xuICAgICAgLy8gTk9URTogYXQgdGhpcyBzdGFnZSBpdCBpcyBrbm93biB0aGF0IHRoZSB0b3AgYml0IGlzIHNldFxuICAgICAgcmV0ICs9IDB4MTAwMDAwMDAwMDAwMDAgKyAodGhpcy53b3Jkc1sxXSAqIDB4NDAwMDAwMCk7XG4gICAgfSBlbHNlIGlmICh0aGlzLmxlbmd0aCA+IDIpIHtcbiAgICAgIGFzc2VydChmYWxzZSwgJ051bWJlciBjYW4gb25seSBzYWZlbHkgc3RvcmUgdXAgdG8gNTMgYml0cycpO1xuICAgIH1cbiAgICByZXR1cm4gKHRoaXMubmVnYXRpdmUgIT09IDApID8gLXJldCA6IHJldDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OICgpIHtcbiAgICByZXR1cm4gdGhpcy50b1N0cmluZygxNik7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnRvQnVmZmVyID0gZnVuY3Rpb24gdG9CdWZmZXIgKGVuZGlhbiwgbGVuZ3RoKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBCdWZmZXIgIT09ICd1bmRlZmluZWQnKTtcbiAgICByZXR1cm4gdGhpcy50b0FycmF5TGlrZShCdWZmZXIsIGVuZGlhbiwgbGVuZ3RoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudG9BcnJheSA9IGZ1bmN0aW9uIHRvQXJyYXkgKGVuZGlhbiwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIHRoaXMudG9BcnJheUxpa2UoQXJyYXksIGVuZGlhbiwgbGVuZ3RoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudG9BcnJheUxpa2UgPSBmdW5jdGlvbiB0b0FycmF5TGlrZSAoQXJyYXlUeXBlLCBlbmRpYW4sIGxlbmd0aCkge1xuICAgIHZhciBieXRlTGVuZ3RoID0gdGhpcy5ieXRlTGVuZ3RoKCk7XG4gICAgdmFyIHJlcUxlbmd0aCA9IGxlbmd0aCB8fCBNYXRoLm1heCgxLCBieXRlTGVuZ3RoKTtcbiAgICBhc3NlcnQoYnl0ZUxlbmd0aCA8PSByZXFMZW5ndGgsICdieXRlIGFycmF5IGxvbmdlciB0aGFuIGRlc2lyZWQgbGVuZ3RoJyk7XG4gICAgYXNzZXJ0KHJlcUxlbmd0aCA+IDAsICdSZXF1ZXN0ZWQgYXJyYXkgbGVuZ3RoIDw9IDAnKTtcblxuICAgIHRoaXMuc3RyaXAoKTtcbiAgICB2YXIgbGl0dGxlRW5kaWFuID0gZW5kaWFuID09PSAnbGUnO1xuICAgIHZhciByZXMgPSBuZXcgQXJyYXlUeXBlKHJlcUxlbmd0aCk7XG5cbiAgICB2YXIgYiwgaTtcbiAgICB2YXIgcSA9IHRoaXMuY2xvbmUoKTtcbiAgICBpZiAoIWxpdHRsZUVuZGlhbikge1xuICAgICAgLy8gQXNzdW1lIGJpZy1lbmRpYW5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCByZXFMZW5ndGggLSBieXRlTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcmVzW2ldID0gMDtcbiAgICAgIH1cblxuICAgICAgZm9yIChpID0gMDsgIXEuaXNaZXJvKCk7IGkrKykge1xuICAgICAgICBiID0gcS5hbmRsbigweGZmKTtcbiAgICAgICAgcS5pdXNocm4oOCk7XG5cbiAgICAgICAgcmVzW3JlcUxlbmd0aCAtIGkgLSAxXSA9IGI7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAoaSA9IDA7ICFxLmlzWmVybygpOyBpKyspIHtcbiAgICAgICAgYiA9IHEuYW5kbG4oMHhmZik7XG4gICAgICAgIHEuaXVzaHJuKDgpO1xuXG4gICAgICAgIHJlc1tpXSA9IGI7XG4gICAgICB9XG5cbiAgICAgIGZvciAoOyBpIDwgcmVxTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcmVzW2ldID0gMDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIGlmIChNYXRoLmNsejMyKSB7XG4gICAgQk4ucHJvdG90eXBlLl9jb3VudEJpdHMgPSBmdW5jdGlvbiBfY291bnRCaXRzICh3KSB7XG4gICAgICByZXR1cm4gMzIgLSBNYXRoLmNsejMyKHcpO1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgQk4ucHJvdG90eXBlLl9jb3VudEJpdHMgPSBmdW5jdGlvbiBfY291bnRCaXRzICh3KSB7XG4gICAgICB2YXIgdCA9IHc7XG4gICAgICB2YXIgciA9IDA7XG4gICAgICBpZiAodCA+PSAweDEwMDApIHtcbiAgICAgICAgciArPSAxMztcbiAgICAgICAgdCA+Pj49IDEzO1xuICAgICAgfVxuICAgICAgaWYgKHQgPj0gMHg0MCkge1xuICAgICAgICByICs9IDc7XG4gICAgICAgIHQgPj4+PSA3O1xuICAgICAgfVxuICAgICAgaWYgKHQgPj0gMHg4KSB7XG4gICAgICAgIHIgKz0gNDtcbiAgICAgICAgdCA+Pj49IDQ7XG4gICAgICB9XG4gICAgICBpZiAodCA+PSAweDAyKSB7XG4gICAgICAgIHIgKz0gMjtcbiAgICAgICAgdCA+Pj49IDI7XG4gICAgICB9XG4gICAgICByZXR1cm4gciArIHQ7XG4gICAgfTtcbiAgfVxuXG4gIEJOLnByb3RvdHlwZS5femVyb0JpdHMgPSBmdW5jdGlvbiBfemVyb0JpdHMgKHcpIHtcbiAgICAvLyBTaG9ydC1jdXRcbiAgICBpZiAodyA9PT0gMCkgcmV0dXJuIDI2O1xuXG4gICAgdmFyIHQgPSB3O1xuICAgIHZhciByID0gMDtcbiAgICBpZiAoKHQgJiAweDFmZmYpID09PSAwKSB7XG4gICAgICByICs9IDEzO1xuICAgICAgdCA+Pj49IDEzO1xuICAgIH1cbiAgICBpZiAoKHQgJiAweDdmKSA9PT0gMCkge1xuICAgICAgciArPSA3O1xuICAgICAgdCA+Pj49IDc7XG4gICAgfVxuICAgIGlmICgodCAmIDB4ZikgPT09IDApIHtcbiAgICAgIHIgKz0gNDtcbiAgICAgIHQgPj4+PSA0O1xuICAgIH1cbiAgICBpZiAoKHQgJiAweDMpID09PSAwKSB7XG4gICAgICByICs9IDI7XG4gICAgICB0ID4+Pj0gMjtcbiAgICB9XG4gICAgaWYgKCh0ICYgMHgxKSA9PT0gMCkge1xuICAgICAgcisrO1xuICAgIH1cbiAgICByZXR1cm4gcjtcbiAgfTtcblxuICAvLyBSZXR1cm4gbnVtYmVyIG9mIHVzZWQgYml0cyBpbiBhIEJOXG4gIEJOLnByb3RvdHlwZS5iaXRMZW5ndGggPSBmdW5jdGlvbiBiaXRMZW5ndGggKCkge1xuICAgIHZhciB3ID0gdGhpcy53b3Jkc1t0aGlzLmxlbmd0aCAtIDFdO1xuICAgIHZhciBoaSA9IHRoaXMuX2NvdW50Qml0cyh3KTtcbiAgICByZXR1cm4gKHRoaXMubGVuZ3RoIC0gMSkgKiAyNiArIGhpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHRvQml0QXJyYXkgKG51bSkge1xuICAgIHZhciB3ID0gbmV3IEFycmF5KG51bS5iaXRMZW5ndGgoKSk7XG5cbiAgICBmb3IgKHZhciBiaXQgPSAwOyBiaXQgPCB3Lmxlbmd0aDsgYml0KyspIHtcbiAgICAgIHZhciBvZmYgPSAoYml0IC8gMjYpIHwgMDtcbiAgICAgIHZhciB3Yml0ID0gYml0ICUgMjY7XG5cbiAgICAgIHdbYml0XSA9IChudW0ud29yZHNbb2ZmXSAmICgxIDw8IHdiaXQpKSA+Pj4gd2JpdDtcbiAgICB9XG5cbiAgICByZXR1cm4gdztcbiAgfVxuXG4gIC8vIE51bWJlciBvZiB0cmFpbGluZyB6ZXJvIGJpdHNcbiAgQk4ucHJvdG90eXBlLnplcm9CaXRzID0gZnVuY3Rpb24gemVyb0JpdHMgKCkge1xuICAgIGlmICh0aGlzLmlzWmVybygpKSByZXR1cm4gMDtcblxuICAgIHZhciByID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBiID0gdGhpcy5femVyb0JpdHModGhpcy53b3Jkc1tpXSk7XG4gICAgICByICs9IGI7XG4gICAgICBpZiAoYiAhPT0gMjYpIGJyZWFrO1xuICAgIH1cbiAgICByZXR1cm4gcjtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuYnl0ZUxlbmd0aCA9IGZ1bmN0aW9uIGJ5dGVMZW5ndGggKCkge1xuICAgIHJldHVybiBNYXRoLmNlaWwodGhpcy5iaXRMZW5ndGgoKSAvIDgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS50b1R3b3MgPSBmdW5jdGlvbiB0b1R3b3MgKHdpZHRoKSB7XG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIHJldHVybiB0aGlzLmFicygpLmlub3RuKHdpZHRoKS5pYWRkbigxKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZnJvbVR3b3MgPSBmdW5jdGlvbiBmcm9tVHdvcyAod2lkdGgpIHtcbiAgICBpZiAodGhpcy50ZXN0bih3aWR0aCAtIDEpKSB7XG4gICAgICByZXR1cm4gdGhpcy5ub3RuKHdpZHRoKS5pYWRkbigxKS5pbmVnKCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmNsb25lKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmlzTmVnID0gZnVuY3Rpb24gaXNOZWcgKCkge1xuICAgIHJldHVybiB0aGlzLm5lZ2F0aXZlICE9PSAwO1xuICB9O1xuXG4gIC8vIFJldHVybiBuZWdhdGl2ZSBjbG9uZSBvZiBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLm5lZyA9IGZ1bmN0aW9uIG5lZyAoKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pbmVnKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmluZWcgPSBmdW5jdGlvbiBpbmVnICgpIHtcbiAgICBpZiAoIXRoaXMuaXNaZXJvKCkpIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgXj0gMTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICAvLyBPciBgbnVtYCB3aXRoIGB0aGlzYCBpbi1wbGFjZVxuICBCTi5wcm90b3R5cGUuaXVvciA9IGZ1bmN0aW9uIGl1b3IgKG51bSkge1xuICAgIHdoaWxlICh0aGlzLmxlbmd0aCA8IG51bS5sZW5ndGgpIHtcbiAgICAgIHRoaXMud29yZHNbdGhpcy5sZW5ndGgrK10gPSAwO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gdGhpcy53b3Jkc1tpXSB8IG51bS53b3Jkc1tpXTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pb3IgPSBmdW5jdGlvbiBpb3IgKG51bSkge1xuICAgIGFzc2VydCgodGhpcy5uZWdhdGl2ZSB8IG51bS5uZWdhdGl2ZSkgPT09IDApO1xuICAgIHJldHVybiB0aGlzLml1b3IobnVtKTtcbiAgfTtcblxuICAvLyBPciBgbnVtYCB3aXRoIGB0aGlzYFxuICBCTi5wcm90b3R5cGUub3IgPSBmdW5jdGlvbiBvciAobnVtKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIHRoaXMuY2xvbmUoKS5pb3IobnVtKTtcbiAgICByZXR1cm4gbnVtLmNsb25lKCkuaW9yKHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS51b3IgPSBmdW5jdGlvbiB1b3IgKG51bSkge1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHJldHVybiB0aGlzLmNsb25lKCkuaXVvcihudW0pO1xuICAgIHJldHVybiBudW0uY2xvbmUoKS5pdW9yKHRoaXMpO1xuICB9O1xuXG4gIC8vIEFuZCBgbnVtYCB3aXRoIGB0aGlzYCBpbi1wbGFjZVxuICBCTi5wcm90b3R5cGUuaXVhbmQgPSBmdW5jdGlvbiBpdWFuZCAobnVtKSB7XG4gICAgLy8gYiA9IG1pbi1sZW5ndGgobnVtLCB0aGlzKVxuICAgIHZhciBiO1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHtcbiAgICAgIGIgPSBudW07XG4gICAgfSBlbHNlIHtcbiAgICAgIGIgPSB0aGlzO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYi5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IHRoaXMud29yZHNbaV0gJiBudW0ud29yZHNbaV07XG4gICAgfVxuXG4gICAgdGhpcy5sZW5ndGggPSBiLmxlbmd0aDtcblxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmlhbmQgPSBmdW5jdGlvbiBpYW5kIChudW0pIHtcbiAgICBhc3NlcnQoKHRoaXMubmVnYXRpdmUgfCBudW0ubmVnYXRpdmUpID09PSAwKTtcbiAgICByZXR1cm4gdGhpcy5pdWFuZChudW0pO1xuICB9O1xuXG4gIC8vIEFuZCBgbnVtYCB3aXRoIGB0aGlzYFxuICBCTi5wcm90b3R5cGUuYW5kID0gZnVuY3Rpb24gYW5kIChudW0pIHtcbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSByZXR1cm4gdGhpcy5jbG9uZSgpLmlhbmQobnVtKTtcbiAgICByZXR1cm4gbnVtLmNsb25lKCkuaWFuZCh0aGlzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudWFuZCA9IGZ1bmN0aW9uIHVhbmQgKG51bSkge1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHJldHVybiB0aGlzLmNsb25lKCkuaXVhbmQobnVtKTtcbiAgICByZXR1cm4gbnVtLmNsb25lKCkuaXVhbmQodGhpcyk7XG4gIH07XG5cbiAgLy8gWG9yIGBudW1gIHdpdGggYHRoaXNgIGluLXBsYWNlXG4gIEJOLnByb3RvdHlwZS5pdXhvciA9IGZ1bmN0aW9uIGl1eG9yIChudW0pIHtcbiAgICAvLyBhLmxlbmd0aCA+IGIubGVuZ3RoXG4gICAgdmFyIGE7XG4gICAgdmFyIGI7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkge1xuICAgICAgYSA9IHRoaXM7XG4gICAgICBiID0gbnVtO1xuICAgIH0gZWxzZSB7XG4gICAgICBhID0gbnVtO1xuICAgICAgYiA9IHRoaXM7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBiLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gYS53b3Jkc1tpXSBeIGIud29yZHNbaV07XG4gICAgfVxuXG4gICAgaWYgKHRoaXMgIT09IGEpIHtcbiAgICAgIGZvciAoOyBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgICAgICB0aGlzLndvcmRzW2ldID0gYS53b3Jkc1tpXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmxlbmd0aCA9IGEubGVuZ3RoO1xuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaXhvciA9IGZ1bmN0aW9uIGl4b3IgKG51bSkge1xuICAgIGFzc2VydCgodGhpcy5uZWdhdGl2ZSB8IG51bS5uZWdhdGl2ZSkgPT09IDApO1xuICAgIHJldHVybiB0aGlzLml1eG9yKG51bSk7XG4gIH07XG5cbiAgLy8gWG9yIGBudW1gIHdpdGggYHRoaXNgXG4gIEJOLnByb3RvdHlwZS54b3IgPSBmdW5jdGlvbiB4b3IgKG51bSkge1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHJldHVybiB0aGlzLmNsb25lKCkuaXhvcihudW0pO1xuICAgIHJldHVybiBudW0uY2xvbmUoKS5peG9yKHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS51eG9yID0gZnVuY3Rpb24gdXhvciAobnVtKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIHRoaXMuY2xvbmUoKS5pdXhvcihudW0pO1xuICAgIHJldHVybiBudW0uY2xvbmUoKS5pdXhvcih0aGlzKTtcbiAgfTtcblxuICAvLyBOb3QgYGB0aGlzYGAgd2l0aCBgYHdpZHRoYGAgYml0d2lkdGhcbiAgQk4ucHJvdG90eXBlLmlub3RuID0gZnVuY3Rpb24gaW5vdG4gKHdpZHRoKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiB3aWR0aCA9PT0gJ251bWJlcicgJiYgd2lkdGggPj0gMCk7XG5cbiAgICB2YXIgYnl0ZXNOZWVkZWQgPSBNYXRoLmNlaWwod2lkdGggLyAyNikgfCAwO1xuICAgIHZhciBiaXRzTGVmdCA9IHdpZHRoICUgMjY7XG5cbiAgICAvLyBFeHRlbmQgdGhlIGJ1ZmZlciB3aXRoIGxlYWRpbmcgemVyb2VzXG4gICAgdGhpcy5fZXhwYW5kKGJ5dGVzTmVlZGVkKTtcblxuICAgIGlmIChiaXRzTGVmdCA+IDApIHtcbiAgICAgIGJ5dGVzTmVlZGVkLS07XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIGNvbXBsZXRlIHdvcmRzXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBieXRlc05lZWRlZDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gfnRoaXMud29yZHNbaV0gJiAweDNmZmZmZmY7XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIHRoZSByZXNpZHVlXG4gICAgaWYgKGJpdHNMZWZ0ID4gMCkge1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IH50aGlzLndvcmRzW2ldICYgKDB4M2ZmZmZmZiA+PiAoMjYgLSBiaXRzTGVmdCkpO1xuICAgIH1cblxuICAgIC8vIEFuZCByZW1vdmUgbGVhZGluZyB6ZXJvZXNcbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5ub3RuID0gZnVuY3Rpb24gbm90biAod2lkdGgpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlub3RuKHdpZHRoKTtcbiAgfTtcblxuICAvLyBTZXQgYGJpdGAgb2YgYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5zZXRuID0gZnVuY3Rpb24gc2V0biAoYml0LCB2YWwpIHtcbiAgICBhc3NlcnQodHlwZW9mIGJpdCA9PT0gJ251bWJlcicgJiYgYml0ID49IDApO1xuXG4gICAgdmFyIG9mZiA9IChiaXQgLyAyNikgfCAwO1xuICAgIHZhciB3Yml0ID0gYml0ICUgMjY7XG5cbiAgICB0aGlzLl9leHBhbmQob2ZmICsgMSk7XG5cbiAgICBpZiAodmFsKSB7XG4gICAgICB0aGlzLndvcmRzW29mZl0gPSB0aGlzLndvcmRzW29mZl0gfCAoMSA8PCB3Yml0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy53b3Jkc1tvZmZdID0gdGhpcy53b3Jkc1tvZmZdICYgfigxIDw8IHdiaXQpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgLy8gQWRkIGBudW1gIHRvIGB0aGlzYCBpbi1wbGFjZVxuICBCTi5wcm90b3R5cGUuaWFkZCA9IGZ1bmN0aW9uIGlhZGQgKG51bSkge1xuICAgIHZhciByO1xuXG4gICAgLy8gbmVnYXRpdmUgKyBwb3NpdGl2ZVxuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwICYmIG51bS5uZWdhdGl2ZSA9PT0gMCkge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgICByID0gdGhpcy5pc3ViKG51bSk7XG4gICAgICB0aGlzLm5lZ2F0aXZlIF49IDE7XG4gICAgICByZXR1cm4gdGhpcy5fbm9ybVNpZ24oKTtcblxuICAgIC8vIHBvc2l0aXZlICsgbmVnYXRpdmVcbiAgICB9IGVsc2UgaWYgKHRoaXMubmVnYXRpdmUgPT09IDAgJiYgbnVtLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICBudW0ubmVnYXRpdmUgPSAwO1xuICAgICAgciA9IHRoaXMuaXN1YihudW0pO1xuICAgICAgbnVtLm5lZ2F0aXZlID0gMTtcbiAgICAgIHJldHVybiByLl9ub3JtU2lnbigpO1xuICAgIH1cblxuICAgIC8vIGEubGVuZ3RoID4gYi5sZW5ndGhcbiAgICB2YXIgYSwgYjtcbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSB7XG4gICAgICBhID0gdGhpcztcbiAgICAgIGIgPSBudW07XG4gICAgfSBlbHNlIHtcbiAgICAgIGEgPSBudW07XG4gICAgICBiID0gdGhpcztcbiAgICB9XG5cbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYi5sZW5ndGg7IGkrKykge1xuICAgICAgciA9IChhLndvcmRzW2ldIHwgMCkgKyAoYi53b3Jkc1tpXSB8IDApICsgY2Fycnk7XG4gICAgICB0aGlzLndvcmRzW2ldID0gciAmIDB4M2ZmZmZmZjtcbiAgICAgIGNhcnJ5ID0gciA+Pj4gMjY7XG4gICAgfVxuICAgIGZvciAoOyBjYXJyeSAhPT0gMCAmJiBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgICAgciA9IChhLndvcmRzW2ldIHwgMCkgKyBjYXJyeTtcbiAgICAgIHRoaXMud29yZHNbaV0gPSByICYgMHgzZmZmZmZmO1xuICAgICAgY2FycnkgPSByID4+PiAyNjtcbiAgICB9XG5cbiAgICB0aGlzLmxlbmd0aCA9IGEubGVuZ3RoO1xuICAgIGlmIChjYXJyeSAhPT0gMCkge1xuICAgICAgdGhpcy53b3Jkc1t0aGlzLmxlbmd0aF0gPSBjYXJyeTtcbiAgICAgIHRoaXMubGVuZ3RoKys7XG4gICAgLy8gQ29weSB0aGUgcmVzdCBvZiB0aGUgd29yZHNcbiAgICB9IGVsc2UgaWYgKGEgIT09IHRoaXMpIHtcbiAgICAgIGZvciAoOyBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgICAgICB0aGlzLndvcmRzW2ldID0gYS53b3Jkc1tpXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICAvLyBBZGQgYG51bWAgdG8gYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiBhZGQgKG51bSkge1xuICAgIHZhciByZXM7XG4gICAgaWYgKG51bS5uZWdhdGl2ZSAhPT0gMCAmJiB0aGlzLm5lZ2F0aXZlID09PSAwKSB7XG4gICAgICBudW0ubmVnYXRpdmUgPSAwO1xuICAgICAgcmVzID0gdGhpcy5zdWIobnVtKTtcbiAgICAgIG51bS5uZWdhdGl2ZSBePSAxO1xuICAgICAgcmV0dXJuIHJlcztcbiAgICB9IGVsc2UgaWYgKG51bS5uZWdhdGl2ZSA9PT0gMCAmJiB0aGlzLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICAgIHJlcyA9IG51bS5zdWIodGhpcyk7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMTtcbiAgICAgIHJldHVybiByZXM7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIHRoaXMuY2xvbmUoKS5pYWRkKG51bSk7XG5cbiAgICByZXR1cm4gbnVtLmNsb25lKCkuaWFkZCh0aGlzKTtcbiAgfTtcblxuICAvLyBTdWJ0cmFjdCBgbnVtYCBmcm9tIGB0aGlzYCBpbi1wbGFjZVxuICBCTi5wcm90b3R5cGUuaXN1YiA9IGZ1bmN0aW9uIGlzdWIgKG51bSkge1xuICAgIC8vIHRoaXMgLSAoLW51bSkgPSB0aGlzICsgbnVtXG4gICAgaWYgKG51bS5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgbnVtLm5lZ2F0aXZlID0gMDtcbiAgICAgIHZhciByID0gdGhpcy5pYWRkKG51bSk7XG4gICAgICBudW0ubmVnYXRpdmUgPSAxO1xuICAgICAgcmV0dXJuIHIuX25vcm1TaWduKCk7XG5cbiAgICAvLyAtdGhpcyAtIG51bSA9IC0odGhpcyArIG51bSlcbiAgICB9IGVsc2UgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAwO1xuICAgICAgdGhpcy5pYWRkKG51bSk7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMTtcbiAgICAgIHJldHVybiB0aGlzLl9ub3JtU2lnbigpO1xuICAgIH1cblxuICAgIC8vIEF0IHRoaXMgcG9pbnQgYm90aCBudW1iZXJzIGFyZSBwb3NpdGl2ZVxuICAgIHZhciBjbXAgPSB0aGlzLmNtcChudW0pO1xuXG4gICAgLy8gT3B0aW1pemF0aW9uIC0gemVyb2lmeVxuICAgIGlmIChjbXAgPT09IDApIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAwO1xuICAgICAgdGhpcy5sZW5ndGggPSAxO1xuICAgICAgdGhpcy53b3Jkc1swXSA9IDA7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBhID4gYlxuICAgIHZhciBhLCBiO1xuICAgIGlmIChjbXAgPiAwKSB7XG4gICAgICBhID0gdGhpcztcbiAgICAgIGIgPSBudW07XG4gICAgfSBlbHNlIHtcbiAgICAgIGEgPSBudW07XG4gICAgICBiID0gdGhpcztcbiAgICB9XG5cbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYi5sZW5ndGg7IGkrKykge1xuICAgICAgciA9IChhLndvcmRzW2ldIHwgMCkgLSAoYi53b3Jkc1tpXSB8IDApICsgY2Fycnk7XG4gICAgICBjYXJyeSA9IHIgPj4gMjY7XG4gICAgICB0aGlzLndvcmRzW2ldID0gciAmIDB4M2ZmZmZmZjtcbiAgICB9XG4gICAgZm9yICg7IGNhcnJ5ICE9PSAwICYmIGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICByID0gKGEud29yZHNbaV0gfCAwKSArIGNhcnJ5O1xuICAgICAgY2FycnkgPSByID4+IDI2O1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IHIgJiAweDNmZmZmZmY7XG4gICAgfVxuXG4gICAgLy8gQ29weSByZXN0IG9mIHRoZSB3b3Jkc1xuICAgIGlmIChjYXJyeSA9PT0gMCAmJiBpIDwgYS5sZW5ndGggJiYgYSAhPT0gdGhpcykge1xuICAgICAgZm9yICg7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRoaXMud29yZHNbaV0gPSBhLndvcmRzW2ldO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMubGVuZ3RoID0gTWF0aC5tYXgodGhpcy5sZW5ndGgsIGkpO1xuXG4gICAgaWYgKGEgIT09IHRoaXMpIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgLy8gU3VidHJhY3QgYG51bWAgZnJvbSBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLnN1YiA9IGZ1bmN0aW9uIHN1YiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pc3ViKG51bSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gc21hbGxNdWxUbyAoc2VsZiwgbnVtLCBvdXQpIHtcbiAgICBvdXQubmVnYXRpdmUgPSBudW0ubmVnYXRpdmUgXiBzZWxmLm5lZ2F0aXZlO1xuICAgIHZhciBsZW4gPSAoc2VsZi5sZW5ndGggKyBudW0ubGVuZ3RoKSB8IDA7XG4gICAgb3V0Lmxlbmd0aCA9IGxlbjtcbiAgICBsZW4gPSAobGVuIC0gMSkgfCAwO1xuXG4gICAgLy8gUGVlbCBvbmUgaXRlcmF0aW9uIChjb21waWxlciBjYW4ndCBkbyBpdCwgYmVjYXVzZSBvZiBjb2RlIGNvbXBsZXhpdHkpXG4gICAgdmFyIGEgPSBzZWxmLndvcmRzWzBdIHwgMDtcbiAgICB2YXIgYiA9IG51bS53b3Jkc1swXSB8IDA7XG4gICAgdmFyIHIgPSBhICogYjtcblxuICAgIHZhciBsbyA9IHIgJiAweDNmZmZmZmY7XG4gICAgdmFyIGNhcnJ5ID0gKHIgLyAweDQwMDAwMDApIHwgMDtcbiAgICBvdXQud29yZHNbMF0gPSBsbztcblxuICAgIGZvciAodmFyIGsgPSAxOyBrIDwgbGVuOyBrKyspIHtcbiAgICAgIC8vIFN1bSBhbGwgd29yZHMgd2l0aCB0aGUgc2FtZSBgaSArIGogPSBrYCBhbmQgYWNjdW11bGF0ZSBgbmNhcnJ5YCxcbiAgICAgIC8vIG5vdGUgdGhhdCBuY2FycnkgY291bGQgYmUgPj0gMHgzZmZmZmZmXG4gICAgICB2YXIgbmNhcnJ5ID0gY2FycnkgPj4+IDI2O1xuICAgICAgdmFyIHJ3b3JkID0gY2FycnkgJiAweDNmZmZmZmY7XG4gICAgICB2YXIgbWF4SiA9IE1hdGgubWluKGssIG51bS5sZW5ndGggLSAxKTtcbiAgICAgIGZvciAodmFyIGogPSBNYXRoLm1heCgwLCBrIC0gc2VsZi5sZW5ndGggKyAxKTsgaiA8PSBtYXhKOyBqKyspIHtcbiAgICAgICAgdmFyIGkgPSAoayAtIGopIHwgMDtcbiAgICAgICAgYSA9IHNlbGYud29yZHNbaV0gfCAwO1xuICAgICAgICBiID0gbnVtLndvcmRzW2pdIHwgMDtcbiAgICAgICAgciA9IGEgKiBiICsgcndvcmQ7XG4gICAgICAgIG5jYXJyeSArPSAociAvIDB4NDAwMDAwMCkgfCAwO1xuICAgICAgICByd29yZCA9IHIgJiAweDNmZmZmZmY7XG4gICAgICB9XG4gICAgICBvdXQud29yZHNba10gPSByd29yZCB8IDA7XG4gICAgICBjYXJyeSA9IG5jYXJyeSB8IDA7XG4gICAgfVxuICAgIGlmIChjYXJyeSAhPT0gMCkge1xuICAgICAgb3V0LndvcmRzW2tdID0gY2FycnkgfCAwO1xuICAgIH0gZWxzZSB7XG4gICAgICBvdXQubGVuZ3RoLS07XG4gICAgfVxuXG4gICAgcmV0dXJuIG91dC5zdHJpcCgpO1xuICB9XG5cbiAgLy8gVE9ETyhpbmR1dG55KTogaXQgbWF5IGJlIHJlYXNvbmFibGUgdG8gb21pdCBpdCBmb3IgdXNlcnMgd2hvIGRvbid0IG5lZWRcbiAgLy8gdG8gd29yayB3aXRoIDI1Ni1iaXQgbnVtYmVycywgb3RoZXJ3aXNlIGl0IGdpdmVzIDIwJSBpbXByb3ZlbWVudCBmb3IgMjU2LWJpdFxuICAvLyBtdWx0aXBsaWNhdGlvbiAobGlrZSBlbGxpcHRpYyBzZWNwMjU2azEpLlxuICB2YXIgY29tYjEwTXVsVG8gPSBmdW5jdGlvbiBjb21iMTBNdWxUbyAoc2VsZiwgbnVtLCBvdXQpIHtcbiAgICB2YXIgYSA9IHNlbGYud29yZHM7XG4gICAgdmFyIGIgPSBudW0ud29yZHM7XG4gICAgdmFyIG8gPSBvdXQud29yZHM7XG4gICAgdmFyIGMgPSAwO1xuICAgIHZhciBsbztcbiAgICB2YXIgbWlkO1xuICAgIHZhciBoaTtcbiAgICB2YXIgYTAgPSBhWzBdIHwgMDtcbiAgICB2YXIgYWwwID0gYTAgJiAweDFmZmY7XG4gICAgdmFyIGFoMCA9IGEwID4+PiAxMztcbiAgICB2YXIgYTEgPSBhWzFdIHwgMDtcbiAgICB2YXIgYWwxID0gYTEgJiAweDFmZmY7XG4gICAgdmFyIGFoMSA9IGExID4+PiAxMztcbiAgICB2YXIgYTIgPSBhWzJdIHwgMDtcbiAgICB2YXIgYWwyID0gYTIgJiAweDFmZmY7XG4gICAgdmFyIGFoMiA9IGEyID4+PiAxMztcbiAgICB2YXIgYTMgPSBhWzNdIHwgMDtcbiAgICB2YXIgYWwzID0gYTMgJiAweDFmZmY7XG4gICAgdmFyIGFoMyA9IGEzID4+PiAxMztcbiAgICB2YXIgYTQgPSBhWzRdIHwgMDtcbiAgICB2YXIgYWw0ID0gYTQgJiAweDFmZmY7XG4gICAgdmFyIGFoNCA9IGE0ID4+PiAxMztcbiAgICB2YXIgYTUgPSBhWzVdIHwgMDtcbiAgICB2YXIgYWw1ID0gYTUgJiAweDFmZmY7XG4gICAgdmFyIGFoNSA9IGE1ID4+PiAxMztcbiAgICB2YXIgYTYgPSBhWzZdIHwgMDtcbiAgICB2YXIgYWw2ID0gYTYgJiAweDFmZmY7XG4gICAgdmFyIGFoNiA9IGE2ID4+PiAxMztcbiAgICB2YXIgYTcgPSBhWzddIHwgMDtcbiAgICB2YXIgYWw3ID0gYTcgJiAweDFmZmY7XG4gICAgdmFyIGFoNyA9IGE3ID4+PiAxMztcbiAgICB2YXIgYTggPSBhWzhdIHwgMDtcbiAgICB2YXIgYWw4ID0gYTggJiAweDFmZmY7XG4gICAgdmFyIGFoOCA9IGE4ID4+PiAxMztcbiAgICB2YXIgYTkgPSBhWzldIHwgMDtcbiAgICB2YXIgYWw5ID0gYTkgJiAweDFmZmY7XG4gICAgdmFyIGFoOSA9IGE5ID4+PiAxMztcbiAgICB2YXIgYjAgPSBiWzBdIHwgMDtcbiAgICB2YXIgYmwwID0gYjAgJiAweDFmZmY7XG4gICAgdmFyIGJoMCA9IGIwID4+PiAxMztcbiAgICB2YXIgYjEgPSBiWzFdIHwgMDtcbiAgICB2YXIgYmwxID0gYjEgJiAweDFmZmY7XG4gICAgdmFyIGJoMSA9IGIxID4+PiAxMztcbiAgICB2YXIgYjIgPSBiWzJdIHwgMDtcbiAgICB2YXIgYmwyID0gYjIgJiAweDFmZmY7XG4gICAgdmFyIGJoMiA9IGIyID4+PiAxMztcbiAgICB2YXIgYjMgPSBiWzNdIHwgMDtcbiAgICB2YXIgYmwzID0gYjMgJiAweDFmZmY7XG4gICAgdmFyIGJoMyA9IGIzID4+PiAxMztcbiAgICB2YXIgYjQgPSBiWzRdIHwgMDtcbiAgICB2YXIgYmw0ID0gYjQgJiAweDFmZmY7XG4gICAgdmFyIGJoNCA9IGI0ID4+PiAxMztcbiAgICB2YXIgYjUgPSBiWzVdIHwgMDtcbiAgICB2YXIgYmw1ID0gYjUgJiAweDFmZmY7XG4gICAgdmFyIGJoNSA9IGI1ID4+PiAxMztcbiAgICB2YXIgYjYgPSBiWzZdIHwgMDtcbiAgICB2YXIgYmw2ID0gYjYgJiAweDFmZmY7XG4gICAgdmFyIGJoNiA9IGI2ID4+PiAxMztcbiAgICB2YXIgYjcgPSBiWzddIHwgMDtcbiAgICB2YXIgYmw3ID0gYjcgJiAweDFmZmY7XG4gICAgdmFyIGJoNyA9IGI3ID4+PiAxMztcbiAgICB2YXIgYjggPSBiWzhdIHwgMDtcbiAgICB2YXIgYmw4ID0gYjggJiAweDFmZmY7XG4gICAgdmFyIGJoOCA9IGI4ID4+PiAxMztcbiAgICB2YXIgYjkgPSBiWzldIHwgMDtcbiAgICB2YXIgYmw5ID0gYjkgJiAweDFmZmY7XG4gICAgdmFyIGJoOSA9IGI5ID4+PiAxMztcblxuICAgIG91dC5uZWdhdGl2ZSA9IHNlbGYubmVnYXRpdmUgXiBudW0ubmVnYXRpdmU7XG4gICAgb3V0Lmxlbmd0aCA9IDE5O1xuICAgIC8qIGsgPSAwICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWwwLCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDAsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDAsIGJoMCk7XG4gICAgdmFyIHcwID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MCA+Pj4gMjYpKSB8IDA7XG4gICAgdzAgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWwxLCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDEsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDEsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwwLCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDAsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMCwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMCwgYmgxKSkgfCAwO1xuICAgIHZhciB3MSA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzEgPj4+IDI2KSkgfCAwO1xuICAgIHcxICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gMiAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsMiwgYmwwKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWwyLCBiaDApO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDApKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWgyLCBiaDApO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmwxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsMSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoMSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmgyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDIpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDIpKSB8IDA7XG4gICAgdmFyIHcyID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MiA+Pj4gMjYpKSB8IDA7XG4gICAgdzIgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAzICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWwzLCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDMsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDMsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDMpKSB8IDA7XG4gICAgdmFyIHczID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MyA+Pj4gMjYpKSB8IDA7XG4gICAgdzMgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSA0ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw0LCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDQsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDQsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwzLCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDMsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMywgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMywgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMiwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwyLCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDIsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDIsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDEsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMSwgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgxLCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgxLCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwwLCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDAsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMCwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMCwgYmg0KSkgfCAwO1xuICAgIHZhciB3NCA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzQgPj4+IDI2KSkgfCAwO1xuICAgIHc0ICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gNSAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsNSwgYmwwKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw1LCBiaDApO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg1LCBibDApKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg1LCBiaDApO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmwxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsMSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoMSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmgyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDIpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDIpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmwzKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmgzKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmw0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsNCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoNCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmg1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDUpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDUpKSB8IDA7XG4gICAgdmFyIHc1ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3NSA+Pj4gMjYpKSB8IDA7XG4gICAgdzUgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSA2ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw2LCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDYsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDYsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDYsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDYpKSB8IDA7XG4gICAgdmFyIHc2ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3NiA+Pj4gMjYpKSB8IDA7XG4gICAgdzYgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSA3ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw3LCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDcsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDcsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw2LCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDYsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNiwgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNSwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDUsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDQsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNCwgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg0LCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg0LCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwzLCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDMsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMywgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMywgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMiwgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwyLCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDIsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDIsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDEsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMSwgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgxLCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgxLCBiaDYpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwwLCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDAsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMCwgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMCwgYmg3KSkgfCAwO1xuICAgIHZhciB3NyA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzcgPj4+IDI2KSkgfCAwO1xuICAgIHc3ICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gOCAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOCwgYmwwKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw4LCBiaDApO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg4LCBibDApKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg4LCBiaDApO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmwxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsMSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoMSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmgyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDIpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDIpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmwzKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmgzKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmw0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsNCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoNCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmg1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDUpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDUpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmw2KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmg2KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmw3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsNykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoNykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmg4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDgpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDgpKSB8IDA7XG4gICAgdmFyIHc4ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3OCA+Pj4gMjYpKSB8IDA7XG4gICAgdzggJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSA5ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDYpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmg3KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoOCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDkpKSB8IDA7XG4gICAgdmFyIHc5ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3OSA+Pj4gMjYpKSB8IDA7XG4gICAgdzkgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxMCAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmwxKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDEpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDEpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDEpO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDcsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNywgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg3LCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg3LCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw2LCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDYsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNiwgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNSwgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDUsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDQsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNCwgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg0LCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg0LCBiaDYpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwzLCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDMsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMywgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMywgYmg3KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMiwgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwyLCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDIsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDIsIGJoOCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDEsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMSwgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgxLCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgxLCBiaDkpKSB8IDA7XG4gICAgdmFyIHcxMCA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzEwID4+PiAyNikpIHwgMDtcbiAgICB3MTAgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxMSAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmwyKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDIpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDIpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDIpO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoMykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDcsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNywgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg3LCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg3LCBiaDQpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw2LCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDYsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNiwgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNSwgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDUsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDQsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNCwgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg0LCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg0LCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwzLCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDMsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMywgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMywgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMiwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwyLCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDIsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDIsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzExID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTEgPj4+IDI2KSkgfCAwO1xuICAgIHcxMSAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDEyICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDMpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoMyk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsMykpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoMyk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDYpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmg3KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoOCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDkpKSB8IDA7XG4gICAgdmFyIHcxMiA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzEyID4+PiAyNikpIHwgMDtcbiAgICB3MTIgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxMyAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmw0KTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDQpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDQpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDQpO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDcsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNywgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg3LCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg3LCBiaDYpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw2LCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDYsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNiwgYmg3KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNSwgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDUsIGJoOCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDQsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNCwgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg0LCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg0LCBiaDkpKSB8IDA7XG4gICAgdmFyIHcxMyA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzEzID4+PiAyNikpIHwgMDtcbiAgICB3MTMgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxNCAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmw1KTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDUpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDUpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDUpO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDcsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNywgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg3LCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg3LCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw2LCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDYsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNiwgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNSwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDUsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzE0ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTQgPj4+IDI2KSkgfCAwO1xuICAgIHcxNCAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDE1ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDYpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoNik7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsNikpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoNik7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmg3KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoOCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDkpKSB8IDA7XG4gICAgdmFyIHcxNSA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzE1ID4+PiAyNikpIHwgMDtcbiAgICB3MTUgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxNiAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmw3KTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDcpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDcpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDcpO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoOCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDcsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNywgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg3LCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg3LCBiaDkpKSB8IDA7XG4gICAgdmFyIHcxNiA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzE2ID4+PiAyNikpIHwgMDtcbiAgICB3MTYgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxNyAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmw4KTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDgpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDgpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDgpO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzE3ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTcgPj4+IDI2KSkgfCAwO1xuICAgIHcxNyAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDE4ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDkpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoOSk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsOSkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoOSk7XG4gICAgdmFyIHcxOCA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzE4ID4+PiAyNikpIHwgMDtcbiAgICB3MTggJj0gMHgzZmZmZmZmO1xuICAgIG9bMF0gPSB3MDtcbiAgICBvWzFdID0gdzE7XG4gICAgb1syXSA9IHcyO1xuICAgIG9bM10gPSB3MztcbiAgICBvWzRdID0gdzQ7XG4gICAgb1s1XSA9IHc1O1xuICAgIG9bNl0gPSB3NjtcbiAgICBvWzddID0gdzc7XG4gICAgb1s4XSA9IHc4O1xuICAgIG9bOV0gPSB3OTtcbiAgICBvWzEwXSA9IHcxMDtcbiAgICBvWzExXSA9IHcxMTtcbiAgICBvWzEyXSA9IHcxMjtcbiAgICBvWzEzXSA9IHcxMztcbiAgICBvWzE0XSA9IHcxNDtcbiAgICBvWzE1XSA9IHcxNTtcbiAgICBvWzE2XSA9IHcxNjtcbiAgICBvWzE3XSA9IHcxNztcbiAgICBvWzE4XSA9IHcxODtcbiAgICBpZiAoYyAhPT0gMCkge1xuICAgICAgb1sxOV0gPSBjO1xuICAgICAgb3V0Lmxlbmd0aCsrO1xuICAgIH1cbiAgICByZXR1cm4gb3V0O1xuICB9O1xuXG4gIC8vIFBvbHlmaWxsIGNvbWJcbiAgaWYgKCFNYXRoLmltdWwpIHtcbiAgICBjb21iMTBNdWxUbyA9IHNtYWxsTXVsVG87XG4gIH1cblxuICBmdW5jdGlvbiBiaWdNdWxUbyAoc2VsZiwgbnVtLCBvdXQpIHtcbiAgICBvdXQubmVnYXRpdmUgPSBudW0ubmVnYXRpdmUgXiBzZWxmLm5lZ2F0aXZlO1xuICAgIG91dC5sZW5ndGggPSBzZWxmLmxlbmd0aCArIG51bS5sZW5ndGg7XG5cbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIHZhciBobmNhcnJ5ID0gMDtcbiAgICBmb3IgKHZhciBrID0gMDsgayA8IG91dC5sZW5ndGggLSAxOyBrKyspIHtcbiAgICAgIC8vIFN1bSBhbGwgd29yZHMgd2l0aCB0aGUgc2FtZSBgaSArIGogPSBrYCBhbmQgYWNjdW11bGF0ZSBgbmNhcnJ5YCxcbiAgICAgIC8vIG5vdGUgdGhhdCBuY2FycnkgY291bGQgYmUgPj0gMHgzZmZmZmZmXG4gICAgICB2YXIgbmNhcnJ5ID0gaG5jYXJyeTtcbiAgICAgIGhuY2FycnkgPSAwO1xuICAgICAgdmFyIHJ3b3JkID0gY2FycnkgJiAweDNmZmZmZmY7XG4gICAgICB2YXIgbWF4SiA9IE1hdGgubWluKGssIG51bS5sZW5ndGggLSAxKTtcbiAgICAgIGZvciAodmFyIGogPSBNYXRoLm1heCgwLCBrIC0gc2VsZi5sZW5ndGggKyAxKTsgaiA8PSBtYXhKOyBqKyspIHtcbiAgICAgICAgdmFyIGkgPSBrIC0gajtcbiAgICAgICAgdmFyIGEgPSBzZWxmLndvcmRzW2ldIHwgMDtcbiAgICAgICAgdmFyIGIgPSBudW0ud29yZHNbal0gfCAwO1xuICAgICAgICB2YXIgciA9IGEgKiBiO1xuXG4gICAgICAgIHZhciBsbyA9IHIgJiAweDNmZmZmZmY7XG4gICAgICAgIG5jYXJyeSA9IChuY2FycnkgKyAoKHIgLyAweDQwMDAwMDApIHwgMCkpIHwgMDtcbiAgICAgICAgbG8gPSAobG8gKyByd29yZCkgfCAwO1xuICAgICAgICByd29yZCA9IGxvICYgMHgzZmZmZmZmO1xuICAgICAgICBuY2FycnkgPSAobmNhcnJ5ICsgKGxvID4+PiAyNikpIHwgMDtcblxuICAgICAgICBobmNhcnJ5ICs9IG5jYXJyeSA+Pj4gMjY7XG4gICAgICAgIG5jYXJyeSAmPSAweDNmZmZmZmY7XG4gICAgICB9XG4gICAgICBvdXQud29yZHNba10gPSByd29yZDtcbiAgICAgIGNhcnJ5ID0gbmNhcnJ5O1xuICAgICAgbmNhcnJ5ID0gaG5jYXJyeTtcbiAgICB9XG4gICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICBvdXQud29yZHNba10gPSBjYXJyeTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3V0Lmxlbmd0aC0tO1xuICAgIH1cblxuICAgIHJldHVybiBvdXQuc3RyaXAoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGp1bWJvTXVsVG8gKHNlbGYsIG51bSwgb3V0KSB7XG4gICAgdmFyIGZmdG0gPSBuZXcgRkZUTSgpO1xuICAgIHJldHVybiBmZnRtLm11bHAoc2VsZiwgbnVtLCBvdXQpO1xuICB9XG5cbiAgQk4ucHJvdG90eXBlLm11bFRvID0gZnVuY3Rpb24gbXVsVG8gKG51bSwgb3V0KSB7XG4gICAgdmFyIHJlcztcbiAgICB2YXIgbGVuID0gdGhpcy5sZW5ndGggKyBudW0ubGVuZ3RoO1xuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMTAgJiYgbnVtLmxlbmd0aCA9PT0gMTApIHtcbiAgICAgIHJlcyA9IGNvbWIxME11bFRvKHRoaXMsIG51bSwgb3V0KTtcbiAgICB9IGVsc2UgaWYgKGxlbiA8IDYzKSB7XG4gICAgICByZXMgPSBzbWFsbE11bFRvKHRoaXMsIG51bSwgb3V0KTtcbiAgICB9IGVsc2UgaWYgKGxlbiA8IDEwMjQpIHtcbiAgICAgIHJlcyA9IGJpZ011bFRvKHRoaXMsIG51bSwgb3V0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzID0ganVtYm9NdWxUbyh0aGlzLCBudW0sIG91dCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICAvLyBDb29sZXktVHVrZXkgYWxnb3JpdGhtIGZvciBGRlRcbiAgLy8gc2xpZ2h0bHkgcmV2aXNpdGVkIHRvIHJlbHkgb24gbG9vcGluZyBpbnN0ZWFkIG9mIHJlY3Vyc2lvblxuXG4gIGZ1bmN0aW9uIEZGVE0gKHgsIHkpIHtcbiAgICB0aGlzLnggPSB4O1xuICAgIHRoaXMueSA9IHk7XG4gIH1cblxuICBGRlRNLnByb3RvdHlwZS5tYWtlUkJUID0gZnVuY3Rpb24gbWFrZVJCVCAoTikge1xuICAgIHZhciB0ID0gbmV3IEFycmF5KE4pO1xuICAgIHZhciBsID0gQk4ucHJvdG90eXBlLl9jb3VudEJpdHMoTikgLSAxO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgTjsgaSsrKSB7XG4gICAgICB0W2ldID0gdGhpcy5yZXZCaW4oaSwgbCwgTik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHQ7XG4gIH07XG5cbiAgLy8gUmV0dXJucyBiaW5hcnktcmV2ZXJzZWQgcmVwcmVzZW50YXRpb24gb2YgYHhgXG4gIEZGVE0ucHJvdG90eXBlLnJldkJpbiA9IGZ1bmN0aW9uIHJldkJpbiAoeCwgbCwgTikge1xuICAgIGlmICh4ID09PSAwIHx8IHggPT09IE4gLSAxKSByZXR1cm4geDtcblxuICAgIHZhciByYiA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICAgIHJiIHw9ICh4ICYgMSkgPDwgKGwgLSBpIC0gMSk7XG4gICAgICB4ID4+PSAxO1xuICAgIH1cblxuICAgIHJldHVybiByYjtcbiAgfTtcblxuICAvLyBQZXJmb3JtcyBcInR3ZWVkbGluZ1wiIHBoYXNlLCB0aGVyZWZvcmUgJ2VtdWxhdGluZydcbiAgLy8gYmVoYXZpb3VyIG9mIHRoZSByZWN1cnNpdmUgYWxnb3JpdGhtXG4gIEZGVE0ucHJvdG90eXBlLnBlcm11dGUgPSBmdW5jdGlvbiBwZXJtdXRlIChyYnQsIHJ3cywgaXdzLCBydHdzLCBpdHdzLCBOKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBOOyBpKyspIHtcbiAgICAgIHJ0d3NbaV0gPSByd3NbcmJ0W2ldXTtcbiAgICAgIGl0d3NbaV0gPSBpd3NbcmJ0W2ldXTtcbiAgICB9XG4gIH07XG5cbiAgRkZUTS5wcm90b3R5cGUudHJhbnNmb3JtID0gZnVuY3Rpb24gdHJhbnNmb3JtIChyd3MsIGl3cywgcnR3cywgaXR3cywgTiwgcmJ0KSB7XG4gICAgdGhpcy5wZXJtdXRlKHJidCwgcndzLCBpd3MsIHJ0d3MsIGl0d3MsIE4pO1xuXG4gICAgZm9yICh2YXIgcyA9IDE7IHMgPCBOOyBzIDw8PSAxKSB7XG4gICAgICB2YXIgbCA9IHMgPDwgMTtcblxuICAgICAgdmFyIHJ0d2RmID0gTWF0aC5jb3MoMiAqIE1hdGguUEkgLyBsKTtcbiAgICAgIHZhciBpdHdkZiA9IE1hdGguc2luKDIgKiBNYXRoLlBJIC8gbCk7XG5cbiAgICAgIGZvciAodmFyIHAgPSAwOyBwIDwgTjsgcCArPSBsKSB7XG4gICAgICAgIHZhciBydHdkZl8gPSBydHdkZjtcbiAgICAgICAgdmFyIGl0d2RmXyA9IGl0d2RmO1xuXG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgczsgaisrKSB7XG4gICAgICAgICAgdmFyIHJlID0gcnR3c1twICsgal07XG4gICAgICAgICAgdmFyIGllID0gaXR3c1twICsgal07XG5cbiAgICAgICAgICB2YXIgcm8gPSBydHdzW3AgKyBqICsgc107XG4gICAgICAgICAgdmFyIGlvID0gaXR3c1twICsgaiArIHNdO1xuXG4gICAgICAgICAgdmFyIHJ4ID0gcnR3ZGZfICogcm8gLSBpdHdkZl8gKiBpbztcblxuICAgICAgICAgIGlvID0gcnR3ZGZfICogaW8gKyBpdHdkZl8gKiBybztcbiAgICAgICAgICBybyA9IHJ4O1xuXG4gICAgICAgICAgcnR3c1twICsgal0gPSByZSArIHJvO1xuICAgICAgICAgIGl0d3NbcCArIGpdID0gaWUgKyBpbztcblxuICAgICAgICAgIHJ0d3NbcCArIGogKyBzXSA9IHJlIC0gcm87XG4gICAgICAgICAgaXR3c1twICsgaiArIHNdID0gaWUgLSBpbztcblxuICAgICAgICAgIC8qIGpzaGludCBtYXhkZXB0aCA6IGZhbHNlICovXG4gICAgICAgICAgaWYgKGogIT09IGwpIHtcbiAgICAgICAgICAgIHJ4ID0gcnR3ZGYgKiBydHdkZl8gLSBpdHdkZiAqIGl0d2RmXztcblxuICAgICAgICAgICAgaXR3ZGZfID0gcnR3ZGYgKiBpdHdkZl8gKyBpdHdkZiAqIHJ0d2RmXztcbiAgICAgICAgICAgIHJ0d2RmXyA9IHJ4O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS5ndWVzc0xlbjEzYiA9IGZ1bmN0aW9uIGd1ZXNzTGVuMTNiIChuLCBtKSB7XG4gICAgdmFyIE4gPSBNYXRoLm1heChtLCBuKSB8IDE7XG4gICAgdmFyIG9kZCA9IE4gJiAxO1xuICAgIHZhciBpID0gMDtcbiAgICBmb3IgKE4gPSBOIC8gMiB8IDA7IE47IE4gPSBOID4+PiAxKSB7XG4gICAgICBpKys7XG4gICAgfVxuXG4gICAgcmV0dXJuIDEgPDwgaSArIDEgKyBvZGQ7XG4gIH07XG5cbiAgRkZUTS5wcm90b3R5cGUuY29uanVnYXRlID0gZnVuY3Rpb24gY29uanVnYXRlIChyd3MsIGl3cywgTikge1xuICAgIGlmIChOIDw9IDEpIHJldHVybjtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgTiAvIDI7IGkrKykge1xuICAgICAgdmFyIHQgPSByd3NbaV07XG5cbiAgICAgIHJ3c1tpXSA9IHJ3c1tOIC0gaSAtIDFdO1xuICAgICAgcndzW04gLSBpIC0gMV0gPSB0O1xuXG4gICAgICB0ID0gaXdzW2ldO1xuXG4gICAgICBpd3NbaV0gPSAtaXdzW04gLSBpIC0gMV07XG4gICAgICBpd3NbTiAtIGkgLSAxXSA9IC10O1xuICAgIH1cbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS5ub3JtYWxpemUxM2IgPSBmdW5jdGlvbiBub3JtYWxpemUxM2IgKHdzLCBOKSB7XG4gICAgdmFyIGNhcnJ5ID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IE4gLyAyOyBpKyspIHtcbiAgICAgIHZhciB3ID0gTWF0aC5yb3VuZCh3c1syICogaSArIDFdIC8gTikgKiAweDIwMDAgK1xuICAgICAgICBNYXRoLnJvdW5kKHdzWzIgKiBpXSAvIE4pICtcbiAgICAgICAgY2Fycnk7XG5cbiAgICAgIHdzW2ldID0gdyAmIDB4M2ZmZmZmZjtcblxuICAgICAgaWYgKHcgPCAweDQwMDAwMDApIHtcbiAgICAgICAgY2FycnkgPSAwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FycnkgPSB3IC8gMHg0MDAwMDAwIHwgMDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gd3M7XG4gIH07XG5cbiAgRkZUTS5wcm90b3R5cGUuY29udmVydDEzYiA9IGZ1bmN0aW9uIGNvbnZlcnQxM2IgKHdzLCBsZW4sIHJ3cywgTikge1xuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgY2FycnkgPSBjYXJyeSArICh3c1tpXSB8IDApO1xuXG4gICAgICByd3NbMiAqIGldID0gY2FycnkgJiAweDFmZmY7IGNhcnJ5ID0gY2FycnkgPj4+IDEzO1xuICAgICAgcndzWzIgKiBpICsgMV0gPSBjYXJyeSAmIDB4MWZmZjsgY2FycnkgPSBjYXJyeSA+Pj4gMTM7XG4gICAgfVxuXG4gICAgLy8gUGFkIHdpdGggemVyb2VzXG4gICAgZm9yIChpID0gMiAqIGxlbjsgaSA8IE47ICsraSkge1xuICAgICAgcndzW2ldID0gMDtcbiAgICB9XG5cbiAgICBhc3NlcnQoY2FycnkgPT09IDApO1xuICAgIGFzc2VydCgoY2FycnkgJiB+MHgxZmZmKSA9PT0gMCk7XG4gIH07XG5cbiAgRkZUTS5wcm90b3R5cGUuc3R1YiA9IGZ1bmN0aW9uIHN0dWIgKE4pIHtcbiAgICB2YXIgcGggPSBuZXcgQXJyYXkoTik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBOOyBpKyspIHtcbiAgICAgIHBoW2ldID0gMDtcbiAgICB9XG5cbiAgICByZXR1cm4gcGg7XG4gIH07XG5cbiAgRkZUTS5wcm90b3R5cGUubXVscCA9IGZ1bmN0aW9uIG11bHAgKHgsIHksIG91dCkge1xuICAgIHZhciBOID0gMiAqIHRoaXMuZ3Vlc3NMZW4xM2IoeC5sZW5ndGgsIHkubGVuZ3RoKTtcblxuICAgIHZhciByYnQgPSB0aGlzLm1ha2VSQlQoTik7XG5cbiAgICB2YXIgXyA9IHRoaXMuc3R1YihOKTtcblxuICAgIHZhciByd3MgPSBuZXcgQXJyYXkoTik7XG4gICAgdmFyIHJ3c3QgPSBuZXcgQXJyYXkoTik7XG4gICAgdmFyIGl3c3QgPSBuZXcgQXJyYXkoTik7XG5cbiAgICB2YXIgbnJ3cyA9IG5ldyBBcnJheShOKTtcbiAgICB2YXIgbnJ3c3QgPSBuZXcgQXJyYXkoTik7XG4gICAgdmFyIG5pd3N0ID0gbmV3IEFycmF5KE4pO1xuXG4gICAgdmFyIHJtd3MgPSBvdXQud29yZHM7XG4gICAgcm13cy5sZW5ndGggPSBOO1xuXG4gICAgdGhpcy5jb252ZXJ0MTNiKHgud29yZHMsIHgubGVuZ3RoLCByd3MsIE4pO1xuICAgIHRoaXMuY29udmVydDEzYih5LndvcmRzLCB5Lmxlbmd0aCwgbnJ3cywgTik7XG5cbiAgICB0aGlzLnRyYW5zZm9ybShyd3MsIF8sIHJ3c3QsIGl3c3QsIE4sIHJidCk7XG4gICAgdGhpcy50cmFuc2Zvcm0obnJ3cywgXywgbnJ3c3QsIG5pd3N0LCBOLCByYnQpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBOOyBpKyspIHtcbiAgICAgIHZhciByeCA9IHJ3c3RbaV0gKiBucndzdFtpXSAtIGl3c3RbaV0gKiBuaXdzdFtpXTtcbiAgICAgIGl3c3RbaV0gPSByd3N0W2ldICogbml3c3RbaV0gKyBpd3N0W2ldICogbnJ3c3RbaV07XG4gICAgICByd3N0W2ldID0gcng7XG4gICAgfVxuXG4gICAgdGhpcy5jb25qdWdhdGUocndzdCwgaXdzdCwgTik7XG4gICAgdGhpcy50cmFuc2Zvcm0ocndzdCwgaXdzdCwgcm13cywgXywgTiwgcmJ0KTtcbiAgICB0aGlzLmNvbmp1Z2F0ZShybXdzLCBfLCBOKTtcbiAgICB0aGlzLm5vcm1hbGl6ZTEzYihybXdzLCBOKTtcblxuICAgIG91dC5uZWdhdGl2ZSA9IHgubmVnYXRpdmUgXiB5Lm5lZ2F0aXZlO1xuICAgIG91dC5sZW5ndGggPSB4Lmxlbmd0aCArIHkubGVuZ3RoO1xuICAgIHJldHVybiBvdXQuc3RyaXAoKTtcbiAgfTtcblxuICAvLyBNdWx0aXBseSBgdGhpc2AgYnkgYG51bWBcbiAgQk4ucHJvdG90eXBlLm11bCA9IGZ1bmN0aW9uIG11bCAobnVtKSB7XG4gICAgdmFyIG91dCA9IG5ldyBCTihudWxsKTtcbiAgICBvdXQud29yZHMgPSBuZXcgQXJyYXkodGhpcy5sZW5ndGggKyBudW0ubGVuZ3RoKTtcbiAgICByZXR1cm4gdGhpcy5tdWxUbyhudW0sIG91dCk7XG4gIH07XG5cbiAgLy8gTXVsdGlwbHkgZW1wbG95aW5nIEZGVFxuICBCTi5wcm90b3R5cGUubXVsZiA9IGZ1bmN0aW9uIG11bGYgKG51bSkge1xuICAgIHZhciBvdXQgPSBuZXcgQk4obnVsbCk7XG4gICAgb3V0LndvcmRzID0gbmV3IEFycmF5KHRoaXMubGVuZ3RoICsgbnVtLmxlbmd0aCk7XG4gICAgcmV0dXJuIGp1bWJvTXVsVG8odGhpcywgbnVtLCBvdXQpO1xuICB9O1xuXG4gIC8vIEluLXBsYWNlIE11bHRpcGxpY2F0aW9uXG4gIEJOLnByb3RvdHlwZS5pbXVsID0gZnVuY3Rpb24gaW11bCAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5tdWxUbyhudW0sIHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pbXVsbiA9IGZ1bmN0aW9uIGltdWxuIChudW0pIHtcbiAgICBhc3NlcnQodHlwZW9mIG51bSA9PT0gJ251bWJlcicpO1xuICAgIGFzc2VydChudW0gPCAweDQwMDAwMDApO1xuXG4gICAgLy8gQ2FycnlcbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHcgPSAodGhpcy53b3Jkc1tpXSB8IDApICogbnVtO1xuICAgICAgdmFyIGxvID0gKHcgJiAweDNmZmZmZmYpICsgKGNhcnJ5ICYgMHgzZmZmZmZmKTtcbiAgICAgIGNhcnJ5ID4+PSAyNjtcbiAgICAgIGNhcnJ5ICs9ICh3IC8gMHg0MDAwMDAwKSB8IDA7XG4gICAgICAvLyBOT1RFOiBsbyBpcyAyN2JpdCBtYXhpbXVtXG4gICAgICBjYXJyeSArPSBsbyA+Pj4gMjY7XG4gICAgICB0aGlzLndvcmRzW2ldID0gbG8gJiAweDNmZmZmZmY7XG4gICAgfVxuXG4gICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gY2Fycnk7XG4gICAgICB0aGlzLmxlbmd0aCsrO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5tdWxuID0gZnVuY3Rpb24gbXVsbiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pbXVsbihudW0pO1xuICB9O1xuXG4gIC8vIGB0aGlzYCAqIGB0aGlzYFxuICBCTi5wcm90b3R5cGUuc3FyID0gZnVuY3Rpb24gc3FyICgpIHtcbiAgICByZXR1cm4gdGhpcy5tdWwodGhpcyk7XG4gIH07XG5cbiAgLy8gYHRoaXNgICogYHRoaXNgIGluLXBsYWNlXG4gIEJOLnByb3RvdHlwZS5pc3FyID0gZnVuY3Rpb24gaXNxciAoKSB7XG4gICAgcmV0dXJuIHRoaXMuaW11bCh0aGlzLmNsb25lKCkpO1xuICB9O1xuXG4gIC8vIE1hdGgucG93KGB0aGlzYCwgYG51bWApXG4gIEJOLnByb3RvdHlwZS5wb3cgPSBmdW5jdGlvbiBwb3cgKG51bSkge1xuICAgIHZhciB3ID0gdG9CaXRBcnJheShudW0pO1xuICAgIGlmICh3Lmxlbmd0aCA9PT0gMCkgcmV0dXJuIG5ldyBCTigxKTtcblxuICAgIC8vIFNraXAgbGVhZGluZyB6ZXJvZXNcbiAgICB2YXIgcmVzID0gdGhpcztcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHcubGVuZ3RoOyBpKyssIHJlcyA9IHJlcy5zcXIoKSkge1xuICAgICAgaWYgKHdbaV0gIT09IDApIGJyZWFrO1xuICAgIH1cblxuICAgIGlmICgrK2kgPCB3Lmxlbmd0aCkge1xuICAgICAgZm9yICh2YXIgcSA9IHJlcy5zcXIoKTsgaSA8IHcubGVuZ3RoOyBpKyssIHEgPSBxLnNxcigpKSB7XG4gICAgICAgIGlmICh3W2ldID09PSAwKSBjb250aW51ZTtcblxuICAgICAgICByZXMgPSByZXMubXVsKHEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgLy8gU2hpZnQtbGVmdCBpbi1wbGFjZVxuICBCTi5wcm90b3R5cGUuaXVzaGxuID0gZnVuY3Rpb24gaXVzaGxuIChiaXRzKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBiaXRzID09PSAnbnVtYmVyJyAmJiBiaXRzID49IDApO1xuICAgIHZhciByID0gYml0cyAlIDI2O1xuICAgIHZhciBzID0gKGJpdHMgLSByKSAvIDI2O1xuICAgIHZhciBjYXJyeU1hc2sgPSAoMHgzZmZmZmZmID4+PiAoMjYgLSByKSkgPDwgKDI2IC0gcik7XG4gICAgdmFyIGk7XG5cbiAgICBpZiAociAhPT0gMCkge1xuICAgICAgdmFyIGNhcnJ5ID0gMDtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIG5ld0NhcnJ5ID0gdGhpcy53b3Jkc1tpXSAmIGNhcnJ5TWFzaztcbiAgICAgICAgdmFyIGMgPSAoKHRoaXMud29yZHNbaV0gfCAwKSAtIG5ld0NhcnJ5KSA8PCByO1xuICAgICAgICB0aGlzLndvcmRzW2ldID0gYyB8IGNhcnJ5O1xuICAgICAgICBjYXJyeSA9IG5ld0NhcnJ5ID4+PiAoMjYgLSByKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGNhcnJ5KSB7XG4gICAgICAgIHRoaXMud29yZHNbaV0gPSBjYXJyeTtcbiAgICAgICAgdGhpcy5sZW5ndGgrKztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocyAhPT0gMCkge1xuICAgICAgZm9yIChpID0gdGhpcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICB0aGlzLndvcmRzW2kgKyBzXSA9IHRoaXMud29yZHNbaV07XG4gICAgICB9XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBzOyBpKyspIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpXSA9IDA7XG4gICAgICB9XG5cbiAgICAgIHRoaXMubGVuZ3RoICs9IHM7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaXNobG4gPSBmdW5jdGlvbiBpc2hsbiAoYml0cykge1xuICAgIC8vIFRPRE8oaW5kdXRueSk6IGltcGxlbWVudCBtZVxuICAgIGFzc2VydCh0aGlzLm5lZ2F0aXZlID09PSAwKTtcbiAgICByZXR1cm4gdGhpcy5pdXNobG4oYml0cyk7XG4gIH07XG5cbiAgLy8gU2hpZnQtcmlnaHQgaW4tcGxhY2VcbiAgLy8gTk9URTogYGhpbnRgIGlzIGEgbG93ZXN0IGJpdCBiZWZvcmUgdHJhaWxpbmcgemVyb2VzXG4gIC8vIE5PVEU6IGlmIGBleHRlbmRlZGAgaXMgcHJlc2VudCAtIGl0IHdpbGwgYmUgZmlsbGVkIHdpdGggZGVzdHJveWVkIGJpdHNcbiAgQk4ucHJvdG90eXBlLml1c2hybiA9IGZ1bmN0aW9uIGl1c2hybiAoYml0cywgaGludCwgZXh0ZW5kZWQpIHtcbiAgICBhc3NlcnQodHlwZW9mIGJpdHMgPT09ICdudW1iZXInICYmIGJpdHMgPj0gMCk7XG4gICAgdmFyIGg7XG4gICAgaWYgKGhpbnQpIHtcbiAgICAgIGggPSAoaGludCAtIChoaW50ICUgMjYpKSAvIDI2O1xuICAgIH0gZWxzZSB7XG4gICAgICBoID0gMDtcbiAgICB9XG5cbiAgICB2YXIgciA9IGJpdHMgJSAyNjtcbiAgICB2YXIgcyA9IE1hdGgubWluKChiaXRzIC0gcikgLyAyNiwgdGhpcy5sZW5ndGgpO1xuICAgIHZhciBtYXNrID0gMHgzZmZmZmZmIF4gKCgweDNmZmZmZmYgPj4+IHIpIDw8IHIpO1xuICAgIHZhciBtYXNrZWRXb3JkcyA9IGV4dGVuZGVkO1xuXG4gICAgaCAtPSBzO1xuICAgIGggPSBNYXRoLm1heCgwLCBoKTtcblxuICAgIC8vIEV4dGVuZGVkIG1vZGUsIGNvcHkgbWFza2VkIHBhcnRcbiAgICBpZiAobWFza2VkV29yZHMpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgczsgaSsrKSB7XG4gICAgICAgIG1hc2tlZFdvcmRzLndvcmRzW2ldID0gdGhpcy53b3Jkc1tpXTtcbiAgICAgIH1cbiAgICAgIG1hc2tlZFdvcmRzLmxlbmd0aCA9IHM7XG4gICAgfVxuXG4gICAgaWYgKHMgPT09IDApIHtcbiAgICAgIC8vIE5vLW9wLCB3ZSBzaG91bGQgbm90IG1vdmUgYW55dGhpbmcgYXQgYWxsXG4gICAgfSBlbHNlIGlmICh0aGlzLmxlbmd0aCA+IHMpIHtcbiAgICAgIHRoaXMubGVuZ3RoIC09IHM7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB0aGlzLndvcmRzW2ldID0gdGhpcy53b3Jkc1tpICsgc107XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMud29yZHNbMF0gPSAwO1xuICAgICAgdGhpcy5sZW5ndGggPSAxO1xuICAgIH1cblxuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yIChpID0gdGhpcy5sZW5ndGggLSAxOyBpID49IDAgJiYgKGNhcnJ5ICE9PSAwIHx8IGkgPj0gaCk7IGktLSkge1xuICAgICAgdmFyIHdvcmQgPSB0aGlzLndvcmRzW2ldIHwgMDtcbiAgICAgIHRoaXMud29yZHNbaV0gPSAoY2FycnkgPDwgKDI2IC0gcikpIHwgKHdvcmQgPj4+IHIpO1xuICAgICAgY2FycnkgPSB3b3JkICYgbWFzaztcbiAgICB9XG5cbiAgICAvLyBQdXNoIGNhcnJpZWQgYml0cyBhcyBhIG1hc2tcbiAgICBpZiAobWFza2VkV29yZHMgJiYgY2FycnkgIT09IDApIHtcbiAgICAgIG1hc2tlZFdvcmRzLndvcmRzW21hc2tlZFdvcmRzLmxlbmd0aCsrXSA9IGNhcnJ5O1xuICAgIH1cblxuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhpcy53b3Jkc1swXSA9IDA7XG4gICAgICB0aGlzLmxlbmd0aCA9IDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaXNocm4gPSBmdW5jdGlvbiBpc2hybiAoYml0cywgaGludCwgZXh0ZW5kZWQpIHtcbiAgICAvLyBUT0RPKGluZHV0bnkpOiBpbXBsZW1lbnQgbWVcbiAgICBhc3NlcnQodGhpcy5uZWdhdGl2ZSA9PT0gMCk7XG4gICAgcmV0dXJuIHRoaXMuaXVzaHJuKGJpdHMsIGhpbnQsIGV4dGVuZGVkKTtcbiAgfTtcblxuICAvLyBTaGlmdC1sZWZ0XG4gIEJOLnByb3RvdHlwZS5zaGxuID0gZnVuY3Rpb24gc2hsbiAoYml0cykge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaXNobG4oYml0cyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnVzaGxuID0gZnVuY3Rpb24gdXNobG4gKGJpdHMpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLml1c2hsbihiaXRzKTtcbiAgfTtcblxuICAvLyBTaGlmdC1yaWdodFxuICBCTi5wcm90b3R5cGUuc2hybiA9IGZ1bmN0aW9uIHNocm4gKGJpdHMpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlzaHJuKGJpdHMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS51c2hybiA9IGZ1bmN0aW9uIHVzaHJuIChiaXRzKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pdXNocm4oYml0cyk7XG4gIH07XG5cbiAgLy8gVGVzdCBpZiBuIGJpdCBpcyBzZXRcbiAgQk4ucHJvdG90eXBlLnRlc3RuID0gZnVuY3Rpb24gdGVzdG4gKGJpdCkge1xuICAgIGFzc2VydCh0eXBlb2YgYml0ID09PSAnbnVtYmVyJyAmJiBiaXQgPj0gMCk7XG4gICAgdmFyIHIgPSBiaXQgJSAyNjtcbiAgICB2YXIgcyA9IChiaXQgLSByKSAvIDI2O1xuICAgIHZhciBxID0gMSA8PCByO1xuXG4gICAgLy8gRmFzdCBjYXNlOiBiaXQgaXMgbXVjaCBoaWdoZXIgdGhhbiBhbGwgZXhpc3Rpbmcgd29yZHNcbiAgICBpZiAodGhpcy5sZW5ndGggPD0gcykgcmV0dXJuIGZhbHNlO1xuXG4gICAgLy8gQ2hlY2sgYml0IGFuZCByZXR1cm5cbiAgICB2YXIgdyA9IHRoaXMud29yZHNbc107XG5cbiAgICByZXR1cm4gISEodyAmIHEpO1xuICB9O1xuXG4gIC8vIFJldHVybiBvbmx5IGxvd2VycyBiaXRzIG9mIG51bWJlciAoaW4tcGxhY2UpXG4gIEJOLnByb3RvdHlwZS5pbWFza24gPSBmdW5jdGlvbiBpbWFza24gKGJpdHMpIHtcbiAgICBhc3NlcnQodHlwZW9mIGJpdHMgPT09ICdudW1iZXInICYmIGJpdHMgPj0gMCk7XG4gICAgdmFyIHIgPSBiaXRzICUgMjY7XG4gICAgdmFyIHMgPSAoYml0cyAtIHIpIC8gMjY7XG5cbiAgICBhc3NlcnQodGhpcy5uZWdhdGl2ZSA9PT0gMCwgJ2ltYXNrbiB3b3JrcyBvbmx5IHdpdGggcG9zaXRpdmUgbnVtYmVycycpO1xuXG4gICAgaWYgKHRoaXMubGVuZ3RoIDw9IHMpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGlmIChyICE9PSAwKSB7XG4gICAgICBzKys7XG4gICAgfVxuICAgIHRoaXMubGVuZ3RoID0gTWF0aC5taW4ocywgdGhpcy5sZW5ndGgpO1xuXG4gICAgaWYgKHIgIT09IDApIHtcbiAgICAgIHZhciBtYXNrID0gMHgzZmZmZmZmIF4gKCgweDNmZmZmZmYgPj4+IHIpIDw8IHIpO1xuICAgICAgdGhpcy53b3Jkc1t0aGlzLmxlbmd0aCAtIDFdICY9IG1hc2s7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICAvLyBSZXR1cm4gb25seSBsb3dlcnMgYml0cyBvZiBudW1iZXJcbiAgQk4ucHJvdG90eXBlLm1hc2tuID0gZnVuY3Rpb24gbWFza24gKGJpdHMpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmltYXNrbihiaXRzKTtcbiAgfTtcblxuICAvLyBBZGQgcGxhaW4gbnVtYmVyIGBudW1gIHRvIGB0aGlzYFxuICBCTi5wcm90b3R5cGUuaWFkZG4gPSBmdW5jdGlvbiBpYWRkbiAobnVtKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBudW0gPT09ICdudW1iZXInKTtcbiAgICBhc3NlcnQobnVtIDwgMHg0MDAwMDAwKTtcbiAgICBpZiAobnVtIDwgMCkgcmV0dXJuIHRoaXMuaXN1Ym4oLW51bSk7XG5cbiAgICAvLyBQb3NzaWJsZSBzaWduIGNoYW5nZVxuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICBpZiAodGhpcy5sZW5ndGggPT09IDEgJiYgKHRoaXMud29yZHNbMF0gfCAwKSA8IG51bSkge1xuICAgICAgICB0aGlzLndvcmRzWzBdID0gbnVtIC0gKHRoaXMud29yZHNbMF0gfCAwKTtcbiAgICAgICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICAgIHRoaXMuaXN1Ym4obnVtKTtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gQWRkIHdpdGhvdXQgY2hlY2tzXG4gICAgcmV0dXJuIHRoaXMuX2lhZGRuKG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl9pYWRkbiA9IGZ1bmN0aW9uIF9pYWRkbiAobnVtKSB7XG4gICAgdGhpcy53b3Jkc1swXSArPSBudW07XG5cbiAgICAvLyBDYXJyeVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGggJiYgdGhpcy53b3Jkc1tpXSA+PSAweDQwMDAwMDA7IGkrKykge1xuICAgICAgdGhpcy53b3Jkc1tpXSAtPSAweDQwMDAwMDA7XG4gICAgICBpZiAoaSA9PT0gdGhpcy5sZW5ndGggLSAxKSB7XG4gICAgICAgIHRoaXMud29yZHNbaSArIDFdID0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMud29yZHNbaSArIDFdKys7XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMubGVuZ3RoID0gTWF0aC5tYXgodGhpcy5sZW5ndGgsIGkgKyAxKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIC8vIFN1YnRyYWN0IHBsYWluIG51bWJlciBgbnVtYCBmcm9tIGB0aGlzYFxuICBCTi5wcm90b3R5cGUuaXN1Ym4gPSBmdW5jdGlvbiBpc3VibiAobnVtKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBudW0gPT09ICdudW1iZXInKTtcbiAgICBhc3NlcnQobnVtIDwgMHg0MDAwMDAwKTtcbiAgICBpZiAobnVtIDwgMCkgcmV0dXJuIHRoaXMuaWFkZG4oLW51bSk7XG5cbiAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgICB0aGlzLmlhZGRuKG51bSk7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHRoaXMud29yZHNbMF0gLT0gbnVtO1xuXG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAxICYmIHRoaXMud29yZHNbMF0gPCAwKSB7XG4gICAgICB0aGlzLndvcmRzWzBdID0gLXRoaXMud29yZHNbMF07XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gQ2FycnlcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGggJiYgdGhpcy53b3Jkc1tpXSA8IDA7IGkrKykge1xuICAgICAgICB0aGlzLndvcmRzW2ldICs9IDB4NDAwMDAwMDtcbiAgICAgICAgdGhpcy53b3Jkc1tpICsgMV0gLT0gMTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5hZGRuID0gZnVuY3Rpb24gYWRkbiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pYWRkbihudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5zdWJuID0gZnVuY3Rpb24gc3VibiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pc3VibihudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pYWJzID0gZnVuY3Rpb24gaWFicyAoKSB7XG4gICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuYWJzID0gZnVuY3Rpb24gYWJzICgpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlhYnMoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX2lzaGxuc3VibXVsID0gZnVuY3Rpb24gX2lzaGxuc3VibXVsIChudW0sIG11bCwgc2hpZnQpIHtcbiAgICB2YXIgbGVuID0gbnVtLmxlbmd0aCArIHNoaWZ0O1xuICAgIHZhciBpO1xuXG4gICAgdGhpcy5fZXhwYW5kKGxlbik7XG5cbiAgICB2YXIgdztcbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAoaSA9IDA7IGkgPCBudW0ubGVuZ3RoOyBpKyspIHtcbiAgICAgIHcgPSAodGhpcy53b3Jkc1tpICsgc2hpZnRdIHwgMCkgKyBjYXJyeTtcbiAgICAgIHZhciByaWdodCA9IChudW0ud29yZHNbaV0gfCAwKSAqIG11bDtcbiAgICAgIHcgLT0gcmlnaHQgJiAweDNmZmZmZmY7XG4gICAgICBjYXJyeSA9ICh3ID4+IDI2KSAtICgocmlnaHQgLyAweDQwMDAwMDApIHwgMCk7XG4gICAgICB0aGlzLndvcmRzW2kgKyBzaGlmdF0gPSB3ICYgMHgzZmZmZmZmO1xuICAgIH1cbiAgICBmb3IgKDsgaSA8IHRoaXMubGVuZ3RoIC0gc2hpZnQ7IGkrKykge1xuICAgICAgdyA9ICh0aGlzLndvcmRzW2kgKyBzaGlmdF0gfCAwKSArIGNhcnJ5O1xuICAgICAgY2FycnkgPSB3ID4+IDI2O1xuICAgICAgdGhpcy53b3Jkc1tpICsgc2hpZnRdID0gdyAmIDB4M2ZmZmZmZjtcbiAgICB9XG5cbiAgICBpZiAoY2FycnkgPT09IDApIHJldHVybiB0aGlzLnN0cmlwKCk7XG5cbiAgICAvLyBTdWJ0cmFjdGlvbiBvdmVyZmxvd1xuICAgIGFzc2VydChjYXJyeSA9PT0gLTEpO1xuICAgIGNhcnJ5ID0gMDtcbiAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgdyA9IC0odGhpcy53b3Jkc1tpXSB8IDApICsgY2Fycnk7XG4gICAgICBjYXJyeSA9IHcgPj4gMjY7XG4gICAgICB0aGlzLndvcmRzW2ldID0gdyAmIDB4M2ZmZmZmZjtcbiAgICB9XG4gICAgdGhpcy5uZWdhdGl2ZSA9IDE7XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5fd29yZERpdiA9IGZ1bmN0aW9uIF93b3JkRGl2IChudW0sIG1vZGUpIHtcbiAgICB2YXIgc2hpZnQgPSB0aGlzLmxlbmd0aCAtIG51bS5sZW5ndGg7XG5cbiAgICB2YXIgYSA9IHRoaXMuY2xvbmUoKTtcbiAgICB2YXIgYiA9IG51bTtcblxuICAgIC8vIE5vcm1hbGl6ZVxuICAgIHZhciBiaGkgPSBiLndvcmRzW2IubGVuZ3RoIC0gMV0gfCAwO1xuICAgIHZhciBiaGlCaXRzID0gdGhpcy5fY291bnRCaXRzKGJoaSk7XG4gICAgc2hpZnQgPSAyNiAtIGJoaUJpdHM7XG4gICAgaWYgKHNoaWZ0ICE9PSAwKSB7XG4gICAgICBiID0gYi51c2hsbihzaGlmdCk7XG4gICAgICBhLml1c2hsbihzaGlmdCk7XG4gICAgICBiaGkgPSBiLndvcmRzW2IubGVuZ3RoIC0gMV0gfCAwO1xuICAgIH1cblxuICAgIC8vIEluaXRpYWxpemUgcXVvdGllbnRcbiAgICB2YXIgbSA9IGEubGVuZ3RoIC0gYi5sZW5ndGg7XG4gICAgdmFyIHE7XG5cbiAgICBpZiAobW9kZSAhPT0gJ21vZCcpIHtcbiAgICAgIHEgPSBuZXcgQk4obnVsbCk7XG4gICAgICBxLmxlbmd0aCA9IG0gKyAxO1xuICAgICAgcS53b3JkcyA9IG5ldyBBcnJheShxLmxlbmd0aCk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcS53b3Jkc1tpXSA9IDA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGRpZmYgPSBhLmNsb25lKCkuX2lzaGxuc3VibXVsKGIsIDEsIG0pO1xuICAgIGlmIChkaWZmLm5lZ2F0aXZlID09PSAwKSB7XG4gICAgICBhID0gZGlmZjtcbiAgICAgIGlmIChxKSB7XG4gICAgICAgIHEud29yZHNbbV0gPSAxO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIGogPSBtIC0gMTsgaiA+PSAwOyBqLS0pIHtcbiAgICAgIHZhciBxaiA9IChhLndvcmRzW2IubGVuZ3RoICsgal0gfCAwKSAqIDB4NDAwMDAwMCArXG4gICAgICAgIChhLndvcmRzW2IubGVuZ3RoICsgaiAtIDFdIHwgMCk7XG5cbiAgICAgIC8vIE5PVEU6IChxaiAvIGJoaSkgaXMgKDB4M2ZmZmZmZiAqIDB4NDAwMDAwMCArIDB4M2ZmZmZmZikgLyAweDIwMDAwMDAgbWF4XG4gICAgICAvLyAoMHg3ZmZmZmZmKVxuICAgICAgcWogPSBNYXRoLm1pbigocWogLyBiaGkpIHwgMCwgMHgzZmZmZmZmKTtcblxuICAgICAgYS5faXNobG5zdWJtdWwoYiwgcWosIGopO1xuICAgICAgd2hpbGUgKGEubmVnYXRpdmUgIT09IDApIHtcbiAgICAgICAgcWotLTtcbiAgICAgICAgYS5uZWdhdGl2ZSA9IDA7XG4gICAgICAgIGEuX2lzaGxuc3VibXVsKGIsIDEsIGopO1xuICAgICAgICBpZiAoIWEuaXNaZXJvKCkpIHtcbiAgICAgICAgICBhLm5lZ2F0aXZlIF49IDE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChxKSB7XG4gICAgICAgIHEud29yZHNbal0gPSBxajtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHEpIHtcbiAgICAgIHEuc3RyaXAoKTtcbiAgICB9XG4gICAgYS5zdHJpcCgpO1xuXG4gICAgLy8gRGVub3JtYWxpemVcbiAgICBpZiAobW9kZSAhPT0gJ2RpdicgJiYgc2hpZnQgIT09IDApIHtcbiAgICAgIGEuaXVzaHJuKHNoaWZ0KTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgZGl2OiBxIHx8IG51bGwsXG4gICAgICBtb2Q6IGFcbiAgICB9O1xuICB9O1xuXG4gIC8vIE5PVEU6IDEpIGBtb2RlYCBjYW4gYmUgc2V0IHRvIGBtb2RgIHRvIHJlcXVlc3QgbW9kIG9ubHksXG4gIC8vICAgICAgIHRvIGBkaXZgIHRvIHJlcXVlc3QgZGl2IG9ubHksIG9yIGJlIGFic2VudCB0b1xuICAvLyAgICAgICByZXF1ZXN0IGJvdGggZGl2ICYgbW9kXG4gIC8vICAgICAgIDIpIGBwb3NpdGl2ZWAgaXMgdHJ1ZSBpZiB1bnNpZ25lZCBtb2QgaXMgcmVxdWVzdGVkXG4gIEJOLnByb3RvdHlwZS5kaXZtb2QgPSBmdW5jdGlvbiBkaXZtb2QgKG51bSwgbW9kZSwgcG9zaXRpdmUpIHtcbiAgICBhc3NlcnQoIW51bS5pc1plcm8oKSk7XG5cbiAgICBpZiAodGhpcy5pc1plcm8oKSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGl2OiBuZXcgQk4oMCksXG4gICAgICAgIG1vZDogbmV3IEJOKDApXG4gICAgICB9O1xuICAgIH1cblxuICAgIHZhciBkaXYsIG1vZCwgcmVzO1xuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwICYmIG51bS5uZWdhdGl2ZSA9PT0gMCkge1xuICAgICAgcmVzID0gdGhpcy5uZWcoKS5kaXZtb2QobnVtLCBtb2RlKTtcblxuICAgICAgaWYgKG1vZGUgIT09ICdtb2QnKSB7XG4gICAgICAgIGRpdiA9IHJlcy5kaXYubmVnKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChtb2RlICE9PSAnZGl2Jykge1xuICAgICAgICBtb2QgPSByZXMubW9kLm5lZygpO1xuICAgICAgICBpZiAocG9zaXRpdmUgJiYgbW9kLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICAgICAgbW9kLmlhZGQobnVtKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBkaXY6IGRpdixcbiAgICAgICAgbW9kOiBtb2RcbiAgICAgIH07XG4gICAgfVxuXG4gICAgaWYgKHRoaXMubmVnYXRpdmUgPT09IDAgJiYgbnVtLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICByZXMgPSB0aGlzLmRpdm1vZChudW0ubmVnKCksIG1vZGUpO1xuXG4gICAgICBpZiAobW9kZSAhPT0gJ21vZCcpIHtcbiAgICAgICAgZGl2ID0gcmVzLmRpdi5uZWcoKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGl2OiBkaXYsXG4gICAgICAgIG1vZDogcmVzLm1vZFxuICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAoKHRoaXMubmVnYXRpdmUgJiBudW0ubmVnYXRpdmUpICE9PSAwKSB7XG4gICAgICByZXMgPSB0aGlzLm5lZygpLmRpdm1vZChudW0ubmVnKCksIG1vZGUpO1xuXG4gICAgICBpZiAobW9kZSAhPT0gJ2RpdicpIHtcbiAgICAgICAgbW9kID0gcmVzLm1vZC5uZWcoKTtcbiAgICAgICAgaWYgKHBvc2l0aXZlICYmIG1vZC5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgICAgIG1vZC5pc3ViKG51bSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGl2OiByZXMuZGl2LFxuICAgICAgICBtb2Q6IG1vZFxuICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBCb3RoIG51bWJlcnMgYXJlIHBvc2l0aXZlIGF0IHRoaXMgcG9pbnRcblxuICAgIC8vIFN0cmlwIGJvdGggbnVtYmVycyB0byBhcHByb3hpbWF0ZSBzaGlmdCB2YWx1ZVxuICAgIGlmIChudW0ubGVuZ3RoID4gdGhpcy5sZW5ndGggfHwgdGhpcy5jbXAobnVtKSA8IDApIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRpdjogbmV3IEJOKDApLFxuICAgICAgICBtb2Q6IHRoaXNcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gVmVyeSBzaG9ydCByZWR1Y3Rpb25cbiAgICBpZiAobnVtLmxlbmd0aCA9PT0gMSkge1xuICAgICAgaWYgKG1vZGUgPT09ICdkaXYnKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgZGl2OiB0aGlzLmRpdm4obnVtLndvcmRzWzBdKSxcbiAgICAgICAgICBtb2Q6IG51bGxcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgaWYgKG1vZGUgPT09ICdtb2QnKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgZGl2OiBudWxsLFxuICAgICAgICAgIG1vZDogbmV3IEJOKHRoaXMubW9kbihudW0ud29yZHNbMF0pKVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBkaXY6IHRoaXMuZGl2bihudW0ud29yZHNbMF0pLFxuICAgICAgICBtb2Q6IG5ldyBCTih0aGlzLm1vZG4obnVtLndvcmRzWzBdKSlcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX3dvcmREaXYobnVtLCBtb2RlKTtcbiAgfTtcblxuICAvLyBGaW5kIGB0aGlzYCAvIGBudW1gXG4gIEJOLnByb3RvdHlwZS5kaXYgPSBmdW5jdGlvbiBkaXYgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmRpdm1vZChudW0sICdkaXYnLCBmYWxzZSkuZGl2O1xuICB9O1xuXG4gIC8vIEZpbmQgYHRoaXNgICUgYG51bWBcbiAgQk4ucHJvdG90eXBlLm1vZCA9IGZ1bmN0aW9uIG1vZCAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuZGl2bW9kKG51bSwgJ21vZCcsIGZhbHNlKS5tb2Q7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnVtb2QgPSBmdW5jdGlvbiB1bW9kIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5kaXZtb2QobnVtLCAnbW9kJywgdHJ1ZSkubW9kO1xuICB9O1xuXG4gIC8vIEZpbmQgUm91bmQoYHRoaXNgIC8gYG51bWApXG4gIEJOLnByb3RvdHlwZS5kaXZSb3VuZCA9IGZ1bmN0aW9uIGRpdlJvdW5kIChudW0pIHtcbiAgICB2YXIgZG0gPSB0aGlzLmRpdm1vZChudW0pO1xuXG4gICAgLy8gRmFzdCBjYXNlIC0gZXhhY3QgZGl2aXNpb25cbiAgICBpZiAoZG0ubW9kLmlzWmVybygpKSByZXR1cm4gZG0uZGl2O1xuXG4gICAgdmFyIG1vZCA9IGRtLmRpdi5uZWdhdGl2ZSAhPT0gMCA/IGRtLm1vZC5pc3ViKG51bSkgOiBkbS5tb2Q7XG5cbiAgICB2YXIgaGFsZiA9IG51bS51c2hybigxKTtcbiAgICB2YXIgcjIgPSBudW0uYW5kbG4oMSk7XG4gICAgdmFyIGNtcCA9IG1vZC5jbXAoaGFsZik7XG5cbiAgICAvLyBSb3VuZCBkb3duXG4gICAgaWYgKGNtcCA8IDAgfHwgcjIgPT09IDEgJiYgY21wID09PSAwKSByZXR1cm4gZG0uZGl2O1xuXG4gICAgLy8gUm91bmQgdXBcbiAgICByZXR1cm4gZG0uZGl2Lm5lZ2F0aXZlICE9PSAwID8gZG0uZGl2LmlzdWJuKDEpIDogZG0uZGl2LmlhZGRuKDEpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5tb2RuID0gZnVuY3Rpb24gbW9kbiAobnVtKSB7XG4gICAgYXNzZXJ0KG51bSA8PSAweDNmZmZmZmYpO1xuICAgIHZhciBwID0gKDEgPDwgMjYpICUgbnVtO1xuXG4gICAgdmFyIGFjYyA9IDA7XG4gICAgZm9yICh2YXIgaSA9IHRoaXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIGFjYyA9IChwICogYWNjICsgKHRoaXMud29yZHNbaV0gfCAwKSkgJSBudW07XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjYztcbiAgfTtcblxuICAvLyBJbi1wbGFjZSBkaXZpc2lvbiBieSBudW1iZXJcbiAgQk4ucHJvdG90eXBlLmlkaXZuID0gZnVuY3Rpb24gaWRpdm4gKG51bSkge1xuICAgIGFzc2VydChudW0gPD0gMHgzZmZmZmZmKTtcblxuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yICh2YXIgaSA9IHRoaXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHZhciB3ID0gKHRoaXMud29yZHNbaV0gfCAwKSArIGNhcnJ5ICogMHg0MDAwMDAwO1xuICAgICAgdGhpcy53b3Jkc1tpXSA9ICh3IC8gbnVtKSB8IDA7XG4gICAgICBjYXJyeSA9IHcgJSBudW07XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZGl2biA9IGZ1bmN0aW9uIGRpdm4gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaWRpdm4obnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZWdjZCA9IGZ1bmN0aW9uIGVnY2QgKHApIHtcbiAgICBhc3NlcnQocC5uZWdhdGl2ZSA9PT0gMCk7XG4gICAgYXNzZXJ0KCFwLmlzWmVybygpKTtcblxuICAgIHZhciB4ID0gdGhpcztcbiAgICB2YXIgeSA9IHAuY2xvbmUoKTtcblxuICAgIGlmICh4Lm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICB4ID0geC51bW9kKHApO1xuICAgIH0gZWxzZSB7XG4gICAgICB4ID0geC5jbG9uZSgpO1xuICAgIH1cblxuICAgIC8vIEEgKiB4ICsgQiAqIHkgPSB4XG4gICAgdmFyIEEgPSBuZXcgQk4oMSk7XG4gICAgdmFyIEIgPSBuZXcgQk4oMCk7XG5cbiAgICAvLyBDICogeCArIEQgKiB5ID0geVxuICAgIHZhciBDID0gbmV3IEJOKDApO1xuICAgIHZhciBEID0gbmV3IEJOKDEpO1xuXG4gICAgdmFyIGcgPSAwO1xuXG4gICAgd2hpbGUgKHguaXNFdmVuKCkgJiYgeS5pc0V2ZW4oKSkge1xuICAgICAgeC5pdXNocm4oMSk7XG4gICAgICB5Lml1c2hybigxKTtcbiAgICAgICsrZztcbiAgICB9XG5cbiAgICB2YXIgeXAgPSB5LmNsb25lKCk7XG4gICAgdmFyIHhwID0geC5jbG9uZSgpO1xuXG4gICAgd2hpbGUgKCF4LmlzWmVybygpKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgaW0gPSAxOyAoeC53b3Jkc1swXSAmIGltKSA9PT0gMCAmJiBpIDwgMjY7ICsraSwgaW0gPDw9IDEpO1xuICAgICAgaWYgKGkgPiAwKSB7XG4gICAgICAgIHguaXVzaHJuKGkpO1xuICAgICAgICB3aGlsZSAoaS0tID4gMCkge1xuICAgICAgICAgIGlmIChBLmlzT2RkKCkgfHwgQi5pc09kZCgpKSB7XG4gICAgICAgICAgICBBLmlhZGQoeXApO1xuICAgICAgICAgICAgQi5pc3ViKHhwKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBBLml1c2hybigxKTtcbiAgICAgICAgICBCLml1c2hybigxKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBqID0gMCwgam0gPSAxOyAoeS53b3Jkc1swXSAmIGptKSA9PT0gMCAmJiBqIDwgMjY7ICsraiwgam0gPDw9IDEpO1xuICAgICAgaWYgKGogPiAwKSB7XG4gICAgICAgIHkuaXVzaHJuKGopO1xuICAgICAgICB3aGlsZSAoai0tID4gMCkge1xuICAgICAgICAgIGlmIChDLmlzT2RkKCkgfHwgRC5pc09kZCgpKSB7XG4gICAgICAgICAgICBDLmlhZGQoeXApO1xuICAgICAgICAgICAgRC5pc3ViKHhwKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBDLml1c2hybigxKTtcbiAgICAgICAgICBELml1c2hybigxKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoeC5jbXAoeSkgPj0gMCkge1xuICAgICAgICB4LmlzdWIoeSk7XG4gICAgICAgIEEuaXN1YihDKTtcbiAgICAgICAgQi5pc3ViKEQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgeS5pc3ViKHgpO1xuICAgICAgICBDLmlzdWIoQSk7XG4gICAgICAgIEQuaXN1YihCKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgYTogQyxcbiAgICAgIGI6IEQsXG4gICAgICBnY2Q6IHkuaXVzaGxuKGcpXG4gICAgfTtcbiAgfTtcblxuICAvLyBUaGlzIGlzIHJlZHVjZWQgaW5jYXJuYXRpb24gb2YgdGhlIGJpbmFyeSBFRUFcbiAgLy8gYWJvdmUsIGRlc2lnbmF0ZWQgdG8gaW52ZXJ0IG1lbWJlcnMgb2YgdGhlXG4gIC8vIF9wcmltZV8gZmllbGRzIEYocCkgYXQgYSBtYXhpbWFsIHNwZWVkXG4gIEJOLnByb3RvdHlwZS5faW52bXAgPSBmdW5jdGlvbiBfaW52bXAgKHApIHtcbiAgICBhc3NlcnQocC5uZWdhdGl2ZSA9PT0gMCk7XG4gICAgYXNzZXJ0KCFwLmlzWmVybygpKTtcblxuICAgIHZhciBhID0gdGhpcztcbiAgICB2YXIgYiA9IHAuY2xvbmUoKTtcblxuICAgIGlmIChhLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICBhID0gYS51bW9kKHApO1xuICAgIH0gZWxzZSB7XG4gICAgICBhID0gYS5jbG9uZSgpO1xuICAgIH1cblxuICAgIHZhciB4MSA9IG5ldyBCTigxKTtcbiAgICB2YXIgeDIgPSBuZXcgQk4oMCk7XG5cbiAgICB2YXIgZGVsdGEgPSBiLmNsb25lKCk7XG5cbiAgICB3aGlsZSAoYS5jbXBuKDEpID4gMCAmJiBiLmNtcG4oMSkgPiAwKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgaW0gPSAxOyAoYS53b3Jkc1swXSAmIGltKSA9PT0gMCAmJiBpIDwgMjY7ICsraSwgaW0gPDw9IDEpO1xuICAgICAgaWYgKGkgPiAwKSB7XG4gICAgICAgIGEuaXVzaHJuKGkpO1xuICAgICAgICB3aGlsZSAoaS0tID4gMCkge1xuICAgICAgICAgIGlmICh4MS5pc09kZCgpKSB7XG4gICAgICAgICAgICB4MS5pYWRkKGRlbHRhKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB4MS5pdXNocm4oMSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgaiA9IDAsIGptID0gMTsgKGIud29yZHNbMF0gJiBqbSkgPT09IDAgJiYgaiA8IDI2OyArK2osIGptIDw8PSAxKTtcbiAgICAgIGlmIChqID4gMCkge1xuICAgICAgICBiLml1c2hybihqKTtcbiAgICAgICAgd2hpbGUgKGotLSA+IDApIHtcbiAgICAgICAgICBpZiAoeDIuaXNPZGQoKSkge1xuICAgICAgICAgICAgeDIuaWFkZChkZWx0YSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgeDIuaXVzaHJuKDEpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChhLmNtcChiKSA+PSAwKSB7XG4gICAgICAgIGEuaXN1YihiKTtcbiAgICAgICAgeDEuaXN1Yih4Mik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBiLmlzdWIoYSk7XG4gICAgICAgIHgyLmlzdWIoeDEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciByZXM7XG4gICAgaWYgKGEuY21wbigxKSA9PT0gMCkge1xuICAgICAgcmVzID0geDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlcyA9IHgyO1xuICAgIH1cblxuICAgIGlmIChyZXMuY21wbigwKSA8IDApIHtcbiAgICAgIHJlcy5pYWRkKHApO1xuICAgIH1cblxuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmdjZCA9IGZ1bmN0aW9uIGdjZCAobnVtKSB7XG4gICAgaWYgKHRoaXMuaXNaZXJvKCkpIHJldHVybiBudW0uYWJzKCk7XG4gICAgaWYgKG51bS5pc1plcm8oKSkgcmV0dXJuIHRoaXMuYWJzKCk7XG5cbiAgICB2YXIgYSA9IHRoaXMuY2xvbmUoKTtcbiAgICB2YXIgYiA9IG51bS5jbG9uZSgpO1xuICAgIGEubmVnYXRpdmUgPSAwO1xuICAgIGIubmVnYXRpdmUgPSAwO1xuXG4gICAgLy8gUmVtb3ZlIGNvbW1vbiBmYWN0b3Igb2YgdHdvXG4gICAgZm9yICh2YXIgc2hpZnQgPSAwOyBhLmlzRXZlbigpICYmIGIuaXNFdmVuKCk7IHNoaWZ0KyspIHtcbiAgICAgIGEuaXVzaHJuKDEpO1xuICAgICAgYi5pdXNocm4oMSk7XG4gICAgfVxuXG4gICAgZG8ge1xuICAgICAgd2hpbGUgKGEuaXNFdmVuKCkpIHtcbiAgICAgICAgYS5pdXNocm4oMSk7XG4gICAgICB9XG4gICAgICB3aGlsZSAoYi5pc0V2ZW4oKSkge1xuICAgICAgICBiLml1c2hybigxKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHIgPSBhLmNtcChiKTtcbiAgICAgIGlmIChyIDwgMCkge1xuICAgICAgICAvLyBTd2FwIGBhYCBhbmQgYGJgIHRvIG1ha2UgYGFgIGFsd2F5cyBiaWdnZXIgdGhhbiBgYmBcbiAgICAgICAgdmFyIHQgPSBhO1xuICAgICAgICBhID0gYjtcbiAgICAgICAgYiA9IHQ7XG4gICAgICB9IGVsc2UgaWYgKHIgPT09IDAgfHwgYi5jbXBuKDEpID09PSAwKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBhLmlzdWIoYik7XG4gICAgfSB3aGlsZSAodHJ1ZSk7XG5cbiAgICByZXR1cm4gYi5pdXNobG4oc2hpZnQpO1xuICB9O1xuXG4gIC8vIEludmVydCBudW1iZXIgaW4gdGhlIGZpZWxkIEYobnVtKVxuICBCTi5wcm90b3R5cGUuaW52bSA9IGZ1bmN0aW9uIGludm0gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmVnY2QobnVtKS5hLnVtb2QobnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaXNFdmVuID0gZnVuY3Rpb24gaXNFdmVuICgpIHtcbiAgICByZXR1cm4gKHRoaXMud29yZHNbMF0gJiAxKSA9PT0gMDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaXNPZGQgPSBmdW5jdGlvbiBpc09kZCAoKSB7XG4gICAgcmV0dXJuICh0aGlzLndvcmRzWzBdICYgMSkgPT09IDE7XG4gIH07XG5cbiAgLy8gQW5kIGZpcnN0IHdvcmQgYW5kIG51bVxuICBCTi5wcm90b3R5cGUuYW5kbG4gPSBmdW5jdGlvbiBhbmRsbiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMud29yZHNbMF0gJiBudW07XG4gIH07XG5cbiAgLy8gSW5jcmVtZW50IGF0IHRoZSBiaXQgcG9zaXRpb24gaW4tbGluZVxuICBCTi5wcm90b3R5cGUuYmluY24gPSBmdW5jdGlvbiBiaW5jbiAoYml0KSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBiaXQgPT09ICdudW1iZXInKTtcbiAgICB2YXIgciA9IGJpdCAlIDI2O1xuICAgIHZhciBzID0gKGJpdCAtIHIpIC8gMjY7XG4gICAgdmFyIHEgPSAxIDw8IHI7XG5cbiAgICAvLyBGYXN0IGNhc2U6IGJpdCBpcyBtdWNoIGhpZ2hlciB0aGFuIGFsbCBleGlzdGluZyB3b3Jkc1xuICAgIGlmICh0aGlzLmxlbmd0aCA8PSBzKSB7XG4gICAgICB0aGlzLl9leHBhbmQocyArIDEpO1xuICAgICAgdGhpcy53b3Jkc1tzXSB8PSBxO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gQWRkIGJpdCBhbmQgcHJvcGFnYXRlLCBpZiBuZWVkZWRcbiAgICB2YXIgY2FycnkgPSBxO1xuICAgIGZvciAodmFyIGkgPSBzOyBjYXJyeSAhPT0gMCAmJiBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHcgPSB0aGlzLndvcmRzW2ldIHwgMDtcbiAgICAgIHcgKz0gY2Fycnk7XG4gICAgICBjYXJyeSA9IHcgPj4+IDI2O1xuICAgICAgdyAmPSAweDNmZmZmZmY7XG4gICAgICB0aGlzLndvcmRzW2ldID0gdztcbiAgICB9XG4gICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gY2Fycnk7XG4gICAgICB0aGlzLmxlbmd0aCsrO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaXNaZXJvID0gZnVuY3Rpb24gaXNaZXJvICgpIHtcbiAgICByZXR1cm4gdGhpcy5sZW5ndGggPT09IDEgJiYgdGhpcy53b3Jkc1swXSA9PT0gMDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuY21wbiA9IGZ1bmN0aW9uIGNtcG4gKG51bSkge1xuICAgIHZhciBuZWdhdGl2ZSA9IG51bSA8IDA7XG5cbiAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCAmJiAhbmVnYXRpdmUpIHJldHVybiAtMTtcbiAgICBpZiAodGhpcy5uZWdhdGl2ZSA9PT0gMCAmJiBuZWdhdGl2ZSkgcmV0dXJuIDE7XG5cbiAgICB0aGlzLnN0cmlwKCk7XG5cbiAgICB2YXIgcmVzO1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IDEpIHtcbiAgICAgIHJlcyA9IDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChuZWdhdGl2ZSkge1xuICAgICAgICBudW0gPSAtbnVtO1xuICAgICAgfVxuXG4gICAgICBhc3NlcnQobnVtIDw9IDB4M2ZmZmZmZiwgJ051bWJlciBpcyB0b28gYmlnJyk7XG5cbiAgICAgIHZhciB3ID0gdGhpcy53b3Jkc1swXSB8IDA7XG4gICAgICByZXMgPSB3ID09PSBudW0gPyAwIDogdyA8IG51bSA/IC0xIDogMTtcbiAgICB9XG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHJldHVybiAtcmVzIHwgMDtcbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIC8vIENvbXBhcmUgdHdvIG51bWJlcnMgYW5kIHJldHVybjpcbiAgLy8gMSAtIGlmIGB0aGlzYCA+IGBudW1gXG4gIC8vIDAgLSBpZiBgdGhpc2AgPT0gYG51bWBcbiAgLy8gLTEgLSBpZiBgdGhpc2AgPCBgbnVtYFxuICBCTi5wcm90b3R5cGUuY21wID0gZnVuY3Rpb24gY21wIChudW0pIHtcbiAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCAmJiBudW0ubmVnYXRpdmUgPT09IDApIHJldHVybiAtMTtcbiAgICBpZiAodGhpcy5uZWdhdGl2ZSA9PT0gMCAmJiBudW0ubmVnYXRpdmUgIT09IDApIHJldHVybiAxO1xuXG4gICAgdmFyIHJlcyA9IHRoaXMudWNtcChudW0pO1xuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwKSByZXR1cm4gLXJlcyB8IDA7XG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICAvLyBVbnNpZ25lZCBjb21wYXJpc29uXG4gIEJOLnByb3RvdHlwZS51Y21wID0gZnVuY3Rpb24gdWNtcCAobnVtKSB7XG4gICAgLy8gQXQgdGhpcyBwb2ludCBib3RoIG51bWJlcnMgaGF2ZSB0aGUgc2FtZSBzaWduXG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIDE7XG4gICAgaWYgKHRoaXMubGVuZ3RoIDwgbnVtLmxlbmd0aCkgcmV0dXJuIC0xO1xuXG4gICAgdmFyIHJlcyA9IDA7XG4gICAgZm9yICh2YXIgaSA9IHRoaXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHZhciBhID0gdGhpcy53b3Jkc1tpXSB8IDA7XG4gICAgICB2YXIgYiA9IG51bS53b3Jkc1tpXSB8IDA7XG5cbiAgICAgIGlmIChhID09PSBiKSBjb250aW51ZTtcbiAgICAgIGlmIChhIDwgYikge1xuICAgICAgICByZXMgPSAtMTtcbiAgICAgIH0gZWxzZSBpZiAoYSA+IGIpIHtcbiAgICAgICAgcmVzID0gMTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5ndG4gPSBmdW5jdGlvbiBndG4gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcG4obnVtKSA9PT0gMTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZ3QgPSBmdW5jdGlvbiBndCAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wKG51bSkgPT09IDE7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmd0ZW4gPSBmdW5jdGlvbiBndGVuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXBuKG51bSkgPj0gMDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZ3RlID0gZnVuY3Rpb24gZ3RlIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXAobnVtKSA+PSAwO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5sdG4gPSBmdW5jdGlvbiBsdG4gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcG4obnVtKSA9PT0gLTE7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmx0ID0gZnVuY3Rpb24gbHQgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcChudW0pID09PSAtMTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUubHRlbiA9IGZ1bmN0aW9uIGx0ZW4gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcG4obnVtKSA8PSAwO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5sdGUgPSBmdW5jdGlvbiBsdGUgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcChudW0pIDw9IDA7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmVxbiA9IGZ1bmN0aW9uIGVxbiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wbihudW0pID09PSAwO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5lcSA9IGZ1bmN0aW9uIGVxIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXAobnVtKSA9PT0gMDtcbiAgfTtcblxuICAvL1xuICAvLyBBIHJlZHVjZSBjb250ZXh0LCBjb3VsZCBiZSB1c2luZyBtb250Z29tZXJ5IG9yIHNvbWV0aGluZyBiZXR0ZXIsIGRlcGVuZGluZ1xuICAvLyBvbiB0aGUgYG1gIGl0c2VsZi5cbiAgLy9cbiAgQk4ucmVkID0gZnVuY3Rpb24gcmVkIChudW0pIHtcbiAgICByZXR1cm4gbmV3IFJlZChudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS50b1JlZCA9IGZ1bmN0aW9uIHRvUmVkIChjdHgpIHtcbiAgICBhc3NlcnQoIXRoaXMucmVkLCAnQWxyZWFkeSBhIG51bWJlciBpbiByZWR1Y3Rpb24gY29udGV4dCcpO1xuICAgIGFzc2VydCh0aGlzLm5lZ2F0aXZlID09PSAwLCAncmVkIHdvcmtzIG9ubHkgd2l0aCBwb3NpdGl2ZXMnKTtcbiAgICByZXR1cm4gY3R4LmNvbnZlcnRUbyh0aGlzKS5fZm9yY2VSZWQoY3R4KTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZnJvbVJlZCA9IGZ1bmN0aW9uIGZyb21SZWQgKCkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ2Zyb21SZWQgd29ya3Mgb25seSB3aXRoIG51bWJlcnMgaW4gcmVkdWN0aW9uIGNvbnRleHQnKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuY29udmVydEZyb20odGhpcyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl9mb3JjZVJlZCA9IGZ1bmN0aW9uIF9mb3JjZVJlZCAoY3R4KSB7XG4gICAgdGhpcy5yZWQgPSBjdHg7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmZvcmNlUmVkID0gZnVuY3Rpb24gZm9yY2VSZWQgKGN0eCkge1xuICAgIGFzc2VydCghdGhpcy5yZWQsICdBbHJlYWR5IGEgbnVtYmVyIGluIHJlZHVjdGlvbiBjb250ZXh0Jyk7XG4gICAgcmV0dXJuIHRoaXMuX2ZvcmNlUmVkKGN0eCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZEFkZCA9IGZ1bmN0aW9uIHJlZEFkZCAobnVtKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkQWRkIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHJldHVybiB0aGlzLnJlZC5hZGQodGhpcywgbnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkSUFkZCA9IGZ1bmN0aW9uIHJlZElBZGQgKG51bSkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZElBZGQgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLmlhZGQodGhpcywgbnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkU3ViID0gZnVuY3Rpb24gcmVkU3ViIChudW0pIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRTdWIgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLnN1Yih0aGlzLCBudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRJU3ViID0gZnVuY3Rpb24gcmVkSVN1YiAobnVtKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkSVN1YiB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuaXN1Yih0aGlzLCBudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRTaGwgPSBmdW5jdGlvbiByZWRTaGwgKG51bSkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZFNobCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuc2hsKHRoaXMsIG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZE11bCA9IGZ1bmN0aW9uIHJlZE11bCAobnVtKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkTXVsIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHRoaXMucmVkLl92ZXJpZnkyKHRoaXMsIG51bSk7XG4gICAgcmV0dXJuIHRoaXMucmVkLm11bCh0aGlzLCBudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRJTXVsID0gZnVuY3Rpb24gcmVkSU11bCAobnVtKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkTXVsIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHRoaXMucmVkLl92ZXJpZnkyKHRoaXMsIG51bSk7XG4gICAgcmV0dXJuIHRoaXMucmVkLmltdWwodGhpcywgbnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkU3FyID0gZnVuY3Rpb24gcmVkU3FyICgpIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRTcXIgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTEodGhpcyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLnNxcih0aGlzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkSVNxciA9IGZ1bmN0aW9uIHJlZElTcXIgKCkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZElTcXIgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTEodGhpcyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLmlzcXIodGhpcyk7XG4gIH07XG5cbiAgLy8gU3F1YXJlIHJvb3Qgb3ZlciBwXG4gIEJOLnByb3RvdHlwZS5yZWRTcXJ0ID0gZnVuY3Rpb24gcmVkU3FydCAoKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkU3FydCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICB0aGlzLnJlZC5fdmVyaWZ5MSh0aGlzKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuc3FydCh0aGlzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkSW52bSA9IGZ1bmN0aW9uIHJlZEludm0gKCkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZEludm0gd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTEodGhpcyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLmludm0odGhpcyk7XG4gIH07XG5cbiAgLy8gUmV0dXJuIG5lZ2F0aXZlIGNsb25lIG9mIGB0aGlzYCAlIGByZWQgbW9kdWxvYFxuICBCTi5wcm90b3R5cGUucmVkTmVnID0gZnVuY3Rpb24gcmVkTmVnICgpIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWROZWcgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTEodGhpcyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLm5lZyh0aGlzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkUG93ID0gZnVuY3Rpb24gcmVkUG93IChudW0pIHtcbiAgICBhc3NlcnQodGhpcy5yZWQgJiYgIW51bS5yZWQsICdyZWRQb3cobm9ybWFsTnVtKScpO1xuICAgIHRoaXMucmVkLl92ZXJpZnkxKHRoaXMpO1xuICAgIHJldHVybiB0aGlzLnJlZC5wb3codGhpcywgbnVtKTtcbiAgfTtcblxuICAvLyBQcmltZSBudW1iZXJzIHdpdGggZWZmaWNpZW50IHJlZHVjdGlvblxuICB2YXIgcHJpbWVzID0ge1xuICAgIGsyNTY6IG51bGwsXG4gICAgcDIyNDogbnVsbCxcbiAgICBwMTkyOiBudWxsLFxuICAgIHAyNTUxOTogbnVsbFxuICB9O1xuXG4gIC8vIFBzZXVkby1NZXJzZW5uZSBwcmltZVxuICBmdW5jdGlvbiBNUHJpbWUgKG5hbWUsIHApIHtcbiAgICAvLyBQID0gMiBeIE4gLSBLXG4gICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICB0aGlzLnAgPSBuZXcgQk4ocCwgMTYpO1xuICAgIHRoaXMubiA9IHRoaXMucC5iaXRMZW5ndGgoKTtcbiAgICB0aGlzLmsgPSBuZXcgQk4oMSkuaXVzaGxuKHRoaXMubikuaXN1Yih0aGlzLnApO1xuXG4gICAgdGhpcy50bXAgPSB0aGlzLl90bXAoKTtcbiAgfVxuXG4gIE1QcmltZS5wcm90b3R5cGUuX3RtcCA9IGZ1bmN0aW9uIF90bXAgKCkge1xuICAgIHZhciB0bXAgPSBuZXcgQk4obnVsbCk7XG4gICAgdG1wLndvcmRzID0gbmV3IEFycmF5KE1hdGguY2VpbCh0aGlzLm4gLyAxMykpO1xuICAgIHJldHVybiB0bXA7XG4gIH07XG5cbiAgTVByaW1lLnByb3RvdHlwZS5pcmVkdWNlID0gZnVuY3Rpb24gaXJlZHVjZSAobnVtKSB7XG4gICAgLy8gQXNzdW1lcyB0aGF0IGBudW1gIGlzIGxlc3MgdGhhbiBgUF4yYFxuICAgIC8vIG51bSA9IEhJICogKDIgXiBOIC0gSykgKyBISSAqIEsgKyBMTyA9IEhJICogSyArIExPIChtb2QgUClcbiAgICB2YXIgciA9IG51bTtcbiAgICB2YXIgcmxlbjtcblxuICAgIGRvIHtcbiAgICAgIHRoaXMuc3BsaXQociwgdGhpcy50bXApO1xuICAgICAgciA9IHRoaXMuaW11bEsocik7XG4gICAgICByID0gci5pYWRkKHRoaXMudG1wKTtcbiAgICAgIHJsZW4gPSByLmJpdExlbmd0aCgpO1xuICAgIH0gd2hpbGUgKHJsZW4gPiB0aGlzLm4pO1xuXG4gICAgdmFyIGNtcCA9IHJsZW4gPCB0aGlzLm4gPyAtMSA6IHIudWNtcCh0aGlzLnApO1xuICAgIGlmIChjbXAgPT09IDApIHtcbiAgICAgIHIud29yZHNbMF0gPSAwO1xuICAgICAgci5sZW5ndGggPSAxO1xuICAgIH0gZWxzZSBpZiAoY21wID4gMCkge1xuICAgICAgci5pc3ViKHRoaXMucCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHIuc3RyaXAoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcjtcbiAgfTtcblxuICBNUHJpbWUucHJvdG90eXBlLnNwbGl0ID0gZnVuY3Rpb24gc3BsaXQgKGlucHV0LCBvdXQpIHtcbiAgICBpbnB1dC5pdXNocm4odGhpcy5uLCAwLCBvdXQpO1xuICB9O1xuXG4gIE1QcmltZS5wcm90b3R5cGUuaW11bEsgPSBmdW5jdGlvbiBpbXVsSyAobnVtKSB7XG4gICAgcmV0dXJuIG51bS5pbXVsKHRoaXMuayk7XG4gIH07XG5cbiAgZnVuY3Rpb24gSzI1NiAoKSB7XG4gICAgTVByaW1lLmNhbGwoXG4gICAgICB0aGlzLFxuICAgICAgJ2syNTYnLFxuICAgICAgJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZlIGZmZmZmYzJmJyk7XG4gIH1cbiAgaW5oZXJpdHMoSzI1NiwgTVByaW1lKTtcblxuICBLMjU2LnByb3RvdHlwZS5zcGxpdCA9IGZ1bmN0aW9uIHNwbGl0IChpbnB1dCwgb3V0cHV0KSB7XG4gICAgLy8gMjU2ID0gOSAqIDI2ICsgMjJcbiAgICB2YXIgbWFzayA9IDB4M2ZmZmZmO1xuXG4gICAgdmFyIG91dExlbiA9IE1hdGgubWluKGlucHV0Lmxlbmd0aCwgOSk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvdXRMZW47IGkrKykge1xuICAgICAgb3V0cHV0LndvcmRzW2ldID0gaW5wdXQud29yZHNbaV07XG4gICAgfVxuICAgIG91dHB1dC5sZW5ndGggPSBvdXRMZW47XG5cbiAgICBpZiAoaW5wdXQubGVuZ3RoIDw9IDkpIHtcbiAgICAgIGlucHV0LndvcmRzWzBdID0gMDtcbiAgICAgIGlucHV0Lmxlbmd0aCA9IDE7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gU2hpZnQgYnkgOSBsaW1ic1xuICAgIHZhciBwcmV2ID0gaW5wdXQud29yZHNbOV07XG4gICAgb3V0cHV0LndvcmRzW291dHB1dC5sZW5ndGgrK10gPSBwcmV2ICYgbWFzaztcblxuICAgIGZvciAoaSA9IDEwOyBpIDwgaW5wdXQubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBuZXh0ID0gaW5wdXQud29yZHNbaV0gfCAwO1xuICAgICAgaW5wdXQud29yZHNbaSAtIDEwXSA9ICgobmV4dCAmIG1hc2spIDw8IDQpIHwgKHByZXYgPj4+IDIyKTtcbiAgICAgIHByZXYgPSBuZXh0O1xuICAgIH1cbiAgICBwcmV2ID4+Pj0gMjI7XG4gICAgaW5wdXQud29yZHNbaSAtIDEwXSA9IHByZXY7XG4gICAgaWYgKHByZXYgPT09IDAgJiYgaW5wdXQubGVuZ3RoID4gMTApIHtcbiAgICAgIGlucHV0Lmxlbmd0aCAtPSAxMDtcbiAgICB9IGVsc2Uge1xuICAgICAgaW5wdXQubGVuZ3RoIC09IDk7XG4gICAgfVxuICB9O1xuXG4gIEsyNTYucHJvdG90eXBlLmltdWxLID0gZnVuY3Rpb24gaW11bEsgKG51bSkge1xuICAgIC8vIEsgPSAweDEwMDAwMDNkMSA9IFsgMHg0MCwgMHgzZDEgXVxuICAgIG51bS53b3Jkc1tudW0ubGVuZ3RoXSA9IDA7XG4gICAgbnVtLndvcmRzW251bS5sZW5ndGggKyAxXSA9IDA7XG4gICAgbnVtLmxlbmd0aCArPSAyO1xuXG4gICAgLy8gYm91bmRlZCBhdDogMHg0MCAqIDB4M2ZmZmZmZiArIDB4M2QwID0gMHgxMDAwMDAzOTBcbiAgICB2YXIgbG8gPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdyA9IG51bS53b3Jkc1tpXSB8IDA7XG4gICAgICBsbyArPSB3ICogMHgzZDE7XG4gICAgICBudW0ud29yZHNbaV0gPSBsbyAmIDB4M2ZmZmZmZjtcbiAgICAgIGxvID0gdyAqIDB4NDAgKyAoKGxvIC8gMHg0MDAwMDAwKSB8IDApO1xuICAgIH1cblxuICAgIC8vIEZhc3QgbGVuZ3RoIHJlZHVjdGlvblxuICAgIGlmIChudW0ud29yZHNbbnVtLmxlbmd0aCAtIDFdID09PSAwKSB7XG4gICAgICBudW0ubGVuZ3RoLS07XG4gICAgICBpZiAobnVtLndvcmRzW251bS5sZW5ndGggLSAxXSA9PT0gMCkge1xuICAgICAgICBudW0ubGVuZ3RoLS07XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudW07XG4gIH07XG5cbiAgZnVuY3Rpb24gUDIyNCAoKSB7XG4gICAgTVByaW1lLmNhbGwoXG4gICAgICB0aGlzLFxuICAgICAgJ3AyMjQnLFxuICAgICAgJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIDAwMDAwMDAwIDAwMDAwMDAwIDAwMDAwMDAxJyk7XG4gIH1cbiAgaW5oZXJpdHMoUDIyNCwgTVByaW1lKTtcblxuICBmdW5jdGlvbiBQMTkyICgpIHtcbiAgICBNUHJpbWUuY2FsbChcbiAgICAgIHRoaXMsXG4gICAgICAncDE5MicsXG4gICAgICAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmUgZmZmZmZmZmYgZmZmZmZmZmYnKTtcbiAgfVxuICBpbmhlcml0cyhQMTkyLCBNUHJpbWUpO1xuXG4gIGZ1bmN0aW9uIFAyNTUxOSAoKSB7XG4gICAgLy8gMiBeIDI1NSAtIDE5XG4gICAgTVByaW1lLmNhbGwoXG4gICAgICB0aGlzLFxuICAgICAgJzI1NTE5JyxcbiAgICAgICc3ZmZmZmZmZmZmZmZmZmZmIGZmZmZmZmZmZmZmZmZmZmYgZmZmZmZmZmZmZmZmZmZmZiBmZmZmZmZmZmZmZmZmZmVkJyk7XG4gIH1cbiAgaW5oZXJpdHMoUDI1NTE5LCBNUHJpbWUpO1xuXG4gIFAyNTUxOS5wcm90b3R5cGUuaW11bEsgPSBmdW5jdGlvbiBpbXVsSyAobnVtKSB7XG4gICAgLy8gSyA9IDB4MTNcbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaGkgPSAobnVtLndvcmRzW2ldIHwgMCkgKiAweDEzICsgY2Fycnk7XG4gICAgICB2YXIgbG8gPSBoaSAmIDB4M2ZmZmZmZjtcbiAgICAgIGhpID4+Pj0gMjY7XG5cbiAgICAgIG51bS53b3Jkc1tpXSA9IGxvO1xuICAgICAgY2FycnkgPSBoaTtcbiAgICB9XG4gICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICBudW0ud29yZHNbbnVtLmxlbmd0aCsrXSA9IGNhcnJ5O1xuICAgIH1cbiAgICByZXR1cm4gbnVtO1xuICB9O1xuXG4gIC8vIEV4cG9ydGVkIG1vc3RseSBmb3IgdGVzdGluZyBwdXJwb3NlcywgdXNlIHBsYWluIG5hbWUgaW5zdGVhZFxuICBCTi5fcHJpbWUgPSBmdW5jdGlvbiBwcmltZSAobmFtZSkge1xuICAgIC8vIENhY2hlZCB2ZXJzaW9uIG9mIHByaW1lXG4gICAgaWYgKHByaW1lc1tuYW1lXSkgcmV0dXJuIHByaW1lc1tuYW1lXTtcblxuICAgIHZhciBwcmltZTtcbiAgICBpZiAobmFtZSA9PT0gJ2syNTYnKSB7XG4gICAgICBwcmltZSA9IG5ldyBLMjU2KCk7XG4gICAgfSBlbHNlIGlmIChuYW1lID09PSAncDIyNCcpIHtcbiAgICAgIHByaW1lID0gbmV3IFAyMjQoKTtcbiAgICB9IGVsc2UgaWYgKG5hbWUgPT09ICdwMTkyJykge1xuICAgICAgcHJpbWUgPSBuZXcgUDE5MigpO1xuICAgIH0gZWxzZSBpZiAobmFtZSA9PT0gJ3AyNTUxOScpIHtcbiAgICAgIHByaW1lID0gbmV3IFAyNTUxOSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gcHJpbWUgJyArIG5hbWUpO1xuICAgIH1cbiAgICBwcmltZXNbbmFtZV0gPSBwcmltZTtcblxuICAgIHJldHVybiBwcmltZTtcbiAgfTtcblxuICAvL1xuICAvLyBCYXNlIHJlZHVjdGlvbiBlbmdpbmVcbiAgLy9cbiAgZnVuY3Rpb24gUmVkIChtKSB7XG4gICAgaWYgKHR5cGVvZiBtID09PSAnc3RyaW5nJykge1xuICAgICAgdmFyIHByaW1lID0gQk4uX3ByaW1lKG0pO1xuICAgICAgdGhpcy5tID0gcHJpbWUucDtcbiAgICAgIHRoaXMucHJpbWUgPSBwcmltZTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXNzZXJ0KG0uZ3RuKDEpLCAnbW9kdWx1cyBtdXN0IGJlIGdyZWF0ZXIgdGhhbiAxJyk7XG4gICAgICB0aGlzLm0gPSBtO1xuICAgICAgdGhpcy5wcmltZSA9IG51bGw7XG4gICAgfVxuICB9XG5cbiAgUmVkLnByb3RvdHlwZS5fdmVyaWZ5MSA9IGZ1bmN0aW9uIF92ZXJpZnkxIChhKSB7XG4gICAgYXNzZXJ0KGEubmVnYXRpdmUgPT09IDAsICdyZWQgd29ya3Mgb25seSB3aXRoIHBvc2l0aXZlcycpO1xuICAgIGFzc2VydChhLnJlZCwgJ3JlZCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLl92ZXJpZnkyID0gZnVuY3Rpb24gX3ZlcmlmeTIgKGEsIGIpIHtcbiAgICBhc3NlcnQoKGEubmVnYXRpdmUgfCBiLm5lZ2F0aXZlKSA9PT0gMCwgJ3JlZCB3b3JrcyBvbmx5IHdpdGggcG9zaXRpdmVzJyk7XG4gICAgYXNzZXJ0KGEucmVkICYmIGEucmVkID09PSBiLnJlZCxcbiAgICAgICdyZWQgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5pbW9kID0gZnVuY3Rpb24gaW1vZCAoYSkge1xuICAgIGlmICh0aGlzLnByaW1lKSByZXR1cm4gdGhpcy5wcmltZS5pcmVkdWNlKGEpLl9mb3JjZVJlZCh0aGlzKTtcbiAgICByZXR1cm4gYS51bW9kKHRoaXMubSkuX2ZvcmNlUmVkKHRoaXMpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUubmVnID0gZnVuY3Rpb24gbmVnIChhKSB7XG4gICAgaWYgKGEuaXNaZXJvKCkpIHtcbiAgICAgIHJldHVybiBhLmNsb25lKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMubS5zdWIoYSkuX2ZvcmNlUmVkKHRoaXMpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gYWRkIChhLCBiKSB7XG4gICAgdGhpcy5fdmVyaWZ5MihhLCBiKTtcblxuICAgIHZhciByZXMgPSBhLmFkZChiKTtcbiAgICBpZiAocmVzLmNtcCh0aGlzLm0pID49IDApIHtcbiAgICAgIHJlcy5pc3ViKHRoaXMubSk7XG4gICAgfVxuICAgIHJldHVybiByZXMuX2ZvcmNlUmVkKHRoaXMpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuaWFkZCA9IGZ1bmN0aW9uIGlhZGQgKGEsIGIpIHtcbiAgICB0aGlzLl92ZXJpZnkyKGEsIGIpO1xuXG4gICAgdmFyIHJlcyA9IGEuaWFkZChiKTtcbiAgICBpZiAocmVzLmNtcCh0aGlzLm0pID49IDApIHtcbiAgICAgIHJlcy5pc3ViKHRoaXMubSk7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5zdWIgPSBmdW5jdGlvbiBzdWIgKGEsIGIpIHtcbiAgICB0aGlzLl92ZXJpZnkyKGEsIGIpO1xuXG4gICAgdmFyIHJlcyA9IGEuc3ViKGIpO1xuICAgIGlmIChyZXMuY21wbigwKSA8IDApIHtcbiAgICAgIHJlcy5pYWRkKHRoaXMubSk7XG4gICAgfVxuICAgIHJldHVybiByZXMuX2ZvcmNlUmVkKHRoaXMpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuaXN1YiA9IGZ1bmN0aW9uIGlzdWIgKGEsIGIpIHtcbiAgICB0aGlzLl92ZXJpZnkyKGEsIGIpO1xuXG4gICAgdmFyIHJlcyA9IGEuaXN1YihiKTtcbiAgICBpZiAocmVzLmNtcG4oMCkgPCAwKSB7XG4gICAgICByZXMuaWFkZCh0aGlzLm0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuc2hsID0gZnVuY3Rpb24gc2hsIChhLCBudW0pIHtcbiAgICB0aGlzLl92ZXJpZnkxKGEpO1xuICAgIHJldHVybiB0aGlzLmltb2QoYS51c2hsbihudW0pKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLmltdWwgPSBmdW5jdGlvbiBpbXVsIChhLCBiKSB7XG4gICAgdGhpcy5fdmVyaWZ5MihhLCBiKTtcbiAgICByZXR1cm4gdGhpcy5pbW9kKGEuaW11bChiKSk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5tdWwgPSBmdW5jdGlvbiBtdWwgKGEsIGIpIHtcbiAgICB0aGlzLl92ZXJpZnkyKGEsIGIpO1xuICAgIHJldHVybiB0aGlzLmltb2QoYS5tdWwoYikpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuaXNxciA9IGZ1bmN0aW9uIGlzcXIgKGEpIHtcbiAgICByZXR1cm4gdGhpcy5pbXVsKGEsIGEuY2xvbmUoKSk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5zcXIgPSBmdW5jdGlvbiBzcXIgKGEpIHtcbiAgICByZXR1cm4gdGhpcy5tdWwoYSwgYSk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5zcXJ0ID0gZnVuY3Rpb24gc3FydCAoYSkge1xuICAgIGlmIChhLmlzWmVybygpKSByZXR1cm4gYS5jbG9uZSgpO1xuXG4gICAgdmFyIG1vZDMgPSB0aGlzLm0uYW5kbG4oMyk7XG4gICAgYXNzZXJ0KG1vZDMgJSAyID09PSAxKTtcblxuICAgIC8vIEZhc3QgY2FzZVxuICAgIGlmIChtb2QzID09PSAzKSB7XG4gICAgICB2YXIgcG93ID0gdGhpcy5tLmFkZChuZXcgQk4oMSkpLml1c2hybigyKTtcbiAgICAgIHJldHVybiB0aGlzLnBvdyhhLCBwb3cpO1xuICAgIH1cblxuICAgIC8vIFRvbmVsbGktU2hhbmtzIGFsZ29yaXRobSAoVG90YWxseSB1bm9wdGltaXplZCBhbmQgc2xvdylcbiAgICAvL1xuICAgIC8vIEZpbmQgUSBhbmQgUywgdGhhdCBRICogMiBeIFMgPSAoUCAtIDEpXG4gICAgdmFyIHEgPSB0aGlzLm0uc3VibigxKTtcbiAgICB2YXIgcyA9IDA7XG4gICAgd2hpbGUgKCFxLmlzWmVybygpICYmIHEuYW5kbG4oMSkgPT09IDApIHtcbiAgICAgIHMrKztcbiAgICAgIHEuaXVzaHJuKDEpO1xuICAgIH1cbiAgICBhc3NlcnQoIXEuaXNaZXJvKCkpO1xuXG4gICAgdmFyIG9uZSA9IG5ldyBCTigxKS50b1JlZCh0aGlzKTtcbiAgICB2YXIgbk9uZSA9IG9uZS5yZWROZWcoKTtcblxuICAgIC8vIEZpbmQgcXVhZHJhdGljIG5vbi1yZXNpZHVlXG4gICAgLy8gTk9URTogTWF4IGlzIHN1Y2ggYmVjYXVzZSBvZiBnZW5lcmFsaXplZCBSaWVtYW5uIGh5cG90aGVzaXMuXG4gICAgdmFyIGxwb3cgPSB0aGlzLm0uc3VibigxKS5pdXNocm4oMSk7XG4gICAgdmFyIHogPSB0aGlzLm0uYml0TGVuZ3RoKCk7XG4gICAgeiA9IG5ldyBCTigyICogeiAqIHopLnRvUmVkKHRoaXMpO1xuXG4gICAgd2hpbGUgKHRoaXMucG93KHosIGxwb3cpLmNtcChuT25lKSAhPT0gMCkge1xuICAgICAgei5yZWRJQWRkKG5PbmUpO1xuICAgIH1cblxuICAgIHZhciBjID0gdGhpcy5wb3coeiwgcSk7XG4gICAgdmFyIHIgPSB0aGlzLnBvdyhhLCBxLmFkZG4oMSkuaXVzaHJuKDEpKTtcbiAgICB2YXIgdCA9IHRoaXMucG93KGEsIHEpO1xuICAgIHZhciBtID0gcztcbiAgICB3aGlsZSAodC5jbXAob25lKSAhPT0gMCkge1xuICAgICAgdmFyIHRtcCA9IHQ7XG4gICAgICBmb3IgKHZhciBpID0gMDsgdG1wLmNtcChvbmUpICE9PSAwOyBpKyspIHtcbiAgICAgICAgdG1wID0gdG1wLnJlZFNxcigpO1xuICAgICAgfVxuICAgICAgYXNzZXJ0KGkgPCBtKTtcbiAgICAgIHZhciBiID0gdGhpcy5wb3coYywgbmV3IEJOKDEpLml1c2hsbihtIC0gaSAtIDEpKTtcblxuICAgICAgciA9IHIucmVkTXVsKGIpO1xuICAgICAgYyA9IGIucmVkU3FyKCk7XG4gICAgICB0ID0gdC5yZWRNdWwoYyk7XG4gICAgICBtID0gaTtcbiAgICB9XG5cbiAgICByZXR1cm4gcjtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLmludm0gPSBmdW5jdGlvbiBpbnZtIChhKSB7XG4gICAgdmFyIGludiA9IGEuX2ludm1wKHRoaXMubSk7XG4gICAgaWYgKGludi5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgaW52Lm5lZ2F0aXZlID0gMDtcbiAgICAgIHJldHVybiB0aGlzLmltb2QoaW52KS5yZWROZWcoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMuaW1vZChpbnYpO1xuICAgIH1cbiAgfTtcblxuICBSZWQucHJvdG90eXBlLnBvdyA9IGZ1bmN0aW9uIHBvdyAoYSwgbnVtKSB7XG4gICAgaWYgKG51bS5pc1plcm8oKSkgcmV0dXJuIG5ldyBCTigxKS50b1JlZCh0aGlzKTtcbiAgICBpZiAobnVtLmNtcG4oMSkgPT09IDApIHJldHVybiBhLmNsb25lKCk7XG5cbiAgICB2YXIgd2luZG93U2l6ZSA9IDQ7XG4gICAgdmFyIHduZCA9IG5ldyBBcnJheSgxIDw8IHdpbmRvd1NpemUpO1xuICAgIHduZFswXSA9IG5ldyBCTigxKS50b1JlZCh0aGlzKTtcbiAgICB3bmRbMV0gPSBhO1xuICAgIGZvciAodmFyIGkgPSAyOyBpIDwgd25kLmxlbmd0aDsgaSsrKSB7XG4gICAgICB3bmRbaV0gPSB0aGlzLm11bCh3bmRbaSAtIDFdLCBhKTtcbiAgICB9XG5cbiAgICB2YXIgcmVzID0gd25kWzBdO1xuICAgIHZhciBjdXJyZW50ID0gMDtcbiAgICB2YXIgY3VycmVudExlbiA9IDA7XG4gICAgdmFyIHN0YXJ0ID0gbnVtLmJpdExlbmd0aCgpICUgMjY7XG4gICAgaWYgKHN0YXJ0ID09PSAwKSB7XG4gICAgICBzdGFydCA9IDI2O1xuICAgIH1cblxuICAgIGZvciAoaSA9IG51bS5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgdmFyIHdvcmQgPSBudW0ud29yZHNbaV07XG4gICAgICBmb3IgKHZhciBqID0gc3RhcnQgLSAxOyBqID49IDA7IGotLSkge1xuICAgICAgICB2YXIgYml0ID0gKHdvcmQgPj4gaikgJiAxO1xuICAgICAgICBpZiAocmVzICE9PSB3bmRbMF0pIHtcbiAgICAgICAgICByZXMgPSB0aGlzLnNxcihyZXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGJpdCA9PT0gMCAmJiBjdXJyZW50ID09PSAwKSB7XG4gICAgICAgICAgY3VycmVudExlbiA9IDA7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBjdXJyZW50IDw8PSAxO1xuICAgICAgICBjdXJyZW50IHw9IGJpdDtcbiAgICAgICAgY3VycmVudExlbisrO1xuICAgICAgICBpZiAoY3VycmVudExlbiAhPT0gd2luZG93U2l6ZSAmJiAoaSAhPT0gMCB8fCBqICE9PSAwKSkgY29udGludWU7XG5cbiAgICAgICAgcmVzID0gdGhpcy5tdWwocmVzLCB3bmRbY3VycmVudF0pO1xuICAgICAgICBjdXJyZW50TGVuID0gMDtcbiAgICAgICAgY3VycmVudCA9IDA7XG4gICAgICB9XG4gICAgICBzdGFydCA9IDI2O1xuICAgIH1cblxuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5jb252ZXJ0VG8gPSBmdW5jdGlvbiBjb252ZXJ0VG8gKG51bSkge1xuICAgIHZhciByID0gbnVtLnVtb2QodGhpcy5tKTtcblxuICAgIHJldHVybiByID09PSBudW0gPyByLmNsb25lKCkgOiByO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuY29udmVydEZyb20gPSBmdW5jdGlvbiBjb252ZXJ0RnJvbSAobnVtKSB7XG4gICAgdmFyIHJlcyA9IG51bS5jbG9uZSgpO1xuICAgIHJlcy5yZWQgPSBudWxsO1xuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgLy9cbiAgLy8gTW9udGdvbWVyeSBtZXRob2QgZW5naW5lXG4gIC8vXG5cbiAgQk4ubW9udCA9IGZ1bmN0aW9uIG1vbnQgKG51bSkge1xuICAgIHJldHVybiBuZXcgTW9udChudW0pO1xuICB9O1xuXG4gIGZ1bmN0aW9uIE1vbnQgKG0pIHtcbiAgICBSZWQuY2FsbCh0aGlzLCBtKTtcblxuICAgIHRoaXMuc2hpZnQgPSB0aGlzLm0uYml0TGVuZ3RoKCk7XG4gICAgaWYgKHRoaXMuc2hpZnQgJSAyNiAhPT0gMCkge1xuICAgICAgdGhpcy5zaGlmdCArPSAyNiAtICh0aGlzLnNoaWZ0ICUgMjYpO1xuICAgIH1cblxuICAgIHRoaXMuciA9IG5ldyBCTigxKS5pdXNobG4odGhpcy5zaGlmdCk7XG4gICAgdGhpcy5yMiA9IHRoaXMuaW1vZCh0aGlzLnIuc3FyKCkpO1xuICAgIHRoaXMucmludiA9IHRoaXMuci5faW52bXAodGhpcy5tKTtcblxuICAgIHRoaXMubWludiA9IHRoaXMucmludi5tdWwodGhpcy5yKS5pc3VibigxKS5kaXYodGhpcy5tKTtcbiAgICB0aGlzLm1pbnYgPSB0aGlzLm1pbnYudW1vZCh0aGlzLnIpO1xuICAgIHRoaXMubWludiA9IHRoaXMuci5zdWIodGhpcy5taW52KTtcbiAgfVxuICBpbmhlcml0cyhNb250LCBSZWQpO1xuXG4gIE1vbnQucHJvdG90eXBlLmNvbnZlcnRUbyA9IGZ1bmN0aW9uIGNvbnZlcnRUbyAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuaW1vZChudW0udXNobG4odGhpcy5zaGlmdCkpO1xuICB9O1xuXG4gIE1vbnQucHJvdG90eXBlLmNvbnZlcnRGcm9tID0gZnVuY3Rpb24gY29udmVydEZyb20gKG51bSkge1xuICAgIHZhciByID0gdGhpcy5pbW9kKG51bS5tdWwodGhpcy5yaW52KSk7XG4gICAgci5yZWQgPSBudWxsO1xuICAgIHJldHVybiByO1xuICB9O1xuXG4gIE1vbnQucHJvdG90eXBlLmltdWwgPSBmdW5jdGlvbiBpbXVsIChhLCBiKSB7XG4gICAgaWYgKGEuaXNaZXJvKCkgfHwgYi5pc1plcm8oKSkge1xuICAgICAgYS53b3Jkc1swXSA9IDA7XG4gICAgICBhLmxlbmd0aCA9IDE7XG4gICAgICByZXR1cm4gYTtcbiAgICB9XG5cbiAgICB2YXIgdCA9IGEuaW11bChiKTtcbiAgICB2YXIgYyA9IHQubWFza24odGhpcy5zaGlmdCkubXVsKHRoaXMubWludikuaW1hc2tuKHRoaXMuc2hpZnQpLm11bCh0aGlzLm0pO1xuICAgIHZhciB1ID0gdC5pc3ViKGMpLml1c2hybih0aGlzLnNoaWZ0KTtcbiAgICB2YXIgcmVzID0gdTtcblxuICAgIGlmICh1LmNtcCh0aGlzLm0pID49IDApIHtcbiAgICAgIHJlcyA9IHUuaXN1Yih0aGlzLm0pO1xuICAgIH0gZWxzZSBpZiAodS5jbXBuKDApIDwgMCkge1xuICAgICAgcmVzID0gdS5pYWRkKHRoaXMubSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcy5fZm9yY2VSZWQodGhpcyk7XG4gIH07XG5cbiAgTW9udC5wcm90b3R5cGUubXVsID0gZnVuY3Rpb24gbXVsIChhLCBiKSB7XG4gICAgaWYgKGEuaXNaZXJvKCkgfHwgYi5pc1plcm8oKSkgcmV0dXJuIG5ldyBCTigwKS5fZm9yY2VSZWQodGhpcyk7XG5cbiAgICB2YXIgdCA9IGEubXVsKGIpO1xuICAgIHZhciBjID0gdC5tYXNrbih0aGlzLnNoaWZ0KS5tdWwodGhpcy5taW52KS5pbWFza24odGhpcy5zaGlmdCkubXVsKHRoaXMubSk7XG4gICAgdmFyIHUgPSB0LmlzdWIoYykuaXVzaHJuKHRoaXMuc2hpZnQpO1xuICAgIHZhciByZXMgPSB1O1xuICAgIGlmICh1LmNtcCh0aGlzLm0pID49IDApIHtcbiAgICAgIHJlcyA9IHUuaXN1Yih0aGlzLm0pO1xuICAgIH0gZWxzZSBpZiAodS5jbXBuKDApIDwgMCkge1xuICAgICAgcmVzID0gdS5pYWRkKHRoaXMubSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcy5fZm9yY2VSZWQodGhpcyk7XG4gIH07XG5cbiAgTW9udC5wcm90b3R5cGUuaW52bSA9IGZ1bmN0aW9uIGludm0gKGEpIHtcbiAgICAvLyAoQVIpXi0xICogUl4yID0gKEFeLTEgKiBSXi0xKSAqIFJeMiA9IEFeLTEgKiBSXG4gICAgdmFyIHJlcyA9IHRoaXMuaW1vZChhLl9pbnZtcCh0aGlzLm0pLm11bCh0aGlzLnIyKSk7XG4gICAgcmV0dXJuIHJlcy5fZm9yY2VSZWQodGhpcyk7XG4gIH07XG59KSh0eXBlb2YgbW9kdWxlID09PSAndW5kZWZpbmVkJyB8fCBtb2R1bGUsIHRoaXMpO1xuIiwiLy8gc2hpbSBmb3IgdXNpbmcgcHJvY2VzcyBpbiBicm93c2VyXG52YXIgcHJvY2VzcyA9IG1vZHVsZS5leHBvcnRzID0ge307XG5cbi8vIGNhY2hlZCBmcm9tIHdoYXRldmVyIGdsb2JhbCBpcyBwcmVzZW50IHNvIHRoYXQgdGVzdCBydW5uZXJzIHRoYXQgc3R1YiBpdFxuLy8gZG9uJ3QgYnJlYWsgdGhpbmdzLiAgQnV0IHdlIG5lZWQgdG8gd3JhcCBpdCBpbiBhIHRyeSBjYXRjaCBpbiBjYXNlIGl0IGlzXG4vLyB3cmFwcGVkIGluIHN0cmljdCBtb2RlIGNvZGUgd2hpY2ggZG9lc24ndCBkZWZpbmUgYW55IGdsb2JhbHMuICBJdCdzIGluc2lkZSBhXG4vLyBmdW5jdGlvbiBiZWNhdXNlIHRyeS9jYXRjaGVzIGRlb3B0aW1pemUgaW4gY2VydGFpbiBlbmdpbmVzLlxuXG52YXIgY2FjaGVkU2V0VGltZW91dDtcbnZhciBjYWNoZWRDbGVhclRpbWVvdXQ7XG5cbmZ1bmN0aW9uIGRlZmF1bHRTZXRUaW1vdXQoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdzZXRUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG5mdW5jdGlvbiBkZWZhdWx0Q2xlYXJUaW1lb3V0ICgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NsZWFyVGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuKGZ1bmN0aW9uICgpIHtcbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIHNldFRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIGNsZWFyVGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICB9XG59ICgpKVxuZnVuY3Rpb24gcnVuVGltZW91dChmdW4pIHtcbiAgICBpZiAoY2FjaGVkU2V0VGltZW91dCA9PT0gc2V0VGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgLy8gaWYgc2V0VGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZFNldFRpbWVvdXQgPT09IGRlZmF1bHRTZXRUaW1vdXQgfHwgIWNhY2hlZFNldFRpbWVvdXQpICYmIHNldFRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9IGNhdGNoKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0IHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKG51bGwsIGZ1biwgMCk7XG4gICAgICAgIH0gY2F0Y2goZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvclxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbCh0aGlzLCBmdW4sIDApO1xuICAgICAgICB9XG4gICAgfVxuXG5cbn1cbmZ1bmN0aW9uIHJ1bkNsZWFyVGltZW91dChtYXJrZXIpIHtcbiAgICBpZiAoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgLy8gaWYgY2xlYXJUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBkZWZhdWx0Q2xlYXJUaW1lb3V0IHx8ICFjYWNoZWRDbGVhclRpbWVvdXQpICYmIGNsZWFyVGltZW91dCkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfSBjYXRjaCAoZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgIHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwobnVsbCwgbWFya2VyKTtcbiAgICAgICAgfSBjYXRjaCAoZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvci5cbiAgICAgICAgICAgIC8vIFNvbWUgdmVyc2lvbnMgb2YgSS5FLiBoYXZlIGRpZmZlcmVudCBydWxlcyBmb3IgY2xlYXJUaW1lb3V0IHZzIHNldFRpbWVvdXRcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbCh0aGlzLCBtYXJrZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG5cblxufVxudmFyIHF1ZXVlID0gW107XG52YXIgZHJhaW5pbmcgPSBmYWxzZTtcbnZhciBjdXJyZW50UXVldWU7XG52YXIgcXVldWVJbmRleCA9IC0xO1xuXG5mdW5jdGlvbiBjbGVhblVwTmV4dFRpY2soKSB7XG4gICAgaWYgKCFkcmFpbmluZyB8fCAhY3VycmVudFF1ZXVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBpZiAoY3VycmVudFF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBxdWV1ZSA9IGN1cnJlbnRRdWV1ZS5jb25jYXQocXVldWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICB9XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBkcmFpblF1ZXVlKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkcmFpblF1ZXVlKCkge1xuICAgIGlmIChkcmFpbmluZykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciB0aW1lb3V0ID0gcnVuVGltZW91dChjbGVhblVwTmV4dFRpY2spO1xuICAgIGRyYWluaW5nID0gdHJ1ZTtcblxuICAgIHZhciBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgd2hpbGUobGVuKSB7XG4gICAgICAgIGN1cnJlbnRRdWV1ZSA9IHF1ZXVlO1xuICAgICAgICBxdWV1ZSA9IFtdO1xuICAgICAgICB3aGlsZSAoKytxdWV1ZUluZGV4IDwgbGVuKSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudFF1ZXVlKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFF1ZXVlW3F1ZXVlSW5kZXhdLnJ1bigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICAgICAgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIH1cbiAgICBjdXJyZW50UXVldWUgPSBudWxsO1xuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgcnVuQ2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xufVxuXG5wcm9jZXNzLm5leHRUaWNrID0gZnVuY3Rpb24gKGZ1bikge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHF1ZXVlLnB1c2gobmV3IEl0ZW0oZnVuLCBhcmdzKSk7XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCA9PT0gMSAmJiAhZHJhaW5pbmcpIHtcbiAgICAgICAgcnVuVGltZW91dChkcmFpblF1ZXVlKTtcbiAgICB9XG59O1xuXG4vLyB2OCBsaWtlcyBwcmVkaWN0aWJsZSBvYmplY3RzXG5mdW5jdGlvbiBJdGVtKGZ1biwgYXJyYXkpIHtcbiAgICB0aGlzLmZ1biA9IGZ1bjtcbiAgICB0aGlzLmFycmF5ID0gYXJyYXk7XG59XG5JdGVtLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5mdW4uYXBwbHkobnVsbCwgdGhpcy5hcnJheSk7XG59O1xucHJvY2Vzcy50aXRsZSA9ICdicm93c2VyJztcbnByb2Nlc3MuYnJvd3NlciA9IHRydWU7XG5wcm9jZXNzLmVudiA9IHt9O1xucHJvY2Vzcy5hcmd2ID0gW107XG5wcm9jZXNzLnZlcnNpb24gPSAnJzsgLy8gZW1wdHkgc3RyaW5nIHRvIGF2b2lkIHJlZ2V4cCBpc3N1ZXNcbnByb2Nlc3MudmVyc2lvbnMgPSB7fTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnByb2Nlc3Mub24gPSBub29wO1xucHJvY2Vzcy5hZGRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLm9uY2UgPSBub29wO1xucHJvY2Vzcy5vZmYgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUFsbExpc3RlbmVycyA9IG5vb3A7XG5wcm9jZXNzLmVtaXQgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kT25jZUxpc3RlbmVyID0gbm9vcDtcblxucHJvY2Vzcy5saXN0ZW5lcnMgPSBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gW10gfVxuXG5wcm9jZXNzLmJpbmRpbmcgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5cbnByb2Nlc3MuY3dkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJy8nIH07XG5wcm9jZXNzLmNoZGlyID0gZnVuY3Rpb24gKGRpcikge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xucHJvY2Vzcy51bWFzayA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gMDsgfTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGJpbmQgPSByZXF1aXJlKCcuL2hlbHBlcnMvYmluZCcpO1xudmFyIGlzQnVmZmVyID0gcmVxdWlyZSgnaXMtYnVmZmVyJyk7XG5cbi8qZ2xvYmFsIHRvU3RyaW5nOnRydWUqL1xuXG4vLyB1dGlscyBpcyBhIGxpYnJhcnkgb2YgZ2VuZXJpYyBoZWxwZXIgZnVuY3Rpb25zIG5vbi1zcGVjaWZpYyB0byBheGlvc1xuXG52YXIgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIEFycmF5XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gQXJyYXksIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5KHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBBcnJheV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIEFycmF5QnVmZmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gQXJyYXlCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRm9ybURhdGFcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBGb3JtRGF0YSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRm9ybURhdGEodmFsKSB7XG4gIHJldHVybiAodHlwZW9mIEZvcm1EYXRhICE9PSAndW5kZWZpbmVkJykgJiYgKHZhbCBpbnN0YW5jZW9mIEZvcm1EYXRhKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIHZpZXcgb24gYW4gQXJyYXlCdWZmZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIHZpZXcgb24gYW4gQXJyYXlCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyVmlldyh2YWwpIHtcbiAgdmFyIHJlc3VsdDtcbiAgaWYgKCh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnKSAmJiAoQXJyYXlCdWZmZXIuaXNWaWV3KSkge1xuICAgIHJlc3VsdCA9IEFycmF5QnVmZmVyLmlzVmlldyh2YWwpO1xuICB9IGVsc2Uge1xuICAgIHJlc3VsdCA9ICh2YWwpICYmICh2YWwuYnVmZmVyKSAmJiAodmFsLmJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgU3RyaW5nXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBTdHJpbmcsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N0cmluZyh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgTnVtYmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBOdW1iZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc051bWJlcih2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdudW1iZXInO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIHVuZGVmaW5lZFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSB2YWx1ZSBpcyB1bmRlZmluZWQsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1VuZGVmaW5lZCh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICd1bmRlZmluZWQnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIE9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIE9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbCkge1xuICByZXR1cm4gdmFsICE9PSBudWxsICYmIHR5cGVvZiB2YWwgPT09ICdvYmplY3QnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRGF0ZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRGF0ZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRGF0ZSh2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRmlsZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRmlsZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRmlsZSh2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRmlsZV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgQmxvYlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgQmxvYiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQmxvYih2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgQmxvYl0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRnVuY3Rpb25cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEZ1bmN0aW9uLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGdW5jdGlvbih2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFN0cmVhbVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgU3RyZWFtLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTdHJlYW0odmFsKSB7XG4gIHJldHVybiBpc09iamVjdCh2YWwpICYmIGlzRnVuY3Rpb24odmFsLnBpcGUpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzVVJMU2VhcmNoUGFyYW1zKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIFVSTFNlYXJjaFBhcmFtcyAhPT0gJ3VuZGVmaW5lZCcgJiYgdmFsIGluc3RhbmNlb2YgVVJMU2VhcmNoUGFyYW1zO1xufVxuXG4vKipcbiAqIFRyaW0gZXhjZXNzIHdoaXRlc3BhY2Ugb2ZmIHRoZSBiZWdpbm5pbmcgYW5kIGVuZCBvZiBhIHN0cmluZ1xuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHIgVGhlIFN0cmluZyB0byB0cmltXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgU3RyaW5nIGZyZWVkIG9mIGV4Y2VzcyB3aGl0ZXNwYWNlXG4gKi9cbmZ1bmN0aW9uIHRyaW0oc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvXlxccyovLCAnJykucmVwbGFjZSgvXFxzKiQvLCAnJyk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIHdlJ3JlIHJ1bm5pbmcgaW4gYSBzdGFuZGFyZCBicm93c2VyIGVudmlyb25tZW50XG4gKlxuICogVGhpcyBhbGxvd3MgYXhpb3MgdG8gcnVuIGluIGEgd2ViIHdvcmtlciwgYW5kIHJlYWN0LW5hdGl2ZS5cbiAqIEJvdGggZW52aXJvbm1lbnRzIHN1cHBvcnQgWE1MSHR0cFJlcXVlc3QsIGJ1dCBub3QgZnVsbHkgc3RhbmRhcmQgZ2xvYmFscy5cbiAqXG4gKiB3ZWIgd29ya2VyczpcbiAqICB0eXBlb2Ygd2luZG93IC0+IHVuZGVmaW5lZFxuICogIHR5cGVvZiBkb2N1bWVudCAtPiB1bmRlZmluZWRcbiAqXG4gKiByZWFjdC1uYXRpdmU6XG4gKiAgbmF2aWdhdG9yLnByb2R1Y3QgLT4gJ1JlYWN0TmF0aXZlJ1xuICogbmF0aXZlc2NyaXB0XG4gKiAgbmF2aWdhdG9yLnByb2R1Y3QgLT4gJ05hdGl2ZVNjcmlwdCcgb3IgJ05TJ1xuICovXG5mdW5jdGlvbiBpc1N0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgaWYgKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIChuYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ1JlYWN0TmF0aXZlJyB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hdmlnYXRvci5wcm9kdWN0ID09PSAnTmF0aXZlU2NyaXB0JyB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hdmlnYXRvci5wcm9kdWN0ID09PSAnTlMnKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gKFxuICAgIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmXG4gICAgdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJ1xuICApO1xufVxuXG4vKipcbiAqIEl0ZXJhdGUgb3ZlciBhbiBBcnJheSBvciBhbiBPYmplY3QgaW52b2tpbmcgYSBmdW5jdGlvbiBmb3IgZWFjaCBpdGVtLlxuICpcbiAqIElmIGBvYmpgIGlzIGFuIEFycmF5IGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIHBhc3NpbmdcbiAqIHRoZSB2YWx1ZSwgaW5kZXgsIGFuZCBjb21wbGV0ZSBhcnJheSBmb3IgZWFjaCBpdGVtLlxuICpcbiAqIElmICdvYmonIGlzIGFuIE9iamVjdCBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBwYXNzaW5nXG4gKiB0aGUgdmFsdWUsIGtleSwgYW5kIGNvbXBsZXRlIG9iamVjdCBmb3IgZWFjaCBwcm9wZXJ0eS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdHxBcnJheX0gb2JqIFRoZSBvYmplY3QgdG8gaXRlcmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGNhbGxiYWNrIHRvIGludm9rZSBmb3IgZWFjaCBpdGVtXG4gKi9cbmZ1bmN0aW9uIGZvckVhY2gob2JqLCBmbikge1xuICAvLyBEb24ndCBib3RoZXIgaWYgbm8gdmFsdWUgcHJvdmlkZWRcbiAgaWYgKG9iaiA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIEZvcmNlIGFuIGFycmF5IGlmIG5vdCBhbHJlYWR5IHNvbWV0aGluZyBpdGVyYWJsZVxuICBpZiAodHlwZW9mIG9iaiAhPT0gJ29iamVjdCcpIHtcbiAgICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgICBvYmogPSBbb2JqXTtcbiAgfVxuXG4gIGlmIChpc0FycmF5KG9iaikpIHtcbiAgICAvLyBJdGVyYXRlIG92ZXIgYXJyYXkgdmFsdWVzXG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBvYmoubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBmbi5jYWxsKG51bGwsIG9ialtpXSwgaSwgb2JqKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gSXRlcmF0ZSBvdmVyIG9iamVjdCBrZXlzXG4gICAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHtcbiAgICAgICAgZm4uY2FsbChudWxsLCBvYmpba2V5XSwga2V5LCBvYmopO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEFjY2VwdHMgdmFyYXJncyBleHBlY3RpbmcgZWFjaCBhcmd1bWVudCB0byBiZSBhbiBvYmplY3QsIHRoZW5cbiAqIGltbXV0YWJseSBtZXJnZXMgdGhlIHByb3BlcnRpZXMgb2YgZWFjaCBvYmplY3QgYW5kIHJldHVybnMgcmVzdWx0LlxuICpcbiAqIFdoZW4gbXVsdGlwbGUgb2JqZWN0cyBjb250YWluIHRoZSBzYW1lIGtleSB0aGUgbGF0ZXIgb2JqZWN0IGluXG4gKiB0aGUgYXJndW1lbnRzIGxpc3Qgd2lsbCB0YWtlIHByZWNlZGVuY2UuXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiBgYGBqc1xuICogdmFyIHJlc3VsdCA9IG1lcmdlKHtmb286IDEyM30sIHtmb286IDQ1Nn0pO1xuICogY29uc29sZS5sb2cocmVzdWx0LmZvbyk7IC8vIG91dHB1dHMgNDU2XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqMSBPYmplY3QgdG8gbWVyZ2VcbiAqIEByZXR1cm5zIHtPYmplY3R9IFJlc3VsdCBvZiBhbGwgbWVyZ2UgcHJvcGVydGllc1xuICovXG5mdW5jdGlvbiBtZXJnZSgvKiBvYmoxLCBvYmoyLCBvYmozLCAuLi4gKi8pIHtcbiAgdmFyIHJlc3VsdCA9IHt9O1xuICBmdW5jdGlvbiBhc3NpZ25WYWx1ZSh2YWwsIGtleSkge1xuICAgIGlmICh0eXBlb2YgcmVzdWx0W2tleV0gPT09ICdvYmplY3QnICYmIHR5cGVvZiB2YWwgPT09ICdvYmplY3QnKSB7XG4gICAgICByZXN1bHRba2V5XSA9IG1lcmdlKHJlc3VsdFtrZXldLCB2YWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHRba2V5XSA9IHZhbDtcbiAgICB9XG4gIH1cblxuICBmb3IgKHZhciBpID0gMCwgbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBmb3JFYWNoKGFyZ3VtZW50c1tpXSwgYXNzaWduVmFsdWUpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogRnVuY3Rpb24gZXF1YWwgdG8gbWVyZ2Ugd2l0aCB0aGUgZGlmZmVyZW5jZSBiZWluZyB0aGF0IG5vIHJlZmVyZW5jZVxuICogdG8gb3JpZ2luYWwgb2JqZWN0cyBpcyBrZXB0LlxuICpcbiAqIEBzZWUgbWVyZ2VcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmoxIE9iamVjdCB0byBtZXJnZVxuICogQHJldHVybnMge09iamVjdH0gUmVzdWx0IG9mIGFsbCBtZXJnZSBwcm9wZXJ0aWVzXG4gKi9cbmZ1bmN0aW9uIGRlZXBNZXJnZSgvKiBvYmoxLCBvYmoyLCBvYmozLCAuLi4gKi8pIHtcbiAgdmFyIHJlc3VsdCA9IHt9O1xuICBmdW5jdGlvbiBhc3NpZ25WYWx1ZSh2YWwsIGtleSkge1xuICAgIGlmICh0eXBlb2YgcmVzdWx0W2tleV0gPT09ICdvYmplY3QnICYmIHR5cGVvZiB2YWwgPT09ICdvYmplY3QnKSB7XG4gICAgICByZXN1bHRba2V5XSA9IGRlZXBNZXJnZShyZXN1bHRba2V5XSwgdmFsKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdvYmplY3QnKSB7XG4gICAgICByZXN1bHRba2V5XSA9IGRlZXBNZXJnZSh7fSwgdmFsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0W2tleV0gPSB2YWw7XG4gICAgfVxuICB9XG5cbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgZm9yRWFjaChhcmd1bWVudHNbaV0sIGFzc2lnblZhbHVlKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIEV4dGVuZHMgb2JqZWN0IGEgYnkgbXV0YWJseSBhZGRpbmcgdG8gaXQgdGhlIHByb3BlcnRpZXMgb2Ygb2JqZWN0IGIuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGEgVGhlIG9iamVjdCB0byBiZSBleHRlbmRlZFxuICogQHBhcmFtIHtPYmplY3R9IGIgVGhlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgZnJvbVxuICogQHBhcmFtIHtPYmplY3R9IHRoaXNBcmcgVGhlIG9iamVjdCB0byBiaW5kIGZ1bmN0aW9uIHRvXG4gKiBAcmV0dXJuIHtPYmplY3R9IFRoZSByZXN1bHRpbmcgdmFsdWUgb2Ygb2JqZWN0IGFcbiAqL1xuZnVuY3Rpb24gZXh0ZW5kKGEsIGIsIHRoaXNBcmcpIHtcbiAgZm9yRWFjaChiLCBmdW5jdGlvbiBhc3NpZ25WYWx1ZSh2YWwsIGtleSkge1xuICAgIGlmICh0aGlzQXJnICYmIHR5cGVvZiB2YWwgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGFba2V5XSA9IGJpbmQodmFsLCB0aGlzQXJnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYVtrZXldID0gdmFsO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBhO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgaXNBcnJheTogaXNBcnJheSxcbiAgaXNBcnJheUJ1ZmZlcjogaXNBcnJheUJ1ZmZlcixcbiAgaXNCdWZmZXI6IGlzQnVmZmVyLFxuICBpc0Zvcm1EYXRhOiBpc0Zvcm1EYXRhLFxuICBpc0FycmF5QnVmZmVyVmlldzogaXNBcnJheUJ1ZmZlclZpZXcsXG4gIGlzU3RyaW5nOiBpc1N0cmluZyxcbiAgaXNOdW1iZXI6IGlzTnVtYmVyLFxuICBpc09iamVjdDogaXNPYmplY3QsXG4gIGlzVW5kZWZpbmVkOiBpc1VuZGVmaW5lZCxcbiAgaXNEYXRlOiBpc0RhdGUsXG4gIGlzRmlsZTogaXNGaWxlLFxuICBpc0Jsb2I6IGlzQmxvYixcbiAgaXNGdW5jdGlvbjogaXNGdW5jdGlvbixcbiAgaXNTdHJlYW06IGlzU3RyZWFtLFxuICBpc1VSTFNlYXJjaFBhcmFtczogaXNVUkxTZWFyY2hQYXJhbXMsXG4gIGlzU3RhbmRhcmRCcm93c2VyRW52OiBpc1N0YW5kYXJkQnJvd3NlckVudixcbiAgZm9yRWFjaDogZm9yRWFjaCxcbiAgbWVyZ2U6IG1lcmdlLFxuICBkZWVwTWVyZ2U6IGRlZXBNZXJnZSxcbiAgZXh0ZW5kOiBleHRlbmQsXG4gIHRyaW06IHRyaW1cbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGFzc2VydDtcblxuZnVuY3Rpb24gYXNzZXJ0KHZhbCwgbXNnKSB7XG4gIGlmICghdmFsKVxuICAgIHRocm93IG5ldyBFcnJvcihtc2cgfHwgJ0Fzc2VydGlvbiBmYWlsZWQnKTtcbn1cblxuYXNzZXJ0LmVxdWFsID0gZnVuY3Rpb24gYXNzZXJ0RXF1YWwobCwgciwgbXNnKSB7XG4gIGlmIChsICE9IHIpXG4gICAgdGhyb3cgbmV3IEVycm9yKG1zZyB8fCAoJ0Fzc2VydGlvbiBmYWlsZWQ6ICcgKyBsICsgJyAhPSAnICsgcikpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gZXhwb3J0cztcbnZhciBCTiA9IHJlcXVpcmUoJ2JuLmpzJyk7XG52YXIgbWluQXNzZXJ0ID0gcmVxdWlyZSgnbWluaW1hbGlzdGljLWFzc2VydCcpO1xudmFyIG1pblV0aWxzID0gcmVxdWlyZSgnbWluaW1hbGlzdGljLWNyeXB0by11dGlscycpO1xuXG51dGlscy5hc3NlcnQgPSBtaW5Bc3NlcnQ7XG51dGlscy50b0FycmF5ID0gbWluVXRpbHMudG9BcnJheTtcbnV0aWxzLnplcm8yID0gbWluVXRpbHMuemVybzI7XG51dGlscy50b0hleCA9IG1pblV0aWxzLnRvSGV4O1xudXRpbHMuZW5jb2RlID0gbWluVXRpbHMuZW5jb2RlO1xuXG4vLyBSZXByZXNlbnQgbnVtIGluIGEgdy1OQUYgZm9ybVxuZnVuY3Rpb24gZ2V0TkFGKG51bSwgdykge1xuICB2YXIgbmFmID0gW107XG4gIHZhciB3cyA9IDEgPDwgKHcgKyAxKTtcbiAgdmFyIGsgPSBudW0uY2xvbmUoKTtcbiAgd2hpbGUgKGsuY21wbigxKSA+PSAwKSB7XG4gICAgdmFyIHo7XG4gICAgaWYgKGsuaXNPZGQoKSkge1xuICAgICAgdmFyIG1vZCA9IGsuYW5kbG4od3MgLSAxKTtcbiAgICAgIGlmIChtb2QgPiAod3MgPj4gMSkgLSAxKVxuICAgICAgICB6ID0gKHdzID4+IDEpIC0gbW9kO1xuICAgICAgZWxzZVxuICAgICAgICB6ID0gbW9kO1xuICAgICAgay5pc3Vibih6KTtcbiAgICB9IGVsc2Uge1xuICAgICAgeiA9IDA7XG4gICAgfVxuICAgIG5hZi5wdXNoKHopO1xuXG4gICAgLy8gT3B0aW1pemF0aW9uLCBzaGlmdCBieSB3b3JkIGlmIHBvc3NpYmxlXG4gICAgdmFyIHNoaWZ0ID0gKGsuY21wbigwKSAhPT0gMCAmJiBrLmFuZGxuKHdzIC0gMSkgPT09IDApID8gKHcgKyAxKSA6IDE7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBzaGlmdDsgaSsrKVxuICAgICAgbmFmLnB1c2goMCk7XG4gICAgay5pdXNocm4oc2hpZnQpO1xuICB9XG5cbiAgcmV0dXJuIG5hZjtcbn1cbnV0aWxzLmdldE5BRiA9IGdldE5BRjtcblxuLy8gUmVwcmVzZW50IGsxLCBrMiBpbiBhIEpvaW50IFNwYXJzZSBGb3JtXG5mdW5jdGlvbiBnZXRKU0YoazEsIGsyKSB7XG4gIHZhciBqc2YgPSBbXG4gICAgW10sXG4gICAgW11cbiAgXTtcblxuICBrMSA9IGsxLmNsb25lKCk7XG4gIGsyID0gazIuY2xvbmUoKTtcbiAgdmFyIGQxID0gMDtcbiAgdmFyIGQyID0gMDtcbiAgd2hpbGUgKGsxLmNtcG4oLWQxKSA+IDAgfHwgazIuY21wbigtZDIpID4gMCkge1xuXG4gICAgLy8gRmlyc3QgcGhhc2VcbiAgICB2YXIgbTE0ID0gKGsxLmFuZGxuKDMpICsgZDEpICYgMztcbiAgICB2YXIgbTI0ID0gKGsyLmFuZGxuKDMpICsgZDIpICYgMztcbiAgICBpZiAobTE0ID09PSAzKVxuICAgICAgbTE0ID0gLTE7XG4gICAgaWYgKG0yNCA9PT0gMylcbiAgICAgIG0yNCA9IC0xO1xuICAgIHZhciB1MTtcbiAgICBpZiAoKG0xNCAmIDEpID09PSAwKSB7XG4gICAgICB1MSA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBtOCA9IChrMS5hbmRsbig3KSArIGQxKSAmIDc7XG4gICAgICBpZiAoKG04ID09PSAzIHx8IG04ID09PSA1KSAmJiBtMjQgPT09IDIpXG4gICAgICAgIHUxID0gLW0xNDtcbiAgICAgIGVsc2VcbiAgICAgICAgdTEgPSBtMTQ7XG4gICAgfVxuICAgIGpzZlswXS5wdXNoKHUxKTtcblxuICAgIHZhciB1MjtcbiAgICBpZiAoKG0yNCAmIDEpID09PSAwKSB7XG4gICAgICB1MiA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBtOCA9IChrMi5hbmRsbig3KSArIGQyKSAmIDc7XG4gICAgICBpZiAoKG04ID09PSAzIHx8IG04ID09PSA1KSAmJiBtMTQgPT09IDIpXG4gICAgICAgIHUyID0gLW0yNDtcbiAgICAgIGVsc2VcbiAgICAgICAgdTIgPSBtMjQ7XG4gICAgfVxuICAgIGpzZlsxXS5wdXNoKHUyKTtcblxuICAgIC8vIFNlY29uZCBwaGFzZVxuICAgIGlmICgyICogZDEgPT09IHUxICsgMSlcbiAgICAgIGQxID0gMSAtIGQxO1xuICAgIGlmICgyICogZDIgPT09IHUyICsgMSlcbiAgICAgIGQyID0gMSAtIGQyO1xuICAgIGsxLml1c2hybigxKTtcbiAgICBrMi5pdXNocm4oMSk7XG4gIH1cblxuICByZXR1cm4ganNmO1xufVxudXRpbHMuZ2V0SlNGID0gZ2V0SlNGO1xuXG5mdW5jdGlvbiBjYWNoZWRQcm9wZXJ0eShvYmosIG5hbWUsIGNvbXB1dGVyKSB7XG4gIHZhciBrZXkgPSAnXycgKyBuYW1lO1xuICBvYmoucHJvdG90eXBlW25hbWVdID0gZnVuY3Rpb24gY2FjaGVkUHJvcGVydHkoKSB7XG4gICAgcmV0dXJuIHRoaXNba2V5XSAhPT0gdW5kZWZpbmVkID8gdGhpc1trZXldIDpcbiAgICAgICAgICAgdGhpc1trZXldID0gY29tcHV0ZXIuY2FsbCh0aGlzKTtcbiAgfTtcbn1cbnV0aWxzLmNhY2hlZFByb3BlcnR5ID0gY2FjaGVkUHJvcGVydHk7XG5cbmZ1bmN0aW9uIHBhcnNlQnl0ZXMoYnl0ZXMpIHtcbiAgcmV0dXJuIHR5cGVvZiBieXRlcyA9PT0gJ3N0cmluZycgPyB1dGlscy50b0FycmF5KGJ5dGVzLCAnaGV4JykgOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ5dGVzO1xufVxudXRpbHMucGFyc2VCeXRlcyA9IHBhcnNlQnl0ZXM7XG5cbmZ1bmN0aW9uIGludEZyb21MRShieXRlcykge1xuICByZXR1cm4gbmV3IEJOKGJ5dGVzLCAnaGV4JywgJ2xlJyk7XG59XG51dGlscy5pbnRGcm9tTEUgPSBpbnRGcm9tTEU7XG5cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGFzc2VydCA9IHJlcXVpcmUoJ21pbmltYWxpc3RpYy1hc3NlcnQnKTtcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG5cbmV4cG9ydHMuaW5oZXJpdHMgPSBpbmhlcml0cztcblxuZnVuY3Rpb24gaXNTdXJyb2dhdGVQYWlyKG1zZywgaSkge1xuICBpZiAoKG1zZy5jaGFyQ29kZUF0KGkpICYgMHhGQzAwKSAhPT0gMHhEODAwKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmIChpIDwgMCB8fCBpICsgMSA+PSBtc2cubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiAobXNnLmNoYXJDb2RlQXQoaSArIDEpICYgMHhGQzAwKSA9PT0gMHhEQzAwO1xufVxuXG5mdW5jdGlvbiB0b0FycmF5KG1zZywgZW5jKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KG1zZykpXG4gICAgcmV0dXJuIG1zZy5zbGljZSgpO1xuICBpZiAoIW1zZylcbiAgICByZXR1cm4gW107XG4gIHZhciByZXMgPSBbXTtcbiAgaWYgKHR5cGVvZiBtc2cgPT09ICdzdHJpbmcnKSB7XG4gICAgaWYgKCFlbmMpIHtcbiAgICAgIC8vIEluc3BpcmVkIGJ5IHN0cmluZ1RvVXRmOEJ5dGVBcnJheSgpIGluIGNsb3N1cmUtbGlicmFyeSBieSBHb29nbGVcbiAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9nb29nbGUvY2xvc3VyZS1saWJyYXJ5L2Jsb2IvODU5OGQ4NzI0MmFmNTlhYWMyMzMyNzA3NDJjODk4NGUyYjJiZGJlMC9jbG9zdXJlL2dvb2cvY3J5cHQvY3J5cHQuanMjTDExNy1MMTQzXG4gICAgICAvLyBBcGFjaGUgTGljZW5zZSAyLjBcbiAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9nb29nbGUvY2xvc3VyZS1saWJyYXJ5L2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAgICAgIHZhciBwID0gMDtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbXNnLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBjID0gbXNnLmNoYXJDb2RlQXQoaSk7XG4gICAgICAgIGlmIChjIDwgMTI4KSB7XG4gICAgICAgICAgcmVzW3ArK10gPSBjO1xuICAgICAgICB9IGVsc2UgaWYgKGMgPCAyMDQ4KSB7XG4gICAgICAgICAgcmVzW3ArK10gPSAoYyA+PiA2KSB8IDE5MjtcbiAgICAgICAgICByZXNbcCsrXSA9IChjICYgNjMpIHwgMTI4O1xuICAgICAgICB9IGVsc2UgaWYgKGlzU3Vycm9nYXRlUGFpcihtc2csIGkpKSB7XG4gICAgICAgICAgYyA9IDB4MTAwMDAgKyAoKGMgJiAweDAzRkYpIDw8IDEwKSArIChtc2cuY2hhckNvZGVBdCgrK2kpICYgMHgwM0ZGKTtcbiAgICAgICAgICByZXNbcCsrXSA9IChjID4+IDE4KSB8IDI0MDtcbiAgICAgICAgICByZXNbcCsrXSA9ICgoYyA+PiAxMikgJiA2MykgfCAxMjg7XG4gICAgICAgICAgcmVzW3ArK10gPSAoKGMgPj4gNikgJiA2MykgfCAxMjg7XG4gICAgICAgICAgcmVzW3ArK10gPSAoYyAmIDYzKSB8IDEyODtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXNbcCsrXSA9IChjID4+IDEyKSB8IDIyNDtcbiAgICAgICAgICByZXNbcCsrXSA9ICgoYyA+PiA2KSAmIDYzKSB8IDEyODtcbiAgICAgICAgICByZXNbcCsrXSA9IChjICYgNjMpIHwgMTI4O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChlbmMgPT09ICdoZXgnKSB7XG4gICAgICBtc2cgPSBtc2cucmVwbGFjZSgvW15hLXowLTldKy9pZywgJycpO1xuICAgICAgaWYgKG1zZy5sZW5ndGggJSAyICE9PSAwKVxuICAgICAgICBtc2cgPSAnMCcgKyBtc2c7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbXNnLmxlbmd0aDsgaSArPSAyKVxuICAgICAgICByZXMucHVzaChwYXJzZUludChtc2dbaV0gKyBtc2dbaSArIDFdLCAxNikpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbXNnLmxlbmd0aDsgaSsrKVxuICAgICAgcmVzW2ldID0gbXNnW2ldIHwgMDtcbiAgfVxuICByZXR1cm4gcmVzO1xufVxuZXhwb3J0cy50b0FycmF5ID0gdG9BcnJheTtcblxuZnVuY3Rpb24gdG9IZXgobXNnKSB7XG4gIHZhciByZXMgPSAnJztcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBtc2cubGVuZ3RoOyBpKyspXG4gICAgcmVzICs9IHplcm8yKG1zZ1tpXS50b1N0cmluZygxNikpO1xuICByZXR1cm4gcmVzO1xufVxuZXhwb3J0cy50b0hleCA9IHRvSGV4O1xuXG5mdW5jdGlvbiBodG9ubCh3KSB7XG4gIHZhciByZXMgPSAodyA+Pj4gMjQpIHxcbiAgICAgICAgICAgICgodyA+Pj4gOCkgJiAweGZmMDApIHxcbiAgICAgICAgICAgICgodyA8PCA4KSAmIDB4ZmYwMDAwKSB8XG4gICAgICAgICAgICAoKHcgJiAweGZmKSA8PCAyNCk7XG4gIHJldHVybiByZXMgPj4+IDA7XG59XG5leHBvcnRzLmh0b25sID0gaHRvbmw7XG5cbmZ1bmN0aW9uIHRvSGV4MzIobXNnLCBlbmRpYW4pIHtcbiAgdmFyIHJlcyA9ICcnO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IG1zZy5sZW5ndGg7IGkrKykge1xuICAgIHZhciB3ID0gbXNnW2ldO1xuICAgIGlmIChlbmRpYW4gPT09ICdsaXR0bGUnKVxuICAgICAgdyA9IGh0b25sKHcpO1xuICAgIHJlcyArPSB6ZXJvOCh3LnRvU3RyaW5nKDE2KSk7XG4gIH1cbiAgcmV0dXJuIHJlcztcbn1cbmV4cG9ydHMudG9IZXgzMiA9IHRvSGV4MzI7XG5cbmZ1bmN0aW9uIHplcm8yKHdvcmQpIHtcbiAgaWYgKHdvcmQubGVuZ3RoID09PSAxKVxuICAgIHJldHVybiAnMCcgKyB3b3JkO1xuICBlbHNlXG4gICAgcmV0dXJuIHdvcmQ7XG59XG5leHBvcnRzLnplcm8yID0gemVybzI7XG5cbmZ1bmN0aW9uIHplcm84KHdvcmQpIHtcbiAgaWYgKHdvcmQubGVuZ3RoID09PSA3KVxuICAgIHJldHVybiAnMCcgKyB3b3JkO1xuICBlbHNlIGlmICh3b3JkLmxlbmd0aCA9PT0gNilcbiAgICByZXR1cm4gJzAwJyArIHdvcmQ7XG4gIGVsc2UgaWYgKHdvcmQubGVuZ3RoID09PSA1KVxuICAgIHJldHVybiAnMDAwJyArIHdvcmQ7XG4gIGVsc2UgaWYgKHdvcmQubGVuZ3RoID09PSA0KVxuICAgIHJldHVybiAnMDAwMCcgKyB3b3JkO1xuICBlbHNlIGlmICh3b3JkLmxlbmd0aCA9PT0gMylcbiAgICByZXR1cm4gJzAwMDAwJyArIHdvcmQ7XG4gIGVsc2UgaWYgKHdvcmQubGVuZ3RoID09PSAyKVxuICAgIHJldHVybiAnMDAwMDAwJyArIHdvcmQ7XG4gIGVsc2UgaWYgKHdvcmQubGVuZ3RoID09PSAxKVxuICAgIHJldHVybiAnMDAwMDAwMCcgKyB3b3JkO1xuICBlbHNlXG4gICAgcmV0dXJuIHdvcmQ7XG59XG5leHBvcnRzLnplcm84ID0gemVybzg7XG5cbmZ1bmN0aW9uIGpvaW4zMihtc2csIHN0YXJ0LCBlbmQsIGVuZGlhbikge1xuICB2YXIgbGVuID0gZW5kIC0gc3RhcnQ7XG4gIGFzc2VydChsZW4gJSA0ID09PSAwKTtcbiAgdmFyIHJlcyA9IG5ldyBBcnJheShsZW4gLyA0KTtcbiAgZm9yICh2YXIgaSA9IDAsIGsgPSBzdGFydDsgaSA8IHJlcy5sZW5ndGg7IGkrKywgayArPSA0KSB7XG4gICAgdmFyIHc7XG4gICAgaWYgKGVuZGlhbiA9PT0gJ2JpZycpXG4gICAgICB3ID0gKG1zZ1trXSA8PCAyNCkgfCAobXNnW2sgKyAxXSA8PCAxNikgfCAobXNnW2sgKyAyXSA8PCA4KSB8IG1zZ1trICsgM107XG4gICAgZWxzZVxuICAgICAgdyA9IChtc2dbayArIDNdIDw8IDI0KSB8IChtc2dbayArIDJdIDw8IDE2KSB8IChtc2dbayArIDFdIDw8IDgpIHwgbXNnW2tdO1xuICAgIHJlc1tpXSA9IHcgPj4+IDA7XG4gIH1cbiAgcmV0dXJuIHJlcztcbn1cbmV4cG9ydHMuam9pbjMyID0gam9pbjMyO1xuXG5mdW5jdGlvbiBzcGxpdDMyKG1zZywgZW5kaWFuKSB7XG4gIHZhciByZXMgPSBuZXcgQXJyYXkobXNnLmxlbmd0aCAqIDQpO1xuICBmb3IgKHZhciBpID0gMCwgayA9IDA7IGkgPCBtc2cubGVuZ3RoOyBpKyssIGsgKz0gNCkge1xuICAgIHZhciBtID0gbXNnW2ldO1xuICAgIGlmIChlbmRpYW4gPT09ICdiaWcnKSB7XG4gICAgICByZXNba10gPSBtID4+PiAyNDtcbiAgICAgIHJlc1trICsgMV0gPSAobSA+Pj4gMTYpICYgMHhmZjtcbiAgICAgIHJlc1trICsgMl0gPSAobSA+Pj4gOCkgJiAweGZmO1xuICAgICAgcmVzW2sgKyAzXSA9IG0gJiAweGZmO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXNbayArIDNdID0gbSA+Pj4gMjQ7XG4gICAgICByZXNbayArIDJdID0gKG0gPj4+IDE2KSAmIDB4ZmY7XG4gICAgICByZXNbayArIDFdID0gKG0gPj4+IDgpICYgMHhmZjtcbiAgICAgIHJlc1trXSA9IG0gJiAweGZmO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzO1xufVxuZXhwb3J0cy5zcGxpdDMyID0gc3BsaXQzMjtcblxuZnVuY3Rpb24gcm90cjMyKHcsIGIpIHtcbiAgcmV0dXJuICh3ID4+PiBiKSB8ICh3IDw8ICgzMiAtIGIpKTtcbn1cbmV4cG9ydHMucm90cjMyID0gcm90cjMyO1xuXG5mdW5jdGlvbiByb3RsMzIodywgYikge1xuICByZXR1cm4gKHcgPDwgYikgfCAodyA+Pj4gKDMyIC0gYikpO1xufVxuZXhwb3J0cy5yb3RsMzIgPSByb3RsMzI7XG5cbmZ1bmN0aW9uIHN1bTMyKGEsIGIpIHtcbiAgcmV0dXJuIChhICsgYikgPj4+IDA7XG59XG5leHBvcnRzLnN1bTMyID0gc3VtMzI7XG5cbmZ1bmN0aW9uIHN1bTMyXzMoYSwgYiwgYykge1xuICByZXR1cm4gKGEgKyBiICsgYykgPj4+IDA7XG59XG5leHBvcnRzLnN1bTMyXzMgPSBzdW0zMl8zO1xuXG5mdW5jdGlvbiBzdW0zMl80KGEsIGIsIGMsIGQpIHtcbiAgcmV0dXJuIChhICsgYiArIGMgKyBkKSA+Pj4gMDtcbn1cbmV4cG9ydHMuc3VtMzJfNCA9IHN1bTMyXzQ7XG5cbmZ1bmN0aW9uIHN1bTMyXzUoYSwgYiwgYywgZCwgZSkge1xuICByZXR1cm4gKGEgKyBiICsgYyArIGQgKyBlKSA+Pj4gMDtcbn1cbmV4cG9ydHMuc3VtMzJfNSA9IHN1bTMyXzU7XG5cbmZ1bmN0aW9uIHN1bTY0KGJ1ZiwgcG9zLCBhaCwgYWwpIHtcbiAgdmFyIGJoID0gYnVmW3Bvc107XG4gIHZhciBibCA9IGJ1Zltwb3MgKyAxXTtcblxuICB2YXIgbG8gPSAoYWwgKyBibCkgPj4+IDA7XG4gIHZhciBoaSA9IChsbyA8IGFsID8gMSA6IDApICsgYWggKyBiaDtcbiAgYnVmW3Bvc10gPSBoaSA+Pj4gMDtcbiAgYnVmW3BvcyArIDFdID0gbG87XG59XG5leHBvcnRzLnN1bTY0ID0gc3VtNjQ7XG5cbmZ1bmN0aW9uIHN1bTY0X2hpKGFoLCBhbCwgYmgsIGJsKSB7XG4gIHZhciBsbyA9IChhbCArIGJsKSA+Pj4gMDtcbiAgdmFyIGhpID0gKGxvIDwgYWwgPyAxIDogMCkgKyBhaCArIGJoO1xuICByZXR1cm4gaGkgPj4+IDA7XG59XG5leHBvcnRzLnN1bTY0X2hpID0gc3VtNjRfaGk7XG5cbmZ1bmN0aW9uIHN1bTY0X2xvKGFoLCBhbCwgYmgsIGJsKSB7XG4gIHZhciBsbyA9IGFsICsgYmw7XG4gIHJldHVybiBsbyA+Pj4gMDtcbn1cbmV4cG9ydHMuc3VtNjRfbG8gPSBzdW02NF9sbztcblxuZnVuY3Rpb24gc3VtNjRfNF9oaShhaCwgYWwsIGJoLCBibCwgY2gsIGNsLCBkaCwgZGwpIHtcbiAgdmFyIGNhcnJ5ID0gMDtcbiAgdmFyIGxvID0gYWw7XG4gIGxvID0gKGxvICsgYmwpID4+PiAwO1xuICBjYXJyeSArPSBsbyA8IGFsID8gMSA6IDA7XG4gIGxvID0gKGxvICsgY2wpID4+PiAwO1xuICBjYXJyeSArPSBsbyA8IGNsID8gMSA6IDA7XG4gIGxvID0gKGxvICsgZGwpID4+PiAwO1xuICBjYXJyeSArPSBsbyA8IGRsID8gMSA6IDA7XG5cbiAgdmFyIGhpID0gYWggKyBiaCArIGNoICsgZGggKyBjYXJyeTtcbiAgcmV0dXJuIGhpID4+PiAwO1xufVxuZXhwb3J0cy5zdW02NF80X2hpID0gc3VtNjRfNF9oaTtcblxuZnVuY3Rpb24gc3VtNjRfNF9sbyhhaCwgYWwsIGJoLCBibCwgY2gsIGNsLCBkaCwgZGwpIHtcbiAgdmFyIGxvID0gYWwgKyBibCArIGNsICsgZGw7XG4gIHJldHVybiBsbyA+Pj4gMDtcbn1cbmV4cG9ydHMuc3VtNjRfNF9sbyA9IHN1bTY0XzRfbG87XG5cbmZ1bmN0aW9uIHN1bTY0XzVfaGkoYWgsIGFsLCBiaCwgYmwsIGNoLCBjbCwgZGgsIGRsLCBlaCwgZWwpIHtcbiAgdmFyIGNhcnJ5ID0gMDtcbiAgdmFyIGxvID0gYWw7XG4gIGxvID0gKGxvICsgYmwpID4+PiAwO1xuICBjYXJyeSArPSBsbyA8IGFsID8gMSA6IDA7XG4gIGxvID0gKGxvICsgY2wpID4+PiAwO1xuICBjYXJyeSArPSBsbyA8IGNsID8gMSA6IDA7XG4gIGxvID0gKGxvICsgZGwpID4+PiAwO1xuICBjYXJyeSArPSBsbyA8IGRsID8gMSA6IDA7XG4gIGxvID0gKGxvICsgZWwpID4+PiAwO1xuICBjYXJyeSArPSBsbyA8IGVsID8gMSA6IDA7XG5cbiAgdmFyIGhpID0gYWggKyBiaCArIGNoICsgZGggKyBlaCArIGNhcnJ5O1xuICByZXR1cm4gaGkgPj4+IDA7XG59XG5leHBvcnRzLnN1bTY0XzVfaGkgPSBzdW02NF81X2hpO1xuXG5mdW5jdGlvbiBzdW02NF81X2xvKGFoLCBhbCwgYmgsIGJsLCBjaCwgY2wsIGRoLCBkbCwgZWgsIGVsKSB7XG4gIHZhciBsbyA9IGFsICsgYmwgKyBjbCArIGRsICsgZWw7XG5cbiAgcmV0dXJuIGxvID4+PiAwO1xufVxuZXhwb3J0cy5zdW02NF81X2xvID0gc3VtNjRfNV9sbztcblxuZnVuY3Rpb24gcm90cjY0X2hpKGFoLCBhbCwgbnVtKSB7XG4gIHZhciByID0gKGFsIDw8ICgzMiAtIG51bSkpIHwgKGFoID4+PiBudW0pO1xuICByZXR1cm4gciA+Pj4gMDtcbn1cbmV4cG9ydHMucm90cjY0X2hpID0gcm90cjY0X2hpO1xuXG5mdW5jdGlvbiByb3RyNjRfbG8oYWgsIGFsLCBudW0pIHtcbiAgdmFyIHIgPSAoYWggPDwgKDMyIC0gbnVtKSkgfCAoYWwgPj4+IG51bSk7XG4gIHJldHVybiByID4+PiAwO1xufVxuZXhwb3J0cy5yb3RyNjRfbG8gPSByb3RyNjRfbG87XG5cbmZ1bmN0aW9uIHNocjY0X2hpKGFoLCBhbCwgbnVtKSB7XG4gIHJldHVybiBhaCA+Pj4gbnVtO1xufVxuZXhwb3J0cy5zaHI2NF9oaSA9IHNocjY0X2hpO1xuXG5mdW5jdGlvbiBzaHI2NF9sbyhhaCwgYWwsIG51bSkge1xuICB2YXIgciA9IChhaCA8PCAoMzIgLSBudW0pKSB8IChhbCA+Pj4gbnVtKTtcbiAgcmV0dXJuIHIgPj4+IDA7XG59XG5leHBvcnRzLnNocjY0X2xvID0gc2hyNjRfbG87XG4iLCJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iLCJ2YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcbnZhciBUcmFuc2Zvcm0gPSByZXF1aXJlKCdzdHJlYW0nKS5UcmFuc2Zvcm1cbnZhciBTdHJpbmdEZWNvZGVyID0gcmVxdWlyZSgnc3RyaW5nX2RlY29kZXInKS5TdHJpbmdEZWNvZGVyXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG5cbmZ1bmN0aW9uIENpcGhlckJhc2UgKGhhc2hNb2RlKSB7XG4gIFRyYW5zZm9ybS5jYWxsKHRoaXMpXG4gIHRoaXMuaGFzaE1vZGUgPSB0eXBlb2YgaGFzaE1vZGUgPT09ICdzdHJpbmcnXG4gIGlmICh0aGlzLmhhc2hNb2RlKSB7XG4gICAgdGhpc1toYXNoTW9kZV0gPSB0aGlzLl9maW5hbE9yRGlnZXN0XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5maW5hbCA9IHRoaXMuX2ZpbmFsT3JEaWdlc3RcbiAgfVxuICBpZiAodGhpcy5fZmluYWwpIHtcbiAgICB0aGlzLl9fZmluYWwgPSB0aGlzLl9maW5hbFxuICAgIHRoaXMuX2ZpbmFsID0gbnVsbFxuICB9XG4gIHRoaXMuX2RlY29kZXIgPSBudWxsXG4gIHRoaXMuX2VuY29kaW5nID0gbnVsbFxufVxuaW5oZXJpdHMoQ2lwaGVyQmFzZSwgVHJhbnNmb3JtKVxuXG5DaXBoZXJCYXNlLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAoZGF0YSwgaW5wdXRFbmMsIG91dHB1dEVuYykge1xuICBpZiAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKSB7XG4gICAgZGF0YSA9IEJ1ZmZlci5mcm9tKGRhdGEsIGlucHV0RW5jKVxuICB9XG5cbiAgdmFyIG91dERhdGEgPSB0aGlzLl91cGRhdGUoZGF0YSlcbiAgaWYgKHRoaXMuaGFzaE1vZGUpIHJldHVybiB0aGlzXG5cbiAgaWYgKG91dHB1dEVuYykge1xuICAgIG91dERhdGEgPSB0aGlzLl90b1N0cmluZyhvdXREYXRhLCBvdXRwdXRFbmMpXG4gIH1cblxuICByZXR1cm4gb3V0RGF0YVxufVxuXG5DaXBoZXJCYXNlLnByb3RvdHlwZS5zZXRBdXRvUGFkZGluZyA9IGZ1bmN0aW9uICgpIHt9XG5DaXBoZXJCYXNlLnByb3RvdHlwZS5nZXRBdXRoVGFnID0gZnVuY3Rpb24gKCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ3RyeWluZyB0byBnZXQgYXV0aCB0YWcgaW4gdW5zdXBwb3J0ZWQgc3RhdGUnKVxufVxuXG5DaXBoZXJCYXNlLnByb3RvdHlwZS5zZXRBdXRoVGFnID0gZnVuY3Rpb24gKCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ3RyeWluZyB0byBzZXQgYXV0aCB0YWcgaW4gdW5zdXBwb3J0ZWQgc3RhdGUnKVxufVxuXG5DaXBoZXJCYXNlLnByb3RvdHlwZS5zZXRBQUQgPSBmdW5jdGlvbiAoKSB7XG4gIHRocm93IG5ldyBFcnJvcigndHJ5aW5nIHRvIHNldCBhYWQgaW4gdW5zdXBwb3J0ZWQgc3RhdGUnKVxufVxuXG5DaXBoZXJCYXNlLnByb3RvdHlwZS5fdHJhbnNmb3JtID0gZnVuY3Rpb24gKGRhdGEsIF8sIG5leHQpIHtcbiAgdmFyIGVyclxuICB0cnkge1xuICAgIGlmICh0aGlzLmhhc2hNb2RlKSB7XG4gICAgICB0aGlzLl91cGRhdGUoZGF0YSlcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5wdXNoKHRoaXMuX3VwZGF0ZShkYXRhKSlcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBlcnIgPSBlXG4gIH0gZmluYWxseSB7XG4gICAgbmV4dChlcnIpXG4gIH1cbn1cbkNpcGhlckJhc2UucHJvdG90eXBlLl9mbHVzaCA9IGZ1bmN0aW9uIChkb25lKSB7XG4gIHZhciBlcnJcbiAgdHJ5IHtcbiAgICB0aGlzLnB1c2godGhpcy5fX2ZpbmFsKCkpXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBlcnIgPSBlXG4gIH1cblxuICBkb25lKGVycilcbn1cbkNpcGhlckJhc2UucHJvdG90eXBlLl9maW5hbE9yRGlnZXN0ID0gZnVuY3Rpb24gKG91dHB1dEVuYykge1xuICB2YXIgb3V0RGF0YSA9IHRoaXMuX19maW5hbCgpIHx8IEJ1ZmZlci5hbGxvYygwKVxuICBpZiAob3V0cHV0RW5jKSB7XG4gICAgb3V0RGF0YSA9IHRoaXMuX3RvU3RyaW5nKG91dERhdGEsIG91dHB1dEVuYywgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb3V0RGF0YVxufVxuXG5DaXBoZXJCYXNlLnByb3RvdHlwZS5fdG9TdHJpbmcgPSBmdW5jdGlvbiAodmFsdWUsIGVuYywgZmluKSB7XG4gIGlmICghdGhpcy5fZGVjb2Rlcikge1xuICAgIHRoaXMuX2RlY29kZXIgPSBuZXcgU3RyaW5nRGVjb2RlcihlbmMpXG4gICAgdGhpcy5fZW5jb2RpbmcgPSBlbmNcbiAgfVxuXG4gIGlmICh0aGlzLl9lbmNvZGluZyAhPT0gZW5jKSB0aHJvdyBuZXcgRXJyb3IoJ2NhblxcJ3Qgc3dpdGNoIGVuY29kaW5ncycpXG5cbiAgdmFyIG91dCA9IHRoaXMuX2RlY29kZXIud3JpdGUodmFsdWUpXG4gIGlmIChmaW4pIHtcbiAgICBvdXQgKz0gdGhpcy5fZGVjb2Rlci5lbmQoKVxuICB9XG5cbiAgcmV0dXJuIG91dFxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IENpcGhlckJhc2VcbiIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4vLyBhIGR1cGxleCBzdHJlYW0gaXMganVzdCBhIHN0cmVhbSB0aGF0IGlzIGJvdGggcmVhZGFibGUgYW5kIHdyaXRhYmxlLlxuLy8gU2luY2UgSlMgZG9lc24ndCBoYXZlIG11bHRpcGxlIHByb3RvdHlwYWwgaW5oZXJpdGFuY2UsIHRoaXMgY2xhc3Ncbi8vIHByb3RvdHlwYWxseSBpbmhlcml0cyBmcm9tIFJlYWRhYmxlLCBhbmQgdGhlbiBwYXJhc2l0aWNhbGx5IGZyb21cbi8vIFdyaXRhYmxlLlxuXG4ndXNlIHN0cmljdCc7XG5cbi8qPHJlcGxhY2VtZW50PiovXG5cbnZhciBwbmEgPSByZXF1aXJlKCdwcm9jZXNzLW5leHRpY2stYXJncycpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgb2JqZWN0S2V5cyA9IE9iamVjdC5rZXlzIHx8IGZ1bmN0aW9uIChvYmopIHtcbiAgdmFyIGtleXMgPSBbXTtcbiAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgIGtleXMucHVzaChrZXkpO1xuICB9cmV0dXJuIGtleXM7XG59O1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbm1vZHVsZS5leHBvcnRzID0gRHVwbGV4O1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIHV0aWwgPSByZXF1aXJlKCdjb3JlLXV0aWwtaXMnKTtcbnV0aWwuaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbnZhciBSZWFkYWJsZSA9IHJlcXVpcmUoJy4vX3N0cmVhbV9yZWFkYWJsZScpO1xudmFyIFdyaXRhYmxlID0gcmVxdWlyZSgnLi9fc3RyZWFtX3dyaXRhYmxlJyk7XG5cbnV0aWwuaW5oZXJpdHMoRHVwbGV4LCBSZWFkYWJsZSk7XG5cbntcbiAgLy8gYXZvaWQgc2NvcGUgY3JlZXAsIHRoZSBrZXlzIGFycmF5IGNhbiB0aGVuIGJlIGNvbGxlY3RlZFxuICB2YXIga2V5cyA9IG9iamVjdEtleXMoV3JpdGFibGUucHJvdG90eXBlKTtcbiAgZm9yICh2YXIgdiA9IDA7IHYgPCBrZXlzLmxlbmd0aDsgdisrKSB7XG4gICAgdmFyIG1ldGhvZCA9IGtleXNbdl07XG4gICAgaWYgKCFEdXBsZXgucHJvdG90eXBlW21ldGhvZF0pIER1cGxleC5wcm90b3R5cGVbbWV0aG9kXSA9IFdyaXRhYmxlLnByb3RvdHlwZVttZXRob2RdO1xuICB9XG59XG5cbmZ1bmN0aW9uIER1cGxleChvcHRpb25zKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBEdXBsZXgpKSByZXR1cm4gbmV3IER1cGxleChvcHRpb25zKTtcblxuICBSZWFkYWJsZS5jYWxsKHRoaXMsIG9wdGlvbnMpO1xuICBXcml0YWJsZS5jYWxsKHRoaXMsIG9wdGlvbnMpO1xuXG4gIGlmIChvcHRpb25zICYmIG9wdGlvbnMucmVhZGFibGUgPT09IGZhbHNlKSB0aGlzLnJlYWRhYmxlID0gZmFsc2U7XG5cbiAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy53cml0YWJsZSA9PT0gZmFsc2UpIHRoaXMud3JpdGFibGUgPSBmYWxzZTtcblxuICB0aGlzLmFsbG93SGFsZk9wZW4gPSB0cnVlO1xuICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLmFsbG93SGFsZk9wZW4gPT09IGZhbHNlKSB0aGlzLmFsbG93SGFsZk9wZW4gPSBmYWxzZTtcblxuICB0aGlzLm9uY2UoJ2VuZCcsIG9uZW5kKTtcbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KER1cGxleC5wcm90b3R5cGUsICd3cml0YWJsZUhpZ2hXYXRlck1hcmsnLCB7XG4gIC8vIG1ha2luZyBpdCBleHBsaWNpdCB0aGlzIHByb3BlcnR5IGlzIG5vdCBlbnVtZXJhYmxlXG4gIC8vIGJlY2F1c2Ugb3RoZXJ3aXNlIHNvbWUgcHJvdG90eXBlIG1hbmlwdWxhdGlvbiBpblxuICAvLyB1c2VybGFuZCB3aWxsIGZhaWxcbiAgZW51bWVyYWJsZTogZmFsc2UsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLl93cml0YWJsZVN0YXRlLmhpZ2hXYXRlck1hcms7XG4gIH1cbn0pO1xuXG4vLyB0aGUgbm8taGFsZi1vcGVuIGVuZm9yY2VyXG5mdW5jdGlvbiBvbmVuZCgpIHtcbiAgLy8gaWYgd2UgYWxsb3cgaGFsZi1vcGVuIHN0YXRlLCBvciBpZiB0aGUgd3JpdGFibGUgc2lkZSBlbmRlZCxcbiAgLy8gdGhlbiB3ZSdyZSBvay5cbiAgaWYgKHRoaXMuYWxsb3dIYWxmT3BlbiB8fCB0aGlzLl93cml0YWJsZVN0YXRlLmVuZGVkKSByZXR1cm47XG5cbiAgLy8gbm8gbW9yZSBkYXRhIGNhbiBiZSB3cml0dGVuLlxuICAvLyBCdXQgYWxsb3cgbW9yZSB3cml0ZXMgdG8gaGFwcGVuIGluIHRoaXMgdGljay5cbiAgcG5hLm5leHRUaWNrKG9uRW5kTlQsIHRoaXMpO1xufVxuXG5mdW5jdGlvbiBvbkVuZE5UKHNlbGYpIHtcbiAgc2VsZi5lbmQoKTtcbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KER1cGxleC5wcm90b3R5cGUsICdkZXN0cm95ZWQnLCB7XG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLl9yZWFkYWJsZVN0YXRlID09PSB1bmRlZmluZWQgfHwgdGhpcy5fd3JpdGFibGVTdGF0ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZCAmJiB0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZDtcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAvLyB3ZSBpZ25vcmUgdGhlIHZhbHVlIGlmIHRoZSBzdHJlYW1cbiAgICAvLyBoYXMgbm90IGJlZW4gaW5pdGlhbGl6ZWQgeWV0XG4gICAgaWYgKHRoaXMuX3JlYWRhYmxlU3RhdGUgPT09IHVuZGVmaW5lZCB8fCB0aGlzLl93cml0YWJsZVN0YXRlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LCB0aGUgdXNlciBpcyBleHBsaWNpdGx5XG4gICAgLy8gbWFuYWdpbmcgZGVzdHJveWVkXG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQgPSB2YWx1ZTtcbiAgICB0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZCA9IHZhbHVlO1xuICB9XG59KTtcblxuRHVwbGV4LnByb3RvdHlwZS5fZGVzdHJveSA9IGZ1bmN0aW9uIChlcnIsIGNiKSB7XG4gIHRoaXMucHVzaChudWxsKTtcbiAgdGhpcy5lbmQoKTtcblxuICBwbmEubmV4dFRpY2soY2IsIGVycik7XG59OyIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG5tb2R1bGUuZXhwb3J0cyA9IFN0cmVhbTtcblxudmFyIEVFID0gcmVxdWlyZSgnZXZlbnRzJykuRXZlbnRFbWl0dGVyO1xudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcblxuaW5oZXJpdHMoU3RyZWFtLCBFRSk7XG5TdHJlYW0uUmVhZGFibGUgPSByZXF1aXJlKCdyZWFkYWJsZS1zdHJlYW0vcmVhZGFibGUuanMnKTtcblN0cmVhbS5Xcml0YWJsZSA9IHJlcXVpcmUoJ3JlYWRhYmxlLXN0cmVhbS93cml0YWJsZS5qcycpO1xuU3RyZWFtLkR1cGxleCA9IHJlcXVpcmUoJ3JlYWRhYmxlLXN0cmVhbS9kdXBsZXguanMnKTtcblN0cmVhbS5UcmFuc2Zvcm0gPSByZXF1aXJlKCdyZWFkYWJsZS1zdHJlYW0vdHJhbnNmb3JtLmpzJyk7XG5TdHJlYW0uUGFzc1Rocm91Z2ggPSByZXF1aXJlKCdyZWFkYWJsZS1zdHJlYW0vcGFzc3Rocm91Z2guanMnKTtcblxuLy8gQmFja3dhcmRzLWNvbXBhdCB3aXRoIG5vZGUgMC40LnhcblN0cmVhbS5TdHJlYW0gPSBTdHJlYW07XG5cblxuXG4vLyBvbGQtc3R5bGUgc3RyZWFtcy4gIE5vdGUgdGhhdCB0aGUgcGlwZSBtZXRob2QgKHRoZSBvbmx5IHJlbGV2YW50XG4vLyBwYXJ0IG9mIHRoaXMgY2xhc3MpIGlzIG92ZXJyaWRkZW4gaW4gdGhlIFJlYWRhYmxlIGNsYXNzLlxuXG5mdW5jdGlvbiBTdHJlYW0oKSB7XG4gIEVFLmNhbGwodGhpcyk7XG59XG5cblN0cmVhbS5wcm90b3R5cGUucGlwZSA9IGZ1bmN0aW9uKGRlc3QsIG9wdGlvbnMpIHtcbiAgdmFyIHNvdXJjZSA9IHRoaXM7XG5cbiAgZnVuY3Rpb24gb25kYXRhKGNodW5rKSB7XG4gICAgaWYgKGRlc3Qud3JpdGFibGUpIHtcbiAgICAgIGlmIChmYWxzZSA9PT0gZGVzdC53cml0ZShjaHVuaykgJiYgc291cmNlLnBhdXNlKSB7XG4gICAgICAgIHNvdXJjZS5wYXVzZSgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHNvdXJjZS5vbignZGF0YScsIG9uZGF0YSk7XG5cbiAgZnVuY3Rpb24gb25kcmFpbigpIHtcbiAgICBpZiAoc291cmNlLnJlYWRhYmxlICYmIHNvdXJjZS5yZXN1bWUpIHtcbiAgICAgIHNvdXJjZS5yZXN1bWUoKTtcbiAgICB9XG4gIH1cblxuICBkZXN0Lm9uKCdkcmFpbicsIG9uZHJhaW4pO1xuXG4gIC8vIElmIHRoZSAnZW5kJyBvcHRpb24gaXMgbm90IHN1cHBsaWVkLCBkZXN0LmVuZCgpIHdpbGwgYmUgY2FsbGVkIHdoZW5cbiAgLy8gc291cmNlIGdldHMgdGhlICdlbmQnIG9yICdjbG9zZScgZXZlbnRzLiAgT25seSBkZXN0LmVuZCgpIG9uY2UuXG4gIGlmICghZGVzdC5faXNTdGRpbyAmJiAoIW9wdGlvbnMgfHwgb3B0aW9ucy5lbmQgIT09IGZhbHNlKSkge1xuICAgIHNvdXJjZS5vbignZW5kJywgb25lbmQpO1xuICAgIHNvdXJjZS5vbignY2xvc2UnLCBvbmNsb3NlKTtcbiAgfVxuXG4gIHZhciBkaWRPbkVuZCA9IGZhbHNlO1xuICBmdW5jdGlvbiBvbmVuZCgpIHtcbiAgICBpZiAoZGlkT25FbmQpIHJldHVybjtcbiAgICBkaWRPbkVuZCA9IHRydWU7XG5cbiAgICBkZXN0LmVuZCgpO1xuICB9XG5cblxuICBmdW5jdGlvbiBvbmNsb3NlKCkge1xuICAgIGlmIChkaWRPbkVuZCkgcmV0dXJuO1xuICAgIGRpZE9uRW5kID0gdHJ1ZTtcblxuICAgIGlmICh0eXBlb2YgZGVzdC5kZXN0cm95ID09PSAnZnVuY3Rpb24nKSBkZXN0LmRlc3Ryb3koKTtcbiAgfVxuXG4gIC8vIGRvbid0IGxlYXZlIGRhbmdsaW5nIHBpcGVzIHdoZW4gdGhlcmUgYXJlIGVycm9ycy5cbiAgZnVuY3Rpb24gb25lcnJvcihlcikge1xuICAgIGNsZWFudXAoKTtcbiAgICBpZiAoRUUubGlzdGVuZXJDb3VudCh0aGlzLCAnZXJyb3InKSA9PT0gMCkge1xuICAgICAgdGhyb3cgZXI7IC8vIFVuaGFuZGxlZCBzdHJlYW0gZXJyb3IgaW4gcGlwZS5cbiAgICB9XG4gIH1cblxuICBzb3VyY2Uub24oJ2Vycm9yJywgb25lcnJvcik7XG4gIGRlc3Qub24oJ2Vycm9yJywgb25lcnJvcik7XG5cbiAgLy8gcmVtb3ZlIGFsbCB0aGUgZXZlbnQgbGlzdGVuZXJzIHRoYXQgd2VyZSBhZGRlZC5cbiAgZnVuY3Rpb24gY2xlYW51cCgpIHtcbiAgICBzb3VyY2UucmVtb3ZlTGlzdGVuZXIoJ2RhdGEnLCBvbmRhdGEpO1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2RyYWluJywgb25kcmFpbik7XG5cbiAgICBzb3VyY2UucmVtb3ZlTGlzdGVuZXIoJ2VuZCcsIG9uZW5kKTtcbiAgICBzb3VyY2UucmVtb3ZlTGlzdGVuZXIoJ2Nsb3NlJywgb25jbG9zZSk7XG5cbiAgICBzb3VyY2UucmVtb3ZlTGlzdGVuZXIoJ2Vycm9yJywgb25lcnJvcik7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignZXJyb3InLCBvbmVycm9yKTtcblxuICAgIHNvdXJjZS5yZW1vdmVMaXN0ZW5lcignZW5kJywgY2xlYW51cCk7XG4gICAgc291cmNlLnJlbW92ZUxpc3RlbmVyKCdjbG9zZScsIGNsZWFudXApO1xuXG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignY2xvc2UnLCBjbGVhbnVwKTtcbiAgfVxuXG4gIHNvdXJjZS5vbignZW5kJywgY2xlYW51cCk7XG4gIHNvdXJjZS5vbignY2xvc2UnLCBjbGVhbnVwKTtcblxuICBkZXN0Lm9uKCdjbG9zZScsIGNsZWFudXApO1xuXG4gIGRlc3QuZW1pdCgncGlwZScsIHNvdXJjZSk7XG5cbiAgLy8gQWxsb3cgZm9yIHVuaXgtbGlrZSB1c2FnZTogQS5waXBlKEIpLnBpcGUoQylcbiAgcmV0dXJuIGRlc3Q7XG59O1xuIiwiJ3VzZSBzdHJpY3QnXG5cbi8vIGxpbWl0IG9mIENyeXB0by5nZXRSYW5kb21WYWx1ZXMoKVxuLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0NyeXB0by9nZXRSYW5kb21WYWx1ZXNcbnZhciBNQVhfQllURVMgPSA2NTUzNlxuXG4vLyBOb2RlIHN1cHBvcnRzIHJlcXVlc3RpbmcgdXAgdG8gdGhpcyBudW1iZXIgb2YgYnl0ZXNcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9ub2RlanMvbm9kZS9ibG9iL21hc3Rlci9saWIvaW50ZXJuYWwvY3J5cHRvL3JhbmRvbS5qcyNMNDhcbnZhciBNQVhfVUlOVDMyID0gNDI5NDk2NzI5NVxuXG5mdW5jdGlvbiBvbGRCcm93c2VyICgpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdTZWN1cmUgcmFuZG9tIG51bWJlciBnZW5lcmF0aW9uIGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhpcyBicm93c2VyLlxcblVzZSBDaHJvbWUsIEZpcmVmb3ggb3IgSW50ZXJuZXQgRXhwbG9yZXIgMTEnKVxufVxuXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcbnZhciBjcnlwdG8gPSBnbG9iYWwuY3J5cHRvIHx8IGdsb2JhbC5tc0NyeXB0b1xuXG5pZiAoY3J5cHRvICYmIGNyeXB0by5nZXRSYW5kb21WYWx1ZXMpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByYW5kb21CeXRlc1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBvbGRCcm93c2VyXG59XG5cbmZ1bmN0aW9uIHJhbmRvbUJ5dGVzIChzaXplLCBjYikge1xuICAvLyBwaGFudG9tanMgbmVlZHMgdG8gdGhyb3dcbiAgaWYgKHNpemUgPiBNQVhfVUlOVDMyKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcigncmVxdWVzdGVkIHRvbyBtYW55IHJhbmRvbSBieXRlcycpXG5cbiAgdmFyIGJ5dGVzID0gQnVmZmVyLmFsbG9jVW5zYWZlKHNpemUpXG5cbiAgaWYgKHNpemUgPiAwKSB7ICAvLyBnZXRSYW5kb21WYWx1ZXMgZmFpbHMgb24gSUUgaWYgc2l6ZSA9PSAwXG4gICAgaWYgKHNpemUgPiBNQVhfQllURVMpIHsgLy8gdGhpcyBpcyB0aGUgbWF4IGJ5dGVzIGNyeXB0by5nZXRSYW5kb21WYWx1ZXNcbiAgICAgIC8vIGNhbiBkbyBhdCBvbmNlIHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvd2luZG93LmNyeXB0by5nZXRSYW5kb21WYWx1ZXNcbiAgICAgIGZvciAodmFyIGdlbmVyYXRlZCA9IDA7IGdlbmVyYXRlZCA8IHNpemU7IGdlbmVyYXRlZCArPSBNQVhfQllURVMpIHtcbiAgICAgICAgLy8gYnVmZmVyLnNsaWNlIGF1dG9tYXRpY2FsbHkgY2hlY2tzIGlmIHRoZSBlbmQgaXMgcGFzdCB0aGUgZW5kIG9mXG4gICAgICAgIC8vIHRoZSBidWZmZXIgc28gd2UgZG9uJ3QgaGF2ZSB0byBoZXJlXG4gICAgICAgIGNyeXB0by5nZXRSYW5kb21WYWx1ZXMoYnl0ZXMuc2xpY2UoZ2VuZXJhdGVkLCBnZW5lcmF0ZWQgKyBNQVhfQllURVMpKVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKGJ5dGVzKVxuICAgIH1cbiAgfVxuXG4gIGlmICh0eXBlb2YgY2IgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbiAoKSB7XG4gICAgICBjYihudWxsLCBieXRlcylcbiAgICB9KVxuICB9XG5cbiAgcmV0dXJuIGJ5dGVzXG59XG4iLCJ2YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcblxuLy8gcHJvdG90eXBlIGNsYXNzIGZvciBoYXNoIGZ1bmN0aW9uc1xuZnVuY3Rpb24gSGFzaCAoYmxvY2tTaXplLCBmaW5hbFNpemUpIHtcbiAgdGhpcy5fYmxvY2sgPSBCdWZmZXIuYWxsb2MoYmxvY2tTaXplKVxuICB0aGlzLl9maW5hbFNpemUgPSBmaW5hbFNpemVcbiAgdGhpcy5fYmxvY2tTaXplID0gYmxvY2tTaXplXG4gIHRoaXMuX2xlbiA9IDBcbn1cblxuSGFzaC5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKGRhdGEsIGVuYykge1xuICBpZiAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKSB7XG4gICAgZW5jID0gZW5jIHx8ICd1dGY4J1xuICAgIGRhdGEgPSBCdWZmZXIuZnJvbShkYXRhLCBlbmMpXG4gIH1cblxuICB2YXIgYmxvY2sgPSB0aGlzLl9ibG9ja1xuICB2YXIgYmxvY2tTaXplID0gdGhpcy5fYmxvY2tTaXplXG4gIHZhciBsZW5ndGggPSBkYXRhLmxlbmd0aFxuICB2YXIgYWNjdW0gPSB0aGlzLl9sZW5cblxuICBmb3IgKHZhciBvZmZzZXQgPSAwOyBvZmZzZXQgPCBsZW5ndGg7KSB7XG4gICAgdmFyIGFzc2lnbmVkID0gYWNjdW0gJSBibG9ja1NpemVcbiAgICB2YXIgcmVtYWluZGVyID0gTWF0aC5taW4obGVuZ3RoIC0gb2Zmc2V0LCBibG9ja1NpemUgLSBhc3NpZ25lZClcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmVtYWluZGVyOyBpKyspIHtcbiAgICAgIGJsb2NrW2Fzc2lnbmVkICsgaV0gPSBkYXRhW29mZnNldCArIGldXG4gICAgfVxuXG4gICAgYWNjdW0gKz0gcmVtYWluZGVyXG4gICAgb2Zmc2V0ICs9IHJlbWFpbmRlclxuXG4gICAgaWYgKChhY2N1bSAlIGJsb2NrU2l6ZSkgPT09IDApIHtcbiAgICAgIHRoaXMuX3VwZGF0ZShibG9jaylcbiAgICB9XG4gIH1cblxuICB0aGlzLl9sZW4gKz0gbGVuZ3RoXG4gIHJldHVybiB0aGlzXG59XG5cbkhhc2gucHJvdG90eXBlLmRpZ2VzdCA9IGZ1bmN0aW9uIChlbmMpIHtcbiAgdmFyIHJlbSA9IHRoaXMuX2xlbiAlIHRoaXMuX2Jsb2NrU2l6ZVxuXG4gIHRoaXMuX2Jsb2NrW3JlbV0gPSAweDgwXG5cbiAgLy8gemVybyAocmVtICsgMSkgdHJhaWxpbmcgYml0cywgd2hlcmUgKHJlbSArIDEpIGlzIHRoZSBzbWFsbGVzdFxuICAvLyBub24tbmVnYXRpdmUgc29sdXRpb24gdG8gdGhlIGVxdWF0aW9uIChsZW5ndGggKyAxICsgKHJlbSArIDEpKSA9PT0gZmluYWxTaXplIG1vZCBibG9ja1NpemVcbiAgdGhpcy5fYmxvY2suZmlsbCgwLCByZW0gKyAxKVxuXG4gIGlmIChyZW0gPj0gdGhpcy5fZmluYWxTaXplKSB7XG4gICAgdGhpcy5fdXBkYXRlKHRoaXMuX2Jsb2NrKVxuICAgIHRoaXMuX2Jsb2NrLmZpbGwoMClcbiAgfVxuXG4gIHZhciBiaXRzID0gdGhpcy5fbGVuICogOFxuXG4gIC8vIHVpbnQzMlxuICBpZiAoYml0cyA8PSAweGZmZmZmZmZmKSB7XG4gICAgdGhpcy5fYmxvY2sud3JpdGVVSW50MzJCRShiaXRzLCB0aGlzLl9ibG9ja1NpemUgLSA0KVxuXG4gIC8vIHVpbnQ2NFxuICB9IGVsc2Uge1xuICAgIHZhciBsb3dCaXRzID0gKGJpdHMgJiAweGZmZmZmZmZmKSA+Pj4gMFxuICAgIHZhciBoaWdoQml0cyA9IChiaXRzIC0gbG93Qml0cykgLyAweDEwMDAwMDAwMFxuXG4gICAgdGhpcy5fYmxvY2sud3JpdGVVSW50MzJCRShoaWdoQml0cywgdGhpcy5fYmxvY2tTaXplIC0gOClcbiAgICB0aGlzLl9ibG9jay53cml0ZVVJbnQzMkJFKGxvd0JpdHMsIHRoaXMuX2Jsb2NrU2l6ZSAtIDQpXG4gIH1cblxuICB0aGlzLl91cGRhdGUodGhpcy5fYmxvY2spXG4gIHZhciBoYXNoID0gdGhpcy5faGFzaCgpXG5cbiAgcmV0dXJuIGVuYyA/IGhhc2gudG9TdHJpbmcoZW5jKSA6IGhhc2hcbn1cblxuSGFzaC5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdfdXBkYXRlIG11c3QgYmUgaW1wbGVtZW50ZWQgYnkgc3ViY2xhc3MnKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEhhc2hcbiIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4vLyBOT1RFOiBUaGVzZSB0eXBlIGNoZWNraW5nIGZ1bmN0aW9ucyBpbnRlbnRpb25hbGx5IGRvbid0IHVzZSBgaW5zdGFuY2VvZmBcbi8vIGJlY2F1c2UgaXQgaXMgZnJhZ2lsZSBhbmQgY2FuIGJlIGVhc2lseSBmYWtlZCB3aXRoIGBPYmplY3QuY3JlYXRlKClgLlxuXG5mdW5jdGlvbiBpc0FycmF5KGFyZykge1xuICBpZiAoQXJyYXkuaXNBcnJheSkge1xuICAgIHJldHVybiBBcnJheS5pc0FycmF5KGFyZyk7XG4gIH1cbiAgcmV0dXJuIG9iamVjdFRvU3RyaW5nKGFyZykgPT09ICdbb2JqZWN0IEFycmF5XSc7XG59XG5leHBvcnRzLmlzQXJyYXkgPSBpc0FycmF5O1xuXG5mdW5jdGlvbiBpc0Jvb2xlYW4oYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnYm9vbGVhbic7XG59XG5leHBvcnRzLmlzQm9vbGVhbiA9IGlzQm9vbGVhbjtcblxuZnVuY3Rpb24gaXNOdWxsKGFyZykge1xuICByZXR1cm4gYXJnID09PSBudWxsO1xufVxuZXhwb3J0cy5pc051bGwgPSBpc051bGw7XG5cbmZ1bmN0aW9uIGlzTnVsbE9yVW5kZWZpbmVkKGFyZykge1xuICByZXR1cm4gYXJnID09IG51bGw7XG59XG5leHBvcnRzLmlzTnVsbE9yVW5kZWZpbmVkID0gaXNOdWxsT3JVbmRlZmluZWQ7XG5cbmZ1bmN0aW9uIGlzTnVtYmVyKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ251bWJlcic7XG59XG5leHBvcnRzLmlzTnVtYmVyID0gaXNOdW1iZXI7XG5cbmZ1bmN0aW9uIGlzU3RyaW5nKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ3N0cmluZyc7XG59XG5leHBvcnRzLmlzU3RyaW5nID0gaXNTdHJpbmc7XG5cbmZ1bmN0aW9uIGlzU3ltYm9sKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ3N5bWJvbCc7XG59XG5leHBvcnRzLmlzU3ltYm9sID0gaXNTeW1ib2w7XG5cbmZ1bmN0aW9uIGlzVW5kZWZpbmVkKGFyZykge1xuICByZXR1cm4gYXJnID09PSB2b2lkIDA7XG59XG5leHBvcnRzLmlzVW5kZWZpbmVkID0gaXNVbmRlZmluZWQ7XG5cbmZ1bmN0aW9uIGlzUmVnRXhwKHJlKSB7XG4gIHJldHVybiBvYmplY3RUb1N0cmluZyhyZSkgPT09ICdbb2JqZWN0IFJlZ0V4cF0nO1xufVxuZXhwb3J0cy5pc1JlZ0V4cCA9IGlzUmVnRXhwO1xuXG5mdW5jdGlvbiBpc09iamVjdChhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdvYmplY3QnICYmIGFyZyAhPT0gbnVsbDtcbn1cbmV4cG9ydHMuaXNPYmplY3QgPSBpc09iamVjdDtcblxuZnVuY3Rpb24gaXNEYXRlKGQpIHtcbiAgcmV0dXJuIG9iamVjdFRvU3RyaW5nKGQpID09PSAnW29iamVjdCBEYXRlXSc7XG59XG5leHBvcnRzLmlzRGF0ZSA9IGlzRGF0ZTtcblxuZnVuY3Rpb24gaXNFcnJvcihlKSB7XG4gIHJldHVybiAob2JqZWN0VG9TdHJpbmcoZSkgPT09ICdbb2JqZWN0IEVycm9yXScgfHwgZSBpbnN0YW5jZW9mIEVycm9yKTtcbn1cbmV4cG9ydHMuaXNFcnJvciA9IGlzRXJyb3I7XG5cbmZ1bmN0aW9uIGlzRnVuY3Rpb24oYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnZnVuY3Rpb24nO1xufVxuZXhwb3J0cy5pc0Z1bmN0aW9uID0gaXNGdW5jdGlvbjtcblxuZnVuY3Rpb24gaXNQcmltaXRpdmUoYXJnKSB7XG4gIHJldHVybiBhcmcgPT09IG51bGwgfHxcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdib29sZWFuJyB8fFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ251bWJlcicgfHxcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdzdHJpbmcnIHx8XG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnc3ltYm9sJyB8fCAgLy8gRVM2IHN5bWJvbFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ3VuZGVmaW5lZCc7XG59XG5leHBvcnRzLmlzUHJpbWl0aXZlID0gaXNQcmltaXRpdmU7XG5cbmV4cG9ydHMuaXNCdWZmZXIgPSBCdWZmZXIuaXNCdWZmZXI7XG5cbmZ1bmN0aW9uIG9iamVjdFRvU3RyaW5nKG8pIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKTtcbn1cbiIsIid1c2Ugc3RyaWN0J1xudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxudmFyIE1ENSA9IHJlcXVpcmUoJ21kNS5qcycpXG52YXIgUklQRU1EMTYwID0gcmVxdWlyZSgncmlwZW1kMTYwJylcbnZhciBzaGEgPSByZXF1aXJlKCdzaGEuanMnKVxudmFyIEJhc2UgPSByZXF1aXJlKCdjaXBoZXItYmFzZScpXG5cbmZ1bmN0aW9uIEhhc2ggKGhhc2gpIHtcbiAgQmFzZS5jYWxsKHRoaXMsICdkaWdlc3QnKVxuXG4gIHRoaXMuX2hhc2ggPSBoYXNoXG59XG5cbmluaGVyaXRzKEhhc2gsIEJhc2UpXG5cbkhhc2gucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAoZGF0YSkge1xuICB0aGlzLl9oYXNoLnVwZGF0ZShkYXRhKVxufVxuXG5IYXNoLnByb3RvdHlwZS5fZmluYWwgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLl9oYXNoLmRpZ2VzdCgpXG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY3JlYXRlSGFzaCAoYWxnKSB7XG4gIGFsZyA9IGFsZy50b0xvd2VyQ2FzZSgpXG4gIGlmIChhbGcgPT09ICdtZDUnKSByZXR1cm4gbmV3IE1ENSgpXG4gIGlmIChhbGcgPT09ICdybWQxNjAnIHx8IGFsZyA9PT0gJ3JpcGVtZDE2MCcpIHJldHVybiBuZXcgUklQRU1EMTYwKClcblxuICByZXR1cm4gbmV3IEhhc2goc2hhKGFsZykpXG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHhvciAoYSwgYikge1xuICB2YXIgbGVuZ3RoID0gTWF0aC5taW4oYS5sZW5ndGgsIGIubGVuZ3RoKVxuICB2YXIgYnVmZmVyID0gbmV3IEJ1ZmZlcihsZW5ndGgpXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIGJ1ZmZlcltpXSA9IGFbaV0gXiBiW2ldXG4gIH1cblxuICByZXR1cm4gYnVmZmVyXG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbnZhciBhc3NlcnQgPSByZXF1aXJlKCdtaW5pbWFsaXN0aWMtYXNzZXJ0Jyk7XG5cbmZ1bmN0aW9uIEJsb2NrSGFzaCgpIHtcbiAgdGhpcy5wZW5kaW5nID0gbnVsbDtcbiAgdGhpcy5wZW5kaW5nVG90YWwgPSAwO1xuICB0aGlzLmJsb2NrU2l6ZSA9IHRoaXMuY29uc3RydWN0b3IuYmxvY2tTaXplO1xuICB0aGlzLm91dFNpemUgPSB0aGlzLmNvbnN0cnVjdG9yLm91dFNpemU7XG4gIHRoaXMuaG1hY1N0cmVuZ3RoID0gdGhpcy5jb25zdHJ1Y3Rvci5obWFjU3RyZW5ndGg7XG4gIHRoaXMucGFkTGVuZ3RoID0gdGhpcy5jb25zdHJ1Y3Rvci5wYWRMZW5ndGggLyA4O1xuICB0aGlzLmVuZGlhbiA9ICdiaWcnO1xuXG4gIHRoaXMuX2RlbHRhOCA9IHRoaXMuYmxvY2tTaXplIC8gODtcbiAgdGhpcy5fZGVsdGEzMiA9IHRoaXMuYmxvY2tTaXplIC8gMzI7XG59XG5leHBvcnRzLkJsb2NrSGFzaCA9IEJsb2NrSGFzaDtcblxuQmxvY2tIYXNoLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUobXNnLCBlbmMpIHtcbiAgLy8gQ29udmVydCBtZXNzYWdlIHRvIGFycmF5LCBwYWQgaXQsIGFuZCBqb2luIGludG8gMzJiaXQgYmxvY2tzXG4gIG1zZyA9IHV0aWxzLnRvQXJyYXkobXNnLCBlbmMpO1xuICBpZiAoIXRoaXMucGVuZGluZylcbiAgICB0aGlzLnBlbmRpbmcgPSBtc2c7XG4gIGVsc2VcbiAgICB0aGlzLnBlbmRpbmcgPSB0aGlzLnBlbmRpbmcuY29uY2F0KG1zZyk7XG4gIHRoaXMucGVuZGluZ1RvdGFsICs9IG1zZy5sZW5ndGg7XG5cbiAgLy8gRW5vdWdoIGRhdGEsIHRyeSB1cGRhdGluZ1xuICBpZiAodGhpcy5wZW5kaW5nLmxlbmd0aCA+PSB0aGlzLl9kZWx0YTgpIHtcbiAgICBtc2cgPSB0aGlzLnBlbmRpbmc7XG5cbiAgICAvLyBQcm9jZXNzIHBlbmRpbmcgZGF0YSBpbiBibG9ja3NcbiAgICB2YXIgciA9IG1zZy5sZW5ndGggJSB0aGlzLl9kZWx0YTg7XG4gICAgdGhpcy5wZW5kaW5nID0gbXNnLnNsaWNlKG1zZy5sZW5ndGggLSByLCBtc2cubGVuZ3RoKTtcbiAgICBpZiAodGhpcy5wZW5kaW5nLmxlbmd0aCA9PT0gMClcbiAgICAgIHRoaXMucGVuZGluZyA9IG51bGw7XG5cbiAgICBtc2cgPSB1dGlscy5qb2luMzIobXNnLCAwLCBtc2cubGVuZ3RoIC0gciwgdGhpcy5lbmRpYW4pO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbXNnLmxlbmd0aDsgaSArPSB0aGlzLl9kZWx0YTMyKVxuICAgICAgdGhpcy5fdXBkYXRlKG1zZywgaSwgaSArIHRoaXMuX2RlbHRhMzIpO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5CbG9ja0hhc2gucHJvdG90eXBlLmRpZ2VzdCA9IGZ1bmN0aW9uIGRpZ2VzdChlbmMpIHtcbiAgdGhpcy51cGRhdGUodGhpcy5fcGFkKCkpO1xuICBhc3NlcnQodGhpcy5wZW5kaW5nID09PSBudWxsKTtcblxuICByZXR1cm4gdGhpcy5fZGlnZXN0KGVuYyk7XG59O1xuXG5CbG9ja0hhc2gucHJvdG90eXBlLl9wYWQgPSBmdW5jdGlvbiBwYWQoKSB7XG4gIHZhciBsZW4gPSB0aGlzLnBlbmRpbmdUb3RhbDtcbiAgdmFyIGJ5dGVzID0gdGhpcy5fZGVsdGE4O1xuICB2YXIgayA9IGJ5dGVzIC0gKChsZW4gKyB0aGlzLnBhZExlbmd0aCkgJSBieXRlcyk7XG4gIHZhciByZXMgPSBuZXcgQXJyYXkoayArIHRoaXMucGFkTGVuZ3RoKTtcbiAgcmVzWzBdID0gMHg4MDtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBrOyBpKyspXG4gICAgcmVzW2ldID0gMDtcblxuICAvLyBBcHBlbmQgbGVuZ3RoXG4gIGxlbiA8PD0gMztcbiAgaWYgKHRoaXMuZW5kaWFuID09PSAnYmlnJykge1xuICAgIGZvciAodmFyIHQgPSA4OyB0IDwgdGhpcy5wYWRMZW5ndGg7IHQrKylcbiAgICAgIHJlc1tpKytdID0gMDtcblxuICAgIHJlc1tpKytdID0gMDtcbiAgICByZXNbaSsrXSA9IDA7XG4gICAgcmVzW2krK10gPSAwO1xuICAgIHJlc1tpKytdID0gMDtcbiAgICByZXNbaSsrXSA9IChsZW4gPj4+IDI0KSAmIDB4ZmY7XG4gICAgcmVzW2krK10gPSAobGVuID4+PiAxNikgJiAweGZmO1xuICAgIHJlc1tpKytdID0gKGxlbiA+Pj4gOCkgJiAweGZmO1xuICAgIHJlc1tpKytdID0gbGVuICYgMHhmZjtcbiAgfSBlbHNlIHtcbiAgICByZXNbaSsrXSA9IGxlbiAmIDB4ZmY7XG4gICAgcmVzW2krK10gPSAobGVuID4+PiA4KSAmIDB4ZmY7XG4gICAgcmVzW2krK10gPSAobGVuID4+PiAxNikgJiAweGZmO1xuICAgIHJlc1tpKytdID0gKGxlbiA+Pj4gMjQpICYgMHhmZjtcbiAgICByZXNbaSsrXSA9IDA7XG4gICAgcmVzW2krK10gPSAwO1xuICAgIHJlc1tpKytdID0gMDtcbiAgICByZXNbaSsrXSA9IDA7XG5cbiAgICBmb3IgKHQgPSA4OyB0IDwgdGhpcy5wYWRMZW5ndGg7IHQrKylcbiAgICAgIHJlc1tpKytdID0gMDtcbiAgfVxuXG4gIHJldHVybiByZXM7XG59O1xuIiwidmFyIGFzbjEgPSBleHBvcnRzO1xuXG5hc24xLmJpZ251bSA9IHJlcXVpcmUoJ2JuLmpzJyk7XG5cbmFzbjEuZGVmaW5lID0gcmVxdWlyZSgnLi9hc24xL2FwaScpLmRlZmluZTtcbmFzbjEuYmFzZSA9IHJlcXVpcmUoJy4vYXNuMS9iYXNlJyk7XG5hc24xLmNvbnN0YW50cyA9IHJlcXVpcmUoJy4vYXNuMS9jb25zdGFudHMnKTtcbmFzbjEuZGVjb2RlcnMgPSByZXF1aXJlKCcuL2FzbjEvZGVjb2RlcnMnKTtcbmFzbjEuZW5jb2RlcnMgPSByZXF1aXJlKCcuL2FzbjEvZW5jb2RlcnMnKTtcbiIsInZhciBiYXNlID0gZXhwb3J0cztcblxuYmFzZS5SZXBvcnRlciA9IHJlcXVpcmUoJy4vcmVwb3J0ZXInKS5SZXBvcnRlcjtcbmJhc2UuRGVjb2RlckJ1ZmZlciA9IHJlcXVpcmUoJy4vYnVmZmVyJykuRGVjb2RlckJ1ZmZlcjtcbmJhc2UuRW5jb2RlckJ1ZmZlciA9IHJlcXVpcmUoJy4vYnVmZmVyJykuRW5jb2RlckJ1ZmZlcjtcbmJhc2UuTm9kZSA9IHJlcXVpcmUoJy4vbm9kZScpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAodHlwZW9mIHByb2Nlc3MgPT09ICd1bmRlZmluZWQnIHx8XG4gICAgIXByb2Nlc3MudmVyc2lvbiB8fFxuICAgIHByb2Nlc3MudmVyc2lvbi5pbmRleE9mKCd2MC4nKSA9PT0gMCB8fFxuICAgIHByb2Nlc3MudmVyc2lvbi5pbmRleE9mKCd2MS4nKSA9PT0gMCAmJiBwcm9jZXNzLnZlcnNpb24uaW5kZXhPZigndjEuOC4nKSAhPT0gMCkge1xuICBtb2R1bGUuZXhwb3J0cyA9IHsgbmV4dFRpY2s6IG5leHRUaWNrIH07XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHByb2Nlc3Ncbn1cblxuZnVuY3Rpb24gbmV4dFRpY2soZm4sIGFyZzEsIGFyZzIsIGFyZzMpIHtcbiAgaWYgKHR5cGVvZiBmbiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wiY2FsbGJhY2tcIiBhcmd1bWVudCBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcbiAgfVxuICB2YXIgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgdmFyIGFyZ3MsIGk7XG4gIHN3aXRjaCAobGVuKSB7XG4gIGNhc2UgMDpcbiAgY2FzZSAxOlxuICAgIHJldHVybiBwcm9jZXNzLm5leHRUaWNrKGZuKTtcbiAgY2FzZSAyOlxuICAgIHJldHVybiBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uIGFmdGVyVGlja09uZSgpIHtcbiAgICAgIGZuLmNhbGwobnVsbCwgYXJnMSk7XG4gICAgfSk7XG4gIGNhc2UgMzpcbiAgICByZXR1cm4gcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbiBhZnRlclRpY2tUd28oKSB7XG4gICAgICBmbi5jYWxsKG51bGwsIGFyZzEsIGFyZzIpO1xuICAgIH0pO1xuICBjYXNlIDQ6XG4gICAgcmV0dXJuIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24gYWZ0ZXJUaWNrVGhyZWUoKSB7XG4gICAgICBmbi5jYWxsKG51bGwsIGFyZzEsIGFyZzIsIGFyZzMpO1xuICAgIH0pO1xuICBkZWZhdWx0OlxuICAgIGFyZ3MgPSBuZXcgQXJyYXkobGVuIC0gMSk7XG4gICAgaSA9IDA7XG4gICAgd2hpbGUgKGkgPCBhcmdzLmxlbmd0aCkge1xuICAgICAgYXJnc1tpKytdID0gYXJndW1lbnRzW2ldO1xuICAgIH1cbiAgICByZXR1cm4gcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbiBhZnRlclRpY2soKSB7XG4gICAgICBmbi5hcHBseShudWxsLCBhcmdzKTtcbiAgICB9KTtcbiAgfVxufVxuXG4iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvcnMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyB8fFxuICBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKG9iaikge1xuICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqKTtcbiAgICB2YXIgZGVzY3JpcHRvcnMgPSB7fTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGRlc2NyaXB0b3JzW2tleXNbaV1dID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleXNbaV0pO1xuICAgIH1cbiAgICByZXR1cm4gZGVzY3JpcHRvcnM7XG4gIH07XG5cbnZhciBmb3JtYXRSZWdFeHAgPSAvJVtzZGolXS9nO1xuZXhwb3J0cy5mb3JtYXQgPSBmdW5jdGlvbihmKSB7XG4gIGlmICghaXNTdHJpbmcoZikpIHtcbiAgICB2YXIgb2JqZWN0cyA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBvYmplY3RzLnB1c2goaW5zcGVjdChhcmd1bWVudHNbaV0pKTtcbiAgICB9XG4gICAgcmV0dXJuIG9iamVjdHMuam9pbignICcpO1xuICB9XG5cbiAgdmFyIGkgPSAxO1xuICB2YXIgYXJncyA9IGFyZ3VtZW50cztcbiAgdmFyIGxlbiA9IGFyZ3MubGVuZ3RoO1xuICB2YXIgc3RyID0gU3RyaW5nKGYpLnJlcGxhY2UoZm9ybWF0UmVnRXhwLCBmdW5jdGlvbih4KSB7XG4gICAgaWYgKHggPT09ICclJScpIHJldHVybiAnJSc7XG4gICAgaWYgKGkgPj0gbGVuKSByZXR1cm4geDtcbiAgICBzd2l0Y2ggKHgpIHtcbiAgICAgIGNhc2UgJyVzJzogcmV0dXJuIFN0cmluZyhhcmdzW2krK10pO1xuICAgICAgY2FzZSAnJWQnOiByZXR1cm4gTnVtYmVyKGFyZ3NbaSsrXSk7XG4gICAgICBjYXNlICclaic6XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGFyZ3NbaSsrXSk7XG4gICAgICAgIH0gY2F0Y2ggKF8pIHtcbiAgICAgICAgICByZXR1cm4gJ1tDaXJjdWxhcl0nO1xuICAgICAgICB9XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4geDtcbiAgICB9XG4gIH0pO1xuICBmb3IgKHZhciB4ID0gYXJnc1tpXTsgaSA8IGxlbjsgeCA9IGFyZ3NbKytpXSkge1xuICAgIGlmIChpc051bGwoeCkgfHwgIWlzT2JqZWN0KHgpKSB7XG4gICAgICBzdHIgKz0gJyAnICsgeDtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RyICs9ICcgJyArIGluc3BlY3QoeCk7XG4gICAgfVxuICB9XG4gIHJldHVybiBzdHI7XG59O1xuXG5cbi8vIE1hcmsgdGhhdCBhIG1ldGhvZCBzaG91bGQgbm90IGJlIHVzZWQuXG4vLyBSZXR1cm5zIGEgbW9kaWZpZWQgZnVuY3Rpb24gd2hpY2ggd2FybnMgb25jZSBieSBkZWZhdWx0LlxuLy8gSWYgLS1uby1kZXByZWNhdGlvbiBpcyBzZXQsIHRoZW4gaXQgaXMgYSBuby1vcC5cbmV4cG9ydHMuZGVwcmVjYXRlID0gZnVuY3Rpb24oZm4sIG1zZykge1xuICBpZiAodHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmIHByb2Nlc3Mubm9EZXByZWNhdGlvbiA9PT0gdHJ1ZSkge1xuICAgIHJldHVybiBmbjtcbiAgfVxuXG4gIC8vIEFsbG93IGZvciBkZXByZWNhdGluZyB0aGluZ3MgaW4gdGhlIHByb2Nlc3Mgb2Ygc3RhcnRpbmcgdXAuXG4gIGlmICh0eXBlb2YgcHJvY2VzcyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZXhwb3J0cy5kZXByZWNhdGUoZm4sIG1zZykuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9O1xuICB9XG5cbiAgdmFyIHdhcm5lZCA9IGZhbHNlO1xuICBmdW5jdGlvbiBkZXByZWNhdGVkKCkge1xuICAgIGlmICghd2FybmVkKSB7XG4gICAgICBpZiAocHJvY2Vzcy50aHJvd0RlcHJlY2F0aW9uKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihtc2cpO1xuICAgICAgfSBlbHNlIGlmIChwcm9jZXNzLnRyYWNlRGVwcmVjYXRpb24pIHtcbiAgICAgICAgY29uc29sZS50cmFjZShtc2cpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihtc2cpO1xuICAgICAgfVxuICAgICAgd2FybmVkID0gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICByZXR1cm4gZGVwcmVjYXRlZDtcbn07XG5cblxudmFyIGRlYnVncyA9IHt9O1xudmFyIGRlYnVnRW52aXJvbjtcbmV4cG9ydHMuZGVidWdsb2cgPSBmdW5jdGlvbihzZXQpIHtcbiAgaWYgKGlzVW5kZWZpbmVkKGRlYnVnRW52aXJvbikpXG4gICAgZGVidWdFbnZpcm9uID0gcHJvY2Vzcy5lbnYuTk9ERV9ERUJVRyB8fCAnJztcbiAgc2V0ID0gc2V0LnRvVXBwZXJDYXNlKCk7XG4gIGlmICghZGVidWdzW3NldF0pIHtcbiAgICBpZiAobmV3IFJlZ0V4cCgnXFxcXGInICsgc2V0ICsgJ1xcXFxiJywgJ2knKS50ZXN0KGRlYnVnRW52aXJvbikpIHtcbiAgICAgIHZhciBwaWQgPSBwcm9jZXNzLnBpZDtcbiAgICAgIGRlYnVnc1tzZXRdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBtc2cgPSBleHBvcnRzLmZvcm1hdC5hcHBseShleHBvcnRzLCBhcmd1bWVudHMpO1xuICAgICAgICBjb25zb2xlLmVycm9yKCclcyAlZDogJXMnLCBzZXQsIHBpZCwgbXNnKTtcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlYnVnc1tzZXRdID0gZnVuY3Rpb24oKSB7fTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGRlYnVnc1tzZXRdO1xufTtcblxuXG4vKipcbiAqIEVjaG9zIHRoZSB2YWx1ZSBvZiBhIHZhbHVlLiBUcnlzIHRvIHByaW50IHRoZSB2YWx1ZSBvdXRcbiAqIGluIHRoZSBiZXN0IHdheSBwb3NzaWJsZSBnaXZlbiB0aGUgZGlmZmVyZW50IHR5cGVzLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmogVGhlIG9iamVjdCB0byBwcmludCBvdXQuXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0cyBPcHRpb25hbCBvcHRpb25zIG9iamVjdCB0aGF0IGFsdGVycyB0aGUgb3V0cHV0LlxuICovXG4vKiBsZWdhY3k6IG9iaiwgc2hvd0hpZGRlbiwgZGVwdGgsIGNvbG9ycyovXG5mdW5jdGlvbiBpbnNwZWN0KG9iaiwgb3B0cykge1xuICAvLyBkZWZhdWx0IG9wdGlvbnNcbiAgdmFyIGN0eCA9IHtcbiAgICBzZWVuOiBbXSxcbiAgICBzdHlsaXplOiBzdHlsaXplTm9Db2xvclxuICB9O1xuICAvLyBsZWdhY3kuLi5cbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPj0gMykgY3R4LmRlcHRoID0gYXJndW1lbnRzWzJdO1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+PSA0KSBjdHguY29sb3JzID0gYXJndW1lbnRzWzNdO1xuICBpZiAoaXNCb29sZWFuKG9wdHMpKSB7XG4gICAgLy8gbGVnYWN5Li4uXG4gICAgY3R4LnNob3dIaWRkZW4gPSBvcHRzO1xuICB9IGVsc2UgaWYgKG9wdHMpIHtcbiAgICAvLyBnb3QgYW4gXCJvcHRpb25zXCIgb2JqZWN0XG4gICAgZXhwb3J0cy5fZXh0ZW5kKGN0eCwgb3B0cyk7XG4gIH1cbiAgLy8gc2V0IGRlZmF1bHQgb3B0aW9uc1xuICBpZiAoaXNVbmRlZmluZWQoY3R4LnNob3dIaWRkZW4pKSBjdHguc2hvd0hpZGRlbiA9IGZhbHNlO1xuICBpZiAoaXNVbmRlZmluZWQoY3R4LmRlcHRoKSkgY3R4LmRlcHRoID0gMjtcbiAgaWYgKGlzVW5kZWZpbmVkKGN0eC5jb2xvcnMpKSBjdHguY29sb3JzID0gZmFsc2U7XG4gIGlmIChpc1VuZGVmaW5lZChjdHguY3VzdG9tSW5zcGVjdCkpIGN0eC5jdXN0b21JbnNwZWN0ID0gdHJ1ZTtcbiAgaWYgKGN0eC5jb2xvcnMpIGN0eC5zdHlsaXplID0gc3R5bGl6ZVdpdGhDb2xvcjtcbiAgcmV0dXJuIGZvcm1hdFZhbHVlKGN0eCwgb2JqLCBjdHguZGVwdGgpO1xufVxuZXhwb3J0cy5pbnNwZWN0ID0gaW5zcGVjdDtcblxuXG4vLyBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0FOU0lfZXNjYXBlX2NvZGUjZ3JhcGhpY3Ncbmluc3BlY3QuY29sb3JzID0ge1xuICAnYm9sZCcgOiBbMSwgMjJdLFxuICAnaXRhbGljJyA6IFszLCAyM10sXG4gICd1bmRlcmxpbmUnIDogWzQsIDI0XSxcbiAgJ2ludmVyc2UnIDogWzcsIDI3XSxcbiAgJ3doaXRlJyA6IFszNywgMzldLFxuICAnZ3JleScgOiBbOTAsIDM5XSxcbiAgJ2JsYWNrJyA6IFszMCwgMzldLFxuICAnYmx1ZScgOiBbMzQsIDM5XSxcbiAgJ2N5YW4nIDogWzM2LCAzOV0sXG4gICdncmVlbicgOiBbMzIsIDM5XSxcbiAgJ21hZ2VudGEnIDogWzM1LCAzOV0sXG4gICdyZWQnIDogWzMxLCAzOV0sXG4gICd5ZWxsb3cnIDogWzMzLCAzOV1cbn07XG5cbi8vIERvbid0IHVzZSAnYmx1ZScgbm90IHZpc2libGUgb24gY21kLmV4ZVxuaW5zcGVjdC5zdHlsZXMgPSB7XG4gICdzcGVjaWFsJzogJ2N5YW4nLFxuICAnbnVtYmVyJzogJ3llbGxvdycsXG4gICdib29sZWFuJzogJ3llbGxvdycsXG4gICd1bmRlZmluZWQnOiAnZ3JleScsXG4gICdudWxsJzogJ2JvbGQnLFxuICAnc3RyaW5nJzogJ2dyZWVuJyxcbiAgJ2RhdGUnOiAnbWFnZW50YScsXG4gIC8vIFwibmFtZVwiOiBpbnRlbnRpb25hbGx5IG5vdCBzdHlsaW5nXG4gICdyZWdleHAnOiAncmVkJ1xufTtcblxuXG5mdW5jdGlvbiBzdHlsaXplV2l0aENvbG9yKHN0ciwgc3R5bGVUeXBlKSB7XG4gIHZhciBzdHlsZSA9IGluc3BlY3Quc3R5bGVzW3N0eWxlVHlwZV07XG5cbiAgaWYgKHN0eWxlKSB7XG4gICAgcmV0dXJuICdcXHUwMDFiWycgKyBpbnNwZWN0LmNvbG9yc1tzdHlsZV1bMF0gKyAnbScgKyBzdHIgK1xuICAgICAgICAgICAnXFx1MDAxYlsnICsgaW5zcGVjdC5jb2xvcnNbc3R5bGVdWzFdICsgJ20nO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBzdHI7XG4gIH1cbn1cblxuXG5mdW5jdGlvbiBzdHlsaXplTm9Db2xvcihzdHIsIHN0eWxlVHlwZSkge1xuICByZXR1cm4gc3RyO1xufVxuXG5cbmZ1bmN0aW9uIGFycmF5VG9IYXNoKGFycmF5KSB7XG4gIHZhciBoYXNoID0ge307XG5cbiAgYXJyYXkuZm9yRWFjaChmdW5jdGlvbih2YWwsIGlkeCkge1xuICAgIGhhc2hbdmFsXSA9IHRydWU7XG4gIH0pO1xuXG4gIHJldHVybiBoYXNoO1xufVxuXG5cbmZ1bmN0aW9uIGZvcm1hdFZhbHVlKGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcykge1xuICAvLyBQcm92aWRlIGEgaG9vayBmb3IgdXNlci1zcGVjaWZpZWQgaW5zcGVjdCBmdW5jdGlvbnMuXG4gIC8vIENoZWNrIHRoYXQgdmFsdWUgaXMgYW4gb2JqZWN0IHdpdGggYW4gaW5zcGVjdCBmdW5jdGlvbiBvbiBpdFxuICBpZiAoY3R4LmN1c3RvbUluc3BlY3QgJiZcbiAgICAgIHZhbHVlICYmXG4gICAgICBpc0Z1bmN0aW9uKHZhbHVlLmluc3BlY3QpICYmXG4gICAgICAvLyBGaWx0ZXIgb3V0IHRoZSB1dGlsIG1vZHVsZSwgaXQncyBpbnNwZWN0IGZ1bmN0aW9uIGlzIHNwZWNpYWxcbiAgICAgIHZhbHVlLmluc3BlY3QgIT09IGV4cG9ydHMuaW5zcGVjdCAmJlxuICAgICAgLy8gQWxzbyBmaWx0ZXIgb3V0IGFueSBwcm90b3R5cGUgb2JqZWN0cyB1c2luZyB0aGUgY2lyY3VsYXIgY2hlY2suXG4gICAgICAhKHZhbHVlLmNvbnN0cnVjdG9yICYmIHZhbHVlLmNvbnN0cnVjdG9yLnByb3RvdHlwZSA9PT0gdmFsdWUpKSB7XG4gICAgdmFyIHJldCA9IHZhbHVlLmluc3BlY3QocmVjdXJzZVRpbWVzLCBjdHgpO1xuICAgIGlmICghaXNTdHJpbmcocmV0KSkge1xuICAgICAgcmV0ID0gZm9ybWF0VmFsdWUoY3R4LCByZXQsIHJlY3Vyc2VUaW1lcyk7XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG4gIH1cblxuICAvLyBQcmltaXRpdmUgdHlwZXMgY2Fubm90IGhhdmUgcHJvcGVydGllc1xuICB2YXIgcHJpbWl0aXZlID0gZm9ybWF0UHJpbWl0aXZlKGN0eCwgdmFsdWUpO1xuICBpZiAocHJpbWl0aXZlKSB7XG4gICAgcmV0dXJuIHByaW1pdGl2ZTtcbiAgfVxuXG4gIC8vIExvb2sgdXAgdGhlIGtleXMgb2YgdGhlIG9iamVjdC5cbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyh2YWx1ZSk7XG4gIHZhciB2aXNpYmxlS2V5cyA9IGFycmF5VG9IYXNoKGtleXMpO1xuXG4gIGlmIChjdHguc2hvd0hpZGRlbikge1xuICAgIGtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh2YWx1ZSk7XG4gIH1cblxuICAvLyBJRSBkb2Vzbid0IG1ha2UgZXJyb3IgZmllbGRzIG5vbi1lbnVtZXJhYmxlXG4gIC8vIGh0dHA6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9pZS9kd3c1MnNidCh2PXZzLjk0KS5hc3B4XG4gIGlmIChpc0Vycm9yKHZhbHVlKVxuICAgICAgJiYgKGtleXMuaW5kZXhPZignbWVzc2FnZScpID49IDAgfHwga2V5cy5pbmRleE9mKCdkZXNjcmlwdGlvbicpID49IDApKSB7XG4gICAgcmV0dXJuIGZvcm1hdEVycm9yKHZhbHVlKTtcbiAgfVxuXG4gIC8vIFNvbWUgdHlwZSBvZiBvYmplY3Qgd2l0aG91dCBwcm9wZXJ0aWVzIGNhbiBiZSBzaG9ydGN1dHRlZC5cbiAgaWYgKGtleXMubGVuZ3RoID09PSAwKSB7XG4gICAgaWYgKGlzRnVuY3Rpb24odmFsdWUpKSB7XG4gICAgICB2YXIgbmFtZSA9IHZhbHVlLm5hbWUgPyAnOiAnICsgdmFsdWUubmFtZSA6ICcnO1xuICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKCdbRnVuY3Rpb24nICsgbmFtZSArICddJywgJ3NwZWNpYWwnKTtcbiAgICB9XG4gICAgaWYgKGlzUmVnRXhwKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSksICdyZWdleHAnKTtcbiAgICB9XG4gICAgaWYgKGlzRGF0ZSh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZShEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSwgJ2RhdGUnKTtcbiAgICB9XG4gICAgaWYgKGlzRXJyb3IodmFsdWUpKSB7XG4gICAgICByZXR1cm4gZm9ybWF0RXJyb3IodmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBiYXNlID0gJycsIGFycmF5ID0gZmFsc2UsIGJyYWNlcyA9IFsneycsICd9J107XG5cbiAgLy8gTWFrZSBBcnJheSBzYXkgdGhhdCB0aGV5IGFyZSBBcnJheVxuICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICBhcnJheSA9IHRydWU7XG4gICAgYnJhY2VzID0gWydbJywgJ10nXTtcbiAgfVxuXG4gIC8vIE1ha2UgZnVuY3Rpb25zIHNheSB0aGF0IHRoZXkgYXJlIGZ1bmN0aW9uc1xuICBpZiAoaXNGdW5jdGlvbih2YWx1ZSkpIHtcbiAgICB2YXIgbiA9IHZhbHVlLm5hbWUgPyAnOiAnICsgdmFsdWUubmFtZSA6ICcnO1xuICAgIGJhc2UgPSAnIFtGdW5jdGlvbicgKyBuICsgJ10nO1xuICB9XG5cbiAgLy8gTWFrZSBSZWdFeHBzIHNheSB0aGF0IHRoZXkgYXJlIFJlZ0V4cHNcbiAgaWYgKGlzUmVnRXhwKHZhbHVlKSkge1xuICAgIGJhc2UgPSAnICcgKyBSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICB9XG5cbiAgLy8gTWFrZSBkYXRlcyB3aXRoIHByb3BlcnRpZXMgZmlyc3Qgc2F5IHRoZSBkYXRlXG4gIGlmIChpc0RhdGUodmFsdWUpKSB7XG4gICAgYmFzZSA9ICcgJyArIERhdGUucHJvdG90eXBlLnRvVVRDU3RyaW5nLmNhbGwodmFsdWUpO1xuICB9XG5cbiAgLy8gTWFrZSBlcnJvciB3aXRoIG1lc3NhZ2UgZmlyc3Qgc2F5IHRoZSBlcnJvclxuICBpZiAoaXNFcnJvcih2YWx1ZSkpIHtcbiAgICBiYXNlID0gJyAnICsgZm9ybWF0RXJyb3IodmFsdWUpO1xuICB9XG5cbiAgaWYgKGtleXMubGVuZ3RoID09PSAwICYmICghYXJyYXkgfHwgdmFsdWUubGVuZ3RoID09IDApKSB7XG4gICAgcmV0dXJuIGJyYWNlc1swXSArIGJhc2UgKyBicmFjZXNbMV07XG4gIH1cblxuICBpZiAocmVjdXJzZVRpbWVzIDwgMCkge1xuICAgIGlmIChpc1JlZ0V4cCh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZShSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpLCAncmVnZXhwJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZSgnW09iamVjdF0nLCAnc3BlY2lhbCcpO1xuICAgIH1cbiAgfVxuXG4gIGN0eC5zZWVuLnB1c2godmFsdWUpO1xuXG4gIHZhciBvdXRwdXQ7XG4gIGlmIChhcnJheSkge1xuICAgIG91dHB1dCA9IGZvcm1hdEFycmF5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsIGtleXMpO1xuICB9IGVsc2Uge1xuICAgIG91dHB1dCA9IGtleXMubWFwKGZ1bmN0aW9uKGtleSkge1xuICAgICAgcmV0dXJuIGZvcm1hdFByb3BlcnR5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsIGtleSwgYXJyYXkpO1xuICAgIH0pO1xuICB9XG5cbiAgY3R4LnNlZW4ucG9wKCk7XG5cbiAgcmV0dXJuIHJlZHVjZVRvU2luZ2xlU3RyaW5nKG91dHB1dCwgYmFzZSwgYnJhY2VzKTtcbn1cblxuXG5mdW5jdGlvbiBmb3JtYXRQcmltaXRpdmUoY3R4LCB2YWx1ZSkge1xuICBpZiAoaXNVbmRlZmluZWQodmFsdWUpKVxuICAgIHJldHVybiBjdHguc3R5bGl6ZSgndW5kZWZpbmVkJywgJ3VuZGVmaW5lZCcpO1xuICBpZiAoaXNTdHJpbmcodmFsdWUpKSB7XG4gICAgdmFyIHNpbXBsZSA9ICdcXCcnICsgSlNPTi5zdHJpbmdpZnkodmFsdWUpLnJlcGxhY2UoL15cInxcIiQvZywgJycpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvJy9nLCBcIlxcXFwnXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvXFxcXFwiL2csICdcIicpICsgJ1xcJyc7XG4gICAgcmV0dXJuIGN0eC5zdHlsaXplKHNpbXBsZSwgJ3N0cmluZycpO1xuICB9XG4gIGlmIChpc051bWJlcih2YWx1ZSkpXG4gICAgcmV0dXJuIGN0eC5zdHlsaXplKCcnICsgdmFsdWUsICdudW1iZXInKTtcbiAgaWYgKGlzQm9vbGVhbih2YWx1ZSkpXG4gICAgcmV0dXJuIGN0eC5zdHlsaXplKCcnICsgdmFsdWUsICdib29sZWFuJyk7XG4gIC8vIEZvciBzb21lIHJlYXNvbiB0eXBlb2YgbnVsbCBpcyBcIm9iamVjdFwiLCBzbyBzcGVjaWFsIGNhc2UgaGVyZS5cbiAgaWYgKGlzTnVsbCh2YWx1ZSkpXG4gICAgcmV0dXJuIGN0eC5zdHlsaXplKCdudWxsJywgJ251bGwnKTtcbn1cblxuXG5mdW5jdGlvbiBmb3JtYXRFcnJvcih2YWx1ZSkge1xuICByZXR1cm4gJ1snICsgRXJyb3IucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpICsgJ10nO1xufVxuXG5cbmZ1bmN0aW9uIGZvcm1hdEFycmF5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsIGtleXMpIHtcbiAgdmFyIG91dHB1dCA9IFtdO1xuICBmb3IgKHZhciBpID0gMCwgbCA9IHZhbHVlLmxlbmd0aDsgaSA8IGw7ICsraSkge1xuICAgIGlmIChoYXNPd25Qcm9wZXJ0eSh2YWx1ZSwgU3RyaW5nKGkpKSkge1xuICAgICAgb3V0cHV0LnB1c2goZm9ybWF0UHJvcGVydHkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cyxcbiAgICAgICAgICBTdHJpbmcoaSksIHRydWUpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3V0cHV0LnB1c2goJycpO1xuICAgIH1cbiAgfVxuICBrZXlzLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG4gICAgaWYgKCFrZXkubWF0Y2goL15cXGQrJC8pKSB7XG4gICAgICBvdXRwdXQucHVzaChmb3JtYXRQcm9wZXJ0eShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLFxuICAgICAgICAgIGtleSwgdHJ1ZSkpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBvdXRwdXQ7XG59XG5cblxuZnVuY3Rpb24gZm9ybWF0UHJvcGVydHkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cywga2V5LCBhcnJheSkge1xuICB2YXIgbmFtZSwgc3RyLCBkZXNjO1xuICBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih2YWx1ZSwga2V5KSB8fCB7IHZhbHVlOiB2YWx1ZVtrZXldIH07XG4gIGlmIChkZXNjLmdldCkge1xuICAgIGlmIChkZXNjLnNldCkge1xuICAgICAgc3RyID0gY3R4LnN0eWxpemUoJ1tHZXR0ZXIvU2V0dGVyXScsICdzcGVjaWFsJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0ciA9IGN0eC5zdHlsaXplKCdbR2V0dGVyXScsICdzcGVjaWFsJyk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChkZXNjLnNldCkge1xuICAgICAgc3RyID0gY3R4LnN0eWxpemUoJ1tTZXR0ZXJdJywgJ3NwZWNpYWwnKTtcbiAgICB9XG4gIH1cbiAgaWYgKCFoYXNPd25Qcm9wZXJ0eSh2aXNpYmxlS2V5cywga2V5KSkge1xuICAgIG5hbWUgPSAnWycgKyBrZXkgKyAnXSc7XG4gIH1cbiAgaWYgKCFzdHIpIHtcbiAgICBpZiAoY3R4LnNlZW4uaW5kZXhPZihkZXNjLnZhbHVlKSA8IDApIHtcbiAgICAgIGlmIChpc051bGwocmVjdXJzZVRpbWVzKSkge1xuICAgICAgICBzdHIgPSBmb3JtYXRWYWx1ZShjdHgsIGRlc2MudmFsdWUsIG51bGwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RyID0gZm9ybWF0VmFsdWUoY3R4LCBkZXNjLnZhbHVlLCByZWN1cnNlVGltZXMgLSAxKTtcbiAgICAgIH1cbiAgICAgIGlmIChzdHIuaW5kZXhPZignXFxuJykgPiAtMSkge1xuICAgICAgICBpZiAoYXJyYXkpIHtcbiAgICAgICAgICBzdHIgPSBzdHIuc3BsaXQoJ1xcbicpLm1hcChmdW5jdGlvbihsaW5lKSB7XG4gICAgICAgICAgICByZXR1cm4gJyAgJyArIGxpbmU7XG4gICAgICAgICAgfSkuam9pbignXFxuJykuc3Vic3RyKDIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN0ciA9ICdcXG4nICsgc3RyLnNwbGl0KCdcXG4nKS5tYXAoZnVuY3Rpb24obGluZSkge1xuICAgICAgICAgICAgcmV0dXJuICcgICAnICsgbGluZTtcbiAgICAgICAgICB9KS5qb2luKCdcXG4nKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzdHIgPSBjdHguc3R5bGl6ZSgnW0NpcmN1bGFyXScsICdzcGVjaWFsJyk7XG4gICAgfVxuICB9XG4gIGlmIChpc1VuZGVmaW5lZChuYW1lKSkge1xuICAgIGlmIChhcnJheSAmJiBrZXkubWF0Y2goL15cXGQrJC8pKSB7XG4gICAgICByZXR1cm4gc3RyO1xuICAgIH1cbiAgICBuYW1lID0gSlNPTi5zdHJpbmdpZnkoJycgKyBrZXkpO1xuICAgIGlmIChuYW1lLm1hdGNoKC9eXCIoW2EtekEtWl9dW2EtekEtWl8wLTldKilcIiQvKSkge1xuICAgICAgbmFtZSA9IG5hbWUuc3Vic3RyKDEsIG5hbWUubGVuZ3RoIC0gMik7XG4gICAgICBuYW1lID0gY3R4LnN0eWxpemUobmFtZSwgJ25hbWUnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbmFtZSA9IG5hbWUucmVwbGFjZSgvJy9nLCBcIlxcXFwnXCIpXG4gICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXFxcXCIvZywgJ1wiJylcbiAgICAgICAgICAgICAgICAgLnJlcGxhY2UoLyheXCJ8XCIkKS9nLCBcIidcIik7XG4gICAgICBuYW1lID0gY3R4LnN0eWxpemUobmFtZSwgJ3N0cmluZycpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuYW1lICsgJzogJyArIHN0cjtcbn1cblxuXG5mdW5jdGlvbiByZWR1Y2VUb1NpbmdsZVN0cmluZyhvdXRwdXQsIGJhc2UsIGJyYWNlcykge1xuICB2YXIgbnVtTGluZXNFc3QgPSAwO1xuICB2YXIgbGVuZ3RoID0gb3V0cHV0LnJlZHVjZShmdW5jdGlvbihwcmV2LCBjdXIpIHtcbiAgICBudW1MaW5lc0VzdCsrO1xuICAgIGlmIChjdXIuaW5kZXhPZignXFxuJykgPj0gMCkgbnVtTGluZXNFc3QrKztcbiAgICByZXR1cm4gcHJldiArIGN1ci5yZXBsYWNlKC9cXHUwMDFiXFxbXFxkXFxkP20vZywgJycpLmxlbmd0aCArIDE7XG4gIH0sIDApO1xuXG4gIGlmIChsZW5ndGggPiA2MCkge1xuICAgIHJldHVybiBicmFjZXNbMF0gK1xuICAgICAgICAgICAoYmFzZSA9PT0gJycgPyAnJyA6IGJhc2UgKyAnXFxuICcpICtcbiAgICAgICAgICAgJyAnICtcbiAgICAgICAgICAgb3V0cHV0LmpvaW4oJyxcXG4gICcpICtcbiAgICAgICAgICAgJyAnICtcbiAgICAgICAgICAgYnJhY2VzWzFdO1xuICB9XG5cbiAgcmV0dXJuIGJyYWNlc1swXSArIGJhc2UgKyAnICcgKyBvdXRwdXQuam9pbignLCAnKSArICcgJyArIGJyYWNlc1sxXTtcbn1cblxuXG4vLyBOT1RFOiBUaGVzZSB0eXBlIGNoZWNraW5nIGZ1bmN0aW9ucyBpbnRlbnRpb25hbGx5IGRvbid0IHVzZSBgaW5zdGFuY2VvZmBcbi8vIGJlY2F1c2UgaXQgaXMgZnJhZ2lsZSBhbmQgY2FuIGJlIGVhc2lseSBmYWtlZCB3aXRoIGBPYmplY3QuY3JlYXRlKClgLlxuZnVuY3Rpb24gaXNBcnJheShhcikge1xuICByZXR1cm4gQXJyYXkuaXNBcnJheShhcik7XG59XG5leHBvcnRzLmlzQXJyYXkgPSBpc0FycmF5O1xuXG5mdW5jdGlvbiBpc0Jvb2xlYW4oYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnYm9vbGVhbic7XG59XG5leHBvcnRzLmlzQm9vbGVhbiA9IGlzQm9vbGVhbjtcblxuZnVuY3Rpb24gaXNOdWxsKGFyZykge1xuICByZXR1cm4gYXJnID09PSBudWxsO1xufVxuZXhwb3J0cy5pc051bGwgPSBpc051bGw7XG5cbmZ1bmN0aW9uIGlzTnVsbE9yVW5kZWZpbmVkKGFyZykge1xuICByZXR1cm4gYXJnID09IG51bGw7XG59XG5leHBvcnRzLmlzTnVsbE9yVW5kZWZpbmVkID0gaXNOdWxsT3JVbmRlZmluZWQ7XG5cbmZ1bmN0aW9uIGlzTnVtYmVyKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ251bWJlcic7XG59XG5leHBvcnRzLmlzTnVtYmVyID0gaXNOdW1iZXI7XG5cbmZ1bmN0aW9uIGlzU3RyaW5nKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ3N0cmluZyc7XG59XG5leHBvcnRzLmlzU3RyaW5nID0gaXNTdHJpbmc7XG5cbmZ1bmN0aW9uIGlzU3ltYm9sKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ3N5bWJvbCc7XG59XG5leHBvcnRzLmlzU3ltYm9sID0gaXNTeW1ib2w7XG5cbmZ1bmN0aW9uIGlzVW5kZWZpbmVkKGFyZykge1xuICByZXR1cm4gYXJnID09PSB2b2lkIDA7XG59XG5leHBvcnRzLmlzVW5kZWZpbmVkID0gaXNVbmRlZmluZWQ7XG5cbmZ1bmN0aW9uIGlzUmVnRXhwKHJlKSB7XG4gIHJldHVybiBpc09iamVjdChyZSkgJiYgb2JqZWN0VG9TdHJpbmcocmUpID09PSAnW29iamVjdCBSZWdFeHBdJztcbn1cbmV4cG9ydHMuaXNSZWdFeHAgPSBpc1JlZ0V4cDtcblxuZnVuY3Rpb24gaXNPYmplY3QoYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnb2JqZWN0JyAmJiBhcmcgIT09IG51bGw7XG59XG5leHBvcnRzLmlzT2JqZWN0ID0gaXNPYmplY3Q7XG5cbmZ1bmN0aW9uIGlzRGF0ZShkKSB7XG4gIHJldHVybiBpc09iamVjdChkKSAmJiBvYmplY3RUb1N0cmluZyhkKSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xufVxuZXhwb3J0cy5pc0RhdGUgPSBpc0RhdGU7XG5cbmZ1bmN0aW9uIGlzRXJyb3IoZSkge1xuICByZXR1cm4gaXNPYmplY3QoZSkgJiZcbiAgICAgIChvYmplY3RUb1N0cmluZyhlKSA9PT0gJ1tvYmplY3QgRXJyb3JdJyB8fCBlIGluc3RhbmNlb2YgRXJyb3IpO1xufVxuZXhwb3J0cy5pc0Vycm9yID0gaXNFcnJvcjtcblxuZnVuY3Rpb24gaXNGdW5jdGlvbihhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdmdW5jdGlvbic7XG59XG5leHBvcnRzLmlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uO1xuXG5mdW5jdGlvbiBpc1ByaW1pdGl2ZShhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PT0gbnVsbCB8fFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ2Jvb2xlYW4nIHx8XG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnbnVtYmVyJyB8fFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ3N0cmluZycgfHxcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdzeW1ib2wnIHx8ICAvLyBFUzYgc3ltYm9sXG4gICAgICAgICB0eXBlb2YgYXJnID09PSAndW5kZWZpbmVkJztcbn1cbmV4cG9ydHMuaXNQcmltaXRpdmUgPSBpc1ByaW1pdGl2ZTtcblxuZXhwb3J0cy5pc0J1ZmZlciA9IHJlcXVpcmUoJy4vc3VwcG9ydC9pc0J1ZmZlcicpO1xuXG5mdW5jdGlvbiBvYmplY3RUb1N0cmluZyhvKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobyk7XG59XG5cblxuZnVuY3Rpb24gcGFkKG4pIHtcbiAgcmV0dXJuIG4gPCAxMCA/ICcwJyArIG4udG9TdHJpbmcoMTApIDogbi50b1N0cmluZygxMCk7XG59XG5cblxudmFyIG1vbnRocyA9IFsnSmFuJywgJ0ZlYicsICdNYXInLCAnQXByJywgJ01heScsICdKdW4nLCAnSnVsJywgJ0F1ZycsICdTZXAnLFxuICAgICAgICAgICAgICAnT2N0JywgJ05vdicsICdEZWMnXTtcblxuLy8gMjYgRmViIDE2OjE5OjM0XG5mdW5jdGlvbiB0aW1lc3RhbXAoKSB7XG4gIHZhciBkID0gbmV3IERhdGUoKTtcbiAgdmFyIHRpbWUgPSBbcGFkKGQuZ2V0SG91cnMoKSksXG4gICAgICAgICAgICAgIHBhZChkLmdldE1pbnV0ZXMoKSksXG4gICAgICAgICAgICAgIHBhZChkLmdldFNlY29uZHMoKSldLmpvaW4oJzonKTtcbiAgcmV0dXJuIFtkLmdldERhdGUoKSwgbW9udGhzW2QuZ2V0TW9udGgoKV0sIHRpbWVdLmpvaW4oJyAnKTtcbn1cblxuXG4vLyBsb2cgaXMganVzdCBhIHRoaW4gd3JhcHBlciB0byBjb25zb2xlLmxvZyB0aGF0IHByZXBlbmRzIGEgdGltZXN0YW1wXG5leHBvcnRzLmxvZyA9IGZ1bmN0aW9uKCkge1xuICBjb25zb2xlLmxvZygnJXMgLSAlcycsIHRpbWVzdGFtcCgpLCBleHBvcnRzLmZvcm1hdC5hcHBseShleHBvcnRzLCBhcmd1bWVudHMpKTtcbn07XG5cblxuLyoqXG4gKiBJbmhlcml0IHRoZSBwcm90b3R5cGUgbWV0aG9kcyBmcm9tIG9uZSBjb25zdHJ1Y3RvciBpbnRvIGFub3RoZXIuXG4gKlxuICogVGhlIEZ1bmN0aW9uLnByb3RvdHlwZS5pbmhlcml0cyBmcm9tIGxhbmcuanMgcmV3cml0dGVuIGFzIGEgc3RhbmRhbG9uZVxuICogZnVuY3Rpb24gKG5vdCBvbiBGdW5jdGlvbi5wcm90b3R5cGUpLiBOT1RFOiBJZiB0aGlzIGZpbGUgaXMgdG8gYmUgbG9hZGVkXG4gKiBkdXJpbmcgYm9vdHN0cmFwcGluZyB0aGlzIGZ1bmN0aW9uIG5lZWRzIHRvIGJlIHJld3JpdHRlbiB1c2luZyBzb21lIG5hdGl2ZVxuICogZnVuY3Rpb25zIGFzIHByb3RvdHlwZSBzZXR1cCB1c2luZyBub3JtYWwgSmF2YVNjcmlwdCBkb2VzIG5vdCB3b3JrIGFzXG4gKiBleHBlY3RlZCBkdXJpbmcgYm9vdHN0cmFwcGluZyAoc2VlIG1pcnJvci5qcyBpbiByMTE0OTAzKS5cbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjdG9yIENvbnN0cnVjdG9yIGZ1bmN0aW9uIHdoaWNoIG5lZWRzIHRvIGluaGVyaXQgdGhlXG4gKiAgICAgcHJvdG90eXBlLlxuICogQHBhcmFtIHtmdW5jdGlvbn0gc3VwZXJDdG9yIENvbnN0cnVjdG9yIGZ1bmN0aW9uIHRvIGluaGVyaXQgcHJvdG90eXBlIGZyb20uXG4gKi9cbmV4cG9ydHMuaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xuXG5leHBvcnRzLl9leHRlbmQgPSBmdW5jdGlvbihvcmlnaW4sIGFkZCkge1xuICAvLyBEb24ndCBkbyBhbnl0aGluZyBpZiBhZGQgaXNuJ3QgYW4gb2JqZWN0XG4gIGlmICghYWRkIHx8ICFpc09iamVjdChhZGQpKSByZXR1cm4gb3JpZ2luO1xuXG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMoYWRkKTtcbiAgdmFyIGkgPSBrZXlzLmxlbmd0aDtcbiAgd2hpbGUgKGktLSkge1xuICAgIG9yaWdpbltrZXlzW2ldXSA9IGFkZFtrZXlzW2ldXTtcbiAgfVxuICByZXR1cm4gb3JpZ2luO1xufTtcblxuZnVuY3Rpb24gaGFzT3duUHJvcGVydHkob2JqLCBwcm9wKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKTtcbn1cblxudmFyIGtDdXN0b21Qcm9taXNpZmllZFN5bWJvbCA9IHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnID8gU3ltYm9sKCd1dGlsLnByb21pc2lmeS5jdXN0b20nKSA6IHVuZGVmaW5lZDtcblxuZXhwb3J0cy5wcm9taXNpZnkgPSBmdW5jdGlvbiBwcm9taXNpZnkob3JpZ2luYWwpIHtcbiAgaWYgKHR5cGVvZiBvcmlnaW5hbCAhPT0gJ2Z1bmN0aW9uJylcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgXCJvcmlnaW5hbFwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBGdW5jdGlvbicpO1xuXG4gIGlmIChrQ3VzdG9tUHJvbWlzaWZpZWRTeW1ib2wgJiYgb3JpZ2luYWxba0N1c3RvbVByb21pc2lmaWVkU3ltYm9sXSkge1xuICAgIHZhciBmbiA9IG9yaWdpbmFsW2tDdXN0b21Qcm9taXNpZmllZFN5bWJvbF07XG4gICAgaWYgKHR5cGVvZiBmbiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwidXRpbC5wcm9taXNpZnkuY3VzdG9tXCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIEZ1bmN0aW9uJyk7XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShmbiwga0N1c3RvbVByb21pc2lmaWVkU3ltYm9sLCB7XG4gICAgICB2YWx1ZTogZm4sIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogZmFsc2UsIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIHJldHVybiBmbjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZuKCkge1xuICAgIHZhciBwcm9taXNlUmVzb2x2ZSwgcHJvbWlzZVJlamVjdDtcbiAgICB2YXIgcHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHByb21pc2VSZXNvbHZlID0gcmVzb2x2ZTtcbiAgICAgIHByb21pc2VSZWplY3QgPSByZWplY3Q7XG4gICAgfSk7XG5cbiAgICB2YXIgYXJncyA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhcmdzLnB1c2goYXJndW1lbnRzW2ldKTtcbiAgICB9XG4gICAgYXJncy5wdXNoKGZ1bmN0aW9uIChlcnIsIHZhbHVlKSB7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIHByb21pc2VSZWplY3QoZXJyKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHByb21pc2VSZXNvbHZlKHZhbHVlKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHRyeSB7XG4gICAgICBvcmlnaW5hbC5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHByb21pc2VSZWplY3QoZXJyKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJvbWlzZTtcbiAgfVxuXG4gIE9iamVjdC5zZXRQcm90b3R5cGVPZihmbiwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG9yaWdpbmFsKSk7XG5cbiAgaWYgKGtDdXN0b21Qcm9taXNpZmllZFN5bWJvbCkgT2JqZWN0LmRlZmluZVByb3BlcnR5KGZuLCBrQ3VzdG9tUHJvbWlzaWZpZWRTeW1ib2wsIHtcbiAgICB2YWx1ZTogZm4sIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogZmFsc2UsIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICB9KTtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKFxuICAgIGZuLFxuICAgIGdldE93blByb3BlcnR5RGVzY3JpcHRvcnMob3JpZ2luYWwpXG4gICk7XG59XG5cbmV4cG9ydHMucHJvbWlzaWZ5LmN1c3RvbSA9IGtDdXN0b21Qcm9taXNpZmllZFN5bWJvbFxuXG5mdW5jdGlvbiBjYWxsYmFja2lmeU9uUmVqZWN0ZWQocmVhc29uLCBjYikge1xuICAvLyBgIXJlYXNvbmAgZ3VhcmQgaW5zcGlyZWQgYnkgYmx1ZWJpcmQgKFJlZjogaHR0cHM6Ly9nb28uZ2wvdDVJUzZNKS5cbiAgLy8gQmVjYXVzZSBgbnVsbGAgaXMgYSBzcGVjaWFsIGVycm9yIHZhbHVlIGluIGNhbGxiYWNrcyB3aGljaCBtZWFucyBcIm5vIGVycm9yXG4gIC8vIG9jY3VycmVkXCIsIHdlIGVycm9yLXdyYXAgc28gdGhlIGNhbGxiYWNrIGNvbnN1bWVyIGNhbiBkaXN0aW5ndWlzaCBiZXR3ZWVuXG4gIC8vIFwidGhlIHByb21pc2UgcmVqZWN0ZWQgd2l0aCBudWxsXCIgb3IgXCJ0aGUgcHJvbWlzZSBmdWxmaWxsZWQgd2l0aCB1bmRlZmluZWRcIi5cbiAgaWYgKCFyZWFzb24pIHtcbiAgICB2YXIgbmV3UmVhc29uID0gbmV3IEVycm9yKCdQcm9taXNlIHdhcyByZWplY3RlZCB3aXRoIGEgZmFsc3kgdmFsdWUnKTtcbiAgICBuZXdSZWFzb24ucmVhc29uID0gcmVhc29uO1xuICAgIHJlYXNvbiA9IG5ld1JlYXNvbjtcbiAgfVxuICByZXR1cm4gY2IocmVhc29uKTtcbn1cblxuZnVuY3Rpb24gY2FsbGJhY2tpZnkob3JpZ2luYWwpIHtcbiAgaWYgKHR5cGVvZiBvcmlnaW5hbCAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBcIm9yaWdpbmFsXCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIEZ1bmN0aW9uJyk7XG4gIH1cblxuICAvLyBXZSBETyBOT1QgcmV0dXJuIHRoZSBwcm9taXNlIGFzIGl0IGdpdmVzIHRoZSB1c2VyIGEgZmFsc2Ugc2Vuc2UgdGhhdFxuICAvLyB0aGUgcHJvbWlzZSBpcyBhY3R1YWxseSBzb21laG93IHJlbGF0ZWQgdG8gdGhlIGNhbGxiYWNrJ3MgZXhlY3V0aW9uXG4gIC8vIGFuZCB0aGF0IHRoZSBjYWxsYmFjayB0aHJvd2luZyB3aWxsIHJlamVjdCB0aGUgcHJvbWlzZS5cbiAgZnVuY3Rpb24gY2FsbGJhY2tpZmllZCgpIHtcbiAgICB2YXIgYXJncyA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhcmdzLnB1c2goYXJndW1lbnRzW2ldKTtcbiAgICB9XG5cbiAgICB2YXIgbWF5YmVDYiA9IGFyZ3MucG9wKCk7XG4gICAgaWYgKHR5cGVvZiBtYXliZUNiICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgbGFzdCBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgRnVuY3Rpb24nKTtcbiAgICB9XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHZhciBjYiA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIG1heWJlQ2IuYXBwbHkoc2VsZiwgYXJndW1lbnRzKTtcbiAgICB9O1xuICAgIC8vIEluIHRydWUgbm9kZSBzdHlsZSB3ZSBwcm9jZXNzIHRoZSBjYWxsYmFjayBvbiBgbmV4dFRpY2tgIHdpdGggYWxsIHRoZVxuICAgIC8vIGltcGxpY2F0aW9ucyAoc3RhY2ssIGB1bmNhdWdodEV4Y2VwdGlvbmAsIGBhc3luY19ob29rc2ApXG4gICAgb3JpZ2luYWwuYXBwbHkodGhpcywgYXJncylcbiAgICAgIC50aGVuKGZ1bmN0aW9uKHJldCkgeyBwcm9jZXNzLm5leHRUaWNrKGNiLCBudWxsLCByZXQpIH0sXG4gICAgICAgICAgICBmdW5jdGlvbihyZWopIHsgcHJvY2Vzcy5uZXh0VGljayhjYWxsYmFja2lmeU9uUmVqZWN0ZWQsIHJlaiwgY2IpIH0pO1xuICB9XG5cbiAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGNhbGxiYWNraWZpZWQsIE9iamVjdC5nZXRQcm90b3R5cGVPZihvcmlnaW5hbCkpO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhjYWxsYmFja2lmaWVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKG9yaWdpbmFsKSk7XG4gIHJldHVybiBjYWxsYmFja2lmaWVkO1xufVxuZXhwb3J0cy5jYWxsYmFja2lmeSA9IGNhbGxiYWNraWZ5O1xuIiwiLy8gYmFzZWQgb24gdGhlIGFlcyBpbXBsaW1lbnRhdGlvbiBpbiB0cmlwbGUgc2VjXG4vLyBodHRwczovL2dpdGh1Yi5jb20va2V5YmFzZS90cmlwbGVzZWNcbi8vIHdoaWNoIGlzIGluIHR1cm4gYmFzZWQgb24gdGhlIG9uZSBmcm9tIGNyeXB0by1qc1xuLy8gaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC9jcnlwdG8tanMvXG5cbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxuXG5mdW5jdGlvbiBhc1VJbnQzMkFycmF5IChidWYpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYnVmKSkgYnVmID0gQnVmZmVyLmZyb20oYnVmKVxuXG4gIHZhciBsZW4gPSAoYnVmLmxlbmd0aCAvIDQpIHwgMFxuICB2YXIgb3V0ID0gbmV3IEFycmF5KGxlbilcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgb3V0W2ldID0gYnVmLnJlYWRVSW50MzJCRShpICogNClcbiAgfVxuXG4gIHJldHVybiBvdXRcbn1cblxuZnVuY3Rpb24gc2NydWJWZWMgKHYpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB2Lmxlbmd0aDsgdisrKSB7XG4gICAgdltpXSA9IDBcbiAgfVxufVxuXG5mdW5jdGlvbiBjcnlwdEJsb2NrIChNLCBrZXlTY2hlZHVsZSwgU1VCX01JWCwgU0JPWCwgblJvdW5kcykge1xuICB2YXIgU1VCX01JWDAgPSBTVUJfTUlYWzBdXG4gIHZhciBTVUJfTUlYMSA9IFNVQl9NSVhbMV1cbiAgdmFyIFNVQl9NSVgyID0gU1VCX01JWFsyXVxuICB2YXIgU1VCX01JWDMgPSBTVUJfTUlYWzNdXG5cbiAgdmFyIHMwID0gTVswXSBeIGtleVNjaGVkdWxlWzBdXG4gIHZhciBzMSA9IE1bMV0gXiBrZXlTY2hlZHVsZVsxXVxuICB2YXIgczIgPSBNWzJdIF4ga2V5U2NoZWR1bGVbMl1cbiAgdmFyIHMzID0gTVszXSBeIGtleVNjaGVkdWxlWzNdXG4gIHZhciB0MCwgdDEsIHQyLCB0M1xuICB2YXIga3NSb3cgPSA0XG5cbiAgZm9yICh2YXIgcm91bmQgPSAxOyByb3VuZCA8IG5Sb3VuZHM7IHJvdW5kKyspIHtcbiAgICB0MCA9IFNVQl9NSVgwW3MwID4+PiAyNF0gXiBTVUJfTUlYMVsoczEgPj4+IDE2KSAmIDB4ZmZdIF4gU1VCX01JWDJbKHMyID4+PiA4KSAmIDB4ZmZdIF4gU1VCX01JWDNbczMgJiAweGZmXSBeIGtleVNjaGVkdWxlW2tzUm93KytdXG4gICAgdDEgPSBTVUJfTUlYMFtzMSA+Pj4gMjRdIF4gU1VCX01JWDFbKHMyID4+PiAxNikgJiAweGZmXSBeIFNVQl9NSVgyWyhzMyA+Pj4gOCkgJiAweGZmXSBeIFNVQl9NSVgzW3MwICYgMHhmZl0gXiBrZXlTY2hlZHVsZVtrc1JvdysrXVxuICAgIHQyID0gU1VCX01JWDBbczIgPj4+IDI0XSBeIFNVQl9NSVgxWyhzMyA+Pj4gMTYpICYgMHhmZl0gXiBTVUJfTUlYMlsoczAgPj4+IDgpICYgMHhmZl0gXiBTVUJfTUlYM1tzMSAmIDB4ZmZdIF4ga2V5U2NoZWR1bGVba3NSb3crK11cbiAgICB0MyA9IFNVQl9NSVgwW3MzID4+PiAyNF0gXiBTVUJfTUlYMVsoczAgPj4+IDE2KSAmIDB4ZmZdIF4gU1VCX01JWDJbKHMxID4+PiA4KSAmIDB4ZmZdIF4gU1VCX01JWDNbczIgJiAweGZmXSBeIGtleVNjaGVkdWxlW2tzUm93KytdXG4gICAgczAgPSB0MFxuICAgIHMxID0gdDFcbiAgICBzMiA9IHQyXG4gICAgczMgPSB0M1xuICB9XG5cbiAgdDAgPSAoKFNCT1hbczAgPj4+IDI0XSA8PCAyNCkgfCAoU0JPWFsoczEgPj4+IDE2KSAmIDB4ZmZdIDw8IDE2KSB8IChTQk9YWyhzMiA+Pj4gOCkgJiAweGZmXSA8PCA4KSB8IFNCT1hbczMgJiAweGZmXSkgXiBrZXlTY2hlZHVsZVtrc1JvdysrXVxuICB0MSA9ICgoU0JPWFtzMSA+Pj4gMjRdIDw8IDI0KSB8IChTQk9YWyhzMiA+Pj4gMTYpICYgMHhmZl0gPDwgMTYpIHwgKFNCT1hbKHMzID4+PiA4KSAmIDB4ZmZdIDw8IDgpIHwgU0JPWFtzMCAmIDB4ZmZdKSBeIGtleVNjaGVkdWxlW2tzUm93KytdXG4gIHQyID0gKChTQk9YW3MyID4+PiAyNF0gPDwgMjQpIHwgKFNCT1hbKHMzID4+PiAxNikgJiAweGZmXSA8PCAxNikgfCAoU0JPWFsoczAgPj4+IDgpICYgMHhmZl0gPDwgOCkgfCBTQk9YW3MxICYgMHhmZl0pIF4ga2V5U2NoZWR1bGVba3NSb3crK11cbiAgdDMgPSAoKFNCT1hbczMgPj4+IDI0XSA8PCAyNCkgfCAoU0JPWFsoczAgPj4+IDE2KSAmIDB4ZmZdIDw8IDE2KSB8IChTQk9YWyhzMSA+Pj4gOCkgJiAweGZmXSA8PCA4KSB8IFNCT1hbczIgJiAweGZmXSkgXiBrZXlTY2hlZHVsZVtrc1JvdysrXVxuICB0MCA9IHQwID4+PiAwXG4gIHQxID0gdDEgPj4+IDBcbiAgdDIgPSB0MiA+Pj4gMFxuICB0MyA9IHQzID4+PiAwXG5cbiAgcmV0dXJuIFt0MCwgdDEsIHQyLCB0M11cbn1cblxuLy8gQUVTIGNvbnN0YW50c1xudmFyIFJDT04gPSBbMHgwMCwgMHgwMSwgMHgwMiwgMHgwNCwgMHgwOCwgMHgxMCwgMHgyMCwgMHg0MCwgMHg4MCwgMHgxYiwgMHgzNl1cbnZhciBHID0gKGZ1bmN0aW9uICgpIHtcbiAgLy8gQ29tcHV0ZSBkb3VibGUgdGFibGVcbiAgdmFyIGQgPSBuZXcgQXJyYXkoMjU2KVxuICBmb3IgKHZhciBqID0gMDsgaiA8IDI1NjsgaisrKSB7XG4gICAgaWYgKGogPCAxMjgpIHtcbiAgICAgIGRbal0gPSBqIDw8IDFcbiAgICB9IGVsc2Uge1xuICAgICAgZFtqXSA9IChqIDw8IDEpIF4gMHgxMWJcbiAgICB9XG4gIH1cblxuICB2YXIgU0JPWCA9IFtdXG4gIHZhciBJTlZfU0JPWCA9IFtdXG4gIHZhciBTVUJfTUlYID0gW1tdLCBbXSwgW10sIFtdXVxuICB2YXIgSU5WX1NVQl9NSVggPSBbW10sIFtdLCBbXSwgW11dXG5cbiAgLy8gV2FsayBHRigyXjgpXG4gIHZhciB4ID0gMFxuICB2YXIgeGkgPSAwXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgMjU2OyArK2kpIHtcbiAgICAvLyBDb21wdXRlIHNib3hcbiAgICB2YXIgc3ggPSB4aSBeICh4aSA8PCAxKSBeICh4aSA8PCAyKSBeICh4aSA8PCAzKSBeICh4aSA8PCA0KVxuICAgIHN4ID0gKHN4ID4+PiA4KSBeIChzeCAmIDB4ZmYpIF4gMHg2M1xuICAgIFNCT1hbeF0gPSBzeFxuICAgIElOVl9TQk9YW3N4XSA9IHhcblxuICAgIC8vIENvbXB1dGUgbXVsdGlwbGljYXRpb25cbiAgICB2YXIgeDIgPSBkW3hdXG4gICAgdmFyIHg0ID0gZFt4Ml1cbiAgICB2YXIgeDggPSBkW3g0XVxuXG4gICAgLy8gQ29tcHV0ZSBzdWIgYnl0ZXMsIG1peCBjb2x1bW5zIHRhYmxlc1xuICAgIHZhciB0ID0gKGRbc3hdICogMHgxMDEpIF4gKHN4ICogMHgxMDEwMTAwKVxuICAgIFNVQl9NSVhbMF1beF0gPSAodCA8PCAyNCkgfCAodCA+Pj4gOClcbiAgICBTVUJfTUlYWzFdW3hdID0gKHQgPDwgMTYpIHwgKHQgPj4+IDE2KVxuICAgIFNVQl9NSVhbMl1beF0gPSAodCA8PCA4KSB8ICh0ID4+PiAyNClcbiAgICBTVUJfTUlYWzNdW3hdID0gdFxuXG4gICAgLy8gQ29tcHV0ZSBpbnYgc3ViIGJ5dGVzLCBpbnYgbWl4IGNvbHVtbnMgdGFibGVzXG4gICAgdCA9ICh4OCAqIDB4MTAxMDEwMSkgXiAoeDQgKiAweDEwMDAxKSBeICh4MiAqIDB4MTAxKSBeICh4ICogMHgxMDEwMTAwKVxuICAgIElOVl9TVUJfTUlYWzBdW3N4XSA9ICh0IDw8IDI0KSB8ICh0ID4+PiA4KVxuICAgIElOVl9TVUJfTUlYWzFdW3N4XSA9ICh0IDw8IDE2KSB8ICh0ID4+PiAxNilcbiAgICBJTlZfU1VCX01JWFsyXVtzeF0gPSAodCA8PCA4KSB8ICh0ID4+PiAyNClcbiAgICBJTlZfU1VCX01JWFszXVtzeF0gPSB0XG5cbiAgICBpZiAoeCA9PT0gMCkge1xuICAgICAgeCA9IHhpID0gMVxuICAgIH0gZWxzZSB7XG4gICAgICB4ID0geDIgXiBkW2RbZFt4OCBeIHgyXV1dXG4gICAgICB4aSBePSBkW2RbeGldXVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgU0JPWDogU0JPWCxcbiAgICBJTlZfU0JPWDogSU5WX1NCT1gsXG4gICAgU1VCX01JWDogU1VCX01JWCxcbiAgICBJTlZfU1VCX01JWDogSU5WX1NVQl9NSVhcbiAgfVxufSkoKVxuXG5mdW5jdGlvbiBBRVMgKGtleSkge1xuICB0aGlzLl9rZXkgPSBhc1VJbnQzMkFycmF5KGtleSlcbiAgdGhpcy5fcmVzZXQoKVxufVxuXG5BRVMuYmxvY2tTaXplID0gNCAqIDRcbkFFUy5rZXlTaXplID0gMjU2IC8gOFxuQUVTLnByb3RvdHlwZS5ibG9ja1NpemUgPSBBRVMuYmxvY2tTaXplXG5BRVMucHJvdG90eXBlLmtleVNpemUgPSBBRVMua2V5U2l6ZVxuQUVTLnByb3RvdHlwZS5fcmVzZXQgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBrZXlXb3JkcyA9IHRoaXMuX2tleVxuICB2YXIga2V5U2l6ZSA9IGtleVdvcmRzLmxlbmd0aFxuICB2YXIgblJvdW5kcyA9IGtleVNpemUgKyA2XG4gIHZhciBrc1Jvd3MgPSAoblJvdW5kcyArIDEpICogNFxuXG4gIHZhciBrZXlTY2hlZHVsZSA9IFtdXG4gIGZvciAodmFyIGsgPSAwOyBrIDwga2V5U2l6ZTsgaysrKSB7XG4gICAga2V5U2NoZWR1bGVba10gPSBrZXlXb3Jkc1trXVxuICB9XG5cbiAgZm9yIChrID0ga2V5U2l6ZTsgayA8IGtzUm93czsgaysrKSB7XG4gICAgdmFyIHQgPSBrZXlTY2hlZHVsZVtrIC0gMV1cblxuICAgIGlmIChrICUga2V5U2l6ZSA9PT0gMCkge1xuICAgICAgdCA9ICh0IDw8IDgpIHwgKHQgPj4+IDI0KVxuICAgICAgdCA9XG4gICAgICAgIChHLlNCT1hbdCA+Pj4gMjRdIDw8IDI0KSB8XG4gICAgICAgIChHLlNCT1hbKHQgPj4+IDE2KSAmIDB4ZmZdIDw8IDE2KSB8XG4gICAgICAgIChHLlNCT1hbKHQgPj4+IDgpICYgMHhmZl0gPDwgOCkgfFxuICAgICAgICAoRy5TQk9YW3QgJiAweGZmXSlcblxuICAgICAgdCBePSBSQ09OWyhrIC8ga2V5U2l6ZSkgfCAwXSA8PCAyNFxuICAgIH0gZWxzZSBpZiAoa2V5U2l6ZSA+IDYgJiYgayAlIGtleVNpemUgPT09IDQpIHtcbiAgICAgIHQgPVxuICAgICAgICAoRy5TQk9YW3QgPj4+IDI0XSA8PCAyNCkgfFxuICAgICAgICAoRy5TQk9YWyh0ID4+PiAxNikgJiAweGZmXSA8PCAxNikgfFxuICAgICAgICAoRy5TQk9YWyh0ID4+PiA4KSAmIDB4ZmZdIDw8IDgpIHxcbiAgICAgICAgKEcuU0JPWFt0ICYgMHhmZl0pXG4gICAgfVxuXG4gICAga2V5U2NoZWR1bGVba10gPSBrZXlTY2hlZHVsZVtrIC0ga2V5U2l6ZV0gXiB0XG4gIH1cblxuICB2YXIgaW52S2V5U2NoZWR1bGUgPSBbXVxuICBmb3IgKHZhciBpayA9IDA7IGlrIDwga3NSb3dzOyBpaysrKSB7XG4gICAgdmFyIGtzUiA9IGtzUm93cyAtIGlrXG4gICAgdmFyIHR0ID0ga2V5U2NoZWR1bGVba3NSIC0gKGlrICUgNCA/IDAgOiA0KV1cblxuICAgIGlmIChpayA8IDQgfHwga3NSIDw9IDQpIHtcbiAgICAgIGludktleVNjaGVkdWxlW2lrXSA9IHR0XG4gICAgfSBlbHNlIHtcbiAgICAgIGludktleVNjaGVkdWxlW2lrXSA9XG4gICAgICAgIEcuSU5WX1NVQl9NSVhbMF1bRy5TQk9YW3R0ID4+PiAyNF1dIF5cbiAgICAgICAgRy5JTlZfU1VCX01JWFsxXVtHLlNCT1hbKHR0ID4+PiAxNikgJiAweGZmXV0gXlxuICAgICAgICBHLklOVl9TVUJfTUlYWzJdW0cuU0JPWFsodHQgPj4+IDgpICYgMHhmZl1dIF5cbiAgICAgICAgRy5JTlZfU1VCX01JWFszXVtHLlNCT1hbdHQgJiAweGZmXV1cbiAgICB9XG4gIH1cblxuICB0aGlzLl9uUm91bmRzID0gblJvdW5kc1xuICB0aGlzLl9rZXlTY2hlZHVsZSA9IGtleVNjaGVkdWxlXG4gIHRoaXMuX2ludktleVNjaGVkdWxlID0gaW52S2V5U2NoZWR1bGVcbn1cblxuQUVTLnByb3RvdHlwZS5lbmNyeXB0QmxvY2tSYXcgPSBmdW5jdGlvbiAoTSkge1xuICBNID0gYXNVSW50MzJBcnJheShNKVxuICByZXR1cm4gY3J5cHRCbG9jayhNLCB0aGlzLl9rZXlTY2hlZHVsZSwgRy5TVUJfTUlYLCBHLlNCT1gsIHRoaXMuX25Sb3VuZHMpXG59XG5cbkFFUy5wcm90b3R5cGUuZW5jcnlwdEJsb2NrID0gZnVuY3Rpb24gKE0pIHtcbiAgdmFyIG91dCA9IHRoaXMuZW5jcnlwdEJsb2NrUmF3KE0pXG4gIHZhciBidWYgPSBCdWZmZXIuYWxsb2NVbnNhZmUoMTYpXG4gIGJ1Zi53cml0ZVVJbnQzMkJFKG91dFswXSwgMClcbiAgYnVmLndyaXRlVUludDMyQkUob3V0WzFdLCA0KVxuICBidWYud3JpdGVVSW50MzJCRShvdXRbMl0sIDgpXG4gIGJ1Zi53cml0ZVVJbnQzMkJFKG91dFszXSwgMTIpXG4gIHJldHVybiBidWZcbn1cblxuQUVTLnByb3RvdHlwZS5kZWNyeXB0QmxvY2sgPSBmdW5jdGlvbiAoTSkge1xuICBNID0gYXNVSW50MzJBcnJheShNKVxuXG4gIC8vIHN3YXBcbiAgdmFyIG0xID0gTVsxXVxuICBNWzFdID0gTVszXVxuICBNWzNdID0gbTFcblxuICB2YXIgb3V0ID0gY3J5cHRCbG9jayhNLCB0aGlzLl9pbnZLZXlTY2hlZHVsZSwgRy5JTlZfU1VCX01JWCwgRy5JTlZfU0JPWCwgdGhpcy5fblJvdW5kcylcbiAgdmFyIGJ1ZiA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSgxNilcbiAgYnVmLndyaXRlVUludDMyQkUob3V0WzBdLCAwKVxuICBidWYud3JpdGVVSW50MzJCRShvdXRbM10sIDQpXG4gIGJ1Zi53cml0ZVVJbnQzMkJFKG91dFsyXSwgOClcbiAgYnVmLndyaXRlVUludDMyQkUob3V0WzFdLCAxMilcbiAgcmV0dXJuIGJ1ZlxufVxuXG5BRVMucHJvdG90eXBlLnNjcnViID0gZnVuY3Rpb24gKCkge1xuICBzY3J1YlZlYyh0aGlzLl9rZXlTY2hlZHVsZSlcbiAgc2NydWJWZWModGhpcy5faW52S2V5U2NoZWR1bGUpXG4gIHNjcnViVmVjKHRoaXMuX2tleSlcbn1cblxubW9kdWxlLmV4cG9ydHMuQUVTID0gQUVTXG4iLCJ2YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcbnZhciBNRDUgPSByZXF1aXJlKCdtZDUuanMnKVxuXG4vKiBlc2xpbnQtZGlzYWJsZSBjYW1lbGNhc2UgKi9cbmZ1bmN0aW9uIEVWUF9CeXRlc1RvS2V5IChwYXNzd29yZCwgc2FsdCwga2V5Qml0cywgaXZMZW4pIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIocGFzc3dvcmQpKSBwYXNzd29yZCA9IEJ1ZmZlci5mcm9tKHBhc3N3b3JkLCAnYmluYXJ5JylcbiAgaWYgKHNhbHQpIHtcbiAgICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihzYWx0KSkgc2FsdCA9IEJ1ZmZlci5mcm9tKHNhbHQsICdiaW5hcnknKVxuICAgIGlmIChzYWx0Lmxlbmd0aCAhPT0gOCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3NhbHQgc2hvdWxkIGJlIEJ1ZmZlciB3aXRoIDggYnl0ZSBsZW5ndGgnKVxuICB9XG5cbiAgdmFyIGtleUxlbiA9IGtleUJpdHMgLyA4XG4gIHZhciBrZXkgPSBCdWZmZXIuYWxsb2Moa2V5TGVuKVxuICB2YXIgaXYgPSBCdWZmZXIuYWxsb2MoaXZMZW4gfHwgMClcbiAgdmFyIHRtcCA9IEJ1ZmZlci5hbGxvYygwKVxuXG4gIHdoaWxlIChrZXlMZW4gPiAwIHx8IGl2TGVuID4gMCkge1xuICAgIHZhciBoYXNoID0gbmV3IE1ENSgpXG4gICAgaGFzaC51cGRhdGUodG1wKVxuICAgIGhhc2gudXBkYXRlKHBhc3N3b3JkKVxuICAgIGlmIChzYWx0KSBoYXNoLnVwZGF0ZShzYWx0KVxuICAgIHRtcCA9IGhhc2guZGlnZXN0KClcblxuICAgIHZhciB1c2VkID0gMFxuXG4gICAgaWYgKGtleUxlbiA+IDApIHtcbiAgICAgIHZhciBrZXlTdGFydCA9IGtleS5sZW5ndGggLSBrZXlMZW5cbiAgICAgIHVzZWQgPSBNYXRoLm1pbihrZXlMZW4sIHRtcC5sZW5ndGgpXG4gICAgICB0bXAuY29weShrZXksIGtleVN0YXJ0LCAwLCB1c2VkKVxuICAgICAga2V5TGVuIC09IHVzZWRcbiAgICB9XG5cbiAgICBpZiAodXNlZCA8IHRtcC5sZW5ndGggJiYgaXZMZW4gPiAwKSB7XG4gICAgICB2YXIgaXZTdGFydCA9IGl2Lmxlbmd0aCAtIGl2TGVuXG4gICAgICB2YXIgbGVuZ3RoID0gTWF0aC5taW4oaXZMZW4sIHRtcC5sZW5ndGggLSB1c2VkKVxuICAgICAgdG1wLmNvcHkoaXYsIGl2U3RhcnQsIHVzZWQsIHVzZWQgKyBsZW5ndGgpXG4gICAgICBpdkxlbiAtPSBsZW5ndGhcbiAgICB9XG4gIH1cblxuICB0bXAuZmlsbCgwKVxuICByZXR1cm4geyBrZXk6IGtleSwgaXY6IGl2IH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBFVlBfQnl0ZXNUb0tleVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQk4gPSByZXF1aXJlKCdibi5qcycpO1xudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcbnZhciBnZXROQUYgPSB1dGlscy5nZXROQUY7XG52YXIgZ2V0SlNGID0gdXRpbHMuZ2V0SlNGO1xudmFyIGFzc2VydCA9IHV0aWxzLmFzc2VydDtcblxuZnVuY3Rpb24gQmFzZUN1cnZlKHR5cGUsIGNvbmYpIHtcbiAgdGhpcy50eXBlID0gdHlwZTtcbiAgdGhpcy5wID0gbmV3IEJOKGNvbmYucCwgMTYpO1xuXG4gIC8vIFVzZSBNb250Z29tZXJ5LCB3aGVuIHRoZXJlIGlzIG5vIGZhc3QgcmVkdWN0aW9uIGZvciB0aGUgcHJpbWVcbiAgdGhpcy5yZWQgPSBjb25mLnByaW1lID8gQk4ucmVkKGNvbmYucHJpbWUpIDogQk4ubW9udCh0aGlzLnApO1xuXG4gIC8vIFVzZWZ1bCBmb3IgbWFueSBjdXJ2ZXNcbiAgdGhpcy56ZXJvID0gbmV3IEJOKDApLnRvUmVkKHRoaXMucmVkKTtcbiAgdGhpcy5vbmUgPSBuZXcgQk4oMSkudG9SZWQodGhpcy5yZWQpO1xuICB0aGlzLnR3byA9IG5ldyBCTigyKS50b1JlZCh0aGlzLnJlZCk7XG5cbiAgLy8gQ3VydmUgY29uZmlndXJhdGlvbiwgb3B0aW9uYWxcbiAgdGhpcy5uID0gY29uZi5uICYmIG5ldyBCTihjb25mLm4sIDE2KTtcbiAgdGhpcy5nID0gY29uZi5nICYmIHRoaXMucG9pbnRGcm9tSlNPTihjb25mLmcsIGNvbmYuZ1JlZCk7XG5cbiAgLy8gVGVtcG9yYXJ5IGFycmF5c1xuICB0aGlzLl93bmFmVDEgPSBuZXcgQXJyYXkoNCk7XG4gIHRoaXMuX3duYWZUMiA9IG5ldyBBcnJheSg0KTtcbiAgdGhpcy5fd25hZlQzID0gbmV3IEFycmF5KDQpO1xuICB0aGlzLl93bmFmVDQgPSBuZXcgQXJyYXkoNCk7XG5cbiAgLy8gR2VuZXJhbGl6ZWQgR3JlZyBNYXh3ZWxsJ3MgdHJpY2tcbiAgdmFyIGFkanVzdENvdW50ID0gdGhpcy5uICYmIHRoaXMucC5kaXYodGhpcy5uKTtcbiAgaWYgKCFhZGp1c3RDb3VudCB8fCBhZGp1c3RDb3VudC5jbXBuKDEwMCkgPiAwKSB7XG4gICAgdGhpcy5yZWROID0gbnVsbDtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLl9tYXh3ZWxsVHJpY2sgPSB0cnVlO1xuICAgIHRoaXMucmVkTiA9IHRoaXMubi50b1JlZCh0aGlzLnJlZCk7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gQmFzZUN1cnZlO1xuXG5CYXNlQ3VydmUucHJvdG90eXBlLnBvaW50ID0gZnVuY3Rpb24gcG9pbnQoKSB7XG4gIHRocm93IG5ldyBFcnJvcignTm90IGltcGxlbWVudGVkJyk7XG59O1xuXG5CYXNlQ3VydmUucHJvdG90eXBlLnZhbGlkYXRlID0gZnVuY3Rpb24gdmFsaWRhdGUoKSB7XG4gIHRocm93IG5ldyBFcnJvcignTm90IGltcGxlbWVudGVkJyk7XG59O1xuXG5CYXNlQ3VydmUucHJvdG90eXBlLl9maXhlZE5hZk11bCA9IGZ1bmN0aW9uIF9maXhlZE5hZk11bChwLCBrKSB7XG4gIGFzc2VydChwLnByZWNvbXB1dGVkKTtcbiAgdmFyIGRvdWJsZXMgPSBwLl9nZXREb3VibGVzKCk7XG5cbiAgdmFyIG5hZiA9IGdldE5BRihrLCAxKTtcbiAgdmFyIEkgPSAoMSA8PCAoZG91Ymxlcy5zdGVwICsgMSkpIC0gKGRvdWJsZXMuc3RlcCAlIDIgPT09IDAgPyAyIDogMSk7XG4gIEkgLz0gMztcblxuICAvLyBUcmFuc2xhdGUgaW50byBtb3JlIHdpbmRvd2VkIGZvcm1cbiAgdmFyIHJlcHIgPSBbXTtcbiAgZm9yICh2YXIgaiA9IDA7IGogPCBuYWYubGVuZ3RoOyBqICs9IGRvdWJsZXMuc3RlcCkge1xuICAgIHZhciBuYWZXID0gMDtcbiAgICBmb3IgKHZhciBrID0gaiArIGRvdWJsZXMuc3RlcCAtIDE7IGsgPj0gajsgay0tKVxuICAgICAgbmFmVyA9IChuYWZXIDw8IDEpICsgbmFmW2tdO1xuICAgIHJlcHIucHVzaChuYWZXKTtcbiAgfVxuXG4gIHZhciBhID0gdGhpcy5qcG9pbnQobnVsbCwgbnVsbCwgbnVsbCk7XG4gIHZhciBiID0gdGhpcy5qcG9pbnQobnVsbCwgbnVsbCwgbnVsbCk7XG4gIGZvciAodmFyIGkgPSBJOyBpID4gMDsgaS0tKSB7XG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCByZXByLmxlbmd0aDsgaisrKSB7XG4gICAgICB2YXIgbmFmVyA9IHJlcHJbal07XG4gICAgICBpZiAobmFmVyA9PT0gaSlcbiAgICAgICAgYiA9IGIubWl4ZWRBZGQoZG91Ymxlcy5wb2ludHNbal0pO1xuICAgICAgZWxzZSBpZiAobmFmVyA9PT0gLWkpXG4gICAgICAgIGIgPSBiLm1peGVkQWRkKGRvdWJsZXMucG9pbnRzW2pdLm5lZygpKTtcbiAgICB9XG4gICAgYSA9IGEuYWRkKGIpO1xuICB9XG4gIHJldHVybiBhLnRvUCgpO1xufTtcblxuQmFzZUN1cnZlLnByb3RvdHlwZS5fd25hZk11bCA9IGZ1bmN0aW9uIF93bmFmTXVsKHAsIGspIHtcbiAgdmFyIHcgPSA0O1xuXG4gIC8vIFByZWNvbXB1dGUgd2luZG93XG4gIHZhciBuYWZQb2ludHMgPSBwLl9nZXROQUZQb2ludHModyk7XG4gIHcgPSBuYWZQb2ludHMud25kO1xuICB2YXIgd25kID0gbmFmUG9pbnRzLnBvaW50cztcblxuICAvLyBHZXQgTkFGIGZvcm1cbiAgdmFyIG5hZiA9IGdldE5BRihrLCB3KTtcblxuICAvLyBBZGQgYHRoaXNgKihOKzEpIGZvciBldmVyeSB3LU5BRiBpbmRleFxuICB2YXIgYWNjID0gdGhpcy5qcG9pbnQobnVsbCwgbnVsbCwgbnVsbCk7XG4gIGZvciAodmFyIGkgPSBuYWYubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAvLyBDb3VudCB6ZXJvZXNcbiAgICBmb3IgKHZhciBrID0gMDsgaSA+PSAwICYmIG5hZltpXSA9PT0gMDsgaS0tKVxuICAgICAgaysrO1xuICAgIGlmIChpID49IDApXG4gICAgICBrKys7XG4gICAgYWNjID0gYWNjLmRibHAoayk7XG5cbiAgICBpZiAoaSA8IDApXG4gICAgICBicmVhaztcbiAgICB2YXIgeiA9IG5hZltpXTtcbiAgICBhc3NlcnQoeiAhPT0gMCk7XG4gICAgaWYgKHAudHlwZSA9PT0gJ2FmZmluZScpIHtcbiAgICAgIC8vIEogKy0gUFxuICAgICAgaWYgKHogPiAwKVxuICAgICAgICBhY2MgPSBhY2MubWl4ZWRBZGQod25kWyh6IC0gMSkgPj4gMV0pO1xuICAgICAgZWxzZVxuICAgICAgICBhY2MgPSBhY2MubWl4ZWRBZGQod25kWygteiAtIDEpID4+IDFdLm5lZygpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gSiArLSBKXG4gICAgICBpZiAoeiA+IDApXG4gICAgICAgIGFjYyA9IGFjYy5hZGQod25kWyh6IC0gMSkgPj4gMV0pO1xuICAgICAgZWxzZVxuICAgICAgICBhY2MgPSBhY2MuYWRkKHduZFsoLXogLSAxKSA+PiAxXS5uZWcoKSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBwLnR5cGUgPT09ICdhZmZpbmUnID8gYWNjLnRvUCgpIDogYWNjO1xufTtcblxuQmFzZUN1cnZlLnByb3RvdHlwZS5fd25hZk11bEFkZCA9IGZ1bmN0aW9uIF93bmFmTXVsQWRkKGRlZlcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnRzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZWZmcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZW4sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgamFjb2JpYW5SZXN1bHQpIHtcbiAgdmFyIHduZFdpZHRoID0gdGhpcy5fd25hZlQxO1xuICB2YXIgd25kID0gdGhpcy5fd25hZlQyO1xuICB2YXIgbmFmID0gdGhpcy5fd25hZlQzO1xuXG4gIC8vIEZpbGwgYWxsIGFycmF5c1xuICB2YXIgbWF4ID0gMDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgIHZhciBwID0gcG9pbnRzW2ldO1xuICAgIHZhciBuYWZQb2ludHMgPSBwLl9nZXROQUZQb2ludHMoZGVmVyk7XG4gICAgd25kV2lkdGhbaV0gPSBuYWZQb2ludHMud25kO1xuICAgIHduZFtpXSA9IG5hZlBvaW50cy5wb2ludHM7XG4gIH1cblxuICAvLyBDb21iIHNtYWxsIHdpbmRvdyBOQUZzXG4gIGZvciAodmFyIGkgPSBsZW4gLSAxOyBpID49IDE7IGkgLT0gMikge1xuICAgIHZhciBhID0gaSAtIDE7XG4gICAgdmFyIGIgPSBpO1xuICAgIGlmICh3bmRXaWR0aFthXSAhPT0gMSB8fCB3bmRXaWR0aFtiXSAhPT0gMSkge1xuICAgICAgbmFmW2FdID0gZ2V0TkFGKGNvZWZmc1thXSwgd25kV2lkdGhbYV0pO1xuICAgICAgbmFmW2JdID0gZ2V0TkFGKGNvZWZmc1tiXSwgd25kV2lkdGhbYl0pO1xuICAgICAgbWF4ID0gTWF0aC5tYXgobmFmW2FdLmxlbmd0aCwgbWF4KTtcbiAgICAgIG1heCA9IE1hdGgubWF4KG5hZltiXS5sZW5ndGgsIG1heCk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICB2YXIgY29tYiA9IFtcbiAgICAgIHBvaW50c1thXSwgLyogMSAqL1xuICAgICAgbnVsbCwgLyogMyAqL1xuICAgICAgbnVsbCwgLyogNSAqL1xuICAgICAgcG9pbnRzW2JdIC8qIDcgKi9cbiAgICBdO1xuXG4gICAgLy8gVHJ5IHRvIGF2b2lkIFByb2plY3RpdmUgcG9pbnRzLCBpZiBwb3NzaWJsZVxuICAgIGlmIChwb2ludHNbYV0ueS5jbXAocG9pbnRzW2JdLnkpID09PSAwKSB7XG4gICAgICBjb21iWzFdID0gcG9pbnRzW2FdLmFkZChwb2ludHNbYl0pO1xuICAgICAgY29tYlsyXSA9IHBvaW50c1thXS50b0ooKS5taXhlZEFkZChwb2ludHNbYl0ubmVnKCkpO1xuICAgIH0gZWxzZSBpZiAocG9pbnRzW2FdLnkuY21wKHBvaW50c1tiXS55LnJlZE5lZygpKSA9PT0gMCkge1xuICAgICAgY29tYlsxXSA9IHBvaW50c1thXS50b0ooKS5taXhlZEFkZChwb2ludHNbYl0pO1xuICAgICAgY29tYlsyXSA9IHBvaW50c1thXS5hZGQocG9pbnRzW2JdLm5lZygpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29tYlsxXSA9IHBvaW50c1thXS50b0ooKS5taXhlZEFkZChwb2ludHNbYl0pO1xuICAgICAgY29tYlsyXSA9IHBvaW50c1thXS50b0ooKS5taXhlZEFkZChwb2ludHNbYl0ubmVnKCkpO1xuICAgIH1cblxuICAgIHZhciBpbmRleCA9IFtcbiAgICAgIC0zLCAvKiAtMSAtMSAqL1xuICAgICAgLTEsIC8qIC0xIDAgKi9cbiAgICAgIC01LCAvKiAtMSAxICovXG4gICAgICAtNywgLyogMCAtMSAqL1xuICAgICAgMCwgLyogMCAwICovXG4gICAgICA3LCAvKiAwIDEgKi9cbiAgICAgIDUsIC8qIDEgLTEgKi9cbiAgICAgIDEsIC8qIDEgMCAqL1xuICAgICAgMyAgLyogMSAxICovXG4gICAgXTtcblxuICAgIHZhciBqc2YgPSBnZXRKU0YoY29lZmZzW2FdLCBjb2VmZnNbYl0pO1xuICAgIG1heCA9IE1hdGgubWF4KGpzZlswXS5sZW5ndGgsIG1heCk7XG4gICAgbmFmW2FdID0gbmV3IEFycmF5KG1heCk7XG4gICAgbmFmW2JdID0gbmV3IEFycmF5KG1heCk7XG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCBtYXg7IGorKykge1xuICAgICAgdmFyIGphID0ganNmWzBdW2pdIHwgMDtcbiAgICAgIHZhciBqYiA9IGpzZlsxXVtqXSB8IDA7XG5cbiAgICAgIG5hZlthXVtqXSA9IGluZGV4WyhqYSArIDEpICogMyArIChqYiArIDEpXTtcbiAgICAgIG5hZltiXVtqXSA9IDA7XG4gICAgICB3bmRbYV0gPSBjb21iO1xuICAgIH1cbiAgfVxuXG4gIHZhciBhY2MgPSB0aGlzLmpwb2ludChudWxsLCBudWxsLCBudWxsKTtcbiAgdmFyIHRtcCA9IHRoaXMuX3duYWZUNDtcbiAgZm9yICh2YXIgaSA9IG1heDsgaSA+PSAwOyBpLS0pIHtcbiAgICB2YXIgayA9IDA7XG5cbiAgICB3aGlsZSAoaSA+PSAwKSB7XG4gICAgICB2YXIgemVybyA9IHRydWU7XG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGxlbjsgaisrKSB7XG4gICAgICAgIHRtcFtqXSA9IG5hZltqXVtpXSB8IDA7XG4gICAgICAgIGlmICh0bXBbal0gIT09IDApXG4gICAgICAgICAgemVybyA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKCF6ZXJvKVxuICAgICAgICBicmVhaztcbiAgICAgIGsrKztcbiAgICAgIGktLTtcbiAgICB9XG4gICAgaWYgKGkgPj0gMClcbiAgICAgIGsrKztcbiAgICBhY2MgPSBhY2MuZGJscChrKTtcbiAgICBpZiAoaSA8IDApXG4gICAgICBicmVhaztcblxuICAgIGZvciAodmFyIGogPSAwOyBqIDwgbGVuOyBqKyspIHtcbiAgICAgIHZhciB6ID0gdG1wW2pdO1xuICAgICAgdmFyIHA7XG4gICAgICBpZiAoeiA9PT0gMClcbiAgICAgICAgY29udGludWU7XG4gICAgICBlbHNlIGlmICh6ID4gMClcbiAgICAgICAgcCA9IHduZFtqXVsoeiAtIDEpID4+IDFdO1xuICAgICAgZWxzZSBpZiAoeiA8IDApXG4gICAgICAgIHAgPSB3bmRbal1bKC16IC0gMSkgPj4gMV0ubmVnKCk7XG5cbiAgICAgIGlmIChwLnR5cGUgPT09ICdhZmZpbmUnKVxuICAgICAgICBhY2MgPSBhY2MubWl4ZWRBZGQocCk7XG4gICAgICBlbHNlXG4gICAgICAgIGFjYyA9IGFjYy5hZGQocCk7XG4gICAgfVxuICB9XG4gIC8vIFplcm9pZnkgcmVmZXJlbmNlc1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKVxuICAgIHduZFtpXSA9IG51bGw7XG5cbiAgaWYgKGphY29iaWFuUmVzdWx0KVxuICAgIHJldHVybiBhY2M7XG4gIGVsc2VcbiAgICByZXR1cm4gYWNjLnRvUCgpO1xufTtcblxuZnVuY3Rpb24gQmFzZVBvaW50KGN1cnZlLCB0eXBlKSB7XG4gIHRoaXMuY3VydmUgPSBjdXJ2ZTtcbiAgdGhpcy50eXBlID0gdHlwZTtcbiAgdGhpcy5wcmVjb21wdXRlZCA9IG51bGw7XG59XG5CYXNlQ3VydmUuQmFzZVBvaW50ID0gQmFzZVBvaW50O1xuXG5CYXNlUG9pbnQucHJvdG90eXBlLmVxID0gZnVuY3Rpb24gZXEoLypvdGhlciovKSB7XG4gIHRocm93IG5ldyBFcnJvcignTm90IGltcGxlbWVudGVkJyk7XG59O1xuXG5CYXNlUG9pbnQucHJvdG90eXBlLnZhbGlkYXRlID0gZnVuY3Rpb24gdmFsaWRhdGUoKSB7XG4gIHJldHVybiB0aGlzLmN1cnZlLnZhbGlkYXRlKHRoaXMpO1xufTtcblxuQmFzZUN1cnZlLnByb3RvdHlwZS5kZWNvZGVQb2ludCA9IGZ1bmN0aW9uIGRlY29kZVBvaW50KGJ5dGVzLCBlbmMpIHtcbiAgYnl0ZXMgPSB1dGlscy50b0FycmF5KGJ5dGVzLCBlbmMpO1xuXG4gIHZhciBsZW4gPSB0aGlzLnAuYnl0ZUxlbmd0aCgpO1xuXG4gIC8vIHVuY29tcHJlc3NlZCwgaHlicmlkLW9kZCwgaHlicmlkLWV2ZW5cbiAgaWYgKChieXRlc1swXSA9PT0gMHgwNCB8fCBieXRlc1swXSA9PT0gMHgwNiB8fCBieXRlc1swXSA9PT0gMHgwNykgJiZcbiAgICAgIGJ5dGVzLmxlbmd0aCAtIDEgPT09IDIgKiBsZW4pIHtcbiAgICBpZiAoYnl0ZXNbMF0gPT09IDB4MDYpXG4gICAgICBhc3NlcnQoYnl0ZXNbYnl0ZXMubGVuZ3RoIC0gMV0gJSAyID09PSAwKTtcbiAgICBlbHNlIGlmIChieXRlc1swXSA9PT0gMHgwNylcbiAgICAgIGFzc2VydChieXRlc1tieXRlcy5sZW5ndGggLSAxXSAlIDIgPT09IDEpO1xuXG4gICAgdmFyIHJlcyA9ICB0aGlzLnBvaW50KGJ5dGVzLnNsaWNlKDEsIDEgKyBsZW4pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBieXRlcy5zbGljZSgxICsgbGVuLCAxICsgMiAqIGxlbikpO1xuXG4gICAgcmV0dXJuIHJlcztcbiAgfSBlbHNlIGlmICgoYnl0ZXNbMF0gPT09IDB4MDIgfHwgYnl0ZXNbMF0gPT09IDB4MDMpICYmXG4gICAgICAgICAgICAgIGJ5dGVzLmxlbmd0aCAtIDEgPT09IGxlbikge1xuICAgIHJldHVybiB0aGlzLnBvaW50RnJvbVgoYnl0ZXMuc2xpY2UoMSwgMSArIGxlbiksIGJ5dGVzWzBdID09PSAweDAzKTtcbiAgfVxuICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gcG9pbnQgZm9ybWF0Jyk7XG59O1xuXG5CYXNlUG9pbnQucHJvdG90eXBlLmVuY29kZUNvbXByZXNzZWQgPSBmdW5jdGlvbiBlbmNvZGVDb21wcmVzc2VkKGVuYykge1xuICByZXR1cm4gdGhpcy5lbmNvZGUoZW5jLCB0cnVlKTtcbn07XG5cbkJhc2VQb2ludC5wcm90b3R5cGUuX2VuY29kZSA9IGZ1bmN0aW9uIF9lbmNvZGUoY29tcGFjdCkge1xuICB2YXIgbGVuID0gdGhpcy5jdXJ2ZS5wLmJ5dGVMZW5ndGgoKTtcbiAgdmFyIHggPSB0aGlzLmdldFgoKS50b0FycmF5KCdiZScsIGxlbik7XG5cbiAgaWYgKGNvbXBhY3QpXG4gICAgcmV0dXJuIFsgdGhpcy5nZXRZKCkuaXNFdmVuKCkgPyAweDAyIDogMHgwMyBdLmNvbmNhdCh4KTtcblxuICByZXR1cm4gWyAweDA0IF0uY29uY2F0KHgsIHRoaXMuZ2V0WSgpLnRvQXJyYXkoJ2JlJywgbGVuKSkgO1xufTtcblxuQmFzZVBvaW50LnByb3RvdHlwZS5lbmNvZGUgPSBmdW5jdGlvbiBlbmNvZGUoZW5jLCBjb21wYWN0KSB7XG4gIHJldHVybiB1dGlscy5lbmNvZGUodGhpcy5fZW5jb2RlKGNvbXBhY3QpLCBlbmMpO1xufTtcblxuQmFzZVBvaW50LnByb3RvdHlwZS5wcmVjb21wdXRlID0gZnVuY3Rpb24gcHJlY29tcHV0ZShwb3dlcikge1xuICBpZiAodGhpcy5wcmVjb21wdXRlZClcbiAgICByZXR1cm4gdGhpcztcblxuICB2YXIgcHJlY29tcHV0ZWQgPSB7XG4gICAgZG91YmxlczogbnVsbCxcbiAgICBuYWY6IG51bGwsXG4gICAgYmV0YTogbnVsbFxuICB9O1xuICBwcmVjb21wdXRlZC5uYWYgPSB0aGlzLl9nZXROQUZQb2ludHMoOCk7XG4gIHByZWNvbXB1dGVkLmRvdWJsZXMgPSB0aGlzLl9nZXREb3VibGVzKDQsIHBvd2VyKTtcbiAgcHJlY29tcHV0ZWQuYmV0YSA9IHRoaXMuX2dldEJldGEoKTtcbiAgdGhpcy5wcmVjb21wdXRlZCA9IHByZWNvbXB1dGVkO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuQmFzZVBvaW50LnByb3RvdHlwZS5faGFzRG91YmxlcyA9IGZ1bmN0aW9uIF9oYXNEb3VibGVzKGspIHtcbiAgaWYgKCF0aGlzLnByZWNvbXB1dGVkKVxuICAgIHJldHVybiBmYWxzZTtcblxuICB2YXIgZG91YmxlcyA9IHRoaXMucHJlY29tcHV0ZWQuZG91YmxlcztcbiAgaWYgKCFkb3VibGVzKVxuICAgIHJldHVybiBmYWxzZTtcblxuICByZXR1cm4gZG91Ymxlcy5wb2ludHMubGVuZ3RoID49IE1hdGguY2VpbCgoay5iaXRMZW5ndGgoKSArIDEpIC8gZG91Ymxlcy5zdGVwKTtcbn07XG5cbkJhc2VQb2ludC5wcm90b3R5cGUuX2dldERvdWJsZXMgPSBmdW5jdGlvbiBfZ2V0RG91YmxlcyhzdGVwLCBwb3dlcikge1xuICBpZiAodGhpcy5wcmVjb21wdXRlZCAmJiB0aGlzLnByZWNvbXB1dGVkLmRvdWJsZXMpXG4gICAgcmV0dXJuIHRoaXMucHJlY29tcHV0ZWQuZG91YmxlcztcblxuICB2YXIgZG91YmxlcyA9IFsgdGhpcyBdO1xuICB2YXIgYWNjID0gdGhpcztcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwb3dlcjsgaSArPSBzdGVwKSB7XG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCBzdGVwOyBqKyspXG4gICAgICBhY2MgPSBhY2MuZGJsKCk7XG4gICAgZG91Ymxlcy5wdXNoKGFjYyk7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBzdGVwOiBzdGVwLFxuICAgIHBvaW50czogZG91Ymxlc1xuICB9O1xufTtcblxuQmFzZVBvaW50LnByb3RvdHlwZS5fZ2V0TkFGUG9pbnRzID0gZnVuY3Rpb24gX2dldE5BRlBvaW50cyh3bmQpIHtcbiAgaWYgKHRoaXMucHJlY29tcHV0ZWQgJiYgdGhpcy5wcmVjb21wdXRlZC5uYWYpXG4gICAgcmV0dXJuIHRoaXMucHJlY29tcHV0ZWQubmFmO1xuXG4gIHZhciByZXMgPSBbIHRoaXMgXTtcbiAgdmFyIG1heCA9ICgxIDw8IHduZCkgLSAxO1xuICB2YXIgZGJsID0gbWF4ID09PSAxID8gbnVsbCA6IHRoaXMuZGJsKCk7XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgbWF4OyBpKyspXG4gICAgcmVzW2ldID0gcmVzW2kgLSAxXS5hZGQoZGJsKTtcbiAgcmV0dXJuIHtcbiAgICB3bmQ6IHduZCxcbiAgICBwb2ludHM6IHJlc1xuICB9O1xufTtcblxuQmFzZVBvaW50LnByb3RvdHlwZS5fZ2V0QmV0YSA9IGZ1bmN0aW9uIF9nZXRCZXRhKCkge1xuICByZXR1cm4gbnVsbDtcbn07XG5cbkJhc2VQb2ludC5wcm90b3R5cGUuZGJscCA9IGZ1bmN0aW9uIGRibHAoaykge1xuICB2YXIgciA9IHRoaXM7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgazsgaSsrKVxuICAgIHIgPSByLmRibCgpO1xuICByZXR1cm4gcjtcbn07XG4iLCJ2YXIgYXNuMSA9IHJlcXVpcmUoJy4vYXNuMScpXG52YXIgYWVzaWQgPSByZXF1aXJlKCcuL2Flc2lkLmpzb24nKVxudmFyIGZpeFByb2MgPSByZXF1aXJlKCcuL2ZpeFByb2MnKVxudmFyIGNpcGhlcnMgPSByZXF1aXJlKCdicm93c2VyaWZ5LWFlcycpXG52YXIgY29tcGF0ID0gcmVxdWlyZSgncGJrZGYyJylcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxubW9kdWxlLmV4cG9ydHMgPSBwYXJzZUtleXNcblxuZnVuY3Rpb24gcGFyc2VLZXlzIChidWZmZXIpIHtcbiAgdmFyIHBhc3N3b3JkXG4gIGlmICh0eXBlb2YgYnVmZmVyID09PSAnb2JqZWN0JyAmJiAhQnVmZmVyLmlzQnVmZmVyKGJ1ZmZlcikpIHtcbiAgICBwYXNzd29yZCA9IGJ1ZmZlci5wYXNzcGhyYXNlXG4gICAgYnVmZmVyID0gYnVmZmVyLmtleVxuICB9XG4gIGlmICh0eXBlb2YgYnVmZmVyID09PSAnc3RyaW5nJykge1xuICAgIGJ1ZmZlciA9IEJ1ZmZlci5mcm9tKGJ1ZmZlcilcbiAgfVxuXG4gIHZhciBzdHJpcHBlZCA9IGZpeFByb2MoYnVmZmVyLCBwYXNzd29yZClcblxuICB2YXIgdHlwZSA9IHN0cmlwcGVkLnRhZ1xuICB2YXIgZGF0YSA9IHN0cmlwcGVkLmRhdGFcbiAgdmFyIHN1YnR5cGUsIG5kYXRhXG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgJ0NFUlRJRklDQVRFJzpcbiAgICAgIG5kYXRhID0gYXNuMS5jZXJ0aWZpY2F0ZS5kZWNvZGUoZGF0YSwgJ2RlcicpLnRic0NlcnRpZmljYXRlLnN1YmplY3RQdWJsaWNLZXlJbmZvXG4gICAgICAvLyBmYWxscyB0aHJvdWdoXG4gICAgY2FzZSAnUFVCTElDIEtFWSc6XG4gICAgICBpZiAoIW5kYXRhKSB7XG4gICAgICAgIG5kYXRhID0gYXNuMS5QdWJsaWNLZXkuZGVjb2RlKGRhdGEsICdkZXInKVxuICAgICAgfVxuICAgICAgc3VidHlwZSA9IG5kYXRhLmFsZ29yaXRobS5hbGdvcml0aG0uam9pbignLicpXG4gICAgICBzd2l0Y2ggKHN1YnR5cGUpIHtcbiAgICAgICAgY2FzZSAnMS4yLjg0MC4xMTM1NDkuMS4xLjEnOlxuICAgICAgICAgIHJldHVybiBhc24xLlJTQVB1YmxpY0tleS5kZWNvZGUobmRhdGEuc3ViamVjdFB1YmxpY0tleS5kYXRhLCAnZGVyJylcbiAgICAgICAgY2FzZSAnMS4yLjg0MC4xMDA0NS4yLjEnOlxuICAgICAgICAgIG5kYXRhLnN1YmplY3RQcml2YXRlS2V5ID0gbmRhdGEuc3ViamVjdFB1YmxpY0tleVxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0eXBlOiAnZWMnLFxuICAgICAgICAgICAgZGF0YTogbmRhdGFcbiAgICAgICAgICB9XG4gICAgICAgIGNhc2UgJzEuMi44NDAuMTAwNDAuNC4xJzpcbiAgICAgICAgICBuZGF0YS5hbGdvcml0aG0ucGFyYW1zLnB1Yl9rZXkgPSBhc24xLkRTQXBhcmFtLmRlY29kZShuZGF0YS5zdWJqZWN0UHVibGljS2V5LmRhdGEsICdkZXInKVxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0eXBlOiAnZHNhJyxcbiAgICAgICAgICAgIGRhdGE6IG5kYXRhLmFsZ29yaXRobS5wYXJhbXNcbiAgICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6IHRocm93IG5ldyBFcnJvcigndW5rbm93biBrZXkgaWQgJyArIHN1YnR5cGUpXG4gICAgICB9XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ3Vua25vd24ga2V5IHR5cGUgJyArIHR5cGUpXG4gICAgY2FzZSAnRU5DUllQVEVEIFBSSVZBVEUgS0VZJzpcbiAgICAgIGRhdGEgPSBhc24xLkVuY3J5cHRlZFByaXZhdGVLZXkuZGVjb2RlKGRhdGEsICdkZXInKVxuICAgICAgZGF0YSA9IGRlY3J5cHQoZGF0YSwgcGFzc3dvcmQpXG4gICAgICAvLyBmYWxscyB0aHJvdWdoXG4gICAgY2FzZSAnUFJJVkFURSBLRVknOlxuICAgICAgbmRhdGEgPSBhc24xLlByaXZhdGVLZXkuZGVjb2RlKGRhdGEsICdkZXInKVxuICAgICAgc3VidHlwZSA9IG5kYXRhLmFsZ29yaXRobS5hbGdvcml0aG0uam9pbignLicpXG4gICAgICBzd2l0Y2ggKHN1YnR5cGUpIHtcbiAgICAgICAgY2FzZSAnMS4yLjg0MC4xMTM1NDkuMS4xLjEnOlxuICAgICAgICAgIHJldHVybiBhc24xLlJTQVByaXZhdGVLZXkuZGVjb2RlKG5kYXRhLnN1YmplY3RQcml2YXRlS2V5LCAnZGVyJylcbiAgICAgICAgY2FzZSAnMS4yLjg0MC4xMDA0NS4yLjEnOlxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjdXJ2ZTogbmRhdGEuYWxnb3JpdGhtLmN1cnZlLFxuICAgICAgICAgICAgcHJpdmF0ZUtleTogYXNuMS5FQ1ByaXZhdGVLZXkuZGVjb2RlKG5kYXRhLnN1YmplY3RQcml2YXRlS2V5LCAnZGVyJykucHJpdmF0ZUtleVxuICAgICAgICAgIH1cbiAgICAgICAgY2FzZSAnMS4yLjg0MC4xMDA0MC40LjEnOlxuICAgICAgICAgIG5kYXRhLmFsZ29yaXRobS5wYXJhbXMucHJpdl9rZXkgPSBhc24xLkRTQXBhcmFtLmRlY29kZShuZGF0YS5zdWJqZWN0UHJpdmF0ZUtleSwgJ2RlcicpXG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHR5cGU6ICdkc2EnLFxuICAgICAgICAgICAgcGFyYW1zOiBuZGF0YS5hbGdvcml0aG0ucGFyYW1zXG4gICAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IoJ3Vua25vd24ga2V5IGlkICcgKyBzdWJ0eXBlKVxuICAgICAgfVxuICAgICAgdGhyb3cgbmV3IEVycm9yKCd1bmtub3duIGtleSB0eXBlICcgKyB0eXBlKVxuICAgIGNhc2UgJ1JTQSBQVUJMSUMgS0VZJzpcbiAgICAgIHJldHVybiBhc24xLlJTQVB1YmxpY0tleS5kZWNvZGUoZGF0YSwgJ2RlcicpXG4gICAgY2FzZSAnUlNBIFBSSVZBVEUgS0VZJzpcbiAgICAgIHJldHVybiBhc24xLlJTQVByaXZhdGVLZXkuZGVjb2RlKGRhdGEsICdkZXInKVxuICAgIGNhc2UgJ0RTQSBQUklWQVRFIEtFWSc6XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiAnZHNhJyxcbiAgICAgICAgcGFyYW1zOiBhc24xLkRTQVByaXZhdGVLZXkuZGVjb2RlKGRhdGEsICdkZXInKVxuICAgICAgfVxuICAgIGNhc2UgJ0VDIFBSSVZBVEUgS0VZJzpcbiAgICAgIGRhdGEgPSBhc24xLkVDUHJpdmF0ZUtleS5kZWNvZGUoZGF0YSwgJ2RlcicpXG4gICAgICByZXR1cm4ge1xuICAgICAgICBjdXJ2ZTogZGF0YS5wYXJhbWV0ZXJzLnZhbHVlLFxuICAgICAgICBwcml2YXRlS2V5OiBkYXRhLnByaXZhdGVLZXlcbiAgICAgIH1cbiAgICBkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IoJ3Vua25vd24ga2V5IHR5cGUgJyArIHR5cGUpXG4gIH1cbn1cbnBhcnNlS2V5cy5zaWduYXR1cmUgPSBhc24xLnNpZ25hdHVyZVxuZnVuY3Rpb24gZGVjcnlwdCAoZGF0YSwgcGFzc3dvcmQpIHtcbiAgdmFyIHNhbHQgPSBkYXRhLmFsZ29yaXRobS5kZWNyeXB0LmtkZS5rZGVwYXJhbXMuc2FsdFxuICB2YXIgaXRlcnMgPSBwYXJzZUludChkYXRhLmFsZ29yaXRobS5kZWNyeXB0LmtkZS5rZGVwYXJhbXMuaXRlcnMudG9TdHJpbmcoKSwgMTApXG4gIHZhciBhbGdvID0gYWVzaWRbZGF0YS5hbGdvcml0aG0uZGVjcnlwdC5jaXBoZXIuYWxnby5qb2luKCcuJyldXG4gIHZhciBpdiA9IGRhdGEuYWxnb3JpdGhtLmRlY3J5cHQuY2lwaGVyLml2XG4gIHZhciBjaXBoZXJUZXh0ID0gZGF0YS5zdWJqZWN0UHJpdmF0ZUtleVxuICB2YXIga2V5bGVuID0gcGFyc2VJbnQoYWxnby5zcGxpdCgnLScpWzFdLCAxMCkgLyA4XG4gIHZhciBrZXkgPSBjb21wYXQucGJrZGYyU3luYyhwYXNzd29yZCwgc2FsdCwgaXRlcnMsIGtleWxlbiwgJ3NoYTEnKVxuICB2YXIgY2lwaGVyID0gY2lwaGVycy5jcmVhdGVEZWNpcGhlcml2KGFsZ28sIGtleSwgaXYpXG4gIHZhciBvdXQgPSBbXVxuICBvdXQucHVzaChjaXBoZXIudXBkYXRlKGNpcGhlclRleHQpKVxuICBvdXQucHVzaChjaXBoZXIuZmluYWwoKSlcbiAgcmV0dXJuIEJ1ZmZlci5jb25jYXQob3V0KVxufVxuIiwidmFyIEpzb25XZWJUb2tlbkVycm9yID0gZnVuY3Rpb24gKG1lc3NhZ2UsIGVycm9yKSB7XG4gIEVycm9yLmNhbGwodGhpcywgbWVzc2FnZSk7XG4gIGlmKEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKSB7XG4gICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgdGhpcy5jb25zdHJ1Y3Rvcik7XG4gIH1cbiAgdGhpcy5uYW1lID0gJ0pzb25XZWJUb2tlbkVycm9yJztcbiAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbiAgaWYgKGVycm9yKSB0aGlzLmlubmVyID0gZXJyb3I7XG59O1xuXG5Kc29uV2ViVG9rZW5FcnJvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEVycm9yLnByb3RvdHlwZSk7XG5Kc29uV2ViVG9rZW5FcnJvci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBKc29uV2ViVG9rZW5FcnJvcjtcblxubW9kdWxlLmV4cG9ydHMgPSBKc29uV2ViVG9rZW5FcnJvcjtcbiIsIi8qZ2xvYmFsIGV4cG9ydHMqL1xudmFyIFNpZ25TdHJlYW0gPSByZXF1aXJlKCcuL2xpYi9zaWduLXN0cmVhbScpO1xudmFyIFZlcmlmeVN0cmVhbSA9IHJlcXVpcmUoJy4vbGliL3ZlcmlmeS1zdHJlYW0nKTtcblxudmFyIEFMR09SSVRITVMgPSBbXG4gICdIUzI1NicsICdIUzM4NCcsICdIUzUxMicsXG4gICdSUzI1NicsICdSUzM4NCcsICdSUzUxMicsXG4gICdQUzI1NicsICdQUzM4NCcsICdQUzUxMicsXG4gICdFUzI1NicsICdFUzM4NCcsICdFUzUxMidcbl07XG5cbmV4cG9ydHMuQUxHT1JJVEhNUyA9IEFMR09SSVRITVM7XG5leHBvcnRzLnNpZ24gPSBTaWduU3RyZWFtLnNpZ247XG5leHBvcnRzLnZlcmlmeSA9IFZlcmlmeVN0cmVhbS52ZXJpZnk7XG5leHBvcnRzLmRlY29kZSA9IFZlcmlmeVN0cmVhbS5kZWNvZGU7XG5leHBvcnRzLmlzVmFsaWQgPSBWZXJpZnlTdHJlYW0uaXNWYWxpZDtcbmV4cG9ydHMuY3JlYXRlU2lnbiA9IGZ1bmN0aW9uIGNyZWF0ZVNpZ24ob3B0cykge1xuICByZXR1cm4gbmV3IFNpZ25TdHJlYW0ob3B0cyk7XG59O1xuZXhwb3J0cy5jcmVhdGVWZXJpZnkgPSBmdW5jdGlvbiBjcmVhdGVWZXJpZnkob3B0cykge1xuICByZXR1cm4gbmV3IFZlcmlmeVN0cmVhbShvcHRzKTtcbn07XG4iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUiA9IHR5cGVvZiBSZWZsZWN0ID09PSAnb2JqZWN0JyA/IFJlZmxlY3QgOiBudWxsXG52YXIgUmVmbGVjdEFwcGx5ID0gUiAmJiB0eXBlb2YgUi5hcHBseSA9PT0gJ2Z1bmN0aW9uJ1xuICA/IFIuYXBwbHlcbiAgOiBmdW5jdGlvbiBSZWZsZWN0QXBwbHkodGFyZ2V0LCByZWNlaXZlciwgYXJncykge1xuICAgIHJldHVybiBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHkuY2FsbCh0YXJnZXQsIHJlY2VpdmVyLCBhcmdzKTtcbiAgfVxuXG52YXIgUmVmbGVjdE93bktleXNcbmlmIChSICYmIHR5cGVvZiBSLm93bktleXMgPT09ICdmdW5jdGlvbicpIHtcbiAgUmVmbGVjdE93bktleXMgPSBSLm93bktleXNcbn0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuICBSZWZsZWN0T3duS2V5cyA9IGZ1bmN0aW9uIFJlZmxlY3RPd25LZXlzKHRhcmdldCkge1xuICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0YXJnZXQpXG4gICAgICAuY29uY2F0KE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHModGFyZ2V0KSk7XG4gIH07XG59IGVsc2Uge1xuICBSZWZsZWN0T3duS2V5cyA9IGZ1bmN0aW9uIFJlZmxlY3RPd25LZXlzKHRhcmdldCkge1xuICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0YXJnZXQpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBQcm9jZXNzRW1pdFdhcm5pbmcod2FybmluZykge1xuICBpZiAoY29uc29sZSAmJiBjb25zb2xlLndhcm4pIGNvbnNvbGUud2Fybih3YXJuaW5nKTtcbn1cblxudmFyIE51bWJlcklzTmFOID0gTnVtYmVyLmlzTmFOIHx8IGZ1bmN0aW9uIE51bWJlcklzTmFOKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPT0gdmFsdWU7XG59XG5cbmZ1bmN0aW9uIEV2ZW50RW1pdHRlcigpIHtcbiAgRXZlbnRFbWl0dGVyLmluaXQuY2FsbCh0aGlzKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gRXZlbnRFbWl0dGVyO1xuXG4vLyBCYWNrd2FyZHMtY29tcGF0IHdpdGggbm9kZSAwLjEwLnhcbkV2ZW50RW1pdHRlci5FdmVudEVtaXR0ZXIgPSBFdmVudEVtaXR0ZXI7XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuX2V2ZW50cyA9IHVuZGVmaW5lZDtcbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuX2V2ZW50c0NvdW50ID0gMDtcbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuX21heExpc3RlbmVycyA9IHVuZGVmaW5lZDtcblxuLy8gQnkgZGVmYXVsdCBFdmVudEVtaXR0ZXJzIHdpbGwgcHJpbnQgYSB3YXJuaW5nIGlmIG1vcmUgdGhhbiAxMCBsaXN0ZW5lcnMgYXJlXG4vLyBhZGRlZCB0byBpdC4gVGhpcyBpcyBhIHVzZWZ1bCBkZWZhdWx0IHdoaWNoIGhlbHBzIGZpbmRpbmcgbWVtb3J5IGxlYWtzLlxudmFyIGRlZmF1bHRNYXhMaXN0ZW5lcnMgPSAxMDtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KEV2ZW50RW1pdHRlciwgJ2RlZmF1bHRNYXhMaXN0ZW5lcnMnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGRlZmF1bHRNYXhMaXN0ZW5lcnM7XG4gIH0sXG4gIHNldDogZnVuY3Rpb24oYXJnKSB7XG4gICAgaWYgKHR5cGVvZiBhcmcgIT09ICdudW1iZXInIHx8IGFyZyA8IDAgfHwgTnVtYmVySXNOYU4oYXJnKSkge1xuICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RoZSB2YWx1ZSBvZiBcImRlZmF1bHRNYXhMaXN0ZW5lcnNcIiBpcyBvdXQgb2YgcmFuZ2UuIEl0IG11c3QgYmUgYSBub24tbmVnYXRpdmUgbnVtYmVyLiBSZWNlaXZlZCAnICsgYXJnICsgJy4nKTtcbiAgICB9XG4gICAgZGVmYXVsdE1heExpc3RlbmVycyA9IGFyZztcbiAgfVxufSk7XG5cbkV2ZW50RW1pdHRlci5pbml0ID0gZnVuY3Rpb24oKSB7XG5cbiAgaWYgKHRoaXMuX2V2ZW50cyA9PT0gdW5kZWZpbmVkIHx8XG4gICAgICB0aGlzLl9ldmVudHMgPT09IE9iamVjdC5nZXRQcm90b3R5cGVPZih0aGlzKS5fZXZlbnRzKSB7XG4gICAgdGhpcy5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB0aGlzLl9ldmVudHNDb3VudCA9IDA7XG4gIH1cblxuICB0aGlzLl9tYXhMaXN0ZW5lcnMgPSB0aGlzLl9tYXhMaXN0ZW5lcnMgfHwgdW5kZWZpbmVkO1xufTtcblxuLy8gT2J2aW91c2x5IG5vdCBhbGwgRW1pdHRlcnMgc2hvdWxkIGJlIGxpbWl0ZWQgdG8gMTAuIFRoaXMgZnVuY3Rpb24gYWxsb3dzXG4vLyB0aGF0IHRvIGJlIGluY3JlYXNlZC4gU2V0IHRvIHplcm8gZm9yIHVubGltaXRlZC5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuc2V0TWF4TGlzdGVuZXJzID0gZnVuY3Rpb24gc2V0TWF4TGlzdGVuZXJzKG4pIHtcbiAgaWYgKHR5cGVvZiBuICE9PSAnbnVtYmVyJyB8fCBuIDwgMCB8fCBOdW1iZXJJc05hTihuKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdUaGUgdmFsdWUgb2YgXCJuXCIgaXMgb3V0IG9mIHJhbmdlLiBJdCBtdXN0IGJlIGEgbm9uLW5lZ2F0aXZlIG51bWJlci4gUmVjZWl2ZWQgJyArIG4gKyAnLicpO1xuICB9XG4gIHRoaXMuX21heExpc3RlbmVycyA9IG47XG4gIHJldHVybiB0aGlzO1xufTtcblxuZnVuY3Rpb24gJGdldE1heExpc3RlbmVycyh0aGF0KSB7XG4gIGlmICh0aGF0Ll9tYXhMaXN0ZW5lcnMgPT09IHVuZGVmaW5lZClcbiAgICByZXR1cm4gRXZlbnRFbWl0dGVyLmRlZmF1bHRNYXhMaXN0ZW5lcnM7XG4gIHJldHVybiB0aGF0Ll9tYXhMaXN0ZW5lcnM7XG59XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZ2V0TWF4TGlzdGVuZXJzID0gZnVuY3Rpb24gZ2V0TWF4TGlzdGVuZXJzKCkge1xuICByZXR1cm4gJGdldE1heExpc3RlbmVycyh0aGlzKTtcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZW1pdCA9IGZ1bmN0aW9uIGVtaXQodHlwZSkge1xuICB2YXIgYXJncyA9IFtdO1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgYXJncy5wdXNoKGFyZ3VtZW50c1tpXSk7XG4gIHZhciBkb0Vycm9yID0gKHR5cGUgPT09ICdlcnJvcicpO1xuXG4gIHZhciBldmVudHMgPSB0aGlzLl9ldmVudHM7XG4gIGlmIChldmVudHMgIT09IHVuZGVmaW5lZClcbiAgICBkb0Vycm9yID0gKGRvRXJyb3IgJiYgZXZlbnRzLmVycm9yID09PSB1bmRlZmluZWQpO1xuICBlbHNlIGlmICghZG9FcnJvcilcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgLy8gSWYgdGhlcmUgaXMgbm8gJ2Vycm9yJyBldmVudCBsaXN0ZW5lciB0aGVuIHRocm93LlxuICBpZiAoZG9FcnJvcikge1xuICAgIHZhciBlcjtcbiAgICBpZiAoYXJncy5sZW5ndGggPiAwKVxuICAgICAgZXIgPSBhcmdzWzBdO1xuICAgIGlmIChlciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAvLyBOb3RlOiBUaGUgY29tbWVudHMgb24gdGhlIGB0aHJvd2AgbGluZXMgYXJlIGludGVudGlvbmFsLCB0aGV5IHNob3dcbiAgICAgIC8vIHVwIGluIE5vZGUncyBvdXRwdXQgaWYgdGhpcyByZXN1bHRzIGluIGFuIHVuaGFuZGxlZCBleGNlcHRpb24uXG4gICAgICB0aHJvdyBlcjsgLy8gVW5oYW5kbGVkICdlcnJvcicgZXZlbnRcbiAgICB9XG4gICAgLy8gQXQgbGVhc3QgZ2l2ZSBzb21lIGtpbmQgb2YgY29udGV4dCB0byB0aGUgdXNlclxuICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoJ1VuaGFuZGxlZCBlcnJvci4nICsgKGVyID8gJyAoJyArIGVyLm1lc3NhZ2UgKyAnKScgOiAnJykpO1xuICAgIGVyci5jb250ZXh0ID0gZXI7XG4gICAgdGhyb3cgZXJyOyAvLyBVbmhhbmRsZWQgJ2Vycm9yJyBldmVudFxuICB9XG5cbiAgdmFyIGhhbmRsZXIgPSBldmVudHNbdHlwZV07XG5cbiAgaWYgKGhhbmRsZXIgPT09IHVuZGVmaW5lZClcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgaWYgKHR5cGVvZiBoYW5kbGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgUmVmbGVjdEFwcGx5KGhhbmRsZXIsIHRoaXMsIGFyZ3MpO1xuICB9IGVsc2Uge1xuICAgIHZhciBsZW4gPSBoYW5kbGVyLmxlbmd0aDtcbiAgICB2YXIgbGlzdGVuZXJzID0gYXJyYXlDbG9uZShoYW5kbGVyLCBsZW4pO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpXG4gICAgICBSZWZsZWN0QXBwbHkobGlzdGVuZXJzW2ldLCB0aGlzLCBhcmdzKTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufTtcblxuZnVuY3Rpb24gX2FkZExpc3RlbmVyKHRhcmdldCwgdHlwZSwgbGlzdGVuZXIsIHByZXBlbmQpIHtcbiAgdmFyIG07XG4gIHZhciBldmVudHM7XG4gIHZhciBleGlzdGluZztcblxuICBpZiAodHlwZW9mIGxpc3RlbmVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwibGlzdGVuZXJcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgRnVuY3Rpb24uIFJlY2VpdmVkIHR5cGUgJyArIHR5cGVvZiBsaXN0ZW5lcik7XG4gIH1cblxuICBldmVudHMgPSB0YXJnZXQuX2V2ZW50cztcbiAgaWYgKGV2ZW50cyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZXZlbnRzID0gdGFyZ2V0Ll9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRhcmdldC5fZXZlbnRzQ291bnQgPSAwO1xuICB9IGVsc2Uge1xuICAgIC8vIFRvIGF2b2lkIHJlY3Vyc2lvbiBpbiB0aGUgY2FzZSB0aGF0IHR5cGUgPT09IFwibmV3TGlzdGVuZXJcIiEgQmVmb3JlXG4gICAgLy8gYWRkaW5nIGl0IHRvIHRoZSBsaXN0ZW5lcnMsIGZpcnN0IGVtaXQgXCJuZXdMaXN0ZW5lclwiLlxuICAgIGlmIChldmVudHMubmV3TGlzdGVuZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdGFyZ2V0LmVtaXQoJ25ld0xpc3RlbmVyJywgdHlwZSxcbiAgICAgICAgICAgICAgICAgIGxpc3RlbmVyLmxpc3RlbmVyID8gbGlzdGVuZXIubGlzdGVuZXIgOiBsaXN0ZW5lcik7XG5cbiAgICAgIC8vIFJlLWFzc2lnbiBgZXZlbnRzYCBiZWNhdXNlIGEgbmV3TGlzdGVuZXIgaGFuZGxlciBjb3VsZCBoYXZlIGNhdXNlZCB0aGVcbiAgICAgIC8vIHRoaXMuX2V2ZW50cyB0byBiZSBhc3NpZ25lZCB0byBhIG5ldyBvYmplY3RcbiAgICAgIGV2ZW50cyA9IHRhcmdldC5fZXZlbnRzO1xuICAgIH1cbiAgICBleGlzdGluZyA9IGV2ZW50c1t0eXBlXTtcbiAgfVxuXG4gIGlmIChleGlzdGluZyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgLy8gT3B0aW1pemUgdGhlIGNhc2Ugb2Ygb25lIGxpc3RlbmVyLiBEb24ndCBuZWVkIHRoZSBleHRyYSBhcnJheSBvYmplY3QuXG4gICAgZXhpc3RpbmcgPSBldmVudHNbdHlwZV0gPSBsaXN0ZW5lcjtcbiAgICArK3RhcmdldC5fZXZlbnRzQ291bnQ7XG4gIH0gZWxzZSB7XG4gICAgaWYgKHR5cGVvZiBleGlzdGluZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgLy8gQWRkaW5nIHRoZSBzZWNvbmQgZWxlbWVudCwgbmVlZCB0byBjaGFuZ2UgdG8gYXJyYXkuXG4gICAgICBleGlzdGluZyA9IGV2ZW50c1t0eXBlXSA9XG4gICAgICAgIHByZXBlbmQgPyBbbGlzdGVuZXIsIGV4aXN0aW5nXSA6IFtleGlzdGluZywgbGlzdGVuZXJdO1xuICAgICAgLy8gSWYgd2UndmUgYWxyZWFkeSBnb3QgYW4gYXJyYXksIGp1c3QgYXBwZW5kLlxuICAgIH0gZWxzZSBpZiAocHJlcGVuZCkge1xuICAgICAgZXhpc3RpbmcudW5zaGlmdChsaXN0ZW5lcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGV4aXN0aW5nLnB1c2gobGlzdGVuZXIpO1xuICAgIH1cblxuICAgIC8vIENoZWNrIGZvciBsaXN0ZW5lciBsZWFrXG4gICAgbSA9ICRnZXRNYXhMaXN0ZW5lcnModGFyZ2V0KTtcbiAgICBpZiAobSA+IDAgJiYgZXhpc3RpbmcubGVuZ3RoID4gbSAmJiAhZXhpc3Rpbmcud2FybmVkKSB7XG4gICAgICBleGlzdGluZy53YXJuZWQgPSB0cnVlO1xuICAgICAgLy8gTm8gZXJyb3IgY29kZSBmb3IgdGhpcyBzaW5jZSBpdCBpcyBhIFdhcm5pbmdcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLXN5bnRheFxuICAgICAgdmFyIHcgPSBuZXcgRXJyb3IoJ1Bvc3NpYmxlIEV2ZW50RW1pdHRlciBtZW1vcnkgbGVhayBkZXRlY3RlZC4gJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGV4aXN0aW5nLmxlbmd0aCArICcgJyArIFN0cmluZyh0eXBlKSArICcgbGlzdGVuZXJzICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAnYWRkZWQuIFVzZSBlbWl0dGVyLnNldE1heExpc3RlbmVycygpIHRvICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAnaW5jcmVhc2UgbGltaXQnKTtcbiAgICAgIHcubmFtZSA9ICdNYXhMaXN0ZW5lcnNFeGNlZWRlZFdhcm5pbmcnO1xuICAgICAgdy5lbWl0dGVyID0gdGFyZ2V0O1xuICAgICAgdy50eXBlID0gdHlwZTtcbiAgICAgIHcuY291bnQgPSBleGlzdGluZy5sZW5ndGg7XG4gICAgICBQcm9jZXNzRW1pdFdhcm5pbmcodyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5hZGRMaXN0ZW5lciA9IGZ1bmN0aW9uIGFkZExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKSB7XG4gIHJldHVybiBfYWRkTGlzdGVuZXIodGhpcywgdHlwZSwgbGlzdGVuZXIsIGZhbHNlKTtcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub24gPSBFdmVudEVtaXR0ZXIucHJvdG90eXBlLmFkZExpc3RlbmVyO1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnByZXBlbmRMaXN0ZW5lciA9XG4gICAgZnVuY3Rpb24gcHJlcGVuZExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgICByZXR1cm4gX2FkZExpc3RlbmVyKHRoaXMsIHR5cGUsIGxpc3RlbmVyLCB0cnVlKTtcbiAgICB9O1xuXG5mdW5jdGlvbiBvbmNlV3JhcHBlcigpIHtcbiAgdmFyIGFyZ3MgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIGFyZ3MucHVzaChhcmd1bWVudHNbaV0pO1xuICBpZiAoIXRoaXMuZmlyZWQpIHtcbiAgICB0aGlzLnRhcmdldC5yZW1vdmVMaXN0ZW5lcih0aGlzLnR5cGUsIHRoaXMud3JhcEZuKTtcbiAgICB0aGlzLmZpcmVkID0gdHJ1ZTtcbiAgICBSZWZsZWN0QXBwbHkodGhpcy5saXN0ZW5lciwgdGhpcy50YXJnZXQsIGFyZ3MpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9vbmNlV3JhcCh0YXJnZXQsIHR5cGUsIGxpc3RlbmVyKSB7XG4gIHZhciBzdGF0ZSA9IHsgZmlyZWQ6IGZhbHNlLCB3cmFwRm46IHVuZGVmaW5lZCwgdGFyZ2V0OiB0YXJnZXQsIHR5cGU6IHR5cGUsIGxpc3RlbmVyOiBsaXN0ZW5lciB9O1xuICB2YXIgd3JhcHBlZCA9IG9uY2VXcmFwcGVyLmJpbmQoc3RhdGUpO1xuICB3cmFwcGVkLmxpc3RlbmVyID0gbGlzdGVuZXI7XG4gIHN0YXRlLndyYXBGbiA9IHdyYXBwZWQ7XG4gIHJldHVybiB3cmFwcGVkO1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uY2UgPSBmdW5jdGlvbiBvbmNlKHR5cGUsIGxpc3RlbmVyKSB7XG4gIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgXCJsaXN0ZW5lclwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBGdW5jdGlvbi4gUmVjZWl2ZWQgdHlwZSAnICsgdHlwZW9mIGxpc3RlbmVyKTtcbiAgfVxuICB0aGlzLm9uKHR5cGUsIF9vbmNlV3JhcCh0aGlzLCB0eXBlLCBsaXN0ZW5lcikpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucHJlcGVuZE9uY2VMaXN0ZW5lciA9XG4gICAgZnVuY3Rpb24gcHJlcGVuZE9uY2VMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcikge1xuICAgICAgaWYgKHR5cGVvZiBsaXN0ZW5lciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgXCJsaXN0ZW5lclwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBGdW5jdGlvbi4gUmVjZWl2ZWQgdHlwZSAnICsgdHlwZW9mIGxpc3RlbmVyKTtcbiAgICAgIH1cbiAgICAgIHRoaXMucHJlcGVuZExpc3RlbmVyKHR5cGUsIF9vbmNlV3JhcCh0aGlzLCB0eXBlLCBsaXN0ZW5lcikpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuLy8gRW1pdHMgYSAncmVtb3ZlTGlzdGVuZXInIGV2ZW50IGlmIGFuZCBvbmx5IGlmIHRoZSBsaXN0ZW5lciB3YXMgcmVtb3ZlZC5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXIgPVxuICAgIGZ1bmN0aW9uIHJlbW92ZUxpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgICB2YXIgbGlzdCwgZXZlbnRzLCBwb3NpdGlvbiwgaSwgb3JpZ2luYWxMaXN0ZW5lcjtcblxuICAgICAgaWYgKHR5cGVvZiBsaXN0ZW5lciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgXCJsaXN0ZW5lclwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBGdW5jdGlvbi4gUmVjZWl2ZWQgdHlwZSAnICsgdHlwZW9mIGxpc3RlbmVyKTtcbiAgICAgIH1cblxuICAgICAgZXZlbnRzID0gdGhpcy5fZXZlbnRzO1xuICAgICAgaWYgKGV2ZW50cyA9PT0gdW5kZWZpbmVkKVxuICAgICAgICByZXR1cm4gdGhpcztcblxuICAgICAgbGlzdCA9IGV2ZW50c1t0eXBlXTtcbiAgICAgIGlmIChsaXN0ID09PSB1bmRlZmluZWQpXG4gICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICBpZiAobGlzdCA9PT0gbGlzdGVuZXIgfHwgbGlzdC5saXN0ZW5lciA9PT0gbGlzdGVuZXIpIHtcbiAgICAgICAgaWYgKC0tdGhpcy5fZXZlbnRzQ291bnQgPT09IDApXG4gICAgICAgICAgdGhpcy5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgZGVsZXRlIGV2ZW50c1t0eXBlXTtcbiAgICAgICAgICBpZiAoZXZlbnRzLnJlbW92ZUxpc3RlbmVyKVxuICAgICAgICAgICAgdGhpcy5lbWl0KCdyZW1vdmVMaXN0ZW5lcicsIHR5cGUsIGxpc3QubGlzdGVuZXIgfHwgbGlzdGVuZXIpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBsaXN0ICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHBvc2l0aW9uID0gLTE7XG5cbiAgICAgICAgZm9yIChpID0gbGlzdC5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgIGlmIChsaXN0W2ldID09PSBsaXN0ZW5lciB8fCBsaXN0W2ldLmxpc3RlbmVyID09PSBsaXN0ZW5lcikge1xuICAgICAgICAgICAgb3JpZ2luYWxMaXN0ZW5lciA9IGxpc3RbaV0ubGlzdGVuZXI7XG4gICAgICAgICAgICBwb3NpdGlvbiA9IGk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocG9zaXRpb24gPCAwKVxuICAgICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICAgIGlmIChwb3NpdGlvbiA9PT0gMClcbiAgICAgICAgICBsaXN0LnNoaWZ0KCk7XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHNwbGljZU9uZShsaXN0LCBwb3NpdGlvbik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobGlzdC5sZW5ndGggPT09IDEpXG4gICAgICAgICAgZXZlbnRzW3R5cGVdID0gbGlzdFswXTtcblxuICAgICAgICBpZiAoZXZlbnRzLnJlbW92ZUxpc3RlbmVyICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgdGhpcy5lbWl0KCdyZW1vdmVMaXN0ZW5lcicsIHR5cGUsIG9yaWdpbmFsTGlzdGVuZXIgfHwgbGlzdGVuZXIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9mZiA9IEV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXI7XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlQWxsTGlzdGVuZXJzID1cbiAgICBmdW5jdGlvbiByZW1vdmVBbGxMaXN0ZW5lcnModHlwZSkge1xuICAgICAgdmFyIGxpc3RlbmVycywgZXZlbnRzLCBpO1xuXG4gICAgICBldmVudHMgPSB0aGlzLl9ldmVudHM7XG4gICAgICBpZiAoZXZlbnRzID09PSB1bmRlZmluZWQpXG4gICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICAvLyBub3QgbGlzdGVuaW5nIGZvciByZW1vdmVMaXN0ZW5lciwgbm8gbmVlZCB0byBlbWl0XG4gICAgICBpZiAoZXZlbnRzLnJlbW92ZUxpc3RlbmVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICAgIHRoaXMuX2V2ZW50c0NvdW50ID0gMDtcbiAgICAgICAgfSBlbHNlIGlmIChldmVudHNbdHlwZV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGlmICgtLXRoaXMuX2V2ZW50c0NvdW50ID09PSAwKVxuICAgICAgICAgICAgdGhpcy5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgICBlbHNlXG4gICAgICAgICAgICBkZWxldGUgZXZlbnRzW3R5cGVdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICAvLyBlbWl0IHJlbW92ZUxpc3RlbmVyIGZvciBhbGwgbGlzdGVuZXJzIG9uIGFsbCBldmVudHNcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoZXZlbnRzKTtcbiAgICAgICAgdmFyIGtleTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICBrZXkgPSBrZXlzW2ldO1xuICAgICAgICAgIGlmIChrZXkgPT09ICdyZW1vdmVMaXN0ZW5lcicpIGNvbnRpbnVlO1xuICAgICAgICAgIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKGtleSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoJ3JlbW92ZUxpc3RlbmVyJyk7XG4gICAgICAgIHRoaXMuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgIHRoaXMuX2V2ZW50c0NvdW50ID0gMDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIGxpc3RlbmVycyA9IGV2ZW50c1t0eXBlXTtcblxuICAgICAgaWYgKHR5cGVvZiBsaXN0ZW5lcnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcnMpO1xuICAgICAgfSBlbHNlIGlmIChsaXN0ZW5lcnMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAvLyBMSUZPIG9yZGVyXG4gICAgICAgIGZvciAoaSA9IGxpc3RlbmVycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXJzW2ldKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG5mdW5jdGlvbiBfbGlzdGVuZXJzKHRhcmdldCwgdHlwZSwgdW53cmFwKSB7XG4gIHZhciBldmVudHMgPSB0YXJnZXQuX2V2ZW50cztcblxuICBpZiAoZXZlbnRzID09PSB1bmRlZmluZWQpXG4gICAgcmV0dXJuIFtdO1xuXG4gIHZhciBldmxpc3RlbmVyID0gZXZlbnRzW3R5cGVdO1xuICBpZiAoZXZsaXN0ZW5lciA9PT0gdW5kZWZpbmVkKVxuICAgIHJldHVybiBbXTtcblxuICBpZiAodHlwZW9mIGV2bGlzdGVuZXIgPT09ICdmdW5jdGlvbicpXG4gICAgcmV0dXJuIHVud3JhcCA/IFtldmxpc3RlbmVyLmxpc3RlbmVyIHx8IGV2bGlzdGVuZXJdIDogW2V2bGlzdGVuZXJdO1xuXG4gIHJldHVybiB1bndyYXAgP1xuICAgIHVud3JhcExpc3RlbmVycyhldmxpc3RlbmVyKSA6IGFycmF5Q2xvbmUoZXZsaXN0ZW5lciwgZXZsaXN0ZW5lci5sZW5ndGgpO1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmxpc3RlbmVycyA9IGZ1bmN0aW9uIGxpc3RlbmVycyh0eXBlKSB7XG4gIHJldHVybiBfbGlzdGVuZXJzKHRoaXMsIHR5cGUsIHRydWUpO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yYXdMaXN0ZW5lcnMgPSBmdW5jdGlvbiByYXdMaXN0ZW5lcnModHlwZSkge1xuICByZXR1cm4gX2xpc3RlbmVycyh0aGlzLCB0eXBlLCBmYWxzZSk7XG59O1xuXG5FdmVudEVtaXR0ZXIubGlzdGVuZXJDb3VudCA9IGZ1bmN0aW9uKGVtaXR0ZXIsIHR5cGUpIHtcbiAgaWYgKHR5cGVvZiBlbWl0dGVyLmxpc3RlbmVyQ291bnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gZW1pdHRlci5saXN0ZW5lckNvdW50KHR5cGUpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBsaXN0ZW5lckNvdW50LmNhbGwoZW1pdHRlciwgdHlwZSk7XG4gIH1cbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJDb3VudCA9IGxpc3RlbmVyQ291bnQ7XG5mdW5jdGlvbiBsaXN0ZW5lckNvdW50KHR5cGUpIHtcbiAgdmFyIGV2ZW50cyA9IHRoaXMuX2V2ZW50cztcblxuICBpZiAoZXZlbnRzICE9PSB1bmRlZmluZWQpIHtcbiAgICB2YXIgZXZsaXN0ZW5lciA9IGV2ZW50c1t0eXBlXTtcblxuICAgIGlmICh0eXBlb2YgZXZsaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIDE7XG4gICAgfSBlbHNlIGlmIChldmxpc3RlbmVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBldmxpc3RlbmVyLmxlbmd0aDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gMDtcbn1cblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5ldmVudE5hbWVzID0gZnVuY3Rpb24gZXZlbnROYW1lcygpIHtcbiAgcmV0dXJuIHRoaXMuX2V2ZW50c0NvdW50ID4gMCA/IFJlZmxlY3RPd25LZXlzKHRoaXMuX2V2ZW50cykgOiBbXTtcbn07XG5cbmZ1bmN0aW9uIGFycmF5Q2xvbmUoYXJyLCBuKSB7XG4gIHZhciBjb3B5ID0gbmV3IEFycmF5KG4pO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IG47ICsraSlcbiAgICBjb3B5W2ldID0gYXJyW2ldO1xuICByZXR1cm4gY29weTtcbn1cblxuZnVuY3Rpb24gc3BsaWNlT25lKGxpc3QsIGluZGV4KSB7XG4gIGZvciAoOyBpbmRleCArIDEgPCBsaXN0Lmxlbmd0aDsgaW5kZXgrKylcbiAgICBsaXN0W2luZGV4XSA9IGxpc3RbaW5kZXggKyAxXTtcbiAgbGlzdC5wb3AoKTtcbn1cblxuZnVuY3Rpb24gdW53cmFwTGlzdGVuZXJzKGFycikge1xuICB2YXIgcmV0ID0gbmV3IEFycmF5KGFyci5sZW5ndGgpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHJldC5sZW5ndGg7ICsraSkge1xuICAgIHJldFtpXSA9IGFycltpXS5saXN0ZW5lciB8fCBhcnJbaV07XG4gIH1cbiAgcmV0dXJuIHJldDtcbn1cbiIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbGliL19zdHJlYW1fcmVhZGFibGUuanMnKTtcbmV4cG9ydHMuU3RyZWFtID0gZXhwb3J0cztcbmV4cG9ydHMuUmVhZGFibGUgPSBleHBvcnRzO1xuZXhwb3J0cy5Xcml0YWJsZSA9IHJlcXVpcmUoJy4vbGliL19zdHJlYW1fd3JpdGFibGUuanMnKTtcbmV4cG9ydHMuRHVwbGV4ID0gcmVxdWlyZSgnLi9saWIvX3N0cmVhbV9kdXBsZXguanMnKTtcbmV4cG9ydHMuVHJhbnNmb3JtID0gcmVxdWlyZSgnLi9saWIvX3N0cmVhbV90cmFuc2Zvcm0uanMnKTtcbmV4cG9ydHMuUGFzc1Rocm91Z2ggPSByZXF1aXJlKCcuL2xpYi9fc3RyZWFtX3Bhc3N0aHJvdWdoLmpzJyk7XG4iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuLy8gQSBiaXQgc2ltcGxlciB0aGFuIHJlYWRhYmxlIHN0cmVhbXMuXG4vLyBJbXBsZW1lbnQgYW4gYXN5bmMgLl93cml0ZShjaHVuaywgZW5jb2RpbmcsIGNiKSwgYW5kIGl0J2xsIGhhbmRsZSBhbGxcbi8vIHRoZSBkcmFpbiBldmVudCBlbWlzc2lvbiBhbmQgYnVmZmVyaW5nLlxuXG4ndXNlIHN0cmljdCc7XG5cbi8qPHJlcGxhY2VtZW50PiovXG5cbnZhciBwbmEgPSByZXF1aXJlKCdwcm9jZXNzLW5leHRpY2stYXJncycpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbm1vZHVsZS5leHBvcnRzID0gV3JpdGFibGU7XG5cbi8qIDxyZXBsYWNlbWVudD4gKi9cbmZ1bmN0aW9uIFdyaXRlUmVxKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgdGhpcy5jaHVuayA9IGNodW5rO1xuICB0aGlzLmVuY29kaW5nID0gZW5jb2Rpbmc7XG4gIHRoaXMuY2FsbGJhY2sgPSBjYjtcbiAgdGhpcy5uZXh0ID0gbnVsbDtcbn1cblxuLy8gSXQgc2VlbXMgYSBsaW5rZWQgbGlzdCBidXQgaXQgaXMgbm90XG4vLyB0aGVyZSB3aWxsIGJlIG9ubHkgMiBvZiB0aGVzZSBmb3IgZWFjaCBzdHJlYW1cbmZ1bmN0aW9uIENvcmtlZFJlcXVlc3Qoc3RhdGUpIHtcbiAgdmFyIF90aGlzID0gdGhpcztcblxuICB0aGlzLm5leHQgPSBudWxsO1xuICB0aGlzLmVudHJ5ID0gbnVsbDtcbiAgdGhpcy5maW5pc2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgb25Db3JrZWRGaW5pc2goX3RoaXMsIHN0YXRlKTtcbiAgfTtcbn1cbi8qIDwvcmVwbGFjZW1lbnQ+ICovXG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgYXN5bmNXcml0ZSA9ICFwcm9jZXNzLmJyb3dzZXIgJiYgWyd2MC4xMCcsICd2MC45LiddLmluZGV4T2YocHJvY2Vzcy52ZXJzaW9uLnNsaWNlKDAsIDUpKSA+IC0xID8gc2V0SW1tZWRpYXRlIDogcG5hLm5leHRUaWNrO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgRHVwbGV4O1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbldyaXRhYmxlLldyaXRhYmxlU3RhdGUgPSBXcml0YWJsZVN0YXRlO1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIHV0aWwgPSByZXF1aXJlKCdjb3JlLXV0aWwtaXMnKTtcbnV0aWwuaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgaW50ZXJuYWxVdGlsID0ge1xuICBkZXByZWNhdGU6IHJlcXVpcmUoJ3V0aWwtZGVwcmVjYXRlJylcbn07XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBTdHJlYW0gPSByZXF1aXJlKCcuL2ludGVybmFsL3N0cmVhbXMvc3RyZWFtJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cblxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyO1xudmFyIE91clVpbnQ4QXJyYXkgPSBnbG9iYWwuVWludDhBcnJheSB8fCBmdW5jdGlvbiAoKSB7fTtcbmZ1bmN0aW9uIF91aW50OEFycmF5VG9CdWZmZXIoY2h1bmspIHtcbiAgcmV0dXJuIEJ1ZmZlci5mcm9tKGNodW5rKTtcbn1cbmZ1bmN0aW9uIF9pc1VpbnQ4QXJyYXkob2JqKSB7XG4gIHJldHVybiBCdWZmZXIuaXNCdWZmZXIob2JqKSB8fCBvYmogaW5zdGFuY2VvZiBPdXJVaW50OEFycmF5O1xufVxuXG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxudmFyIGRlc3Ryb3lJbXBsID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9zdHJlYW1zL2Rlc3Ryb3knKTtcblxudXRpbC5pbmhlcml0cyhXcml0YWJsZSwgU3RyZWFtKTtcblxuZnVuY3Rpb24gbm9wKCkge31cblxuZnVuY3Rpb24gV3JpdGFibGVTdGF0ZShvcHRpb25zLCBzdHJlYW0pIHtcbiAgRHVwbGV4ID0gRHVwbGV4IHx8IHJlcXVpcmUoJy4vX3N0cmVhbV9kdXBsZXgnKTtcblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICAvLyBEdXBsZXggc3RyZWFtcyBhcmUgYm90aCByZWFkYWJsZSBhbmQgd3JpdGFibGUsIGJ1dCBzaGFyZVxuICAvLyB0aGUgc2FtZSBvcHRpb25zIG9iamVjdC5cbiAgLy8gSG93ZXZlciwgc29tZSBjYXNlcyByZXF1aXJlIHNldHRpbmcgb3B0aW9ucyB0byBkaWZmZXJlbnRcbiAgLy8gdmFsdWVzIGZvciB0aGUgcmVhZGFibGUgYW5kIHRoZSB3cml0YWJsZSBzaWRlcyBvZiB0aGUgZHVwbGV4IHN0cmVhbS5cbiAgLy8gVGhlc2Ugb3B0aW9ucyBjYW4gYmUgcHJvdmlkZWQgc2VwYXJhdGVseSBhcyByZWFkYWJsZVhYWCBhbmQgd3JpdGFibGVYWFguXG4gIHZhciBpc0R1cGxleCA9IHN0cmVhbSBpbnN0YW5jZW9mIER1cGxleDtcblxuICAvLyBvYmplY3Qgc3RyZWFtIGZsYWcgdG8gaW5kaWNhdGUgd2hldGhlciBvciBub3QgdGhpcyBzdHJlYW1cbiAgLy8gY29udGFpbnMgYnVmZmVycyBvciBvYmplY3RzLlxuICB0aGlzLm9iamVjdE1vZGUgPSAhIW9wdGlvbnMub2JqZWN0TW9kZTtcblxuICBpZiAoaXNEdXBsZXgpIHRoaXMub2JqZWN0TW9kZSA9IHRoaXMub2JqZWN0TW9kZSB8fCAhIW9wdGlvbnMud3JpdGFibGVPYmplY3RNb2RlO1xuXG4gIC8vIHRoZSBwb2ludCBhdCB3aGljaCB3cml0ZSgpIHN0YXJ0cyByZXR1cm5pbmcgZmFsc2VcbiAgLy8gTm90ZTogMCBpcyBhIHZhbGlkIHZhbHVlLCBtZWFucyB0aGF0IHdlIGFsd2F5cyByZXR1cm4gZmFsc2UgaWZcbiAgLy8gdGhlIGVudGlyZSBidWZmZXIgaXMgbm90IGZsdXNoZWQgaW1tZWRpYXRlbHkgb24gd3JpdGUoKVxuICB2YXIgaHdtID0gb3B0aW9ucy5oaWdoV2F0ZXJNYXJrO1xuICB2YXIgd3JpdGFibGVId20gPSBvcHRpb25zLndyaXRhYmxlSGlnaFdhdGVyTWFyaztcbiAgdmFyIGRlZmF1bHRId20gPSB0aGlzLm9iamVjdE1vZGUgPyAxNiA6IDE2ICogMTAyNDtcblxuICBpZiAoaHdtIHx8IGh3bSA9PT0gMCkgdGhpcy5oaWdoV2F0ZXJNYXJrID0gaHdtO2Vsc2UgaWYgKGlzRHVwbGV4ICYmICh3cml0YWJsZUh3bSB8fCB3cml0YWJsZUh3bSA9PT0gMCkpIHRoaXMuaGlnaFdhdGVyTWFyayA9IHdyaXRhYmxlSHdtO2Vsc2UgdGhpcy5oaWdoV2F0ZXJNYXJrID0gZGVmYXVsdEh3bTtcblxuICAvLyBjYXN0IHRvIGludHMuXG4gIHRoaXMuaGlnaFdhdGVyTWFyayA9IE1hdGguZmxvb3IodGhpcy5oaWdoV2F0ZXJNYXJrKTtcblxuICAvLyBpZiBfZmluYWwgaGFzIGJlZW4gY2FsbGVkXG4gIHRoaXMuZmluYWxDYWxsZWQgPSBmYWxzZTtcblxuICAvLyBkcmFpbiBldmVudCBmbGFnLlxuICB0aGlzLm5lZWREcmFpbiA9IGZhbHNlO1xuICAvLyBhdCB0aGUgc3RhcnQgb2YgY2FsbGluZyBlbmQoKVxuICB0aGlzLmVuZGluZyA9IGZhbHNlO1xuICAvLyB3aGVuIGVuZCgpIGhhcyBiZWVuIGNhbGxlZCwgYW5kIHJldHVybmVkXG4gIHRoaXMuZW5kZWQgPSBmYWxzZTtcbiAgLy8gd2hlbiAnZmluaXNoJyBpcyBlbWl0dGVkXG4gIHRoaXMuZmluaXNoZWQgPSBmYWxzZTtcblxuICAvLyBoYXMgaXQgYmVlbiBkZXN0cm95ZWRcbiAgdGhpcy5kZXN0cm95ZWQgPSBmYWxzZTtcblxuICAvLyBzaG91bGQgd2UgZGVjb2RlIHN0cmluZ3MgaW50byBidWZmZXJzIGJlZm9yZSBwYXNzaW5nIHRvIF93cml0ZT9cbiAgLy8gdGhpcyBpcyBoZXJlIHNvIHRoYXQgc29tZSBub2RlLWNvcmUgc3RyZWFtcyBjYW4gb3B0aW1pemUgc3RyaW5nXG4gIC8vIGhhbmRsaW5nIGF0IGEgbG93ZXIgbGV2ZWwuXG4gIHZhciBub0RlY29kZSA9IG9wdGlvbnMuZGVjb2RlU3RyaW5ncyA9PT0gZmFsc2U7XG4gIHRoaXMuZGVjb2RlU3RyaW5ncyA9ICFub0RlY29kZTtcblxuICAvLyBDcnlwdG8gaXMga2luZCBvZiBvbGQgYW5kIGNydXN0eS4gIEhpc3RvcmljYWxseSwgaXRzIGRlZmF1bHQgc3RyaW5nXG4gIC8vIGVuY29kaW5nIGlzICdiaW5hcnknIHNvIHdlIGhhdmUgdG8gbWFrZSB0aGlzIGNvbmZpZ3VyYWJsZS5cbiAgLy8gRXZlcnl0aGluZyBlbHNlIGluIHRoZSB1bml2ZXJzZSB1c2VzICd1dGY4JywgdGhvdWdoLlxuICB0aGlzLmRlZmF1bHRFbmNvZGluZyA9IG9wdGlvbnMuZGVmYXVsdEVuY29kaW5nIHx8ICd1dGY4JztcblxuICAvLyBub3QgYW4gYWN0dWFsIGJ1ZmZlciB3ZSBrZWVwIHRyYWNrIG9mLCBidXQgYSBtZWFzdXJlbWVudFxuICAvLyBvZiBob3cgbXVjaCB3ZSdyZSB3YWl0aW5nIHRvIGdldCBwdXNoZWQgdG8gc29tZSB1bmRlcmx5aW5nXG4gIC8vIHNvY2tldCBvciBmaWxlLlxuICB0aGlzLmxlbmd0aCA9IDA7XG5cbiAgLy8gYSBmbGFnIHRvIHNlZSB3aGVuIHdlJ3JlIGluIHRoZSBtaWRkbGUgb2YgYSB3cml0ZS5cbiAgdGhpcy53cml0aW5nID0gZmFsc2U7XG5cbiAgLy8gd2hlbiB0cnVlIGFsbCB3cml0ZXMgd2lsbCBiZSBidWZmZXJlZCB1bnRpbCAudW5jb3JrKCkgY2FsbFxuICB0aGlzLmNvcmtlZCA9IDA7XG5cbiAgLy8gYSBmbGFnIHRvIGJlIGFibGUgdG8gdGVsbCBpZiB0aGUgb253cml0ZSBjYiBpcyBjYWxsZWQgaW1tZWRpYXRlbHksXG4gIC8vIG9yIG9uIGEgbGF0ZXIgdGljay4gIFdlIHNldCB0aGlzIHRvIHRydWUgYXQgZmlyc3QsIGJlY2F1c2UgYW55XG4gIC8vIGFjdGlvbnMgdGhhdCBzaG91bGRuJ3QgaGFwcGVuIHVudGlsIFwibGF0ZXJcIiBzaG91bGQgZ2VuZXJhbGx5IGFsc29cbiAgLy8gbm90IGhhcHBlbiBiZWZvcmUgdGhlIGZpcnN0IHdyaXRlIGNhbGwuXG4gIHRoaXMuc3luYyA9IHRydWU7XG5cbiAgLy8gYSBmbGFnIHRvIGtub3cgaWYgd2UncmUgcHJvY2Vzc2luZyBwcmV2aW91c2x5IGJ1ZmZlcmVkIGl0ZW1zLCB3aGljaFxuICAvLyBtYXkgY2FsbCB0aGUgX3dyaXRlKCkgY2FsbGJhY2sgaW4gdGhlIHNhbWUgdGljaywgc28gdGhhdCB3ZSBkb24ndFxuICAvLyBlbmQgdXAgaW4gYW4gb3ZlcmxhcHBlZCBvbndyaXRlIHNpdHVhdGlvbi5cbiAgdGhpcy5idWZmZXJQcm9jZXNzaW5nID0gZmFsc2U7XG5cbiAgLy8gdGhlIGNhbGxiYWNrIHRoYXQncyBwYXNzZWQgdG8gX3dyaXRlKGNodW5rLGNiKVxuICB0aGlzLm9ud3JpdGUgPSBmdW5jdGlvbiAoZXIpIHtcbiAgICBvbndyaXRlKHN0cmVhbSwgZXIpO1xuICB9O1xuXG4gIC8vIHRoZSBjYWxsYmFjayB0aGF0IHRoZSB1c2VyIHN1cHBsaWVzIHRvIHdyaXRlKGNodW5rLGVuY29kaW5nLGNiKVxuICB0aGlzLndyaXRlY2IgPSBudWxsO1xuXG4gIC8vIHRoZSBhbW91bnQgdGhhdCBpcyBiZWluZyB3cml0dGVuIHdoZW4gX3dyaXRlIGlzIGNhbGxlZC5cbiAgdGhpcy53cml0ZWxlbiA9IDA7XG5cbiAgdGhpcy5idWZmZXJlZFJlcXVlc3QgPSBudWxsO1xuICB0aGlzLmxhc3RCdWZmZXJlZFJlcXVlc3QgPSBudWxsO1xuXG4gIC8vIG51bWJlciBvZiBwZW5kaW5nIHVzZXItc3VwcGxpZWQgd3JpdGUgY2FsbGJhY2tzXG4gIC8vIHRoaXMgbXVzdCBiZSAwIGJlZm9yZSAnZmluaXNoJyBjYW4gYmUgZW1pdHRlZFxuICB0aGlzLnBlbmRpbmdjYiA9IDA7XG5cbiAgLy8gZW1pdCBwcmVmaW5pc2ggaWYgdGhlIG9ubHkgdGhpbmcgd2UncmUgd2FpdGluZyBmb3IgaXMgX3dyaXRlIGNic1xuICAvLyBUaGlzIGlzIHJlbGV2YW50IGZvciBzeW5jaHJvbm91cyBUcmFuc2Zvcm0gc3RyZWFtc1xuICB0aGlzLnByZWZpbmlzaGVkID0gZmFsc2U7XG5cbiAgLy8gVHJ1ZSBpZiB0aGUgZXJyb3Igd2FzIGFscmVhZHkgZW1pdHRlZCBhbmQgc2hvdWxkIG5vdCBiZSB0aHJvd24gYWdhaW5cbiAgdGhpcy5lcnJvckVtaXR0ZWQgPSBmYWxzZTtcblxuICAvLyBjb3VudCBidWZmZXJlZCByZXF1ZXN0c1xuICB0aGlzLmJ1ZmZlcmVkUmVxdWVzdENvdW50ID0gMDtcblxuICAvLyBhbGxvY2F0ZSB0aGUgZmlyc3QgQ29ya2VkUmVxdWVzdCwgdGhlcmUgaXMgYWx3YXlzXG4gIC8vIG9uZSBhbGxvY2F0ZWQgYW5kIGZyZWUgdG8gdXNlLCBhbmQgd2UgbWFpbnRhaW4gYXQgbW9zdCB0d29cbiAgdGhpcy5jb3JrZWRSZXF1ZXN0c0ZyZWUgPSBuZXcgQ29ya2VkUmVxdWVzdCh0aGlzKTtcbn1cblxuV3JpdGFibGVTdGF0ZS5wcm90b3R5cGUuZ2V0QnVmZmVyID0gZnVuY3Rpb24gZ2V0QnVmZmVyKCkge1xuICB2YXIgY3VycmVudCA9IHRoaXMuYnVmZmVyZWRSZXF1ZXN0O1xuICB2YXIgb3V0ID0gW107XG4gIHdoaWxlIChjdXJyZW50KSB7XG4gICAgb3V0LnB1c2goY3VycmVudCk7XG4gICAgY3VycmVudCA9IGN1cnJlbnQubmV4dDtcbiAgfVxuICByZXR1cm4gb3V0O1xufTtcblxuKGZ1bmN0aW9uICgpIHtcbiAgdHJ5IHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoV3JpdGFibGVTdGF0ZS5wcm90b3R5cGUsICdidWZmZXInLCB7XG4gICAgICBnZXQ6IGludGVybmFsVXRpbC5kZXByZWNhdGUoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRCdWZmZXIoKTtcbiAgICAgIH0sICdfd3JpdGFibGVTdGF0ZS5idWZmZXIgaXMgZGVwcmVjYXRlZC4gVXNlIF93cml0YWJsZVN0YXRlLmdldEJ1ZmZlciAnICsgJ2luc3RlYWQuJywgJ0RFUDAwMDMnKVxuICAgIH0pO1xuICB9IGNhdGNoIChfKSB7fVxufSkoKTtcblxuLy8gVGVzdCBfd3JpdGFibGVTdGF0ZSBmb3IgaW5oZXJpdGFuY2UgdG8gYWNjb3VudCBmb3IgRHVwbGV4IHN0cmVhbXMsXG4vLyB3aG9zZSBwcm90b3R5cGUgY2hhaW4gb25seSBwb2ludHMgdG8gUmVhZGFibGUuXG52YXIgcmVhbEhhc0luc3RhbmNlO1xuaWYgKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgU3ltYm9sLmhhc0luc3RhbmNlICYmIHR5cGVvZiBGdW5jdGlvbi5wcm90b3R5cGVbU3ltYm9sLmhhc0luc3RhbmNlXSA9PT0gJ2Z1bmN0aW9uJykge1xuICByZWFsSGFzSW5zdGFuY2UgPSBGdW5jdGlvbi5wcm90b3R5cGVbU3ltYm9sLmhhc0luc3RhbmNlXTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFdyaXRhYmxlLCBTeW1ib2wuaGFzSW5zdGFuY2UsIHtcbiAgICB2YWx1ZTogZnVuY3Rpb24gKG9iamVjdCkge1xuICAgICAgaWYgKHJlYWxIYXNJbnN0YW5jZS5jYWxsKHRoaXMsIG9iamVjdCkpIHJldHVybiB0cnVlO1xuICAgICAgaWYgKHRoaXMgIT09IFdyaXRhYmxlKSByZXR1cm4gZmFsc2U7XG5cbiAgICAgIHJldHVybiBvYmplY3QgJiYgb2JqZWN0Ll93cml0YWJsZVN0YXRlIGluc3RhbmNlb2YgV3JpdGFibGVTdGF0ZTtcbiAgICB9XG4gIH0pO1xufSBlbHNlIHtcbiAgcmVhbEhhc0luc3RhbmNlID0gZnVuY3Rpb24gKG9iamVjdCkge1xuICAgIHJldHVybiBvYmplY3QgaW5zdGFuY2VvZiB0aGlzO1xuICB9O1xufVxuXG5mdW5jdGlvbiBXcml0YWJsZShvcHRpb25zKSB7XG4gIER1cGxleCA9IER1cGxleCB8fCByZXF1aXJlKCcuL19zdHJlYW1fZHVwbGV4Jyk7XG5cbiAgLy8gV3JpdGFibGUgY3RvciBpcyBhcHBsaWVkIHRvIER1cGxleGVzLCB0b28uXG4gIC8vIGByZWFsSGFzSW5zdGFuY2VgIGlzIG5lY2Vzc2FyeSBiZWNhdXNlIHVzaW5nIHBsYWluIGBpbnN0YW5jZW9mYFxuICAvLyB3b3VsZCByZXR1cm4gZmFsc2UsIGFzIG5vIGBfd3JpdGFibGVTdGF0ZWAgcHJvcGVydHkgaXMgYXR0YWNoZWQuXG5cbiAgLy8gVHJ5aW5nIHRvIHVzZSB0aGUgY3VzdG9tIGBpbnN0YW5jZW9mYCBmb3IgV3JpdGFibGUgaGVyZSB3aWxsIGFsc28gYnJlYWsgdGhlXG4gIC8vIE5vZGUuanMgTGF6eVRyYW5zZm9ybSBpbXBsZW1lbnRhdGlvbiwgd2hpY2ggaGFzIGEgbm9uLXRyaXZpYWwgZ2V0dGVyIGZvclxuICAvLyBgX3dyaXRhYmxlU3RhdGVgIHRoYXQgd291bGQgbGVhZCB0byBpbmZpbml0ZSByZWN1cnNpb24uXG4gIGlmICghcmVhbEhhc0luc3RhbmNlLmNhbGwoV3JpdGFibGUsIHRoaXMpICYmICEodGhpcyBpbnN0YW5jZW9mIER1cGxleCkpIHtcbiAgICByZXR1cm4gbmV3IFdyaXRhYmxlKG9wdGlvbnMpO1xuICB9XG5cbiAgdGhpcy5fd3JpdGFibGVTdGF0ZSA9IG5ldyBXcml0YWJsZVN0YXRlKG9wdGlvbnMsIHRoaXMpO1xuXG4gIC8vIGxlZ2FjeS5cbiAgdGhpcy53cml0YWJsZSA9IHRydWU7XG5cbiAgaWYgKG9wdGlvbnMpIHtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMud3JpdGUgPT09ICdmdW5jdGlvbicpIHRoaXMuX3dyaXRlID0gb3B0aW9ucy53cml0ZTtcblxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy53cml0ZXYgPT09ICdmdW5jdGlvbicpIHRoaXMuX3dyaXRldiA9IG9wdGlvbnMud3JpdGV2O1xuXG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLmRlc3Ryb3kgPT09ICdmdW5jdGlvbicpIHRoaXMuX2Rlc3Ryb3kgPSBvcHRpb25zLmRlc3Ryb3k7XG5cbiAgICBpZiAodHlwZW9mIG9wdGlvbnMuZmluYWwgPT09ICdmdW5jdGlvbicpIHRoaXMuX2ZpbmFsID0gb3B0aW9ucy5maW5hbDtcbiAgfVxuXG4gIFN0cmVhbS5jYWxsKHRoaXMpO1xufVxuXG4vLyBPdGhlcndpc2UgcGVvcGxlIGNhbiBwaXBlIFdyaXRhYmxlIHN0cmVhbXMsIHdoaWNoIGlzIGp1c3Qgd3JvbmcuXG5Xcml0YWJsZS5wcm90b3R5cGUucGlwZSA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5lbWl0KCdlcnJvcicsIG5ldyBFcnJvcignQ2Fubm90IHBpcGUsIG5vdCByZWFkYWJsZScpKTtcbn07XG5cbmZ1bmN0aW9uIHdyaXRlQWZ0ZXJFbmQoc3RyZWFtLCBjYikge1xuICB2YXIgZXIgPSBuZXcgRXJyb3IoJ3dyaXRlIGFmdGVyIGVuZCcpO1xuICAvLyBUT0RPOiBkZWZlciBlcnJvciBldmVudHMgY29uc2lzdGVudGx5IGV2ZXJ5d2hlcmUsIG5vdCBqdXN0IHRoZSBjYlxuICBzdHJlYW0uZW1pdCgnZXJyb3InLCBlcik7XG4gIHBuYS5uZXh0VGljayhjYiwgZXIpO1xufVxuXG4vLyBDaGVja3MgdGhhdCBhIHVzZXItc3VwcGxpZWQgY2h1bmsgaXMgdmFsaWQsIGVzcGVjaWFsbHkgZm9yIHRoZSBwYXJ0aWN1bGFyXG4vLyBtb2RlIHRoZSBzdHJlYW0gaXMgaW4uIEN1cnJlbnRseSB0aGlzIG1lYW5zIHRoYXQgYG51bGxgIGlzIG5ldmVyIGFjY2VwdGVkXG4vLyBhbmQgdW5kZWZpbmVkL25vbi1zdHJpbmcgdmFsdWVzIGFyZSBvbmx5IGFsbG93ZWQgaW4gb2JqZWN0IG1vZGUuXG5mdW5jdGlvbiB2YWxpZENodW5rKHN0cmVhbSwgc3RhdGUsIGNodW5rLCBjYikge1xuICB2YXIgdmFsaWQgPSB0cnVlO1xuICB2YXIgZXIgPSBmYWxzZTtcblxuICBpZiAoY2h1bmsgPT09IG51bGwpIHtcbiAgICBlciA9IG5ldyBUeXBlRXJyb3IoJ01heSBub3Qgd3JpdGUgbnVsbCB2YWx1ZXMgdG8gc3RyZWFtJyk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGNodW5rICE9PSAnc3RyaW5nJyAmJiBjaHVuayAhPT0gdW5kZWZpbmVkICYmICFzdGF0ZS5vYmplY3RNb2RlKSB7XG4gICAgZXIgPSBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIG5vbi1zdHJpbmcvYnVmZmVyIGNodW5rJyk7XG4gIH1cbiAgaWYgKGVyKSB7XG4gICAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXIpO1xuICAgIHBuYS5uZXh0VGljayhjYiwgZXIpO1xuICAgIHZhbGlkID0gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIHZhbGlkO1xufVxuXG5Xcml0YWJsZS5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nLCBjYikge1xuICB2YXIgc3RhdGUgPSB0aGlzLl93cml0YWJsZVN0YXRlO1xuICB2YXIgcmV0ID0gZmFsc2U7XG4gIHZhciBpc0J1ZiA9ICFzdGF0ZS5vYmplY3RNb2RlICYmIF9pc1VpbnQ4QXJyYXkoY2h1bmspO1xuXG4gIGlmIChpc0J1ZiAmJiAhQnVmZmVyLmlzQnVmZmVyKGNodW5rKSkge1xuICAgIGNodW5rID0gX3VpbnQ4QXJyYXlUb0J1ZmZlcihjaHVuayk7XG4gIH1cblxuICBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2IgPSBlbmNvZGluZztcbiAgICBlbmNvZGluZyA9IG51bGw7XG4gIH1cblxuICBpZiAoaXNCdWYpIGVuY29kaW5nID0gJ2J1ZmZlcic7ZWxzZSBpZiAoIWVuY29kaW5nKSBlbmNvZGluZyA9IHN0YXRlLmRlZmF1bHRFbmNvZGluZztcblxuICBpZiAodHlwZW9mIGNiICE9PSAnZnVuY3Rpb24nKSBjYiA9IG5vcDtcblxuICBpZiAoc3RhdGUuZW5kZWQpIHdyaXRlQWZ0ZXJFbmQodGhpcywgY2IpO2Vsc2UgaWYgKGlzQnVmIHx8IHZhbGlkQ2h1bmsodGhpcywgc3RhdGUsIGNodW5rLCBjYikpIHtcbiAgICBzdGF0ZS5wZW5kaW5nY2IrKztcbiAgICByZXQgPSB3cml0ZU9yQnVmZmVyKHRoaXMsIHN0YXRlLCBpc0J1ZiwgY2h1bmssIGVuY29kaW5nLCBjYik7XG4gIH1cblxuICByZXR1cm4gcmV0O1xufTtcblxuV3JpdGFibGUucHJvdG90eXBlLmNvcmsgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3dyaXRhYmxlU3RhdGU7XG5cbiAgc3RhdGUuY29ya2VkKys7XG59O1xuXG5Xcml0YWJsZS5wcm90b3R5cGUudW5jb3JrID0gZnVuY3Rpb24gKCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl93cml0YWJsZVN0YXRlO1xuXG4gIGlmIChzdGF0ZS5jb3JrZWQpIHtcbiAgICBzdGF0ZS5jb3JrZWQtLTtcblxuICAgIGlmICghc3RhdGUud3JpdGluZyAmJiAhc3RhdGUuY29ya2VkICYmICFzdGF0ZS5maW5pc2hlZCAmJiAhc3RhdGUuYnVmZmVyUHJvY2Vzc2luZyAmJiBzdGF0ZS5idWZmZXJlZFJlcXVlc3QpIGNsZWFyQnVmZmVyKHRoaXMsIHN0YXRlKTtcbiAgfVxufTtcblxuV3JpdGFibGUucHJvdG90eXBlLnNldERlZmF1bHRFbmNvZGluZyA9IGZ1bmN0aW9uIHNldERlZmF1bHRFbmNvZGluZyhlbmNvZGluZykge1xuICAvLyBub2RlOjpQYXJzZUVuY29kaW5nKCkgcmVxdWlyZXMgbG93ZXIgY2FzZS5cbiAgaWYgKHR5cGVvZiBlbmNvZGluZyA9PT0gJ3N0cmluZycpIGVuY29kaW5nID0gZW5jb2RpbmcudG9Mb3dlckNhc2UoKTtcbiAgaWYgKCEoWydoZXgnLCAndXRmOCcsICd1dGYtOCcsICdhc2NpaScsICdiaW5hcnknLCAnYmFzZTY0JywgJ3VjczInLCAndWNzLTInLCAndXRmMTZsZScsICd1dGYtMTZsZScsICdyYXcnXS5pbmRleE9mKChlbmNvZGluZyArICcnKS50b0xvd2VyQ2FzZSgpKSA+IC0xKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKTtcbiAgdGhpcy5fd3JpdGFibGVTdGF0ZS5kZWZhdWx0RW5jb2RpbmcgPSBlbmNvZGluZztcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5mdW5jdGlvbiBkZWNvZGVDaHVuayhzdGF0ZSwgY2h1bmssIGVuY29kaW5nKSB7XG4gIGlmICghc3RhdGUub2JqZWN0TW9kZSAmJiBzdGF0ZS5kZWNvZGVTdHJpbmdzICE9PSBmYWxzZSAmJiB0eXBlb2YgY2h1bmsgPT09ICdzdHJpbmcnKSB7XG4gICAgY2h1bmsgPSBCdWZmZXIuZnJvbShjaHVuaywgZW5jb2RpbmcpO1xuICB9XG4gIHJldHVybiBjaHVuaztcbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFdyaXRhYmxlLnByb3RvdHlwZSwgJ3dyaXRhYmxlSGlnaFdhdGVyTWFyaycsIHtcbiAgLy8gbWFraW5nIGl0IGV4cGxpY2l0IHRoaXMgcHJvcGVydHkgaXMgbm90IGVudW1lcmFibGVcbiAgLy8gYmVjYXVzZSBvdGhlcndpc2Ugc29tZSBwcm90b3R5cGUgbWFuaXB1bGF0aW9uIGluXG4gIC8vIHVzZXJsYW5kIHdpbGwgZmFpbFxuICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3dyaXRhYmxlU3RhdGUuaGlnaFdhdGVyTWFyaztcbiAgfVxufSk7XG5cbi8vIGlmIHdlJ3JlIGFscmVhZHkgd3JpdGluZyBzb21ldGhpbmcsIHRoZW4ganVzdCBwdXQgdGhpc1xuLy8gaW4gdGhlIHF1ZXVlLCBhbmQgd2FpdCBvdXIgdHVybi4gIE90aGVyd2lzZSwgY2FsbCBfd3JpdGVcbi8vIElmIHdlIHJldHVybiBmYWxzZSwgdGhlbiB3ZSBuZWVkIGEgZHJhaW4gZXZlbnQsIHNvIHNldCB0aGF0IGZsYWcuXG5mdW5jdGlvbiB3cml0ZU9yQnVmZmVyKHN0cmVhbSwgc3RhdGUsIGlzQnVmLCBjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIGlmICghaXNCdWYpIHtcbiAgICB2YXIgbmV3Q2h1bmsgPSBkZWNvZGVDaHVuayhzdGF0ZSwgY2h1bmssIGVuY29kaW5nKTtcbiAgICBpZiAoY2h1bmsgIT09IG5ld0NodW5rKSB7XG4gICAgICBpc0J1ZiA9IHRydWU7XG4gICAgICBlbmNvZGluZyA9ICdidWZmZXInO1xuICAgICAgY2h1bmsgPSBuZXdDaHVuaztcbiAgICB9XG4gIH1cbiAgdmFyIGxlbiA9IHN0YXRlLm9iamVjdE1vZGUgPyAxIDogY2h1bmsubGVuZ3RoO1xuXG4gIHN0YXRlLmxlbmd0aCArPSBsZW47XG5cbiAgdmFyIHJldCA9IHN0YXRlLmxlbmd0aCA8IHN0YXRlLmhpZ2hXYXRlck1hcms7XG4gIC8vIHdlIG11c3QgZW5zdXJlIHRoYXQgcHJldmlvdXMgbmVlZERyYWluIHdpbGwgbm90IGJlIHJlc2V0IHRvIGZhbHNlLlxuICBpZiAoIXJldCkgc3RhdGUubmVlZERyYWluID0gdHJ1ZTtcblxuICBpZiAoc3RhdGUud3JpdGluZyB8fCBzdGF0ZS5jb3JrZWQpIHtcbiAgICB2YXIgbGFzdCA9IHN0YXRlLmxhc3RCdWZmZXJlZFJlcXVlc3Q7XG4gICAgc3RhdGUubGFzdEJ1ZmZlcmVkUmVxdWVzdCA9IHtcbiAgICAgIGNodW5rOiBjaHVuayxcbiAgICAgIGVuY29kaW5nOiBlbmNvZGluZyxcbiAgICAgIGlzQnVmOiBpc0J1ZixcbiAgICAgIGNhbGxiYWNrOiBjYixcbiAgICAgIG5leHQ6IG51bGxcbiAgICB9O1xuICAgIGlmIChsYXN0KSB7XG4gICAgICBsYXN0Lm5leHQgPSBzdGF0ZS5sYXN0QnVmZmVyZWRSZXF1ZXN0O1xuICAgIH0gZWxzZSB7XG4gICAgICBzdGF0ZS5idWZmZXJlZFJlcXVlc3QgPSBzdGF0ZS5sYXN0QnVmZmVyZWRSZXF1ZXN0O1xuICAgIH1cbiAgICBzdGF0ZS5idWZmZXJlZFJlcXVlc3RDb3VudCArPSAxO1xuICB9IGVsc2Uge1xuICAgIGRvV3JpdGUoc3RyZWFtLCBzdGF0ZSwgZmFsc2UsIGxlbiwgY2h1bmssIGVuY29kaW5nLCBjYik7XG4gIH1cblxuICByZXR1cm4gcmV0O1xufVxuXG5mdW5jdGlvbiBkb1dyaXRlKHN0cmVhbSwgc3RhdGUsIHdyaXRldiwgbGVuLCBjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIHN0YXRlLndyaXRlbGVuID0gbGVuO1xuICBzdGF0ZS53cml0ZWNiID0gY2I7XG4gIHN0YXRlLndyaXRpbmcgPSB0cnVlO1xuICBzdGF0ZS5zeW5jID0gdHJ1ZTtcbiAgaWYgKHdyaXRldikgc3RyZWFtLl93cml0ZXYoY2h1bmssIHN0YXRlLm9ud3JpdGUpO2Vsc2Ugc3RyZWFtLl93cml0ZShjaHVuaywgZW5jb2RpbmcsIHN0YXRlLm9ud3JpdGUpO1xuICBzdGF0ZS5zeW5jID0gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIG9ud3JpdGVFcnJvcihzdHJlYW0sIHN0YXRlLCBzeW5jLCBlciwgY2IpIHtcbiAgLS1zdGF0ZS5wZW5kaW5nY2I7XG5cbiAgaWYgKHN5bmMpIHtcbiAgICAvLyBkZWZlciB0aGUgY2FsbGJhY2sgaWYgd2UgYXJlIGJlaW5nIGNhbGxlZCBzeW5jaHJvbm91c2x5XG4gICAgLy8gdG8gYXZvaWQgcGlsaW5nIHVwIHRoaW5ncyBvbiB0aGUgc3RhY2tcbiAgICBwbmEubmV4dFRpY2soY2IsIGVyKTtcbiAgICAvLyB0aGlzIGNhbiBlbWl0IGZpbmlzaCwgYW5kIGl0IHdpbGwgYWx3YXlzIGhhcHBlblxuICAgIC8vIGFmdGVyIGVycm9yXG4gICAgcG5hLm5leHRUaWNrKGZpbmlzaE1heWJlLCBzdHJlYW0sIHN0YXRlKTtcbiAgICBzdHJlYW0uX3dyaXRhYmxlU3RhdGUuZXJyb3JFbWl0dGVkID0gdHJ1ZTtcbiAgICBzdHJlYW0uZW1pdCgnZXJyb3InLCBlcik7XG4gIH0gZWxzZSB7XG4gICAgLy8gdGhlIGNhbGxlciBleHBlY3QgdGhpcyB0byBoYXBwZW4gYmVmb3JlIGlmXG4gICAgLy8gaXQgaXMgYXN5bmNcbiAgICBjYihlcik7XG4gICAgc3RyZWFtLl93cml0YWJsZVN0YXRlLmVycm9yRW1pdHRlZCA9IHRydWU7XG4gICAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXIpO1xuICAgIC8vIHRoaXMgY2FuIGVtaXQgZmluaXNoLCBidXQgZmluaXNoIG11c3RcbiAgICAvLyBhbHdheXMgZm9sbG93IGVycm9yXG4gICAgZmluaXNoTWF5YmUoc3RyZWFtLCBzdGF0ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gb253cml0ZVN0YXRlVXBkYXRlKHN0YXRlKSB7XG4gIHN0YXRlLndyaXRpbmcgPSBmYWxzZTtcbiAgc3RhdGUud3JpdGVjYiA9IG51bGw7XG4gIHN0YXRlLmxlbmd0aCAtPSBzdGF0ZS53cml0ZWxlbjtcbiAgc3RhdGUud3JpdGVsZW4gPSAwO1xufVxuXG5mdW5jdGlvbiBvbndyaXRlKHN0cmVhbSwgZXIpIHtcbiAgdmFyIHN0YXRlID0gc3RyZWFtLl93cml0YWJsZVN0YXRlO1xuICB2YXIgc3luYyA9IHN0YXRlLnN5bmM7XG4gIHZhciBjYiA9IHN0YXRlLndyaXRlY2I7XG5cbiAgb253cml0ZVN0YXRlVXBkYXRlKHN0YXRlKTtcblxuICBpZiAoZXIpIG9ud3JpdGVFcnJvcihzdHJlYW0sIHN0YXRlLCBzeW5jLCBlciwgY2IpO2Vsc2Uge1xuICAgIC8vIENoZWNrIGlmIHdlJ3JlIGFjdHVhbGx5IHJlYWR5IHRvIGZpbmlzaCwgYnV0IGRvbid0IGVtaXQgeWV0XG4gICAgdmFyIGZpbmlzaGVkID0gbmVlZEZpbmlzaChzdGF0ZSk7XG5cbiAgICBpZiAoIWZpbmlzaGVkICYmICFzdGF0ZS5jb3JrZWQgJiYgIXN0YXRlLmJ1ZmZlclByb2Nlc3NpbmcgJiYgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0KSB7XG4gICAgICBjbGVhckJ1ZmZlcihzdHJlYW0sIHN0YXRlKTtcbiAgICB9XG5cbiAgICBpZiAoc3luYykge1xuICAgICAgLyo8cmVwbGFjZW1lbnQ+Ki9cbiAgICAgIGFzeW5jV3JpdGUoYWZ0ZXJXcml0ZSwgc3RyZWFtLCBzdGF0ZSwgZmluaXNoZWQsIGNiKTtcbiAgICAgIC8qPC9yZXBsYWNlbWVudD4qL1xuICAgIH0gZWxzZSB7XG4gICAgICBhZnRlcldyaXRlKHN0cmVhbSwgc3RhdGUsIGZpbmlzaGVkLCBjYik7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGFmdGVyV3JpdGUoc3RyZWFtLCBzdGF0ZSwgZmluaXNoZWQsIGNiKSB7XG4gIGlmICghZmluaXNoZWQpIG9ud3JpdGVEcmFpbihzdHJlYW0sIHN0YXRlKTtcbiAgc3RhdGUucGVuZGluZ2NiLS07XG4gIGNiKCk7XG4gIGZpbmlzaE1heWJlKHN0cmVhbSwgc3RhdGUpO1xufVxuXG4vLyBNdXN0IGZvcmNlIGNhbGxiYWNrIHRvIGJlIGNhbGxlZCBvbiBuZXh0VGljaywgc28gdGhhdCB3ZSBkb24ndFxuLy8gZW1pdCAnZHJhaW4nIGJlZm9yZSB0aGUgd3JpdGUoKSBjb25zdW1lciBnZXRzIHRoZSAnZmFsc2UnIHJldHVyblxuLy8gdmFsdWUsIGFuZCBoYXMgYSBjaGFuY2UgdG8gYXR0YWNoIGEgJ2RyYWluJyBsaXN0ZW5lci5cbmZ1bmN0aW9uIG9ud3JpdGVEcmFpbihzdHJlYW0sIHN0YXRlKSB7XG4gIGlmIChzdGF0ZS5sZW5ndGggPT09IDAgJiYgc3RhdGUubmVlZERyYWluKSB7XG4gICAgc3RhdGUubmVlZERyYWluID0gZmFsc2U7XG4gICAgc3RyZWFtLmVtaXQoJ2RyYWluJyk7XG4gIH1cbn1cblxuLy8gaWYgdGhlcmUncyBzb21ldGhpbmcgaW4gdGhlIGJ1ZmZlciB3YWl0aW5nLCB0aGVuIHByb2Nlc3MgaXRcbmZ1bmN0aW9uIGNsZWFyQnVmZmVyKHN0cmVhbSwgc3RhdGUpIHtcbiAgc3RhdGUuYnVmZmVyUHJvY2Vzc2luZyA9IHRydWU7XG4gIHZhciBlbnRyeSA9IHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdDtcblxuICBpZiAoc3RyZWFtLl93cml0ZXYgJiYgZW50cnkgJiYgZW50cnkubmV4dCkge1xuICAgIC8vIEZhc3QgY2FzZSwgd3JpdGUgZXZlcnl0aGluZyB1c2luZyBfd3JpdGV2KClcbiAgICB2YXIgbCA9IHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdENvdW50O1xuICAgIHZhciBidWZmZXIgPSBuZXcgQXJyYXkobCk7XG4gICAgdmFyIGhvbGRlciA9IHN0YXRlLmNvcmtlZFJlcXVlc3RzRnJlZTtcbiAgICBob2xkZXIuZW50cnkgPSBlbnRyeTtcblxuICAgIHZhciBjb3VudCA9IDA7XG4gICAgdmFyIGFsbEJ1ZmZlcnMgPSB0cnVlO1xuICAgIHdoaWxlIChlbnRyeSkge1xuICAgICAgYnVmZmVyW2NvdW50XSA9IGVudHJ5O1xuICAgICAgaWYgKCFlbnRyeS5pc0J1ZikgYWxsQnVmZmVycyA9IGZhbHNlO1xuICAgICAgZW50cnkgPSBlbnRyeS5uZXh0O1xuICAgICAgY291bnQgKz0gMTtcbiAgICB9XG4gICAgYnVmZmVyLmFsbEJ1ZmZlcnMgPSBhbGxCdWZmZXJzO1xuXG4gICAgZG9Xcml0ZShzdHJlYW0sIHN0YXRlLCB0cnVlLCBzdGF0ZS5sZW5ndGgsIGJ1ZmZlciwgJycsIGhvbGRlci5maW5pc2gpO1xuXG4gICAgLy8gZG9Xcml0ZSBpcyBhbG1vc3QgYWx3YXlzIGFzeW5jLCBkZWZlciB0aGVzZSB0byBzYXZlIGEgYml0IG9mIHRpbWVcbiAgICAvLyBhcyB0aGUgaG90IHBhdGggZW5kcyB3aXRoIGRvV3JpdGVcbiAgICBzdGF0ZS5wZW5kaW5nY2IrKztcbiAgICBzdGF0ZS5sYXN0QnVmZmVyZWRSZXF1ZXN0ID0gbnVsbDtcbiAgICBpZiAoaG9sZGVyLm5leHQpIHtcbiAgICAgIHN0YXRlLmNvcmtlZFJlcXVlc3RzRnJlZSA9IGhvbGRlci5uZXh0O1xuICAgICAgaG9sZGVyLm5leHQgPSBudWxsO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdGF0ZS5jb3JrZWRSZXF1ZXN0c0ZyZWUgPSBuZXcgQ29ya2VkUmVxdWVzdChzdGF0ZSk7XG4gICAgfVxuICAgIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdENvdW50ID0gMDtcbiAgfSBlbHNlIHtcbiAgICAvLyBTbG93IGNhc2UsIHdyaXRlIGNodW5rcyBvbmUtYnktb25lXG4gICAgd2hpbGUgKGVudHJ5KSB7XG4gICAgICB2YXIgY2h1bmsgPSBlbnRyeS5jaHVuaztcbiAgICAgIHZhciBlbmNvZGluZyA9IGVudHJ5LmVuY29kaW5nO1xuICAgICAgdmFyIGNiID0gZW50cnkuY2FsbGJhY2s7XG4gICAgICB2YXIgbGVuID0gc3RhdGUub2JqZWN0TW9kZSA/IDEgOiBjaHVuay5sZW5ndGg7XG5cbiAgICAgIGRvV3JpdGUoc3RyZWFtLCBzdGF0ZSwgZmFsc2UsIGxlbiwgY2h1bmssIGVuY29kaW5nLCBjYik7XG4gICAgICBlbnRyeSA9IGVudHJ5Lm5leHQ7XG4gICAgICBzdGF0ZS5idWZmZXJlZFJlcXVlc3RDb3VudC0tO1xuICAgICAgLy8gaWYgd2UgZGlkbid0IGNhbGwgdGhlIG9ud3JpdGUgaW1tZWRpYXRlbHksIHRoZW5cbiAgICAgIC8vIGl0IG1lYW5zIHRoYXQgd2UgbmVlZCB0byB3YWl0IHVudGlsIGl0IGRvZXMuXG4gICAgICAvLyBhbHNvLCB0aGF0IG1lYW5zIHRoYXQgdGhlIGNodW5rIGFuZCBjYiBhcmUgY3VycmVudGx5XG4gICAgICAvLyBiZWluZyBwcm9jZXNzZWQsIHNvIG1vdmUgdGhlIGJ1ZmZlciBjb3VudGVyIHBhc3QgdGhlbS5cbiAgICAgIGlmIChzdGF0ZS53cml0aW5nKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChlbnRyeSA9PT0gbnVsbCkgc3RhdGUubGFzdEJ1ZmZlcmVkUmVxdWVzdCA9IG51bGw7XG4gIH1cblxuICBzdGF0ZS5idWZmZXJlZFJlcXVlc3QgPSBlbnRyeTtcbiAgc3RhdGUuYnVmZmVyUHJvY2Vzc2luZyA9IGZhbHNlO1xufVxuXG5Xcml0YWJsZS5wcm90b3R5cGUuX3dyaXRlID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgY2IobmV3IEVycm9yKCdfd3JpdGUoKSBpcyBub3QgaW1wbGVtZW50ZWQnKSk7XG59O1xuXG5Xcml0YWJsZS5wcm90b3R5cGUuX3dyaXRldiA9IG51bGw7XG5cbldyaXRhYmxlLnByb3RvdHlwZS5lbmQgPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nLCBjYikge1xuICB2YXIgc3RhdGUgPSB0aGlzLl93cml0YWJsZVN0YXRlO1xuXG4gIGlmICh0eXBlb2YgY2h1bmsgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYiA9IGNodW5rO1xuICAgIGNodW5rID0gbnVsbDtcbiAgICBlbmNvZGluZyA9IG51bGw7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2IgPSBlbmNvZGluZztcbiAgICBlbmNvZGluZyA9IG51bGw7XG4gIH1cblxuICBpZiAoY2h1bmsgIT09IG51bGwgJiYgY2h1bmsgIT09IHVuZGVmaW5lZCkgdGhpcy53cml0ZShjaHVuaywgZW5jb2RpbmcpO1xuXG4gIC8vIC5lbmQoKSBmdWxseSB1bmNvcmtzXG4gIGlmIChzdGF0ZS5jb3JrZWQpIHtcbiAgICBzdGF0ZS5jb3JrZWQgPSAxO1xuICAgIHRoaXMudW5jb3JrKCk7XG4gIH1cblxuICAvLyBpZ25vcmUgdW5uZWNlc3NhcnkgZW5kKCkgY2FsbHMuXG4gIGlmICghc3RhdGUuZW5kaW5nICYmICFzdGF0ZS5maW5pc2hlZCkgZW5kV3JpdGFibGUodGhpcywgc3RhdGUsIGNiKTtcbn07XG5cbmZ1bmN0aW9uIG5lZWRGaW5pc2goc3RhdGUpIHtcbiAgcmV0dXJuIHN0YXRlLmVuZGluZyAmJiBzdGF0ZS5sZW5ndGggPT09IDAgJiYgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0ID09PSBudWxsICYmICFzdGF0ZS5maW5pc2hlZCAmJiAhc3RhdGUud3JpdGluZztcbn1cbmZ1bmN0aW9uIGNhbGxGaW5hbChzdHJlYW0sIHN0YXRlKSB7XG4gIHN0cmVhbS5fZmluYWwoZnVuY3Rpb24gKGVycikge1xuICAgIHN0YXRlLnBlbmRpbmdjYi0tO1xuICAgIGlmIChlcnIpIHtcbiAgICAgIHN0cmVhbS5lbWl0KCdlcnJvcicsIGVycik7XG4gICAgfVxuICAgIHN0YXRlLnByZWZpbmlzaGVkID0gdHJ1ZTtcbiAgICBzdHJlYW0uZW1pdCgncHJlZmluaXNoJyk7XG4gICAgZmluaXNoTWF5YmUoc3RyZWFtLCBzdGF0ZSk7XG4gIH0pO1xufVxuZnVuY3Rpb24gcHJlZmluaXNoKHN0cmVhbSwgc3RhdGUpIHtcbiAgaWYgKCFzdGF0ZS5wcmVmaW5pc2hlZCAmJiAhc3RhdGUuZmluYWxDYWxsZWQpIHtcbiAgICBpZiAodHlwZW9mIHN0cmVhbS5fZmluYWwgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHN0YXRlLnBlbmRpbmdjYisrO1xuICAgICAgc3RhdGUuZmluYWxDYWxsZWQgPSB0cnVlO1xuICAgICAgcG5hLm5leHRUaWNrKGNhbGxGaW5hbCwgc3RyZWFtLCBzdGF0ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YXRlLnByZWZpbmlzaGVkID0gdHJ1ZTtcbiAgICAgIHN0cmVhbS5lbWl0KCdwcmVmaW5pc2gnKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZmluaXNoTWF5YmUoc3RyZWFtLCBzdGF0ZSkge1xuICB2YXIgbmVlZCA9IG5lZWRGaW5pc2goc3RhdGUpO1xuICBpZiAobmVlZCkge1xuICAgIHByZWZpbmlzaChzdHJlYW0sIHN0YXRlKTtcbiAgICBpZiAoc3RhdGUucGVuZGluZ2NiID09PSAwKSB7XG4gICAgICBzdGF0ZS5maW5pc2hlZCA9IHRydWU7XG4gICAgICBzdHJlYW0uZW1pdCgnZmluaXNoJyk7XG4gICAgfVxuICB9XG4gIHJldHVybiBuZWVkO1xufVxuXG5mdW5jdGlvbiBlbmRXcml0YWJsZShzdHJlYW0sIHN0YXRlLCBjYikge1xuICBzdGF0ZS5lbmRpbmcgPSB0cnVlO1xuICBmaW5pc2hNYXliZShzdHJlYW0sIHN0YXRlKTtcbiAgaWYgKGNiKSB7XG4gICAgaWYgKHN0YXRlLmZpbmlzaGVkKSBwbmEubmV4dFRpY2soY2IpO2Vsc2Ugc3RyZWFtLm9uY2UoJ2ZpbmlzaCcsIGNiKTtcbiAgfVxuICBzdGF0ZS5lbmRlZCA9IHRydWU7XG4gIHN0cmVhbS53cml0YWJsZSA9IGZhbHNlO1xufVxuXG5mdW5jdGlvbiBvbkNvcmtlZEZpbmlzaChjb3JrUmVxLCBzdGF0ZSwgZXJyKSB7XG4gIHZhciBlbnRyeSA9IGNvcmtSZXEuZW50cnk7XG4gIGNvcmtSZXEuZW50cnkgPSBudWxsO1xuICB3aGlsZSAoZW50cnkpIHtcbiAgICB2YXIgY2IgPSBlbnRyeS5jYWxsYmFjaztcbiAgICBzdGF0ZS5wZW5kaW5nY2ItLTtcbiAgICBjYihlcnIpO1xuICAgIGVudHJ5ID0gZW50cnkubmV4dDtcbiAgfVxuICBpZiAoc3RhdGUuY29ya2VkUmVxdWVzdHNGcmVlKSB7XG4gICAgc3RhdGUuY29ya2VkUmVxdWVzdHNGcmVlLm5leHQgPSBjb3JrUmVxO1xuICB9IGVsc2Uge1xuICAgIHN0YXRlLmNvcmtlZFJlcXVlc3RzRnJlZSA9IGNvcmtSZXE7XG4gIH1cbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFdyaXRhYmxlLnByb3RvdHlwZSwgJ2Rlc3Ryb3llZCcsIHtcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMuX3dyaXRhYmxlU3RhdGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fd3JpdGFibGVTdGF0ZS5kZXN0cm95ZWQ7XG4gIH0sXG4gIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgLy8gd2UgaWdub3JlIHRoZSB2YWx1ZSBpZiB0aGUgc3RyZWFtXG4gICAgLy8gaGFzIG5vdCBiZWVuIGluaXRpYWxpemVkIHlldFxuICAgIGlmICghdGhpcy5fd3JpdGFibGVTdGF0ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIGJhY2t3YXJkIGNvbXBhdGliaWxpdHksIHRoZSB1c2VyIGlzIGV4cGxpY2l0bHlcbiAgICAvLyBtYW5hZ2luZyBkZXN0cm95ZWRcbiAgICB0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZCA9IHZhbHVlO1xuICB9XG59KTtcblxuV3JpdGFibGUucHJvdG90eXBlLmRlc3Ryb3kgPSBkZXN0cm95SW1wbC5kZXN0cm95O1xuV3JpdGFibGUucHJvdG90eXBlLl91bmRlc3Ryb3kgPSBkZXN0cm95SW1wbC51bmRlc3Ryb3k7XG5Xcml0YWJsZS5wcm90b3R5cGUuX2Rlc3Ryb3kgPSBmdW5jdGlvbiAoZXJyLCBjYikge1xuICB0aGlzLmVuZCgpO1xuICBjYihlcnIpO1xufTsiLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKjxyZXBsYWNlbWVudD4qL1xuXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXI7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxudmFyIGlzRW5jb2RpbmcgPSBCdWZmZXIuaXNFbmNvZGluZyB8fCBmdW5jdGlvbiAoZW5jb2RpbmcpIHtcbiAgZW5jb2RpbmcgPSAnJyArIGVuY29kaW5nO1xuICBzd2l0Y2ggKGVuY29kaW5nICYmIGVuY29kaW5nLnRvTG93ZXJDYXNlKCkpIHtcbiAgICBjYXNlICdoZXgnOmNhc2UgJ3V0ZjgnOmNhc2UgJ3V0Zi04JzpjYXNlICdhc2NpaSc6Y2FzZSAnYmluYXJ5JzpjYXNlICdiYXNlNjQnOmNhc2UgJ3VjczInOmNhc2UgJ3Vjcy0yJzpjYXNlICd1dGYxNmxlJzpjYXNlICd1dGYtMTZsZSc6Y2FzZSAncmF3JzpcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIF9ub3JtYWxpemVFbmNvZGluZyhlbmMpIHtcbiAgaWYgKCFlbmMpIHJldHVybiAndXRmOCc7XG4gIHZhciByZXRyaWVkO1xuICB3aGlsZSAodHJ1ZSkge1xuICAgIHN3aXRjaCAoZW5jKSB7XG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgICAgcmV0dXJuICd1dGY4JztcbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiAndXRmMTZsZSc7XG4gICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuICdsYXRpbjEnO1xuICAgICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgIHJldHVybiBlbmM7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAocmV0cmllZCkgcmV0dXJuOyAvLyB1bmRlZmluZWRcbiAgICAgICAgZW5jID0gKCcnICsgZW5jKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICByZXRyaWVkID0gdHJ1ZTtcbiAgICB9XG4gIH1cbn07XG5cbi8vIERvIG5vdCBjYWNoZSBgQnVmZmVyLmlzRW5jb2RpbmdgIHdoZW4gY2hlY2tpbmcgZW5jb2RpbmcgbmFtZXMgYXMgc29tZVxuLy8gbW9kdWxlcyBtb25rZXktcGF0Y2ggaXQgdG8gc3VwcG9ydCBhZGRpdGlvbmFsIGVuY29kaW5nc1xuZnVuY3Rpb24gbm9ybWFsaXplRW5jb2RpbmcoZW5jKSB7XG4gIHZhciBuZW5jID0gX25vcm1hbGl6ZUVuY29kaW5nKGVuYyk7XG4gIGlmICh0eXBlb2YgbmVuYyAhPT0gJ3N0cmluZycgJiYgKEJ1ZmZlci5pc0VuY29kaW5nID09PSBpc0VuY29kaW5nIHx8ICFpc0VuY29kaW5nKGVuYykpKSB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmMpO1xuICByZXR1cm4gbmVuYyB8fCBlbmM7XG59XG5cbi8vIFN0cmluZ0RlY29kZXIgcHJvdmlkZXMgYW4gaW50ZXJmYWNlIGZvciBlZmZpY2llbnRseSBzcGxpdHRpbmcgYSBzZXJpZXMgb2Zcbi8vIGJ1ZmZlcnMgaW50byBhIHNlcmllcyBvZiBKUyBzdHJpbmdzIHdpdGhvdXQgYnJlYWtpbmcgYXBhcnQgbXVsdGktYnl0ZVxuLy8gY2hhcmFjdGVycy5cbmV4cG9ydHMuU3RyaW5nRGVjb2RlciA9IFN0cmluZ0RlY29kZXI7XG5mdW5jdGlvbiBTdHJpbmdEZWNvZGVyKGVuY29kaW5nKSB7XG4gIHRoaXMuZW5jb2RpbmcgPSBub3JtYWxpemVFbmNvZGluZyhlbmNvZGluZyk7XG4gIHZhciBuYjtcbiAgc3dpdGNoICh0aGlzLmVuY29kaW5nKSB7XG4gICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICB0aGlzLnRleHQgPSB1dGYxNlRleHQ7XG4gICAgICB0aGlzLmVuZCA9IHV0ZjE2RW5kO1xuICAgICAgbmIgPSA0O1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAndXRmOCc6XG4gICAgICB0aGlzLmZpbGxMYXN0ID0gdXRmOEZpbGxMYXN0O1xuICAgICAgbmIgPSA0O1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgIHRoaXMudGV4dCA9IGJhc2U2NFRleHQ7XG4gICAgICB0aGlzLmVuZCA9IGJhc2U2NEVuZDtcbiAgICAgIG5iID0gMztcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICB0aGlzLndyaXRlID0gc2ltcGxlV3JpdGU7XG4gICAgICB0aGlzLmVuZCA9IHNpbXBsZUVuZDtcbiAgICAgIHJldHVybjtcbiAgfVxuICB0aGlzLmxhc3ROZWVkID0gMDtcbiAgdGhpcy5sYXN0VG90YWwgPSAwO1xuICB0aGlzLmxhc3RDaGFyID0gQnVmZmVyLmFsbG9jVW5zYWZlKG5iKTtcbn1cblxuU3RyaW5nRGVjb2Rlci5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbiAoYnVmKSB7XG4gIGlmIChidWYubGVuZ3RoID09PSAwKSByZXR1cm4gJyc7XG4gIHZhciByO1xuICB2YXIgaTtcbiAgaWYgKHRoaXMubGFzdE5lZWQpIHtcbiAgICByID0gdGhpcy5maWxsTGFzdChidWYpO1xuICAgIGlmIChyID09PSB1bmRlZmluZWQpIHJldHVybiAnJztcbiAgICBpID0gdGhpcy5sYXN0TmVlZDtcbiAgICB0aGlzLmxhc3ROZWVkID0gMDtcbiAgfSBlbHNlIHtcbiAgICBpID0gMDtcbiAgfVxuICBpZiAoaSA8IGJ1Zi5sZW5ndGgpIHJldHVybiByID8gciArIHRoaXMudGV4dChidWYsIGkpIDogdGhpcy50ZXh0KGJ1ZiwgaSk7XG4gIHJldHVybiByIHx8ICcnO1xufTtcblxuU3RyaW5nRGVjb2Rlci5wcm90b3R5cGUuZW5kID0gdXRmOEVuZDtcblxuLy8gUmV0dXJucyBvbmx5IGNvbXBsZXRlIGNoYXJhY3RlcnMgaW4gYSBCdWZmZXJcblN0cmluZ0RlY29kZXIucHJvdG90eXBlLnRleHQgPSB1dGY4VGV4dDtcblxuLy8gQXR0ZW1wdHMgdG8gY29tcGxldGUgYSBwYXJ0aWFsIG5vbi1VVEYtOCBjaGFyYWN0ZXIgdXNpbmcgYnl0ZXMgZnJvbSBhIEJ1ZmZlclxuU3RyaW5nRGVjb2Rlci5wcm90b3R5cGUuZmlsbExhc3QgPSBmdW5jdGlvbiAoYnVmKSB7XG4gIGlmICh0aGlzLmxhc3ROZWVkIDw9IGJ1Zi5sZW5ndGgpIHtcbiAgICBidWYuY29weSh0aGlzLmxhc3RDaGFyLCB0aGlzLmxhc3RUb3RhbCAtIHRoaXMubGFzdE5lZWQsIDAsIHRoaXMubGFzdE5lZWQpO1xuICAgIHJldHVybiB0aGlzLmxhc3RDaGFyLnRvU3RyaW5nKHRoaXMuZW5jb2RpbmcsIDAsIHRoaXMubGFzdFRvdGFsKTtcbiAgfVxuICBidWYuY29weSh0aGlzLmxhc3RDaGFyLCB0aGlzLmxhc3RUb3RhbCAtIHRoaXMubGFzdE5lZWQsIDAsIGJ1Zi5sZW5ndGgpO1xuICB0aGlzLmxhc3ROZWVkIC09IGJ1Zi5sZW5ndGg7XG59O1xuXG4vLyBDaGVja3MgdGhlIHR5cGUgb2YgYSBVVEYtOCBieXRlLCB3aGV0aGVyIGl0J3MgQVNDSUksIGEgbGVhZGluZyBieXRlLCBvciBhXG4vLyBjb250aW51YXRpb24gYnl0ZS4gSWYgYW4gaW52YWxpZCBieXRlIGlzIGRldGVjdGVkLCAtMiBpcyByZXR1cm5lZC5cbmZ1bmN0aW9uIHV0ZjhDaGVja0J5dGUoYnl0ZSkge1xuICBpZiAoYnl0ZSA8PSAweDdGKSByZXR1cm4gMDtlbHNlIGlmIChieXRlID4+IDUgPT09IDB4MDYpIHJldHVybiAyO2Vsc2UgaWYgKGJ5dGUgPj4gNCA9PT0gMHgwRSkgcmV0dXJuIDM7ZWxzZSBpZiAoYnl0ZSA+PiAzID09PSAweDFFKSByZXR1cm4gNDtcbiAgcmV0dXJuIGJ5dGUgPj4gNiA9PT0gMHgwMiA/IC0xIDogLTI7XG59XG5cbi8vIENoZWNrcyBhdCBtb3N0IDMgYnl0ZXMgYXQgdGhlIGVuZCBvZiBhIEJ1ZmZlciBpbiBvcmRlciB0byBkZXRlY3QgYW5cbi8vIGluY29tcGxldGUgbXVsdGktYnl0ZSBVVEYtOCBjaGFyYWN0ZXIuIFRoZSB0b3RhbCBudW1iZXIgb2YgYnl0ZXMgKDIsIDMsIG9yIDQpXG4vLyBuZWVkZWQgdG8gY29tcGxldGUgdGhlIFVURi04IGNoYXJhY3RlciAoaWYgYXBwbGljYWJsZSkgYXJlIHJldHVybmVkLlxuZnVuY3Rpb24gdXRmOENoZWNrSW5jb21wbGV0ZShzZWxmLCBidWYsIGkpIHtcbiAgdmFyIGogPSBidWYubGVuZ3RoIC0gMTtcbiAgaWYgKGogPCBpKSByZXR1cm4gMDtcbiAgdmFyIG5iID0gdXRmOENoZWNrQnl0ZShidWZbal0pO1xuICBpZiAobmIgPj0gMCkge1xuICAgIGlmIChuYiA+IDApIHNlbGYubGFzdE5lZWQgPSBuYiAtIDE7XG4gICAgcmV0dXJuIG5iO1xuICB9XG4gIGlmICgtLWogPCBpIHx8IG5iID09PSAtMikgcmV0dXJuIDA7XG4gIG5iID0gdXRmOENoZWNrQnl0ZShidWZbal0pO1xuICBpZiAobmIgPj0gMCkge1xuICAgIGlmIChuYiA+IDApIHNlbGYubGFzdE5lZWQgPSBuYiAtIDI7XG4gICAgcmV0dXJuIG5iO1xuICB9XG4gIGlmICgtLWogPCBpIHx8IG5iID09PSAtMikgcmV0dXJuIDA7XG4gIG5iID0gdXRmOENoZWNrQnl0ZShidWZbal0pO1xuICBpZiAobmIgPj0gMCkge1xuICAgIGlmIChuYiA+IDApIHtcbiAgICAgIGlmIChuYiA9PT0gMikgbmIgPSAwO2Vsc2Ugc2VsZi5sYXN0TmVlZCA9IG5iIC0gMztcbiAgICB9XG4gICAgcmV0dXJuIG5iO1xuICB9XG4gIHJldHVybiAwO1xufVxuXG4vLyBWYWxpZGF0ZXMgYXMgbWFueSBjb250aW51YXRpb24gYnl0ZXMgZm9yIGEgbXVsdGktYnl0ZSBVVEYtOCBjaGFyYWN0ZXIgYXNcbi8vIG5lZWRlZCBvciBhcmUgYXZhaWxhYmxlLiBJZiB3ZSBzZWUgYSBub24tY29udGludWF0aW9uIGJ5dGUgd2hlcmUgd2UgZXhwZWN0XG4vLyBvbmUsIHdlIFwicmVwbGFjZVwiIHRoZSB2YWxpZGF0ZWQgY29udGludWF0aW9uIGJ5dGVzIHdlJ3ZlIHNlZW4gc28gZmFyIHdpdGhcbi8vIGEgc2luZ2xlIFVURi04IHJlcGxhY2VtZW50IGNoYXJhY3RlciAoJ1xcdWZmZmQnKSwgdG8gbWF0Y2ggdjgncyBVVEYtOCBkZWNvZGluZ1xuLy8gYmVoYXZpb3IuIFRoZSBjb250aW51YXRpb24gYnl0ZSBjaGVjayBpcyBpbmNsdWRlZCB0aHJlZSB0aW1lcyBpbiB0aGUgY2FzZVxuLy8gd2hlcmUgYWxsIG9mIHRoZSBjb250aW51YXRpb24gYnl0ZXMgZm9yIGEgY2hhcmFjdGVyIGV4aXN0IGluIHRoZSBzYW1lIGJ1ZmZlci5cbi8vIEl0IGlzIGFsc28gZG9uZSB0aGlzIHdheSBhcyBhIHNsaWdodCBwZXJmb3JtYW5jZSBpbmNyZWFzZSBpbnN0ZWFkIG9mIHVzaW5nIGFcbi8vIGxvb3AuXG5mdW5jdGlvbiB1dGY4Q2hlY2tFeHRyYUJ5dGVzKHNlbGYsIGJ1ZiwgcCkge1xuICBpZiAoKGJ1ZlswXSAmIDB4QzApICE9PSAweDgwKSB7XG4gICAgc2VsZi5sYXN0TmVlZCA9IDA7XG4gICAgcmV0dXJuICdcXHVmZmZkJztcbiAgfVxuICBpZiAoc2VsZi5sYXN0TmVlZCA+IDEgJiYgYnVmLmxlbmd0aCA+IDEpIHtcbiAgICBpZiAoKGJ1ZlsxXSAmIDB4QzApICE9PSAweDgwKSB7XG4gICAgICBzZWxmLmxhc3ROZWVkID0gMTtcbiAgICAgIHJldHVybiAnXFx1ZmZmZCc7XG4gICAgfVxuICAgIGlmIChzZWxmLmxhc3ROZWVkID4gMiAmJiBidWYubGVuZ3RoID4gMikge1xuICAgICAgaWYgKChidWZbMl0gJiAweEMwKSAhPT0gMHg4MCkge1xuICAgICAgICBzZWxmLmxhc3ROZWVkID0gMjtcbiAgICAgICAgcmV0dXJuICdcXHVmZmZkJztcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLy8gQXR0ZW1wdHMgdG8gY29tcGxldGUgYSBtdWx0aS1ieXRlIFVURi04IGNoYXJhY3RlciB1c2luZyBieXRlcyBmcm9tIGEgQnVmZmVyLlxuZnVuY3Rpb24gdXRmOEZpbGxMYXN0KGJ1Zikge1xuICB2YXIgcCA9IHRoaXMubGFzdFRvdGFsIC0gdGhpcy5sYXN0TmVlZDtcbiAgdmFyIHIgPSB1dGY4Q2hlY2tFeHRyYUJ5dGVzKHRoaXMsIGJ1ZiwgcCk7XG4gIGlmIChyICE9PSB1bmRlZmluZWQpIHJldHVybiByO1xuICBpZiAodGhpcy5sYXN0TmVlZCA8PSBidWYubGVuZ3RoKSB7XG4gICAgYnVmLmNvcHkodGhpcy5sYXN0Q2hhciwgcCwgMCwgdGhpcy5sYXN0TmVlZCk7XG4gICAgcmV0dXJuIHRoaXMubGFzdENoYXIudG9TdHJpbmcodGhpcy5lbmNvZGluZywgMCwgdGhpcy5sYXN0VG90YWwpO1xuICB9XG4gIGJ1Zi5jb3B5KHRoaXMubGFzdENoYXIsIHAsIDAsIGJ1Zi5sZW5ndGgpO1xuICB0aGlzLmxhc3ROZWVkIC09IGJ1Zi5sZW5ndGg7XG59XG5cbi8vIFJldHVybnMgYWxsIGNvbXBsZXRlIFVURi04IGNoYXJhY3RlcnMgaW4gYSBCdWZmZXIuIElmIHRoZSBCdWZmZXIgZW5kZWQgb24gYVxuLy8gcGFydGlhbCBjaGFyYWN0ZXIsIHRoZSBjaGFyYWN0ZXIncyBieXRlcyBhcmUgYnVmZmVyZWQgdW50aWwgdGhlIHJlcXVpcmVkXG4vLyBudW1iZXIgb2YgYnl0ZXMgYXJlIGF2YWlsYWJsZS5cbmZ1bmN0aW9uIHV0ZjhUZXh0KGJ1ZiwgaSkge1xuICB2YXIgdG90YWwgPSB1dGY4Q2hlY2tJbmNvbXBsZXRlKHRoaXMsIGJ1ZiwgaSk7XG4gIGlmICghdGhpcy5sYXN0TmVlZCkgcmV0dXJuIGJ1Zi50b1N0cmluZygndXRmOCcsIGkpO1xuICB0aGlzLmxhc3RUb3RhbCA9IHRvdGFsO1xuICB2YXIgZW5kID0gYnVmLmxlbmd0aCAtICh0b3RhbCAtIHRoaXMubGFzdE5lZWQpO1xuICBidWYuY29weSh0aGlzLmxhc3RDaGFyLCAwLCBlbmQpO1xuICByZXR1cm4gYnVmLnRvU3RyaW5nKCd1dGY4JywgaSwgZW5kKTtcbn1cblxuLy8gRm9yIFVURi04LCBhIHJlcGxhY2VtZW50IGNoYXJhY3RlciBpcyBhZGRlZCB3aGVuIGVuZGluZyBvbiBhIHBhcnRpYWxcbi8vIGNoYXJhY3Rlci5cbmZ1bmN0aW9uIHV0ZjhFbmQoYnVmKSB7XG4gIHZhciByID0gYnVmICYmIGJ1Zi5sZW5ndGggPyB0aGlzLndyaXRlKGJ1ZikgOiAnJztcbiAgaWYgKHRoaXMubGFzdE5lZWQpIHJldHVybiByICsgJ1xcdWZmZmQnO1xuICByZXR1cm4gcjtcbn1cblxuLy8gVVRGLTE2TEUgdHlwaWNhbGx5IG5lZWRzIHR3byBieXRlcyBwZXIgY2hhcmFjdGVyLCBidXQgZXZlbiBpZiB3ZSBoYXZlIGFuIGV2ZW5cbi8vIG51bWJlciBvZiBieXRlcyBhdmFpbGFibGUsIHdlIG5lZWQgdG8gY2hlY2sgaWYgd2UgZW5kIG9uIGEgbGVhZGluZy9oaWdoXG4vLyBzdXJyb2dhdGUuIEluIHRoYXQgY2FzZSwgd2UgbmVlZCB0byB3YWl0IGZvciB0aGUgbmV4dCB0d28gYnl0ZXMgaW4gb3JkZXIgdG9cbi8vIGRlY29kZSB0aGUgbGFzdCBjaGFyYWN0ZXIgcHJvcGVybHkuXG5mdW5jdGlvbiB1dGYxNlRleHQoYnVmLCBpKSB7XG4gIGlmICgoYnVmLmxlbmd0aCAtIGkpICUgMiA9PT0gMCkge1xuICAgIHZhciByID0gYnVmLnRvU3RyaW5nKCd1dGYxNmxlJywgaSk7XG4gICAgaWYgKHIpIHtcbiAgICAgIHZhciBjID0gci5jaGFyQ29kZUF0KHIubGVuZ3RoIC0gMSk7XG4gICAgICBpZiAoYyA+PSAweEQ4MDAgJiYgYyA8PSAweERCRkYpIHtcbiAgICAgICAgdGhpcy5sYXN0TmVlZCA9IDI7XG4gICAgICAgIHRoaXMubGFzdFRvdGFsID0gNDtcbiAgICAgICAgdGhpcy5sYXN0Q2hhclswXSA9IGJ1ZltidWYubGVuZ3RoIC0gMl07XG4gICAgICAgIHRoaXMubGFzdENoYXJbMV0gPSBidWZbYnVmLmxlbmd0aCAtIDFdO1xuICAgICAgICByZXR1cm4gci5zbGljZSgwLCAtMSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByO1xuICB9XG4gIHRoaXMubGFzdE5lZWQgPSAxO1xuICB0aGlzLmxhc3RUb3RhbCA9IDI7XG4gIHRoaXMubGFzdENoYXJbMF0gPSBidWZbYnVmLmxlbmd0aCAtIDFdO1xuICByZXR1cm4gYnVmLnRvU3RyaW5nKCd1dGYxNmxlJywgaSwgYnVmLmxlbmd0aCAtIDEpO1xufVxuXG4vLyBGb3IgVVRGLTE2TEUgd2UgZG8gbm90IGV4cGxpY2l0bHkgYXBwZW5kIHNwZWNpYWwgcmVwbGFjZW1lbnQgY2hhcmFjdGVycyBpZiB3ZVxuLy8gZW5kIG9uIGEgcGFydGlhbCBjaGFyYWN0ZXIsIHdlIHNpbXBseSBsZXQgdjggaGFuZGxlIHRoYXQuXG5mdW5jdGlvbiB1dGYxNkVuZChidWYpIHtcbiAgdmFyIHIgPSBidWYgJiYgYnVmLmxlbmd0aCA/IHRoaXMud3JpdGUoYnVmKSA6ICcnO1xuICBpZiAodGhpcy5sYXN0TmVlZCkge1xuICAgIHZhciBlbmQgPSB0aGlzLmxhc3RUb3RhbCAtIHRoaXMubGFzdE5lZWQ7XG4gICAgcmV0dXJuIHIgKyB0aGlzLmxhc3RDaGFyLnRvU3RyaW5nKCd1dGYxNmxlJywgMCwgZW5kKTtcbiAgfVxuICByZXR1cm4gcjtcbn1cblxuZnVuY3Rpb24gYmFzZTY0VGV4dChidWYsIGkpIHtcbiAgdmFyIG4gPSAoYnVmLmxlbmd0aCAtIGkpICUgMztcbiAgaWYgKG4gPT09IDApIHJldHVybiBidWYudG9TdHJpbmcoJ2Jhc2U2NCcsIGkpO1xuICB0aGlzLmxhc3ROZWVkID0gMyAtIG47XG4gIHRoaXMubGFzdFRvdGFsID0gMztcbiAgaWYgKG4gPT09IDEpIHtcbiAgICB0aGlzLmxhc3RDaGFyWzBdID0gYnVmW2J1Zi5sZW5ndGggLSAxXTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmxhc3RDaGFyWzBdID0gYnVmW2J1Zi5sZW5ndGggLSAyXTtcbiAgICB0aGlzLmxhc3RDaGFyWzFdID0gYnVmW2J1Zi5sZW5ndGggLSAxXTtcbiAgfVxuICByZXR1cm4gYnVmLnRvU3RyaW5nKCdiYXNlNjQnLCBpLCBidWYubGVuZ3RoIC0gbik7XG59XG5cbmZ1bmN0aW9uIGJhc2U2NEVuZChidWYpIHtcbiAgdmFyIHIgPSBidWYgJiYgYnVmLmxlbmd0aCA/IHRoaXMud3JpdGUoYnVmKSA6ICcnO1xuICBpZiAodGhpcy5sYXN0TmVlZCkgcmV0dXJuIHIgKyB0aGlzLmxhc3RDaGFyLnRvU3RyaW5nKCdiYXNlNjQnLCAwLCAzIC0gdGhpcy5sYXN0TmVlZCk7XG4gIHJldHVybiByO1xufVxuXG4vLyBQYXNzIGJ5dGVzIG9uIHRocm91Z2ggZm9yIHNpbmdsZS1ieXRlIGVuY29kaW5ncyAoZS5nLiBhc2NpaSwgbGF0aW4xLCBoZXgpXG5mdW5jdGlvbiBzaW1wbGVXcml0ZShidWYpIHtcbiAgcmV0dXJuIGJ1Zi50b1N0cmluZyh0aGlzLmVuY29kaW5nKTtcbn1cblxuZnVuY3Rpb24gc2ltcGxlRW5kKGJ1Zikge1xuICByZXR1cm4gYnVmICYmIGJ1Zi5sZW5ndGggPyB0aGlzLndyaXRlKGJ1ZikgOiAnJztcbn0iLCIndXNlIHN0cmljdCdcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbnZhciBIYXNoQmFzZSA9IHJlcXVpcmUoJ2hhc2gtYmFzZScpXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcblxudmFyIEFSUkFZMTYgPSBuZXcgQXJyYXkoMTYpXG5cbmZ1bmN0aW9uIE1ENSAoKSB7XG4gIEhhc2hCYXNlLmNhbGwodGhpcywgNjQpXG5cbiAgLy8gc3RhdGVcbiAgdGhpcy5fYSA9IDB4Njc0NTIzMDFcbiAgdGhpcy5fYiA9IDB4ZWZjZGFiODlcbiAgdGhpcy5fYyA9IDB4OThiYWRjZmVcbiAgdGhpcy5fZCA9IDB4MTAzMjU0NzZcbn1cblxuaW5oZXJpdHMoTUQ1LCBIYXNoQmFzZSlcblxuTUQ1LnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICB2YXIgTSA9IEFSUkFZMTZcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCAxNjsgKytpKSBNW2ldID0gdGhpcy5fYmxvY2sucmVhZEludDMyTEUoaSAqIDQpXG5cbiAgdmFyIGEgPSB0aGlzLl9hXG4gIHZhciBiID0gdGhpcy5fYlxuICB2YXIgYyA9IHRoaXMuX2NcbiAgdmFyIGQgPSB0aGlzLl9kXG5cbiAgYSA9IGZuRihhLCBiLCBjLCBkLCBNWzBdLCAweGQ3NmFhNDc4LCA3KVxuICBkID0gZm5GKGQsIGEsIGIsIGMsIE1bMV0sIDB4ZThjN2I3NTYsIDEyKVxuICBjID0gZm5GKGMsIGQsIGEsIGIsIE1bMl0sIDB4MjQyMDcwZGIsIDE3KVxuICBiID0gZm5GKGIsIGMsIGQsIGEsIE1bM10sIDB4YzFiZGNlZWUsIDIyKVxuICBhID0gZm5GKGEsIGIsIGMsIGQsIE1bNF0sIDB4ZjU3YzBmYWYsIDcpXG4gIGQgPSBmbkYoZCwgYSwgYiwgYywgTVs1XSwgMHg0Nzg3YzYyYSwgMTIpXG4gIGMgPSBmbkYoYywgZCwgYSwgYiwgTVs2XSwgMHhhODMwNDYxMywgMTcpXG4gIGIgPSBmbkYoYiwgYywgZCwgYSwgTVs3XSwgMHhmZDQ2OTUwMSwgMjIpXG4gIGEgPSBmbkYoYSwgYiwgYywgZCwgTVs4XSwgMHg2OTgwOThkOCwgNylcbiAgZCA9IGZuRihkLCBhLCBiLCBjLCBNWzldLCAweDhiNDRmN2FmLCAxMilcbiAgYyA9IGZuRihjLCBkLCBhLCBiLCBNWzEwXSwgMHhmZmZmNWJiMSwgMTcpXG4gIGIgPSBmbkYoYiwgYywgZCwgYSwgTVsxMV0sIDB4ODk1Y2Q3YmUsIDIyKVxuICBhID0gZm5GKGEsIGIsIGMsIGQsIE1bMTJdLCAweDZiOTAxMTIyLCA3KVxuICBkID0gZm5GKGQsIGEsIGIsIGMsIE1bMTNdLCAweGZkOTg3MTkzLCAxMilcbiAgYyA9IGZuRihjLCBkLCBhLCBiLCBNWzE0XSwgMHhhNjc5NDM4ZSwgMTcpXG4gIGIgPSBmbkYoYiwgYywgZCwgYSwgTVsxNV0sIDB4NDliNDA4MjEsIDIyKVxuXG4gIGEgPSBmbkcoYSwgYiwgYywgZCwgTVsxXSwgMHhmNjFlMjU2MiwgNSlcbiAgZCA9IGZuRyhkLCBhLCBiLCBjLCBNWzZdLCAweGMwNDBiMzQwLCA5KVxuICBjID0gZm5HKGMsIGQsIGEsIGIsIE1bMTFdLCAweDI2NWU1YTUxLCAxNClcbiAgYiA9IGZuRyhiLCBjLCBkLCBhLCBNWzBdLCAweGU5YjZjN2FhLCAyMClcbiAgYSA9IGZuRyhhLCBiLCBjLCBkLCBNWzVdLCAweGQ2MmYxMDVkLCA1KVxuICBkID0gZm5HKGQsIGEsIGIsIGMsIE1bMTBdLCAweDAyNDQxNDUzLCA5KVxuICBjID0gZm5HKGMsIGQsIGEsIGIsIE1bMTVdLCAweGQ4YTFlNjgxLCAxNClcbiAgYiA9IGZuRyhiLCBjLCBkLCBhLCBNWzRdLCAweGU3ZDNmYmM4LCAyMClcbiAgYSA9IGZuRyhhLCBiLCBjLCBkLCBNWzldLCAweDIxZTFjZGU2LCA1KVxuICBkID0gZm5HKGQsIGEsIGIsIGMsIE1bMTRdLCAweGMzMzcwN2Q2LCA5KVxuICBjID0gZm5HKGMsIGQsIGEsIGIsIE1bM10sIDB4ZjRkNTBkODcsIDE0KVxuICBiID0gZm5HKGIsIGMsIGQsIGEsIE1bOF0sIDB4NDU1YTE0ZWQsIDIwKVxuICBhID0gZm5HKGEsIGIsIGMsIGQsIE1bMTNdLCAweGE5ZTNlOTA1LCA1KVxuICBkID0gZm5HKGQsIGEsIGIsIGMsIE1bMl0sIDB4ZmNlZmEzZjgsIDkpXG4gIGMgPSBmbkcoYywgZCwgYSwgYiwgTVs3XSwgMHg2NzZmMDJkOSwgMTQpXG4gIGIgPSBmbkcoYiwgYywgZCwgYSwgTVsxMl0sIDB4OGQyYTRjOGEsIDIwKVxuXG4gIGEgPSBmbkgoYSwgYiwgYywgZCwgTVs1XSwgMHhmZmZhMzk0MiwgNClcbiAgZCA9IGZuSChkLCBhLCBiLCBjLCBNWzhdLCAweDg3NzFmNjgxLCAxMSlcbiAgYyA9IGZuSChjLCBkLCBhLCBiLCBNWzExXSwgMHg2ZDlkNjEyMiwgMTYpXG4gIGIgPSBmbkgoYiwgYywgZCwgYSwgTVsxNF0sIDB4ZmRlNTM4MGMsIDIzKVxuICBhID0gZm5IKGEsIGIsIGMsIGQsIE1bMV0sIDB4YTRiZWVhNDQsIDQpXG4gIGQgPSBmbkgoZCwgYSwgYiwgYywgTVs0XSwgMHg0YmRlY2ZhOSwgMTEpXG4gIGMgPSBmbkgoYywgZCwgYSwgYiwgTVs3XSwgMHhmNmJiNGI2MCwgMTYpXG4gIGIgPSBmbkgoYiwgYywgZCwgYSwgTVsxMF0sIDB4YmViZmJjNzAsIDIzKVxuICBhID0gZm5IKGEsIGIsIGMsIGQsIE1bMTNdLCAweDI4OWI3ZWM2LCA0KVxuICBkID0gZm5IKGQsIGEsIGIsIGMsIE1bMF0sIDB4ZWFhMTI3ZmEsIDExKVxuICBjID0gZm5IKGMsIGQsIGEsIGIsIE1bM10sIDB4ZDRlZjMwODUsIDE2KVxuICBiID0gZm5IKGIsIGMsIGQsIGEsIE1bNl0sIDB4MDQ4ODFkMDUsIDIzKVxuICBhID0gZm5IKGEsIGIsIGMsIGQsIE1bOV0sIDB4ZDlkNGQwMzksIDQpXG4gIGQgPSBmbkgoZCwgYSwgYiwgYywgTVsxMl0sIDB4ZTZkYjk5ZTUsIDExKVxuICBjID0gZm5IKGMsIGQsIGEsIGIsIE1bMTVdLCAweDFmYTI3Y2Y4LCAxNilcbiAgYiA9IGZuSChiLCBjLCBkLCBhLCBNWzJdLCAweGM0YWM1NjY1LCAyMylcblxuICBhID0gZm5JKGEsIGIsIGMsIGQsIE1bMF0sIDB4ZjQyOTIyNDQsIDYpXG4gIGQgPSBmbkkoZCwgYSwgYiwgYywgTVs3XSwgMHg0MzJhZmY5NywgMTApXG4gIGMgPSBmbkkoYywgZCwgYSwgYiwgTVsxNF0sIDB4YWI5NDIzYTcsIDE1KVxuICBiID0gZm5JKGIsIGMsIGQsIGEsIE1bNV0sIDB4ZmM5M2EwMzksIDIxKVxuICBhID0gZm5JKGEsIGIsIGMsIGQsIE1bMTJdLCAweDY1NWI1OWMzLCA2KVxuICBkID0gZm5JKGQsIGEsIGIsIGMsIE1bM10sIDB4OGYwY2NjOTIsIDEwKVxuICBjID0gZm5JKGMsIGQsIGEsIGIsIE1bMTBdLCAweGZmZWZmNDdkLCAxNSlcbiAgYiA9IGZuSShiLCBjLCBkLCBhLCBNWzFdLCAweDg1ODQ1ZGQxLCAyMSlcbiAgYSA9IGZuSShhLCBiLCBjLCBkLCBNWzhdLCAweDZmYTg3ZTRmLCA2KVxuICBkID0gZm5JKGQsIGEsIGIsIGMsIE1bMTVdLCAweGZlMmNlNmUwLCAxMClcbiAgYyA9IGZuSShjLCBkLCBhLCBiLCBNWzZdLCAweGEzMDE0MzE0LCAxNSlcbiAgYiA9IGZuSShiLCBjLCBkLCBhLCBNWzEzXSwgMHg0ZTA4MTFhMSwgMjEpXG4gIGEgPSBmbkkoYSwgYiwgYywgZCwgTVs0XSwgMHhmNzUzN2U4MiwgNilcbiAgZCA9IGZuSShkLCBhLCBiLCBjLCBNWzExXSwgMHhiZDNhZjIzNSwgMTApXG4gIGMgPSBmbkkoYywgZCwgYSwgYiwgTVsyXSwgMHgyYWQ3ZDJiYiwgMTUpXG4gIGIgPSBmbkkoYiwgYywgZCwgYSwgTVs5XSwgMHhlYjg2ZDM5MSwgMjEpXG5cbiAgdGhpcy5fYSA9ICh0aGlzLl9hICsgYSkgfCAwXG4gIHRoaXMuX2IgPSAodGhpcy5fYiArIGIpIHwgMFxuICB0aGlzLl9jID0gKHRoaXMuX2MgKyBjKSB8IDBcbiAgdGhpcy5fZCA9ICh0aGlzLl9kICsgZCkgfCAwXG59XG5cbk1ENS5wcm90b3R5cGUuX2RpZ2VzdCA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gY3JlYXRlIHBhZGRpbmcgYW5kIGhhbmRsZSBibG9ja3NcbiAgdGhpcy5fYmxvY2tbdGhpcy5fYmxvY2tPZmZzZXQrK10gPSAweDgwXG4gIGlmICh0aGlzLl9ibG9ja09mZnNldCA+IDU2KSB7XG4gICAgdGhpcy5fYmxvY2suZmlsbCgwLCB0aGlzLl9ibG9ja09mZnNldCwgNjQpXG4gICAgdGhpcy5fdXBkYXRlKClcbiAgICB0aGlzLl9ibG9ja09mZnNldCA9IDBcbiAgfVxuXG4gIHRoaXMuX2Jsb2NrLmZpbGwoMCwgdGhpcy5fYmxvY2tPZmZzZXQsIDU2KVxuICB0aGlzLl9ibG9jay53cml0ZVVJbnQzMkxFKHRoaXMuX2xlbmd0aFswXSwgNTYpXG4gIHRoaXMuX2Jsb2NrLndyaXRlVUludDMyTEUodGhpcy5fbGVuZ3RoWzFdLCA2MClcbiAgdGhpcy5fdXBkYXRlKClcblxuICAvLyBwcm9kdWNlIHJlc3VsdFxuICB2YXIgYnVmZmVyID0gQnVmZmVyLmFsbG9jVW5zYWZlKDE2KVxuICBidWZmZXIud3JpdGVJbnQzMkxFKHRoaXMuX2EsIDApXG4gIGJ1ZmZlci53cml0ZUludDMyTEUodGhpcy5fYiwgNClcbiAgYnVmZmVyLndyaXRlSW50MzJMRSh0aGlzLl9jLCA4KVxuICBidWZmZXIud3JpdGVJbnQzMkxFKHRoaXMuX2QsIDEyKVxuICByZXR1cm4gYnVmZmVyXG59XG5cbmZ1bmN0aW9uIHJvdGwgKHgsIG4pIHtcbiAgcmV0dXJuICh4IDw8IG4pIHwgKHggPj4+ICgzMiAtIG4pKVxufVxuXG5mdW5jdGlvbiBmbkYgKGEsIGIsIGMsIGQsIG0sIGssIHMpIHtcbiAgcmV0dXJuIChyb3RsKChhICsgKChiICYgYykgfCAoKH5iKSAmIGQpKSArIG0gKyBrKSB8IDAsIHMpICsgYikgfCAwXG59XG5cbmZ1bmN0aW9uIGZuRyAoYSwgYiwgYywgZCwgbSwgaywgcykge1xuICByZXR1cm4gKHJvdGwoKGEgKyAoKGIgJiBkKSB8IChjICYgKH5kKSkpICsgbSArIGspIHwgMCwgcykgKyBiKSB8IDBcbn1cblxuZnVuY3Rpb24gZm5IIChhLCBiLCBjLCBkLCBtLCBrLCBzKSB7XG4gIHJldHVybiAocm90bCgoYSArIChiIF4gYyBeIGQpICsgbSArIGspIHwgMCwgcykgKyBiKSB8IDBcbn1cblxuZnVuY3Rpb24gZm5JIChhLCBiLCBjLCBkLCBtLCBrLCBzKSB7XG4gIHJldHVybiAocm90bCgoYSArICgoYyBeIChiIHwgKH5kKSkpKSArIG0gKyBrKSB8IDAsIHMpICsgYikgfCAwXG59XG5cbm1vZHVsZS5leHBvcnRzID0gTUQ1XG4iLCIndXNlIHN0cmljdCdcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdidWZmZXInKS5CdWZmZXJcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbnZhciBIYXNoQmFzZSA9IHJlcXVpcmUoJ2hhc2gtYmFzZScpXG5cbnZhciBBUlJBWTE2ID0gbmV3IEFycmF5KDE2KVxuXG52YXIgemwgPSBbXG4gIDAsIDEsIDIsIDMsIDQsIDUsIDYsIDcsIDgsIDksIDEwLCAxMSwgMTIsIDEzLCAxNCwgMTUsXG4gIDcsIDQsIDEzLCAxLCAxMCwgNiwgMTUsIDMsIDEyLCAwLCA5LCA1LCAyLCAxNCwgMTEsIDgsXG4gIDMsIDEwLCAxNCwgNCwgOSwgMTUsIDgsIDEsIDIsIDcsIDAsIDYsIDEzLCAxMSwgNSwgMTIsXG4gIDEsIDksIDExLCAxMCwgMCwgOCwgMTIsIDQsIDEzLCAzLCA3LCAxNSwgMTQsIDUsIDYsIDIsXG4gIDQsIDAsIDUsIDksIDcsIDEyLCAyLCAxMCwgMTQsIDEsIDMsIDgsIDExLCA2LCAxNSwgMTNcbl1cblxudmFyIHpyID0gW1xuICA1LCAxNCwgNywgMCwgOSwgMiwgMTEsIDQsIDEzLCA2LCAxNSwgOCwgMSwgMTAsIDMsIDEyLFxuICA2LCAxMSwgMywgNywgMCwgMTMsIDUsIDEwLCAxNCwgMTUsIDgsIDEyLCA0LCA5LCAxLCAyLFxuICAxNSwgNSwgMSwgMywgNywgMTQsIDYsIDksIDExLCA4LCAxMiwgMiwgMTAsIDAsIDQsIDEzLFxuICA4LCA2LCA0LCAxLCAzLCAxMSwgMTUsIDAsIDUsIDEyLCAyLCAxMywgOSwgNywgMTAsIDE0LFxuICAxMiwgMTUsIDEwLCA0LCAxLCA1LCA4LCA3LCA2LCAyLCAxMywgMTQsIDAsIDMsIDksIDExXG5dXG5cbnZhciBzbCA9IFtcbiAgMTEsIDE0LCAxNSwgMTIsIDUsIDgsIDcsIDksIDExLCAxMywgMTQsIDE1LCA2LCA3LCA5LCA4LFxuICA3LCA2LCA4LCAxMywgMTEsIDksIDcsIDE1LCA3LCAxMiwgMTUsIDksIDExLCA3LCAxMywgMTIsXG4gIDExLCAxMywgNiwgNywgMTQsIDksIDEzLCAxNSwgMTQsIDgsIDEzLCA2LCA1LCAxMiwgNywgNSxcbiAgMTEsIDEyLCAxNCwgMTUsIDE0LCAxNSwgOSwgOCwgOSwgMTQsIDUsIDYsIDgsIDYsIDUsIDEyLFxuICA5LCAxNSwgNSwgMTEsIDYsIDgsIDEzLCAxMiwgNSwgMTIsIDEzLCAxNCwgMTEsIDgsIDUsIDZcbl1cblxudmFyIHNyID0gW1xuICA4LCA5LCA5LCAxMSwgMTMsIDE1LCAxNSwgNSwgNywgNywgOCwgMTEsIDE0LCAxNCwgMTIsIDYsXG4gIDksIDEzLCAxNSwgNywgMTIsIDgsIDksIDExLCA3LCA3LCAxMiwgNywgNiwgMTUsIDEzLCAxMSxcbiAgOSwgNywgMTUsIDExLCA4LCA2LCA2LCAxNCwgMTIsIDEzLCA1LCAxNCwgMTMsIDEzLCA3LCA1LFxuICAxNSwgNSwgOCwgMTEsIDE0LCAxNCwgNiwgMTQsIDYsIDksIDEyLCA5LCAxMiwgNSwgMTUsIDgsXG4gIDgsIDUsIDEyLCA5LCAxMiwgNSwgMTQsIDYsIDgsIDEzLCA2LCA1LCAxNSwgMTMsIDExLCAxMVxuXVxuXG52YXIgaGwgPSBbMHgwMDAwMDAwMCwgMHg1YTgyNzk5OSwgMHg2ZWQ5ZWJhMSwgMHg4ZjFiYmNkYywgMHhhOTUzZmQ0ZV1cbnZhciBociA9IFsweDUwYTI4YmU2LCAweDVjNGRkMTI0LCAweDZkNzAzZWYzLCAweDdhNmQ3NmU5LCAweDAwMDAwMDAwXVxuXG5mdW5jdGlvbiBSSVBFTUQxNjAgKCkge1xuICBIYXNoQmFzZS5jYWxsKHRoaXMsIDY0KVxuXG4gIC8vIHN0YXRlXG4gIHRoaXMuX2EgPSAweDY3NDUyMzAxXG4gIHRoaXMuX2IgPSAweGVmY2RhYjg5XG4gIHRoaXMuX2MgPSAweDk4YmFkY2ZlXG4gIHRoaXMuX2QgPSAweDEwMzI1NDc2XG4gIHRoaXMuX2UgPSAweGMzZDJlMWYwXG59XG5cbmluaGVyaXRzKFJJUEVNRDE2MCwgSGFzaEJhc2UpXG5cblJJUEVNRDE2MC5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHdvcmRzID0gQVJSQVkxNlxuICBmb3IgKHZhciBqID0gMDsgaiA8IDE2OyArK2opIHdvcmRzW2pdID0gdGhpcy5fYmxvY2sucmVhZEludDMyTEUoaiAqIDQpXG5cbiAgdmFyIGFsID0gdGhpcy5fYSB8IDBcbiAgdmFyIGJsID0gdGhpcy5fYiB8IDBcbiAgdmFyIGNsID0gdGhpcy5fYyB8IDBcbiAgdmFyIGRsID0gdGhpcy5fZCB8IDBcbiAgdmFyIGVsID0gdGhpcy5fZSB8IDBcblxuICB2YXIgYXIgPSB0aGlzLl9hIHwgMFxuICB2YXIgYnIgPSB0aGlzLl9iIHwgMFxuICB2YXIgY3IgPSB0aGlzLl9jIHwgMFxuICB2YXIgZHIgPSB0aGlzLl9kIHwgMFxuICB2YXIgZXIgPSB0aGlzLl9lIHwgMFxuXG4gIC8vIGNvbXB1dGF0aW9uXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgODA7IGkgKz0gMSkge1xuICAgIHZhciB0bFxuICAgIHZhciB0clxuICAgIGlmIChpIDwgMTYpIHtcbiAgICAgIHRsID0gZm4xKGFsLCBibCwgY2wsIGRsLCBlbCwgd29yZHNbemxbaV1dLCBobFswXSwgc2xbaV0pXG4gICAgICB0ciA9IGZuNShhciwgYnIsIGNyLCBkciwgZXIsIHdvcmRzW3pyW2ldXSwgaHJbMF0sIHNyW2ldKVxuICAgIH0gZWxzZSBpZiAoaSA8IDMyKSB7XG4gICAgICB0bCA9IGZuMihhbCwgYmwsIGNsLCBkbCwgZWwsIHdvcmRzW3psW2ldXSwgaGxbMV0sIHNsW2ldKVxuICAgICAgdHIgPSBmbjQoYXIsIGJyLCBjciwgZHIsIGVyLCB3b3Jkc1t6cltpXV0sIGhyWzFdLCBzcltpXSlcbiAgICB9IGVsc2UgaWYgKGkgPCA0OCkge1xuICAgICAgdGwgPSBmbjMoYWwsIGJsLCBjbCwgZGwsIGVsLCB3b3Jkc1t6bFtpXV0sIGhsWzJdLCBzbFtpXSlcbiAgICAgIHRyID0gZm4zKGFyLCBiciwgY3IsIGRyLCBlciwgd29yZHNbenJbaV1dLCBoclsyXSwgc3JbaV0pXG4gICAgfSBlbHNlIGlmIChpIDwgNjQpIHtcbiAgICAgIHRsID0gZm40KGFsLCBibCwgY2wsIGRsLCBlbCwgd29yZHNbemxbaV1dLCBobFszXSwgc2xbaV0pXG4gICAgICB0ciA9IGZuMihhciwgYnIsIGNyLCBkciwgZXIsIHdvcmRzW3pyW2ldXSwgaHJbM10sIHNyW2ldKVxuICAgIH0gZWxzZSB7IC8vIGlmIChpPDgwKSB7XG4gICAgICB0bCA9IGZuNShhbCwgYmwsIGNsLCBkbCwgZWwsIHdvcmRzW3psW2ldXSwgaGxbNF0sIHNsW2ldKVxuICAgICAgdHIgPSBmbjEoYXIsIGJyLCBjciwgZHIsIGVyLCB3b3Jkc1t6cltpXV0sIGhyWzRdLCBzcltpXSlcbiAgICB9XG5cbiAgICBhbCA9IGVsXG4gICAgZWwgPSBkbFxuICAgIGRsID0gcm90bChjbCwgMTApXG4gICAgY2wgPSBibFxuICAgIGJsID0gdGxcblxuICAgIGFyID0gZXJcbiAgICBlciA9IGRyXG4gICAgZHIgPSByb3RsKGNyLCAxMClcbiAgICBjciA9IGJyXG4gICAgYnIgPSB0clxuICB9XG5cbiAgLy8gdXBkYXRlIHN0YXRlXG4gIHZhciB0ID0gKHRoaXMuX2IgKyBjbCArIGRyKSB8IDBcbiAgdGhpcy5fYiA9ICh0aGlzLl9jICsgZGwgKyBlcikgfCAwXG4gIHRoaXMuX2MgPSAodGhpcy5fZCArIGVsICsgYXIpIHwgMFxuICB0aGlzLl9kID0gKHRoaXMuX2UgKyBhbCArIGJyKSB8IDBcbiAgdGhpcy5fZSA9ICh0aGlzLl9hICsgYmwgKyBjcikgfCAwXG4gIHRoaXMuX2EgPSB0XG59XG5cblJJUEVNRDE2MC5wcm90b3R5cGUuX2RpZ2VzdCA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gY3JlYXRlIHBhZGRpbmcgYW5kIGhhbmRsZSBibG9ja3NcbiAgdGhpcy5fYmxvY2tbdGhpcy5fYmxvY2tPZmZzZXQrK10gPSAweDgwXG4gIGlmICh0aGlzLl9ibG9ja09mZnNldCA+IDU2KSB7XG4gICAgdGhpcy5fYmxvY2suZmlsbCgwLCB0aGlzLl9ibG9ja09mZnNldCwgNjQpXG4gICAgdGhpcy5fdXBkYXRlKClcbiAgICB0aGlzLl9ibG9ja09mZnNldCA9IDBcbiAgfVxuXG4gIHRoaXMuX2Jsb2NrLmZpbGwoMCwgdGhpcy5fYmxvY2tPZmZzZXQsIDU2KVxuICB0aGlzLl9ibG9jay53cml0ZVVJbnQzMkxFKHRoaXMuX2xlbmd0aFswXSwgNTYpXG4gIHRoaXMuX2Jsb2NrLndyaXRlVUludDMyTEUodGhpcy5fbGVuZ3RoWzFdLCA2MClcbiAgdGhpcy5fdXBkYXRlKClcblxuICAvLyBwcm9kdWNlIHJlc3VsdFxuICB2YXIgYnVmZmVyID0gQnVmZmVyLmFsbG9jID8gQnVmZmVyLmFsbG9jKDIwKSA6IG5ldyBCdWZmZXIoMjApXG4gIGJ1ZmZlci53cml0ZUludDMyTEUodGhpcy5fYSwgMClcbiAgYnVmZmVyLndyaXRlSW50MzJMRSh0aGlzLl9iLCA0KVxuICBidWZmZXIud3JpdGVJbnQzMkxFKHRoaXMuX2MsIDgpXG4gIGJ1ZmZlci53cml0ZUludDMyTEUodGhpcy5fZCwgMTIpXG4gIGJ1ZmZlci53cml0ZUludDMyTEUodGhpcy5fZSwgMTYpXG4gIHJldHVybiBidWZmZXJcbn1cblxuZnVuY3Rpb24gcm90bCAoeCwgbikge1xuICByZXR1cm4gKHggPDwgbikgfCAoeCA+Pj4gKDMyIC0gbikpXG59XG5cbmZ1bmN0aW9uIGZuMSAoYSwgYiwgYywgZCwgZSwgbSwgaywgcykge1xuICByZXR1cm4gKHJvdGwoKGEgKyAoYiBeIGMgXiBkKSArIG0gKyBrKSB8IDAsIHMpICsgZSkgfCAwXG59XG5cbmZ1bmN0aW9uIGZuMiAoYSwgYiwgYywgZCwgZSwgbSwgaywgcykge1xuICByZXR1cm4gKHJvdGwoKGEgKyAoKGIgJiBjKSB8ICgofmIpICYgZCkpICsgbSArIGspIHwgMCwgcykgKyBlKSB8IDBcbn1cblxuZnVuY3Rpb24gZm4zIChhLCBiLCBjLCBkLCBlLCBtLCBrLCBzKSB7XG4gIHJldHVybiAocm90bCgoYSArICgoYiB8ICh+YykpIF4gZCkgKyBtICsgaykgfCAwLCBzKSArIGUpIHwgMFxufVxuXG5mdW5jdGlvbiBmbjQgKGEsIGIsIGMsIGQsIGUsIG0sIGssIHMpIHtcbiAgcmV0dXJuIChyb3RsKChhICsgKChiICYgZCkgfCAoYyAmICh+ZCkpKSArIG0gKyBrKSB8IDAsIHMpICsgZSkgfCAwXG59XG5cbmZ1bmN0aW9uIGZuNSAoYSwgYiwgYywgZCwgZSwgbSwgaywgcykge1xuICByZXR1cm4gKHJvdGwoKGEgKyAoYiBeIChjIHwgKH5kKSkpICsgbSArIGspIHwgMCwgcykgKyBlKSB8IDBcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBSSVBFTUQxNjBcbiIsInZhciBleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBTSEEgKGFsZ29yaXRobSkge1xuICBhbGdvcml0aG0gPSBhbGdvcml0aG0udG9Mb3dlckNhc2UoKVxuXG4gIHZhciBBbGdvcml0aG0gPSBleHBvcnRzW2FsZ29yaXRobV1cbiAgaWYgKCFBbGdvcml0aG0pIHRocm93IG5ldyBFcnJvcihhbGdvcml0aG0gKyAnIGlzIG5vdCBzdXBwb3J0ZWQgKHdlIGFjY2VwdCBwdWxsIHJlcXVlc3RzKScpXG5cbiAgcmV0dXJuIG5ldyBBbGdvcml0aG0oKVxufVxuXG5leHBvcnRzLnNoYSA9IHJlcXVpcmUoJy4vc2hhJylcbmV4cG9ydHMuc2hhMSA9IHJlcXVpcmUoJy4vc2hhMScpXG5leHBvcnRzLnNoYTIyNCA9IHJlcXVpcmUoJy4vc2hhMjI0JylcbmV4cG9ydHMuc2hhMjU2ID0gcmVxdWlyZSgnLi9zaGEyNTYnKVxuZXhwb3J0cy5zaGEzODQgPSByZXF1aXJlKCcuL3NoYTM4NCcpXG5leHBvcnRzLnNoYTUxMiA9IHJlcXVpcmUoJy4vc2hhNTEyJylcbiIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy51dGlscyA9IHJlcXVpcmUoJy4vZGVzL3V0aWxzJyk7XG5leHBvcnRzLkNpcGhlciA9IHJlcXVpcmUoJy4vZGVzL2NpcGhlcicpO1xuZXhwb3J0cy5ERVMgPSByZXF1aXJlKCcuL2Rlcy9kZXMnKTtcbmV4cG9ydHMuQ0JDID0gcmVxdWlyZSgnLi9kZXMvY2JjJyk7XG5leHBvcnRzLkVERSA9IHJlcXVpcmUoJy4vZGVzL2VkZScpO1xuIiwidmFyIGNpcGhlcnMgPSByZXF1aXJlKCcuL2VuY3J5cHRlcicpXG52YXIgZGVjaXBoZXJzID0gcmVxdWlyZSgnLi9kZWNyeXB0ZXInKVxudmFyIG1vZGVzID0gcmVxdWlyZSgnLi9tb2Rlcy9saXN0Lmpzb24nKVxuXG5mdW5jdGlvbiBnZXRDaXBoZXJzICgpIHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKG1vZGVzKVxufVxuXG5leHBvcnRzLmNyZWF0ZUNpcGhlciA9IGV4cG9ydHMuQ2lwaGVyID0gY2lwaGVycy5jcmVhdGVDaXBoZXJcbmV4cG9ydHMuY3JlYXRlQ2lwaGVyaXYgPSBleHBvcnRzLkNpcGhlcml2ID0gY2lwaGVycy5jcmVhdGVDaXBoZXJpdlxuZXhwb3J0cy5jcmVhdGVEZWNpcGhlciA9IGV4cG9ydHMuRGVjaXBoZXIgPSBkZWNpcGhlcnMuY3JlYXRlRGVjaXBoZXJcbmV4cG9ydHMuY3JlYXRlRGVjaXBoZXJpdiA9IGV4cG9ydHMuRGVjaXBoZXJpdiA9IGRlY2lwaGVycy5jcmVhdGVEZWNpcGhlcml2XG5leHBvcnRzLmxpc3RDaXBoZXJzID0gZXhwb3J0cy5nZXRDaXBoZXJzID0gZ2V0Q2lwaGVyc1xuIiwidmFyIG1vZGVNb2R1bGVzID0ge1xuICBFQ0I6IHJlcXVpcmUoJy4vZWNiJyksXG4gIENCQzogcmVxdWlyZSgnLi9jYmMnKSxcbiAgQ0ZCOiByZXF1aXJlKCcuL2NmYicpLFxuICBDRkI4OiByZXF1aXJlKCcuL2NmYjgnKSxcbiAgQ0ZCMTogcmVxdWlyZSgnLi9jZmIxJyksXG4gIE9GQjogcmVxdWlyZSgnLi9vZmInKSxcbiAgQ1RSOiByZXF1aXJlKCcuL2N0cicpLFxuICBHQ006IHJlcXVpcmUoJy4vY3RyJylcbn1cblxudmFyIG1vZGVzID0gcmVxdWlyZSgnLi9saXN0Lmpzb24nKVxuXG5mb3IgKHZhciBrZXkgaW4gbW9kZXMpIHtcbiAgbW9kZXNba2V5XS5tb2R1bGUgPSBtb2RlTW9kdWxlc1ttb2Rlc1trZXldLm1vZGVdXG59XG5cbm1vZHVsZS5leHBvcnRzID0gbW9kZXNcbiIsInZhciByO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHJhbmQobGVuKSB7XG4gIGlmICghcilcbiAgICByID0gbmV3IFJhbmQobnVsbCk7XG5cbiAgcmV0dXJuIHIuZ2VuZXJhdGUobGVuKTtcbn07XG5cbmZ1bmN0aW9uIFJhbmQocmFuZCkge1xuICB0aGlzLnJhbmQgPSByYW5kO1xufVxubW9kdWxlLmV4cG9ydHMuUmFuZCA9IFJhbmQ7XG5cblJhbmQucHJvdG90eXBlLmdlbmVyYXRlID0gZnVuY3Rpb24gZ2VuZXJhdGUobGVuKSB7XG4gIHJldHVybiB0aGlzLl9yYW5kKGxlbik7XG59O1xuXG4vLyBFbXVsYXRlIGNyeXB0byBBUEkgdXNpbmcgcmFuZHlcblJhbmQucHJvdG90eXBlLl9yYW5kID0gZnVuY3Rpb24gX3JhbmQobikge1xuICBpZiAodGhpcy5yYW5kLmdldEJ5dGVzKVxuICAgIHJldHVybiB0aGlzLnJhbmQuZ2V0Qnl0ZXMobik7XG5cbiAgdmFyIHJlcyA9IG5ldyBVaW50OEFycmF5KG4pO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHJlcy5sZW5ndGg7IGkrKylcbiAgICByZXNbaV0gPSB0aGlzLnJhbmQuZ2V0Qnl0ZSgpO1xuICByZXR1cm4gcmVzO1xufTtcblxuaWYgKHR5cGVvZiBzZWxmID09PSAnb2JqZWN0Jykge1xuICBpZiAoc2VsZi5jcnlwdG8gJiYgc2VsZi5jcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKSB7XG4gICAgLy8gTW9kZXJuIGJyb3dzZXJzXG4gICAgUmFuZC5wcm90b3R5cGUuX3JhbmQgPSBmdW5jdGlvbiBfcmFuZChuKSB7XG4gICAgICB2YXIgYXJyID0gbmV3IFVpbnQ4QXJyYXkobik7XG4gICAgICBzZWxmLmNyeXB0by5nZXRSYW5kb21WYWx1ZXMoYXJyKTtcbiAgICAgIHJldHVybiBhcnI7XG4gICAgfTtcbiAgfSBlbHNlIGlmIChzZWxmLm1zQ3J5cHRvICYmIHNlbGYubXNDcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKSB7XG4gICAgLy8gSUVcbiAgICBSYW5kLnByb3RvdHlwZS5fcmFuZCA9IGZ1bmN0aW9uIF9yYW5kKG4pIHtcbiAgICAgIHZhciBhcnIgPSBuZXcgVWludDhBcnJheShuKTtcbiAgICAgIHNlbGYubXNDcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKGFycik7XG4gICAgICByZXR1cm4gYXJyO1xuICAgIH07XG5cbiAgLy8gU2FmYXJpJ3MgV2ViV29ya2VycyBkbyBub3QgaGF2ZSBgY3J5cHRvYFxuICB9IGVsc2UgaWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnKSB7XG4gICAgLy8gT2xkIGp1bmtcbiAgICBSYW5kLnByb3RvdHlwZS5fcmFuZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdOb3QgaW1wbGVtZW50ZWQgeWV0Jyk7XG4gICAgfTtcbiAgfVxufSBlbHNlIHtcbiAgLy8gTm9kZS5qcyBvciBXZWIgd29ya2VyIHdpdGggbm8gY3J5cHRvIHN1cHBvcnRcbiAgdHJ5IHtcbiAgICB2YXIgY3J5cHRvID0gcmVxdWlyZSgnY3J5cHRvJyk7XG4gICAgaWYgKHR5cGVvZiBjcnlwdG8ucmFuZG9tQnl0ZXMgIT09ICdmdW5jdGlvbicpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vdCBzdXBwb3J0ZWQnKTtcblxuICAgIFJhbmQucHJvdG90eXBlLl9yYW5kID0gZnVuY3Rpb24gX3JhbmQobikge1xuICAgICAgcmV0dXJuIGNyeXB0by5yYW5kb21CeXRlcyhuKTtcbiAgICB9O1xuICB9IGNhdGNoIChlKSB7XG4gIH1cbn1cbiIsInZhciBibiA9IHJlcXVpcmUoJ2JuLmpzJyk7XG52YXIgcmFuZG9tQnl0ZXMgPSByZXF1aXJlKCdyYW5kb21ieXRlcycpO1xubW9kdWxlLmV4cG9ydHMgPSBjcnQ7XG5mdW5jdGlvbiBibGluZChwcml2KSB7XG4gIHZhciByID0gZ2V0cihwcml2KTtcbiAgdmFyIGJsaW5kZXIgPSByLnRvUmVkKGJuLm1vbnQocHJpdi5tb2R1bHVzKSlcbiAgLnJlZFBvdyhuZXcgYm4ocHJpdi5wdWJsaWNFeHBvbmVudCkpLmZyb21SZWQoKTtcbiAgcmV0dXJuIHtcbiAgICBibGluZGVyOiBibGluZGVyLFxuICAgIHVuYmxpbmRlcjpyLmludm0ocHJpdi5tb2R1bHVzKVxuICB9O1xufVxuZnVuY3Rpb24gY3J0KG1zZywgcHJpdikge1xuICB2YXIgYmxpbmRzID0gYmxpbmQocHJpdik7XG4gIHZhciBsZW4gPSBwcml2Lm1vZHVsdXMuYnl0ZUxlbmd0aCgpO1xuICB2YXIgbW9kID0gYm4ubW9udChwcml2Lm1vZHVsdXMpO1xuICB2YXIgYmxpbmRlZCA9IG5ldyBibihtc2cpLm11bChibGluZHMuYmxpbmRlcikudW1vZChwcml2Lm1vZHVsdXMpO1xuICB2YXIgYzEgPSBibGluZGVkLnRvUmVkKGJuLm1vbnQocHJpdi5wcmltZTEpKTtcbiAgdmFyIGMyID0gYmxpbmRlZC50b1JlZChibi5tb250KHByaXYucHJpbWUyKSk7XG4gIHZhciBxaW52ID0gcHJpdi5jb2VmZmljaWVudDtcbiAgdmFyIHAgPSBwcml2LnByaW1lMTtcbiAgdmFyIHEgPSBwcml2LnByaW1lMjtcbiAgdmFyIG0xID0gYzEucmVkUG93KHByaXYuZXhwb25lbnQxKTtcbiAgdmFyIG0yID0gYzIucmVkUG93KHByaXYuZXhwb25lbnQyKTtcbiAgbTEgPSBtMS5mcm9tUmVkKCk7XG4gIG0yID0gbTIuZnJvbVJlZCgpO1xuICB2YXIgaCA9IG0xLmlzdWIobTIpLmltdWwocWludikudW1vZChwKTtcbiAgaC5pbXVsKHEpO1xuICBtMi5pYWRkKGgpO1xuICByZXR1cm4gbmV3IEJ1ZmZlcihtMi5pbXVsKGJsaW5kcy51bmJsaW5kZXIpLnVtb2QocHJpdi5tb2R1bHVzKS50b0FycmF5KGZhbHNlLCBsZW4pKTtcbn1cbmNydC5nZXRyID0gZ2V0cjtcbmZ1bmN0aW9uIGdldHIocHJpdikge1xuICB2YXIgbGVuID0gcHJpdi5tb2R1bHVzLmJ5dGVMZW5ndGgoKTtcbiAgdmFyIHIgPSBuZXcgYm4ocmFuZG9tQnl0ZXMobGVuKSk7XG4gIHdoaWxlIChyLmNtcChwcml2Lm1vZHVsdXMpID49ICAwIHx8ICFyLnVtb2QocHJpdi5wcmltZTEpIHx8ICFyLnVtb2QocHJpdi5wcmltZTIpKSB7XG4gICAgciA9IG5ldyBibihyYW5kb21CeXRlcyhsZW4pKTtcbiAgfVxuICByZXR1cm4gcjtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGVsbGlwdGljID0gZXhwb3J0cztcblxuZWxsaXB0aWMudmVyc2lvbiA9IHJlcXVpcmUoJy4uL3BhY2thZ2UuanNvbicpLnZlcnNpb247XG5lbGxpcHRpYy51dGlscyA9IHJlcXVpcmUoJy4vZWxsaXB0aWMvdXRpbHMnKTtcbmVsbGlwdGljLnJhbmQgPSByZXF1aXJlKCdicm9yYW5kJyk7XG5lbGxpcHRpYy5jdXJ2ZSA9IHJlcXVpcmUoJy4vZWxsaXB0aWMvY3VydmUnKTtcbmVsbGlwdGljLmN1cnZlcyA9IHJlcXVpcmUoJy4vZWxsaXB0aWMvY3VydmVzJyk7XG5cbi8vIFByb3RvY29sc1xuZWxsaXB0aWMuZWMgPSByZXF1aXJlKCcuL2VsbGlwdGljL2VjJyk7XG5lbGxpcHRpYy5lZGRzYSA9IHJlcXVpcmUoJy4vZWxsaXB0aWMvZWRkc2EnKTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGN1cnZlcyA9IGV4cG9ydHM7XG5cbnZhciBoYXNoID0gcmVxdWlyZSgnaGFzaC5qcycpO1xudmFyIGN1cnZlID0gcmVxdWlyZSgnLi9jdXJ2ZScpO1xudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xuXG52YXIgYXNzZXJ0ID0gdXRpbHMuYXNzZXJ0O1xuXG5mdW5jdGlvbiBQcmVzZXRDdXJ2ZShvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zLnR5cGUgPT09ICdzaG9ydCcpXG4gICAgdGhpcy5jdXJ2ZSA9IG5ldyBjdXJ2ZS5zaG9ydChvcHRpb25zKTtcbiAgZWxzZSBpZiAob3B0aW9ucy50eXBlID09PSAnZWR3YXJkcycpXG4gICAgdGhpcy5jdXJ2ZSA9IG5ldyBjdXJ2ZS5lZHdhcmRzKG9wdGlvbnMpO1xuICBlbHNlXG4gICAgdGhpcy5jdXJ2ZSA9IG5ldyBjdXJ2ZS5tb250KG9wdGlvbnMpO1xuICB0aGlzLmcgPSB0aGlzLmN1cnZlLmc7XG4gIHRoaXMubiA9IHRoaXMuY3VydmUubjtcbiAgdGhpcy5oYXNoID0gb3B0aW9ucy5oYXNoO1xuXG4gIGFzc2VydCh0aGlzLmcudmFsaWRhdGUoKSwgJ0ludmFsaWQgY3VydmUnKTtcbiAgYXNzZXJ0KHRoaXMuZy5tdWwodGhpcy5uKS5pc0luZmluaXR5KCksICdJbnZhbGlkIGN1cnZlLCBHKk4gIT0gTycpO1xufVxuY3VydmVzLlByZXNldEN1cnZlID0gUHJlc2V0Q3VydmU7XG5cbmZ1bmN0aW9uIGRlZmluZUN1cnZlKG5hbWUsIG9wdGlvbnMpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGN1cnZlcywgbmFtZSwge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgY3VydmUgPSBuZXcgUHJlc2V0Q3VydmUob3B0aW9ucyk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY3VydmVzLCBuYW1lLCB7XG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6IGN1cnZlXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBjdXJ2ZTtcbiAgICB9XG4gIH0pO1xufVxuXG5kZWZpbmVDdXJ2ZSgncDE5MicsIHtcbiAgdHlwZTogJ3Nob3J0JyxcbiAgcHJpbWU6ICdwMTkyJyxcbiAgcDogJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZlIGZmZmZmZmZmIGZmZmZmZmZmJyxcbiAgYTogJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZlIGZmZmZmZmZmIGZmZmZmZmZjJyxcbiAgYjogJzY0MjEwNTE5IGU1OWM4MGU3IDBmYTdlOWFiIDcyMjQzMDQ5IGZlYjhkZWVjIGMxNDZiOWIxJyxcbiAgbjogJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIDk5ZGVmODM2IDE0NmJjOWIxIGI0ZDIyODMxJyxcbiAgaGFzaDogaGFzaC5zaGEyNTYsXG4gIGdSZWQ6IGZhbHNlLFxuICBnOiBbXG4gICAgJzE4OGRhODBlIGIwMzA5MGY2IDdjYmYyMGViIDQzYTE4ODAwIGY0ZmYwYWZkIDgyZmYxMDEyJyxcbiAgICAnMDcxOTJiOTUgZmZjOGRhNzggNjMxMDExZWQgNmIyNGNkZDUgNzNmOTc3YTEgMWU3OTQ4MTEnXG4gIF1cbn0pO1xuXG5kZWZpbmVDdXJ2ZSgncDIyNCcsIHtcbiAgdHlwZTogJ3Nob3J0JyxcbiAgcHJpbWU6ICdwMjI0JyxcbiAgcDogJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIDAwMDAwMDAwIDAwMDAwMDAwIDAwMDAwMDAxJyxcbiAgYTogJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZlIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZlJyxcbiAgYjogJ2I0MDUwYTg1IDBjMDRiM2FiIGY1NDEzMjU2IDUwNDRiMGI3IGQ3YmZkOGJhIDI3MGIzOTQzIDIzNTVmZmI0JyxcbiAgbjogJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmYxNmEyIGUwYjhmMDNlIDEzZGQyOTQ1IDVjNWMyYTNkJyxcbiAgaGFzaDogaGFzaC5zaGEyNTYsXG4gIGdSZWQ6IGZhbHNlLFxuICBnOiBbXG4gICAgJ2I3MGUwY2JkIDZiYjRiZjdmIDMyMTM5MGI5IDRhMDNjMWQzIDU2YzIxMTIyIDM0MzI4MGQ2IDExNWMxZDIxJyxcbiAgICAnYmQzNzYzODggYjVmNzIzZmIgNGMyMmRmZTYgY2Q0Mzc1YTAgNWEwNzQ3NjQgNDRkNTgxOTkgODUwMDdlMzQnXG4gIF1cbn0pO1xuXG5kZWZpbmVDdXJ2ZSgncDI1NicsIHtcbiAgdHlwZTogJ3Nob3J0JyxcbiAgcHJpbWU6IG51bGwsXG4gIHA6ICdmZmZmZmZmZiAwMDAwMDAwMSAwMDAwMDAwMCAwMDAwMDAwMCAwMDAwMDAwMCBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZicsXG4gIGE6ICdmZmZmZmZmZiAwMDAwMDAwMSAwMDAwMDAwMCAwMDAwMDAwMCAwMDAwMDAwMCBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmYycsXG4gIGI6ICc1YWM2MzVkOCBhYTNhOTNlNyBiM2ViYmQ1NSA3Njk4ODZiYyA2NTFkMDZiMCBjYzUzYjBmNiAzYmNlM2MzZSAyN2QyNjA0YicsXG4gIG46ICdmZmZmZmZmZiAwMDAwMDAwMCBmZmZmZmZmZiBmZmZmZmZmZiBiY2U2ZmFhZCBhNzE3OWU4NCBmM2I5Y2FjMiBmYzYzMjU1MScsXG4gIGhhc2g6IGhhc2guc2hhMjU2LFxuICBnUmVkOiBmYWxzZSxcbiAgZzogW1xuICAgICc2YjE3ZDFmMiBlMTJjNDI0NyBmOGJjZTZlNSA2M2E0NDBmMiA3NzAzN2Q4MSAyZGViMzNhMCBmNGExMzk0NSBkODk4YzI5NicsXG4gICAgJzRmZTM0MmUyIGZlMWE3ZjliIDhlZTdlYjRhIDdjMGY5ZTE2IDJiY2UzMzU3IDZiMzE1ZWNlIGNiYjY0MDY4IDM3YmY1MWY1J1xuICBdXG59KTtcblxuZGVmaW5lQ3VydmUoJ3AzODQnLCB7XG4gIHR5cGU6ICdzaG9ydCcsXG4gIHByaW1lOiBudWxsLFxuICBwOiAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgJyArXG4gICAgICdmZmZmZmZmZSBmZmZmZmZmZiAwMDAwMDAwMCAwMDAwMDAwMCBmZmZmZmZmZicsXG4gIGE6ICdmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiAnICtcbiAgICAgJ2ZmZmZmZmZlIGZmZmZmZmZmIDAwMDAwMDAwIDAwMDAwMDAwIGZmZmZmZmZjJyxcbiAgYjogJ2IzMzEyZmE3IGUyM2VlN2U0IDk4OGUwNTZiIGUzZjgyZDE5IDE4MWQ5YzZlIGZlODE0MTEyIDAzMTQwODhmICcgK1xuICAgICAnNTAxMzg3NWEgYzY1NjM5OGQgOGEyZWQxOWQgMmE4NWM4ZWQgZDNlYzJhZWYnLFxuICBuOiAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgYzc2MzRkODEgJyArXG4gICAgICdmNDM3MmRkZiA1ODFhMGRiMiA0OGIwYTc3YSBlY2VjMTk2YSBjY2M1Mjk3MycsXG4gIGhhc2g6IGhhc2guc2hhMzg0LFxuICBnUmVkOiBmYWxzZSxcbiAgZzogW1xuICAgICdhYTg3Y2EyMiBiZThiMDUzNyA4ZWIxYzcxZSBmMzIwYWQ3NCA2ZTFkM2I2MiA4YmE3OWI5OCA1OWY3NDFlMCA4MjU0MmEzOCAnICtcbiAgICAnNTUwMmYyNWQgYmY1NTI5NmMgM2E1NDVlMzggNzI3NjBhYjcnLFxuICAgICczNjE3ZGU0YSA5NjI2MmM2ZiA1ZDllOThiZiA5MjkyZGMyOSBmOGY0MWRiZCAyODlhMTQ3YyBlOWRhMzExMyBiNWYwYjhjMCAnICtcbiAgICAnMGE2MGIxY2UgMWQ3ZTgxOWQgN2E0MzFkN2MgOTBlYTBlNWYnXG4gIF1cbn0pO1xuXG5kZWZpbmVDdXJ2ZSgncDUyMScsIHtcbiAgdHlwZTogJ3Nob3J0JyxcbiAgcHJpbWU6IG51bGwsXG4gIHA6ICcwMDAwMDFmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiAnICtcbiAgICAgJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmICcgK1xuICAgICAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYnLFxuICBhOiAnMDAwMDAxZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgJyArXG4gICAgICdmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiAnICtcbiAgICAgJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZjJyxcbiAgYjogJzAwMDAwMDUxIDk1M2ViOTYxIDhlMWM5YTFmIDkyOWEyMWEwIGI2ODU0MGVlIGEyZGE3MjViICcgK1xuICAgICAnOTliMzE1ZjMgYjhiNDg5OTEgOGVmMTA5ZTEgNTYxOTM5NTEgZWM3ZTkzN2IgMTY1MmMwYmQgJyArXG4gICAgICczYmIxYmYwNyAzNTczZGY4OCAzZDJjMzRmMSBlZjQ1MWZkNCA2YjUwM2YwMCcsXG4gIG46ICcwMDAwMDFmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiAnICtcbiAgICAgJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZhIDUxODY4NzgzIGJmMmY5NjZiIDdmY2MwMTQ4ICcgK1xuICAgICAnZjcwOWE1ZDAgM2JiNWM5YjggODk5YzQ3YWUgYmI2ZmI3MWUgOTEzODY0MDknLFxuICBoYXNoOiBoYXNoLnNoYTUxMixcbiAgZ1JlZDogZmFsc2UsXG4gIGc6IFtcbiAgICAnMDAwMDAwYzYgODU4ZTA2YjcgMDQwNGU5Y2QgOWUzZWNiNjYgMjM5NWI0NDIgOWM2NDgxMzkgJyArXG4gICAgJzA1M2ZiNTIxIGY4MjhhZjYwIDZiNGQzZGJhIGExNGI1ZTc3IGVmZTc1OTI4IGZlMWRjMTI3ICcgK1xuICAgICdhMmZmYThkZSAzMzQ4YjNjMSA4NTZhNDI5YiBmOTdlN2UzMSBjMmU1YmQ2NicsXG4gICAgJzAwMDAwMTE4IDM5Mjk2YTc4IDlhM2JjMDA0IDVjOGE1ZmI0IDJjN2QxYmQ5IDk4ZjU0NDQ5ICcgK1xuICAgICc1NzliNDQ2OCAxN2FmYmQxNyAyNzNlNjYyYyA5N2VlNzI5OSA1ZWY0MjY0MCBjNTUwYjkwMSAnICtcbiAgICAnM2ZhZDA3NjEgMzUzYzcwODYgYTI3MmMyNDAgODhiZTk0NzYgOWZkMTY2NTAnXG4gIF1cbn0pO1xuXG5kZWZpbmVDdXJ2ZSgnY3VydmUyNTUxOScsIHtcbiAgdHlwZTogJ21vbnQnLFxuICBwcmltZTogJ3AyNTUxOScsXG4gIHA6ICc3ZmZmZmZmZmZmZmZmZmZmIGZmZmZmZmZmZmZmZmZmZmYgZmZmZmZmZmZmZmZmZmZmZiBmZmZmZmZmZmZmZmZmZmVkJyxcbiAgYTogJzc2ZDA2JyxcbiAgYjogJzEnLFxuICBuOiAnMTAwMDAwMDAwMDAwMDAwMCAwMDAwMDAwMDAwMDAwMDAwIDE0ZGVmOWRlYTJmNzljZDYgNTgxMjYzMWE1Y2Y1ZDNlZCcsXG4gIGhhc2g6IGhhc2guc2hhMjU2LFxuICBnUmVkOiBmYWxzZSxcbiAgZzogW1xuICAgICc5J1xuICBdXG59KTtcblxuZGVmaW5lQ3VydmUoJ2VkMjU1MTknLCB7XG4gIHR5cGU6ICdlZHdhcmRzJyxcbiAgcHJpbWU6ICdwMjU1MTknLFxuICBwOiAnN2ZmZmZmZmZmZmZmZmZmZiBmZmZmZmZmZmZmZmZmZmZmIGZmZmZmZmZmZmZmZmZmZmYgZmZmZmZmZmZmZmZmZmZlZCcsXG4gIGE6ICctMScsXG4gIGM6ICcxJyxcbiAgLy8gLTEyMTY2NSAqICgxMjE2NjZeKC0xKSkgKG1vZCBQKVxuICBkOiAnNTIwMzZjZWUyYjZmZmU3MyA4Y2M3NDA3OTc3NzllODk4IDAwNzAwYTRkNDE0MWQ4YWIgNzVlYjRkY2ExMzU5NzhhMycsXG4gIG46ICcxMDAwMDAwMDAwMDAwMDAwIDAwMDAwMDAwMDAwMDAwMDAgMTRkZWY5ZGVhMmY3OWNkNiA1ODEyNjMxYTVjZjVkM2VkJyxcbiAgaGFzaDogaGFzaC5zaGEyNTYsXG4gIGdSZWQ6IGZhbHNlLFxuICBnOiBbXG4gICAgJzIxNjkzNmQzY2Q2ZTUzZmVjMGE0ZTIzMWZkZDZkYzVjNjkyY2M3NjA5NTI1YTdiMmM5NTYyZDYwOGYyNWQ1MWEnLFxuXG4gICAgLy8gNC81XG4gICAgJzY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NTgnXG4gIF1cbn0pO1xuXG52YXIgcHJlO1xudHJ5IHtcbiAgcHJlID0gcmVxdWlyZSgnLi9wcmVjb21wdXRlZC9zZWNwMjU2azEnKTtcbn0gY2F0Y2ggKGUpIHtcbiAgcHJlID0gdW5kZWZpbmVkO1xufVxuXG5kZWZpbmVDdXJ2ZSgnc2VjcDI1NmsxJywge1xuICB0eXBlOiAnc2hvcnQnLFxuICBwcmltZTogJ2syNTYnLFxuICBwOiAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmUgZmZmZmZjMmYnLFxuICBhOiAnMCcsXG4gIGI6ICc3JyxcbiAgbjogJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZlIGJhYWVkY2U2IGFmNDhhMDNiIGJmZDI1ZThjIGQwMzY0MTQxJyxcbiAgaDogJzEnLFxuICBoYXNoOiBoYXNoLnNoYTI1NixcblxuICAvLyBQcmVjb21wdXRlZCBlbmRvbW9ycGhpc21cbiAgYmV0YTogJzdhZTk2YTJiNjU3YzA3MTA2ZTY0NDc5ZWFjMzQzNGU5OWNmMDQ5NzUxMmY1ODk5NWMxMzk2YzI4NzE5NTAxZWUnLFxuICBsYW1iZGE6ICc1MzYzYWQ0Y2MwNWMzMGUwYTUyNjFjMDI4ODEyNjQ1YTEyMmUyMmVhMjA4MTY2NzhkZjAyOTY3YzFiMjNiZDcyJyxcbiAgYmFzaXM6IFtcbiAgICB7XG4gICAgICBhOiAnMzA4NmQyMjFhN2Q0NmJjZGU4NmM5MGU0OTI4NGViMTUnLFxuICAgICAgYjogJy1lNDQzN2VkNjAxMGU4ODI4NmY1NDdmYTkwYWJmZTRjMydcbiAgICB9LFxuICAgIHtcbiAgICAgIGE6ICcxMTRjYTUwZjdhOGUyZjNmNjU3YzExMDhkOWQ0NGNmZDgnLFxuICAgICAgYjogJzMwODZkMjIxYTdkNDZiY2RlODZjOTBlNDkyODRlYjE1J1xuICAgIH1cbiAgXSxcblxuICBnUmVkOiBmYWxzZSxcbiAgZzogW1xuICAgICc3OWJlNjY3ZWY5ZGNiYmFjNTVhMDYyOTVjZTg3MGIwNzAyOWJmY2RiMmRjZTI4ZDk1OWYyODE1YjE2ZjgxNzk4JyxcbiAgICAnNDgzYWRhNzcyNmEzYzQ2NTVkYTRmYmZjMGUxMTA4YThmZDE3YjQ0OGE2ODU1NDE5OWM0N2QwOGZmYjEwZDRiOCcsXG4gICAgcHJlXG4gIF1cbn0pO1xuIiwidmFyIGhhc2ggPSBleHBvcnRzO1xuXG5oYXNoLnV0aWxzID0gcmVxdWlyZSgnLi9oYXNoL3V0aWxzJyk7XG5oYXNoLmNvbW1vbiA9IHJlcXVpcmUoJy4vaGFzaC9jb21tb24nKTtcbmhhc2guc2hhID0gcmVxdWlyZSgnLi9oYXNoL3NoYScpO1xuaGFzaC5yaXBlbWQgPSByZXF1aXJlKCcuL2hhc2gvcmlwZW1kJyk7XG5oYXNoLmhtYWMgPSByZXF1aXJlKCcuL2hhc2gvaG1hYycpO1xuXG4vLyBQcm94eSBoYXNoIGZ1bmN0aW9ucyB0byB0aGUgbWFpbiBvYmplY3Rcbmhhc2guc2hhMSA9IGhhc2guc2hhLnNoYTE7XG5oYXNoLnNoYTI1NiA9IGhhc2guc2hhLnNoYTI1Njtcbmhhc2guc2hhMjI0ID0gaGFzaC5zaGEuc2hhMjI0O1xuaGFzaC5zaGEzODQgPSBoYXNoLnNoYS5zaGEzODQ7XG5oYXNoLnNoYTUxMiA9IGhhc2guc2hhLnNoYTUxMjtcbmhhc2gucmlwZW1kMTYwID0gaGFzaC5yaXBlbWQucmlwZW1kMTYwO1xuIiwidmFyIGp3cyA9IHJlcXVpcmUoJ2p3cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChqd3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIHZhciBkZWNvZGVkID0gandzLmRlY29kZShqd3QsIG9wdGlvbnMpO1xuICBpZiAoIWRlY29kZWQpIHsgcmV0dXJuIG51bGw7IH1cbiAgdmFyIHBheWxvYWQgPSBkZWNvZGVkLnBheWxvYWQ7XG5cbiAgLy90cnkgcGFyc2UgdGhlIHBheWxvYWRcbiAgaWYodHlwZW9mIHBheWxvYWQgPT09ICdzdHJpbmcnKSB7XG4gICAgdHJ5IHtcbiAgICAgIHZhciBvYmogPSBKU09OLnBhcnNlKHBheWxvYWQpO1xuICAgICAgaWYob2JqICE9PSBudWxsICYmIHR5cGVvZiBvYmogPT09ICdvYmplY3QnKSB7XG4gICAgICAgIHBheWxvYWQgPSBvYmo7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZSkgeyB9XG4gIH1cblxuICAvL3JldHVybiBoZWFkZXIgaWYgYGNvbXBsZXRlYCBvcHRpb24gaXMgZW5hYmxlZC4gIGhlYWRlciBpbmNsdWRlcyBjbGFpbXNcbiAgLy9zdWNoIGFzIGBraWRgIGFuZCBgYWxnYCB1c2VkIHRvIHNlbGVjdCB0aGUga2V5IHdpdGhpbiBhIEpXS1MgbmVlZGVkIHRvXG4gIC8vdmVyaWZ5IHRoZSBzaWduYXR1cmVcbiAgaWYgKG9wdGlvbnMuY29tcGxldGUgPT09IHRydWUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaGVhZGVyOiBkZWNvZGVkLmhlYWRlcixcbiAgICAgIHBheWxvYWQ6IHBheWxvYWQsXG4gICAgICBzaWduYXR1cmU6IGRlY29kZWQuc2lnbmF0dXJlXG4gICAgfTtcbiAgfVxuICByZXR1cm4gcGF5bG9hZDtcbn07XG4iLCJ2YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIChhcnIpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwoYXJyKSA9PSAnW29iamVjdCBBcnJheV0nO1xufTtcbiIsIi8qZ2xvYmFsIG1vZHVsZSwgcHJvY2VzcyovXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXI7XG52YXIgU3RyZWFtID0gcmVxdWlyZSgnc3RyZWFtJyk7XG52YXIgdXRpbCA9IHJlcXVpcmUoJ3V0aWwnKTtcblxuZnVuY3Rpb24gRGF0YVN0cmVhbShkYXRhKSB7XG4gIHRoaXMuYnVmZmVyID0gbnVsbDtcbiAgdGhpcy53cml0YWJsZSA9IHRydWU7XG4gIHRoaXMucmVhZGFibGUgPSB0cnVlO1xuXG4gIC8vIE5vIGlucHV0XG4gIGlmICghZGF0YSkge1xuICAgIHRoaXMuYnVmZmVyID0gQnVmZmVyLmFsbG9jKDApO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLy8gU3RyZWFtXG4gIGlmICh0eXBlb2YgZGF0YS5waXBlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhpcy5idWZmZXIgPSBCdWZmZXIuYWxsb2MoMCk7XG4gICAgZGF0YS5waXBlKHRoaXMpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLy8gQnVmZmVyIG9yIFN0cmluZ1xuICAvLyBvciBPYmplY3QgKGFzc3VtZWRseSBhIHBhc3N3b3JkZWQga2V5KVxuICBpZiAoZGF0YS5sZW5ndGggfHwgdHlwZW9mIGRhdGEgPT09ICdvYmplY3QnKSB7XG4gICAgdGhpcy5idWZmZXIgPSBkYXRhO1xuICAgIHRoaXMud3JpdGFibGUgPSBmYWxzZTtcbiAgICBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMuZW1pdCgnZW5kJywgZGF0YSk7XG4gICAgICB0aGlzLnJlYWRhYmxlID0gZmFsc2U7XG4gICAgICB0aGlzLmVtaXQoJ2Nsb3NlJyk7XG4gICAgfS5iaW5kKHRoaXMpKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHRocm93IG5ldyBUeXBlRXJyb3IoJ1VuZXhwZWN0ZWQgZGF0YSB0eXBlICgnKyB0eXBlb2YgZGF0YSArICcpJyk7XG59XG51dGlsLmluaGVyaXRzKERhdGFTdHJlYW0sIFN0cmVhbSk7XG5cbkRhdGFTdHJlYW0ucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gd3JpdGUoZGF0YSkge1xuICB0aGlzLmJ1ZmZlciA9IEJ1ZmZlci5jb25jYXQoW3RoaXMuYnVmZmVyLCBCdWZmZXIuZnJvbShkYXRhKV0pO1xuICB0aGlzLmVtaXQoJ2RhdGEnLCBkYXRhKTtcbn07XG5cbkRhdGFTdHJlYW0ucHJvdG90eXBlLmVuZCA9IGZ1bmN0aW9uIGVuZChkYXRhKSB7XG4gIGlmIChkYXRhKVxuICAgIHRoaXMud3JpdGUoZGF0YSk7XG4gIHRoaXMuZW1pdCgnZW5kJywgZGF0YSk7XG4gIHRoaXMuZW1pdCgnY2xvc2UnKTtcbiAgdGhpcy53cml0YWJsZSA9IGZhbHNlO1xuICB0aGlzLnJlYWRhYmxlID0gZmFsc2U7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IERhdGFTdHJlYW07XG4iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKjxyZXBsYWNlbWVudD4qL1xuXG52YXIgcG5hID0gcmVxdWlyZSgncHJvY2Vzcy1uZXh0aWNrLWFyZ3MnKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWRhYmxlO1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCdpc2FycmF5Jyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBEdXBsZXg7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuUmVhZGFibGUuUmVhZGFibGVTdGF0ZSA9IFJlYWRhYmxlU3RhdGU7XG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgRUUgPSByZXF1aXJlKCdldmVudHMnKS5FdmVudEVtaXR0ZXI7XG5cbnZhciBFRWxpc3RlbmVyQ291bnQgPSBmdW5jdGlvbiAoZW1pdHRlciwgdHlwZSkge1xuICByZXR1cm4gZW1pdHRlci5saXN0ZW5lcnModHlwZSkubGVuZ3RoO1xufTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIFN0cmVhbSA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvc3RyZWFtcy9zdHJlYW0nKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xuXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXI7XG52YXIgT3VyVWludDhBcnJheSA9IGdsb2JhbC5VaW50OEFycmF5IHx8IGZ1bmN0aW9uICgpIHt9O1xuZnVuY3Rpb24gX3VpbnQ4QXJyYXlUb0J1ZmZlcihjaHVuaykge1xuICByZXR1cm4gQnVmZmVyLmZyb20oY2h1bmspO1xufVxuZnVuY3Rpb24gX2lzVWludDhBcnJheShvYmopIHtcbiAgcmV0dXJuIEJ1ZmZlci5pc0J1ZmZlcihvYmopIHx8IG9iaiBpbnN0YW5jZW9mIE91clVpbnQ4QXJyYXk7XG59XG5cbi8qPC9yZXBsYWNlbWVudD4qL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIHV0aWwgPSByZXF1aXJlKCdjb3JlLXV0aWwtaXMnKTtcbnV0aWwuaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgZGVidWdVdGlsID0gcmVxdWlyZSgndXRpbCcpO1xudmFyIGRlYnVnID0gdm9pZCAwO1xuaWYgKGRlYnVnVXRpbCAmJiBkZWJ1Z1V0aWwuZGVidWdsb2cpIHtcbiAgZGVidWcgPSBkZWJ1Z1V0aWwuZGVidWdsb2coJ3N0cmVhbScpO1xufSBlbHNlIHtcbiAgZGVidWcgPSBmdW5jdGlvbiAoKSB7fTtcbn1cbi8qPC9yZXBsYWNlbWVudD4qL1xuXG52YXIgQnVmZmVyTGlzdCA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvc3RyZWFtcy9CdWZmZXJMaXN0Jyk7XG52YXIgZGVzdHJveUltcGwgPSByZXF1aXJlKCcuL2ludGVybmFsL3N0cmVhbXMvZGVzdHJveScpO1xudmFyIFN0cmluZ0RlY29kZXI7XG5cbnV0aWwuaW5oZXJpdHMoUmVhZGFibGUsIFN0cmVhbSk7XG5cbnZhciBrUHJveHlFdmVudHMgPSBbJ2Vycm9yJywgJ2Nsb3NlJywgJ2Rlc3Ryb3knLCAncGF1c2UnLCAncmVzdW1lJ107XG5cbmZ1bmN0aW9uIHByZXBlbmRMaXN0ZW5lcihlbWl0dGVyLCBldmVudCwgZm4pIHtcbiAgLy8gU2FkbHkgdGhpcyBpcyBub3QgY2FjaGVhYmxlIGFzIHNvbWUgbGlicmFyaWVzIGJ1bmRsZSB0aGVpciBvd25cbiAgLy8gZXZlbnQgZW1pdHRlciBpbXBsZW1lbnRhdGlvbiB3aXRoIHRoZW0uXG4gIGlmICh0eXBlb2YgZW1pdHRlci5wcmVwZW5kTGlzdGVuZXIgPT09ICdmdW5jdGlvbicpIHJldHVybiBlbWl0dGVyLnByZXBlbmRMaXN0ZW5lcihldmVudCwgZm4pO1xuXG4gIC8vIFRoaXMgaXMgYSBoYWNrIHRvIG1ha2Ugc3VyZSB0aGF0IG91ciBlcnJvciBoYW5kbGVyIGlzIGF0dGFjaGVkIGJlZm9yZSBhbnlcbiAgLy8gdXNlcmxhbmQgb25lcy4gIE5FVkVSIERPIFRISVMuIFRoaXMgaXMgaGVyZSBvbmx5IGJlY2F1c2UgdGhpcyBjb2RlIG5lZWRzXG4gIC8vIHRvIGNvbnRpbnVlIHRvIHdvcmsgd2l0aCBvbGRlciB2ZXJzaW9ucyBvZiBOb2RlLmpzIHRoYXQgZG8gbm90IGluY2x1ZGVcbiAgLy8gdGhlIHByZXBlbmRMaXN0ZW5lcigpIG1ldGhvZC4gVGhlIGdvYWwgaXMgdG8gZXZlbnR1YWxseSByZW1vdmUgdGhpcyBoYWNrLlxuICBpZiAoIWVtaXR0ZXIuX2V2ZW50cyB8fCAhZW1pdHRlci5fZXZlbnRzW2V2ZW50XSkgZW1pdHRlci5vbihldmVudCwgZm4pO2Vsc2UgaWYgKGlzQXJyYXkoZW1pdHRlci5fZXZlbnRzW2V2ZW50XSkpIGVtaXR0ZXIuX2V2ZW50c1tldmVudF0udW5zaGlmdChmbik7ZWxzZSBlbWl0dGVyLl9ldmVudHNbZXZlbnRdID0gW2ZuLCBlbWl0dGVyLl9ldmVudHNbZXZlbnRdXTtcbn1cblxuZnVuY3Rpb24gUmVhZGFibGVTdGF0ZShvcHRpb25zLCBzdHJlYW0pIHtcbiAgRHVwbGV4ID0gRHVwbGV4IHx8IHJlcXVpcmUoJy4vX3N0cmVhbV9kdXBsZXgnKTtcblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICAvLyBEdXBsZXggc3RyZWFtcyBhcmUgYm90aCByZWFkYWJsZSBhbmQgd3JpdGFibGUsIGJ1dCBzaGFyZVxuICAvLyB0aGUgc2FtZSBvcHRpb25zIG9iamVjdC5cbiAgLy8gSG93ZXZlciwgc29tZSBjYXNlcyByZXF1aXJlIHNldHRpbmcgb3B0aW9ucyB0byBkaWZmZXJlbnRcbiAgLy8gdmFsdWVzIGZvciB0aGUgcmVhZGFibGUgYW5kIHRoZSB3cml0YWJsZSBzaWRlcyBvZiB0aGUgZHVwbGV4IHN0cmVhbS5cbiAgLy8gVGhlc2Ugb3B0aW9ucyBjYW4gYmUgcHJvdmlkZWQgc2VwYXJhdGVseSBhcyByZWFkYWJsZVhYWCBhbmQgd3JpdGFibGVYWFguXG4gIHZhciBpc0R1cGxleCA9IHN0cmVhbSBpbnN0YW5jZW9mIER1cGxleDtcblxuICAvLyBvYmplY3Qgc3RyZWFtIGZsYWcuIFVzZWQgdG8gbWFrZSByZWFkKG4pIGlnbm9yZSBuIGFuZCB0b1xuICAvLyBtYWtlIGFsbCB0aGUgYnVmZmVyIG1lcmdpbmcgYW5kIGxlbmd0aCBjaGVja3MgZ28gYXdheVxuICB0aGlzLm9iamVjdE1vZGUgPSAhIW9wdGlvbnMub2JqZWN0TW9kZTtcblxuICBpZiAoaXNEdXBsZXgpIHRoaXMub2JqZWN0TW9kZSA9IHRoaXMub2JqZWN0TW9kZSB8fCAhIW9wdGlvbnMucmVhZGFibGVPYmplY3RNb2RlO1xuXG4gIC8vIHRoZSBwb2ludCBhdCB3aGljaCBpdCBzdG9wcyBjYWxsaW5nIF9yZWFkKCkgdG8gZmlsbCB0aGUgYnVmZmVyXG4gIC8vIE5vdGU6IDAgaXMgYSB2YWxpZCB2YWx1ZSwgbWVhbnMgXCJkb24ndCBjYWxsIF9yZWFkIHByZWVtcHRpdmVseSBldmVyXCJcbiAgdmFyIGh3bSA9IG9wdGlvbnMuaGlnaFdhdGVyTWFyaztcbiAgdmFyIHJlYWRhYmxlSHdtID0gb3B0aW9ucy5yZWFkYWJsZUhpZ2hXYXRlck1hcms7XG4gIHZhciBkZWZhdWx0SHdtID0gdGhpcy5vYmplY3RNb2RlID8gMTYgOiAxNiAqIDEwMjQ7XG5cbiAgaWYgKGh3bSB8fCBod20gPT09IDApIHRoaXMuaGlnaFdhdGVyTWFyayA9IGh3bTtlbHNlIGlmIChpc0R1cGxleCAmJiAocmVhZGFibGVId20gfHwgcmVhZGFibGVId20gPT09IDApKSB0aGlzLmhpZ2hXYXRlck1hcmsgPSByZWFkYWJsZUh3bTtlbHNlIHRoaXMuaGlnaFdhdGVyTWFyayA9IGRlZmF1bHRId207XG5cbiAgLy8gY2FzdCB0byBpbnRzLlxuICB0aGlzLmhpZ2hXYXRlck1hcmsgPSBNYXRoLmZsb29yKHRoaXMuaGlnaFdhdGVyTWFyayk7XG5cbiAgLy8gQSBsaW5rZWQgbGlzdCBpcyB1c2VkIHRvIHN0b3JlIGRhdGEgY2h1bmtzIGluc3RlYWQgb2YgYW4gYXJyYXkgYmVjYXVzZSB0aGVcbiAgLy8gbGlua2VkIGxpc3QgY2FuIHJlbW92ZSBlbGVtZW50cyBmcm9tIHRoZSBiZWdpbm5pbmcgZmFzdGVyIHRoYW5cbiAgLy8gYXJyYXkuc2hpZnQoKVxuICB0aGlzLmJ1ZmZlciA9IG5ldyBCdWZmZXJMaXN0KCk7XG4gIHRoaXMubGVuZ3RoID0gMDtcbiAgdGhpcy5waXBlcyA9IG51bGw7XG4gIHRoaXMucGlwZXNDb3VudCA9IDA7XG4gIHRoaXMuZmxvd2luZyA9IG51bGw7XG4gIHRoaXMuZW5kZWQgPSBmYWxzZTtcbiAgdGhpcy5lbmRFbWl0dGVkID0gZmFsc2U7XG4gIHRoaXMucmVhZGluZyA9IGZhbHNlO1xuXG4gIC8vIGEgZmxhZyB0byBiZSBhYmxlIHRvIHRlbGwgaWYgdGhlIGV2ZW50ICdyZWFkYWJsZScvJ2RhdGEnIGlzIGVtaXR0ZWRcbiAgLy8gaW1tZWRpYXRlbHksIG9yIG9uIGEgbGF0ZXIgdGljay4gIFdlIHNldCB0aGlzIHRvIHRydWUgYXQgZmlyc3QsIGJlY2F1c2VcbiAgLy8gYW55IGFjdGlvbnMgdGhhdCBzaG91bGRuJ3QgaGFwcGVuIHVudGlsIFwibGF0ZXJcIiBzaG91bGQgZ2VuZXJhbGx5IGFsc29cbiAgLy8gbm90IGhhcHBlbiBiZWZvcmUgdGhlIGZpcnN0IHJlYWQgY2FsbC5cbiAgdGhpcy5zeW5jID0gdHJ1ZTtcblxuICAvLyB3aGVuZXZlciB3ZSByZXR1cm4gbnVsbCwgdGhlbiB3ZSBzZXQgYSBmbGFnIHRvIHNheVxuICAvLyB0aGF0IHdlJ3JlIGF3YWl0aW5nIGEgJ3JlYWRhYmxlJyBldmVudCBlbWlzc2lvbi5cbiAgdGhpcy5uZWVkUmVhZGFibGUgPSBmYWxzZTtcbiAgdGhpcy5lbWl0dGVkUmVhZGFibGUgPSBmYWxzZTtcbiAgdGhpcy5yZWFkYWJsZUxpc3RlbmluZyA9IGZhbHNlO1xuICB0aGlzLnJlc3VtZVNjaGVkdWxlZCA9IGZhbHNlO1xuXG4gIC8vIGhhcyBpdCBiZWVuIGRlc3Ryb3llZFxuICB0aGlzLmRlc3Ryb3llZCA9IGZhbHNlO1xuXG4gIC8vIENyeXB0byBpcyBraW5kIG9mIG9sZCBhbmQgY3J1c3R5LiAgSGlzdG9yaWNhbGx5LCBpdHMgZGVmYXVsdCBzdHJpbmdcbiAgLy8gZW5jb2RpbmcgaXMgJ2JpbmFyeScgc28gd2UgaGF2ZSB0byBtYWtlIHRoaXMgY29uZmlndXJhYmxlLlxuICAvLyBFdmVyeXRoaW5nIGVsc2UgaW4gdGhlIHVuaXZlcnNlIHVzZXMgJ3V0ZjgnLCB0aG91Z2guXG4gIHRoaXMuZGVmYXVsdEVuY29kaW5nID0gb3B0aW9ucy5kZWZhdWx0RW5jb2RpbmcgfHwgJ3V0ZjgnO1xuXG4gIC8vIHRoZSBudW1iZXIgb2Ygd3JpdGVycyB0aGF0IGFyZSBhd2FpdGluZyBhIGRyYWluIGV2ZW50IGluIC5waXBlKClzXG4gIHRoaXMuYXdhaXREcmFpbiA9IDA7XG5cbiAgLy8gaWYgdHJ1ZSwgYSBtYXliZVJlYWRNb3JlIGhhcyBiZWVuIHNjaGVkdWxlZFxuICB0aGlzLnJlYWRpbmdNb3JlID0gZmFsc2U7XG5cbiAgdGhpcy5kZWNvZGVyID0gbnVsbDtcbiAgdGhpcy5lbmNvZGluZyA9IG51bGw7XG4gIGlmIChvcHRpb25zLmVuY29kaW5nKSB7XG4gICAgaWYgKCFTdHJpbmdEZWNvZGVyKSBTdHJpbmdEZWNvZGVyID0gcmVxdWlyZSgnc3RyaW5nX2RlY29kZXIvJykuU3RyaW5nRGVjb2RlcjtcbiAgICB0aGlzLmRlY29kZXIgPSBuZXcgU3RyaW5nRGVjb2RlcihvcHRpb25zLmVuY29kaW5nKTtcbiAgICB0aGlzLmVuY29kaW5nID0gb3B0aW9ucy5lbmNvZGluZztcbiAgfVxufVxuXG5mdW5jdGlvbiBSZWFkYWJsZShvcHRpb25zKSB7XG4gIER1cGxleCA9IER1cGxleCB8fCByZXF1aXJlKCcuL19zdHJlYW1fZHVwbGV4Jyk7XG5cbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFJlYWRhYmxlKSkgcmV0dXJuIG5ldyBSZWFkYWJsZShvcHRpb25zKTtcblxuICB0aGlzLl9yZWFkYWJsZVN0YXRlID0gbmV3IFJlYWRhYmxlU3RhdGUob3B0aW9ucywgdGhpcyk7XG5cbiAgLy8gbGVnYWN5XG4gIHRoaXMucmVhZGFibGUgPSB0cnVlO1xuXG4gIGlmIChvcHRpb25zKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLnJlYWQgPT09ICdmdW5jdGlvbicpIHRoaXMuX3JlYWQgPSBvcHRpb25zLnJlYWQ7XG5cbiAgICBpZiAodHlwZW9mIG9wdGlvbnMuZGVzdHJveSA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fZGVzdHJveSA9IG9wdGlvbnMuZGVzdHJveTtcbiAgfVxuXG4gIFN0cmVhbS5jYWxsKHRoaXMpO1xufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoUmVhZGFibGUucHJvdG90eXBlLCAnZGVzdHJveWVkJywge1xuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5fcmVhZGFibGVTdGF0ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZDtcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAvLyB3ZSBpZ25vcmUgdGhlIHZhbHVlIGlmIHRoZSBzdHJlYW1cbiAgICAvLyBoYXMgbm90IGJlZW4gaW5pdGlhbGl6ZWQgeWV0XG4gICAgaWYgKCF0aGlzLl9yZWFkYWJsZVN0YXRlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gYmFja3dhcmQgY29tcGF0aWJpbGl0eSwgdGhlIHVzZXIgaXMgZXhwbGljaXRseVxuICAgIC8vIG1hbmFnaW5nIGRlc3Ryb3llZFxuICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkID0gdmFsdWU7XG4gIH1cbn0pO1xuXG5SZWFkYWJsZS5wcm90b3R5cGUuZGVzdHJveSA9IGRlc3Ryb3lJbXBsLmRlc3Ryb3k7XG5SZWFkYWJsZS5wcm90b3R5cGUuX3VuZGVzdHJveSA9IGRlc3Ryb3lJbXBsLnVuZGVzdHJveTtcblJlYWRhYmxlLnByb3RvdHlwZS5fZGVzdHJveSA9IGZ1bmN0aW9uIChlcnIsIGNiKSB7XG4gIHRoaXMucHVzaChudWxsKTtcbiAgY2IoZXJyKTtcbn07XG5cbi8vIE1hbnVhbGx5IHNob3ZlIHNvbWV0aGluZyBpbnRvIHRoZSByZWFkKCkgYnVmZmVyLlxuLy8gVGhpcyByZXR1cm5zIHRydWUgaWYgdGhlIGhpZ2hXYXRlck1hcmsgaGFzIG5vdCBiZWVuIGhpdCB5ZXQsXG4vLyBzaW1pbGFyIHRvIGhvdyBXcml0YWJsZS53cml0ZSgpIHJldHVybnMgdHJ1ZSBpZiB5b3Ugc2hvdWxkXG4vLyB3cml0ZSgpIHNvbWUgbW9yZS5cblJlYWRhYmxlLnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZykge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuICB2YXIgc2tpcENodW5rQ2hlY2s7XG5cbiAgaWYgKCFzdGF0ZS5vYmplY3RNb2RlKSB7XG4gICAgaWYgKHR5cGVvZiBjaHVuayA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGVuY29kaW5nID0gZW5jb2RpbmcgfHwgc3RhdGUuZGVmYXVsdEVuY29kaW5nO1xuICAgICAgaWYgKGVuY29kaW5nICE9PSBzdGF0ZS5lbmNvZGluZykge1xuICAgICAgICBjaHVuayA9IEJ1ZmZlci5mcm9tKGNodW5rLCBlbmNvZGluZyk7XG4gICAgICAgIGVuY29kaW5nID0gJyc7XG4gICAgICB9XG4gICAgICBza2lwQ2h1bmtDaGVjayA9IHRydWU7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHNraXBDaHVua0NoZWNrID0gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiByZWFkYWJsZUFkZENodW5rKHRoaXMsIGNodW5rLCBlbmNvZGluZywgZmFsc2UsIHNraXBDaHVua0NoZWNrKTtcbn07XG5cbi8vIFVuc2hpZnQgc2hvdWxkICphbHdheXMqIGJlIHNvbWV0aGluZyBkaXJlY3RseSBvdXQgb2YgcmVhZCgpXG5SZWFkYWJsZS5wcm90b3R5cGUudW5zaGlmdCA9IGZ1bmN0aW9uIChjaHVuaykge1xuICByZXR1cm4gcmVhZGFibGVBZGRDaHVuayh0aGlzLCBjaHVuaywgbnVsbCwgdHJ1ZSwgZmFsc2UpO1xufTtcblxuZnVuY3Rpb24gcmVhZGFibGVBZGRDaHVuayhzdHJlYW0sIGNodW5rLCBlbmNvZGluZywgYWRkVG9Gcm9udCwgc2tpcENodW5rQ2hlY2spIHtcbiAgdmFyIHN0YXRlID0gc3RyZWFtLl9yZWFkYWJsZVN0YXRlO1xuICBpZiAoY2h1bmsgPT09IG51bGwpIHtcbiAgICBzdGF0ZS5yZWFkaW5nID0gZmFsc2U7XG4gICAgb25Fb2ZDaHVuayhzdHJlYW0sIHN0YXRlKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgZXI7XG4gICAgaWYgKCFza2lwQ2h1bmtDaGVjaykgZXIgPSBjaHVua0ludmFsaWQoc3RhdGUsIGNodW5rKTtcbiAgICBpZiAoZXIpIHtcbiAgICAgIHN0cmVhbS5lbWl0KCdlcnJvcicsIGVyKTtcbiAgICB9IGVsc2UgaWYgKHN0YXRlLm9iamVjdE1vZGUgfHwgY2h1bmsgJiYgY2h1bmsubGVuZ3RoID4gMCkge1xuICAgICAgaWYgKHR5cGVvZiBjaHVuayAhPT0gJ3N0cmluZycgJiYgIXN0YXRlLm9iamVjdE1vZGUgJiYgT2JqZWN0LmdldFByb3RvdHlwZU9mKGNodW5rKSAhPT0gQnVmZmVyLnByb3RvdHlwZSkge1xuICAgICAgICBjaHVuayA9IF91aW50OEFycmF5VG9CdWZmZXIoY2h1bmspO1xuICAgICAgfVxuXG4gICAgICBpZiAoYWRkVG9Gcm9udCkge1xuICAgICAgICBpZiAoc3RhdGUuZW5kRW1pdHRlZCkgc3RyZWFtLmVtaXQoJ2Vycm9yJywgbmV3IEVycm9yKCdzdHJlYW0udW5zaGlmdCgpIGFmdGVyIGVuZCBldmVudCcpKTtlbHNlIGFkZENodW5rKHN0cmVhbSwgc3RhdGUsIGNodW5rLCB0cnVlKTtcbiAgICAgIH0gZWxzZSBpZiAoc3RhdGUuZW5kZWQpIHtcbiAgICAgICAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgbmV3IEVycm9yKCdzdHJlYW0ucHVzaCgpIGFmdGVyIEVPRicpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0YXRlLnJlYWRpbmcgPSBmYWxzZTtcbiAgICAgICAgaWYgKHN0YXRlLmRlY29kZXIgJiYgIWVuY29kaW5nKSB7XG4gICAgICAgICAgY2h1bmsgPSBzdGF0ZS5kZWNvZGVyLndyaXRlKGNodW5rKTtcbiAgICAgICAgICBpZiAoc3RhdGUub2JqZWN0TW9kZSB8fCBjaHVuay5sZW5ndGggIT09IDApIGFkZENodW5rKHN0cmVhbSwgc3RhdGUsIGNodW5rLCBmYWxzZSk7ZWxzZSBtYXliZVJlYWRNb3JlKHN0cmVhbSwgc3RhdGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGFkZENodW5rKHN0cmVhbSwgc3RhdGUsIGNodW5rLCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKCFhZGRUb0Zyb250KSB7XG4gICAgICBzdGF0ZS5yZWFkaW5nID0gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5lZWRNb3JlRGF0YShzdGF0ZSk7XG59XG5cbmZ1bmN0aW9uIGFkZENodW5rKHN0cmVhbSwgc3RhdGUsIGNodW5rLCBhZGRUb0Zyb250KSB7XG4gIGlmIChzdGF0ZS5mbG93aW5nICYmIHN0YXRlLmxlbmd0aCA9PT0gMCAmJiAhc3RhdGUuc3luYykge1xuICAgIHN0cmVhbS5lbWl0KCdkYXRhJywgY2h1bmspO1xuICAgIHN0cmVhbS5yZWFkKDApO1xuICB9IGVsc2Uge1xuICAgIC8vIHVwZGF0ZSB0aGUgYnVmZmVyIGluZm8uXG4gICAgc3RhdGUubGVuZ3RoICs9IHN0YXRlLm9iamVjdE1vZGUgPyAxIDogY2h1bmsubGVuZ3RoO1xuICAgIGlmIChhZGRUb0Zyb250KSBzdGF0ZS5idWZmZXIudW5zaGlmdChjaHVuayk7ZWxzZSBzdGF0ZS5idWZmZXIucHVzaChjaHVuayk7XG5cbiAgICBpZiAoc3RhdGUubmVlZFJlYWRhYmxlKSBlbWl0UmVhZGFibGUoc3RyZWFtKTtcbiAgfVxuICBtYXliZVJlYWRNb3JlKHN0cmVhbSwgc3RhdGUpO1xufVxuXG5mdW5jdGlvbiBjaHVua0ludmFsaWQoc3RhdGUsIGNodW5rKSB7XG4gIHZhciBlcjtcbiAgaWYgKCFfaXNVaW50OEFycmF5KGNodW5rKSAmJiB0eXBlb2YgY2h1bmsgIT09ICdzdHJpbmcnICYmIGNodW5rICE9PSB1bmRlZmluZWQgJiYgIXN0YXRlLm9iamVjdE1vZGUpIHtcbiAgICBlciA9IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgbm9uLXN0cmluZy9idWZmZXIgY2h1bmsnKTtcbiAgfVxuICByZXR1cm4gZXI7XG59XG5cbi8vIGlmIGl0J3MgcGFzdCB0aGUgaGlnaCB3YXRlciBtYXJrLCB3ZSBjYW4gcHVzaCBpbiBzb21lIG1vcmUuXG4vLyBBbHNvLCBpZiB3ZSBoYXZlIG5vIGRhdGEgeWV0LCB3ZSBjYW4gc3RhbmQgc29tZVxuLy8gbW9yZSBieXRlcy4gIFRoaXMgaXMgdG8gd29yayBhcm91bmQgY2FzZXMgd2hlcmUgaHdtPTAsXG4vLyBzdWNoIGFzIHRoZSByZXBsLiAgQWxzbywgaWYgdGhlIHB1c2goKSB0cmlnZ2VyZWQgYVxuLy8gcmVhZGFibGUgZXZlbnQsIGFuZCB0aGUgdXNlciBjYWxsZWQgcmVhZChsYXJnZU51bWJlcikgc3VjaCB0aGF0XG4vLyBuZWVkUmVhZGFibGUgd2FzIHNldCwgdGhlbiB3ZSBvdWdodCB0byBwdXNoIG1vcmUsIHNvIHRoYXQgYW5vdGhlclxuLy8gJ3JlYWRhYmxlJyBldmVudCB3aWxsIGJlIHRyaWdnZXJlZC5cbmZ1bmN0aW9uIG5lZWRNb3JlRGF0YShzdGF0ZSkge1xuICByZXR1cm4gIXN0YXRlLmVuZGVkICYmIChzdGF0ZS5uZWVkUmVhZGFibGUgfHwgc3RhdGUubGVuZ3RoIDwgc3RhdGUuaGlnaFdhdGVyTWFyayB8fCBzdGF0ZS5sZW5ndGggPT09IDApO1xufVxuXG5SZWFkYWJsZS5wcm90b3R5cGUuaXNQYXVzZWQgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLl9yZWFkYWJsZVN0YXRlLmZsb3dpbmcgPT09IGZhbHNlO1xufTtcblxuLy8gYmFja3dhcmRzIGNvbXBhdGliaWxpdHkuXG5SZWFkYWJsZS5wcm90b3R5cGUuc2V0RW5jb2RpbmcgPSBmdW5jdGlvbiAoZW5jKSB7XG4gIGlmICghU3RyaW5nRGVjb2RlcikgU3RyaW5nRGVjb2RlciA9IHJlcXVpcmUoJ3N0cmluZ19kZWNvZGVyLycpLlN0cmluZ0RlY29kZXI7XG4gIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVjb2RlciA9IG5ldyBTdHJpbmdEZWNvZGVyKGVuYyk7XG4gIHRoaXMuX3JlYWRhYmxlU3RhdGUuZW5jb2RpbmcgPSBlbmM7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLy8gRG9uJ3QgcmFpc2UgdGhlIGh3bSA+IDhNQlxudmFyIE1BWF9IV00gPSAweDgwMDAwMDtcbmZ1bmN0aW9uIGNvbXB1dGVOZXdIaWdoV2F0ZXJNYXJrKG4pIHtcbiAgaWYgKG4gPj0gTUFYX0hXTSkge1xuICAgIG4gPSBNQVhfSFdNO1xuICB9IGVsc2Uge1xuICAgIC8vIEdldCB0aGUgbmV4dCBoaWdoZXN0IHBvd2VyIG9mIDIgdG8gcHJldmVudCBpbmNyZWFzaW5nIGh3bSBleGNlc3NpdmVseSBpblxuICAgIC8vIHRpbnkgYW1vdW50c1xuICAgIG4tLTtcbiAgICBuIHw9IG4gPj4+IDE7XG4gICAgbiB8PSBuID4+PiAyO1xuICAgIG4gfD0gbiA+Pj4gNDtcbiAgICBuIHw9IG4gPj4+IDg7XG4gICAgbiB8PSBuID4+PiAxNjtcbiAgICBuKys7XG4gIH1cbiAgcmV0dXJuIG47XG59XG5cbi8vIFRoaXMgZnVuY3Rpb24gaXMgZGVzaWduZWQgdG8gYmUgaW5saW5hYmxlLCBzbyBwbGVhc2UgdGFrZSBjYXJlIHdoZW4gbWFraW5nXG4vLyBjaGFuZ2VzIHRvIHRoZSBmdW5jdGlvbiBib2R5LlxuZnVuY3Rpb24gaG93TXVjaFRvUmVhZChuLCBzdGF0ZSkge1xuICBpZiAobiA8PSAwIHx8IHN0YXRlLmxlbmd0aCA9PT0gMCAmJiBzdGF0ZS5lbmRlZCkgcmV0dXJuIDA7XG4gIGlmIChzdGF0ZS5vYmplY3RNb2RlKSByZXR1cm4gMTtcbiAgaWYgKG4gIT09IG4pIHtcbiAgICAvLyBPbmx5IGZsb3cgb25lIGJ1ZmZlciBhdCBhIHRpbWVcbiAgICBpZiAoc3RhdGUuZmxvd2luZyAmJiBzdGF0ZS5sZW5ndGgpIHJldHVybiBzdGF0ZS5idWZmZXIuaGVhZC5kYXRhLmxlbmd0aDtlbHNlIHJldHVybiBzdGF0ZS5sZW5ndGg7XG4gIH1cbiAgLy8gSWYgd2UncmUgYXNraW5nIGZvciBtb3JlIHRoYW4gdGhlIGN1cnJlbnQgaHdtLCB0aGVuIHJhaXNlIHRoZSBod20uXG4gIGlmIChuID4gc3RhdGUuaGlnaFdhdGVyTWFyaykgc3RhdGUuaGlnaFdhdGVyTWFyayA9IGNvbXB1dGVOZXdIaWdoV2F0ZXJNYXJrKG4pO1xuICBpZiAobiA8PSBzdGF0ZS5sZW5ndGgpIHJldHVybiBuO1xuICAvLyBEb24ndCBoYXZlIGVub3VnaFxuICBpZiAoIXN0YXRlLmVuZGVkKSB7XG4gICAgc3RhdGUubmVlZFJlYWRhYmxlID0gdHJ1ZTtcbiAgICByZXR1cm4gMDtcbiAgfVxuICByZXR1cm4gc3RhdGUubGVuZ3RoO1xufVxuXG4vLyB5b3UgY2FuIG92ZXJyaWRlIGVpdGhlciB0aGlzIG1ldGhvZCwgb3IgdGhlIGFzeW5jIF9yZWFkKG4pIGJlbG93LlxuUmVhZGFibGUucHJvdG90eXBlLnJlYWQgPSBmdW5jdGlvbiAobikge1xuICBkZWJ1ZygncmVhZCcsIG4pO1xuICBuID0gcGFyc2VJbnQobiwgMTApO1xuICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuICB2YXIgbk9yaWcgPSBuO1xuXG4gIGlmIChuICE9PSAwKSBzdGF0ZS5lbWl0dGVkUmVhZGFibGUgPSBmYWxzZTtcblxuICAvLyBpZiB3ZSdyZSBkb2luZyByZWFkKDApIHRvIHRyaWdnZXIgYSByZWFkYWJsZSBldmVudCwgYnV0IHdlXG4gIC8vIGFscmVhZHkgaGF2ZSBhIGJ1bmNoIG9mIGRhdGEgaW4gdGhlIGJ1ZmZlciwgdGhlbiBqdXN0IHRyaWdnZXJcbiAgLy8gdGhlICdyZWFkYWJsZScgZXZlbnQgYW5kIG1vdmUgb24uXG4gIGlmIChuID09PSAwICYmIHN0YXRlLm5lZWRSZWFkYWJsZSAmJiAoc3RhdGUubGVuZ3RoID49IHN0YXRlLmhpZ2hXYXRlck1hcmsgfHwgc3RhdGUuZW5kZWQpKSB7XG4gICAgZGVidWcoJ3JlYWQ6IGVtaXRSZWFkYWJsZScsIHN0YXRlLmxlbmd0aCwgc3RhdGUuZW5kZWQpO1xuICAgIGlmIChzdGF0ZS5sZW5ndGggPT09IDAgJiYgc3RhdGUuZW5kZWQpIGVuZFJlYWRhYmxlKHRoaXMpO2Vsc2UgZW1pdFJlYWRhYmxlKHRoaXMpO1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgbiA9IGhvd011Y2hUb1JlYWQobiwgc3RhdGUpO1xuXG4gIC8vIGlmIHdlJ3ZlIGVuZGVkLCBhbmQgd2UncmUgbm93IGNsZWFyLCB0aGVuIGZpbmlzaCBpdCB1cC5cbiAgaWYgKG4gPT09IDAgJiYgc3RhdGUuZW5kZWQpIHtcbiAgICBpZiAoc3RhdGUubGVuZ3RoID09PSAwKSBlbmRSZWFkYWJsZSh0aGlzKTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8vIEFsbCB0aGUgYWN0dWFsIGNodW5rIGdlbmVyYXRpb24gbG9naWMgbmVlZHMgdG8gYmVcbiAgLy8gKmJlbG93KiB0aGUgY2FsbCB0byBfcmVhZC4gIFRoZSByZWFzb24gaXMgdGhhdCBpbiBjZXJ0YWluXG4gIC8vIHN5bnRoZXRpYyBzdHJlYW0gY2FzZXMsIHN1Y2ggYXMgcGFzc3Rocm91Z2ggc3RyZWFtcywgX3JlYWRcbiAgLy8gbWF5IGJlIGEgY29tcGxldGVseSBzeW5jaHJvbm91cyBvcGVyYXRpb24gd2hpY2ggbWF5IGNoYW5nZVxuICAvLyB0aGUgc3RhdGUgb2YgdGhlIHJlYWQgYnVmZmVyLCBwcm92aWRpbmcgZW5vdWdoIGRhdGEgd2hlblxuICAvLyBiZWZvcmUgdGhlcmUgd2FzICpub3QqIGVub3VnaC5cbiAgLy9cbiAgLy8gU28sIHRoZSBzdGVwcyBhcmU6XG4gIC8vIDEuIEZpZ3VyZSBvdXQgd2hhdCB0aGUgc3RhdGUgb2YgdGhpbmdzIHdpbGwgYmUgYWZ0ZXIgd2UgZG9cbiAgLy8gYSByZWFkIGZyb20gdGhlIGJ1ZmZlci5cbiAgLy9cbiAgLy8gMi4gSWYgdGhhdCByZXN1bHRpbmcgc3RhdGUgd2lsbCB0cmlnZ2VyIGEgX3JlYWQsIHRoZW4gY2FsbCBfcmVhZC5cbiAgLy8gTm90ZSB0aGF0IHRoaXMgbWF5IGJlIGFzeW5jaHJvbm91cywgb3Igc3luY2hyb25vdXMuICBZZXMsIGl0IGlzXG4gIC8vIGRlZXBseSB1Z2x5IHRvIHdyaXRlIEFQSXMgdGhpcyB3YXksIGJ1dCB0aGF0IHN0aWxsIGRvZXNuJ3QgbWVhblxuICAvLyB0aGF0IHRoZSBSZWFkYWJsZSBjbGFzcyBzaG91bGQgYmVoYXZlIGltcHJvcGVybHksIGFzIHN0cmVhbXMgYXJlXG4gIC8vIGRlc2lnbmVkIHRvIGJlIHN5bmMvYXN5bmMgYWdub3N0aWMuXG4gIC8vIFRha2Ugbm90ZSBpZiB0aGUgX3JlYWQgY2FsbCBpcyBzeW5jIG9yIGFzeW5jIChpZSwgaWYgdGhlIHJlYWQgY2FsbFxuICAvLyBoYXMgcmV0dXJuZWQgeWV0KSwgc28gdGhhdCB3ZSBrbm93IHdoZXRoZXIgb3Igbm90IGl0J3Mgc2FmZSB0byBlbWl0XG4gIC8vICdyZWFkYWJsZScgZXRjLlxuICAvL1xuICAvLyAzLiBBY3R1YWxseSBwdWxsIHRoZSByZXF1ZXN0ZWQgY2h1bmtzIG91dCBvZiB0aGUgYnVmZmVyIGFuZCByZXR1cm4uXG5cbiAgLy8gaWYgd2UgbmVlZCBhIHJlYWRhYmxlIGV2ZW50LCB0aGVuIHdlIG5lZWQgdG8gZG8gc29tZSByZWFkaW5nLlxuICB2YXIgZG9SZWFkID0gc3RhdGUubmVlZFJlYWRhYmxlO1xuICBkZWJ1ZygnbmVlZCByZWFkYWJsZScsIGRvUmVhZCk7XG5cbiAgLy8gaWYgd2UgY3VycmVudGx5IGhhdmUgbGVzcyB0aGFuIHRoZSBoaWdoV2F0ZXJNYXJrLCB0aGVuIGFsc28gcmVhZCBzb21lXG4gIGlmIChzdGF0ZS5sZW5ndGggPT09IDAgfHwgc3RhdGUubGVuZ3RoIC0gbiA8IHN0YXRlLmhpZ2hXYXRlck1hcmspIHtcbiAgICBkb1JlYWQgPSB0cnVlO1xuICAgIGRlYnVnKCdsZW5ndGggbGVzcyB0aGFuIHdhdGVybWFyaycsIGRvUmVhZCk7XG4gIH1cblxuICAvLyBob3dldmVyLCBpZiB3ZSd2ZSBlbmRlZCwgdGhlbiB0aGVyZSdzIG5vIHBvaW50LCBhbmQgaWYgd2UncmUgYWxyZWFkeVxuICAvLyByZWFkaW5nLCB0aGVuIGl0J3MgdW5uZWNlc3NhcnkuXG4gIGlmIChzdGF0ZS5lbmRlZCB8fCBzdGF0ZS5yZWFkaW5nKSB7XG4gICAgZG9SZWFkID0gZmFsc2U7XG4gICAgZGVidWcoJ3JlYWRpbmcgb3IgZW5kZWQnLCBkb1JlYWQpO1xuICB9IGVsc2UgaWYgKGRvUmVhZCkge1xuICAgIGRlYnVnKCdkbyByZWFkJyk7XG4gICAgc3RhdGUucmVhZGluZyA9IHRydWU7XG4gICAgc3RhdGUuc3luYyA9IHRydWU7XG4gICAgLy8gaWYgdGhlIGxlbmd0aCBpcyBjdXJyZW50bHkgemVybywgdGhlbiB3ZSAqbmVlZCogYSByZWFkYWJsZSBldmVudC5cbiAgICBpZiAoc3RhdGUubGVuZ3RoID09PSAwKSBzdGF0ZS5uZWVkUmVhZGFibGUgPSB0cnVlO1xuICAgIC8vIGNhbGwgaW50ZXJuYWwgcmVhZCBtZXRob2RcbiAgICB0aGlzLl9yZWFkKHN0YXRlLmhpZ2hXYXRlck1hcmspO1xuICAgIHN0YXRlLnN5bmMgPSBmYWxzZTtcbiAgICAvLyBJZiBfcmVhZCBwdXNoZWQgZGF0YSBzeW5jaHJvbm91c2x5LCB0aGVuIGByZWFkaW5nYCB3aWxsIGJlIGZhbHNlLFxuICAgIC8vIGFuZCB3ZSBuZWVkIHRvIHJlLWV2YWx1YXRlIGhvdyBtdWNoIGRhdGEgd2UgY2FuIHJldHVybiB0byB0aGUgdXNlci5cbiAgICBpZiAoIXN0YXRlLnJlYWRpbmcpIG4gPSBob3dNdWNoVG9SZWFkKG5PcmlnLCBzdGF0ZSk7XG4gIH1cblxuICB2YXIgcmV0O1xuICBpZiAobiA+IDApIHJldCA9IGZyb21MaXN0KG4sIHN0YXRlKTtlbHNlIHJldCA9IG51bGw7XG5cbiAgaWYgKHJldCA9PT0gbnVsbCkge1xuICAgIHN0YXRlLm5lZWRSZWFkYWJsZSA9IHRydWU7XG4gICAgbiA9IDA7XG4gIH0gZWxzZSB7XG4gICAgc3RhdGUubGVuZ3RoIC09IG47XG4gIH1cblxuICBpZiAoc3RhdGUubGVuZ3RoID09PSAwKSB7XG4gICAgLy8gSWYgd2UgaGF2ZSBub3RoaW5nIGluIHRoZSBidWZmZXIsIHRoZW4gd2Ugd2FudCB0byBrbm93XG4gICAgLy8gYXMgc29vbiBhcyB3ZSAqZG8qIGdldCBzb21ldGhpbmcgaW50byB0aGUgYnVmZmVyLlxuICAgIGlmICghc3RhdGUuZW5kZWQpIHN0YXRlLm5lZWRSZWFkYWJsZSA9IHRydWU7XG5cbiAgICAvLyBJZiB3ZSB0cmllZCB0byByZWFkKCkgcGFzdCB0aGUgRU9GLCB0aGVuIGVtaXQgZW5kIG9uIHRoZSBuZXh0IHRpY2suXG4gICAgaWYgKG5PcmlnICE9PSBuICYmIHN0YXRlLmVuZGVkKSBlbmRSZWFkYWJsZSh0aGlzKTtcbiAgfVxuXG4gIGlmIChyZXQgIT09IG51bGwpIHRoaXMuZW1pdCgnZGF0YScsIHJldCk7XG5cbiAgcmV0dXJuIHJldDtcbn07XG5cbmZ1bmN0aW9uIG9uRW9mQ2h1bmsoc3RyZWFtLCBzdGF0ZSkge1xuICBpZiAoc3RhdGUuZW5kZWQpIHJldHVybjtcbiAgaWYgKHN0YXRlLmRlY29kZXIpIHtcbiAgICB2YXIgY2h1bmsgPSBzdGF0ZS5kZWNvZGVyLmVuZCgpO1xuICAgIGlmIChjaHVuayAmJiBjaHVuay5sZW5ndGgpIHtcbiAgICAgIHN0YXRlLmJ1ZmZlci5wdXNoKGNodW5rKTtcbiAgICAgIHN0YXRlLmxlbmd0aCArPSBzdGF0ZS5vYmplY3RNb2RlID8gMSA6IGNodW5rLmxlbmd0aDtcbiAgICB9XG4gIH1cbiAgc3RhdGUuZW5kZWQgPSB0cnVlO1xuXG4gIC8vIGVtaXQgJ3JlYWRhYmxlJyBub3cgdG8gbWFrZSBzdXJlIGl0IGdldHMgcGlja2VkIHVwLlxuICBlbWl0UmVhZGFibGUoc3RyZWFtKTtcbn1cblxuLy8gRG9uJ3QgZW1pdCByZWFkYWJsZSByaWdodCBhd2F5IGluIHN5bmMgbW9kZSwgYmVjYXVzZSB0aGlzIGNhbiB0cmlnZ2VyXG4vLyBhbm90aGVyIHJlYWQoKSBjYWxsID0+IHN0YWNrIG92ZXJmbG93LiAgVGhpcyB3YXksIGl0IG1pZ2h0IHRyaWdnZXJcbi8vIGEgbmV4dFRpY2sgcmVjdXJzaW9uIHdhcm5pbmcsIGJ1dCB0aGF0J3Mgbm90IHNvIGJhZC5cbmZ1bmN0aW9uIGVtaXRSZWFkYWJsZShzdHJlYW0pIHtcbiAgdmFyIHN0YXRlID0gc3RyZWFtLl9yZWFkYWJsZVN0YXRlO1xuICBzdGF0ZS5uZWVkUmVhZGFibGUgPSBmYWxzZTtcbiAgaWYgKCFzdGF0ZS5lbWl0dGVkUmVhZGFibGUpIHtcbiAgICBkZWJ1ZygnZW1pdFJlYWRhYmxlJywgc3RhdGUuZmxvd2luZyk7XG4gICAgc3RhdGUuZW1pdHRlZFJlYWRhYmxlID0gdHJ1ZTtcbiAgICBpZiAoc3RhdGUuc3luYykgcG5hLm5leHRUaWNrKGVtaXRSZWFkYWJsZV8sIHN0cmVhbSk7ZWxzZSBlbWl0UmVhZGFibGVfKHN0cmVhbSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZW1pdFJlYWRhYmxlXyhzdHJlYW0pIHtcbiAgZGVidWcoJ2VtaXQgcmVhZGFibGUnKTtcbiAgc3RyZWFtLmVtaXQoJ3JlYWRhYmxlJyk7XG4gIGZsb3coc3RyZWFtKTtcbn1cblxuLy8gYXQgdGhpcyBwb2ludCwgdGhlIHVzZXIgaGFzIHByZXN1bWFibHkgc2VlbiB0aGUgJ3JlYWRhYmxlJyBldmVudCxcbi8vIGFuZCBjYWxsZWQgcmVhZCgpIHRvIGNvbnN1bWUgc29tZSBkYXRhLiAgdGhhdCBtYXkgaGF2ZSB0cmlnZ2VyZWRcbi8vIGluIHR1cm4gYW5vdGhlciBfcmVhZChuKSBjYWxsLCBpbiB3aGljaCBjYXNlIHJlYWRpbmcgPSB0cnVlIGlmXG4vLyBpdCdzIGluIHByb2dyZXNzLlxuLy8gSG93ZXZlciwgaWYgd2UncmUgbm90IGVuZGVkLCBvciByZWFkaW5nLCBhbmQgdGhlIGxlbmd0aCA8IGh3bSxcbi8vIHRoZW4gZ28gYWhlYWQgYW5kIHRyeSB0byByZWFkIHNvbWUgbW9yZSBwcmVlbXB0aXZlbHkuXG5mdW5jdGlvbiBtYXliZVJlYWRNb3JlKHN0cmVhbSwgc3RhdGUpIHtcbiAgaWYgKCFzdGF0ZS5yZWFkaW5nTW9yZSkge1xuICAgIHN0YXRlLnJlYWRpbmdNb3JlID0gdHJ1ZTtcbiAgICBwbmEubmV4dFRpY2sobWF5YmVSZWFkTW9yZV8sIHN0cmVhbSwgc3RhdGUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1heWJlUmVhZE1vcmVfKHN0cmVhbSwgc3RhdGUpIHtcbiAgdmFyIGxlbiA9IHN0YXRlLmxlbmd0aDtcbiAgd2hpbGUgKCFzdGF0ZS5yZWFkaW5nICYmICFzdGF0ZS5mbG93aW5nICYmICFzdGF0ZS5lbmRlZCAmJiBzdGF0ZS5sZW5ndGggPCBzdGF0ZS5oaWdoV2F0ZXJNYXJrKSB7XG4gICAgZGVidWcoJ21heWJlUmVhZE1vcmUgcmVhZCAwJyk7XG4gICAgc3RyZWFtLnJlYWQoMCk7XG4gICAgaWYgKGxlbiA9PT0gc3RhdGUubGVuZ3RoKVxuICAgICAgLy8gZGlkbid0IGdldCBhbnkgZGF0YSwgc3RvcCBzcGlubmluZy5cbiAgICAgIGJyZWFrO2Vsc2UgbGVuID0gc3RhdGUubGVuZ3RoO1xuICB9XG4gIHN0YXRlLnJlYWRpbmdNb3JlID0gZmFsc2U7XG59XG5cbi8vIGFic3RyYWN0IG1ldGhvZC4gIHRvIGJlIG92ZXJyaWRkZW4gaW4gc3BlY2lmaWMgaW1wbGVtZW50YXRpb24gY2xhc3Nlcy5cbi8vIGNhbGwgY2IoZXIsIGRhdGEpIHdoZXJlIGRhdGEgaXMgPD0gbiBpbiBsZW5ndGguXG4vLyBmb3IgdmlydHVhbCAobm9uLXN0cmluZywgbm9uLWJ1ZmZlcikgc3RyZWFtcywgXCJsZW5ndGhcIiBpcyBzb21ld2hhdFxuLy8gYXJiaXRyYXJ5LCBhbmQgcGVyaGFwcyBub3QgdmVyeSBtZWFuaW5nZnVsLlxuUmVhZGFibGUucHJvdG90eXBlLl9yZWFkID0gZnVuY3Rpb24gKG4pIHtcbiAgdGhpcy5lbWl0KCdlcnJvcicsIG5ldyBFcnJvcignX3JlYWQoKSBpcyBub3QgaW1wbGVtZW50ZWQnKSk7XG59O1xuXG5SZWFkYWJsZS5wcm90b3R5cGUucGlwZSA9IGZ1bmN0aW9uIChkZXN0LCBwaXBlT3B0cykge1xuICB2YXIgc3JjID0gdGhpcztcbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcblxuICBzd2l0Y2ggKHN0YXRlLnBpcGVzQ291bnQpIHtcbiAgICBjYXNlIDA6XG4gICAgICBzdGF0ZS5waXBlcyA9IGRlc3Q7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDE6XG4gICAgICBzdGF0ZS5waXBlcyA9IFtzdGF0ZS5waXBlcywgZGVzdF07XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgc3RhdGUucGlwZXMucHVzaChkZXN0KTtcbiAgICAgIGJyZWFrO1xuICB9XG4gIHN0YXRlLnBpcGVzQ291bnQgKz0gMTtcbiAgZGVidWcoJ3BpcGUgY291bnQ9JWQgb3B0cz0laicsIHN0YXRlLnBpcGVzQ291bnQsIHBpcGVPcHRzKTtcblxuICB2YXIgZG9FbmQgPSAoIXBpcGVPcHRzIHx8IHBpcGVPcHRzLmVuZCAhPT0gZmFsc2UpICYmIGRlc3QgIT09IHByb2Nlc3Muc3Rkb3V0ICYmIGRlc3QgIT09IHByb2Nlc3Muc3RkZXJyO1xuXG4gIHZhciBlbmRGbiA9IGRvRW5kID8gb25lbmQgOiB1bnBpcGU7XG4gIGlmIChzdGF0ZS5lbmRFbWl0dGVkKSBwbmEubmV4dFRpY2soZW5kRm4pO2Vsc2Ugc3JjLm9uY2UoJ2VuZCcsIGVuZEZuKTtcblxuICBkZXN0Lm9uKCd1bnBpcGUnLCBvbnVucGlwZSk7XG4gIGZ1bmN0aW9uIG9udW5waXBlKHJlYWRhYmxlLCB1bnBpcGVJbmZvKSB7XG4gICAgZGVidWcoJ29udW5waXBlJyk7XG4gICAgaWYgKHJlYWRhYmxlID09PSBzcmMpIHtcbiAgICAgIGlmICh1bnBpcGVJbmZvICYmIHVucGlwZUluZm8uaGFzVW5waXBlZCA9PT0gZmFsc2UpIHtcbiAgICAgICAgdW5waXBlSW5mby5oYXNVbnBpcGVkID0gdHJ1ZTtcbiAgICAgICAgY2xlYW51cCgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG9uZW5kKCkge1xuICAgIGRlYnVnKCdvbmVuZCcpO1xuICAgIGRlc3QuZW5kKCk7XG4gIH1cblxuICAvLyB3aGVuIHRoZSBkZXN0IGRyYWlucywgaXQgcmVkdWNlcyB0aGUgYXdhaXREcmFpbiBjb3VudGVyXG4gIC8vIG9uIHRoZSBzb3VyY2UuICBUaGlzIHdvdWxkIGJlIG1vcmUgZWxlZ2FudCB3aXRoIGEgLm9uY2UoKVxuICAvLyBoYW5kbGVyIGluIGZsb3coKSwgYnV0IGFkZGluZyBhbmQgcmVtb3ZpbmcgcmVwZWF0ZWRseSBpc1xuICAvLyB0b28gc2xvdy5cbiAgdmFyIG9uZHJhaW4gPSBwaXBlT25EcmFpbihzcmMpO1xuICBkZXN0Lm9uKCdkcmFpbicsIG9uZHJhaW4pO1xuXG4gIHZhciBjbGVhbmVkVXAgPSBmYWxzZTtcbiAgZnVuY3Rpb24gY2xlYW51cCgpIHtcbiAgICBkZWJ1ZygnY2xlYW51cCcpO1xuICAgIC8vIGNsZWFudXAgZXZlbnQgaGFuZGxlcnMgb25jZSB0aGUgcGlwZSBpcyBicm9rZW5cbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdjbG9zZScsIG9uY2xvc2UpO1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2ZpbmlzaCcsIG9uZmluaXNoKTtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdkcmFpbicsIG9uZHJhaW4pO1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2Vycm9yJywgb25lcnJvcik7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcigndW5waXBlJywgb251bnBpcGUpO1xuICAgIHNyYy5yZW1vdmVMaXN0ZW5lcignZW5kJywgb25lbmQpO1xuICAgIHNyYy5yZW1vdmVMaXN0ZW5lcignZW5kJywgdW5waXBlKTtcbiAgICBzcmMucmVtb3ZlTGlzdGVuZXIoJ2RhdGEnLCBvbmRhdGEpO1xuXG4gICAgY2xlYW5lZFVwID0gdHJ1ZTtcblxuICAgIC8vIGlmIHRoZSByZWFkZXIgaXMgd2FpdGluZyBmb3IgYSBkcmFpbiBldmVudCBmcm9tIHRoaXNcbiAgICAvLyBzcGVjaWZpYyB3cml0ZXIsIHRoZW4gaXQgd291bGQgY2F1c2UgaXQgdG8gbmV2ZXIgc3RhcnRcbiAgICAvLyBmbG93aW5nIGFnYWluLlxuICAgIC8vIFNvLCBpZiB0aGlzIGlzIGF3YWl0aW5nIGEgZHJhaW4sIHRoZW4gd2UganVzdCBjYWxsIGl0IG5vdy5cbiAgICAvLyBJZiB3ZSBkb24ndCBrbm93LCB0aGVuIGFzc3VtZSB0aGF0IHdlIGFyZSB3YWl0aW5nIGZvciBvbmUuXG4gICAgaWYgKHN0YXRlLmF3YWl0RHJhaW4gJiYgKCFkZXN0Ll93cml0YWJsZVN0YXRlIHx8IGRlc3QuX3dyaXRhYmxlU3RhdGUubmVlZERyYWluKSkgb25kcmFpbigpO1xuICB9XG5cbiAgLy8gSWYgdGhlIHVzZXIgcHVzaGVzIG1vcmUgZGF0YSB3aGlsZSB3ZSdyZSB3cml0aW5nIHRvIGRlc3QgdGhlbiB3ZSdsbCBlbmQgdXBcbiAgLy8gaW4gb25kYXRhIGFnYWluLiBIb3dldmVyLCB3ZSBvbmx5IHdhbnQgdG8gaW5jcmVhc2UgYXdhaXREcmFpbiBvbmNlIGJlY2F1c2VcbiAgLy8gZGVzdCB3aWxsIG9ubHkgZW1pdCBvbmUgJ2RyYWluJyBldmVudCBmb3IgdGhlIG11bHRpcGxlIHdyaXRlcy5cbiAgLy8gPT4gSW50cm9kdWNlIGEgZ3VhcmQgb24gaW5jcmVhc2luZyBhd2FpdERyYWluLlxuICB2YXIgaW5jcmVhc2VkQXdhaXREcmFpbiA9IGZhbHNlO1xuICBzcmMub24oJ2RhdGEnLCBvbmRhdGEpO1xuICBmdW5jdGlvbiBvbmRhdGEoY2h1bmspIHtcbiAgICBkZWJ1Zygnb25kYXRhJyk7XG4gICAgaW5jcmVhc2VkQXdhaXREcmFpbiA9IGZhbHNlO1xuICAgIHZhciByZXQgPSBkZXN0LndyaXRlKGNodW5rKTtcbiAgICBpZiAoZmFsc2UgPT09IHJldCAmJiAhaW5jcmVhc2VkQXdhaXREcmFpbikge1xuICAgICAgLy8gSWYgdGhlIHVzZXIgdW5waXBlZCBkdXJpbmcgYGRlc3Qud3JpdGUoKWAsIGl0IGlzIHBvc3NpYmxlXG4gICAgICAvLyB0byBnZXQgc3R1Y2sgaW4gYSBwZXJtYW5lbnRseSBwYXVzZWQgc3RhdGUgaWYgdGhhdCB3cml0ZVxuICAgICAgLy8gYWxzbyByZXR1cm5lZCBmYWxzZS5cbiAgICAgIC8vID0+IENoZWNrIHdoZXRoZXIgYGRlc3RgIGlzIHN0aWxsIGEgcGlwaW5nIGRlc3RpbmF0aW9uLlxuICAgICAgaWYgKChzdGF0ZS5waXBlc0NvdW50ID09PSAxICYmIHN0YXRlLnBpcGVzID09PSBkZXN0IHx8IHN0YXRlLnBpcGVzQ291bnQgPiAxICYmIGluZGV4T2Yoc3RhdGUucGlwZXMsIGRlc3QpICE9PSAtMSkgJiYgIWNsZWFuZWRVcCkge1xuICAgICAgICBkZWJ1ZygnZmFsc2Ugd3JpdGUgcmVzcG9uc2UsIHBhdXNlJywgc3JjLl9yZWFkYWJsZVN0YXRlLmF3YWl0RHJhaW4pO1xuICAgICAgICBzcmMuX3JlYWRhYmxlU3RhdGUuYXdhaXREcmFpbisrO1xuICAgICAgICBpbmNyZWFzZWRBd2FpdERyYWluID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHNyYy5wYXVzZSgpO1xuICAgIH1cbiAgfVxuXG4gIC8vIGlmIHRoZSBkZXN0IGhhcyBhbiBlcnJvciwgdGhlbiBzdG9wIHBpcGluZyBpbnRvIGl0LlxuICAvLyBob3dldmVyLCBkb24ndCBzdXBwcmVzcyB0aGUgdGhyb3dpbmcgYmVoYXZpb3IgZm9yIHRoaXMuXG4gIGZ1bmN0aW9uIG9uZXJyb3IoZXIpIHtcbiAgICBkZWJ1Zygnb25lcnJvcicsIGVyKTtcbiAgICB1bnBpcGUoKTtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIG9uZXJyb3IpO1xuICAgIGlmIChFRWxpc3RlbmVyQ291bnQoZGVzdCwgJ2Vycm9yJykgPT09IDApIGRlc3QuZW1pdCgnZXJyb3InLCBlcik7XG4gIH1cblxuICAvLyBNYWtlIHN1cmUgb3VyIGVycm9yIGhhbmRsZXIgaXMgYXR0YWNoZWQgYmVmb3JlIHVzZXJsYW5kIG9uZXMuXG4gIHByZXBlbmRMaXN0ZW5lcihkZXN0LCAnZXJyb3InLCBvbmVycm9yKTtcblxuICAvLyBCb3RoIGNsb3NlIGFuZCBmaW5pc2ggc2hvdWxkIHRyaWdnZXIgdW5waXBlLCBidXQgb25seSBvbmNlLlxuICBmdW5jdGlvbiBvbmNsb3NlKCkge1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2ZpbmlzaCcsIG9uZmluaXNoKTtcbiAgICB1bnBpcGUoKTtcbiAgfVxuICBkZXN0Lm9uY2UoJ2Nsb3NlJywgb25jbG9zZSk7XG4gIGZ1bmN0aW9uIG9uZmluaXNoKCkge1xuICAgIGRlYnVnKCdvbmZpbmlzaCcpO1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2Nsb3NlJywgb25jbG9zZSk7XG4gICAgdW5waXBlKCk7XG4gIH1cbiAgZGVzdC5vbmNlKCdmaW5pc2gnLCBvbmZpbmlzaCk7XG5cbiAgZnVuY3Rpb24gdW5waXBlKCkge1xuICAgIGRlYnVnKCd1bnBpcGUnKTtcbiAgICBzcmMudW5waXBlKGRlc3QpO1xuICB9XG5cbiAgLy8gdGVsbCB0aGUgZGVzdCB0aGF0IGl0J3MgYmVpbmcgcGlwZWQgdG9cbiAgZGVzdC5lbWl0KCdwaXBlJywgc3JjKTtcblxuICAvLyBzdGFydCB0aGUgZmxvdyBpZiBpdCBoYXNuJ3QgYmVlbiBzdGFydGVkIGFscmVhZHkuXG4gIGlmICghc3RhdGUuZmxvd2luZykge1xuICAgIGRlYnVnKCdwaXBlIHJlc3VtZScpO1xuICAgIHNyYy5yZXN1bWUoKTtcbiAgfVxuXG4gIHJldHVybiBkZXN0O1xufTtcblxuZnVuY3Rpb24gcGlwZU9uRHJhaW4oc3JjKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHN0YXRlID0gc3JjLl9yZWFkYWJsZVN0YXRlO1xuICAgIGRlYnVnKCdwaXBlT25EcmFpbicsIHN0YXRlLmF3YWl0RHJhaW4pO1xuICAgIGlmIChzdGF0ZS5hd2FpdERyYWluKSBzdGF0ZS5hd2FpdERyYWluLS07XG4gICAgaWYgKHN0YXRlLmF3YWl0RHJhaW4gPT09IDAgJiYgRUVsaXN0ZW5lckNvdW50KHNyYywgJ2RhdGEnKSkge1xuICAgICAgc3RhdGUuZmxvd2luZyA9IHRydWU7XG4gICAgICBmbG93KHNyYyk7XG4gICAgfVxuICB9O1xufVxuXG5SZWFkYWJsZS5wcm90b3R5cGUudW5waXBlID0gZnVuY3Rpb24gKGRlc3QpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcbiAgdmFyIHVucGlwZUluZm8gPSB7IGhhc1VucGlwZWQ6IGZhbHNlIH07XG5cbiAgLy8gaWYgd2UncmUgbm90IHBpcGluZyBhbnl3aGVyZSwgdGhlbiBkbyBub3RoaW5nLlxuICBpZiAoc3RhdGUucGlwZXNDb3VudCA9PT0gMCkgcmV0dXJuIHRoaXM7XG5cbiAgLy8ganVzdCBvbmUgZGVzdGluYXRpb24uICBtb3N0IGNvbW1vbiBjYXNlLlxuICBpZiAoc3RhdGUucGlwZXNDb3VudCA9PT0gMSkge1xuICAgIC8vIHBhc3NlZCBpbiBvbmUsIGJ1dCBpdCdzIG5vdCB0aGUgcmlnaHQgb25lLlxuICAgIGlmIChkZXN0ICYmIGRlc3QgIT09IHN0YXRlLnBpcGVzKSByZXR1cm4gdGhpcztcblxuICAgIGlmICghZGVzdCkgZGVzdCA9IHN0YXRlLnBpcGVzO1xuXG4gICAgLy8gZ290IGEgbWF0Y2guXG4gICAgc3RhdGUucGlwZXMgPSBudWxsO1xuICAgIHN0YXRlLnBpcGVzQ291bnQgPSAwO1xuICAgIHN0YXRlLmZsb3dpbmcgPSBmYWxzZTtcbiAgICBpZiAoZGVzdCkgZGVzdC5lbWl0KCd1bnBpcGUnLCB0aGlzLCB1bnBpcGVJbmZvKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8vIHNsb3cgY2FzZS4gbXVsdGlwbGUgcGlwZSBkZXN0aW5hdGlvbnMuXG5cbiAgaWYgKCFkZXN0KSB7XG4gICAgLy8gcmVtb3ZlIGFsbC5cbiAgICB2YXIgZGVzdHMgPSBzdGF0ZS5waXBlcztcbiAgICB2YXIgbGVuID0gc3RhdGUucGlwZXNDb3VudDtcbiAgICBzdGF0ZS5waXBlcyA9IG51bGw7XG4gICAgc3RhdGUucGlwZXNDb3VudCA9IDA7XG4gICAgc3RhdGUuZmxvd2luZyA9IGZhbHNlO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgZGVzdHNbaV0uZW1pdCgndW5waXBlJywgdGhpcywgdW5waXBlSW5mbyk7XG4gICAgfXJldHVybiB0aGlzO1xuICB9XG5cbiAgLy8gdHJ5IHRvIGZpbmQgdGhlIHJpZ2h0IG9uZS5cbiAgdmFyIGluZGV4ID0gaW5kZXhPZihzdGF0ZS5waXBlcywgZGVzdCk7XG4gIGlmIChpbmRleCA9PT0gLTEpIHJldHVybiB0aGlzO1xuXG4gIHN0YXRlLnBpcGVzLnNwbGljZShpbmRleCwgMSk7XG4gIHN0YXRlLnBpcGVzQ291bnQgLT0gMTtcbiAgaWYgKHN0YXRlLnBpcGVzQ291bnQgPT09IDEpIHN0YXRlLnBpcGVzID0gc3RhdGUucGlwZXNbMF07XG5cbiAgZGVzdC5lbWl0KCd1bnBpcGUnLCB0aGlzLCB1bnBpcGVJbmZvKTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8vIHNldCB1cCBkYXRhIGV2ZW50cyBpZiB0aGV5IGFyZSBhc2tlZCBmb3Jcbi8vIEVuc3VyZSByZWFkYWJsZSBsaXN0ZW5lcnMgZXZlbnR1YWxseSBnZXQgc29tZXRoaW5nXG5SZWFkYWJsZS5wcm90b3R5cGUub24gPSBmdW5jdGlvbiAoZXYsIGZuKSB7XG4gIHZhciByZXMgPSBTdHJlYW0ucHJvdG90eXBlLm9uLmNhbGwodGhpcywgZXYsIGZuKTtcblxuICBpZiAoZXYgPT09ICdkYXRhJykge1xuICAgIC8vIFN0YXJ0IGZsb3dpbmcgb24gbmV4dCB0aWNrIGlmIHN0cmVhbSBpc24ndCBleHBsaWNpdGx5IHBhdXNlZFxuICAgIGlmICh0aGlzLl9yZWFkYWJsZVN0YXRlLmZsb3dpbmcgIT09IGZhbHNlKSB0aGlzLnJlc3VtZSgpO1xuICB9IGVsc2UgaWYgKGV2ID09PSAncmVhZGFibGUnKSB7XG4gICAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcbiAgICBpZiAoIXN0YXRlLmVuZEVtaXR0ZWQgJiYgIXN0YXRlLnJlYWRhYmxlTGlzdGVuaW5nKSB7XG4gICAgICBzdGF0ZS5yZWFkYWJsZUxpc3RlbmluZyA9IHN0YXRlLm5lZWRSZWFkYWJsZSA9IHRydWU7XG4gICAgICBzdGF0ZS5lbWl0dGVkUmVhZGFibGUgPSBmYWxzZTtcbiAgICAgIGlmICghc3RhdGUucmVhZGluZykge1xuICAgICAgICBwbmEubmV4dFRpY2soblJlYWRpbmdOZXh0VGljaywgdGhpcyk7XG4gICAgICB9IGVsc2UgaWYgKHN0YXRlLmxlbmd0aCkge1xuICAgICAgICBlbWl0UmVhZGFibGUodGhpcyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlcztcbn07XG5SZWFkYWJsZS5wcm90b3R5cGUuYWRkTGlzdGVuZXIgPSBSZWFkYWJsZS5wcm90b3R5cGUub247XG5cbmZ1bmN0aW9uIG5SZWFkaW5nTmV4dFRpY2soc2VsZikge1xuICBkZWJ1ZygncmVhZGFibGUgbmV4dHRpY2sgcmVhZCAwJyk7XG4gIHNlbGYucmVhZCgwKTtcbn1cblxuLy8gcGF1c2UoKSBhbmQgcmVzdW1lKCkgYXJlIHJlbW5hbnRzIG9mIHRoZSBsZWdhY3kgcmVhZGFibGUgc3RyZWFtIEFQSVxuLy8gSWYgdGhlIHVzZXIgdXNlcyB0aGVtLCB0aGVuIHN3aXRjaCBpbnRvIG9sZCBtb2RlLlxuUmVhZGFibGUucHJvdG90eXBlLnJlc3VtZSA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcbiAgaWYgKCFzdGF0ZS5mbG93aW5nKSB7XG4gICAgZGVidWcoJ3Jlc3VtZScpO1xuICAgIHN0YXRlLmZsb3dpbmcgPSB0cnVlO1xuICAgIHJlc3VtZSh0aGlzLCBzdGF0ZSk7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5mdW5jdGlvbiByZXN1bWUoc3RyZWFtLCBzdGF0ZSkge1xuICBpZiAoIXN0YXRlLnJlc3VtZVNjaGVkdWxlZCkge1xuICAgIHN0YXRlLnJlc3VtZVNjaGVkdWxlZCA9IHRydWU7XG4gICAgcG5hLm5leHRUaWNrKHJlc3VtZV8sIHN0cmVhbSwgc3RhdGUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlc3VtZV8oc3RyZWFtLCBzdGF0ZSkge1xuICBpZiAoIXN0YXRlLnJlYWRpbmcpIHtcbiAgICBkZWJ1ZygncmVzdW1lIHJlYWQgMCcpO1xuICAgIHN0cmVhbS5yZWFkKDApO1xuICB9XG5cbiAgc3RhdGUucmVzdW1lU2NoZWR1bGVkID0gZmFsc2U7XG4gIHN0YXRlLmF3YWl0RHJhaW4gPSAwO1xuICBzdHJlYW0uZW1pdCgncmVzdW1lJyk7XG4gIGZsb3coc3RyZWFtKTtcbiAgaWYgKHN0YXRlLmZsb3dpbmcgJiYgIXN0YXRlLnJlYWRpbmcpIHN0cmVhbS5yZWFkKDApO1xufVxuXG5SZWFkYWJsZS5wcm90b3R5cGUucGF1c2UgPSBmdW5jdGlvbiAoKSB7XG4gIGRlYnVnKCdjYWxsIHBhdXNlIGZsb3dpbmc9JWonLCB0aGlzLl9yZWFkYWJsZVN0YXRlLmZsb3dpbmcpO1xuICBpZiAoZmFsc2UgIT09IHRoaXMuX3JlYWRhYmxlU3RhdGUuZmxvd2luZykge1xuICAgIGRlYnVnKCdwYXVzZScpO1xuICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUuZmxvd2luZyA9IGZhbHNlO1xuICAgIHRoaXMuZW1pdCgncGF1c2UnKTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn07XG5cbmZ1bmN0aW9uIGZsb3coc3RyZWFtKSB7XG4gIHZhciBzdGF0ZSA9IHN0cmVhbS5fcmVhZGFibGVTdGF0ZTtcbiAgZGVidWcoJ2Zsb3cnLCBzdGF0ZS5mbG93aW5nKTtcbiAgd2hpbGUgKHN0YXRlLmZsb3dpbmcgJiYgc3RyZWFtLnJlYWQoKSAhPT0gbnVsbCkge31cbn1cblxuLy8gd3JhcCBhbiBvbGQtc3R5bGUgc3RyZWFtIGFzIHRoZSBhc3luYyBkYXRhIHNvdXJjZS5cbi8vIFRoaXMgaXMgKm5vdCogcGFydCBvZiB0aGUgcmVhZGFibGUgc3RyZWFtIGludGVyZmFjZS5cbi8vIEl0IGlzIGFuIHVnbHkgdW5mb3J0dW5hdGUgbWVzcyBvZiBoaXN0b3J5LlxuUmVhZGFibGUucHJvdG90eXBlLndyYXAgPSBmdW5jdGlvbiAoc3RyZWFtKSB7XG4gIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcbiAgdmFyIHBhdXNlZCA9IGZhbHNlO1xuXG4gIHN0cmVhbS5vbignZW5kJywgZnVuY3Rpb24gKCkge1xuICAgIGRlYnVnKCd3cmFwcGVkIGVuZCcpO1xuICAgIGlmIChzdGF0ZS5kZWNvZGVyICYmICFzdGF0ZS5lbmRlZCkge1xuICAgICAgdmFyIGNodW5rID0gc3RhdGUuZGVjb2Rlci5lbmQoKTtcbiAgICAgIGlmIChjaHVuayAmJiBjaHVuay5sZW5ndGgpIF90aGlzLnB1c2goY2h1bmspO1xuICAgIH1cblxuICAgIF90aGlzLnB1c2gobnVsbCk7XG4gIH0pO1xuXG4gIHN0cmVhbS5vbignZGF0YScsIGZ1bmN0aW9uIChjaHVuaykge1xuICAgIGRlYnVnKCd3cmFwcGVkIGRhdGEnKTtcbiAgICBpZiAoc3RhdGUuZGVjb2RlcikgY2h1bmsgPSBzdGF0ZS5kZWNvZGVyLndyaXRlKGNodW5rKTtcblxuICAgIC8vIGRvbid0IHNraXAgb3ZlciBmYWxzeSB2YWx1ZXMgaW4gb2JqZWN0TW9kZVxuICAgIGlmIChzdGF0ZS5vYmplY3RNb2RlICYmIChjaHVuayA9PT0gbnVsbCB8fCBjaHVuayA9PT0gdW5kZWZpbmVkKSkgcmV0dXJuO2Vsc2UgaWYgKCFzdGF0ZS5vYmplY3RNb2RlICYmICghY2h1bmsgfHwgIWNodW5rLmxlbmd0aCkpIHJldHVybjtcblxuICAgIHZhciByZXQgPSBfdGhpcy5wdXNoKGNodW5rKTtcbiAgICBpZiAoIXJldCkge1xuICAgICAgcGF1c2VkID0gdHJ1ZTtcbiAgICAgIHN0cmVhbS5wYXVzZSgpO1xuICAgIH1cbiAgfSk7XG5cbiAgLy8gcHJveHkgYWxsIHRoZSBvdGhlciBtZXRob2RzLlxuICAvLyBpbXBvcnRhbnQgd2hlbiB3cmFwcGluZyBmaWx0ZXJzIGFuZCBkdXBsZXhlcy5cbiAgZm9yICh2YXIgaSBpbiBzdHJlYW0pIHtcbiAgICBpZiAodGhpc1tpXSA9PT0gdW5kZWZpbmVkICYmIHR5cGVvZiBzdHJlYW1baV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRoaXNbaV0gPSBmdW5jdGlvbiAobWV0aG9kKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIHN0cmVhbVttZXRob2RdLmFwcGx5KHN0cmVhbSwgYXJndW1lbnRzKTtcbiAgICAgICAgfTtcbiAgICAgIH0oaSk7XG4gICAgfVxuICB9XG5cbiAgLy8gcHJveHkgY2VydGFpbiBpbXBvcnRhbnQgZXZlbnRzLlxuICBmb3IgKHZhciBuID0gMDsgbiA8IGtQcm94eUV2ZW50cy5sZW5ndGg7IG4rKykge1xuICAgIHN0cmVhbS5vbihrUHJveHlFdmVudHNbbl0sIHRoaXMuZW1pdC5iaW5kKHRoaXMsIGtQcm94eUV2ZW50c1tuXSkpO1xuICB9XG5cbiAgLy8gd2hlbiB3ZSB0cnkgdG8gY29uc3VtZSBzb21lIG1vcmUgYnl0ZXMsIHNpbXBseSB1bnBhdXNlIHRoZVxuICAvLyB1bmRlcmx5aW5nIHN0cmVhbS5cbiAgdGhpcy5fcmVhZCA9IGZ1bmN0aW9uIChuKSB7XG4gICAgZGVidWcoJ3dyYXBwZWQgX3JlYWQnLCBuKTtcbiAgICBpZiAocGF1c2VkKSB7XG4gICAgICBwYXVzZWQgPSBmYWxzZTtcbiAgICAgIHN0cmVhbS5yZXN1bWUoKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoUmVhZGFibGUucHJvdG90eXBlLCAncmVhZGFibGVIaWdoV2F0ZXJNYXJrJywge1xuICAvLyBtYWtpbmcgaXQgZXhwbGljaXQgdGhpcyBwcm9wZXJ0eSBpcyBub3QgZW51bWVyYWJsZVxuICAvLyBiZWNhdXNlIG90aGVyd2lzZSBzb21lIHByb3RvdHlwZSBtYW5pcHVsYXRpb24gaW5cbiAgLy8gdXNlcmxhbmQgd2lsbCBmYWlsXG4gIGVudW1lcmFibGU6IGZhbHNlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5fcmVhZGFibGVTdGF0ZS5oaWdoV2F0ZXJNYXJrO1xuICB9XG59KTtcblxuLy8gZXhwb3NlZCBmb3IgdGVzdGluZyBwdXJwb3NlcyBvbmx5LlxuUmVhZGFibGUuX2Zyb21MaXN0ID0gZnJvbUxpc3Q7XG5cbi8vIFBsdWNrIG9mZiBuIGJ5dGVzIGZyb20gYW4gYXJyYXkgb2YgYnVmZmVycy5cbi8vIExlbmd0aCBpcyB0aGUgY29tYmluZWQgbGVuZ3RocyBvZiBhbGwgdGhlIGJ1ZmZlcnMgaW4gdGhlIGxpc3QuXG4vLyBUaGlzIGZ1bmN0aW9uIGlzIGRlc2lnbmVkIHRvIGJlIGlubGluYWJsZSwgc28gcGxlYXNlIHRha2UgY2FyZSB3aGVuIG1ha2luZ1xuLy8gY2hhbmdlcyB0byB0aGUgZnVuY3Rpb24gYm9keS5cbmZ1bmN0aW9uIGZyb21MaXN0KG4sIHN0YXRlKSB7XG4gIC8vIG5vdGhpbmcgYnVmZmVyZWRcbiAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCkgcmV0dXJuIG51bGw7XG5cbiAgdmFyIHJldDtcbiAgaWYgKHN0YXRlLm9iamVjdE1vZGUpIHJldCA9IHN0YXRlLmJ1ZmZlci5zaGlmdCgpO2Vsc2UgaWYgKCFuIHx8IG4gPj0gc3RhdGUubGVuZ3RoKSB7XG4gICAgLy8gcmVhZCBpdCBhbGwsIHRydW5jYXRlIHRoZSBsaXN0XG4gICAgaWYgKHN0YXRlLmRlY29kZXIpIHJldCA9IHN0YXRlLmJ1ZmZlci5qb2luKCcnKTtlbHNlIGlmIChzdGF0ZS5idWZmZXIubGVuZ3RoID09PSAxKSByZXQgPSBzdGF0ZS5idWZmZXIuaGVhZC5kYXRhO2Vsc2UgcmV0ID0gc3RhdGUuYnVmZmVyLmNvbmNhdChzdGF0ZS5sZW5ndGgpO1xuICAgIHN0YXRlLmJ1ZmZlci5jbGVhcigpO1xuICB9IGVsc2Uge1xuICAgIC8vIHJlYWQgcGFydCBvZiBsaXN0XG4gICAgcmV0ID0gZnJvbUxpc3RQYXJ0aWFsKG4sIHN0YXRlLmJ1ZmZlciwgc3RhdGUuZGVjb2Rlcik7XG4gIH1cblxuICByZXR1cm4gcmV0O1xufVxuXG4vLyBFeHRyYWN0cyBvbmx5IGVub3VnaCBidWZmZXJlZCBkYXRhIHRvIHNhdGlzZnkgdGhlIGFtb3VudCByZXF1ZXN0ZWQuXG4vLyBUaGlzIGZ1bmN0aW9uIGlzIGRlc2lnbmVkIHRvIGJlIGlubGluYWJsZSwgc28gcGxlYXNlIHRha2UgY2FyZSB3aGVuIG1ha2luZ1xuLy8gY2hhbmdlcyB0byB0aGUgZnVuY3Rpb24gYm9keS5cbmZ1bmN0aW9uIGZyb21MaXN0UGFydGlhbChuLCBsaXN0LCBoYXNTdHJpbmdzKSB7XG4gIHZhciByZXQ7XG4gIGlmIChuIDwgbGlzdC5oZWFkLmRhdGEubGVuZ3RoKSB7XG4gICAgLy8gc2xpY2UgaXMgdGhlIHNhbWUgZm9yIGJ1ZmZlcnMgYW5kIHN0cmluZ3NcbiAgICByZXQgPSBsaXN0LmhlYWQuZGF0YS5zbGljZSgwLCBuKTtcbiAgICBsaXN0LmhlYWQuZGF0YSA9IGxpc3QuaGVhZC5kYXRhLnNsaWNlKG4pO1xuICB9IGVsc2UgaWYgKG4gPT09IGxpc3QuaGVhZC5kYXRhLmxlbmd0aCkge1xuICAgIC8vIGZpcnN0IGNodW5rIGlzIGEgcGVyZmVjdCBtYXRjaFxuICAgIHJldCA9IGxpc3Quc2hpZnQoKTtcbiAgfSBlbHNlIHtcbiAgICAvLyByZXN1bHQgc3BhbnMgbW9yZSB0aGFuIG9uZSBidWZmZXJcbiAgICByZXQgPSBoYXNTdHJpbmdzID8gY29weUZyb21CdWZmZXJTdHJpbmcobiwgbGlzdCkgOiBjb3B5RnJvbUJ1ZmZlcihuLCBsaXN0KTtcbiAgfVxuICByZXR1cm4gcmV0O1xufVxuXG4vLyBDb3BpZXMgYSBzcGVjaWZpZWQgYW1vdW50IG9mIGNoYXJhY3RlcnMgZnJvbSB0aGUgbGlzdCBvZiBidWZmZXJlZCBkYXRhXG4vLyBjaHVua3MuXG4vLyBUaGlzIGZ1bmN0aW9uIGlzIGRlc2lnbmVkIHRvIGJlIGlubGluYWJsZSwgc28gcGxlYXNlIHRha2UgY2FyZSB3aGVuIG1ha2luZ1xuLy8gY2hhbmdlcyB0byB0aGUgZnVuY3Rpb24gYm9keS5cbmZ1bmN0aW9uIGNvcHlGcm9tQnVmZmVyU3RyaW5nKG4sIGxpc3QpIHtcbiAgdmFyIHAgPSBsaXN0LmhlYWQ7XG4gIHZhciBjID0gMTtcbiAgdmFyIHJldCA9IHAuZGF0YTtcbiAgbiAtPSByZXQubGVuZ3RoO1xuICB3aGlsZSAocCA9IHAubmV4dCkge1xuICAgIHZhciBzdHIgPSBwLmRhdGE7XG4gICAgdmFyIG5iID0gbiA+IHN0ci5sZW5ndGggPyBzdHIubGVuZ3RoIDogbjtcbiAgICBpZiAobmIgPT09IHN0ci5sZW5ndGgpIHJldCArPSBzdHI7ZWxzZSByZXQgKz0gc3RyLnNsaWNlKDAsIG4pO1xuICAgIG4gLT0gbmI7XG4gICAgaWYgKG4gPT09IDApIHtcbiAgICAgIGlmIChuYiA9PT0gc3RyLmxlbmd0aCkge1xuICAgICAgICArK2M7XG4gICAgICAgIGlmIChwLm5leHQpIGxpc3QuaGVhZCA9IHAubmV4dDtlbHNlIGxpc3QuaGVhZCA9IGxpc3QudGFpbCA9IG51bGw7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsaXN0LmhlYWQgPSBwO1xuICAgICAgICBwLmRhdGEgPSBzdHIuc2xpY2UobmIpO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgfVxuICAgICsrYztcbiAgfVxuICBsaXN0Lmxlbmd0aCAtPSBjO1xuICByZXR1cm4gcmV0O1xufVxuXG4vLyBDb3BpZXMgYSBzcGVjaWZpZWQgYW1vdW50IG9mIGJ5dGVzIGZyb20gdGhlIGxpc3Qgb2YgYnVmZmVyZWQgZGF0YSBjaHVua3MuXG4vLyBUaGlzIGZ1bmN0aW9uIGlzIGRlc2lnbmVkIHRvIGJlIGlubGluYWJsZSwgc28gcGxlYXNlIHRha2UgY2FyZSB3aGVuIG1ha2luZ1xuLy8gY2hhbmdlcyB0byB0aGUgZnVuY3Rpb24gYm9keS5cbmZ1bmN0aW9uIGNvcHlGcm9tQnVmZmVyKG4sIGxpc3QpIHtcbiAgdmFyIHJldCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShuKTtcbiAgdmFyIHAgPSBsaXN0LmhlYWQ7XG4gIHZhciBjID0gMTtcbiAgcC5kYXRhLmNvcHkocmV0KTtcbiAgbiAtPSBwLmRhdGEubGVuZ3RoO1xuICB3aGlsZSAocCA9IHAubmV4dCkge1xuICAgIHZhciBidWYgPSBwLmRhdGE7XG4gICAgdmFyIG5iID0gbiA+IGJ1Zi5sZW5ndGggPyBidWYubGVuZ3RoIDogbjtcbiAgICBidWYuY29weShyZXQsIHJldC5sZW5ndGggLSBuLCAwLCBuYik7XG4gICAgbiAtPSBuYjtcbiAgICBpZiAobiA9PT0gMCkge1xuICAgICAgaWYgKG5iID09PSBidWYubGVuZ3RoKSB7XG4gICAgICAgICsrYztcbiAgICAgICAgaWYgKHAubmV4dCkgbGlzdC5oZWFkID0gcC5uZXh0O2Vsc2UgbGlzdC5oZWFkID0gbGlzdC50YWlsID0gbnVsbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxpc3QuaGVhZCA9IHA7XG4gICAgICAgIHAuZGF0YSA9IGJ1Zi5zbGljZShuYik7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgKytjO1xuICB9XG4gIGxpc3QubGVuZ3RoIC09IGM7XG4gIHJldHVybiByZXQ7XG59XG5cbmZ1bmN0aW9uIGVuZFJlYWRhYmxlKHN0cmVhbSkge1xuICB2YXIgc3RhdGUgPSBzdHJlYW0uX3JlYWRhYmxlU3RhdGU7XG5cbiAgLy8gSWYgd2UgZ2V0IGhlcmUgYmVmb3JlIGNvbnN1bWluZyBhbGwgdGhlIGJ5dGVzLCB0aGVuIHRoYXQgaXMgYVxuICAvLyBidWcgaW4gbm9kZS4gIFNob3VsZCBuZXZlciBoYXBwZW4uXG4gIGlmIChzdGF0ZS5sZW5ndGggPiAwKSB0aHJvdyBuZXcgRXJyb3IoJ1wiZW5kUmVhZGFibGUoKVwiIGNhbGxlZCBvbiBub24tZW1wdHkgc3RyZWFtJyk7XG5cbiAgaWYgKCFzdGF0ZS5lbmRFbWl0dGVkKSB7XG4gICAgc3RhdGUuZW5kZWQgPSB0cnVlO1xuICAgIHBuYS5uZXh0VGljayhlbmRSZWFkYWJsZU5ULCBzdGF0ZSwgc3RyZWFtKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBlbmRSZWFkYWJsZU5UKHN0YXRlLCBzdHJlYW0pIHtcbiAgLy8gQ2hlY2sgdGhhdCB3ZSBkaWRuJ3QgZ2V0IG9uZSBsYXN0IHVuc2hpZnQuXG4gIGlmICghc3RhdGUuZW5kRW1pdHRlZCAmJiBzdGF0ZS5sZW5ndGggPT09IDApIHtcbiAgICBzdGF0ZS5lbmRFbWl0dGVkID0gdHJ1ZTtcbiAgICBzdHJlYW0ucmVhZGFibGUgPSBmYWxzZTtcbiAgICBzdHJlYW0uZW1pdCgnZW5kJyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5kZXhPZih4cywgeCkge1xuICBmb3IgKHZhciBpID0gMCwgbCA9IHhzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGlmICh4c1tpXSA9PT0geCkgcmV0dXJuIGk7XG4gIH1cbiAgcmV0dXJuIC0xO1xufSIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnZXZlbnRzJykuRXZlbnRFbWl0dGVyO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKjxyZXBsYWNlbWVudD4qL1xuXG52YXIgcG5hID0gcmVxdWlyZSgncHJvY2Vzcy1uZXh0aWNrLWFyZ3MnKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG4vLyB1bmRvY3VtZW50ZWQgY2IoKSBBUEksIG5lZWRlZCBmb3IgY29yZSwgbm90IGZvciBwdWJsaWMgQVBJXG5mdW5jdGlvbiBkZXN0cm95KGVyciwgY2IpIHtcbiAgdmFyIF90aGlzID0gdGhpcztcblxuICB2YXIgcmVhZGFibGVEZXN0cm95ZWQgPSB0aGlzLl9yZWFkYWJsZVN0YXRlICYmIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkO1xuICB2YXIgd3JpdGFibGVEZXN0cm95ZWQgPSB0aGlzLl93cml0YWJsZVN0YXRlICYmIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkO1xuXG4gIGlmIChyZWFkYWJsZURlc3Ryb3llZCB8fCB3cml0YWJsZURlc3Ryb3llZCkge1xuICAgIGlmIChjYikge1xuICAgICAgY2IoZXJyKTtcbiAgICB9IGVsc2UgaWYgKGVyciAmJiAoIXRoaXMuX3dyaXRhYmxlU3RhdGUgfHwgIXRoaXMuX3dyaXRhYmxlU3RhdGUuZXJyb3JFbWl0dGVkKSkge1xuICAgICAgcG5hLm5leHRUaWNrKGVtaXRFcnJvck5ULCB0aGlzLCBlcnIpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8vIHdlIHNldCBkZXN0cm95ZWQgdG8gdHJ1ZSBiZWZvcmUgZmlyaW5nIGVycm9yIGNhbGxiYWNrcyBpbiBvcmRlclxuICAvLyB0byBtYWtlIGl0IHJlLWVudHJhbmNlIHNhZmUgaW4gY2FzZSBkZXN0cm95KCkgaXMgY2FsbGVkIHdpdGhpbiBjYWxsYmFja3NcblxuICBpZiAodGhpcy5fcmVhZGFibGVTdGF0ZSkge1xuICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkID0gdHJ1ZTtcbiAgfVxuXG4gIC8vIGlmIHRoaXMgaXMgYSBkdXBsZXggc3RyZWFtIG1hcmsgdGhlIHdyaXRhYmxlIHBhcnQgYXMgZGVzdHJveWVkIGFzIHdlbGxcbiAgaWYgKHRoaXMuX3dyaXRhYmxlU3RhdGUpIHtcbiAgICB0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZCA9IHRydWU7XG4gIH1cblxuICB0aGlzLl9kZXN0cm95KGVyciB8fCBudWxsLCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgaWYgKCFjYiAmJiBlcnIpIHtcbiAgICAgIHBuYS5uZXh0VGljayhlbWl0RXJyb3JOVCwgX3RoaXMsIGVycik7XG4gICAgICBpZiAoX3RoaXMuX3dyaXRhYmxlU3RhdGUpIHtcbiAgICAgICAgX3RoaXMuX3dyaXRhYmxlU3RhdGUuZXJyb3JFbWl0dGVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGNiKSB7XG4gICAgICBjYihlcnIpO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIHVuZGVzdHJveSgpIHtcbiAgaWYgKHRoaXMuX3JlYWRhYmxlU3RhdGUpIHtcbiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZCA9IGZhbHNlO1xuICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUucmVhZGluZyA9IGZhbHNlO1xuICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUuZW5kZWQgPSBmYWxzZTtcbiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLmVuZEVtaXR0ZWQgPSBmYWxzZTtcbiAgfVxuXG4gIGlmICh0aGlzLl93cml0YWJsZVN0YXRlKSB7XG4gICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5kZXN0cm95ZWQgPSBmYWxzZTtcbiAgICB0aGlzLl93cml0YWJsZVN0YXRlLmVuZGVkID0gZmFsc2U7XG4gICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5lbmRpbmcgPSBmYWxzZTtcbiAgICB0aGlzLl93cml0YWJsZVN0YXRlLmZpbmlzaGVkID0gZmFsc2U7XG4gICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5lcnJvckVtaXR0ZWQgPSBmYWxzZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBlbWl0RXJyb3JOVChzZWxmLCBlcnIpIHtcbiAgc2VsZi5lbWl0KCdlcnJvcicsIGVycik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBkZXN0cm95OiBkZXN0cm95LFxuICB1bmRlc3Ryb3k6IHVuZGVzdHJveVxufTsiLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuLy8gYSB0cmFuc2Zvcm0gc3RyZWFtIGlzIGEgcmVhZGFibGUvd3JpdGFibGUgc3RyZWFtIHdoZXJlIHlvdSBkb1xuLy8gc29tZXRoaW5nIHdpdGggdGhlIGRhdGEuICBTb21ldGltZXMgaXQncyBjYWxsZWQgYSBcImZpbHRlclwiLFxuLy8gYnV0IHRoYXQncyBub3QgYSBncmVhdCBuYW1lIGZvciBpdCwgc2luY2UgdGhhdCBpbXBsaWVzIGEgdGhpbmcgd2hlcmVcbi8vIHNvbWUgYml0cyBwYXNzIHRocm91Z2gsIGFuZCBvdGhlcnMgYXJlIHNpbXBseSBpZ25vcmVkLiAgKFRoYXQgd291bGRcbi8vIGJlIGEgdmFsaWQgZXhhbXBsZSBvZiBhIHRyYW5zZm9ybSwgb2YgY291cnNlLilcbi8vXG4vLyBXaGlsZSB0aGUgb3V0cHV0IGlzIGNhdXNhbGx5IHJlbGF0ZWQgdG8gdGhlIGlucHV0LCBpdCdzIG5vdCBhXG4vLyBuZWNlc3NhcmlseSBzeW1tZXRyaWMgb3Igc3luY2hyb25vdXMgdHJhbnNmb3JtYXRpb24uICBGb3IgZXhhbXBsZSxcbi8vIGEgemxpYiBzdHJlYW0gbWlnaHQgdGFrZSBtdWx0aXBsZSBwbGFpbi10ZXh0IHdyaXRlcygpLCBhbmQgdGhlblxuLy8gZW1pdCBhIHNpbmdsZSBjb21wcmVzc2VkIGNodW5rIHNvbWUgdGltZSBpbiB0aGUgZnV0dXJlLlxuLy9cbi8vIEhlcmUncyBob3cgdGhpcyB3b3Jrczpcbi8vXG4vLyBUaGUgVHJhbnNmb3JtIHN0cmVhbSBoYXMgYWxsIHRoZSBhc3BlY3RzIG9mIHRoZSByZWFkYWJsZSBhbmQgd3JpdGFibGVcbi8vIHN0cmVhbSBjbGFzc2VzLiAgV2hlbiB5b3Ugd3JpdGUoY2h1bmspLCB0aGF0IGNhbGxzIF93cml0ZShjaHVuayxjYilcbi8vIGludGVybmFsbHksIGFuZCByZXR1cm5zIGZhbHNlIGlmIHRoZXJlJ3MgYSBsb3Qgb2YgcGVuZGluZyB3cml0ZXNcbi8vIGJ1ZmZlcmVkIHVwLiAgV2hlbiB5b3UgY2FsbCByZWFkKCksIHRoYXQgY2FsbHMgX3JlYWQobikgdW50aWxcbi8vIHRoZXJlJ3MgZW5vdWdoIHBlbmRpbmcgcmVhZGFibGUgZGF0YSBidWZmZXJlZCB1cC5cbi8vXG4vLyBJbiBhIHRyYW5zZm9ybSBzdHJlYW0sIHRoZSB3cml0dGVuIGRhdGEgaXMgcGxhY2VkIGluIGEgYnVmZmVyLiAgV2hlblxuLy8gX3JlYWQobikgaXMgY2FsbGVkLCBpdCB0cmFuc2Zvcm1zIHRoZSBxdWV1ZWQgdXAgZGF0YSwgY2FsbGluZyB0aGVcbi8vIGJ1ZmZlcmVkIF93cml0ZSBjYidzIGFzIGl0IGNvbnN1bWVzIGNodW5rcy4gIElmIGNvbnN1bWluZyBhIHNpbmdsZVxuLy8gd3JpdHRlbiBjaHVuayB3b3VsZCByZXN1bHQgaW4gbXVsdGlwbGUgb3V0cHV0IGNodW5rcywgdGhlbiB0aGUgZmlyc3Rcbi8vIG91dHB1dHRlZCBiaXQgY2FsbHMgdGhlIHJlYWRjYiwgYW5kIHN1YnNlcXVlbnQgY2h1bmtzIGp1c3QgZ28gaW50b1xuLy8gdGhlIHJlYWQgYnVmZmVyLCBhbmQgd2lsbCBjYXVzZSBpdCB0byBlbWl0ICdyZWFkYWJsZScgaWYgbmVjZXNzYXJ5LlxuLy9cbi8vIFRoaXMgd2F5LCBiYWNrLXByZXNzdXJlIGlzIGFjdHVhbGx5IGRldGVybWluZWQgYnkgdGhlIHJlYWRpbmcgc2lkZSxcbi8vIHNpbmNlIF9yZWFkIGhhcyB0byBiZSBjYWxsZWQgdG8gc3RhcnQgcHJvY2Vzc2luZyBhIG5ldyBjaHVuay4gIEhvd2V2ZXIsXG4vLyBhIHBhdGhvbG9naWNhbCBpbmZsYXRlIHR5cGUgb2YgdHJhbnNmb3JtIGNhbiBjYXVzZSBleGNlc3NpdmUgYnVmZmVyaW5nXG4vLyBoZXJlLiAgRm9yIGV4YW1wbGUsIGltYWdpbmUgYSBzdHJlYW0gd2hlcmUgZXZlcnkgYnl0ZSBvZiBpbnB1dCBpc1xuLy8gaW50ZXJwcmV0ZWQgYXMgYW4gaW50ZWdlciBmcm9tIDAtMjU1LCBhbmQgdGhlbiByZXN1bHRzIGluIHRoYXQgbWFueVxuLy8gYnl0ZXMgb2Ygb3V0cHV0LiAgV3JpdGluZyB0aGUgNCBieXRlcyB7ZmYsZmYsZmYsZmZ9IHdvdWxkIHJlc3VsdCBpblxuLy8gMWtiIG9mIGRhdGEgYmVpbmcgb3V0cHV0LiAgSW4gdGhpcyBjYXNlLCB5b3UgY291bGQgd3JpdGUgYSB2ZXJ5IHNtYWxsXG4vLyBhbW91bnQgb2YgaW5wdXQsIGFuZCBlbmQgdXAgd2l0aCBhIHZlcnkgbGFyZ2UgYW1vdW50IG9mIG91dHB1dC4gIEluXG4vLyBzdWNoIGEgcGF0aG9sb2dpY2FsIGluZmxhdGluZyBtZWNoYW5pc20sIHRoZXJlJ2QgYmUgbm8gd2F5IHRvIHRlbGxcbi8vIHRoZSBzeXN0ZW0gdG8gc3RvcCBkb2luZyB0aGUgdHJhbnNmb3JtLiAgQSBzaW5nbGUgNE1CIHdyaXRlIGNvdWxkXG4vLyBjYXVzZSB0aGUgc3lzdGVtIHRvIHJ1biBvdXQgb2YgbWVtb3J5LlxuLy9cbi8vIEhvd2V2ZXIsIGV2ZW4gaW4gc3VjaCBhIHBhdGhvbG9naWNhbCBjYXNlLCBvbmx5IGEgc2luZ2xlIHdyaXR0ZW4gY2h1bmtcbi8vIHdvdWxkIGJlIGNvbnN1bWVkLCBhbmQgdGhlbiB0aGUgcmVzdCB3b3VsZCB3YWl0ICh1bi10cmFuc2Zvcm1lZCkgdW50aWxcbi8vIHRoZSByZXN1bHRzIG9mIHRoZSBwcmV2aW91cyB0cmFuc2Zvcm1lZCBjaHVuayB3ZXJlIGNvbnN1bWVkLlxuXG4ndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gVHJhbnNmb3JtO1xuXG52YXIgRHVwbGV4ID0gcmVxdWlyZSgnLi9fc3RyZWFtX2R1cGxleCcpO1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIHV0aWwgPSByZXF1aXJlKCdjb3JlLXV0aWwtaXMnKTtcbnV0aWwuaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbnV0aWwuaW5oZXJpdHMoVHJhbnNmb3JtLCBEdXBsZXgpO1xuXG5mdW5jdGlvbiBhZnRlclRyYW5zZm9ybShlciwgZGF0YSkge1xuICB2YXIgdHMgPSB0aGlzLl90cmFuc2Zvcm1TdGF0ZTtcbiAgdHMudHJhbnNmb3JtaW5nID0gZmFsc2U7XG5cbiAgdmFyIGNiID0gdHMud3JpdGVjYjtcblxuICBpZiAoIWNiKSB7XG4gICAgcmV0dXJuIHRoaXMuZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IoJ3dyaXRlIGNhbGxiYWNrIGNhbGxlZCBtdWx0aXBsZSB0aW1lcycpKTtcbiAgfVxuXG4gIHRzLndyaXRlY2h1bmsgPSBudWxsO1xuICB0cy53cml0ZWNiID0gbnVsbDtcblxuICBpZiAoZGF0YSAhPSBudWxsKSAvLyBzaW5nbGUgZXF1YWxzIGNoZWNrIGZvciBib3RoIGBudWxsYCBhbmQgYHVuZGVmaW5lZGBcbiAgICB0aGlzLnB1c2goZGF0YSk7XG5cbiAgY2IoZXIpO1xuXG4gIHZhciBycyA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG4gIHJzLnJlYWRpbmcgPSBmYWxzZTtcbiAgaWYgKHJzLm5lZWRSZWFkYWJsZSB8fCBycy5sZW5ndGggPCBycy5oaWdoV2F0ZXJNYXJrKSB7XG4gICAgdGhpcy5fcmVhZChycy5oaWdoV2F0ZXJNYXJrKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBUcmFuc2Zvcm0ob3B0aW9ucykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgVHJhbnNmb3JtKSkgcmV0dXJuIG5ldyBUcmFuc2Zvcm0ob3B0aW9ucyk7XG5cbiAgRHVwbGV4LmNhbGwodGhpcywgb3B0aW9ucyk7XG5cbiAgdGhpcy5fdHJhbnNmb3JtU3RhdGUgPSB7XG4gICAgYWZ0ZXJUcmFuc2Zvcm06IGFmdGVyVHJhbnNmb3JtLmJpbmQodGhpcyksXG4gICAgbmVlZFRyYW5zZm9ybTogZmFsc2UsXG4gICAgdHJhbnNmb3JtaW5nOiBmYWxzZSxcbiAgICB3cml0ZWNiOiBudWxsLFxuICAgIHdyaXRlY2h1bms6IG51bGwsXG4gICAgd3JpdGVlbmNvZGluZzogbnVsbFxuICB9O1xuXG4gIC8vIHN0YXJ0IG91dCBhc2tpbmcgZm9yIGEgcmVhZGFibGUgZXZlbnQgb25jZSBkYXRhIGlzIHRyYW5zZm9ybWVkLlxuICB0aGlzLl9yZWFkYWJsZVN0YXRlLm5lZWRSZWFkYWJsZSA9IHRydWU7XG5cbiAgLy8gd2UgaGF2ZSBpbXBsZW1lbnRlZCB0aGUgX3JlYWQgbWV0aG9kLCBhbmQgZG9uZSB0aGUgb3RoZXIgdGhpbmdzXG4gIC8vIHRoYXQgUmVhZGFibGUgd2FudHMgYmVmb3JlIHRoZSBmaXJzdCBfcmVhZCBjYWxsLCBzbyB1bnNldCB0aGVcbiAgLy8gc3luYyBndWFyZCBmbGFnLlxuICB0aGlzLl9yZWFkYWJsZVN0YXRlLnN5bmMgPSBmYWxzZTtcblxuICBpZiAob3B0aW9ucykge1xuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy50cmFuc2Zvcm0gPT09ICdmdW5jdGlvbicpIHRoaXMuX3RyYW5zZm9ybSA9IG9wdGlvbnMudHJhbnNmb3JtO1xuXG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLmZsdXNoID09PSAnZnVuY3Rpb24nKSB0aGlzLl9mbHVzaCA9IG9wdGlvbnMuZmx1c2g7XG4gIH1cblxuICAvLyBXaGVuIHRoZSB3cml0YWJsZSBzaWRlIGZpbmlzaGVzLCB0aGVuIGZsdXNoIG91dCBhbnl0aGluZyByZW1haW5pbmcuXG4gIHRoaXMub24oJ3ByZWZpbmlzaCcsIHByZWZpbmlzaCk7XG59XG5cbmZ1bmN0aW9uIHByZWZpbmlzaCgpIHtcbiAgdmFyIF90aGlzID0gdGhpcztcblxuICBpZiAodHlwZW9mIHRoaXMuX2ZsdXNoID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhpcy5fZmx1c2goZnVuY3Rpb24gKGVyLCBkYXRhKSB7XG4gICAgICBkb25lKF90aGlzLCBlciwgZGF0YSk7XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgZG9uZSh0aGlzLCBudWxsLCBudWxsKTtcbiAgfVxufVxuXG5UcmFuc2Zvcm0ucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nKSB7XG4gIHRoaXMuX3RyYW5zZm9ybVN0YXRlLm5lZWRUcmFuc2Zvcm0gPSBmYWxzZTtcbiAgcmV0dXJuIER1cGxleC5wcm90b3R5cGUucHVzaC5jYWxsKHRoaXMsIGNodW5rLCBlbmNvZGluZyk7XG59O1xuXG4vLyBUaGlzIGlzIHRoZSBwYXJ0IHdoZXJlIHlvdSBkbyBzdHVmZiFcbi8vIG92ZXJyaWRlIHRoaXMgZnVuY3Rpb24gaW4gaW1wbGVtZW50YXRpb24gY2xhc3Nlcy5cbi8vICdjaHVuaycgaXMgYW4gaW5wdXQgY2h1bmsuXG4vL1xuLy8gQ2FsbCBgcHVzaChuZXdDaHVuaylgIHRvIHBhc3MgYWxvbmcgdHJhbnNmb3JtZWQgb3V0cHV0XG4vLyB0byB0aGUgcmVhZGFibGUgc2lkZS4gIFlvdSBtYXkgY2FsbCAncHVzaCcgemVybyBvciBtb3JlIHRpbWVzLlxuLy9cbi8vIENhbGwgYGNiKGVycilgIHdoZW4geW91IGFyZSBkb25lIHdpdGggdGhpcyBjaHVuay4gIElmIHlvdSBwYXNzXG4vLyBhbiBlcnJvciwgdGhlbiB0aGF0J2xsIHB1dCB0aGUgaHVydCBvbiB0aGUgd2hvbGUgb3BlcmF0aW9uLiAgSWYgeW91XG4vLyBuZXZlciBjYWxsIGNiKCksIHRoZW4geW91J2xsIG5ldmVyIGdldCBhbm90aGVyIGNodW5rLlxuVHJhbnNmb3JtLnByb3RvdHlwZS5fdHJhbnNmb3JtID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdfdHJhbnNmb3JtKCkgaXMgbm90IGltcGxlbWVudGVkJyk7XG59O1xuXG5UcmFuc2Zvcm0ucHJvdG90eXBlLl93cml0ZSA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIHZhciB0cyA9IHRoaXMuX3RyYW5zZm9ybVN0YXRlO1xuICB0cy53cml0ZWNiID0gY2I7XG4gIHRzLndyaXRlY2h1bmsgPSBjaHVuaztcbiAgdHMud3JpdGVlbmNvZGluZyA9IGVuY29kaW5nO1xuICBpZiAoIXRzLnRyYW5zZm9ybWluZykge1xuICAgIHZhciBycyA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG4gICAgaWYgKHRzLm5lZWRUcmFuc2Zvcm0gfHwgcnMubmVlZFJlYWRhYmxlIHx8IHJzLmxlbmd0aCA8IHJzLmhpZ2hXYXRlck1hcmspIHRoaXMuX3JlYWQocnMuaGlnaFdhdGVyTWFyayk7XG4gIH1cbn07XG5cbi8vIERvZXNuJ3QgbWF0dGVyIHdoYXQgdGhlIGFyZ3MgYXJlIGhlcmUuXG4vLyBfdHJhbnNmb3JtIGRvZXMgYWxsIHRoZSB3b3JrLlxuLy8gVGhhdCB3ZSBnb3QgaGVyZSBtZWFucyB0aGF0IHRoZSByZWFkYWJsZSBzaWRlIHdhbnRzIG1vcmUgZGF0YS5cblRyYW5zZm9ybS5wcm90b3R5cGUuX3JlYWQgPSBmdW5jdGlvbiAobikge1xuICB2YXIgdHMgPSB0aGlzLl90cmFuc2Zvcm1TdGF0ZTtcblxuICBpZiAodHMud3JpdGVjaHVuayAhPT0gbnVsbCAmJiB0cy53cml0ZWNiICYmICF0cy50cmFuc2Zvcm1pbmcpIHtcbiAgICB0cy50cmFuc2Zvcm1pbmcgPSB0cnVlO1xuICAgIHRoaXMuX3RyYW5zZm9ybSh0cy53cml0ZWNodW5rLCB0cy53cml0ZWVuY29kaW5nLCB0cy5hZnRlclRyYW5zZm9ybSk7XG4gIH0gZWxzZSB7XG4gICAgLy8gbWFyayB0aGF0IHdlIG5lZWQgYSB0cmFuc2Zvcm0sIHNvIHRoYXQgYW55IGRhdGEgdGhhdCBjb21lcyBpblxuICAgIC8vIHdpbGwgZ2V0IHByb2Nlc3NlZCwgbm93IHRoYXQgd2UndmUgYXNrZWQgZm9yIGl0LlxuICAgIHRzLm5lZWRUcmFuc2Zvcm0gPSB0cnVlO1xuICB9XG59O1xuXG5UcmFuc2Zvcm0ucHJvdG90eXBlLl9kZXN0cm95ID0gZnVuY3Rpb24gKGVyciwgY2IpIHtcbiAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgRHVwbGV4LnByb3RvdHlwZS5fZGVzdHJveS5jYWxsKHRoaXMsIGVyciwgZnVuY3Rpb24gKGVycjIpIHtcbiAgICBjYihlcnIyKTtcbiAgICBfdGhpczIuZW1pdCgnY2xvc2UnKTtcbiAgfSk7XG59O1xuXG5mdW5jdGlvbiBkb25lKHN0cmVhbSwgZXIsIGRhdGEpIHtcbiAgaWYgKGVyKSByZXR1cm4gc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXIpO1xuXG4gIGlmIChkYXRhICE9IG51bGwpIC8vIHNpbmdsZSBlcXVhbHMgY2hlY2sgZm9yIGJvdGggYG51bGxgIGFuZCBgdW5kZWZpbmVkYFxuICAgIHN0cmVhbS5wdXNoKGRhdGEpO1xuXG4gIC8vIGlmIHRoZXJlJ3Mgbm90aGluZyBpbiB0aGUgd3JpdGUgYnVmZmVyLCB0aGVuIHRoYXQgbWVhbnNcbiAgLy8gdGhhdCBub3RoaW5nIG1vcmUgd2lsbCBldmVyIGJlIHByb3ZpZGVkXG4gIGlmIChzdHJlYW0uX3dyaXRhYmxlU3RhdGUubGVuZ3RoKSB0aHJvdyBuZXcgRXJyb3IoJ0NhbGxpbmcgdHJhbnNmb3JtIGRvbmUgd2hlbiB3cy5sZW5ndGggIT0gMCcpO1xuXG4gIGlmIChzdHJlYW0uX3RyYW5zZm9ybVN0YXRlLnRyYW5zZm9ybWluZykgdGhyb3cgbmV3IEVycm9yKCdDYWxsaW5nIHRyYW5zZm9ybSBkb25lIHdoZW4gc3RpbGwgdHJhbnNmb3JtaW5nJyk7XG5cbiAgcmV0dXJuIHN0cmVhbS5wdXNoKG51bGwpO1xufSIsInZhciBidWZmZXJFcXVhbCA9IHJlcXVpcmUoJ2J1ZmZlci1lcXVhbC1jb25zdGFudC10aW1lJyk7XG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXI7XG52YXIgY3J5cHRvID0gcmVxdWlyZSgnY3J5cHRvJyk7XG52YXIgZm9ybWF0RWNkc2EgPSByZXF1aXJlKCdlY2RzYS1zaWctZm9ybWF0dGVyJyk7XG52YXIgdXRpbCA9IHJlcXVpcmUoJ3V0aWwnKTtcblxudmFyIE1TR19JTlZBTElEX0FMR09SSVRITSA9ICdcIiVzXCIgaXMgbm90IGEgdmFsaWQgYWxnb3JpdGhtLlxcbiAgU3VwcG9ydGVkIGFsZ29yaXRobXMgYXJlOlxcbiAgXCJIUzI1NlwiLCBcIkhTMzg0XCIsIFwiSFM1MTJcIiwgXCJSUzI1NlwiLCBcIlJTMzg0XCIsIFwiUlM1MTJcIiwgXCJQUzI1NlwiLCBcIlBTMzg0XCIsIFwiUFM1MTJcIiwgXCJFUzI1NlwiLCBcIkVTMzg0XCIsIFwiRVM1MTJcIiBhbmQgXCJub25lXCIuJ1xudmFyIE1TR19JTlZBTElEX1NFQ1JFVCA9ICdzZWNyZXQgbXVzdCBiZSBhIHN0cmluZyBvciBidWZmZXInO1xudmFyIE1TR19JTlZBTElEX1ZFUklGSUVSX0tFWSA9ICdrZXkgbXVzdCBiZSBhIHN0cmluZyBvciBhIGJ1ZmZlcic7XG52YXIgTVNHX0lOVkFMSURfU0lHTkVSX0tFWSA9ICdrZXkgbXVzdCBiZSBhIHN0cmluZywgYSBidWZmZXIgb3IgYW4gb2JqZWN0JztcblxudmFyIHN1cHBvcnRzS2V5T2JqZWN0cyA9IHR5cGVvZiBjcnlwdG8uY3JlYXRlUHVibGljS2V5ID09PSAnZnVuY3Rpb24nO1xuaWYgKHN1cHBvcnRzS2V5T2JqZWN0cykge1xuICBNU0dfSU5WQUxJRF9WRVJJRklFUl9LRVkgKz0gJyBvciBhIEtleU9iamVjdCc7XG4gIE1TR19JTlZBTElEX1NFQ1JFVCArPSAnb3IgYSBLZXlPYmplY3QnO1xufVxuXG5mdW5jdGlvbiBjaGVja0lzUHVibGljS2V5KGtleSkge1xuICBpZiAoQnVmZmVyLmlzQnVmZmVyKGtleSkpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAodHlwZW9mIGtleSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoIXN1cHBvcnRzS2V5T2JqZWN0cykge1xuICAgIHRocm93IHR5cGVFcnJvcihNU0dfSU5WQUxJRF9WRVJJRklFUl9LRVkpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBrZXkgIT09ICdvYmplY3QnKSB7XG4gICAgdGhyb3cgdHlwZUVycm9yKE1TR19JTlZBTElEX1ZFUklGSUVSX0tFWSk7XG4gIH1cblxuICBpZiAodHlwZW9mIGtleS50eXBlICE9PSAnc3RyaW5nJykge1xuICAgIHRocm93IHR5cGVFcnJvcihNU0dfSU5WQUxJRF9WRVJJRklFUl9LRVkpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBrZXkuYXN5bW1ldHJpY0tleVR5cGUgIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgdHlwZUVycm9yKE1TR19JTlZBTElEX1ZFUklGSUVSX0tFWSk7XG4gIH1cblxuICBpZiAodHlwZW9mIGtleS5leHBvcnQgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyB0eXBlRXJyb3IoTVNHX0lOVkFMSURfVkVSSUZJRVJfS0VZKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gY2hlY2tJc1ByaXZhdGVLZXkoa2V5KSB7XG4gIGlmIChCdWZmZXIuaXNCdWZmZXIoa2V5KSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmICh0eXBlb2Yga2V5ID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmICh0eXBlb2Yga2V5ID09PSAnb2JqZWN0Jykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHRocm93IHR5cGVFcnJvcihNU0dfSU5WQUxJRF9TSUdORVJfS0VZKTtcbn07XG5cbmZ1bmN0aW9uIGNoZWNrSXNTZWNyZXRLZXkoa2V5KSB7XG4gIGlmIChCdWZmZXIuaXNCdWZmZXIoa2V5KSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmICh0eXBlb2Yga2V5ID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBrZXk7XG4gIH1cblxuICBpZiAoIXN1cHBvcnRzS2V5T2JqZWN0cykge1xuICAgIHRocm93IHR5cGVFcnJvcihNU0dfSU5WQUxJRF9TRUNSRVQpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBrZXkgIT09ICdvYmplY3QnKSB7XG4gICAgdGhyb3cgdHlwZUVycm9yKE1TR19JTlZBTElEX1NFQ1JFVCk7XG4gIH1cblxuICBpZiAoa2V5LnR5cGUgIT09ICdzZWNyZXQnKSB7XG4gICAgdGhyb3cgdHlwZUVycm9yKE1TR19JTlZBTElEX1NFQ1JFVCk7XG4gIH1cblxuICBpZiAodHlwZW9mIGtleS5leHBvcnQgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyB0eXBlRXJyb3IoTVNHX0lOVkFMSURfU0VDUkVUKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBmcm9tQmFzZTY0KGJhc2U2NCkge1xuICByZXR1cm4gYmFzZTY0XG4gICAgLnJlcGxhY2UoLz0vZywgJycpXG4gICAgLnJlcGxhY2UoL1xcKy9nLCAnLScpXG4gICAgLnJlcGxhY2UoL1xcLy9nLCAnXycpO1xufVxuXG5mdW5jdGlvbiB0b0Jhc2U2NChiYXNlNjR1cmwpIHtcbiAgYmFzZTY0dXJsID0gYmFzZTY0dXJsLnRvU3RyaW5nKCk7XG5cbiAgdmFyIHBhZGRpbmcgPSA0IC0gYmFzZTY0dXJsLmxlbmd0aCAlIDQ7XG4gIGlmIChwYWRkaW5nICE9PSA0KSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYWRkaW5nOyArK2kpIHtcbiAgICAgIGJhc2U2NHVybCArPSAnPSc7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGJhc2U2NHVybFxuICAgIC5yZXBsYWNlKC9cXC0vZywgJysnKVxuICAgIC5yZXBsYWNlKC9fL2csICcvJyk7XG59XG5cbmZ1bmN0aW9uIHR5cGVFcnJvcih0ZW1wbGF0ZSkge1xuICB2YXIgYXJncyA9IFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgdmFyIGVyck1zZyA9IHV0aWwuZm9ybWF0LmJpbmQodXRpbCwgdGVtcGxhdGUpLmFwcGx5KG51bGwsIGFyZ3MpO1xuICByZXR1cm4gbmV3IFR5cGVFcnJvcihlcnJNc2cpO1xufVxuXG5mdW5jdGlvbiBidWZmZXJPclN0cmluZyhvYmopIHtcbiAgcmV0dXJuIEJ1ZmZlci5pc0J1ZmZlcihvYmopIHx8IHR5cGVvZiBvYmogPT09ICdzdHJpbmcnO1xufVxuXG5mdW5jdGlvbiBub3JtYWxpemVJbnB1dCh0aGluZykge1xuICBpZiAoIWJ1ZmZlck9yU3RyaW5nKHRoaW5nKSlcbiAgICB0aGluZyA9IEpTT04uc3RyaW5naWZ5KHRoaW5nKTtcbiAgcmV0dXJuIHRoaW5nO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVIbWFjU2lnbmVyKGJpdHMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHNpZ24odGhpbmcsIHNlY3JldCkge1xuICAgIGNoZWNrSXNTZWNyZXRLZXkoc2VjcmV0KTtcbiAgICB0aGluZyA9IG5vcm1hbGl6ZUlucHV0KHRoaW5nKTtcbiAgICB2YXIgaG1hYyA9IGNyeXB0by5jcmVhdGVIbWFjKCdzaGEnICsgYml0cywgc2VjcmV0KTtcbiAgICB2YXIgc2lnID0gKGhtYWMudXBkYXRlKHRoaW5nKSwgaG1hYy5kaWdlc3QoJ2Jhc2U2NCcpKVxuICAgIHJldHVybiBmcm9tQmFzZTY0KHNpZyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlSG1hY1ZlcmlmaWVyKGJpdHMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHZlcmlmeSh0aGluZywgc2lnbmF0dXJlLCBzZWNyZXQpIHtcbiAgICB2YXIgY29tcHV0ZWRTaWcgPSBjcmVhdGVIbWFjU2lnbmVyKGJpdHMpKHRoaW5nLCBzZWNyZXQpO1xuICAgIHJldHVybiBidWZmZXJFcXVhbChCdWZmZXIuZnJvbShzaWduYXR1cmUpLCBCdWZmZXIuZnJvbShjb21wdXRlZFNpZykpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUtleVNpZ25lcihiaXRzKSB7XG4gcmV0dXJuIGZ1bmN0aW9uIHNpZ24odGhpbmcsIHByaXZhdGVLZXkpIHtcbiAgICBjaGVja0lzUHJpdmF0ZUtleShwcml2YXRlS2V5KTtcbiAgICB0aGluZyA9IG5vcm1hbGl6ZUlucHV0KHRoaW5nKTtcbiAgICAvLyBFdmVuIHRob3VnaCB3ZSBhcmUgc3BlY2lmeWluZyBcIlJTQVwiIGhlcmUsIHRoaXMgd29ya3Mgd2l0aCBFQ0RTQVxuICAgIC8vIGtleXMgYXMgd2VsbC5cbiAgICB2YXIgc2lnbmVyID0gY3J5cHRvLmNyZWF0ZVNpZ24oJ1JTQS1TSEEnICsgYml0cyk7XG4gICAgdmFyIHNpZyA9IChzaWduZXIudXBkYXRlKHRoaW5nKSwgc2lnbmVyLnNpZ24ocHJpdmF0ZUtleSwgJ2Jhc2U2NCcpKTtcbiAgICByZXR1cm4gZnJvbUJhc2U2NChzaWcpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUtleVZlcmlmaWVyKGJpdHMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHZlcmlmeSh0aGluZywgc2lnbmF0dXJlLCBwdWJsaWNLZXkpIHtcbiAgICBjaGVja0lzUHVibGljS2V5KHB1YmxpY0tleSk7XG4gICAgdGhpbmcgPSBub3JtYWxpemVJbnB1dCh0aGluZyk7XG4gICAgc2lnbmF0dXJlID0gdG9CYXNlNjQoc2lnbmF0dXJlKTtcbiAgICB2YXIgdmVyaWZpZXIgPSBjcnlwdG8uY3JlYXRlVmVyaWZ5KCdSU0EtU0hBJyArIGJpdHMpO1xuICAgIHZlcmlmaWVyLnVwZGF0ZSh0aGluZyk7XG4gICAgcmV0dXJuIHZlcmlmaWVyLnZlcmlmeShwdWJsaWNLZXksIHNpZ25hdHVyZSwgJ2Jhc2U2NCcpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVBTU0tleVNpZ25lcihiaXRzKSB7XG4gIHJldHVybiBmdW5jdGlvbiBzaWduKHRoaW5nLCBwcml2YXRlS2V5KSB7XG4gICAgY2hlY2tJc1ByaXZhdGVLZXkocHJpdmF0ZUtleSk7XG4gICAgdGhpbmcgPSBub3JtYWxpemVJbnB1dCh0aGluZyk7XG4gICAgdmFyIHNpZ25lciA9IGNyeXB0by5jcmVhdGVTaWduKCdSU0EtU0hBJyArIGJpdHMpO1xuICAgIHZhciBzaWcgPSAoc2lnbmVyLnVwZGF0ZSh0aGluZyksIHNpZ25lci5zaWduKHtcbiAgICAgIGtleTogcHJpdmF0ZUtleSxcbiAgICAgIHBhZGRpbmc6IGNyeXB0by5jb25zdGFudHMuUlNBX1BLQ1MxX1BTU19QQURESU5HLFxuICAgICAgc2FsdExlbmd0aDogY3J5cHRvLmNvbnN0YW50cy5SU0FfUFNTX1NBTFRMRU5fRElHRVNUXG4gICAgfSwgJ2Jhc2U2NCcpKTtcbiAgICByZXR1cm4gZnJvbUJhc2U2NChzaWcpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVBTU0tleVZlcmlmaWVyKGJpdHMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHZlcmlmeSh0aGluZywgc2lnbmF0dXJlLCBwdWJsaWNLZXkpIHtcbiAgICBjaGVja0lzUHVibGljS2V5KHB1YmxpY0tleSk7XG4gICAgdGhpbmcgPSBub3JtYWxpemVJbnB1dCh0aGluZyk7XG4gICAgc2lnbmF0dXJlID0gdG9CYXNlNjQoc2lnbmF0dXJlKTtcbiAgICB2YXIgdmVyaWZpZXIgPSBjcnlwdG8uY3JlYXRlVmVyaWZ5KCdSU0EtU0hBJyArIGJpdHMpO1xuICAgIHZlcmlmaWVyLnVwZGF0ZSh0aGluZyk7XG4gICAgcmV0dXJuIHZlcmlmaWVyLnZlcmlmeSh7XG4gICAgICBrZXk6IHB1YmxpY0tleSxcbiAgICAgIHBhZGRpbmc6IGNyeXB0by5jb25zdGFudHMuUlNBX1BLQ1MxX1BTU19QQURESU5HLFxuICAgICAgc2FsdExlbmd0aDogY3J5cHRvLmNvbnN0YW50cy5SU0FfUFNTX1NBTFRMRU5fRElHRVNUXG4gICAgfSwgc2lnbmF0dXJlLCAnYmFzZTY0Jyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlRUNEU0FTaWduZXIoYml0cykge1xuICB2YXIgaW5uZXIgPSBjcmVhdGVLZXlTaWduZXIoYml0cyk7XG4gIHJldHVybiBmdW5jdGlvbiBzaWduKCkge1xuICAgIHZhciBzaWduYXR1cmUgPSBpbm5lci5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgIHNpZ25hdHVyZSA9IGZvcm1hdEVjZHNhLmRlclRvSm9zZShzaWduYXR1cmUsICdFUycgKyBiaXRzKTtcbiAgICByZXR1cm4gc2lnbmF0dXJlO1xuICB9O1xufVxuXG5mdW5jdGlvbiBjcmVhdGVFQ0RTQVZlcmlmZXIoYml0cykge1xuICB2YXIgaW5uZXIgPSBjcmVhdGVLZXlWZXJpZmllcihiaXRzKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHZlcmlmeSh0aGluZywgc2lnbmF0dXJlLCBwdWJsaWNLZXkpIHtcbiAgICBzaWduYXR1cmUgPSBmb3JtYXRFY2RzYS5qb3NlVG9EZXIoc2lnbmF0dXJlLCAnRVMnICsgYml0cykudG9TdHJpbmcoJ2Jhc2U2NCcpO1xuICAgIHZhciByZXN1bHQgPSBpbm5lcih0aGluZywgc2lnbmF0dXJlLCBwdWJsaWNLZXkpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZU5vbmVTaWduZXIoKSB7XG4gIHJldHVybiBmdW5jdGlvbiBzaWduKCkge1xuICAgIHJldHVybiAnJztcbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVOb25lVmVyaWZpZXIoKSB7XG4gIHJldHVybiBmdW5jdGlvbiB2ZXJpZnkodGhpbmcsIHNpZ25hdHVyZSkge1xuICAgIHJldHVybiBzaWduYXR1cmUgPT09ICcnO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gandhKGFsZ29yaXRobSkge1xuICB2YXIgc2lnbmVyRmFjdG9yaWVzID0ge1xuICAgIGhzOiBjcmVhdGVIbWFjU2lnbmVyLFxuICAgIHJzOiBjcmVhdGVLZXlTaWduZXIsXG4gICAgcHM6IGNyZWF0ZVBTU0tleVNpZ25lcixcbiAgICBlczogY3JlYXRlRUNEU0FTaWduZXIsXG4gICAgbm9uZTogY3JlYXRlTm9uZVNpZ25lcixcbiAgfVxuICB2YXIgdmVyaWZpZXJGYWN0b3JpZXMgPSB7XG4gICAgaHM6IGNyZWF0ZUhtYWNWZXJpZmllcixcbiAgICByczogY3JlYXRlS2V5VmVyaWZpZXIsXG4gICAgcHM6IGNyZWF0ZVBTU0tleVZlcmlmaWVyLFxuICAgIGVzOiBjcmVhdGVFQ0RTQVZlcmlmZXIsXG4gICAgbm9uZTogY3JlYXRlTm9uZVZlcmlmaWVyLFxuICB9XG4gIHZhciBtYXRjaCA9IGFsZ29yaXRobS5tYXRjaCgvXihSU3xQU3xFU3xIUykoMjU2fDM4NHw1MTIpJHxeKG5vbmUpJC9pKTtcbiAgaWYgKCFtYXRjaClcbiAgICB0aHJvdyB0eXBlRXJyb3IoTVNHX0lOVkFMSURfQUxHT1JJVEhNLCBhbGdvcml0aG0pO1xuICB2YXIgYWxnbyA9IChtYXRjaFsxXSB8fCBtYXRjaFszXSkudG9Mb3dlckNhc2UoKTtcbiAgdmFyIGJpdHMgPSBtYXRjaFsyXTtcblxuICByZXR1cm4ge1xuICAgIHNpZ246IHNpZ25lckZhY3Rvcmllc1thbGdvXShiaXRzKSxcbiAgICB2ZXJpZnk6IHZlcmlmaWVyRmFjdG9yaWVzW2FsZ29dKGJpdHMpLFxuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcbnZhciBUcmFuc2Zvcm0gPSByZXF1aXJlKCdzdHJlYW0nKS5UcmFuc2Zvcm1cbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcblxuZnVuY3Rpb24gdGhyb3dJZk5vdFN0cmluZ09yQnVmZmVyICh2YWwsIHByZWZpeCkge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcih2YWwpICYmIHR5cGVvZiB2YWwgIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihwcmVmaXggKyAnIG11c3QgYmUgYSBzdHJpbmcgb3IgYSBidWZmZXInKVxuICB9XG59XG5cbmZ1bmN0aW9uIEhhc2hCYXNlIChibG9ja1NpemUpIHtcbiAgVHJhbnNmb3JtLmNhbGwodGhpcylcblxuICB0aGlzLl9ibG9jayA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShibG9ja1NpemUpXG4gIHRoaXMuX2Jsb2NrU2l6ZSA9IGJsb2NrU2l6ZVxuICB0aGlzLl9ibG9ja09mZnNldCA9IDBcbiAgdGhpcy5fbGVuZ3RoID0gWzAsIDAsIDAsIDBdXG5cbiAgdGhpcy5fZmluYWxpemVkID0gZmFsc2Vcbn1cblxuaW5oZXJpdHMoSGFzaEJhc2UsIFRyYW5zZm9ybSlcblxuSGFzaEJhc2UucHJvdG90eXBlLl90cmFuc2Zvcm0gPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nLCBjYWxsYmFjaykge1xuICB2YXIgZXJyb3IgPSBudWxsXG4gIHRyeSB7XG4gICAgdGhpcy51cGRhdGUoY2h1bmssIGVuY29kaW5nKVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBlcnJvciA9IGVyclxuICB9XG5cbiAgY2FsbGJhY2soZXJyb3IpXG59XG5cbkhhc2hCYXNlLnByb3RvdHlwZS5fZmx1c2ggPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgdmFyIGVycm9yID0gbnVsbFxuICB0cnkge1xuICAgIHRoaXMucHVzaCh0aGlzLmRpZ2VzdCgpKVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBlcnJvciA9IGVyclxuICB9XG5cbiAgY2FsbGJhY2soZXJyb3IpXG59XG5cbkhhc2hCYXNlLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAoZGF0YSwgZW5jb2RpbmcpIHtcbiAgdGhyb3dJZk5vdFN0cmluZ09yQnVmZmVyKGRhdGEsICdEYXRhJylcbiAgaWYgKHRoaXMuX2ZpbmFsaXplZCkgdGhyb3cgbmV3IEVycm9yKCdEaWdlc3QgYWxyZWFkeSBjYWxsZWQnKVxuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihkYXRhKSkgZGF0YSA9IEJ1ZmZlci5mcm9tKGRhdGEsIGVuY29kaW5nKVxuXG4gIC8vIGNvbnN1bWUgZGF0YVxuICB2YXIgYmxvY2sgPSB0aGlzLl9ibG9ja1xuICB2YXIgb2Zmc2V0ID0gMFxuICB3aGlsZSAodGhpcy5fYmxvY2tPZmZzZXQgKyBkYXRhLmxlbmd0aCAtIG9mZnNldCA+PSB0aGlzLl9ibG9ja1NpemUpIHtcbiAgICBmb3IgKHZhciBpID0gdGhpcy5fYmxvY2tPZmZzZXQ7IGkgPCB0aGlzLl9ibG9ja1NpemU7KSBibG9ja1tpKytdID0gZGF0YVtvZmZzZXQrK11cbiAgICB0aGlzLl91cGRhdGUoKVxuICAgIHRoaXMuX2Jsb2NrT2Zmc2V0ID0gMFxuICB9XG4gIHdoaWxlIChvZmZzZXQgPCBkYXRhLmxlbmd0aCkgYmxvY2tbdGhpcy5fYmxvY2tPZmZzZXQrK10gPSBkYXRhW29mZnNldCsrXVxuXG4gIC8vIHVwZGF0ZSBsZW5ndGhcbiAgZm9yICh2YXIgaiA9IDAsIGNhcnJ5ID0gZGF0YS5sZW5ndGggKiA4OyBjYXJyeSA+IDA7ICsraikge1xuICAgIHRoaXMuX2xlbmd0aFtqXSArPSBjYXJyeVxuICAgIGNhcnJ5ID0gKHRoaXMuX2xlbmd0aFtqXSAvIDB4MDEwMDAwMDAwMCkgfCAwXG4gICAgaWYgKGNhcnJ5ID4gMCkgdGhpcy5fbGVuZ3RoW2pdIC09IDB4MDEwMDAwMDAwMCAqIGNhcnJ5XG4gIH1cblxuICByZXR1cm4gdGhpc1xufVxuXG5IYXNoQmFzZS5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdfdXBkYXRlIGlzIG5vdCBpbXBsZW1lbnRlZCcpXG59XG5cbkhhc2hCYXNlLnByb3RvdHlwZS5kaWdlc3QgPSBmdW5jdGlvbiAoZW5jb2RpbmcpIHtcbiAgaWYgKHRoaXMuX2ZpbmFsaXplZCkgdGhyb3cgbmV3IEVycm9yKCdEaWdlc3QgYWxyZWFkeSBjYWxsZWQnKVxuICB0aGlzLl9maW5hbGl6ZWQgPSB0cnVlXG5cbiAgdmFyIGRpZ2VzdCA9IHRoaXMuX2RpZ2VzdCgpXG4gIGlmIChlbmNvZGluZyAhPT0gdW5kZWZpbmVkKSBkaWdlc3QgPSBkaWdlc3QudG9TdHJpbmcoZW5jb2RpbmcpXG5cbiAgLy8gcmVzZXQgc3RhdGVcbiAgdGhpcy5fYmxvY2suZmlsbCgwKVxuICB0aGlzLl9ibG9ja09mZnNldCA9IDBcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCA0OyArK2kpIHRoaXMuX2xlbmd0aFtpXSA9IDBcblxuICByZXR1cm4gZGlnZXN0XG59XG5cbkhhc2hCYXNlLnByb3RvdHlwZS5fZGlnZXN0ID0gZnVuY3Rpb24gKCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ19kaWdlc3QgaXMgbm90IGltcGxlbWVudGVkJylcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBIYXNoQmFzZVxuIiwiLyoqXG4gKiBBIEphdmFTY3JpcHQgaW1wbGVtZW50YXRpb24gb2YgdGhlIFNlY3VyZSBIYXNoIEFsZ29yaXRobSwgU0hBLTI1NiwgYXMgZGVmaW5lZFxuICogaW4gRklQUyAxODAtMlxuICogVmVyc2lvbiAyLjItYmV0YSBDb3B5cmlnaHQgQW5nZWwgTWFyaW4sIFBhdWwgSm9obnN0b24gMjAwMCAtIDIwMDkuXG4gKiBPdGhlciBjb250cmlidXRvcnM6IEdyZWcgSG9sdCwgQW5kcmV3IEtlcGVydCwgWWRuYXIsIExvc3RpbmV0XG4gKlxuICovXG5cbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbnZhciBIYXNoID0gcmVxdWlyZSgnLi9oYXNoJylcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxuXG52YXIgSyA9IFtcbiAgMHg0MjhBMkY5OCwgMHg3MTM3NDQ5MSwgMHhCNUMwRkJDRiwgMHhFOUI1REJBNSxcbiAgMHgzOTU2QzI1QiwgMHg1OUYxMTFGMSwgMHg5MjNGODJBNCwgMHhBQjFDNUVENSxcbiAgMHhEODA3QUE5OCwgMHgxMjgzNUIwMSwgMHgyNDMxODVCRSwgMHg1NTBDN0RDMyxcbiAgMHg3MkJFNUQ3NCwgMHg4MERFQjFGRSwgMHg5QkRDMDZBNywgMHhDMTlCRjE3NCxcbiAgMHhFNDlCNjlDMSwgMHhFRkJFNDc4NiwgMHgwRkMxOURDNiwgMHgyNDBDQTFDQyxcbiAgMHgyREU5MkM2RiwgMHg0QTc0ODRBQSwgMHg1Q0IwQTlEQywgMHg3NkY5ODhEQSxcbiAgMHg5ODNFNTE1MiwgMHhBODMxQzY2RCwgMHhCMDAzMjdDOCwgMHhCRjU5N0ZDNyxcbiAgMHhDNkUwMEJGMywgMHhENUE3OTE0NywgMHgwNkNBNjM1MSwgMHgxNDI5Mjk2NyxcbiAgMHgyN0I3MEE4NSwgMHgyRTFCMjEzOCwgMHg0RDJDNkRGQywgMHg1MzM4MEQxMyxcbiAgMHg2NTBBNzM1NCwgMHg3NjZBMEFCQiwgMHg4MUMyQzkyRSwgMHg5MjcyMkM4NSxcbiAgMHhBMkJGRThBMSwgMHhBODFBNjY0QiwgMHhDMjRCOEI3MCwgMHhDNzZDNTFBMyxcbiAgMHhEMTkyRTgxOSwgMHhENjk5MDYyNCwgMHhGNDBFMzU4NSwgMHgxMDZBQTA3MCxcbiAgMHgxOUE0QzExNiwgMHgxRTM3NkMwOCwgMHgyNzQ4Nzc0QywgMHgzNEIwQkNCNSxcbiAgMHgzOTFDMENCMywgMHg0RUQ4QUE0QSwgMHg1QjlDQ0E0RiwgMHg2ODJFNkZGMyxcbiAgMHg3NDhGODJFRSwgMHg3OEE1NjM2RiwgMHg4NEM4NzgxNCwgMHg4Q0M3MDIwOCxcbiAgMHg5MEJFRkZGQSwgMHhBNDUwNkNFQiwgMHhCRUY5QTNGNywgMHhDNjcxNzhGMlxuXVxuXG52YXIgVyA9IG5ldyBBcnJheSg2NClcblxuZnVuY3Rpb24gU2hhMjU2ICgpIHtcbiAgdGhpcy5pbml0KClcblxuICB0aGlzLl93ID0gVyAvLyBuZXcgQXJyYXkoNjQpXG5cbiAgSGFzaC5jYWxsKHRoaXMsIDY0LCA1Nilcbn1cblxuaW5oZXJpdHMoU2hhMjU2LCBIYXNoKVxuXG5TaGEyNTYucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuX2EgPSAweDZhMDllNjY3XG4gIHRoaXMuX2IgPSAweGJiNjdhZTg1XG4gIHRoaXMuX2MgPSAweDNjNmVmMzcyXG4gIHRoaXMuX2QgPSAweGE1NGZmNTNhXG4gIHRoaXMuX2UgPSAweDUxMGU1MjdmXG4gIHRoaXMuX2YgPSAweDliMDU2ODhjXG4gIHRoaXMuX2cgPSAweDFmODNkOWFiXG4gIHRoaXMuX2ggPSAweDViZTBjZDE5XG5cbiAgcmV0dXJuIHRoaXNcbn1cblxuZnVuY3Rpb24gY2ggKHgsIHksIHopIHtcbiAgcmV0dXJuIHogXiAoeCAmICh5IF4geikpXG59XG5cbmZ1bmN0aW9uIG1haiAoeCwgeSwgeikge1xuICByZXR1cm4gKHggJiB5KSB8ICh6ICYgKHggfCB5KSlcbn1cblxuZnVuY3Rpb24gc2lnbWEwICh4KSB7XG4gIHJldHVybiAoeCA+Pj4gMiB8IHggPDwgMzApIF4gKHggPj4+IDEzIHwgeCA8PCAxOSkgXiAoeCA+Pj4gMjIgfCB4IDw8IDEwKVxufVxuXG5mdW5jdGlvbiBzaWdtYTEgKHgpIHtcbiAgcmV0dXJuICh4ID4+PiA2IHwgeCA8PCAyNikgXiAoeCA+Pj4gMTEgfCB4IDw8IDIxKSBeICh4ID4+PiAyNSB8IHggPDwgNylcbn1cblxuZnVuY3Rpb24gZ2FtbWEwICh4KSB7XG4gIHJldHVybiAoeCA+Pj4gNyB8IHggPDwgMjUpIF4gKHggPj4+IDE4IHwgeCA8PCAxNCkgXiAoeCA+Pj4gMylcbn1cblxuZnVuY3Rpb24gZ2FtbWExICh4KSB7XG4gIHJldHVybiAoeCA+Pj4gMTcgfCB4IDw8IDE1KSBeICh4ID4+PiAxOSB8IHggPDwgMTMpIF4gKHggPj4+IDEwKVxufVxuXG5TaGEyNTYucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAoTSkge1xuICB2YXIgVyA9IHRoaXMuX3dcblxuICB2YXIgYSA9IHRoaXMuX2EgfCAwXG4gIHZhciBiID0gdGhpcy5fYiB8IDBcbiAgdmFyIGMgPSB0aGlzLl9jIHwgMFxuICB2YXIgZCA9IHRoaXMuX2QgfCAwXG4gIHZhciBlID0gdGhpcy5fZSB8IDBcbiAgdmFyIGYgPSB0aGlzLl9mIHwgMFxuICB2YXIgZyA9IHRoaXMuX2cgfCAwXG4gIHZhciBoID0gdGhpcy5faCB8IDBcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IDE2OyArK2kpIFdbaV0gPSBNLnJlYWRJbnQzMkJFKGkgKiA0KVxuICBmb3IgKDsgaSA8IDY0OyArK2kpIFdbaV0gPSAoZ2FtbWExKFdbaSAtIDJdKSArIFdbaSAtIDddICsgZ2FtbWEwKFdbaSAtIDE1XSkgKyBXW2kgLSAxNl0pIHwgMFxuXG4gIGZvciAodmFyIGogPSAwOyBqIDwgNjQ7ICsraikge1xuICAgIHZhciBUMSA9IChoICsgc2lnbWExKGUpICsgY2goZSwgZiwgZykgKyBLW2pdICsgV1tqXSkgfCAwXG4gICAgdmFyIFQyID0gKHNpZ21hMChhKSArIG1haihhLCBiLCBjKSkgfCAwXG5cbiAgICBoID0gZ1xuICAgIGcgPSBmXG4gICAgZiA9IGVcbiAgICBlID0gKGQgKyBUMSkgfCAwXG4gICAgZCA9IGNcbiAgICBjID0gYlxuICAgIGIgPSBhXG4gICAgYSA9IChUMSArIFQyKSB8IDBcbiAgfVxuXG4gIHRoaXMuX2EgPSAoYSArIHRoaXMuX2EpIHwgMFxuICB0aGlzLl9iID0gKGIgKyB0aGlzLl9iKSB8IDBcbiAgdGhpcy5fYyA9IChjICsgdGhpcy5fYykgfCAwXG4gIHRoaXMuX2QgPSAoZCArIHRoaXMuX2QpIHwgMFxuICB0aGlzLl9lID0gKGUgKyB0aGlzLl9lKSB8IDBcbiAgdGhpcy5fZiA9IChmICsgdGhpcy5fZikgfCAwXG4gIHRoaXMuX2cgPSAoZyArIHRoaXMuX2cpIHwgMFxuICB0aGlzLl9oID0gKGggKyB0aGlzLl9oKSB8IDBcbn1cblxuU2hhMjU2LnByb3RvdHlwZS5faGFzaCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIEggPSBCdWZmZXIuYWxsb2NVbnNhZmUoMzIpXG5cbiAgSC53cml0ZUludDMyQkUodGhpcy5fYSwgMClcbiAgSC53cml0ZUludDMyQkUodGhpcy5fYiwgNClcbiAgSC53cml0ZUludDMyQkUodGhpcy5fYywgOClcbiAgSC53cml0ZUludDMyQkUodGhpcy5fZCwgMTIpXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2UsIDE2KVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9mLCAyMClcbiAgSC53cml0ZUludDMyQkUodGhpcy5fZywgMjQpXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2gsIDI4KVxuXG4gIHJldHVybiBIXG59XG5cbm1vZHVsZS5leHBvcnRzID0gU2hhMjU2XG4iLCJ2YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG52YXIgSGFzaCA9IHJlcXVpcmUoJy4vaGFzaCcpXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcblxudmFyIEsgPSBbXG4gIDB4NDI4YTJmOTgsIDB4ZDcyOGFlMjIsIDB4NzEzNzQ0OTEsIDB4MjNlZjY1Y2QsXG4gIDB4YjVjMGZiY2YsIDB4ZWM0ZDNiMmYsIDB4ZTliNWRiYTUsIDB4ODE4OWRiYmMsXG4gIDB4Mzk1NmMyNWIsIDB4ZjM0OGI1MzgsIDB4NTlmMTExZjEsIDB4YjYwNWQwMTksXG4gIDB4OTIzZjgyYTQsIDB4YWYxOTRmOWIsIDB4YWIxYzVlZDUsIDB4ZGE2ZDgxMTgsXG4gIDB4ZDgwN2FhOTgsIDB4YTMwMzAyNDIsIDB4MTI4MzViMDEsIDB4NDU3MDZmYmUsXG4gIDB4MjQzMTg1YmUsIDB4NGVlNGIyOGMsIDB4NTUwYzdkYzMsIDB4ZDVmZmI0ZTIsXG4gIDB4NzJiZTVkNzQsIDB4ZjI3Yjg5NmYsIDB4ODBkZWIxZmUsIDB4M2IxNjk2YjEsXG4gIDB4OWJkYzA2YTcsIDB4MjVjNzEyMzUsIDB4YzE5YmYxNzQsIDB4Y2Y2OTI2OTQsXG4gIDB4ZTQ5YjY5YzEsIDB4OWVmMTRhZDIsIDB4ZWZiZTQ3ODYsIDB4Mzg0ZjI1ZTMsXG4gIDB4MGZjMTlkYzYsIDB4OGI4Y2Q1YjUsIDB4MjQwY2ExY2MsIDB4NzdhYzljNjUsXG4gIDB4MmRlOTJjNmYsIDB4NTkyYjAyNzUsIDB4NGE3NDg0YWEsIDB4NmVhNmU0ODMsXG4gIDB4NWNiMGE5ZGMsIDB4YmQ0MWZiZDQsIDB4NzZmOTg4ZGEsIDB4ODMxMTUzYjUsXG4gIDB4OTgzZTUxNTIsIDB4ZWU2NmRmYWIsIDB4YTgzMWM2NmQsIDB4MmRiNDMyMTAsXG4gIDB4YjAwMzI3YzgsIDB4OThmYjIxM2YsIDB4YmY1OTdmYzcsIDB4YmVlZjBlZTQsXG4gIDB4YzZlMDBiZjMsIDB4M2RhODhmYzIsIDB4ZDVhNzkxNDcsIDB4OTMwYWE3MjUsXG4gIDB4MDZjYTYzNTEsIDB4ZTAwMzgyNmYsIDB4MTQyOTI5NjcsIDB4MGEwZTZlNzAsXG4gIDB4MjdiNzBhODUsIDB4NDZkMjJmZmMsIDB4MmUxYjIxMzgsIDB4NWMyNmM5MjYsXG4gIDB4NGQyYzZkZmMsIDB4NWFjNDJhZWQsIDB4NTMzODBkMTMsIDB4OWQ5NWIzZGYsXG4gIDB4NjUwYTczNTQsIDB4OGJhZjYzZGUsIDB4NzY2YTBhYmIsIDB4M2M3N2IyYTgsXG4gIDB4ODFjMmM5MmUsIDB4NDdlZGFlZTYsIDB4OTI3MjJjODUsIDB4MTQ4MjM1M2IsXG4gIDB4YTJiZmU4YTEsIDB4NGNmMTAzNjQsIDB4YTgxYTY2NGIsIDB4YmM0MjMwMDEsXG4gIDB4YzI0YjhiNzAsIDB4ZDBmODk3OTEsIDB4Yzc2YzUxYTMsIDB4MDY1NGJlMzAsXG4gIDB4ZDE5MmU4MTksIDB4ZDZlZjUyMTgsIDB4ZDY5OTA2MjQsIDB4NTU2NWE5MTAsXG4gIDB4ZjQwZTM1ODUsIDB4NTc3MTIwMmEsIDB4MTA2YWEwNzAsIDB4MzJiYmQxYjgsXG4gIDB4MTlhNGMxMTYsIDB4YjhkMmQwYzgsIDB4MWUzNzZjMDgsIDB4NTE0MWFiNTMsXG4gIDB4Mjc0ODc3NGMsIDB4ZGY4ZWViOTksIDB4MzRiMGJjYjUsIDB4ZTE5YjQ4YTgsXG4gIDB4MzkxYzBjYjMsIDB4YzVjOTVhNjMsIDB4NGVkOGFhNGEsIDB4ZTM0MThhY2IsXG4gIDB4NWI5Y2NhNGYsIDB4Nzc2M2UzNzMsIDB4NjgyZTZmZjMsIDB4ZDZiMmI4YTMsXG4gIDB4NzQ4ZjgyZWUsIDB4NWRlZmIyZmMsIDB4NzhhNTYzNmYsIDB4NDMxNzJmNjAsXG4gIDB4ODRjODc4MTQsIDB4YTFmMGFiNzIsIDB4OGNjNzAyMDgsIDB4MWE2NDM5ZWMsXG4gIDB4OTBiZWZmZmEsIDB4MjM2MzFlMjgsIDB4YTQ1MDZjZWIsIDB4ZGU4MmJkZTksXG4gIDB4YmVmOWEzZjcsIDB4YjJjNjc5MTUsIDB4YzY3MTc4ZjIsIDB4ZTM3MjUzMmIsXG4gIDB4Y2EyNzNlY2UsIDB4ZWEyNjYxOWMsIDB4ZDE4NmI4YzcsIDB4MjFjMGMyMDcsXG4gIDB4ZWFkYTdkZDYsIDB4Y2RlMGViMWUsIDB4ZjU3ZDRmN2YsIDB4ZWU2ZWQxNzgsXG4gIDB4MDZmMDY3YWEsIDB4NzIxNzZmYmEsIDB4MGE2MzdkYzUsIDB4YTJjODk4YTYsXG4gIDB4MTEzZjk4MDQsIDB4YmVmOTBkYWUsIDB4MWI3MTBiMzUsIDB4MTMxYzQ3MWIsXG4gIDB4MjhkYjc3ZjUsIDB4MjMwNDdkODQsIDB4MzJjYWFiN2IsIDB4NDBjNzI0OTMsXG4gIDB4M2M5ZWJlMGEsIDB4MTVjOWJlYmMsIDB4NDMxZDY3YzQsIDB4OWMxMDBkNGMsXG4gIDB4NGNjNWQ0YmUsIDB4Y2IzZTQyYjYsIDB4NTk3ZjI5OWMsIDB4ZmM2NTdlMmEsXG4gIDB4NWZjYjZmYWIsIDB4M2FkNmZhZWMsIDB4NmM0NDE5OGMsIDB4NGE0NzU4MTdcbl1cblxudmFyIFcgPSBuZXcgQXJyYXkoMTYwKVxuXG5mdW5jdGlvbiBTaGE1MTIgKCkge1xuICB0aGlzLmluaXQoKVxuICB0aGlzLl93ID0gV1xuXG4gIEhhc2guY2FsbCh0aGlzLCAxMjgsIDExMilcbn1cblxuaW5oZXJpdHMoU2hhNTEyLCBIYXNoKVxuXG5TaGE1MTIucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuX2FoID0gMHg2YTA5ZTY2N1xuICB0aGlzLl9iaCA9IDB4YmI2N2FlODVcbiAgdGhpcy5fY2ggPSAweDNjNmVmMzcyXG4gIHRoaXMuX2RoID0gMHhhNTRmZjUzYVxuICB0aGlzLl9laCA9IDB4NTEwZTUyN2ZcbiAgdGhpcy5fZmggPSAweDliMDU2ODhjXG4gIHRoaXMuX2doID0gMHgxZjgzZDlhYlxuICB0aGlzLl9oaCA9IDB4NWJlMGNkMTlcblxuICB0aGlzLl9hbCA9IDB4ZjNiY2M5MDhcbiAgdGhpcy5fYmwgPSAweDg0Y2FhNzNiXG4gIHRoaXMuX2NsID0gMHhmZTk0ZjgyYlxuICB0aGlzLl9kbCA9IDB4NWYxZDM2ZjFcbiAgdGhpcy5fZWwgPSAweGFkZTY4MmQxXG4gIHRoaXMuX2ZsID0gMHgyYjNlNmMxZlxuICB0aGlzLl9nbCA9IDB4ZmI0MWJkNmJcbiAgdGhpcy5faGwgPSAweDEzN2UyMTc5XG5cbiAgcmV0dXJuIHRoaXNcbn1cblxuZnVuY3Rpb24gQ2ggKHgsIHksIHopIHtcbiAgcmV0dXJuIHogXiAoeCAmICh5IF4geikpXG59XG5cbmZ1bmN0aW9uIG1haiAoeCwgeSwgeikge1xuICByZXR1cm4gKHggJiB5KSB8ICh6ICYgKHggfCB5KSlcbn1cblxuZnVuY3Rpb24gc2lnbWEwICh4LCB4bCkge1xuICByZXR1cm4gKHggPj4+IDI4IHwgeGwgPDwgNCkgXiAoeGwgPj4+IDIgfCB4IDw8IDMwKSBeICh4bCA+Pj4gNyB8IHggPDwgMjUpXG59XG5cbmZ1bmN0aW9uIHNpZ21hMSAoeCwgeGwpIHtcbiAgcmV0dXJuICh4ID4+PiAxNCB8IHhsIDw8IDE4KSBeICh4ID4+PiAxOCB8IHhsIDw8IDE0KSBeICh4bCA+Pj4gOSB8IHggPDwgMjMpXG59XG5cbmZ1bmN0aW9uIEdhbW1hMCAoeCwgeGwpIHtcbiAgcmV0dXJuICh4ID4+PiAxIHwgeGwgPDwgMzEpIF4gKHggPj4+IDggfCB4bCA8PCAyNCkgXiAoeCA+Pj4gNylcbn1cblxuZnVuY3Rpb24gR2FtbWEwbCAoeCwgeGwpIHtcbiAgcmV0dXJuICh4ID4+PiAxIHwgeGwgPDwgMzEpIF4gKHggPj4+IDggfCB4bCA8PCAyNCkgXiAoeCA+Pj4gNyB8IHhsIDw8IDI1KVxufVxuXG5mdW5jdGlvbiBHYW1tYTEgKHgsIHhsKSB7XG4gIHJldHVybiAoeCA+Pj4gMTkgfCB4bCA8PCAxMykgXiAoeGwgPj4+IDI5IHwgeCA8PCAzKSBeICh4ID4+PiA2KVxufVxuXG5mdW5jdGlvbiBHYW1tYTFsICh4LCB4bCkge1xuICByZXR1cm4gKHggPj4+IDE5IHwgeGwgPDwgMTMpIF4gKHhsID4+PiAyOSB8IHggPDwgMykgXiAoeCA+Pj4gNiB8IHhsIDw8IDI2KVxufVxuXG5mdW5jdGlvbiBnZXRDYXJyeSAoYSwgYikge1xuICByZXR1cm4gKGEgPj4+IDApIDwgKGIgPj4+IDApID8gMSA6IDBcbn1cblxuU2hhNTEyLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKE0pIHtcbiAgdmFyIFcgPSB0aGlzLl93XG5cbiAgdmFyIGFoID0gdGhpcy5fYWggfCAwXG4gIHZhciBiaCA9IHRoaXMuX2JoIHwgMFxuICB2YXIgY2ggPSB0aGlzLl9jaCB8IDBcbiAgdmFyIGRoID0gdGhpcy5fZGggfCAwXG4gIHZhciBlaCA9IHRoaXMuX2VoIHwgMFxuICB2YXIgZmggPSB0aGlzLl9maCB8IDBcbiAgdmFyIGdoID0gdGhpcy5fZ2ggfCAwXG4gIHZhciBoaCA9IHRoaXMuX2hoIHwgMFxuXG4gIHZhciBhbCA9IHRoaXMuX2FsIHwgMFxuICB2YXIgYmwgPSB0aGlzLl9ibCB8IDBcbiAgdmFyIGNsID0gdGhpcy5fY2wgfCAwXG4gIHZhciBkbCA9IHRoaXMuX2RsIHwgMFxuICB2YXIgZWwgPSB0aGlzLl9lbCB8IDBcbiAgdmFyIGZsID0gdGhpcy5fZmwgfCAwXG4gIHZhciBnbCA9IHRoaXMuX2dsIHwgMFxuICB2YXIgaGwgPSB0aGlzLl9obCB8IDBcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IDMyOyBpICs9IDIpIHtcbiAgICBXW2ldID0gTS5yZWFkSW50MzJCRShpICogNClcbiAgICBXW2kgKyAxXSA9IE0ucmVhZEludDMyQkUoaSAqIDQgKyA0KVxuICB9XG4gIGZvciAoOyBpIDwgMTYwOyBpICs9IDIpIHtcbiAgICB2YXIgeGggPSBXW2kgLSAxNSAqIDJdXG4gICAgdmFyIHhsID0gV1tpIC0gMTUgKiAyICsgMV1cbiAgICB2YXIgZ2FtbWEwID0gR2FtbWEwKHhoLCB4bClcbiAgICB2YXIgZ2FtbWEwbCA9IEdhbW1hMGwoeGwsIHhoKVxuXG4gICAgeGggPSBXW2kgLSAyICogMl1cbiAgICB4bCA9IFdbaSAtIDIgKiAyICsgMV1cbiAgICB2YXIgZ2FtbWExID0gR2FtbWExKHhoLCB4bClcbiAgICB2YXIgZ2FtbWExbCA9IEdhbW1hMWwoeGwsIHhoKVxuXG4gICAgLy8gV1tpXSA9IGdhbW1hMCArIFdbaSAtIDddICsgZ2FtbWExICsgV1tpIC0gMTZdXG4gICAgdmFyIFdpN2ggPSBXW2kgLSA3ICogMl1cbiAgICB2YXIgV2k3bCA9IFdbaSAtIDcgKiAyICsgMV1cblxuICAgIHZhciBXaTE2aCA9IFdbaSAtIDE2ICogMl1cbiAgICB2YXIgV2kxNmwgPSBXW2kgLSAxNiAqIDIgKyAxXVxuXG4gICAgdmFyIFdpbCA9IChnYW1tYTBsICsgV2k3bCkgfCAwXG4gICAgdmFyIFdpaCA9IChnYW1tYTAgKyBXaTdoICsgZ2V0Q2FycnkoV2lsLCBnYW1tYTBsKSkgfCAwXG4gICAgV2lsID0gKFdpbCArIGdhbW1hMWwpIHwgMFxuICAgIFdpaCA9IChXaWggKyBnYW1tYTEgKyBnZXRDYXJyeShXaWwsIGdhbW1hMWwpKSB8IDBcbiAgICBXaWwgPSAoV2lsICsgV2kxNmwpIHwgMFxuICAgIFdpaCA9IChXaWggKyBXaTE2aCArIGdldENhcnJ5KFdpbCwgV2kxNmwpKSB8IDBcblxuICAgIFdbaV0gPSBXaWhcbiAgICBXW2kgKyAxXSA9IFdpbFxuICB9XG5cbiAgZm9yICh2YXIgaiA9IDA7IGogPCAxNjA7IGogKz0gMikge1xuICAgIFdpaCA9IFdbal1cbiAgICBXaWwgPSBXW2ogKyAxXVxuXG4gICAgdmFyIG1hamggPSBtYWooYWgsIGJoLCBjaClcbiAgICB2YXIgbWFqbCA9IG1haihhbCwgYmwsIGNsKVxuXG4gICAgdmFyIHNpZ21hMGggPSBzaWdtYTAoYWgsIGFsKVxuICAgIHZhciBzaWdtYTBsID0gc2lnbWEwKGFsLCBhaClcbiAgICB2YXIgc2lnbWExaCA9IHNpZ21hMShlaCwgZWwpXG4gICAgdmFyIHNpZ21hMWwgPSBzaWdtYTEoZWwsIGVoKVxuXG4gICAgLy8gdDEgPSBoICsgc2lnbWExICsgY2ggKyBLW2pdICsgV1tqXVxuICAgIHZhciBLaWggPSBLW2pdXG4gICAgdmFyIEtpbCA9IEtbaiArIDFdXG5cbiAgICB2YXIgY2hoID0gQ2goZWgsIGZoLCBnaClcbiAgICB2YXIgY2hsID0gQ2goZWwsIGZsLCBnbClcblxuICAgIHZhciB0MWwgPSAoaGwgKyBzaWdtYTFsKSB8IDBcbiAgICB2YXIgdDFoID0gKGhoICsgc2lnbWExaCArIGdldENhcnJ5KHQxbCwgaGwpKSB8IDBcbiAgICB0MWwgPSAodDFsICsgY2hsKSB8IDBcbiAgICB0MWggPSAodDFoICsgY2hoICsgZ2V0Q2FycnkodDFsLCBjaGwpKSB8IDBcbiAgICB0MWwgPSAodDFsICsgS2lsKSB8IDBcbiAgICB0MWggPSAodDFoICsgS2loICsgZ2V0Q2FycnkodDFsLCBLaWwpKSB8IDBcbiAgICB0MWwgPSAodDFsICsgV2lsKSB8IDBcbiAgICB0MWggPSAodDFoICsgV2loICsgZ2V0Q2FycnkodDFsLCBXaWwpKSB8IDBcblxuICAgIC8vIHQyID0gc2lnbWEwICsgbWFqXG4gICAgdmFyIHQybCA9IChzaWdtYTBsICsgbWFqbCkgfCAwXG4gICAgdmFyIHQyaCA9IChzaWdtYTBoICsgbWFqaCArIGdldENhcnJ5KHQybCwgc2lnbWEwbCkpIHwgMFxuXG4gICAgaGggPSBnaFxuICAgIGhsID0gZ2xcbiAgICBnaCA9IGZoXG4gICAgZ2wgPSBmbFxuICAgIGZoID0gZWhcbiAgICBmbCA9IGVsXG4gICAgZWwgPSAoZGwgKyB0MWwpIHwgMFxuICAgIGVoID0gKGRoICsgdDFoICsgZ2V0Q2FycnkoZWwsIGRsKSkgfCAwXG4gICAgZGggPSBjaFxuICAgIGRsID0gY2xcbiAgICBjaCA9IGJoXG4gICAgY2wgPSBibFxuICAgIGJoID0gYWhcbiAgICBibCA9IGFsXG4gICAgYWwgPSAodDFsICsgdDJsKSB8IDBcbiAgICBhaCA9ICh0MWggKyB0MmggKyBnZXRDYXJyeShhbCwgdDFsKSkgfCAwXG4gIH1cblxuICB0aGlzLl9hbCA9ICh0aGlzLl9hbCArIGFsKSB8IDBcbiAgdGhpcy5fYmwgPSAodGhpcy5fYmwgKyBibCkgfCAwXG4gIHRoaXMuX2NsID0gKHRoaXMuX2NsICsgY2wpIHwgMFxuICB0aGlzLl9kbCA9ICh0aGlzLl9kbCArIGRsKSB8IDBcbiAgdGhpcy5fZWwgPSAodGhpcy5fZWwgKyBlbCkgfCAwXG4gIHRoaXMuX2ZsID0gKHRoaXMuX2ZsICsgZmwpIHwgMFxuICB0aGlzLl9nbCA9ICh0aGlzLl9nbCArIGdsKSB8IDBcbiAgdGhpcy5faGwgPSAodGhpcy5faGwgKyBobCkgfCAwXG5cbiAgdGhpcy5fYWggPSAodGhpcy5fYWggKyBhaCArIGdldENhcnJ5KHRoaXMuX2FsLCBhbCkpIHwgMFxuICB0aGlzLl9iaCA9ICh0aGlzLl9iaCArIGJoICsgZ2V0Q2FycnkodGhpcy5fYmwsIGJsKSkgfCAwXG4gIHRoaXMuX2NoID0gKHRoaXMuX2NoICsgY2ggKyBnZXRDYXJyeSh0aGlzLl9jbCwgY2wpKSB8IDBcbiAgdGhpcy5fZGggPSAodGhpcy5fZGggKyBkaCArIGdldENhcnJ5KHRoaXMuX2RsLCBkbCkpIHwgMFxuICB0aGlzLl9laCA9ICh0aGlzLl9laCArIGVoICsgZ2V0Q2FycnkodGhpcy5fZWwsIGVsKSkgfCAwXG4gIHRoaXMuX2ZoID0gKHRoaXMuX2ZoICsgZmggKyBnZXRDYXJyeSh0aGlzLl9mbCwgZmwpKSB8IDBcbiAgdGhpcy5fZ2ggPSAodGhpcy5fZ2ggKyBnaCArIGdldENhcnJ5KHRoaXMuX2dsLCBnbCkpIHwgMFxuICB0aGlzLl9oaCA9ICh0aGlzLl9oaCArIGhoICsgZ2V0Q2FycnkodGhpcy5faGwsIGhsKSkgfCAwXG59XG5cblNoYTUxMi5wcm90b3R5cGUuX2hhc2ggPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBIID0gQnVmZmVyLmFsbG9jVW5zYWZlKDY0KVxuXG4gIGZ1bmN0aW9uIHdyaXRlSW50NjRCRSAoaCwgbCwgb2Zmc2V0KSB7XG4gICAgSC53cml0ZUludDMyQkUoaCwgb2Zmc2V0KVxuICAgIEgud3JpdGVJbnQzMkJFKGwsIG9mZnNldCArIDQpXG4gIH1cblxuICB3cml0ZUludDY0QkUodGhpcy5fYWgsIHRoaXMuX2FsLCAwKVxuICB3cml0ZUludDY0QkUodGhpcy5fYmgsIHRoaXMuX2JsLCA4KVxuICB3cml0ZUludDY0QkUodGhpcy5fY2gsIHRoaXMuX2NsLCAxNilcbiAgd3JpdGVJbnQ2NEJFKHRoaXMuX2RoLCB0aGlzLl9kbCwgMjQpXG4gIHdyaXRlSW50NjRCRSh0aGlzLl9laCwgdGhpcy5fZWwsIDMyKVxuICB3cml0ZUludDY0QkUodGhpcy5fZmgsIHRoaXMuX2ZsLCA0MClcbiAgd3JpdGVJbnQ2NEJFKHRoaXMuX2doLCB0aGlzLl9nbCwgNDgpXG4gIHdyaXRlSW50NjRCRSh0aGlzLl9oaCwgdGhpcy5faGwsIDU2KVxuXG4gIHJldHVybiBIXG59XG5cbm1vZHVsZS5leHBvcnRzID0gU2hhNTEyXG4iLCIndXNlIHN0cmljdCdcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbnZhciBMZWdhY3kgPSByZXF1aXJlKCcuL2xlZ2FjeScpXG52YXIgQmFzZSA9IHJlcXVpcmUoJ2NpcGhlci1iYXNlJylcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxudmFyIG1kNSA9IHJlcXVpcmUoJ2NyZWF0ZS1oYXNoL21kNScpXG52YXIgUklQRU1EMTYwID0gcmVxdWlyZSgncmlwZW1kMTYwJylcblxudmFyIHNoYSA9IHJlcXVpcmUoJ3NoYS5qcycpXG5cbnZhciBaRVJPUyA9IEJ1ZmZlci5hbGxvYygxMjgpXG5cbmZ1bmN0aW9uIEhtYWMgKGFsZywga2V5KSB7XG4gIEJhc2UuY2FsbCh0aGlzLCAnZGlnZXN0JylcbiAgaWYgKHR5cGVvZiBrZXkgPT09ICdzdHJpbmcnKSB7XG4gICAga2V5ID0gQnVmZmVyLmZyb20oa2V5KVxuICB9XG5cbiAgdmFyIGJsb2Nrc2l6ZSA9IChhbGcgPT09ICdzaGE1MTInIHx8IGFsZyA9PT0gJ3NoYTM4NCcpID8gMTI4IDogNjRcblxuICB0aGlzLl9hbGcgPSBhbGdcbiAgdGhpcy5fa2V5ID0ga2V5XG4gIGlmIChrZXkubGVuZ3RoID4gYmxvY2tzaXplKSB7XG4gICAgdmFyIGhhc2ggPSBhbGcgPT09ICdybWQxNjAnID8gbmV3IFJJUEVNRDE2MCgpIDogc2hhKGFsZylcbiAgICBrZXkgPSBoYXNoLnVwZGF0ZShrZXkpLmRpZ2VzdCgpXG4gIH0gZWxzZSBpZiAoa2V5Lmxlbmd0aCA8IGJsb2Nrc2l6ZSkge1xuICAgIGtleSA9IEJ1ZmZlci5jb25jYXQoW2tleSwgWkVST1NdLCBibG9ja3NpemUpXG4gIH1cblxuICB2YXIgaXBhZCA9IHRoaXMuX2lwYWQgPSBCdWZmZXIuYWxsb2NVbnNhZmUoYmxvY2tzaXplKVxuICB2YXIgb3BhZCA9IHRoaXMuX29wYWQgPSBCdWZmZXIuYWxsb2NVbnNhZmUoYmxvY2tzaXplKVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYmxvY2tzaXplOyBpKyspIHtcbiAgICBpcGFkW2ldID0ga2V5W2ldIF4gMHgzNlxuICAgIG9wYWRbaV0gPSBrZXlbaV0gXiAweDVDXG4gIH1cbiAgdGhpcy5faGFzaCA9IGFsZyA9PT0gJ3JtZDE2MCcgPyBuZXcgUklQRU1EMTYwKCkgOiBzaGEoYWxnKVxuICB0aGlzLl9oYXNoLnVwZGF0ZShpcGFkKVxufVxuXG5pbmhlcml0cyhIbWFjLCBCYXNlKVxuXG5IbWFjLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgdGhpcy5faGFzaC51cGRhdGUoZGF0YSlcbn1cblxuSG1hYy5wcm90b3R5cGUuX2ZpbmFsID0gZnVuY3Rpb24gKCkge1xuICB2YXIgaCA9IHRoaXMuX2hhc2guZGlnZXN0KClcbiAgdmFyIGhhc2ggPSB0aGlzLl9hbGcgPT09ICdybWQxNjAnID8gbmV3IFJJUEVNRDE2MCgpIDogc2hhKHRoaXMuX2FsZylcbiAgcmV0dXJuIGhhc2gudXBkYXRlKHRoaXMuX29wYWQpLnVwZGF0ZShoKS5kaWdlc3QoKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNyZWF0ZUhtYWMgKGFsZywga2V5KSB7XG4gIGFsZyA9IGFsZy50b0xvd2VyQ2FzZSgpXG4gIGlmIChhbGcgPT09ICdybWQxNjAnIHx8IGFsZyA9PT0gJ3JpcGVtZDE2MCcpIHtcbiAgICByZXR1cm4gbmV3IEhtYWMoJ3JtZDE2MCcsIGtleSlcbiAgfVxuICBpZiAoYWxnID09PSAnbWQ1Jykge1xuICAgIHJldHVybiBuZXcgTGVnYWN5KG1kNSwga2V5KVxuICB9XG4gIHJldHVybiBuZXcgSG1hYyhhbGcsIGtleSlcbn1cbiIsInZhciBNRDUgPSByZXF1aXJlKCdtZDUuanMnKVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChidWZmZXIpIHtcbiAgcmV0dXJuIG5ldyBNRDUoKS51cGRhdGUoYnVmZmVyKS5kaWdlc3QoKVxufVxuIiwiZXhwb3J0cy5wYmtkZjIgPSByZXF1aXJlKCcuL2xpYi9hc3luYycpXG5leHBvcnRzLnBia2RmMlN5bmMgPSByZXF1aXJlKCcuL2xpYi9zeW5jJylcbiIsInZhciBNQVhfQUxMT0MgPSBNYXRoLnBvdygyLCAzMCkgLSAxIC8vIGRlZmF1bHQgaW4gaW9qc1xuXG5mdW5jdGlvbiBjaGVja0J1ZmZlciAoYnVmLCBuYW1lKSB7XG4gIGlmICh0eXBlb2YgYnVmICE9PSAnc3RyaW5nJyAmJiAhQnVmZmVyLmlzQnVmZmVyKGJ1ZikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKG5hbWUgKyAnIG11c3QgYmUgYSBidWZmZXIgb3Igc3RyaW5nJylcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChwYXNzd29yZCwgc2FsdCwgaXRlcmF0aW9ucywga2V5bGVuKSB7XG4gIGNoZWNrQnVmZmVyKHBhc3N3b3JkLCAnUGFzc3dvcmQnKVxuICBjaGVja0J1ZmZlcihzYWx0LCAnU2FsdCcpXG5cbiAgaWYgKHR5cGVvZiBpdGVyYXRpb25zICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0l0ZXJhdGlvbnMgbm90IGEgbnVtYmVyJylcbiAgfVxuXG4gIGlmIChpdGVyYXRpb25zIDwgMCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0JhZCBpdGVyYXRpb25zJylcbiAgfVxuXG4gIGlmICh0eXBlb2Yga2V5bGVuICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0tleSBsZW5ndGggbm90IGEgbnVtYmVyJylcbiAgfVxuXG4gIGlmIChrZXlsZW4gPCAwIHx8IGtleWxlbiA+IE1BWF9BTExPQyB8fCBrZXlsZW4gIT09IGtleWxlbikgeyAvKiBlc2xpbnQgbm8tc2VsZi1jb21wYXJlOiAwICovXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQmFkIGtleSBsZW5ndGgnKVxuICB9XG59XG4iLCJ2YXIgZGVmYXVsdEVuY29kaW5nXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuaWYgKHByb2Nlc3MuYnJvd3Nlcikge1xuICBkZWZhdWx0RW5jb2RpbmcgPSAndXRmLTgnXG59IGVsc2Uge1xuICB2YXIgcFZlcnNpb25NYWpvciA9IHBhcnNlSW50KHByb2Nlc3MudmVyc2lvbi5zcGxpdCgnLicpWzBdLnNsaWNlKDEpLCAxMClcblxuICBkZWZhdWx0RW5jb2RpbmcgPSBwVmVyc2lvbk1ham9yID49IDYgPyAndXRmLTgnIDogJ2JpbmFyeSdcbn1cbm1vZHVsZS5leHBvcnRzID0gZGVmYXVsdEVuY29kaW5nXG4iLCJ2YXIgbWQ1ID0gcmVxdWlyZSgnY3JlYXRlLWhhc2gvbWQ1JylcbnZhciBSSVBFTUQxNjAgPSByZXF1aXJlKCdyaXBlbWQxNjAnKVxudmFyIHNoYSA9IHJlcXVpcmUoJ3NoYS5qcycpXG5cbnZhciBjaGVja1BhcmFtZXRlcnMgPSByZXF1aXJlKCcuL3ByZWNvbmRpdGlvbicpXG52YXIgZGVmYXVsdEVuY29kaW5nID0gcmVxdWlyZSgnLi9kZWZhdWx0LWVuY29kaW5nJylcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxudmFyIFpFUk9TID0gQnVmZmVyLmFsbG9jKDEyOClcbnZhciBzaXplcyA9IHtcbiAgbWQ1OiAxNixcbiAgc2hhMTogMjAsXG4gIHNoYTIyNDogMjgsXG4gIHNoYTI1NjogMzIsXG4gIHNoYTM4NDogNDgsXG4gIHNoYTUxMjogNjQsXG4gIHJtZDE2MDogMjAsXG4gIHJpcGVtZDE2MDogMjBcbn1cblxuZnVuY3Rpb24gSG1hYyAoYWxnLCBrZXksIHNhbHRMZW4pIHtcbiAgdmFyIGhhc2ggPSBnZXREaWdlc3QoYWxnKVxuICB2YXIgYmxvY2tzaXplID0gKGFsZyA9PT0gJ3NoYTUxMicgfHwgYWxnID09PSAnc2hhMzg0JykgPyAxMjggOiA2NFxuXG4gIGlmIChrZXkubGVuZ3RoID4gYmxvY2tzaXplKSB7XG4gICAga2V5ID0gaGFzaChrZXkpXG4gIH0gZWxzZSBpZiAoa2V5Lmxlbmd0aCA8IGJsb2Nrc2l6ZSkge1xuICAgIGtleSA9IEJ1ZmZlci5jb25jYXQoW2tleSwgWkVST1NdLCBibG9ja3NpemUpXG4gIH1cblxuICB2YXIgaXBhZCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShibG9ja3NpemUgKyBzaXplc1thbGddKVxuICB2YXIgb3BhZCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShibG9ja3NpemUgKyBzaXplc1thbGddKVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGJsb2Nrc2l6ZTsgaSsrKSB7XG4gICAgaXBhZFtpXSA9IGtleVtpXSBeIDB4MzZcbiAgICBvcGFkW2ldID0ga2V5W2ldIF4gMHg1Q1xuICB9XG5cbiAgdmFyIGlwYWQxID0gQnVmZmVyLmFsbG9jVW5zYWZlKGJsb2Nrc2l6ZSArIHNhbHRMZW4gKyA0KVxuICBpcGFkLmNvcHkoaXBhZDEsIDAsIDAsIGJsb2Nrc2l6ZSlcbiAgdGhpcy5pcGFkMSA9IGlwYWQxXG4gIHRoaXMuaXBhZDIgPSBpcGFkXG4gIHRoaXMub3BhZCA9IG9wYWRcbiAgdGhpcy5hbGcgPSBhbGdcbiAgdGhpcy5ibG9ja3NpemUgPSBibG9ja3NpemVcbiAgdGhpcy5oYXNoID0gaGFzaFxuICB0aGlzLnNpemUgPSBzaXplc1thbGddXG59XG5cbkhtYWMucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uIChkYXRhLCBpcGFkKSB7XG4gIGRhdGEuY29weShpcGFkLCB0aGlzLmJsb2Nrc2l6ZSlcbiAgdmFyIGggPSB0aGlzLmhhc2goaXBhZClcbiAgaC5jb3B5KHRoaXMub3BhZCwgdGhpcy5ibG9ja3NpemUpXG4gIHJldHVybiB0aGlzLmhhc2godGhpcy5vcGFkKVxufVxuXG5mdW5jdGlvbiBnZXREaWdlc3QgKGFsZykge1xuICBmdW5jdGlvbiBzaGFGdW5jIChkYXRhKSB7XG4gICAgcmV0dXJuIHNoYShhbGcpLnVwZGF0ZShkYXRhKS5kaWdlc3QoKVxuICB9XG4gIGZ1bmN0aW9uIHJtZDE2MEZ1bmMgKGRhdGEpIHtcbiAgICByZXR1cm4gbmV3IFJJUEVNRDE2MCgpLnVwZGF0ZShkYXRhKS5kaWdlc3QoKVxuICB9XG5cbiAgaWYgKGFsZyA9PT0gJ3JtZDE2MCcgfHwgYWxnID09PSAncmlwZW1kMTYwJykgcmV0dXJuIHJtZDE2MEZ1bmNcbiAgaWYgKGFsZyA9PT0gJ21kNScpIHJldHVybiBtZDVcbiAgcmV0dXJuIHNoYUZ1bmNcbn1cblxuZnVuY3Rpb24gcGJrZGYyIChwYXNzd29yZCwgc2FsdCwgaXRlcmF0aW9ucywga2V5bGVuLCBkaWdlc3QpIHtcbiAgY2hlY2tQYXJhbWV0ZXJzKHBhc3N3b3JkLCBzYWx0LCBpdGVyYXRpb25zLCBrZXlsZW4pXG5cbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIocGFzc3dvcmQpKSBwYXNzd29yZCA9IEJ1ZmZlci5mcm9tKHBhc3N3b3JkLCBkZWZhdWx0RW5jb2RpbmcpXG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKHNhbHQpKSBzYWx0ID0gQnVmZmVyLmZyb20oc2FsdCwgZGVmYXVsdEVuY29kaW5nKVxuXG4gIGRpZ2VzdCA9IGRpZ2VzdCB8fCAnc2hhMSdcblxuICB2YXIgaG1hYyA9IG5ldyBIbWFjKGRpZ2VzdCwgcGFzc3dvcmQsIHNhbHQubGVuZ3RoKVxuXG4gIHZhciBESyA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShrZXlsZW4pXG4gIHZhciBibG9jazEgPSBCdWZmZXIuYWxsb2NVbnNhZmUoc2FsdC5sZW5ndGggKyA0KVxuICBzYWx0LmNvcHkoYmxvY2sxLCAwLCAwLCBzYWx0Lmxlbmd0aClcblxuICB2YXIgZGVzdFBvcyA9IDBcbiAgdmFyIGhMZW4gPSBzaXplc1tkaWdlc3RdXG4gIHZhciBsID0gTWF0aC5jZWlsKGtleWxlbiAvIGhMZW4pXG5cbiAgZm9yICh2YXIgaSA9IDE7IGkgPD0gbDsgaSsrKSB7XG4gICAgYmxvY2sxLndyaXRlVUludDMyQkUoaSwgc2FsdC5sZW5ndGgpXG5cbiAgICB2YXIgVCA9IGhtYWMucnVuKGJsb2NrMSwgaG1hYy5pcGFkMSlcbiAgICB2YXIgVSA9IFRcblxuICAgIGZvciAodmFyIGogPSAxOyBqIDwgaXRlcmF0aW9uczsgaisrKSB7XG4gICAgICBVID0gaG1hYy5ydW4oVSwgaG1hYy5pcGFkMilcbiAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgaExlbjsgaysrKSBUW2tdIF49IFVba11cbiAgICB9XG5cbiAgICBULmNvcHkoREssIGRlc3RQb3MpXG4gICAgZGVzdFBvcyArPSBoTGVuXG4gIH1cblxuICByZXR1cm4gREtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBwYmtkZjJcbiIsInZhciB4b3IgPSByZXF1aXJlKCdidWZmZXIteG9yJylcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxudmFyIGluY3IzMiA9IHJlcXVpcmUoJy4uL2luY3IzMicpXG5cbmZ1bmN0aW9uIGdldEJsb2NrIChzZWxmKSB7XG4gIHZhciBvdXQgPSBzZWxmLl9jaXBoZXIuZW5jcnlwdEJsb2NrUmF3KHNlbGYuX3ByZXYpXG4gIGluY3IzMihzZWxmLl9wcmV2KVxuICByZXR1cm4gb3V0XG59XG5cbnZhciBibG9ja1NpemUgPSAxNlxuZXhwb3J0cy5lbmNyeXB0ID0gZnVuY3Rpb24gKHNlbGYsIGNodW5rKSB7XG4gIHZhciBjaHVua051bSA9IE1hdGguY2VpbChjaHVuay5sZW5ndGggLyBibG9ja1NpemUpXG4gIHZhciBzdGFydCA9IHNlbGYuX2NhY2hlLmxlbmd0aFxuICBzZWxmLl9jYWNoZSA9IEJ1ZmZlci5jb25jYXQoW1xuICAgIHNlbGYuX2NhY2hlLFxuICAgIEJ1ZmZlci5hbGxvY1Vuc2FmZShjaHVua051bSAqIGJsb2NrU2l6ZSlcbiAgXSlcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaHVua051bTsgaSsrKSB7XG4gICAgdmFyIG91dCA9IGdldEJsb2NrKHNlbGYpXG4gICAgdmFyIG9mZnNldCA9IHN0YXJ0ICsgaSAqIGJsb2NrU2l6ZVxuICAgIHNlbGYuX2NhY2hlLndyaXRlVUludDMyQkUob3V0WzBdLCBvZmZzZXQgKyAwKVxuICAgIHNlbGYuX2NhY2hlLndyaXRlVUludDMyQkUob3V0WzFdLCBvZmZzZXQgKyA0KVxuICAgIHNlbGYuX2NhY2hlLndyaXRlVUludDMyQkUob3V0WzJdLCBvZmZzZXQgKyA4KVxuICAgIHNlbGYuX2NhY2hlLndyaXRlVUludDMyQkUob3V0WzNdLCBvZmZzZXQgKyAxMilcbiAgfVxuICB2YXIgcGFkID0gc2VsZi5fY2FjaGUuc2xpY2UoMCwgY2h1bmsubGVuZ3RoKVxuICBzZWxmLl9jYWNoZSA9IHNlbGYuX2NhY2hlLnNsaWNlKGNodW5rLmxlbmd0aClcbiAgcmV0dXJuIHhvcihjaHVuaywgcGFkKVxufVxuIiwiZnVuY3Rpb24gaW5jcjMyIChpdikge1xuICB2YXIgbGVuID0gaXYubGVuZ3RoXG4gIHZhciBpdGVtXG4gIHdoaWxlIChsZW4tLSkge1xuICAgIGl0ZW0gPSBpdi5yZWFkVUludDgobGVuKVxuICAgIGlmIChpdGVtID09PSAyNTUpIHtcbiAgICAgIGl2LndyaXRlVUludDgoMCwgbGVuKVxuICAgIH0gZWxzZSB7XG4gICAgICBpdGVtKytcbiAgICAgIGl2LndyaXRlVUludDgoaXRlbSwgbGVuKVxuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gaW5jcjMyXG4iLCJ2YXIgYWVzID0gcmVxdWlyZSgnLi9hZXMnKVxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG52YXIgVHJhbnNmb3JtID0gcmVxdWlyZSgnY2lwaGVyLWJhc2UnKVxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxudmFyIEdIQVNIID0gcmVxdWlyZSgnLi9naGFzaCcpXG52YXIgeG9yID0gcmVxdWlyZSgnYnVmZmVyLXhvcicpXG52YXIgaW5jcjMyID0gcmVxdWlyZSgnLi9pbmNyMzInKVxuXG5mdW5jdGlvbiB4b3JUZXN0IChhLCBiKSB7XG4gIHZhciBvdXQgPSAwXG4gIGlmIChhLmxlbmd0aCAhPT0gYi5sZW5ndGgpIG91dCsrXG5cbiAgdmFyIGxlbiA9IE1hdGgubWluKGEubGVuZ3RoLCBiLmxlbmd0aClcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgIG91dCArPSAoYVtpXSBeIGJbaV0pXG4gIH1cblxuICByZXR1cm4gb3V0XG59XG5cbmZ1bmN0aW9uIGNhbGNJdiAoc2VsZiwgaXYsIGNrKSB7XG4gIGlmIChpdi5sZW5ndGggPT09IDEyKSB7XG4gICAgc2VsZi5fZmluSUQgPSBCdWZmZXIuY29uY2F0KFtpdiwgQnVmZmVyLmZyb20oWzAsIDAsIDAsIDFdKV0pXG4gICAgcmV0dXJuIEJ1ZmZlci5jb25jYXQoW2l2LCBCdWZmZXIuZnJvbShbMCwgMCwgMCwgMl0pXSlcbiAgfVxuICB2YXIgZ2hhc2ggPSBuZXcgR0hBU0goY2spXG4gIHZhciBsZW4gPSBpdi5sZW5ndGhcbiAgdmFyIHRvUGFkID0gbGVuICUgMTZcbiAgZ2hhc2gudXBkYXRlKGl2KVxuICBpZiAodG9QYWQpIHtcbiAgICB0b1BhZCA9IDE2IC0gdG9QYWRcbiAgICBnaGFzaC51cGRhdGUoQnVmZmVyLmFsbG9jKHRvUGFkLCAwKSlcbiAgfVxuICBnaGFzaC51cGRhdGUoQnVmZmVyLmFsbG9jKDgsIDApKVxuICB2YXIgaXZCaXRzID0gbGVuICogOFxuICB2YXIgdGFpbCA9IEJ1ZmZlci5hbGxvYyg4KVxuICB0YWlsLndyaXRlVUludEJFKGl2Qml0cywgMCwgOClcbiAgZ2hhc2gudXBkYXRlKHRhaWwpXG4gIHNlbGYuX2ZpbklEID0gZ2hhc2guc3RhdGVcbiAgdmFyIG91dCA9IEJ1ZmZlci5mcm9tKHNlbGYuX2ZpbklEKVxuICBpbmNyMzIob3V0KVxuICByZXR1cm4gb3V0XG59XG5mdW5jdGlvbiBTdHJlYW1DaXBoZXIgKG1vZGUsIGtleSwgaXYsIGRlY3J5cHQpIHtcbiAgVHJhbnNmb3JtLmNhbGwodGhpcylcblxuICB2YXIgaCA9IEJ1ZmZlci5hbGxvYyg0LCAwKVxuXG4gIHRoaXMuX2NpcGhlciA9IG5ldyBhZXMuQUVTKGtleSlcbiAgdmFyIGNrID0gdGhpcy5fY2lwaGVyLmVuY3J5cHRCbG9jayhoKVxuICB0aGlzLl9naGFzaCA9IG5ldyBHSEFTSChjaylcbiAgaXYgPSBjYWxjSXYodGhpcywgaXYsIGNrKVxuXG4gIHRoaXMuX3ByZXYgPSBCdWZmZXIuZnJvbShpdilcbiAgdGhpcy5fY2FjaGUgPSBCdWZmZXIuYWxsb2NVbnNhZmUoMClcbiAgdGhpcy5fc2VjQ2FjaGUgPSBCdWZmZXIuYWxsb2NVbnNhZmUoMClcbiAgdGhpcy5fZGVjcnlwdCA9IGRlY3J5cHRcbiAgdGhpcy5fYWxlbiA9IDBcbiAgdGhpcy5fbGVuID0gMFxuICB0aGlzLl9tb2RlID0gbW9kZVxuXG4gIHRoaXMuX2F1dGhUYWcgPSBudWxsXG4gIHRoaXMuX2NhbGxlZCA9IGZhbHNlXG59XG5cbmluaGVyaXRzKFN0cmVhbUNpcGhlciwgVHJhbnNmb3JtKVxuXG5TdHJlYW1DaXBoZXIucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAoY2h1bmspIHtcbiAgaWYgKCF0aGlzLl9jYWxsZWQgJiYgdGhpcy5fYWxlbikge1xuICAgIHZhciBydW1wID0gMTYgLSAodGhpcy5fYWxlbiAlIDE2KVxuICAgIGlmIChydW1wIDwgMTYpIHtcbiAgICAgIHJ1bXAgPSBCdWZmZXIuYWxsb2MocnVtcCwgMClcbiAgICAgIHRoaXMuX2doYXNoLnVwZGF0ZShydW1wKVxuICAgIH1cbiAgfVxuXG4gIHRoaXMuX2NhbGxlZCA9IHRydWVcbiAgdmFyIG91dCA9IHRoaXMuX21vZGUuZW5jcnlwdCh0aGlzLCBjaHVuaylcbiAgaWYgKHRoaXMuX2RlY3J5cHQpIHtcbiAgICB0aGlzLl9naGFzaC51cGRhdGUoY2h1bmspXG4gIH0gZWxzZSB7XG4gICAgdGhpcy5fZ2hhc2gudXBkYXRlKG91dClcbiAgfVxuICB0aGlzLl9sZW4gKz0gY2h1bmsubGVuZ3RoXG4gIHJldHVybiBvdXRcbn1cblxuU3RyZWFtQ2lwaGVyLnByb3RvdHlwZS5fZmluYWwgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLl9kZWNyeXB0ICYmICF0aGlzLl9hdXRoVGFnKSB0aHJvdyBuZXcgRXJyb3IoJ1Vuc3VwcG9ydGVkIHN0YXRlIG9yIHVuYWJsZSB0byBhdXRoZW50aWNhdGUgZGF0YScpXG5cbiAgdmFyIHRhZyA9IHhvcih0aGlzLl9naGFzaC5maW5hbCh0aGlzLl9hbGVuICogOCwgdGhpcy5fbGVuICogOCksIHRoaXMuX2NpcGhlci5lbmNyeXB0QmxvY2sodGhpcy5fZmluSUQpKVxuICBpZiAodGhpcy5fZGVjcnlwdCAmJiB4b3JUZXN0KHRhZywgdGhpcy5fYXV0aFRhZykpIHRocm93IG5ldyBFcnJvcignVW5zdXBwb3J0ZWQgc3RhdGUgb3IgdW5hYmxlIHRvIGF1dGhlbnRpY2F0ZSBkYXRhJylcblxuICB0aGlzLl9hdXRoVGFnID0gdGFnXG4gIHRoaXMuX2NpcGhlci5zY3J1YigpXG59XG5cblN0cmVhbUNpcGhlci5wcm90b3R5cGUuZ2V0QXV0aFRhZyA9IGZ1bmN0aW9uIGdldEF1dGhUYWcgKCkge1xuICBpZiAodGhpcy5fZGVjcnlwdCB8fCAhQnVmZmVyLmlzQnVmZmVyKHRoaXMuX2F1dGhUYWcpKSB0aHJvdyBuZXcgRXJyb3IoJ0F0dGVtcHRpbmcgdG8gZ2V0IGF1dGggdGFnIGluIHVuc3VwcG9ydGVkIHN0YXRlJylcblxuICByZXR1cm4gdGhpcy5fYXV0aFRhZ1xufVxuXG5TdHJlYW1DaXBoZXIucHJvdG90eXBlLnNldEF1dGhUYWcgPSBmdW5jdGlvbiBzZXRBdXRoVGFnICh0YWcpIHtcbiAgaWYgKCF0aGlzLl9kZWNyeXB0KSB0aHJvdyBuZXcgRXJyb3IoJ0F0dGVtcHRpbmcgdG8gc2V0IGF1dGggdGFnIGluIHVuc3VwcG9ydGVkIHN0YXRlJylcblxuICB0aGlzLl9hdXRoVGFnID0gdGFnXG59XG5cblN0cmVhbUNpcGhlci5wcm90b3R5cGUuc2V0QUFEID0gZnVuY3Rpb24gc2V0QUFEIChidWYpIHtcbiAgaWYgKHRoaXMuX2NhbGxlZCkgdGhyb3cgbmV3IEVycm9yKCdBdHRlbXB0aW5nIHRvIHNldCBBQUQgaW4gdW5zdXBwb3J0ZWQgc3RhdGUnKVxuXG4gIHRoaXMuX2doYXNoLnVwZGF0ZShidWYpXG4gIHRoaXMuX2FsZW4gKz0gYnVmLmxlbmd0aFxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFN0cmVhbUNpcGhlclxuIiwidmFyIGFlcyA9IHJlcXVpcmUoJy4vYWVzJylcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxudmFyIFRyYW5zZm9ybSA9IHJlcXVpcmUoJ2NpcGhlci1iYXNlJylcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcblxuZnVuY3Rpb24gU3RyZWFtQ2lwaGVyIChtb2RlLCBrZXksIGl2LCBkZWNyeXB0KSB7XG4gIFRyYW5zZm9ybS5jYWxsKHRoaXMpXG5cbiAgdGhpcy5fY2lwaGVyID0gbmV3IGFlcy5BRVMoa2V5KVxuICB0aGlzLl9wcmV2ID0gQnVmZmVyLmZyb20oaXYpXG4gIHRoaXMuX2NhY2hlID0gQnVmZmVyLmFsbG9jVW5zYWZlKDApXG4gIHRoaXMuX3NlY0NhY2hlID0gQnVmZmVyLmFsbG9jVW5zYWZlKDApXG4gIHRoaXMuX2RlY3J5cHQgPSBkZWNyeXB0XG4gIHRoaXMuX21vZGUgPSBtb2RlXG59XG5cbmluaGVyaXRzKFN0cmVhbUNpcGhlciwgVHJhbnNmb3JtKVxuXG5TdHJlYW1DaXBoZXIucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAoY2h1bmspIHtcbiAgcmV0dXJuIHRoaXMuX21vZGUuZW5jcnlwdCh0aGlzLCBjaHVuaywgdGhpcy5fZGVjcnlwdClcbn1cblxuU3RyZWFtQ2lwaGVyLnByb3RvdHlwZS5fZmluYWwgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuX2NpcGhlci5zY3J1YigpXG59XG5cbm1vZHVsZS5leHBvcnRzID0gU3RyZWFtQ2lwaGVyXG4iLCJ2YXIgcmFuZG9tQnl0ZXMgPSByZXF1aXJlKCdyYW5kb21ieXRlcycpO1xubW9kdWxlLmV4cG9ydHMgPSBmaW5kUHJpbWU7XG5maW5kUHJpbWUuc2ltcGxlU2lldmUgPSBzaW1wbGVTaWV2ZTtcbmZpbmRQcmltZS5mZXJtYXRUZXN0ID0gZmVybWF0VGVzdDtcbnZhciBCTiA9IHJlcXVpcmUoJ2JuLmpzJyk7XG52YXIgVFdFTlRZRk9VUiA9IG5ldyBCTigyNCk7XG52YXIgTWlsbGVyUmFiaW4gPSByZXF1aXJlKCdtaWxsZXItcmFiaW4nKTtcbnZhciBtaWxsZXJSYWJpbiA9IG5ldyBNaWxsZXJSYWJpbigpO1xudmFyIE9ORSA9IG5ldyBCTigxKTtcbnZhciBUV08gPSBuZXcgQk4oMik7XG52YXIgRklWRSA9IG5ldyBCTig1KTtcbnZhciBTSVhURUVOID0gbmV3IEJOKDE2KTtcbnZhciBFSUdIVCA9IG5ldyBCTig4KTtcbnZhciBURU4gPSBuZXcgQk4oMTApO1xudmFyIFRIUkVFID0gbmV3IEJOKDMpO1xudmFyIFNFVkVOID0gbmV3IEJOKDcpO1xudmFyIEVMRVZFTiA9IG5ldyBCTigxMSk7XG52YXIgRk9VUiA9IG5ldyBCTig0KTtcbnZhciBUV0VMVkUgPSBuZXcgQk4oMTIpO1xudmFyIHByaW1lcyA9IG51bGw7XG5cbmZ1bmN0aW9uIF9nZXRQcmltZXMoKSB7XG4gIGlmIChwcmltZXMgIT09IG51bGwpXG4gICAgcmV0dXJuIHByaW1lcztcblxuICB2YXIgbGltaXQgPSAweDEwMDAwMDtcbiAgdmFyIHJlcyA9IFtdO1xuICByZXNbMF0gPSAyO1xuICBmb3IgKHZhciBpID0gMSwgayA9IDM7IGsgPCBsaW1pdDsgayArPSAyKSB7XG4gICAgdmFyIHNxcnQgPSBNYXRoLmNlaWwoTWF0aC5zcXJ0KGspKTtcbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IGkgJiYgcmVzW2pdIDw9IHNxcnQ7IGorKylcbiAgICAgIGlmIChrICUgcmVzW2pdID09PSAwKVxuICAgICAgICBicmVhaztcblxuICAgIGlmIChpICE9PSBqICYmIHJlc1tqXSA8PSBzcXJ0KVxuICAgICAgY29udGludWU7XG5cbiAgICByZXNbaSsrXSA9IGs7XG4gIH1cbiAgcHJpbWVzID0gcmVzO1xuICByZXR1cm4gcmVzO1xufVxuXG5mdW5jdGlvbiBzaW1wbGVTaWV2ZShwKSB7XG4gIHZhciBwcmltZXMgPSBfZ2V0UHJpbWVzKCk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcmltZXMubGVuZ3RoOyBpKyspXG4gICAgaWYgKHAubW9kbihwcmltZXNbaV0pID09PSAwKSB7XG4gICAgICBpZiAocC5jbXBuKHByaW1lc1tpXSkgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBmZXJtYXRUZXN0KHApIHtcbiAgdmFyIHJlZCA9IEJOLm1vbnQocCk7XG4gIHJldHVybiBUV08udG9SZWQocmVkKS5yZWRQb3cocC5zdWJuKDEpKS5mcm9tUmVkKCkuY21wbigxKSA9PT0gMDtcbn1cblxuZnVuY3Rpb24gZmluZFByaW1lKGJpdHMsIGdlbikge1xuICBpZiAoYml0cyA8IDE2KSB7XG4gICAgLy8gdGhpcyBpcyB3aGF0IG9wZW5zc2wgZG9lc1xuICAgIGlmIChnZW4gPT09IDIgfHwgZ2VuID09PSA1KSB7XG4gICAgICByZXR1cm4gbmV3IEJOKFsweDhjLCAweDdiXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBuZXcgQk4oWzB4OGMsIDB4MjddKTtcbiAgICB9XG4gIH1cbiAgZ2VuID0gbmV3IEJOKGdlbik7XG5cbiAgdmFyIG51bSwgbjI7XG5cbiAgd2hpbGUgKHRydWUpIHtcbiAgICBudW0gPSBuZXcgQk4ocmFuZG9tQnl0ZXMoTWF0aC5jZWlsKGJpdHMgLyA4KSkpO1xuICAgIHdoaWxlIChudW0uYml0TGVuZ3RoKCkgPiBiaXRzKSB7XG4gICAgICBudW0uaXNocm4oMSk7XG4gICAgfVxuICAgIGlmIChudW0uaXNFdmVuKCkpIHtcbiAgICAgIG51bS5pYWRkKE9ORSk7XG4gICAgfVxuICAgIGlmICghbnVtLnRlc3RuKDEpKSB7XG4gICAgICBudW0uaWFkZChUV08pO1xuICAgIH1cbiAgICBpZiAoIWdlbi5jbXAoVFdPKSkge1xuICAgICAgd2hpbGUgKG51bS5tb2QoVFdFTlRZRk9VUikuY21wKEVMRVZFTikpIHtcbiAgICAgICAgbnVtLmlhZGQoRk9VUik7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICghZ2VuLmNtcChGSVZFKSkge1xuICAgICAgd2hpbGUgKG51bS5tb2QoVEVOKS5jbXAoVEhSRUUpKSB7XG4gICAgICAgIG51bS5pYWRkKEZPVVIpO1xuICAgICAgfVxuICAgIH1cbiAgICBuMiA9IG51bS5zaHJuKDEpO1xuICAgIGlmIChzaW1wbGVTaWV2ZShuMikgJiYgc2ltcGxlU2lldmUobnVtKSAmJlxuICAgICAgZmVybWF0VGVzdChuMikgJiYgZmVybWF0VGVzdChudW0pICYmXG4gICAgICBtaWxsZXJSYWJpbi50ZXN0KG4yKSAmJiBtaWxsZXJSYWJpbi50ZXN0KG51bSkpIHtcbiAgICAgIHJldHVybiBudW07XG4gICAgfVxuICB9XG5cbn1cbiIsInZhciBibiA9IHJlcXVpcmUoJ2JuLmpzJyk7XG52YXIgYnJvcmFuZCA9IHJlcXVpcmUoJ2Jyb3JhbmQnKTtcblxuZnVuY3Rpb24gTWlsbGVyUmFiaW4ocmFuZCkge1xuICB0aGlzLnJhbmQgPSByYW5kIHx8IG5ldyBicm9yYW5kLlJhbmQoKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gTWlsbGVyUmFiaW47XG5cbk1pbGxlclJhYmluLmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShyYW5kKSB7XG4gIHJldHVybiBuZXcgTWlsbGVyUmFiaW4ocmFuZCk7XG59O1xuXG5NaWxsZXJSYWJpbi5wcm90b3R5cGUuX3JhbmRiZWxvdyA9IGZ1bmN0aW9uIF9yYW5kYmVsb3cobikge1xuICB2YXIgbGVuID0gbi5iaXRMZW5ndGgoKTtcbiAgdmFyIG1pbl9ieXRlcyA9IE1hdGguY2VpbChsZW4gLyA4KTtcblxuICAvLyBHZW5lcmFnZSByYW5kb20gYnl0ZXMgdW50aWwgYSBudW1iZXIgbGVzcyB0aGFuIG4gaXMgZm91bmQuXG4gIC8vIFRoaXMgZW5zdXJlcyB0aGF0IDAuLm4tMSBoYXZlIGFuIGVxdWFsIHByb2JhYmlsaXR5IG9mIGJlaW5nIHNlbGVjdGVkLlxuICBkb1xuICAgIHZhciBhID0gbmV3IGJuKHRoaXMucmFuZC5nZW5lcmF0ZShtaW5fYnl0ZXMpKTtcbiAgd2hpbGUgKGEuY21wKG4pID49IDApO1xuXG4gIHJldHVybiBhO1xufTtcblxuTWlsbGVyUmFiaW4ucHJvdG90eXBlLl9yYW5kcmFuZ2UgPSBmdW5jdGlvbiBfcmFuZHJhbmdlKHN0YXJ0LCBzdG9wKSB7XG4gIC8vIEdlbmVyYXRlIGEgcmFuZG9tIG51bWJlciBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gc3RhcnQgYW5kIGxlc3MgdGhhbiBzdG9wLlxuICB2YXIgc2l6ZSA9IHN0b3Auc3ViKHN0YXJ0KTtcbiAgcmV0dXJuIHN0YXJ0LmFkZCh0aGlzLl9yYW5kYmVsb3coc2l6ZSkpO1xufTtcblxuTWlsbGVyUmFiaW4ucHJvdG90eXBlLnRlc3QgPSBmdW5jdGlvbiB0ZXN0KG4sIGssIGNiKSB7XG4gIHZhciBsZW4gPSBuLmJpdExlbmd0aCgpO1xuICB2YXIgcmVkID0gYm4ubW9udChuKTtcbiAgdmFyIHJvbmUgPSBuZXcgYm4oMSkudG9SZWQocmVkKTtcblxuICBpZiAoIWspXG4gICAgayA9IE1hdGgubWF4KDEsIChsZW4gLyA0OCkgfCAwKTtcblxuICAvLyBGaW5kIGQgYW5kIHMsIChuIC0gMSkgPSAoMiBeIHMpICogZDtcbiAgdmFyIG4xID0gbi5zdWJuKDEpO1xuICBmb3IgKHZhciBzID0gMDsgIW4xLnRlc3RuKHMpOyBzKyspIHt9XG4gIHZhciBkID0gbi5zaHJuKHMpO1xuXG4gIHZhciBybjEgPSBuMS50b1JlZChyZWQpO1xuXG4gIHZhciBwcmltZSA9IHRydWU7XG4gIGZvciAoOyBrID4gMDsgay0tKSB7XG4gICAgdmFyIGEgPSB0aGlzLl9yYW5kcmFuZ2UobmV3IGJuKDIpLCBuMSk7XG4gICAgaWYgKGNiKVxuICAgICAgY2IoYSk7XG5cbiAgICB2YXIgeCA9IGEudG9SZWQocmVkKS5yZWRQb3coZCk7XG4gICAgaWYgKHguY21wKHJvbmUpID09PSAwIHx8IHguY21wKHJuMSkgPT09IDApXG4gICAgICBjb250aW51ZTtcblxuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgczsgaSsrKSB7XG4gICAgICB4ID0geC5yZWRTcXIoKTtcblxuICAgICAgaWYgKHguY21wKHJvbmUpID09PSAwKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICBpZiAoeC5jbXAocm4xKSA9PT0gMClcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgaWYgKGkgPT09IHMpXG4gICAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gcHJpbWU7XG59O1xuXG5NaWxsZXJSYWJpbi5wcm90b3R5cGUuZ2V0RGl2aXNvciA9IGZ1bmN0aW9uIGdldERpdmlzb3Iobiwgaykge1xuICB2YXIgbGVuID0gbi5iaXRMZW5ndGgoKTtcbiAgdmFyIHJlZCA9IGJuLm1vbnQobik7XG4gIHZhciByb25lID0gbmV3IGJuKDEpLnRvUmVkKHJlZCk7XG5cbiAgaWYgKCFrKVxuICAgIGsgPSBNYXRoLm1heCgxLCAobGVuIC8gNDgpIHwgMCk7XG5cbiAgLy8gRmluZCBkIGFuZCBzLCAobiAtIDEpID0gKDIgXiBzKSAqIGQ7XG4gIHZhciBuMSA9IG4uc3VibigxKTtcbiAgZm9yICh2YXIgcyA9IDA7ICFuMS50ZXN0bihzKTsgcysrKSB7fVxuICB2YXIgZCA9IG4uc2hybihzKTtcblxuICB2YXIgcm4xID0gbjEudG9SZWQocmVkKTtcblxuICBmb3IgKDsgayA+IDA7IGstLSkge1xuICAgIHZhciBhID0gdGhpcy5fcmFuZHJhbmdlKG5ldyBibigyKSwgbjEpO1xuXG4gICAgdmFyIGcgPSBuLmdjZChhKTtcbiAgICBpZiAoZy5jbXBuKDEpICE9PSAwKVxuICAgICAgcmV0dXJuIGc7XG5cbiAgICB2YXIgeCA9IGEudG9SZWQocmVkKS5yZWRQb3coZCk7XG4gICAgaWYgKHguY21wKHJvbmUpID09PSAwIHx8IHguY21wKHJuMSkgPT09IDApXG4gICAgICBjb250aW51ZTtcblxuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgczsgaSsrKSB7XG4gICAgICB4ID0geC5yZWRTcXIoKTtcblxuICAgICAgaWYgKHguY21wKHJvbmUpID09PSAwKVxuICAgICAgICByZXR1cm4geC5mcm9tUmVkKCkuc3VibigxKS5nY2Qobik7XG4gICAgICBpZiAoeC5jbXAocm4xKSA9PT0gMClcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgaWYgKGkgPT09IHMpIHtcbiAgICAgIHggPSB4LnJlZFNxcigpO1xuICAgICAgcmV0dXJuIHguZnJvbVJlZCgpLnN1Ym4oMSkuZ2NkKG4pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IGV4cG9ydHM7XG5cbmZ1bmN0aW9uIHRvQXJyYXkobXNnLCBlbmMpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkobXNnKSlcbiAgICByZXR1cm4gbXNnLnNsaWNlKCk7XG4gIGlmICghbXNnKVxuICAgIHJldHVybiBbXTtcbiAgdmFyIHJlcyA9IFtdO1xuICBpZiAodHlwZW9mIG1zZyAhPT0gJ3N0cmluZycpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1zZy5sZW5ndGg7IGkrKylcbiAgICAgIHJlc1tpXSA9IG1zZ1tpXSB8IDA7XG4gICAgcmV0dXJuIHJlcztcbiAgfVxuICBpZiAoZW5jID09PSAnaGV4Jykge1xuICAgIG1zZyA9IG1zZy5yZXBsYWNlKC9bXmEtejAtOV0rL2lnLCAnJyk7XG4gICAgaWYgKG1zZy5sZW5ndGggJSAyICE9PSAwKVxuICAgICAgbXNnID0gJzAnICsgbXNnO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbXNnLmxlbmd0aDsgaSArPSAyKVxuICAgICAgcmVzLnB1c2gocGFyc2VJbnQobXNnW2ldICsgbXNnW2kgKyAxXSwgMTYpKTtcbiAgfSBlbHNlIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1zZy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGMgPSBtc2cuY2hhckNvZGVBdChpKTtcbiAgICAgIHZhciBoaSA9IGMgPj4gODtcbiAgICAgIHZhciBsbyA9IGMgJiAweGZmO1xuICAgICAgaWYgKGhpKVxuICAgICAgICByZXMucHVzaChoaSwgbG8pO1xuICAgICAgZWxzZVxuICAgICAgICByZXMucHVzaChsbyk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXM7XG59XG51dGlscy50b0FycmF5ID0gdG9BcnJheTtcblxuZnVuY3Rpb24gemVybzIod29yZCkge1xuICBpZiAod29yZC5sZW5ndGggPT09IDEpXG4gICAgcmV0dXJuICcwJyArIHdvcmQ7XG4gIGVsc2VcbiAgICByZXR1cm4gd29yZDtcbn1cbnV0aWxzLnplcm8yID0gemVybzI7XG5cbmZ1bmN0aW9uIHRvSGV4KG1zZykge1xuICB2YXIgcmVzID0gJyc7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbXNnLmxlbmd0aDsgaSsrKVxuICAgIHJlcyArPSB6ZXJvMihtc2dbaV0udG9TdHJpbmcoMTYpKTtcbiAgcmV0dXJuIHJlcztcbn1cbnV0aWxzLnRvSGV4ID0gdG9IZXg7XG5cbnV0aWxzLmVuY29kZSA9IGZ1bmN0aW9uIGVuY29kZShhcnIsIGVuYykge1xuICBpZiAoZW5jID09PSAnaGV4JylcbiAgICByZXR1cm4gdG9IZXgoYXJyKTtcbiAgZWxzZVxuICAgIHJldHVybiBhcnI7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgY3VydmUgPSBleHBvcnRzO1xuXG5jdXJ2ZS5iYXNlID0gcmVxdWlyZSgnLi9iYXNlJyk7XG5jdXJ2ZS5zaG9ydCA9IHJlcXVpcmUoJy4vc2hvcnQnKTtcbmN1cnZlLm1vbnQgPSByZXF1aXJlKCcuL21vbnQnKTtcbmN1cnZlLmVkd2FyZHMgPSByZXF1aXJlKCcuL2Vkd2FyZHMnKTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcbnZhciByb3RyMzIgPSB1dGlscy5yb3RyMzI7XG5cbmZ1bmN0aW9uIGZ0XzEocywgeCwgeSwgeikge1xuICBpZiAocyA9PT0gMClcbiAgICByZXR1cm4gY2gzMih4LCB5LCB6KTtcbiAgaWYgKHMgPT09IDEgfHwgcyA9PT0gMylcbiAgICByZXR1cm4gcDMyKHgsIHksIHopO1xuICBpZiAocyA9PT0gMilcbiAgICByZXR1cm4gbWFqMzIoeCwgeSwgeik7XG59XG5leHBvcnRzLmZ0XzEgPSBmdF8xO1xuXG5mdW5jdGlvbiBjaDMyKHgsIHksIHopIHtcbiAgcmV0dXJuICh4ICYgeSkgXiAoKH54KSAmIHopO1xufVxuZXhwb3J0cy5jaDMyID0gY2gzMjtcblxuZnVuY3Rpb24gbWFqMzIoeCwgeSwgeikge1xuICByZXR1cm4gKHggJiB5KSBeICh4ICYgeikgXiAoeSAmIHopO1xufVxuZXhwb3J0cy5tYWozMiA9IG1hajMyO1xuXG5mdW5jdGlvbiBwMzIoeCwgeSwgeikge1xuICByZXR1cm4geCBeIHkgXiB6O1xufVxuZXhwb3J0cy5wMzIgPSBwMzI7XG5cbmZ1bmN0aW9uIHMwXzI1Nih4KSB7XG4gIHJldHVybiByb3RyMzIoeCwgMikgXiByb3RyMzIoeCwgMTMpIF4gcm90cjMyKHgsIDIyKTtcbn1cbmV4cG9ydHMuczBfMjU2ID0gczBfMjU2O1xuXG5mdW5jdGlvbiBzMV8yNTYoeCkge1xuICByZXR1cm4gcm90cjMyKHgsIDYpIF4gcm90cjMyKHgsIDExKSBeIHJvdHIzMih4LCAyNSk7XG59XG5leHBvcnRzLnMxXzI1NiA9IHMxXzI1NjtcblxuZnVuY3Rpb24gZzBfMjU2KHgpIHtcbiAgcmV0dXJuIHJvdHIzMih4LCA3KSBeIHJvdHIzMih4LCAxOCkgXiAoeCA+Pj4gMyk7XG59XG5leHBvcnRzLmcwXzI1NiA9IGcwXzI1NjtcblxuZnVuY3Rpb24gZzFfMjU2KHgpIHtcbiAgcmV0dXJuIHJvdHIzMih4LCAxNykgXiByb3RyMzIoeCwgMTkpIF4gKHggPj4+IDEwKTtcbn1cbmV4cG9ydHMuZzFfMjU2ID0gZzFfMjU2O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xudmFyIGNvbW1vbiA9IHJlcXVpcmUoJy4uL2NvbW1vbicpO1xudmFyIHNoYUNvbW1vbiA9IHJlcXVpcmUoJy4vY29tbW9uJyk7XG52YXIgYXNzZXJ0ID0gcmVxdWlyZSgnbWluaW1hbGlzdGljLWFzc2VydCcpO1xuXG52YXIgc3VtMzIgPSB1dGlscy5zdW0zMjtcbnZhciBzdW0zMl80ID0gdXRpbHMuc3VtMzJfNDtcbnZhciBzdW0zMl81ID0gdXRpbHMuc3VtMzJfNTtcbnZhciBjaDMyID0gc2hhQ29tbW9uLmNoMzI7XG52YXIgbWFqMzIgPSBzaGFDb21tb24ubWFqMzI7XG52YXIgczBfMjU2ID0gc2hhQ29tbW9uLnMwXzI1NjtcbnZhciBzMV8yNTYgPSBzaGFDb21tb24uczFfMjU2O1xudmFyIGcwXzI1NiA9IHNoYUNvbW1vbi5nMF8yNTY7XG52YXIgZzFfMjU2ID0gc2hhQ29tbW9uLmcxXzI1NjtcblxudmFyIEJsb2NrSGFzaCA9IGNvbW1vbi5CbG9ja0hhc2g7XG5cbnZhciBzaGEyNTZfSyA9IFtcbiAgMHg0MjhhMmY5OCwgMHg3MTM3NDQ5MSwgMHhiNWMwZmJjZiwgMHhlOWI1ZGJhNSxcbiAgMHgzOTU2YzI1YiwgMHg1OWYxMTFmMSwgMHg5MjNmODJhNCwgMHhhYjFjNWVkNSxcbiAgMHhkODA3YWE5OCwgMHgxMjgzNWIwMSwgMHgyNDMxODViZSwgMHg1NTBjN2RjMyxcbiAgMHg3MmJlNWQ3NCwgMHg4MGRlYjFmZSwgMHg5YmRjMDZhNywgMHhjMTliZjE3NCxcbiAgMHhlNDliNjljMSwgMHhlZmJlNDc4NiwgMHgwZmMxOWRjNiwgMHgyNDBjYTFjYyxcbiAgMHgyZGU5MmM2ZiwgMHg0YTc0ODRhYSwgMHg1Y2IwYTlkYywgMHg3NmY5ODhkYSxcbiAgMHg5ODNlNTE1MiwgMHhhODMxYzY2ZCwgMHhiMDAzMjdjOCwgMHhiZjU5N2ZjNyxcbiAgMHhjNmUwMGJmMywgMHhkNWE3OTE0NywgMHgwNmNhNjM1MSwgMHgxNDI5Mjk2NyxcbiAgMHgyN2I3MGE4NSwgMHgyZTFiMjEzOCwgMHg0ZDJjNmRmYywgMHg1MzM4MGQxMyxcbiAgMHg2NTBhNzM1NCwgMHg3NjZhMGFiYiwgMHg4MWMyYzkyZSwgMHg5MjcyMmM4NSxcbiAgMHhhMmJmZThhMSwgMHhhODFhNjY0YiwgMHhjMjRiOGI3MCwgMHhjNzZjNTFhMyxcbiAgMHhkMTkyZTgxOSwgMHhkNjk5MDYyNCwgMHhmNDBlMzU4NSwgMHgxMDZhYTA3MCxcbiAgMHgxOWE0YzExNiwgMHgxZTM3NmMwOCwgMHgyNzQ4Nzc0YywgMHgzNGIwYmNiNSxcbiAgMHgzOTFjMGNiMywgMHg0ZWQ4YWE0YSwgMHg1YjljY2E0ZiwgMHg2ODJlNmZmMyxcbiAgMHg3NDhmODJlZSwgMHg3OGE1NjM2ZiwgMHg4NGM4NzgxNCwgMHg4Y2M3MDIwOCxcbiAgMHg5MGJlZmZmYSwgMHhhNDUwNmNlYiwgMHhiZWY5YTNmNywgMHhjNjcxNzhmMlxuXTtcblxuZnVuY3Rpb24gU0hBMjU2KCkge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgU0hBMjU2KSlcbiAgICByZXR1cm4gbmV3IFNIQTI1NigpO1xuXG4gIEJsb2NrSGFzaC5jYWxsKHRoaXMpO1xuICB0aGlzLmggPSBbXG4gICAgMHg2YTA5ZTY2NywgMHhiYjY3YWU4NSwgMHgzYzZlZjM3MiwgMHhhNTRmZjUzYSxcbiAgICAweDUxMGU1MjdmLCAweDliMDU2ODhjLCAweDFmODNkOWFiLCAweDViZTBjZDE5XG4gIF07XG4gIHRoaXMuayA9IHNoYTI1Nl9LO1xuICB0aGlzLlcgPSBuZXcgQXJyYXkoNjQpO1xufVxudXRpbHMuaW5oZXJpdHMoU0hBMjU2LCBCbG9ja0hhc2gpO1xubW9kdWxlLmV4cG9ydHMgPSBTSEEyNTY7XG5cblNIQTI1Ni5ibG9ja1NpemUgPSA1MTI7XG5TSEEyNTYub3V0U2l6ZSA9IDI1NjtcblNIQTI1Ni5obWFjU3RyZW5ndGggPSAxOTI7XG5TSEEyNTYucGFkTGVuZ3RoID0gNjQ7XG5cblNIQTI1Ni5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIF91cGRhdGUobXNnLCBzdGFydCkge1xuICB2YXIgVyA9IHRoaXMuVztcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IDE2OyBpKyspXG4gICAgV1tpXSA9IG1zZ1tzdGFydCArIGldO1xuICBmb3IgKDsgaSA8IFcubGVuZ3RoOyBpKyspXG4gICAgV1tpXSA9IHN1bTMyXzQoZzFfMjU2KFdbaSAtIDJdKSwgV1tpIC0gN10sIGcwXzI1NihXW2kgLSAxNV0pLCBXW2kgLSAxNl0pO1xuXG4gIHZhciBhID0gdGhpcy5oWzBdO1xuICB2YXIgYiA9IHRoaXMuaFsxXTtcbiAgdmFyIGMgPSB0aGlzLmhbMl07XG4gIHZhciBkID0gdGhpcy5oWzNdO1xuICB2YXIgZSA9IHRoaXMuaFs0XTtcbiAgdmFyIGYgPSB0aGlzLmhbNV07XG4gIHZhciBnID0gdGhpcy5oWzZdO1xuICB2YXIgaCA9IHRoaXMuaFs3XTtcblxuICBhc3NlcnQodGhpcy5rLmxlbmd0aCA9PT0gVy5sZW5ndGgpO1xuICBmb3IgKGkgPSAwOyBpIDwgVy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBUMSA9IHN1bTMyXzUoaCwgczFfMjU2KGUpLCBjaDMyKGUsIGYsIGcpLCB0aGlzLmtbaV0sIFdbaV0pO1xuICAgIHZhciBUMiA9IHN1bTMyKHMwXzI1NihhKSwgbWFqMzIoYSwgYiwgYykpO1xuICAgIGggPSBnO1xuICAgIGcgPSBmO1xuICAgIGYgPSBlO1xuICAgIGUgPSBzdW0zMihkLCBUMSk7XG4gICAgZCA9IGM7XG4gICAgYyA9IGI7XG4gICAgYiA9IGE7XG4gICAgYSA9IHN1bTMyKFQxLCBUMik7XG4gIH1cblxuICB0aGlzLmhbMF0gPSBzdW0zMih0aGlzLmhbMF0sIGEpO1xuICB0aGlzLmhbMV0gPSBzdW0zMih0aGlzLmhbMV0sIGIpO1xuICB0aGlzLmhbMl0gPSBzdW0zMih0aGlzLmhbMl0sIGMpO1xuICB0aGlzLmhbM10gPSBzdW0zMih0aGlzLmhbM10sIGQpO1xuICB0aGlzLmhbNF0gPSBzdW0zMih0aGlzLmhbNF0sIGUpO1xuICB0aGlzLmhbNV0gPSBzdW0zMih0aGlzLmhbNV0sIGYpO1xuICB0aGlzLmhbNl0gPSBzdW0zMih0aGlzLmhbNl0sIGcpO1xuICB0aGlzLmhbN10gPSBzdW0zMih0aGlzLmhbN10sIGgpO1xufTtcblxuU0hBMjU2LnByb3RvdHlwZS5fZGlnZXN0ID0gZnVuY3Rpb24gZGlnZXN0KGVuYykge1xuICBpZiAoZW5jID09PSAnaGV4JylcbiAgICByZXR1cm4gdXRpbHMudG9IZXgzMih0aGlzLmgsICdiaWcnKTtcbiAgZWxzZVxuICAgIHJldHVybiB1dGlscy5zcGxpdDMyKHRoaXMuaCwgJ2JpZycpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcbnZhciBjb21tb24gPSByZXF1aXJlKCcuLi9jb21tb24nKTtcbnZhciBhc3NlcnQgPSByZXF1aXJlKCdtaW5pbWFsaXN0aWMtYXNzZXJ0Jyk7XG5cbnZhciByb3RyNjRfaGkgPSB1dGlscy5yb3RyNjRfaGk7XG52YXIgcm90cjY0X2xvID0gdXRpbHMucm90cjY0X2xvO1xudmFyIHNocjY0X2hpID0gdXRpbHMuc2hyNjRfaGk7XG52YXIgc2hyNjRfbG8gPSB1dGlscy5zaHI2NF9sbztcbnZhciBzdW02NCA9IHV0aWxzLnN1bTY0O1xudmFyIHN1bTY0X2hpID0gdXRpbHMuc3VtNjRfaGk7XG52YXIgc3VtNjRfbG8gPSB1dGlscy5zdW02NF9sbztcbnZhciBzdW02NF80X2hpID0gdXRpbHMuc3VtNjRfNF9oaTtcbnZhciBzdW02NF80X2xvID0gdXRpbHMuc3VtNjRfNF9sbztcbnZhciBzdW02NF81X2hpID0gdXRpbHMuc3VtNjRfNV9oaTtcbnZhciBzdW02NF81X2xvID0gdXRpbHMuc3VtNjRfNV9sbztcblxudmFyIEJsb2NrSGFzaCA9IGNvbW1vbi5CbG9ja0hhc2g7XG5cbnZhciBzaGE1MTJfSyA9IFtcbiAgMHg0MjhhMmY5OCwgMHhkNzI4YWUyMiwgMHg3MTM3NDQ5MSwgMHgyM2VmNjVjZCxcbiAgMHhiNWMwZmJjZiwgMHhlYzRkM2IyZiwgMHhlOWI1ZGJhNSwgMHg4MTg5ZGJiYyxcbiAgMHgzOTU2YzI1YiwgMHhmMzQ4YjUzOCwgMHg1OWYxMTFmMSwgMHhiNjA1ZDAxOSxcbiAgMHg5MjNmODJhNCwgMHhhZjE5NGY5YiwgMHhhYjFjNWVkNSwgMHhkYTZkODExOCxcbiAgMHhkODA3YWE5OCwgMHhhMzAzMDI0MiwgMHgxMjgzNWIwMSwgMHg0NTcwNmZiZSxcbiAgMHgyNDMxODViZSwgMHg0ZWU0YjI4YywgMHg1NTBjN2RjMywgMHhkNWZmYjRlMixcbiAgMHg3MmJlNWQ3NCwgMHhmMjdiODk2ZiwgMHg4MGRlYjFmZSwgMHgzYjE2OTZiMSxcbiAgMHg5YmRjMDZhNywgMHgyNWM3MTIzNSwgMHhjMTliZjE3NCwgMHhjZjY5MjY5NCxcbiAgMHhlNDliNjljMSwgMHg5ZWYxNGFkMiwgMHhlZmJlNDc4NiwgMHgzODRmMjVlMyxcbiAgMHgwZmMxOWRjNiwgMHg4YjhjZDViNSwgMHgyNDBjYTFjYywgMHg3N2FjOWM2NSxcbiAgMHgyZGU5MmM2ZiwgMHg1OTJiMDI3NSwgMHg0YTc0ODRhYSwgMHg2ZWE2ZTQ4MyxcbiAgMHg1Y2IwYTlkYywgMHhiZDQxZmJkNCwgMHg3NmY5ODhkYSwgMHg4MzExNTNiNSxcbiAgMHg5ODNlNTE1MiwgMHhlZTY2ZGZhYiwgMHhhODMxYzY2ZCwgMHgyZGI0MzIxMCxcbiAgMHhiMDAzMjdjOCwgMHg5OGZiMjEzZiwgMHhiZjU5N2ZjNywgMHhiZWVmMGVlNCxcbiAgMHhjNmUwMGJmMywgMHgzZGE4OGZjMiwgMHhkNWE3OTE0NywgMHg5MzBhYTcyNSxcbiAgMHgwNmNhNjM1MSwgMHhlMDAzODI2ZiwgMHgxNDI5Mjk2NywgMHgwYTBlNmU3MCxcbiAgMHgyN2I3MGE4NSwgMHg0NmQyMmZmYywgMHgyZTFiMjEzOCwgMHg1YzI2YzkyNixcbiAgMHg0ZDJjNmRmYywgMHg1YWM0MmFlZCwgMHg1MzM4MGQxMywgMHg5ZDk1YjNkZixcbiAgMHg2NTBhNzM1NCwgMHg4YmFmNjNkZSwgMHg3NjZhMGFiYiwgMHgzYzc3YjJhOCxcbiAgMHg4MWMyYzkyZSwgMHg0N2VkYWVlNiwgMHg5MjcyMmM4NSwgMHgxNDgyMzUzYixcbiAgMHhhMmJmZThhMSwgMHg0Y2YxMDM2NCwgMHhhODFhNjY0YiwgMHhiYzQyMzAwMSxcbiAgMHhjMjRiOGI3MCwgMHhkMGY4OTc5MSwgMHhjNzZjNTFhMywgMHgwNjU0YmUzMCxcbiAgMHhkMTkyZTgxOSwgMHhkNmVmNTIxOCwgMHhkNjk5MDYyNCwgMHg1NTY1YTkxMCxcbiAgMHhmNDBlMzU4NSwgMHg1NzcxMjAyYSwgMHgxMDZhYTA3MCwgMHgzMmJiZDFiOCxcbiAgMHgxOWE0YzExNiwgMHhiOGQyZDBjOCwgMHgxZTM3NmMwOCwgMHg1MTQxYWI1MyxcbiAgMHgyNzQ4Nzc0YywgMHhkZjhlZWI5OSwgMHgzNGIwYmNiNSwgMHhlMTliNDhhOCxcbiAgMHgzOTFjMGNiMywgMHhjNWM5NWE2MywgMHg0ZWQ4YWE0YSwgMHhlMzQxOGFjYixcbiAgMHg1YjljY2E0ZiwgMHg3NzYzZTM3MywgMHg2ODJlNmZmMywgMHhkNmIyYjhhMyxcbiAgMHg3NDhmODJlZSwgMHg1ZGVmYjJmYywgMHg3OGE1NjM2ZiwgMHg0MzE3MmY2MCxcbiAgMHg4NGM4NzgxNCwgMHhhMWYwYWI3MiwgMHg4Y2M3MDIwOCwgMHgxYTY0MzllYyxcbiAgMHg5MGJlZmZmYSwgMHgyMzYzMWUyOCwgMHhhNDUwNmNlYiwgMHhkZTgyYmRlOSxcbiAgMHhiZWY5YTNmNywgMHhiMmM2NzkxNSwgMHhjNjcxNzhmMiwgMHhlMzcyNTMyYixcbiAgMHhjYTI3M2VjZSwgMHhlYTI2NjE5YywgMHhkMTg2YjhjNywgMHgyMWMwYzIwNyxcbiAgMHhlYWRhN2RkNiwgMHhjZGUwZWIxZSwgMHhmNTdkNGY3ZiwgMHhlZTZlZDE3OCxcbiAgMHgwNmYwNjdhYSwgMHg3MjE3NmZiYSwgMHgwYTYzN2RjNSwgMHhhMmM4OThhNixcbiAgMHgxMTNmOTgwNCwgMHhiZWY5MGRhZSwgMHgxYjcxMGIzNSwgMHgxMzFjNDcxYixcbiAgMHgyOGRiNzdmNSwgMHgyMzA0N2Q4NCwgMHgzMmNhYWI3YiwgMHg0MGM3MjQ5MyxcbiAgMHgzYzllYmUwYSwgMHgxNWM5YmViYywgMHg0MzFkNjdjNCwgMHg5YzEwMGQ0YyxcbiAgMHg0Y2M1ZDRiZSwgMHhjYjNlNDJiNiwgMHg1OTdmMjk5YywgMHhmYzY1N2UyYSxcbiAgMHg1ZmNiNmZhYiwgMHgzYWQ2ZmFlYywgMHg2YzQ0MTk4YywgMHg0YTQ3NTgxN1xuXTtcblxuZnVuY3Rpb24gU0hBNTEyKCkge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgU0hBNTEyKSlcbiAgICByZXR1cm4gbmV3IFNIQTUxMigpO1xuXG4gIEJsb2NrSGFzaC5jYWxsKHRoaXMpO1xuICB0aGlzLmggPSBbXG4gICAgMHg2YTA5ZTY2NywgMHhmM2JjYzkwOCxcbiAgICAweGJiNjdhZTg1LCAweDg0Y2FhNzNiLFxuICAgIDB4M2M2ZWYzNzIsIDB4ZmU5NGY4MmIsXG4gICAgMHhhNTRmZjUzYSwgMHg1ZjFkMzZmMSxcbiAgICAweDUxMGU1MjdmLCAweGFkZTY4MmQxLFxuICAgIDB4OWIwNTY4OGMsIDB4MmIzZTZjMWYsXG4gICAgMHgxZjgzZDlhYiwgMHhmYjQxYmQ2YixcbiAgICAweDViZTBjZDE5LCAweDEzN2UyMTc5IF07XG4gIHRoaXMuayA9IHNoYTUxMl9LO1xuICB0aGlzLlcgPSBuZXcgQXJyYXkoMTYwKTtcbn1cbnV0aWxzLmluaGVyaXRzKFNIQTUxMiwgQmxvY2tIYXNoKTtcbm1vZHVsZS5leHBvcnRzID0gU0hBNTEyO1xuXG5TSEE1MTIuYmxvY2tTaXplID0gMTAyNDtcblNIQTUxMi5vdXRTaXplID0gNTEyO1xuU0hBNTEyLmhtYWNTdHJlbmd0aCA9IDE5MjtcblNIQTUxMi5wYWRMZW5ndGggPSAxMjg7XG5cblNIQTUxMi5wcm90b3R5cGUuX3ByZXBhcmVCbG9jayA9IGZ1bmN0aW9uIF9wcmVwYXJlQmxvY2sobXNnLCBzdGFydCkge1xuICB2YXIgVyA9IHRoaXMuVztcblxuICAvLyAzMiB4IDMyYml0IHdvcmRzXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgMzI7IGkrKylcbiAgICBXW2ldID0gbXNnW3N0YXJ0ICsgaV07XG4gIGZvciAoOyBpIDwgVy5sZW5ndGg7IGkgKz0gMikge1xuICAgIHZhciBjMF9oaSA9IGcxXzUxMl9oaShXW2kgLSA0XSwgV1tpIC0gM10pOyAgLy8gaSAtIDJcbiAgICB2YXIgYzBfbG8gPSBnMV81MTJfbG8oV1tpIC0gNF0sIFdbaSAtIDNdKTtcbiAgICB2YXIgYzFfaGkgPSBXW2kgLSAxNF07ICAvLyBpIC0gN1xuICAgIHZhciBjMV9sbyA9IFdbaSAtIDEzXTtcbiAgICB2YXIgYzJfaGkgPSBnMF81MTJfaGkoV1tpIC0gMzBdLCBXW2kgLSAyOV0pOyAgLy8gaSAtIDE1XG4gICAgdmFyIGMyX2xvID0gZzBfNTEyX2xvKFdbaSAtIDMwXSwgV1tpIC0gMjldKTtcbiAgICB2YXIgYzNfaGkgPSBXW2kgLSAzMl07ICAvLyBpIC0gMTZcbiAgICB2YXIgYzNfbG8gPSBXW2kgLSAzMV07XG5cbiAgICBXW2ldID0gc3VtNjRfNF9oaShcbiAgICAgIGMwX2hpLCBjMF9sbyxcbiAgICAgIGMxX2hpLCBjMV9sbyxcbiAgICAgIGMyX2hpLCBjMl9sbyxcbiAgICAgIGMzX2hpLCBjM19sbyk7XG4gICAgV1tpICsgMV0gPSBzdW02NF80X2xvKFxuICAgICAgYzBfaGksIGMwX2xvLFxuICAgICAgYzFfaGksIGMxX2xvLFxuICAgICAgYzJfaGksIGMyX2xvLFxuICAgICAgYzNfaGksIGMzX2xvKTtcbiAgfVxufTtcblxuU0hBNTEyLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gX3VwZGF0ZShtc2csIHN0YXJ0KSB7XG4gIHRoaXMuX3ByZXBhcmVCbG9jayhtc2csIHN0YXJ0KTtcblxuICB2YXIgVyA9IHRoaXMuVztcblxuICB2YXIgYWggPSB0aGlzLmhbMF07XG4gIHZhciBhbCA9IHRoaXMuaFsxXTtcbiAgdmFyIGJoID0gdGhpcy5oWzJdO1xuICB2YXIgYmwgPSB0aGlzLmhbM107XG4gIHZhciBjaCA9IHRoaXMuaFs0XTtcbiAgdmFyIGNsID0gdGhpcy5oWzVdO1xuICB2YXIgZGggPSB0aGlzLmhbNl07XG4gIHZhciBkbCA9IHRoaXMuaFs3XTtcbiAgdmFyIGVoID0gdGhpcy5oWzhdO1xuICB2YXIgZWwgPSB0aGlzLmhbOV07XG4gIHZhciBmaCA9IHRoaXMuaFsxMF07XG4gIHZhciBmbCA9IHRoaXMuaFsxMV07XG4gIHZhciBnaCA9IHRoaXMuaFsxMl07XG4gIHZhciBnbCA9IHRoaXMuaFsxM107XG4gIHZhciBoaCA9IHRoaXMuaFsxNF07XG4gIHZhciBobCA9IHRoaXMuaFsxNV07XG5cbiAgYXNzZXJ0KHRoaXMuay5sZW5ndGggPT09IFcubGVuZ3RoKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBXLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgdmFyIGMwX2hpID0gaGg7XG4gICAgdmFyIGMwX2xvID0gaGw7XG4gICAgdmFyIGMxX2hpID0gczFfNTEyX2hpKGVoLCBlbCk7XG4gICAgdmFyIGMxX2xvID0gczFfNTEyX2xvKGVoLCBlbCk7XG4gICAgdmFyIGMyX2hpID0gY2g2NF9oaShlaCwgZWwsIGZoLCBmbCwgZ2gsIGdsKTtcbiAgICB2YXIgYzJfbG8gPSBjaDY0X2xvKGVoLCBlbCwgZmgsIGZsLCBnaCwgZ2wpO1xuICAgIHZhciBjM19oaSA9IHRoaXMua1tpXTtcbiAgICB2YXIgYzNfbG8gPSB0aGlzLmtbaSArIDFdO1xuICAgIHZhciBjNF9oaSA9IFdbaV07XG4gICAgdmFyIGM0X2xvID0gV1tpICsgMV07XG5cbiAgICB2YXIgVDFfaGkgPSBzdW02NF81X2hpKFxuICAgICAgYzBfaGksIGMwX2xvLFxuICAgICAgYzFfaGksIGMxX2xvLFxuICAgICAgYzJfaGksIGMyX2xvLFxuICAgICAgYzNfaGksIGMzX2xvLFxuICAgICAgYzRfaGksIGM0X2xvKTtcbiAgICB2YXIgVDFfbG8gPSBzdW02NF81X2xvKFxuICAgICAgYzBfaGksIGMwX2xvLFxuICAgICAgYzFfaGksIGMxX2xvLFxuICAgICAgYzJfaGksIGMyX2xvLFxuICAgICAgYzNfaGksIGMzX2xvLFxuICAgICAgYzRfaGksIGM0X2xvKTtcblxuICAgIGMwX2hpID0gczBfNTEyX2hpKGFoLCBhbCk7XG4gICAgYzBfbG8gPSBzMF81MTJfbG8oYWgsIGFsKTtcbiAgICBjMV9oaSA9IG1hajY0X2hpKGFoLCBhbCwgYmgsIGJsLCBjaCwgY2wpO1xuICAgIGMxX2xvID0gbWFqNjRfbG8oYWgsIGFsLCBiaCwgYmwsIGNoLCBjbCk7XG5cbiAgICB2YXIgVDJfaGkgPSBzdW02NF9oaShjMF9oaSwgYzBfbG8sIGMxX2hpLCBjMV9sbyk7XG4gICAgdmFyIFQyX2xvID0gc3VtNjRfbG8oYzBfaGksIGMwX2xvLCBjMV9oaSwgYzFfbG8pO1xuXG4gICAgaGggPSBnaDtcbiAgICBobCA9IGdsO1xuXG4gICAgZ2ggPSBmaDtcbiAgICBnbCA9IGZsO1xuXG4gICAgZmggPSBlaDtcbiAgICBmbCA9IGVsO1xuXG4gICAgZWggPSBzdW02NF9oaShkaCwgZGwsIFQxX2hpLCBUMV9sbyk7XG4gICAgZWwgPSBzdW02NF9sbyhkbCwgZGwsIFQxX2hpLCBUMV9sbyk7XG5cbiAgICBkaCA9IGNoO1xuICAgIGRsID0gY2w7XG5cbiAgICBjaCA9IGJoO1xuICAgIGNsID0gYmw7XG5cbiAgICBiaCA9IGFoO1xuICAgIGJsID0gYWw7XG5cbiAgICBhaCA9IHN1bTY0X2hpKFQxX2hpLCBUMV9sbywgVDJfaGksIFQyX2xvKTtcbiAgICBhbCA9IHN1bTY0X2xvKFQxX2hpLCBUMV9sbywgVDJfaGksIFQyX2xvKTtcbiAgfVxuXG4gIHN1bTY0KHRoaXMuaCwgMCwgYWgsIGFsKTtcbiAgc3VtNjQodGhpcy5oLCAyLCBiaCwgYmwpO1xuICBzdW02NCh0aGlzLmgsIDQsIGNoLCBjbCk7XG4gIHN1bTY0KHRoaXMuaCwgNiwgZGgsIGRsKTtcbiAgc3VtNjQodGhpcy5oLCA4LCBlaCwgZWwpO1xuICBzdW02NCh0aGlzLmgsIDEwLCBmaCwgZmwpO1xuICBzdW02NCh0aGlzLmgsIDEyLCBnaCwgZ2wpO1xuICBzdW02NCh0aGlzLmgsIDE0LCBoaCwgaGwpO1xufTtcblxuU0hBNTEyLnByb3RvdHlwZS5fZGlnZXN0ID0gZnVuY3Rpb24gZGlnZXN0KGVuYykge1xuICBpZiAoZW5jID09PSAnaGV4JylcbiAgICByZXR1cm4gdXRpbHMudG9IZXgzMih0aGlzLmgsICdiaWcnKTtcbiAgZWxzZVxuICAgIHJldHVybiB1dGlscy5zcGxpdDMyKHRoaXMuaCwgJ2JpZycpO1xufTtcblxuZnVuY3Rpb24gY2g2NF9oaSh4aCwgeGwsIHloLCB5bCwgemgpIHtcbiAgdmFyIHIgPSAoeGggJiB5aCkgXiAoKH54aCkgJiB6aCk7XG4gIGlmIChyIDwgMClcbiAgICByICs9IDB4MTAwMDAwMDAwO1xuICByZXR1cm4gcjtcbn1cblxuZnVuY3Rpb24gY2g2NF9sbyh4aCwgeGwsIHloLCB5bCwgemgsIHpsKSB7XG4gIHZhciByID0gKHhsICYgeWwpIF4gKCh+eGwpICYgemwpO1xuICBpZiAociA8IDApXG4gICAgciArPSAweDEwMDAwMDAwMDtcbiAgcmV0dXJuIHI7XG59XG5cbmZ1bmN0aW9uIG1hajY0X2hpKHhoLCB4bCwgeWgsIHlsLCB6aCkge1xuICB2YXIgciA9ICh4aCAmIHloKSBeICh4aCAmIHpoKSBeICh5aCAmIHpoKTtcbiAgaWYgKHIgPCAwKVxuICAgIHIgKz0gMHgxMDAwMDAwMDA7XG4gIHJldHVybiByO1xufVxuXG5mdW5jdGlvbiBtYWo2NF9sbyh4aCwgeGwsIHloLCB5bCwgemgsIHpsKSB7XG4gIHZhciByID0gKHhsICYgeWwpIF4gKHhsICYgemwpIF4gKHlsICYgemwpO1xuICBpZiAociA8IDApXG4gICAgciArPSAweDEwMDAwMDAwMDtcbiAgcmV0dXJuIHI7XG59XG5cbmZ1bmN0aW9uIHMwXzUxMl9oaSh4aCwgeGwpIHtcbiAgdmFyIGMwX2hpID0gcm90cjY0X2hpKHhoLCB4bCwgMjgpO1xuICB2YXIgYzFfaGkgPSByb3RyNjRfaGkoeGwsIHhoLCAyKTsgIC8vIDM0XG4gIHZhciBjMl9oaSA9IHJvdHI2NF9oaSh4bCwgeGgsIDcpOyAgLy8gMzlcblxuICB2YXIgciA9IGMwX2hpIF4gYzFfaGkgXiBjMl9oaTtcbiAgaWYgKHIgPCAwKVxuICAgIHIgKz0gMHgxMDAwMDAwMDA7XG4gIHJldHVybiByO1xufVxuXG5mdW5jdGlvbiBzMF81MTJfbG8oeGgsIHhsKSB7XG4gIHZhciBjMF9sbyA9IHJvdHI2NF9sbyh4aCwgeGwsIDI4KTtcbiAgdmFyIGMxX2xvID0gcm90cjY0X2xvKHhsLCB4aCwgMik7ICAvLyAzNFxuICB2YXIgYzJfbG8gPSByb3RyNjRfbG8oeGwsIHhoLCA3KTsgIC8vIDM5XG5cbiAgdmFyIHIgPSBjMF9sbyBeIGMxX2xvIF4gYzJfbG87XG4gIGlmIChyIDwgMClcbiAgICByICs9IDB4MTAwMDAwMDAwO1xuICByZXR1cm4gcjtcbn1cblxuZnVuY3Rpb24gczFfNTEyX2hpKHhoLCB4bCkge1xuICB2YXIgYzBfaGkgPSByb3RyNjRfaGkoeGgsIHhsLCAxNCk7XG4gIHZhciBjMV9oaSA9IHJvdHI2NF9oaSh4aCwgeGwsIDE4KTtcbiAgdmFyIGMyX2hpID0gcm90cjY0X2hpKHhsLCB4aCwgOSk7ICAvLyA0MVxuXG4gIHZhciByID0gYzBfaGkgXiBjMV9oaSBeIGMyX2hpO1xuICBpZiAociA8IDApXG4gICAgciArPSAweDEwMDAwMDAwMDtcbiAgcmV0dXJuIHI7XG59XG5cbmZ1bmN0aW9uIHMxXzUxMl9sbyh4aCwgeGwpIHtcbiAgdmFyIGMwX2xvID0gcm90cjY0X2xvKHhoLCB4bCwgMTQpO1xuICB2YXIgYzFfbG8gPSByb3RyNjRfbG8oeGgsIHhsLCAxOCk7XG4gIHZhciBjMl9sbyA9IHJvdHI2NF9sbyh4bCwgeGgsIDkpOyAgLy8gNDFcblxuICB2YXIgciA9IGMwX2xvIF4gYzFfbG8gXiBjMl9sbztcbiAgaWYgKHIgPCAwKVxuICAgIHIgKz0gMHgxMDAwMDAwMDA7XG4gIHJldHVybiByO1xufVxuXG5mdW5jdGlvbiBnMF81MTJfaGkoeGgsIHhsKSB7XG4gIHZhciBjMF9oaSA9IHJvdHI2NF9oaSh4aCwgeGwsIDEpO1xuICB2YXIgYzFfaGkgPSByb3RyNjRfaGkoeGgsIHhsLCA4KTtcbiAgdmFyIGMyX2hpID0gc2hyNjRfaGkoeGgsIHhsLCA3KTtcblxuICB2YXIgciA9IGMwX2hpIF4gYzFfaGkgXiBjMl9oaTtcbiAgaWYgKHIgPCAwKVxuICAgIHIgKz0gMHgxMDAwMDAwMDA7XG4gIHJldHVybiByO1xufVxuXG5mdW5jdGlvbiBnMF81MTJfbG8oeGgsIHhsKSB7XG4gIHZhciBjMF9sbyA9IHJvdHI2NF9sbyh4aCwgeGwsIDEpO1xuICB2YXIgYzFfbG8gPSByb3RyNjRfbG8oeGgsIHhsLCA4KTtcbiAgdmFyIGMyX2xvID0gc2hyNjRfbG8oeGgsIHhsLCA3KTtcblxuICB2YXIgciA9IGMwX2xvIF4gYzFfbG8gXiBjMl9sbztcbiAgaWYgKHIgPCAwKVxuICAgIHIgKz0gMHgxMDAwMDAwMDA7XG4gIHJldHVybiByO1xufVxuXG5mdW5jdGlvbiBnMV81MTJfaGkoeGgsIHhsKSB7XG4gIHZhciBjMF9oaSA9IHJvdHI2NF9oaSh4aCwgeGwsIDE5KTtcbiAgdmFyIGMxX2hpID0gcm90cjY0X2hpKHhsLCB4aCwgMjkpOyAgLy8gNjFcbiAgdmFyIGMyX2hpID0gc2hyNjRfaGkoeGgsIHhsLCA2KTtcblxuICB2YXIgciA9IGMwX2hpIF4gYzFfaGkgXiBjMl9oaTtcbiAgaWYgKHIgPCAwKVxuICAgIHIgKz0gMHgxMDAwMDAwMDA7XG4gIHJldHVybiByO1xufVxuXG5mdW5jdGlvbiBnMV81MTJfbG8oeGgsIHhsKSB7XG4gIHZhciBjMF9sbyA9IHJvdHI2NF9sbyh4aCwgeGwsIDE5KTtcbiAgdmFyIGMxX2xvID0gcm90cjY0X2xvKHhsLCB4aCwgMjkpOyAgLy8gNjFcbiAgdmFyIGMyX2xvID0gc2hyNjRfbG8oeGgsIHhsLCA2KTtcblxuICB2YXIgciA9IGMwX2xvIF4gYzFfbG8gXiBjMl9sbztcbiAgaWYgKHIgPCAwKVxuICAgIHIgKz0gMHgxMDAwMDAwMDA7XG4gIHJldHVybiByO1xufVxuIiwidmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcbnZhciBSZXBvcnRlciA9IHJlcXVpcmUoJy4uL2Jhc2UnKS5SZXBvcnRlcjtcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdidWZmZXInKS5CdWZmZXI7XG5cbmZ1bmN0aW9uIERlY29kZXJCdWZmZXIoYmFzZSwgb3B0aW9ucykge1xuICBSZXBvcnRlci5jYWxsKHRoaXMsIG9wdGlvbnMpO1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihiYXNlKSkge1xuICAgIHRoaXMuZXJyb3IoJ0lucHV0IG5vdCBCdWZmZXInKTtcbiAgICByZXR1cm47XG4gIH1cblxuICB0aGlzLmJhc2UgPSBiYXNlO1xuICB0aGlzLm9mZnNldCA9IDA7XG4gIHRoaXMubGVuZ3RoID0gYmFzZS5sZW5ndGg7XG59XG5pbmhlcml0cyhEZWNvZGVyQnVmZmVyLCBSZXBvcnRlcik7XG5leHBvcnRzLkRlY29kZXJCdWZmZXIgPSBEZWNvZGVyQnVmZmVyO1xuXG5EZWNvZGVyQnVmZmVyLnByb3RvdHlwZS5zYXZlID0gZnVuY3Rpb24gc2F2ZSgpIHtcbiAgcmV0dXJuIHsgb2Zmc2V0OiB0aGlzLm9mZnNldCwgcmVwb3J0ZXI6IFJlcG9ydGVyLnByb3RvdHlwZS5zYXZlLmNhbGwodGhpcykgfTtcbn07XG5cbkRlY29kZXJCdWZmZXIucHJvdG90eXBlLnJlc3RvcmUgPSBmdW5jdGlvbiByZXN0b3JlKHNhdmUpIHtcbiAgLy8gUmV0dXJuIHNraXBwZWQgZGF0YVxuICB2YXIgcmVzID0gbmV3IERlY29kZXJCdWZmZXIodGhpcy5iYXNlKTtcbiAgcmVzLm9mZnNldCA9IHNhdmUub2Zmc2V0O1xuICByZXMubGVuZ3RoID0gdGhpcy5vZmZzZXQ7XG5cbiAgdGhpcy5vZmZzZXQgPSBzYXZlLm9mZnNldDtcbiAgUmVwb3J0ZXIucHJvdG90eXBlLnJlc3RvcmUuY2FsbCh0aGlzLCBzYXZlLnJlcG9ydGVyKTtcblxuICByZXR1cm4gcmVzO1xufTtcblxuRGVjb2RlckJ1ZmZlci5wcm90b3R5cGUuaXNFbXB0eSA9IGZ1bmN0aW9uIGlzRW1wdHkoKSB7XG4gIHJldHVybiB0aGlzLm9mZnNldCA9PT0gdGhpcy5sZW5ndGg7XG59O1xuXG5EZWNvZGVyQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDggPSBmdW5jdGlvbiByZWFkVUludDgoZmFpbCkge1xuICBpZiAodGhpcy5vZmZzZXQgKyAxIDw9IHRoaXMubGVuZ3RoKVxuICAgIHJldHVybiB0aGlzLmJhc2UucmVhZFVJbnQ4KHRoaXMub2Zmc2V0KyssIHRydWUpO1xuICBlbHNlXG4gICAgcmV0dXJuIHRoaXMuZXJyb3IoZmFpbCB8fCAnRGVjb2RlckJ1ZmZlciBvdmVycnVuJyk7XG59XG5cbkRlY29kZXJCdWZmZXIucHJvdG90eXBlLnNraXAgPSBmdW5jdGlvbiBza2lwKGJ5dGVzLCBmYWlsKSB7XG4gIGlmICghKHRoaXMub2Zmc2V0ICsgYnl0ZXMgPD0gdGhpcy5sZW5ndGgpKVxuICAgIHJldHVybiB0aGlzLmVycm9yKGZhaWwgfHwgJ0RlY29kZXJCdWZmZXIgb3ZlcnJ1bicpO1xuXG4gIHZhciByZXMgPSBuZXcgRGVjb2RlckJ1ZmZlcih0aGlzLmJhc2UpO1xuXG4gIC8vIFNoYXJlIHJlcG9ydGVyIHN0YXRlXG4gIHJlcy5fcmVwb3J0ZXJTdGF0ZSA9IHRoaXMuX3JlcG9ydGVyU3RhdGU7XG5cbiAgcmVzLm9mZnNldCA9IHRoaXMub2Zmc2V0O1xuICByZXMubGVuZ3RoID0gdGhpcy5vZmZzZXQgKyBieXRlcztcbiAgdGhpcy5vZmZzZXQgKz0gYnl0ZXM7XG4gIHJldHVybiByZXM7XG59XG5cbkRlY29kZXJCdWZmZXIucHJvdG90eXBlLnJhdyA9IGZ1bmN0aW9uIHJhdyhzYXZlKSB7XG4gIHJldHVybiB0aGlzLmJhc2Uuc2xpY2Uoc2F2ZSA/IHNhdmUub2Zmc2V0IDogdGhpcy5vZmZzZXQsIHRoaXMubGVuZ3RoKTtcbn1cblxuZnVuY3Rpb24gRW5jb2RlckJ1ZmZlcih2YWx1ZSwgcmVwb3J0ZXIpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgdGhpcy5sZW5ndGggPSAwO1xuICAgIHRoaXMudmFsdWUgPSB2YWx1ZS5tYXAoZnVuY3Rpb24oaXRlbSkge1xuICAgICAgaWYgKCEoaXRlbSBpbnN0YW5jZW9mIEVuY29kZXJCdWZmZXIpKVxuICAgICAgICBpdGVtID0gbmV3IEVuY29kZXJCdWZmZXIoaXRlbSwgcmVwb3J0ZXIpO1xuICAgICAgdGhpcy5sZW5ndGggKz0gaXRlbS5sZW5ndGg7XG4gICAgICByZXR1cm4gaXRlbTtcbiAgICB9LCB0aGlzKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgaWYgKCEoMCA8PSB2YWx1ZSAmJiB2YWx1ZSA8PSAweGZmKSlcbiAgICAgIHJldHVybiByZXBvcnRlci5lcnJvcignbm9uLWJ5dGUgRW5jb2RlckJ1ZmZlciB2YWx1ZScpO1xuICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICB0aGlzLmxlbmd0aCA9IDE7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICB0aGlzLmxlbmd0aCA9IEJ1ZmZlci5ieXRlTGVuZ3RoKHZhbHVlKTtcbiAgfSBlbHNlIGlmIChCdWZmZXIuaXNCdWZmZXIodmFsdWUpKSB7XG4gICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgIHRoaXMubGVuZ3RoID0gdmFsdWUubGVuZ3RoO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiByZXBvcnRlci5lcnJvcignVW5zdXBwb3J0ZWQgdHlwZTogJyArIHR5cGVvZiB2YWx1ZSk7XG4gIH1cbn1cbmV4cG9ydHMuRW5jb2RlckJ1ZmZlciA9IEVuY29kZXJCdWZmZXI7XG5cbkVuY29kZXJCdWZmZXIucHJvdG90eXBlLmpvaW4gPSBmdW5jdGlvbiBqb2luKG91dCwgb2Zmc2V0KSB7XG4gIGlmICghb3V0KVxuICAgIG91dCA9IG5ldyBCdWZmZXIodGhpcy5sZW5ndGgpO1xuICBpZiAoIW9mZnNldClcbiAgICBvZmZzZXQgPSAwO1xuXG4gIGlmICh0aGlzLmxlbmd0aCA9PT0gMClcbiAgICByZXR1cm4gb3V0O1xuXG4gIGlmIChBcnJheS5pc0FycmF5KHRoaXMudmFsdWUpKSB7XG4gICAgdGhpcy52YWx1ZS5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgIGl0ZW0uam9pbihvdXQsIG9mZnNldCk7XG4gICAgICBvZmZzZXQgKz0gaXRlbS5sZW5ndGg7XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKHR5cGVvZiB0aGlzLnZhbHVlID09PSAnbnVtYmVyJylcbiAgICAgIG91dFtvZmZzZXRdID0gdGhpcy52YWx1ZTtcbiAgICBlbHNlIGlmICh0eXBlb2YgdGhpcy52YWx1ZSA9PT0gJ3N0cmluZycpXG4gICAgICBvdXQud3JpdGUodGhpcy52YWx1ZSwgb2Zmc2V0KTtcbiAgICBlbHNlIGlmIChCdWZmZXIuaXNCdWZmZXIodGhpcy52YWx1ZSkpXG4gICAgICB0aGlzLnZhbHVlLmNvcHkob3V0LCBvZmZzZXQpO1xuICAgIG9mZnNldCArPSB0aGlzLmxlbmd0aDtcbiAgfVxuXG4gIHJldHVybiBvdXQ7XG59O1xuIiwidmFyIGNvbnN0YW50cyA9IGV4cG9ydHM7XG5cbi8vIEhlbHBlclxuY29uc3RhbnRzLl9yZXZlcnNlID0gZnVuY3Rpb24gcmV2ZXJzZShtYXApIHtcbiAgdmFyIHJlcyA9IHt9O1xuXG4gIE9iamVjdC5rZXlzKG1hcCkuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcbiAgICAvLyBDb252ZXJ0IGtleSB0byBpbnRlZ2VyIGlmIGl0IGlzIHN0cmluZ2lmaWVkXG4gICAgaWYgKChrZXkgfCAwKSA9PSBrZXkpXG4gICAgICBrZXkgPSBrZXkgfCAwO1xuXG4gICAgdmFyIHZhbHVlID0gbWFwW2tleV07XG4gICAgcmVzW3ZhbHVlXSA9IGtleTtcbiAgfSk7XG5cbiAgcmV0dXJuIHJlcztcbn07XG5cbmNvbnN0YW50cy5kZXIgPSByZXF1aXJlKCcuL2RlcicpO1xuIiwidmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcblxudmFyIGFzbjEgPSByZXF1aXJlKCcuLi8uLi9hc24xJyk7XG52YXIgYmFzZSA9IGFzbjEuYmFzZTtcbnZhciBiaWdudW0gPSBhc24xLmJpZ251bTtcblxuLy8gSW1wb3J0IERFUiBjb25zdGFudHNcbnZhciBkZXIgPSBhc24xLmNvbnN0YW50cy5kZXI7XG5cbmZ1bmN0aW9uIERFUkRlY29kZXIoZW50aXR5KSB7XG4gIHRoaXMuZW5jID0gJ2Rlcic7XG4gIHRoaXMubmFtZSA9IGVudGl0eS5uYW1lO1xuICB0aGlzLmVudGl0eSA9IGVudGl0eTtcblxuICAvLyBDb25zdHJ1Y3QgYmFzZSB0cmVlXG4gIHRoaXMudHJlZSA9IG5ldyBERVJOb2RlKCk7XG4gIHRoaXMudHJlZS5faW5pdChlbnRpdHkuYm9keSk7XG59O1xubW9kdWxlLmV4cG9ydHMgPSBERVJEZWNvZGVyO1xuXG5ERVJEZWNvZGVyLnByb3RvdHlwZS5kZWNvZGUgPSBmdW5jdGlvbiBkZWNvZGUoZGF0YSwgb3B0aW9ucykge1xuICBpZiAoIShkYXRhIGluc3RhbmNlb2YgYmFzZS5EZWNvZGVyQnVmZmVyKSlcbiAgICBkYXRhID0gbmV3IGJhc2UuRGVjb2RlckJ1ZmZlcihkYXRhLCBvcHRpb25zKTtcblxuICByZXR1cm4gdGhpcy50cmVlLl9kZWNvZGUoZGF0YSwgb3B0aW9ucyk7XG59O1xuXG4vLyBUcmVlIG1ldGhvZHNcblxuZnVuY3Rpb24gREVSTm9kZShwYXJlbnQpIHtcbiAgYmFzZS5Ob2RlLmNhbGwodGhpcywgJ2RlcicsIHBhcmVudCk7XG59XG5pbmhlcml0cyhERVJOb2RlLCBiYXNlLk5vZGUpO1xuXG5ERVJOb2RlLnByb3RvdHlwZS5fcGVla1RhZyA9IGZ1bmN0aW9uIHBlZWtUYWcoYnVmZmVyLCB0YWcsIGFueSkge1xuICBpZiAoYnVmZmVyLmlzRW1wdHkoKSlcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgdmFyIHN0YXRlID0gYnVmZmVyLnNhdmUoKTtcbiAgdmFyIGRlY29kZWRUYWcgPSBkZXJEZWNvZGVUYWcoYnVmZmVyLCAnRmFpbGVkIHRvIHBlZWsgdGFnOiBcIicgKyB0YWcgKyAnXCInKTtcbiAgaWYgKGJ1ZmZlci5pc0Vycm9yKGRlY29kZWRUYWcpKVxuICAgIHJldHVybiBkZWNvZGVkVGFnO1xuXG4gIGJ1ZmZlci5yZXN0b3JlKHN0YXRlKTtcblxuICByZXR1cm4gZGVjb2RlZFRhZy50YWcgPT09IHRhZyB8fCBkZWNvZGVkVGFnLnRhZ1N0ciA9PT0gdGFnIHx8XG4gICAgKGRlY29kZWRUYWcudGFnU3RyICsgJ29mJykgPT09IHRhZyB8fCBhbnk7XG59O1xuXG5ERVJOb2RlLnByb3RvdHlwZS5fZGVjb2RlVGFnID0gZnVuY3Rpb24gZGVjb2RlVGFnKGJ1ZmZlciwgdGFnLCBhbnkpIHtcbiAgdmFyIGRlY29kZWRUYWcgPSBkZXJEZWNvZGVUYWcoYnVmZmVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnRmFpbGVkIHRvIGRlY29kZSB0YWcgb2YgXCInICsgdGFnICsgJ1wiJyk7XG4gIGlmIChidWZmZXIuaXNFcnJvcihkZWNvZGVkVGFnKSlcbiAgICByZXR1cm4gZGVjb2RlZFRhZztcblxuICB2YXIgbGVuID0gZGVyRGVjb2RlTGVuKGJ1ZmZlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICBkZWNvZGVkVGFnLnByaW1pdGl2ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAnRmFpbGVkIHRvIGdldCBsZW5ndGggb2YgXCInICsgdGFnICsgJ1wiJyk7XG5cbiAgLy8gRmFpbHVyZVxuICBpZiAoYnVmZmVyLmlzRXJyb3IobGVuKSlcbiAgICByZXR1cm4gbGVuO1xuXG4gIGlmICghYW55ICYmXG4gICAgICBkZWNvZGVkVGFnLnRhZyAhPT0gdGFnICYmXG4gICAgICBkZWNvZGVkVGFnLnRhZ1N0ciAhPT0gdGFnICYmXG4gICAgICBkZWNvZGVkVGFnLnRhZ1N0ciArICdvZicgIT09IHRhZykge1xuICAgIHJldHVybiBidWZmZXIuZXJyb3IoJ0ZhaWxlZCB0byBtYXRjaCB0YWc6IFwiJyArIHRhZyArICdcIicpO1xuICB9XG5cbiAgaWYgKGRlY29kZWRUYWcucHJpbWl0aXZlIHx8IGxlbiAhPT0gbnVsbClcbiAgICByZXR1cm4gYnVmZmVyLnNraXAobGVuLCAnRmFpbGVkIHRvIG1hdGNoIGJvZHkgb2Y6IFwiJyArIHRhZyArICdcIicpO1xuXG4gIC8vIEluZGVmaW5pdGUgbGVuZ3RoLi4uIGZpbmQgRU5EIHRhZ1xuICB2YXIgc3RhdGUgPSBidWZmZXIuc2F2ZSgpO1xuICB2YXIgcmVzID0gdGhpcy5fc2tpcFVudGlsRW5kKFxuICAgICAgYnVmZmVyLFxuICAgICAgJ0ZhaWxlZCB0byBza2lwIGluZGVmaW5pdGUgbGVuZ3RoIGJvZHk6IFwiJyArIHRoaXMudGFnICsgJ1wiJyk7XG4gIGlmIChidWZmZXIuaXNFcnJvcihyZXMpKVxuICAgIHJldHVybiByZXM7XG5cbiAgbGVuID0gYnVmZmVyLm9mZnNldCAtIHN0YXRlLm9mZnNldDtcbiAgYnVmZmVyLnJlc3RvcmUoc3RhdGUpO1xuICByZXR1cm4gYnVmZmVyLnNraXAobGVuLCAnRmFpbGVkIHRvIG1hdGNoIGJvZHkgb2Y6IFwiJyArIHRhZyArICdcIicpO1xufTtcblxuREVSTm9kZS5wcm90b3R5cGUuX3NraXBVbnRpbEVuZCA9IGZ1bmN0aW9uIHNraXBVbnRpbEVuZChidWZmZXIsIGZhaWwpIHtcbiAgd2hpbGUgKHRydWUpIHtcbiAgICB2YXIgdGFnID0gZGVyRGVjb2RlVGFnKGJ1ZmZlciwgZmFpbCk7XG4gICAgaWYgKGJ1ZmZlci5pc0Vycm9yKHRhZykpXG4gICAgICByZXR1cm4gdGFnO1xuICAgIHZhciBsZW4gPSBkZXJEZWNvZGVMZW4oYnVmZmVyLCB0YWcucHJpbWl0aXZlLCBmYWlsKTtcbiAgICBpZiAoYnVmZmVyLmlzRXJyb3IobGVuKSlcbiAgICAgIHJldHVybiBsZW47XG5cbiAgICB2YXIgcmVzO1xuICAgIGlmICh0YWcucHJpbWl0aXZlIHx8IGxlbiAhPT0gbnVsbClcbiAgICAgIHJlcyA9IGJ1ZmZlci5za2lwKGxlbilcbiAgICBlbHNlXG4gICAgICByZXMgPSB0aGlzLl9za2lwVW50aWxFbmQoYnVmZmVyLCBmYWlsKTtcblxuICAgIC8vIEZhaWx1cmVcbiAgICBpZiAoYnVmZmVyLmlzRXJyb3IocmVzKSlcbiAgICAgIHJldHVybiByZXM7XG5cbiAgICBpZiAodGFnLnRhZ1N0ciA9PT0gJ2VuZCcpXG4gICAgICBicmVhaztcbiAgfVxufTtcblxuREVSTm9kZS5wcm90b3R5cGUuX2RlY29kZUxpc3QgPSBmdW5jdGlvbiBkZWNvZGVMaXN0KGJ1ZmZlciwgdGFnLCBkZWNvZGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnMpIHtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB3aGlsZSAoIWJ1ZmZlci5pc0VtcHR5KCkpIHtcbiAgICB2YXIgcG9zc2libGVFbmQgPSB0aGlzLl9wZWVrVGFnKGJ1ZmZlciwgJ2VuZCcpO1xuICAgIGlmIChidWZmZXIuaXNFcnJvcihwb3NzaWJsZUVuZCkpXG4gICAgICByZXR1cm4gcG9zc2libGVFbmQ7XG5cbiAgICB2YXIgcmVzID0gZGVjb2Rlci5kZWNvZGUoYnVmZmVyLCAnZGVyJywgb3B0aW9ucyk7XG4gICAgaWYgKGJ1ZmZlci5pc0Vycm9yKHJlcykgJiYgcG9zc2libGVFbmQpXG4gICAgICBicmVhaztcbiAgICByZXN1bHQucHVzaChyZXMpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5ERVJOb2RlLnByb3RvdHlwZS5fZGVjb2RlU3RyID0gZnVuY3Rpb24gZGVjb2RlU3RyKGJ1ZmZlciwgdGFnKSB7XG4gIGlmICh0YWcgPT09ICdiaXRzdHInKSB7XG4gICAgdmFyIHVudXNlZCA9IGJ1ZmZlci5yZWFkVUludDgoKTtcbiAgICBpZiAoYnVmZmVyLmlzRXJyb3IodW51c2VkKSlcbiAgICAgIHJldHVybiB1bnVzZWQ7XG4gICAgcmV0dXJuIHsgdW51c2VkOiB1bnVzZWQsIGRhdGE6IGJ1ZmZlci5yYXcoKSB9O1xuICB9IGVsc2UgaWYgKHRhZyA9PT0gJ2JtcHN0cicpIHtcbiAgICB2YXIgcmF3ID0gYnVmZmVyLnJhdygpO1xuICAgIGlmIChyYXcubGVuZ3RoICUgMiA9PT0gMSlcbiAgICAgIHJldHVybiBidWZmZXIuZXJyb3IoJ0RlY29kaW5nIG9mIHN0cmluZyB0eXBlOiBibXBzdHIgbGVuZ3RoIG1pc21hdGNoJyk7XG5cbiAgICB2YXIgc3RyID0gJyc7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCByYXcubGVuZ3RoIC8gMjsgaSsrKSB7XG4gICAgICBzdHIgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShyYXcucmVhZFVJbnQxNkJFKGkgKiAyKSk7XG4gICAgfVxuICAgIHJldHVybiBzdHI7XG4gIH0gZWxzZSBpZiAodGFnID09PSAnbnVtc3RyJykge1xuICAgIHZhciBudW1zdHIgPSBidWZmZXIucmF3KCkudG9TdHJpbmcoJ2FzY2lpJyk7XG4gICAgaWYgKCF0aGlzLl9pc051bXN0cihudW1zdHIpKSB7XG4gICAgICByZXR1cm4gYnVmZmVyLmVycm9yKCdEZWNvZGluZyBvZiBzdHJpbmcgdHlwZTogJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdudW1zdHIgdW5zdXBwb3J0ZWQgY2hhcmFjdGVycycpO1xuICAgIH1cbiAgICByZXR1cm4gbnVtc3RyO1xuICB9IGVsc2UgaWYgKHRhZyA9PT0gJ29jdHN0cicpIHtcbiAgICByZXR1cm4gYnVmZmVyLnJhdygpO1xuICB9IGVsc2UgaWYgKHRhZyA9PT0gJ29iakRlc2MnKSB7XG4gICAgcmV0dXJuIGJ1ZmZlci5yYXcoKTtcbiAgfSBlbHNlIGlmICh0YWcgPT09ICdwcmludHN0cicpIHtcbiAgICB2YXIgcHJpbnRzdHIgPSBidWZmZXIucmF3KCkudG9TdHJpbmcoJ2FzY2lpJyk7XG4gICAgaWYgKCF0aGlzLl9pc1ByaW50c3RyKHByaW50c3RyKSkge1xuICAgICAgcmV0dXJuIGJ1ZmZlci5lcnJvcignRGVjb2Rpbmcgb2Ygc3RyaW5nIHR5cGU6ICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAncHJpbnRzdHIgdW5zdXBwb3J0ZWQgY2hhcmFjdGVycycpO1xuICAgIH1cbiAgICByZXR1cm4gcHJpbnRzdHI7XG4gIH0gZWxzZSBpZiAoL3N0ciQvLnRlc3QodGFnKSkge1xuICAgIHJldHVybiBidWZmZXIucmF3KCkudG9TdHJpbmcoKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYnVmZmVyLmVycm9yKCdEZWNvZGluZyBvZiBzdHJpbmcgdHlwZTogJyArIHRhZyArICcgdW5zdXBwb3J0ZWQnKTtcbiAgfVxufTtcblxuREVSTm9kZS5wcm90b3R5cGUuX2RlY29kZU9iamlkID0gZnVuY3Rpb24gZGVjb2RlT2JqaWQoYnVmZmVyLCB2YWx1ZXMsIHJlbGF0aXZlKSB7XG4gIHZhciByZXN1bHQ7XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuICB2YXIgaWRlbnQgPSAwO1xuICB3aGlsZSAoIWJ1ZmZlci5pc0VtcHR5KCkpIHtcbiAgICB2YXIgc3ViaWRlbnQgPSBidWZmZXIucmVhZFVJbnQ4KCk7XG4gICAgaWRlbnQgPDw9IDc7XG4gICAgaWRlbnQgfD0gc3ViaWRlbnQgJiAweDdmO1xuICAgIGlmICgoc3ViaWRlbnQgJiAweDgwKSA9PT0gMCkge1xuICAgICAgaWRlbnRpZmllcnMucHVzaChpZGVudCk7XG4gICAgICBpZGVudCA9IDA7XG4gICAgfVxuICB9XG4gIGlmIChzdWJpZGVudCAmIDB4ODApXG4gICAgaWRlbnRpZmllcnMucHVzaChpZGVudCk7XG5cbiAgdmFyIGZpcnN0ID0gKGlkZW50aWZpZXJzWzBdIC8gNDApIHwgMDtcbiAgdmFyIHNlY29uZCA9IGlkZW50aWZpZXJzWzBdICUgNDA7XG5cbiAgaWYgKHJlbGF0aXZlKVxuICAgIHJlc3VsdCA9IGlkZW50aWZpZXJzO1xuICBlbHNlXG4gICAgcmVzdWx0ID0gW2ZpcnN0LCBzZWNvbmRdLmNvbmNhdChpZGVudGlmaWVycy5zbGljZSgxKSk7XG5cbiAgaWYgKHZhbHVlcykge1xuICAgIHZhciB0bXAgPSB2YWx1ZXNbcmVzdWx0LmpvaW4oJyAnKV07XG4gICAgaWYgKHRtcCA9PT0gdW5kZWZpbmVkKVxuICAgICAgdG1wID0gdmFsdWVzW3Jlc3VsdC5qb2luKCcuJyldO1xuICAgIGlmICh0bXAgIT09IHVuZGVmaW5lZClcbiAgICAgIHJlc3VsdCA9IHRtcDtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5ERVJOb2RlLnByb3RvdHlwZS5fZGVjb2RlVGltZSA9IGZ1bmN0aW9uIGRlY29kZVRpbWUoYnVmZmVyLCB0YWcpIHtcbiAgdmFyIHN0ciA9IGJ1ZmZlci5yYXcoKS50b1N0cmluZygpO1xuICBpZiAodGFnID09PSAnZ2VudGltZScpIHtcbiAgICB2YXIgeWVhciA9IHN0ci5zbGljZSgwLCA0KSB8IDA7XG4gICAgdmFyIG1vbiA9IHN0ci5zbGljZSg0LCA2KSB8IDA7XG4gICAgdmFyIGRheSA9IHN0ci5zbGljZSg2LCA4KSB8IDA7XG4gICAgdmFyIGhvdXIgPSBzdHIuc2xpY2UoOCwgMTApIHwgMDtcbiAgICB2YXIgbWluID0gc3RyLnNsaWNlKDEwLCAxMikgfCAwO1xuICAgIHZhciBzZWMgPSBzdHIuc2xpY2UoMTIsIDE0KSB8IDA7XG4gIH0gZWxzZSBpZiAodGFnID09PSAndXRjdGltZScpIHtcbiAgICB2YXIgeWVhciA9IHN0ci5zbGljZSgwLCAyKSB8IDA7XG4gICAgdmFyIG1vbiA9IHN0ci5zbGljZSgyLCA0KSB8IDA7XG4gICAgdmFyIGRheSA9IHN0ci5zbGljZSg0LCA2KSB8IDA7XG4gICAgdmFyIGhvdXIgPSBzdHIuc2xpY2UoNiwgOCkgfCAwO1xuICAgIHZhciBtaW4gPSBzdHIuc2xpY2UoOCwgMTApIHwgMDtcbiAgICB2YXIgc2VjID0gc3RyLnNsaWNlKDEwLCAxMikgfCAwO1xuICAgIGlmICh5ZWFyIDwgNzApXG4gICAgICB5ZWFyID0gMjAwMCArIHllYXI7XG4gICAgZWxzZVxuICAgICAgeWVhciA9IDE5MDAgKyB5ZWFyO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBidWZmZXIuZXJyb3IoJ0RlY29kaW5nICcgKyB0YWcgKyAnIHRpbWUgaXMgbm90IHN1cHBvcnRlZCB5ZXQnKTtcbiAgfVxuXG4gIHJldHVybiBEYXRlLlVUQyh5ZWFyLCBtb24gLSAxLCBkYXksIGhvdXIsIG1pbiwgc2VjLCAwKTtcbn07XG5cbkRFUk5vZGUucHJvdG90eXBlLl9kZWNvZGVOdWxsID0gZnVuY3Rpb24gZGVjb2RlTnVsbChidWZmZXIpIHtcbiAgcmV0dXJuIG51bGw7XG59O1xuXG5ERVJOb2RlLnByb3RvdHlwZS5fZGVjb2RlQm9vbCA9IGZ1bmN0aW9uIGRlY29kZUJvb2woYnVmZmVyKSB7XG4gIHZhciByZXMgPSBidWZmZXIucmVhZFVJbnQ4KCk7XG4gIGlmIChidWZmZXIuaXNFcnJvcihyZXMpKVxuICAgIHJldHVybiByZXM7XG4gIGVsc2VcbiAgICByZXR1cm4gcmVzICE9PSAwO1xufTtcblxuREVSTm9kZS5wcm90b3R5cGUuX2RlY29kZUludCA9IGZ1bmN0aW9uIGRlY29kZUludChidWZmZXIsIHZhbHVlcykge1xuICAvLyBCaWdpbnQsIHJldHVybiBhcyBpdCBpcyAoYXNzdW1lIGJpZyBlbmRpYW4pXG4gIHZhciByYXcgPSBidWZmZXIucmF3KCk7XG4gIHZhciByZXMgPSBuZXcgYmlnbnVtKHJhdyk7XG5cbiAgaWYgKHZhbHVlcylcbiAgICByZXMgPSB2YWx1ZXNbcmVzLnRvU3RyaW5nKDEwKV0gfHwgcmVzO1xuXG4gIHJldHVybiByZXM7XG59O1xuXG5ERVJOb2RlLnByb3RvdHlwZS5fdXNlID0gZnVuY3Rpb24gdXNlKGVudGl0eSwgb2JqKSB7XG4gIGlmICh0eXBlb2YgZW50aXR5ID09PSAnZnVuY3Rpb24nKVxuICAgIGVudGl0eSA9IGVudGl0eShvYmopO1xuICByZXR1cm4gZW50aXR5Ll9nZXREZWNvZGVyKCdkZXInKS50cmVlO1xufTtcblxuLy8gVXRpbGl0eSBtZXRob2RzXG5cbmZ1bmN0aW9uIGRlckRlY29kZVRhZyhidWYsIGZhaWwpIHtcbiAgdmFyIHRhZyA9IGJ1Zi5yZWFkVUludDgoZmFpbCk7XG4gIGlmIChidWYuaXNFcnJvcih0YWcpKVxuICAgIHJldHVybiB0YWc7XG5cbiAgdmFyIGNscyA9IGRlci50YWdDbGFzc1t0YWcgPj4gNl07XG4gIHZhciBwcmltaXRpdmUgPSAodGFnICYgMHgyMCkgPT09IDA7XG5cbiAgLy8gTXVsdGktb2N0ZXQgdGFnIC0gbG9hZFxuICBpZiAoKHRhZyAmIDB4MWYpID09PSAweDFmKSB7XG4gICAgdmFyIG9jdCA9IHRhZztcbiAgICB0YWcgPSAwO1xuICAgIHdoaWxlICgob2N0ICYgMHg4MCkgPT09IDB4ODApIHtcbiAgICAgIG9jdCA9IGJ1Zi5yZWFkVUludDgoZmFpbCk7XG4gICAgICBpZiAoYnVmLmlzRXJyb3Iob2N0KSlcbiAgICAgICAgcmV0dXJuIG9jdDtcblxuICAgICAgdGFnIDw8PSA3O1xuICAgICAgdGFnIHw9IG9jdCAmIDB4N2Y7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRhZyAmPSAweDFmO1xuICB9XG4gIHZhciB0YWdTdHIgPSBkZXIudGFnW3RhZ107XG5cbiAgcmV0dXJuIHtcbiAgICBjbHM6IGNscyxcbiAgICBwcmltaXRpdmU6IHByaW1pdGl2ZSxcbiAgICB0YWc6IHRhZyxcbiAgICB0YWdTdHI6IHRhZ1N0clxuICB9O1xufVxuXG5mdW5jdGlvbiBkZXJEZWNvZGVMZW4oYnVmLCBwcmltaXRpdmUsIGZhaWwpIHtcbiAgdmFyIGxlbiA9IGJ1Zi5yZWFkVUludDgoZmFpbCk7XG4gIGlmIChidWYuaXNFcnJvcihsZW4pKVxuICAgIHJldHVybiBsZW47XG5cbiAgLy8gSW5kZWZpbml0ZSBmb3JtXG4gIGlmICghcHJpbWl0aXZlICYmIGxlbiA9PT0gMHg4MClcbiAgICByZXR1cm4gbnVsbDtcblxuICAvLyBEZWZpbml0ZSBmb3JtXG4gIGlmICgobGVuICYgMHg4MCkgPT09IDApIHtcbiAgICAvLyBTaG9ydCBmb3JtXG4gICAgcmV0dXJuIGxlbjtcbiAgfVxuXG4gIC8vIExvbmcgZm9ybVxuICB2YXIgbnVtID0gbGVuICYgMHg3ZjtcbiAgaWYgKG51bSA+IDQpXG4gICAgcmV0dXJuIGJ1Zi5lcnJvcignbGVuZ3RoIG9jdGVjdCBpcyB0b28gbG9uZycpO1xuXG4gIGxlbiA9IDA7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtOyBpKyspIHtcbiAgICBsZW4gPDw9IDg7XG4gICAgdmFyIGogPSBidWYucmVhZFVJbnQ4KGZhaWwpO1xuICAgIGlmIChidWYuaXNFcnJvcihqKSlcbiAgICAgIHJldHVybiBqO1xuICAgIGxlbiB8PSBqO1xuICB9XG5cbiAgcmV0dXJuIGxlbjtcbn1cbiIsInZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG52YXIgQnVmZmVyID0gcmVxdWlyZSgnYnVmZmVyJykuQnVmZmVyO1xuXG52YXIgYXNuMSA9IHJlcXVpcmUoJy4uLy4uL2FzbjEnKTtcbnZhciBiYXNlID0gYXNuMS5iYXNlO1xuXG4vLyBJbXBvcnQgREVSIGNvbnN0YW50c1xudmFyIGRlciA9IGFzbjEuY29uc3RhbnRzLmRlcjtcblxuZnVuY3Rpb24gREVSRW5jb2RlcihlbnRpdHkpIHtcbiAgdGhpcy5lbmMgPSAnZGVyJztcbiAgdGhpcy5uYW1lID0gZW50aXR5Lm5hbWU7XG4gIHRoaXMuZW50aXR5ID0gZW50aXR5O1xuXG4gIC8vIENvbnN0cnVjdCBiYXNlIHRyZWVcbiAgdGhpcy50cmVlID0gbmV3IERFUk5vZGUoKTtcbiAgdGhpcy50cmVlLl9pbml0KGVudGl0eS5ib2R5KTtcbn07XG5tb2R1bGUuZXhwb3J0cyA9IERFUkVuY29kZXI7XG5cbkRFUkVuY29kZXIucHJvdG90eXBlLmVuY29kZSA9IGZ1bmN0aW9uIGVuY29kZShkYXRhLCByZXBvcnRlcikge1xuICByZXR1cm4gdGhpcy50cmVlLl9lbmNvZGUoZGF0YSwgcmVwb3J0ZXIpLmpvaW4oKTtcbn07XG5cbi8vIFRyZWUgbWV0aG9kc1xuXG5mdW5jdGlvbiBERVJOb2RlKHBhcmVudCkge1xuICBiYXNlLk5vZGUuY2FsbCh0aGlzLCAnZGVyJywgcGFyZW50KTtcbn1cbmluaGVyaXRzKERFUk5vZGUsIGJhc2UuTm9kZSk7XG5cbkRFUk5vZGUucHJvdG90eXBlLl9lbmNvZGVDb21wb3NpdGUgPSBmdW5jdGlvbiBlbmNvZGVDb21wb3NpdGUodGFnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmltaXRpdmUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNscyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudCkge1xuICB2YXIgZW5jb2RlZFRhZyA9IGVuY29kZVRhZyh0YWcsIHByaW1pdGl2ZSwgY2xzLCB0aGlzLnJlcG9ydGVyKTtcblxuICAvLyBTaG9ydCBmb3JtXG4gIGlmIChjb250ZW50Lmxlbmd0aCA8IDB4ODApIHtcbiAgICB2YXIgaGVhZGVyID0gbmV3IEJ1ZmZlcigyKTtcbiAgICBoZWFkZXJbMF0gPSBlbmNvZGVkVGFnO1xuICAgIGhlYWRlclsxXSA9IGNvbnRlbnQubGVuZ3RoO1xuICAgIHJldHVybiB0aGlzLl9jcmVhdGVFbmNvZGVyQnVmZmVyKFsgaGVhZGVyLCBjb250ZW50IF0pO1xuICB9XG5cbiAgLy8gTG9uZyBmb3JtXG4gIC8vIENvdW50IG9jdGV0cyByZXF1aXJlZCB0byBzdG9yZSBsZW5ndGhcbiAgdmFyIGxlbk9jdGV0cyA9IDE7XG4gIGZvciAodmFyIGkgPSBjb250ZW50Lmxlbmd0aDsgaSA+PSAweDEwMDsgaSA+Pj0gOClcbiAgICBsZW5PY3RldHMrKztcblxuICB2YXIgaGVhZGVyID0gbmV3IEJ1ZmZlcigxICsgMSArIGxlbk9jdGV0cyk7XG4gIGhlYWRlclswXSA9IGVuY29kZWRUYWc7XG4gIGhlYWRlclsxXSA9IDB4ODAgfCBsZW5PY3RldHM7XG5cbiAgZm9yICh2YXIgaSA9IDEgKyBsZW5PY3RldHMsIGogPSBjb250ZW50Lmxlbmd0aDsgaiA+IDA7IGktLSwgaiA+Pj0gOClcbiAgICBoZWFkZXJbaV0gPSBqICYgMHhmZjtcblxuICByZXR1cm4gdGhpcy5fY3JlYXRlRW5jb2RlckJ1ZmZlcihbIGhlYWRlciwgY29udGVudCBdKTtcbn07XG5cbkRFUk5vZGUucHJvdG90eXBlLl9lbmNvZGVTdHIgPSBmdW5jdGlvbiBlbmNvZGVTdHIoc3RyLCB0YWcpIHtcbiAgaWYgKHRhZyA9PT0gJ2JpdHN0cicpIHtcbiAgICByZXR1cm4gdGhpcy5fY3JlYXRlRW5jb2RlckJ1ZmZlcihbIHN0ci51bnVzZWQgfCAwLCBzdHIuZGF0YSBdKTtcbiAgfSBlbHNlIGlmICh0YWcgPT09ICdibXBzdHInKSB7XG4gICAgdmFyIGJ1ZiA9IG5ldyBCdWZmZXIoc3RyLmxlbmd0aCAqIDIpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XG4gICAgICBidWYud3JpdGVVSW50MTZCRShzdHIuY2hhckNvZGVBdChpKSwgaSAqIDIpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fY3JlYXRlRW5jb2RlckJ1ZmZlcihidWYpO1xuICB9IGVsc2UgaWYgKHRhZyA9PT0gJ251bXN0cicpIHtcbiAgICBpZiAoIXRoaXMuX2lzTnVtc3RyKHN0cikpIHtcbiAgICAgIHJldHVybiB0aGlzLnJlcG9ydGVyLmVycm9yKCdFbmNvZGluZyBvZiBzdHJpbmcgdHlwZTogbnVtc3RyIHN1cHBvcnRzICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ29ubHkgZGlnaXRzIGFuZCBzcGFjZScpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fY3JlYXRlRW5jb2RlckJ1ZmZlcihzdHIpO1xuICB9IGVsc2UgaWYgKHRhZyA9PT0gJ3ByaW50c3RyJykge1xuICAgIGlmICghdGhpcy5faXNQcmludHN0cihzdHIpKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZXBvcnRlci5lcnJvcignRW5jb2Rpbmcgb2Ygc3RyaW5nIHR5cGU6IHByaW50c3RyIHN1cHBvcnRzICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ29ubHkgbGF0aW4gdXBwZXIgYW5kIGxvd2VyIGNhc2UgbGV0dGVycywgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGlnaXRzLCBzcGFjZSwgYXBvc3Ryb3BoZSwgbGVmdCBhbmQgcmlndGggJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAncGFyZW50aGVzaXMsIHBsdXMgc2lnbiwgY29tbWEsIGh5cGhlbiwgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZG90LCBzbGFzaCwgY29sb24sIGVxdWFsIHNpZ24sICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3F1ZXN0aW9uIG1hcmsnKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX2NyZWF0ZUVuY29kZXJCdWZmZXIoc3RyKTtcbiAgfSBlbHNlIGlmICgvc3RyJC8udGVzdCh0YWcpKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NyZWF0ZUVuY29kZXJCdWZmZXIoc3RyKTtcbiAgfSBlbHNlIGlmICh0YWcgPT09ICdvYmpEZXNjJykge1xuICAgIHJldHVybiB0aGlzLl9jcmVhdGVFbmNvZGVyQnVmZmVyKHN0cik7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHRoaXMucmVwb3J0ZXIuZXJyb3IoJ0VuY29kaW5nIG9mIHN0cmluZyB0eXBlOiAnICsgdGFnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnIHVuc3VwcG9ydGVkJyk7XG4gIH1cbn07XG5cbkRFUk5vZGUucHJvdG90eXBlLl9lbmNvZGVPYmppZCA9IGZ1bmN0aW9uIGVuY29kZU9iamlkKGlkLCB2YWx1ZXMsIHJlbGF0aXZlKSB7XG4gIGlmICh0eXBlb2YgaWQgPT09ICdzdHJpbmcnKSB7XG4gICAgaWYgKCF2YWx1ZXMpXG4gICAgICByZXR1cm4gdGhpcy5yZXBvcnRlci5lcnJvcignc3RyaW5nIG9iamlkIGdpdmVuLCBidXQgbm8gdmFsdWVzIG1hcCBmb3VuZCcpO1xuICAgIGlmICghdmFsdWVzLmhhc093blByb3BlcnR5KGlkKSlcbiAgICAgIHJldHVybiB0aGlzLnJlcG9ydGVyLmVycm9yKCdvYmppZCBub3QgZm91bmQgaW4gdmFsdWVzIG1hcCcpO1xuICAgIGlkID0gdmFsdWVzW2lkXS5zcGxpdCgvW1xcc1xcLl0rL2cpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaWQubGVuZ3RoOyBpKyspXG4gICAgICBpZFtpXSB8PSAwO1xuICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoaWQpKSB7XG4gICAgaWQgPSBpZC5zbGljZSgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaWQubGVuZ3RoOyBpKyspXG4gICAgICBpZFtpXSB8PSAwO1xuICB9XG5cbiAgaWYgKCFBcnJheS5pc0FycmF5KGlkKSkge1xuICAgIHJldHVybiB0aGlzLnJlcG9ydGVyLmVycm9yKCdvYmppZCgpIHNob3VsZCBiZSBlaXRoZXIgYXJyYXkgb3Igc3RyaW5nLCAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZ290OiAnICsgSlNPTi5zdHJpbmdpZnkoaWQpKTtcbiAgfVxuXG4gIGlmICghcmVsYXRpdmUpIHtcbiAgICBpZiAoaWRbMV0gPj0gNDApXG4gICAgICByZXR1cm4gdGhpcy5yZXBvcnRlci5lcnJvcignU2Vjb25kIG9iamlkIGlkZW50aWZpZXIgT09CJyk7XG4gICAgaWQuc3BsaWNlKDAsIDIsIGlkWzBdICogNDAgKyBpZFsxXSk7XG4gIH1cblxuICAvLyBDb3VudCBudW1iZXIgb2Ygb2N0ZXRzXG4gIHZhciBzaXplID0gMDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBpZC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpZGVudCA9IGlkW2ldO1xuICAgIGZvciAoc2l6ZSsrOyBpZGVudCA+PSAweDgwOyBpZGVudCA+Pj0gNylcbiAgICAgIHNpemUrKztcbiAgfVxuXG4gIHZhciBvYmppZCA9IG5ldyBCdWZmZXIoc2l6ZSk7XG4gIHZhciBvZmZzZXQgPSBvYmppZC5sZW5ndGggLSAxO1xuICBmb3IgKHZhciBpID0gaWQubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICB2YXIgaWRlbnQgPSBpZFtpXTtcbiAgICBvYmppZFtvZmZzZXQtLV0gPSBpZGVudCAmIDB4N2Y7XG4gICAgd2hpbGUgKChpZGVudCA+Pj0gNykgPiAwKVxuICAgICAgb2JqaWRbb2Zmc2V0LS1dID0gMHg4MCB8IChpZGVudCAmIDB4N2YpO1xuICB9XG5cbiAgcmV0dXJuIHRoaXMuX2NyZWF0ZUVuY29kZXJCdWZmZXIob2JqaWQpO1xufTtcblxuZnVuY3Rpb24gdHdvKG51bSkge1xuICBpZiAobnVtIDwgMTApXG4gICAgcmV0dXJuICcwJyArIG51bTtcbiAgZWxzZVxuICAgIHJldHVybiBudW07XG59XG5cbkRFUk5vZGUucHJvdG90eXBlLl9lbmNvZGVUaW1lID0gZnVuY3Rpb24gZW5jb2RlVGltZSh0aW1lLCB0YWcpIHtcbiAgdmFyIHN0cjtcbiAgdmFyIGRhdGUgPSBuZXcgRGF0ZSh0aW1lKTtcblxuICBpZiAodGFnID09PSAnZ2VudGltZScpIHtcbiAgICBzdHIgPSBbXG4gICAgICB0d28oZGF0ZS5nZXRGdWxsWWVhcigpKSxcbiAgICAgIHR3byhkYXRlLmdldFVUQ01vbnRoKCkgKyAxKSxcbiAgICAgIHR3byhkYXRlLmdldFVUQ0RhdGUoKSksXG4gICAgICB0d28oZGF0ZS5nZXRVVENIb3VycygpKSxcbiAgICAgIHR3byhkYXRlLmdldFVUQ01pbnV0ZXMoKSksXG4gICAgICB0d28oZGF0ZS5nZXRVVENTZWNvbmRzKCkpLFxuICAgICAgJ1onXG4gICAgXS5qb2luKCcnKTtcbiAgfSBlbHNlIGlmICh0YWcgPT09ICd1dGN0aW1lJykge1xuICAgIHN0ciA9IFtcbiAgICAgIHR3byhkYXRlLmdldEZ1bGxZZWFyKCkgJSAxMDApLFxuICAgICAgdHdvKGRhdGUuZ2V0VVRDTW9udGgoKSArIDEpLFxuICAgICAgdHdvKGRhdGUuZ2V0VVRDRGF0ZSgpKSxcbiAgICAgIHR3byhkYXRlLmdldFVUQ0hvdXJzKCkpLFxuICAgICAgdHdvKGRhdGUuZ2V0VVRDTWludXRlcygpKSxcbiAgICAgIHR3byhkYXRlLmdldFVUQ1NlY29uZHMoKSksXG4gICAgICAnWidcbiAgICBdLmpvaW4oJycpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMucmVwb3J0ZXIuZXJyb3IoJ0VuY29kaW5nICcgKyB0YWcgKyAnIHRpbWUgaXMgbm90IHN1cHBvcnRlZCB5ZXQnKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzLl9lbmNvZGVTdHIoc3RyLCAnb2N0c3RyJyk7XG59O1xuXG5ERVJOb2RlLnByb3RvdHlwZS5fZW5jb2RlTnVsbCA9IGZ1bmN0aW9uIGVuY29kZU51bGwoKSB7XG4gIHJldHVybiB0aGlzLl9jcmVhdGVFbmNvZGVyQnVmZmVyKCcnKTtcbn07XG5cbkRFUk5vZGUucHJvdG90eXBlLl9lbmNvZGVJbnQgPSBmdW5jdGlvbiBlbmNvZGVJbnQobnVtLCB2YWx1ZXMpIHtcbiAgaWYgKHR5cGVvZiBudW0gPT09ICdzdHJpbmcnKSB7XG4gICAgaWYgKCF2YWx1ZXMpXG4gICAgICByZXR1cm4gdGhpcy5yZXBvcnRlci5lcnJvcignU3RyaW5nIGludCBvciBlbnVtIGdpdmVuLCBidXQgbm8gdmFsdWVzIG1hcCcpO1xuICAgIGlmICghdmFsdWVzLmhhc093blByb3BlcnR5KG51bSkpIHtcbiAgICAgIHJldHVybiB0aGlzLnJlcG9ydGVyLmVycm9yKCdWYWx1ZXMgbWFwIGRvZXNuXFwndCBjb250YWluOiAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEpTT04uc3RyaW5naWZ5KG51bSkpO1xuICAgIH1cbiAgICBudW0gPSB2YWx1ZXNbbnVtXTtcbiAgfVxuXG4gIC8vIEJpZ251bSwgYXNzdW1lIGJpZyBlbmRpYW5cbiAgaWYgKHR5cGVvZiBudW0gIT09ICdudW1iZXInICYmICFCdWZmZXIuaXNCdWZmZXIobnVtKSkge1xuICAgIHZhciBudW1BcnJheSA9IG51bS50b0FycmF5KCk7XG4gICAgaWYgKCFudW0uc2lnbiAmJiBudW1BcnJheVswXSAmIDB4ODApIHtcbiAgICAgIG51bUFycmF5LnVuc2hpZnQoMCk7XG4gICAgfVxuICAgIG51bSA9IG5ldyBCdWZmZXIobnVtQXJyYXkpO1xuICB9XG5cbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihudW0pKSB7XG4gICAgdmFyIHNpemUgPSBudW0ubGVuZ3RoO1xuICAgIGlmIChudW0ubGVuZ3RoID09PSAwKVxuICAgICAgc2l6ZSsrO1xuXG4gICAgdmFyIG91dCA9IG5ldyBCdWZmZXIoc2l6ZSk7XG4gICAgbnVtLmNvcHkob3V0KTtcbiAgICBpZiAobnVtLmxlbmd0aCA9PT0gMClcbiAgICAgIG91dFswXSA9IDBcbiAgICByZXR1cm4gdGhpcy5fY3JlYXRlRW5jb2RlckJ1ZmZlcihvdXQpO1xuICB9XG5cbiAgaWYgKG51bSA8IDB4ODApXG4gICAgcmV0dXJuIHRoaXMuX2NyZWF0ZUVuY29kZXJCdWZmZXIobnVtKTtcblxuICBpZiAobnVtIDwgMHgxMDApXG4gICAgcmV0dXJuIHRoaXMuX2NyZWF0ZUVuY29kZXJCdWZmZXIoWzAsIG51bV0pO1xuXG4gIHZhciBzaXplID0gMTtcbiAgZm9yICh2YXIgaSA9IG51bTsgaSA+PSAweDEwMDsgaSA+Pj0gOClcbiAgICBzaXplKys7XG5cbiAgdmFyIG91dCA9IG5ldyBBcnJheShzaXplKTtcbiAgZm9yICh2YXIgaSA9IG91dC5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgIG91dFtpXSA9IG51bSAmIDB4ZmY7XG4gICAgbnVtID4+PSA4O1xuICB9XG4gIGlmKG91dFswXSAmIDB4ODApIHtcbiAgICBvdXQudW5zaGlmdCgwKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzLl9jcmVhdGVFbmNvZGVyQnVmZmVyKG5ldyBCdWZmZXIob3V0KSk7XG59O1xuXG5ERVJOb2RlLnByb3RvdHlwZS5fZW5jb2RlQm9vbCA9IGZ1bmN0aW9uIGVuY29kZUJvb2wodmFsdWUpIHtcbiAgcmV0dXJuIHRoaXMuX2NyZWF0ZUVuY29kZXJCdWZmZXIodmFsdWUgPyAweGZmIDogMCk7XG59O1xuXG5ERVJOb2RlLnByb3RvdHlwZS5fdXNlID0gZnVuY3Rpb24gdXNlKGVudGl0eSwgb2JqKSB7XG4gIGlmICh0eXBlb2YgZW50aXR5ID09PSAnZnVuY3Rpb24nKVxuICAgIGVudGl0eSA9IGVudGl0eShvYmopO1xuICByZXR1cm4gZW50aXR5Ll9nZXRFbmNvZGVyKCdkZXInKS50cmVlO1xufTtcblxuREVSTm9kZS5wcm90b3R5cGUuX3NraXBEZWZhdWx0ID0gZnVuY3Rpb24gc2tpcERlZmF1bHQoZGF0YUJ1ZmZlciwgcmVwb3J0ZXIsIHBhcmVudCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG4gIHZhciBpO1xuICBpZiAoc3RhdGVbJ2RlZmF1bHQnXSA9PT0gbnVsbClcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgdmFyIGRhdGEgPSBkYXRhQnVmZmVyLmpvaW4oKTtcbiAgaWYgKHN0YXRlLmRlZmF1bHRCdWZmZXIgPT09IHVuZGVmaW5lZClcbiAgICBzdGF0ZS5kZWZhdWx0QnVmZmVyID0gdGhpcy5fZW5jb2RlVmFsdWUoc3RhdGVbJ2RlZmF1bHQnXSwgcmVwb3J0ZXIsIHBhcmVudCkuam9pbigpO1xuXG4gIGlmIChkYXRhLmxlbmd0aCAhPT0gc3RhdGUuZGVmYXVsdEJ1ZmZlci5sZW5ndGgpXG4gICAgcmV0dXJuIGZhbHNlO1xuXG4gIGZvciAoaT0wOyBpIDwgZGF0YS5sZW5ndGg7IGkrKylcbiAgICBpZiAoZGF0YVtpXSAhPT0gc3RhdGUuZGVmYXVsdEJ1ZmZlcltpXSlcbiAgICAgIHJldHVybiBmYWxzZTtcblxuICByZXR1cm4gdHJ1ZTtcbn07XG5cbi8vIFV0aWxpdHkgbWV0aG9kc1xuXG5mdW5jdGlvbiBlbmNvZGVUYWcodGFnLCBwcmltaXRpdmUsIGNscywgcmVwb3J0ZXIpIHtcbiAgdmFyIHJlcztcblxuICBpZiAodGFnID09PSAnc2Vxb2YnKVxuICAgIHRhZyA9ICdzZXEnO1xuICBlbHNlIGlmICh0YWcgPT09ICdzZXRvZicpXG4gICAgdGFnID0gJ3NldCc7XG5cbiAgaWYgKGRlci50YWdCeU5hbWUuaGFzT3duUHJvcGVydHkodGFnKSlcbiAgICByZXMgPSBkZXIudGFnQnlOYW1lW3RhZ107XG4gIGVsc2UgaWYgKHR5cGVvZiB0YWcgPT09ICdudW1iZXInICYmICh0YWcgfCAwKSA9PT0gdGFnKVxuICAgIHJlcyA9IHRhZztcbiAgZWxzZVxuICAgIHJldHVybiByZXBvcnRlci5lcnJvcignVW5rbm93biB0YWc6ICcgKyB0YWcpO1xuXG4gIGlmIChyZXMgPj0gMHgxZilcbiAgICByZXR1cm4gcmVwb3J0ZXIuZXJyb3IoJ011bHRpLW9jdGV0IHRhZyBlbmNvZGluZyB1bnN1cHBvcnRlZCcpO1xuXG4gIGlmICghcHJpbWl0aXZlKVxuICAgIHJlcyB8PSAweDIwO1xuXG4gIHJlcyB8PSAoZGVyLnRhZ0NsYXNzQnlOYW1lW2NscyB8fCAndW5pdmVyc2FsJ10gPDwgNik7XG5cbiAgcmV0dXJuIHJlcztcbn1cbiIsInZhciBjcmVhdGVIYXNoID0gcmVxdWlyZSgnY3JlYXRlLWhhc2gnKVxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHNlZWQsIGxlbikge1xuICB2YXIgdCA9IEJ1ZmZlci5hbGxvYygwKVxuICB2YXIgaSA9IDBcbiAgdmFyIGNcbiAgd2hpbGUgKHQubGVuZ3RoIDwgbGVuKSB7XG4gICAgYyA9IGkyb3BzKGkrKylcbiAgICB0ID0gQnVmZmVyLmNvbmNhdChbdCwgY3JlYXRlSGFzaCgnc2hhMScpLnVwZGF0ZShzZWVkKS51cGRhdGUoYykuZGlnZXN0KCldKVxuICB9XG4gIHJldHVybiB0LnNsaWNlKDAsIGxlbilcbn1cblxuZnVuY3Rpb24gaTJvcHMgKGMpIHtcbiAgdmFyIG91dCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSg0KVxuICBvdXQud3JpdGVVSW50MzJCRShjLCAwKVxuICByZXR1cm4gb3V0XG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHhvciAoYSwgYikge1xuICB2YXIgbGVuID0gYS5sZW5ndGhcbiAgdmFyIGkgPSAtMVxuICB3aGlsZSAoKytpIDwgbGVuKSB7XG4gICAgYVtpXSBePSBiW2ldXG4gIH1cbiAgcmV0dXJuIGFcbn1cbiIsInZhciBCTiA9IHJlcXVpcmUoJ2JuLmpzJylcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxuXG5mdW5jdGlvbiB3aXRoUHVibGljIChwYWRkZWRNc2csIGtleSkge1xuICByZXR1cm4gQnVmZmVyLmZyb20ocGFkZGVkTXNnXG4gICAgLnRvUmVkKEJOLm1vbnQoa2V5Lm1vZHVsdXMpKVxuICAgIC5yZWRQb3cobmV3IEJOKGtleS5wdWJsaWNFeHBvbmVudCkpXG4gICAgLmZyb21SZWQoKVxuICAgIC50b0FycmF5KCkpXG59XG5cbm1vZHVsZS5leHBvcnRzID0gd2l0aFB1YmxpY1xuIiwiLypnbG9iYWwgbW9kdWxlKi9cbnZhciBCdWZmZXIgPSByZXF1aXJlKCdidWZmZXInKS5CdWZmZXI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gdG9TdHJpbmcob2JqKSB7XG4gIGlmICh0eXBlb2Ygb2JqID09PSAnc3RyaW5nJylcbiAgICByZXR1cm4gb2JqO1xuICBpZiAodHlwZW9mIG9iaiA9PT0gJ251bWJlcicgfHwgQnVmZmVyLmlzQnVmZmVyKG9iaikpXG4gICAgcmV0dXJuIG9iai50b1N0cmluZygpO1xuICByZXR1cm4gSlNPTi5zdHJpbmdpZnkob2JqKTtcbn07XG4iLCJ2YXIgSnNvbldlYlRva2VuRXJyb3IgPSByZXF1aXJlKCcuL0pzb25XZWJUb2tlbkVycm9yJyk7XG5cbnZhciBOb3RCZWZvcmVFcnJvciA9IGZ1bmN0aW9uIChtZXNzYWdlLCBkYXRlKSB7XG4gIEpzb25XZWJUb2tlbkVycm9yLmNhbGwodGhpcywgbWVzc2FnZSk7XG4gIHRoaXMubmFtZSA9ICdOb3RCZWZvcmVFcnJvcic7XG4gIHRoaXMuZGF0ZSA9IGRhdGU7XG59O1xuXG5Ob3RCZWZvcmVFcnJvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEpzb25XZWJUb2tlbkVycm9yLnByb3RvdHlwZSk7XG5cbk5vdEJlZm9yZUVycm9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IE5vdEJlZm9yZUVycm9yO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE5vdEJlZm9yZUVycm9yOyIsInZhciBKc29uV2ViVG9rZW5FcnJvciA9IHJlcXVpcmUoJy4vSnNvbldlYlRva2VuRXJyb3InKTtcblxudmFyIFRva2VuRXhwaXJlZEVycm9yID0gZnVuY3Rpb24gKG1lc3NhZ2UsIGV4cGlyZWRBdCkge1xuICBKc29uV2ViVG9rZW5FcnJvci5jYWxsKHRoaXMsIG1lc3NhZ2UpO1xuICB0aGlzLm5hbWUgPSAnVG9rZW5FeHBpcmVkRXJyb3InO1xuICB0aGlzLmV4cGlyZWRBdCA9IGV4cGlyZWRBdDtcbn07XG5cblRva2VuRXhwaXJlZEVycm9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoSnNvbldlYlRva2VuRXJyb3IucHJvdG90eXBlKTtcblxuVG9rZW5FeHBpcmVkRXJyb3IucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gVG9rZW5FeHBpcmVkRXJyb3I7XG5cbm1vZHVsZS5leHBvcnRzID0gVG9rZW5FeHBpcmVkRXJyb3I7IiwidmFyIG1zID0gcmVxdWlyZSgnbXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGltZSwgaWF0KSB7XG4gIHZhciB0aW1lc3RhbXAgPSBpYXQgfHwgTWF0aC5mbG9vcihEYXRlLm5vdygpIC8gMTAwMCk7XG5cbiAgaWYgKHR5cGVvZiB0aW1lID09PSAnc3RyaW5nJykge1xuICAgIHZhciBtaWxsaXNlY29uZHMgPSBtcyh0aW1lKTtcbiAgICBpZiAodHlwZW9mIG1pbGxpc2Vjb25kcyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgcmV0dXJuIE1hdGguZmxvb3IodGltZXN0YW1wICsgbWlsbGlzZWNvbmRzIC8gMTAwMCk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHRpbWUgPT09ICdudW1iZXInKSB7XG4gICAgcmV0dXJuIHRpbWVzdGFtcCArIHRpbWU7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbn07IiwidmFyIHNlbXZlciA9IHJlcXVpcmUoJ3NlbXZlcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHNlbXZlci5zYXRpc2ZpZXMocHJvY2Vzcy52ZXJzaW9uLCAnXjYuMTIuMCB8fCA+PTguMC4wJyk7XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYmluZChmbiwgdGhpc0FyZykge1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcCgpIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFyZ3NbaV0gPSBhcmd1bWVudHNbaV07XG4gICAgfVxuICAgIHJldHVybiBmbi5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgfTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuZnVuY3Rpb24gZW5jb2RlKHZhbCkge1xuICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHZhbCkuXG4gICAgcmVwbGFjZSgvJTQwL2dpLCAnQCcpLlxuICAgIHJlcGxhY2UoLyUzQS9naSwgJzonKS5cbiAgICByZXBsYWNlKC8lMjQvZywgJyQnKS5cbiAgICByZXBsYWNlKC8lMkMvZ2ksICcsJykuXG4gICAgcmVwbGFjZSgvJTIwL2csICcrJykuXG4gICAgcmVwbGFjZSgvJTVCL2dpLCAnWycpLlxuICAgIHJlcGxhY2UoLyU1RC9naSwgJ10nKTtcbn1cblxuLyoqXG4gKiBCdWlsZCBhIFVSTCBieSBhcHBlbmRpbmcgcGFyYW1zIHRvIHRoZSBlbmRcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBiYXNlIG9mIHRoZSB1cmwgKGUuZy4sIGh0dHA6Ly93d3cuZ29vZ2xlLmNvbSlcbiAqIEBwYXJhbSB7b2JqZWN0fSBbcGFyYW1zXSBUaGUgcGFyYW1zIHRvIGJlIGFwcGVuZGVkXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgZm9ybWF0dGVkIHVybFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJ1aWxkVVJMKHVybCwgcGFyYW1zLCBwYXJhbXNTZXJpYWxpemVyKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICBpZiAoIXBhcmFtcykge1xuICAgIHJldHVybiB1cmw7XG4gIH1cblxuICB2YXIgc2VyaWFsaXplZFBhcmFtcztcbiAgaWYgKHBhcmFtc1NlcmlhbGl6ZXIpIHtcbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFyYW1zU2VyaWFsaXplcihwYXJhbXMpO1xuICB9IGVsc2UgaWYgKHV0aWxzLmlzVVJMU2VhcmNoUGFyYW1zKHBhcmFtcykpIHtcbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFyYW1zLnRvU3RyaW5nKCk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHBhcnRzID0gW107XG5cbiAgICB1dGlscy5mb3JFYWNoKHBhcmFtcywgZnVuY3Rpb24gc2VyaWFsaXplKHZhbCwga2V5KSB7XG4gICAgICBpZiAodmFsID09PSBudWxsIHx8IHR5cGVvZiB2YWwgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHV0aWxzLmlzQXJyYXkodmFsKSkge1xuICAgICAgICBrZXkgPSBrZXkgKyAnW10nO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsID0gW3ZhbF07XG4gICAgICB9XG5cbiAgICAgIHV0aWxzLmZvckVhY2godmFsLCBmdW5jdGlvbiBwYXJzZVZhbHVlKHYpIHtcbiAgICAgICAgaWYgKHV0aWxzLmlzRGF0ZSh2KSkge1xuICAgICAgICAgIHYgPSB2LnRvSVNPU3RyaW5nKCk7XG4gICAgICAgIH0gZWxzZSBpZiAodXRpbHMuaXNPYmplY3QodikpIHtcbiAgICAgICAgICB2ID0gSlNPTi5zdHJpbmdpZnkodik7XG4gICAgICAgIH1cbiAgICAgICAgcGFydHMucHVzaChlbmNvZGUoa2V5KSArICc9JyArIGVuY29kZSh2KSk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJ0cy5qb2luKCcmJyk7XG4gIH1cblxuICBpZiAoc2VyaWFsaXplZFBhcmFtcykge1xuICAgIHZhciBoYXNobWFya0luZGV4ID0gdXJsLmluZGV4T2YoJyMnKTtcbiAgICBpZiAoaGFzaG1hcmtJbmRleCAhPT0gLTEpIHtcbiAgICAgIHVybCA9IHVybC5zbGljZSgwLCBoYXNobWFya0luZGV4KTtcbiAgICB9XG5cbiAgICB1cmwgKz0gKHVybC5pbmRleE9mKCc/JykgPT09IC0xID8gJz8nIDogJyYnKSArIHNlcmlhbGl6ZWRQYXJhbXM7XG4gIH1cblxuICByZXR1cm4gdXJsO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0NhbmNlbCh2YWx1ZSkge1xuICByZXR1cm4gISEodmFsdWUgJiYgdmFsdWUuX19DQU5DRUxfXyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG52YXIgbm9ybWFsaXplSGVhZGVyTmFtZSA9IHJlcXVpcmUoJy4vaGVscGVycy9ub3JtYWxpemVIZWFkZXJOYW1lJyk7XG5cbnZhciBERUZBVUxUX0NPTlRFTlRfVFlQRSA9IHtcbiAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnXG59O1xuXG5mdW5jdGlvbiBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgdmFsdWUpIHtcbiAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChoZWFkZXJzKSAmJiB1dGlscy5pc1VuZGVmaW5lZChoZWFkZXJzWydDb250ZW50LVR5cGUnXSkpIHtcbiAgICBoZWFkZXJzWydDb250ZW50LVR5cGUnXSA9IHZhbHVlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldERlZmF1bHRBZGFwdGVyKCkge1xuICB2YXIgYWRhcHRlcjtcbiAgLy8gT25seSBOb2RlLkpTIGhhcyBhIHByb2Nlc3MgdmFyaWFibGUgdGhhdCBpcyBvZiBbW0NsYXNzXV0gcHJvY2Vzc1xuICBpZiAodHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChwcm9jZXNzKSA9PT0gJ1tvYmplY3QgcHJvY2Vzc10nKSB7XG4gICAgLy8gRm9yIG5vZGUgdXNlIEhUVFAgYWRhcHRlclxuICAgIGFkYXB0ZXIgPSByZXF1aXJlKCcuL2FkYXB0ZXJzL2h0dHAnKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgWE1MSHR0cFJlcXVlc3QgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgLy8gRm9yIGJyb3dzZXJzIHVzZSBYSFIgYWRhcHRlclxuICAgIGFkYXB0ZXIgPSByZXF1aXJlKCcuL2FkYXB0ZXJzL3hocicpO1xuICB9XG4gIHJldHVybiBhZGFwdGVyO1xufVxuXG52YXIgZGVmYXVsdHMgPSB7XG4gIGFkYXB0ZXI6IGdldERlZmF1bHRBZGFwdGVyKCksXG5cbiAgdHJhbnNmb3JtUmVxdWVzdDogW2Z1bmN0aW9uIHRyYW5zZm9ybVJlcXVlc3QoZGF0YSwgaGVhZGVycykge1xuICAgIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgJ0FjY2VwdCcpO1xuICAgIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgJ0NvbnRlbnQtVHlwZScpO1xuICAgIGlmICh1dGlscy5pc0Zvcm1EYXRhKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0FycmF5QnVmZmVyKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0J1ZmZlcihkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNTdHJlYW0oZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzRmlsZShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNCbG9iKGRhdGEpXG4gICAgKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzQXJyYXlCdWZmZXJWaWV3KGRhdGEpKSB7XG4gICAgICByZXR1cm4gZGF0YS5idWZmZXI7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhkYXRhKSkge1xuICAgICAgc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7Y2hhcnNldD11dGYtOCcpO1xuICAgICAgcmV0dXJuIGRhdGEudG9TdHJpbmcoKTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzT2JqZWN0KGRhdGEpKSB7XG4gICAgICBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgJ2FwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtOCcpO1xuICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGRhdGEpO1xuICAgIH1cbiAgICByZXR1cm4gZGF0YTtcbiAgfV0sXG5cbiAgdHJhbnNmb3JtUmVzcG9uc2U6IFtmdW5jdGlvbiB0cmFuc2Zvcm1SZXNwb25zZShkYXRhKSB7XG4gICAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gICAgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgZGF0YSA9IEpTT04ucGFyc2UoZGF0YSk7XG4gICAgICB9IGNhdGNoIChlKSB7IC8qIElnbm9yZSAqLyB9XG4gICAgfVxuICAgIHJldHVybiBkYXRhO1xuICB9XSxcblxuICAvKipcbiAgICogQSB0aW1lb3V0IGluIG1pbGxpc2Vjb25kcyB0byBhYm9ydCBhIHJlcXVlc3QuIElmIHNldCB0byAwIChkZWZhdWx0KSBhXG4gICAqIHRpbWVvdXQgaXMgbm90IGNyZWF0ZWQuXG4gICAqL1xuICB0aW1lb3V0OiAwLFxuXG4gIHhzcmZDb29raWVOYW1lOiAnWFNSRi1UT0tFTicsXG4gIHhzcmZIZWFkZXJOYW1lOiAnWC1YU1JGLVRPS0VOJyxcblxuICBtYXhDb250ZW50TGVuZ3RoOiAtMSxcblxuICB2YWxpZGF0ZVN0YXR1czogZnVuY3Rpb24gdmFsaWRhdGVTdGF0dXMoc3RhdHVzKSB7XG4gICAgcmV0dXJuIHN0YXR1cyA+PSAyMDAgJiYgc3RhdHVzIDwgMzAwO1xuICB9XG59O1xuXG5kZWZhdWx0cy5oZWFkZXJzID0ge1xuICBjb21tb246IHtcbiAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24sIHRleHQvcGxhaW4sICovKidcbiAgfVxufTtcblxudXRpbHMuZm9yRWFjaChbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kTm9EYXRhKG1ldGhvZCkge1xuICBkZWZhdWx0cy5oZWFkZXJzW21ldGhvZF0gPSB7fTtcbn0pO1xuXG51dGlscy5mb3JFYWNoKFsncG9zdCcsICdwdXQnLCAncGF0Y2gnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZFdpdGhEYXRhKG1ldGhvZCkge1xuICBkZWZhdWx0cy5oZWFkZXJzW21ldGhvZF0gPSB1dGlscy5tZXJnZShERUZBVUxUX0NPTlRFTlRfVFlQRSk7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBkZWZhdWx0cztcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIHNldHRsZSA9IHJlcXVpcmUoJy4vLi4vY29yZS9zZXR0bGUnKTtcbnZhciBidWlsZFVSTCA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9idWlsZFVSTCcpO1xudmFyIHBhcnNlSGVhZGVycyA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9wYXJzZUhlYWRlcnMnKTtcbnZhciBpc1VSTFNhbWVPcmlnaW4gPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvaXNVUkxTYW1lT3JpZ2luJyk7XG52YXIgY3JlYXRlRXJyb3IgPSByZXF1aXJlKCcuLi9jb3JlL2NyZWF0ZUVycm9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24geGhyQWRhcHRlcihjb25maWcpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIGRpc3BhdGNoWGhyUmVxdWVzdChyZXNvbHZlLCByZWplY3QpIHtcbiAgICB2YXIgcmVxdWVzdERhdGEgPSBjb25maWcuZGF0YTtcbiAgICB2YXIgcmVxdWVzdEhlYWRlcnMgPSBjb25maWcuaGVhZGVycztcblxuICAgIGlmICh1dGlscy5pc0Zvcm1EYXRhKHJlcXVlc3REYXRhKSkge1xuICAgICAgZGVsZXRlIHJlcXVlc3RIZWFkZXJzWydDb250ZW50LVR5cGUnXTsgLy8gTGV0IHRoZSBicm93c2VyIHNldCBpdFxuICAgIH1cblxuICAgIHZhciByZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG5cbiAgICAvLyBIVFRQIGJhc2ljIGF1dGhlbnRpY2F0aW9uXG4gICAgaWYgKGNvbmZpZy5hdXRoKSB7XG4gICAgICB2YXIgdXNlcm5hbWUgPSBjb25maWcuYXV0aC51c2VybmFtZSB8fCAnJztcbiAgICAgIHZhciBwYXNzd29yZCA9IGNvbmZpZy5hdXRoLnBhc3N3b3JkIHx8ICcnO1xuICAgICAgcmVxdWVzdEhlYWRlcnMuQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgYnRvYSh1c2VybmFtZSArICc6JyArIHBhc3N3b3JkKTtcbiAgICB9XG5cbiAgICByZXF1ZXN0Lm9wZW4oY29uZmlnLm1ldGhvZC50b1VwcGVyQ2FzZSgpLCBidWlsZFVSTChjb25maWcudXJsLCBjb25maWcucGFyYW1zLCBjb25maWcucGFyYW1zU2VyaWFsaXplciksIHRydWUpO1xuXG4gICAgLy8gU2V0IHRoZSByZXF1ZXN0IHRpbWVvdXQgaW4gTVNcbiAgICByZXF1ZXN0LnRpbWVvdXQgPSBjb25maWcudGltZW91dDtcblxuICAgIC8vIExpc3RlbiBmb3IgcmVhZHkgc3RhdGVcbiAgICByZXF1ZXN0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZUxvYWQoKSB7XG4gICAgICBpZiAoIXJlcXVlc3QgfHwgcmVxdWVzdC5yZWFkeVN0YXRlICE9PSA0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gVGhlIHJlcXVlc3QgZXJyb3JlZCBvdXQgYW5kIHdlIGRpZG4ndCBnZXQgYSByZXNwb25zZSwgdGhpcyB3aWxsIGJlXG4gICAgICAvLyBoYW5kbGVkIGJ5IG9uZXJyb3IgaW5zdGVhZFxuICAgICAgLy8gV2l0aCBvbmUgZXhjZXB0aW9uOiByZXF1ZXN0IHRoYXQgdXNpbmcgZmlsZTogcHJvdG9jb2wsIG1vc3QgYnJvd3NlcnNcbiAgICAgIC8vIHdpbGwgcmV0dXJuIHN0YXR1cyBhcyAwIGV2ZW4gdGhvdWdoIGl0J3MgYSBzdWNjZXNzZnVsIHJlcXVlc3RcbiAgICAgIGlmIChyZXF1ZXN0LnN0YXR1cyA9PT0gMCAmJiAhKHJlcXVlc3QucmVzcG9uc2VVUkwgJiYgcmVxdWVzdC5yZXNwb25zZVVSTC5pbmRleE9mKCdmaWxlOicpID09PSAwKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIFByZXBhcmUgdGhlIHJlc3BvbnNlXG4gICAgICB2YXIgcmVzcG9uc2VIZWFkZXJzID0gJ2dldEFsbFJlc3BvbnNlSGVhZGVycycgaW4gcmVxdWVzdCA/IHBhcnNlSGVhZGVycyhyZXF1ZXN0LmdldEFsbFJlc3BvbnNlSGVhZGVycygpKSA6IG51bGw7XG4gICAgICB2YXIgcmVzcG9uc2VEYXRhID0gIWNvbmZpZy5yZXNwb25zZVR5cGUgfHwgY29uZmlnLnJlc3BvbnNlVHlwZSA9PT0gJ3RleHQnID8gcmVxdWVzdC5yZXNwb25zZVRleHQgOiByZXF1ZXN0LnJlc3BvbnNlO1xuICAgICAgdmFyIHJlc3BvbnNlID0ge1xuICAgICAgICBkYXRhOiByZXNwb25zZURhdGEsXG4gICAgICAgIHN0YXR1czogcmVxdWVzdC5zdGF0dXMsXG4gICAgICAgIHN0YXR1c1RleHQ6IHJlcXVlc3Quc3RhdHVzVGV4dCxcbiAgICAgICAgaGVhZGVyczogcmVzcG9uc2VIZWFkZXJzLFxuICAgICAgICBjb25maWc6IGNvbmZpZyxcbiAgICAgICAgcmVxdWVzdDogcmVxdWVzdFxuICAgICAgfTtcblxuICAgICAgc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgcmVzcG9uc2UpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gSGFuZGxlIGJyb3dzZXIgcmVxdWVzdCBjYW5jZWxsYXRpb24gKGFzIG9wcG9zZWQgdG8gYSBtYW51YWwgY2FuY2VsbGF0aW9uKVxuICAgIHJlcXVlc3Qub25hYm9ydCA9IGZ1bmN0aW9uIGhhbmRsZUFib3J0KCkge1xuICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgcmVqZWN0KGNyZWF0ZUVycm9yKCdSZXF1ZXN0IGFib3J0ZWQnLCBjb25maWcsICdFQ09OTkFCT1JURUQnLCByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgbG93IGxldmVsIG5ldHdvcmsgZXJyb3JzXG4gICAgcmVxdWVzdC5vbmVycm9yID0gZnVuY3Rpb24gaGFuZGxlRXJyb3IoKSB7XG4gICAgICAvLyBSZWFsIGVycm9ycyBhcmUgaGlkZGVuIGZyb20gdXMgYnkgdGhlIGJyb3dzZXJcbiAgICAgIC8vIG9uZXJyb3Igc2hvdWxkIG9ubHkgZmlyZSBpZiBpdCdzIGEgbmV0d29yayBlcnJvclxuICAgICAgcmVqZWN0KGNyZWF0ZUVycm9yKCdOZXR3b3JrIEVycm9yJywgY29uZmlnLCBudWxsLCByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgdGltZW91dFxuICAgIHJlcXVlc3Qub250aW1lb3V0ID0gZnVuY3Rpb24gaGFuZGxlVGltZW91dCgpIHtcbiAgICAgIHJlamVjdChjcmVhdGVFcnJvcigndGltZW91dCBvZiAnICsgY29uZmlnLnRpbWVvdXQgKyAnbXMgZXhjZWVkZWQnLCBjb25maWcsICdFQ09OTkFCT1JURUQnLFxuICAgICAgICByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBBZGQgeHNyZiBoZWFkZXJcbiAgICAvLyBUaGlzIGlzIG9ubHkgZG9uZSBpZiBydW5uaW5nIGluIGEgc3RhbmRhcmQgYnJvd3NlciBlbnZpcm9ubWVudC5cbiAgICAvLyBTcGVjaWZpY2FsbHkgbm90IGlmIHdlJ3JlIGluIGEgd2ViIHdvcmtlciwgb3IgcmVhY3QtbmF0aXZlLlxuICAgIGlmICh1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpKSB7XG4gICAgICB2YXIgY29va2llcyA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9jb29raWVzJyk7XG5cbiAgICAgIC8vIEFkZCB4c3JmIGhlYWRlclxuICAgICAgdmFyIHhzcmZWYWx1ZSA9IChjb25maWcud2l0aENyZWRlbnRpYWxzIHx8IGlzVVJMU2FtZU9yaWdpbihjb25maWcudXJsKSkgJiYgY29uZmlnLnhzcmZDb29raWVOYW1lID9cbiAgICAgICAgY29va2llcy5yZWFkKGNvbmZpZy54c3JmQ29va2llTmFtZSkgOlxuICAgICAgICB1bmRlZmluZWQ7XG5cbiAgICAgIGlmICh4c3JmVmFsdWUpIHtcbiAgICAgICAgcmVxdWVzdEhlYWRlcnNbY29uZmlnLnhzcmZIZWFkZXJOYW1lXSA9IHhzcmZWYWx1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBBZGQgaGVhZGVycyB0byB0aGUgcmVxdWVzdFxuICAgIGlmICgnc2V0UmVxdWVzdEhlYWRlcicgaW4gcmVxdWVzdCkge1xuICAgICAgdXRpbHMuZm9yRWFjaChyZXF1ZXN0SGVhZGVycywgZnVuY3Rpb24gc2V0UmVxdWVzdEhlYWRlcih2YWwsIGtleSkge1xuICAgICAgICBpZiAodHlwZW9mIHJlcXVlc3REYXRhID09PSAndW5kZWZpbmVkJyAmJiBrZXkudG9Mb3dlckNhc2UoKSA9PT0gJ2NvbnRlbnQtdHlwZScpIHtcbiAgICAgICAgICAvLyBSZW1vdmUgQ29udGVudC1UeXBlIGlmIGRhdGEgaXMgdW5kZWZpbmVkXG4gICAgICAgICAgZGVsZXRlIHJlcXVlc3RIZWFkZXJzW2tleV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gT3RoZXJ3aXNlIGFkZCBoZWFkZXIgdG8gdGhlIHJlcXVlc3RcbiAgICAgICAgICByZXF1ZXN0LnNldFJlcXVlc3RIZWFkZXIoa2V5LCB2YWwpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBBZGQgd2l0aENyZWRlbnRpYWxzIHRvIHJlcXVlc3QgaWYgbmVlZGVkXG4gICAgaWYgKGNvbmZpZy53aXRoQ3JlZGVudGlhbHMpIHtcbiAgICAgIHJlcXVlc3Qud2l0aENyZWRlbnRpYWxzID0gdHJ1ZTtcbiAgICB9XG5cbiAgICAvLyBBZGQgcmVzcG9uc2VUeXBlIHRvIHJlcXVlc3QgaWYgbmVlZGVkXG4gICAgaWYgKGNvbmZpZy5yZXNwb25zZVR5cGUpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJlcXVlc3QucmVzcG9uc2VUeXBlID0gY29uZmlnLnJlc3BvbnNlVHlwZTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gRXhwZWN0ZWQgRE9NRXhjZXB0aW9uIHRocm93biBieSBicm93c2VycyBub3QgY29tcGF0aWJsZSBYTUxIdHRwUmVxdWVzdCBMZXZlbCAyLlxuICAgICAgICAvLyBCdXQsIHRoaXMgY2FuIGJlIHN1cHByZXNzZWQgZm9yICdqc29uJyB0eXBlIGFzIGl0IGNhbiBiZSBwYXJzZWQgYnkgZGVmYXVsdCAndHJhbnNmb3JtUmVzcG9uc2UnIGZ1bmN0aW9uLlxuICAgICAgICBpZiAoY29uZmlnLnJlc3BvbnNlVHlwZSAhPT0gJ2pzb24nKSB7XG4gICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEhhbmRsZSBwcm9ncmVzcyBpZiBuZWVkZWRcbiAgICBpZiAodHlwZW9mIGNvbmZpZy5vbkRvd25sb2FkUHJvZ3Jlc3MgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcigncHJvZ3Jlc3MnLCBjb25maWcub25Eb3dubG9hZFByb2dyZXNzKTtcbiAgICB9XG5cbiAgICAvLyBOb3QgYWxsIGJyb3dzZXJzIHN1cHBvcnQgdXBsb2FkIGV2ZW50c1xuICAgIGlmICh0eXBlb2YgY29uZmlnLm9uVXBsb2FkUHJvZ3Jlc3MgPT09ICdmdW5jdGlvbicgJiYgcmVxdWVzdC51cGxvYWQpIHtcbiAgICAgIHJlcXVlc3QudXBsb2FkLmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgY29uZmlnLm9uVXBsb2FkUHJvZ3Jlc3MpO1xuICAgIH1cblxuICAgIGlmIChjb25maWcuY2FuY2VsVG9rZW4pIHtcbiAgICAgIC8vIEhhbmRsZSBjYW5jZWxsYXRpb25cbiAgICAgIGNvbmZpZy5jYW5jZWxUb2tlbi5wcm9taXNlLnRoZW4oZnVuY3Rpb24gb25DYW5jZWxlZChjYW5jZWwpIHtcbiAgICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVxdWVzdC5hYm9ydCgpO1xuICAgICAgICByZWplY3QoY2FuY2VsKTtcbiAgICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChyZXF1ZXN0RGF0YSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXF1ZXN0RGF0YSA9IG51bGw7XG4gICAgfVxuXG4gICAgLy8gU2VuZCB0aGUgcmVxdWVzdFxuICAgIHJlcXVlc3Quc2VuZChyZXF1ZXN0RGF0YSk7XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGVuaGFuY2VFcnJvciA9IHJlcXVpcmUoJy4vZW5oYW5jZUVycm9yJyk7XG5cbi8qKlxuICogQ3JlYXRlIGFuIEVycm9yIHdpdGggdGhlIHNwZWNpZmllZCBtZXNzYWdlLCBjb25maWcsIGVycm9yIGNvZGUsIHJlcXVlc3QgYW5kIHJlc3BvbnNlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlIFRoZSBlcnJvciBtZXNzYWdlLlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnLlxuICogQHBhcmFtIHtzdHJpbmd9IFtjb2RlXSBUaGUgZXJyb3IgY29kZSAoZm9yIGV4YW1wbGUsICdFQ09OTkFCT1JURUQnKS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVxdWVzdF0gVGhlIHJlcXVlc3QuXG4gKiBAcGFyYW0ge09iamVjdH0gW3Jlc3BvbnNlXSBUaGUgcmVzcG9uc2UuXG4gKiBAcmV0dXJucyB7RXJyb3J9IFRoZSBjcmVhdGVkIGVycm9yLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNyZWF0ZUVycm9yKG1lc3NhZ2UsIGNvbmZpZywgY29kZSwgcmVxdWVzdCwgcmVzcG9uc2UpIHtcbiAgdmFyIGVycm9yID0gbmV3IEVycm9yKG1lc3NhZ2UpO1xuICByZXR1cm4gZW5oYW5jZUVycm9yKGVycm9yLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbi8qKlxuICogQ29uZmlnLXNwZWNpZmljIG1lcmdlLWZ1bmN0aW9uIHdoaWNoIGNyZWF0ZXMgYSBuZXcgY29uZmlnLW9iamVjdFxuICogYnkgbWVyZ2luZyB0d28gY29uZmlndXJhdGlvbiBvYmplY3RzIHRvZ2V0aGVyLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcxXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnMlxuICogQHJldHVybnMge09iamVjdH0gTmV3IG9iamVjdCByZXN1bHRpbmcgZnJvbSBtZXJnaW5nIGNvbmZpZzIgdG8gY29uZmlnMVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIG1lcmdlQ29uZmlnKGNvbmZpZzEsIGNvbmZpZzIpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gIGNvbmZpZzIgPSBjb25maWcyIHx8IHt9O1xuICB2YXIgY29uZmlnID0ge307XG5cbiAgdXRpbHMuZm9yRWFjaChbJ3VybCcsICdtZXRob2QnLCAncGFyYW1zJywgJ2RhdGEnXSwgZnVuY3Rpb24gdmFsdWVGcm9tQ29uZmlnMihwcm9wKSB7XG4gICAgaWYgKHR5cGVvZiBjb25maWcyW3Byb3BdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uZmlnW3Byb3BdID0gY29uZmlnMltwcm9wXTtcbiAgICB9XG4gIH0pO1xuXG4gIHV0aWxzLmZvckVhY2goWydoZWFkZXJzJywgJ2F1dGgnLCAncHJveHknXSwgZnVuY3Rpb24gbWVyZ2VEZWVwUHJvcGVydGllcyhwcm9wKSB7XG4gICAgaWYgKHV0aWxzLmlzT2JqZWN0KGNvbmZpZzJbcHJvcF0pKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSB1dGlscy5kZWVwTWVyZ2UoY29uZmlnMVtwcm9wXSwgY29uZmlnMltwcm9wXSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgY29uZmlnMltwcm9wXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGNvbmZpZzJbcHJvcF07XG4gICAgfSBlbHNlIGlmICh1dGlscy5pc09iamVjdChjb25maWcxW3Byb3BdKSkge1xuICAgICAgY29uZmlnW3Byb3BdID0gdXRpbHMuZGVlcE1lcmdlKGNvbmZpZzFbcHJvcF0pO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGNvbmZpZzFbcHJvcF0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSBjb25maWcxW3Byb3BdO1xuICAgIH1cbiAgfSk7XG5cbiAgdXRpbHMuZm9yRWFjaChbXG4gICAgJ2Jhc2VVUkwnLCAndHJhbnNmb3JtUmVxdWVzdCcsICd0cmFuc2Zvcm1SZXNwb25zZScsICdwYXJhbXNTZXJpYWxpemVyJyxcbiAgICAndGltZW91dCcsICd3aXRoQ3JlZGVudGlhbHMnLCAnYWRhcHRlcicsICdyZXNwb25zZVR5cGUnLCAneHNyZkNvb2tpZU5hbWUnLFxuICAgICd4c3JmSGVhZGVyTmFtZScsICdvblVwbG9hZFByb2dyZXNzJywgJ29uRG93bmxvYWRQcm9ncmVzcycsICdtYXhDb250ZW50TGVuZ3RoJyxcbiAgICAndmFsaWRhdGVTdGF0dXMnLCAnbWF4UmVkaXJlY3RzJywgJ2h0dHBBZ2VudCcsICdodHRwc0FnZW50JywgJ2NhbmNlbFRva2VuJyxcbiAgICAnc29ja2V0UGF0aCdcbiAgXSwgZnVuY3Rpb24gZGVmYXVsdFRvQ29uZmlnMihwcm9wKSB7XG4gICAgaWYgKHR5cGVvZiBjb25maWcyW3Byb3BdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uZmlnW3Byb3BdID0gY29uZmlnMltwcm9wXTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBjb25maWcxW3Byb3BdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uZmlnW3Byb3BdID0gY29uZmlnMVtwcm9wXTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBjb25maWc7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEEgYENhbmNlbGAgaXMgYW4gb2JqZWN0IHRoYXQgaXMgdGhyb3duIHdoZW4gYW4gb3BlcmF0aW9uIGlzIGNhbmNlbGVkLlxuICpcbiAqIEBjbGFzc1xuICogQHBhcmFtIHtzdHJpbmc9fSBtZXNzYWdlIFRoZSBtZXNzYWdlLlxuICovXG5mdW5jdGlvbiBDYW5jZWwobWVzc2FnZSkge1xuICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xufVxuXG5DYW5jZWwucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gIHJldHVybiAnQ2FuY2VsJyArICh0aGlzLm1lc3NhZ2UgPyAnOiAnICsgdGhpcy5tZXNzYWdlIDogJycpO1xufTtcblxuQ2FuY2VsLnByb3RvdHlwZS5fX0NBTkNFTF9fID0gdHJ1ZTtcblxubW9kdWxlLmV4cG9ydHMgPSBDYW5jZWw7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHtcbiAgZGVjb2RlOiByZXF1aXJlKCcuL2RlY29kZScpLFxuICB2ZXJpZnk6IHJlcXVpcmUoJy4vdmVyaWZ5JyksXG4gIHNpZ246IHJlcXVpcmUoJy4vc2lnbicpLFxuICBKc29uV2ViVG9rZW5FcnJvcjogcmVxdWlyZSgnLi9saWIvSnNvbldlYlRva2VuRXJyb3InKSxcbiAgTm90QmVmb3JlRXJyb3I6IHJlcXVpcmUoJy4vbGliL05vdEJlZm9yZUVycm9yJyksXG4gIFRva2VuRXhwaXJlZEVycm9yOiByZXF1aXJlKCcuL2xpYi9Ub2tlbkV4cGlyZWRFcnJvcicpLFxufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9saWIvYXhpb3MnKTsiLCIvKmdsb2JhbCBtb2R1bGUqL1xudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyO1xudmFyIERhdGFTdHJlYW0gPSByZXF1aXJlKCcuL2RhdGEtc3RyZWFtJyk7XG52YXIgandhID0gcmVxdWlyZSgnandhJyk7XG52YXIgU3RyZWFtID0gcmVxdWlyZSgnc3RyZWFtJyk7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuL3Rvc3RyaW5nJyk7XG52YXIgdXRpbCA9IHJlcXVpcmUoJ3V0aWwnKTtcblxuZnVuY3Rpb24gYmFzZTY0dXJsKHN0cmluZywgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIEJ1ZmZlclxuICAgIC5mcm9tKHN0cmluZywgZW5jb2RpbmcpXG4gICAgLnRvU3RyaW5nKCdiYXNlNjQnKVxuICAgIC5yZXBsYWNlKC89L2csICcnKVxuICAgIC5yZXBsYWNlKC9cXCsvZywgJy0nKVxuICAgIC5yZXBsYWNlKC9cXC8vZywgJ18nKTtcbn1cblxuZnVuY3Rpb24gandzU2VjdXJlZElucHV0KGhlYWRlciwgcGF5bG9hZCwgZW5jb2RpbmcpIHtcbiAgZW5jb2RpbmcgPSBlbmNvZGluZyB8fCAndXRmOCc7XG4gIHZhciBlbmNvZGVkSGVhZGVyID0gYmFzZTY0dXJsKHRvU3RyaW5nKGhlYWRlciksICdiaW5hcnknKTtcbiAgdmFyIGVuY29kZWRQYXlsb2FkID0gYmFzZTY0dXJsKHRvU3RyaW5nKHBheWxvYWQpLCBlbmNvZGluZyk7XG4gIHJldHVybiB1dGlsLmZvcm1hdCgnJXMuJXMnLCBlbmNvZGVkSGVhZGVyLCBlbmNvZGVkUGF5bG9hZCk7XG59XG5cbmZ1bmN0aW9uIGp3c1NpZ24ob3B0cykge1xuICB2YXIgaGVhZGVyID0gb3B0cy5oZWFkZXI7XG4gIHZhciBwYXlsb2FkID0gb3B0cy5wYXlsb2FkO1xuICB2YXIgc2VjcmV0T3JLZXkgPSBvcHRzLnNlY3JldCB8fCBvcHRzLnByaXZhdGVLZXk7XG4gIHZhciBlbmNvZGluZyA9IG9wdHMuZW5jb2Rpbmc7XG4gIHZhciBhbGdvID0gandhKGhlYWRlci5hbGcpO1xuICB2YXIgc2VjdXJlZElucHV0ID0gandzU2VjdXJlZElucHV0KGhlYWRlciwgcGF5bG9hZCwgZW5jb2RpbmcpO1xuICB2YXIgc2lnbmF0dXJlID0gYWxnby5zaWduKHNlY3VyZWRJbnB1dCwgc2VjcmV0T3JLZXkpO1xuICByZXR1cm4gdXRpbC5mb3JtYXQoJyVzLiVzJywgc2VjdXJlZElucHV0LCBzaWduYXR1cmUpO1xufVxuXG5mdW5jdGlvbiBTaWduU3RyZWFtKG9wdHMpIHtcbiAgdmFyIHNlY3JldCA9IG9wdHMuc2VjcmV0fHxvcHRzLnByaXZhdGVLZXl8fG9wdHMua2V5O1xuICB2YXIgc2VjcmV0U3RyZWFtID0gbmV3IERhdGFTdHJlYW0oc2VjcmV0KTtcbiAgdGhpcy5yZWFkYWJsZSA9IHRydWU7XG4gIHRoaXMuaGVhZGVyID0gb3B0cy5oZWFkZXI7XG4gIHRoaXMuZW5jb2RpbmcgPSBvcHRzLmVuY29kaW5nO1xuICB0aGlzLnNlY3JldCA9IHRoaXMucHJpdmF0ZUtleSA9IHRoaXMua2V5ID0gc2VjcmV0U3RyZWFtO1xuICB0aGlzLnBheWxvYWQgPSBuZXcgRGF0YVN0cmVhbShvcHRzLnBheWxvYWQpO1xuICB0aGlzLnNlY3JldC5vbmNlKCdjbG9zZScsIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXRoaXMucGF5bG9hZC53cml0YWJsZSAmJiB0aGlzLnJlYWRhYmxlKVxuICAgICAgdGhpcy5zaWduKCk7XG4gIH0uYmluZCh0aGlzKSk7XG5cbiAgdGhpcy5wYXlsb2FkLm9uY2UoJ2Nsb3NlJywgZnVuY3Rpb24gKCkge1xuICAgIGlmICghdGhpcy5zZWNyZXQud3JpdGFibGUgJiYgdGhpcy5yZWFkYWJsZSlcbiAgICAgIHRoaXMuc2lnbigpO1xuICB9LmJpbmQodGhpcykpO1xufVxudXRpbC5pbmhlcml0cyhTaWduU3RyZWFtLCBTdHJlYW0pO1xuXG5TaWduU3RyZWFtLnByb3RvdHlwZS5zaWduID0gZnVuY3Rpb24gc2lnbigpIHtcbiAgdHJ5IHtcbiAgICB2YXIgc2lnbmF0dXJlID0gandzU2lnbih7XG4gICAgICBoZWFkZXI6IHRoaXMuaGVhZGVyLFxuICAgICAgcGF5bG9hZDogdGhpcy5wYXlsb2FkLmJ1ZmZlcixcbiAgICAgIHNlY3JldDogdGhpcy5zZWNyZXQuYnVmZmVyLFxuICAgICAgZW5jb2Rpbmc6IHRoaXMuZW5jb2RpbmdcbiAgICB9KTtcbiAgICB0aGlzLmVtaXQoJ2RvbmUnLCBzaWduYXR1cmUpO1xuICAgIHRoaXMuZW1pdCgnZGF0YScsIHNpZ25hdHVyZSk7XG4gICAgdGhpcy5lbWl0KCdlbmQnKTtcbiAgICB0aGlzLnJlYWRhYmxlID0gZmFsc2U7XG4gICAgcmV0dXJuIHNpZ25hdHVyZTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHRoaXMucmVhZGFibGUgPSBmYWxzZTtcbiAgICB0aGlzLmVtaXQoJ2Vycm9yJywgZSk7XG4gICAgdGhpcy5lbWl0KCdjbG9zZScpO1xuICB9XG59O1xuXG5TaWduU3RyZWFtLnNpZ24gPSBqd3NTaWduO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNpZ25TdHJlYW07XG4iLCIndXNlIHN0cmljdCdcblxuZXhwb3J0cy5ieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aFxuZXhwb3J0cy50b0J5dGVBcnJheSA9IHRvQnl0ZUFycmF5XG5leHBvcnRzLmZyb21CeXRlQXJyYXkgPSBmcm9tQnl0ZUFycmF5XG5cbnZhciBsb29rdXAgPSBbXVxudmFyIHJldkxvb2t1cCA9IFtdXG52YXIgQXJyID0gdHlwZW9mIFVpbnQ4QXJyYXkgIT09ICd1bmRlZmluZWQnID8gVWludDhBcnJheSA6IEFycmF5XG5cbnZhciBjb2RlID0gJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky8nXG5mb3IgKHZhciBpID0gMCwgbGVuID0gY29kZS5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICBsb29rdXBbaV0gPSBjb2RlW2ldXG4gIHJldkxvb2t1cFtjb2RlLmNoYXJDb2RlQXQoaSldID0gaVxufVxuXG4vLyBTdXBwb3J0IGRlY29kaW5nIFVSTC1zYWZlIGJhc2U2NCBzdHJpbmdzLCBhcyBOb2RlLmpzIGRvZXMuXG4vLyBTZWU6IGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0Jhc2U2NCNVUkxfYXBwbGljYXRpb25zXG5yZXZMb29rdXBbJy0nLmNoYXJDb2RlQXQoMCldID0gNjJcbnJldkxvb2t1cFsnXycuY2hhckNvZGVBdCgwKV0gPSA2M1xuXG5mdW5jdGlvbiBnZXRMZW5zIChiNjQpIHtcbiAgdmFyIGxlbiA9IGI2NC5sZW5ndGhcblxuICBpZiAobGVuICUgNCA+IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgc3RyaW5nLiBMZW5ndGggbXVzdCBiZSBhIG11bHRpcGxlIG9mIDQnKVxuICB9XG5cbiAgLy8gVHJpbSBvZmYgZXh0cmEgYnl0ZXMgYWZ0ZXIgcGxhY2Vob2xkZXIgYnl0ZXMgYXJlIGZvdW5kXG4gIC8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2JlYXRnYW1taXQvYmFzZTY0LWpzL2lzc3Vlcy80MlxuICB2YXIgdmFsaWRMZW4gPSBiNjQuaW5kZXhPZignPScpXG4gIGlmICh2YWxpZExlbiA9PT0gLTEpIHZhbGlkTGVuID0gbGVuXG5cbiAgdmFyIHBsYWNlSG9sZGVyc0xlbiA9IHZhbGlkTGVuID09PSBsZW5cbiAgICA/IDBcbiAgICA6IDQgLSAodmFsaWRMZW4gJSA0KVxuXG4gIHJldHVybiBbdmFsaWRMZW4sIHBsYWNlSG9sZGVyc0xlbl1cbn1cblxuLy8gYmFzZTY0IGlzIDQvMyArIHVwIHRvIHR3byBjaGFyYWN0ZXJzIG9mIHRoZSBvcmlnaW5hbCBkYXRhXG5mdW5jdGlvbiBieXRlTGVuZ3RoIChiNjQpIHtcbiAgdmFyIGxlbnMgPSBnZXRMZW5zKGI2NClcbiAgdmFyIHZhbGlkTGVuID0gbGVuc1swXVxuICB2YXIgcGxhY2VIb2xkZXJzTGVuID0gbGVuc1sxXVxuICByZXR1cm4gKCh2YWxpZExlbiArIHBsYWNlSG9sZGVyc0xlbikgKiAzIC8gNCkgLSBwbGFjZUhvbGRlcnNMZW5cbn1cblxuZnVuY3Rpb24gX2J5dGVMZW5ndGggKGI2NCwgdmFsaWRMZW4sIHBsYWNlSG9sZGVyc0xlbikge1xuICByZXR1cm4gKCh2YWxpZExlbiArIHBsYWNlSG9sZGVyc0xlbikgKiAzIC8gNCkgLSBwbGFjZUhvbGRlcnNMZW5cbn1cblxuZnVuY3Rpb24gdG9CeXRlQXJyYXkgKGI2NCkge1xuICB2YXIgdG1wXG4gIHZhciBsZW5zID0gZ2V0TGVucyhiNjQpXG4gIHZhciB2YWxpZExlbiA9IGxlbnNbMF1cbiAgdmFyIHBsYWNlSG9sZGVyc0xlbiA9IGxlbnNbMV1cblxuICB2YXIgYXJyID0gbmV3IEFycihfYnl0ZUxlbmd0aChiNjQsIHZhbGlkTGVuLCBwbGFjZUhvbGRlcnNMZW4pKVxuXG4gIHZhciBjdXJCeXRlID0gMFxuXG4gIC8vIGlmIHRoZXJlIGFyZSBwbGFjZWhvbGRlcnMsIG9ubHkgZ2V0IHVwIHRvIHRoZSBsYXN0IGNvbXBsZXRlIDQgY2hhcnNcbiAgdmFyIGxlbiA9IHBsYWNlSG9sZGVyc0xlbiA+IDBcbiAgICA/IHZhbGlkTGVuIC0gNFxuICAgIDogdmFsaWRMZW5cblxuICB2YXIgaVxuICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDQpIHtcbiAgICB0bXAgPVxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMTgpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA8PCAxMikgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMildIDw8IDYpIHxcbiAgICAgIHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMyldXG4gICAgYXJyW2N1ckJ5dGUrK10gPSAodG1wID4+IDE2KSAmIDB4RkZcbiAgICBhcnJbY3VyQnl0ZSsrXSA9ICh0bXAgPj4gOCkgJiAweEZGXG4gICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgJiAweEZGXG4gIH1cblxuICBpZiAocGxhY2VIb2xkZXJzTGVuID09PSAyKSB7XG4gICAgdG1wID1cbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDIpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA+PiA0KVxuICAgIGFycltjdXJCeXRlKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgaWYgKHBsYWNlSG9sZGVyc0xlbiA9PT0gMSkge1xuICAgIHRtcCA9XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAxMCkgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldIDw8IDQpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDIpXSA+PiAyKVxuICAgIGFycltjdXJCeXRlKytdID0gKHRtcCA+PiA4KSAmIDB4RkZcbiAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBhcnJcbn1cblxuZnVuY3Rpb24gdHJpcGxldFRvQmFzZTY0IChudW0pIHtcbiAgcmV0dXJuIGxvb2t1cFtudW0gPj4gMTggJiAweDNGXSArXG4gICAgbG9va3VwW251bSA+PiAxMiAmIDB4M0ZdICtcbiAgICBsb29rdXBbbnVtID4+IDYgJiAweDNGXSArXG4gICAgbG9va3VwW251bSAmIDB4M0ZdXG59XG5cbmZ1bmN0aW9uIGVuY29kZUNodW5rICh1aW50OCwgc3RhcnQsIGVuZCkge1xuICB2YXIgdG1wXG4gIHZhciBvdXRwdXQgPSBbXVxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkgKz0gMykge1xuICAgIHRtcCA9XG4gICAgICAoKHVpbnQ4W2ldIDw8IDE2KSAmIDB4RkYwMDAwKSArXG4gICAgICAoKHVpbnQ4W2kgKyAxXSA8PCA4KSAmIDB4RkYwMCkgK1xuICAgICAgKHVpbnQ4W2kgKyAyXSAmIDB4RkYpXG4gICAgb3V0cHV0LnB1c2godHJpcGxldFRvQmFzZTY0KHRtcCkpXG4gIH1cbiAgcmV0dXJuIG91dHB1dC5qb2luKCcnKVxufVxuXG5mdW5jdGlvbiBmcm9tQnl0ZUFycmF5ICh1aW50OCkge1xuICB2YXIgdG1wXG4gIHZhciBsZW4gPSB1aW50OC5sZW5ndGhcbiAgdmFyIGV4dHJhQnl0ZXMgPSBsZW4gJSAzIC8vIGlmIHdlIGhhdmUgMSBieXRlIGxlZnQsIHBhZCAyIGJ5dGVzXG4gIHZhciBwYXJ0cyA9IFtdXG4gIHZhciBtYXhDaHVua0xlbmd0aCA9IDE2MzgzIC8vIG11c3QgYmUgbXVsdGlwbGUgb2YgM1xuXG4gIC8vIGdvIHRocm91Z2ggdGhlIGFycmF5IGV2ZXJ5IHRocmVlIGJ5dGVzLCB3ZSdsbCBkZWFsIHdpdGggdHJhaWxpbmcgc3R1ZmYgbGF0ZXJcbiAgZm9yICh2YXIgaSA9IDAsIGxlbjIgPSBsZW4gLSBleHRyYUJ5dGVzOyBpIDwgbGVuMjsgaSArPSBtYXhDaHVua0xlbmd0aCkge1xuICAgIHBhcnRzLnB1c2goZW5jb2RlQ2h1bmsoXG4gICAgICB1aW50OCwgaSwgKGkgKyBtYXhDaHVua0xlbmd0aCkgPiBsZW4yID8gbGVuMiA6IChpICsgbWF4Q2h1bmtMZW5ndGgpXG4gICAgKSlcbiAgfVxuXG4gIC8vIHBhZCB0aGUgZW5kIHdpdGggemVyb3MsIGJ1dCBtYWtlIHN1cmUgdG8gbm90IGZvcmdldCB0aGUgZXh0cmEgYnl0ZXNcbiAgaWYgKGV4dHJhQnl0ZXMgPT09IDEpIHtcbiAgICB0bXAgPSB1aW50OFtsZW4gLSAxXVxuICAgIHBhcnRzLnB1c2goXG4gICAgICBsb29rdXBbdG1wID4+IDJdICtcbiAgICAgIGxvb2t1cFsodG1wIDw8IDQpICYgMHgzRl0gK1xuICAgICAgJz09J1xuICAgIClcbiAgfSBlbHNlIGlmIChleHRyYUJ5dGVzID09PSAyKSB7XG4gICAgdG1wID0gKHVpbnQ4W2xlbiAtIDJdIDw8IDgpICsgdWludDhbbGVuIC0gMV1cbiAgICBwYXJ0cy5wdXNoKFxuICAgICAgbG9va3VwW3RtcCA+PiAxMF0gK1xuICAgICAgbG9va3VwWyh0bXAgPj4gNCkgJiAweDNGXSArXG4gICAgICBsb29rdXBbKHRtcCA8PCAyKSAmIDB4M0ZdICtcbiAgICAgICc9J1xuICAgIClcbiAgfVxuXG4gIHJldHVybiBwYXJ0cy5qb2luKCcnKVxufVxuIiwiZXhwb3J0cy5yZWFkID0gZnVuY3Rpb24gKGJ1ZmZlciwgb2Zmc2V0LCBpc0xFLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGUsIG1cbiAgdmFyIGVMZW4gPSAobkJ5dGVzICogOCkgLSBtTGVuIC0gMVxuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMVxuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDFcbiAgdmFyIG5CaXRzID0gLTdcbiAgdmFyIGkgPSBpc0xFID8gKG5CeXRlcyAtIDEpIDogMFxuICB2YXIgZCA9IGlzTEUgPyAtMSA6IDFcbiAgdmFyIHMgPSBidWZmZXJbb2Zmc2V0ICsgaV1cblxuICBpICs9IGRcblxuICBlID0gcyAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBzID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBlTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IGUgPSAoZSAqIDI1NikgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBtID0gZSAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBlID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBtTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IG0gPSAobSAqIDI1NikgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBpZiAoZSA9PT0gMCkge1xuICAgIGUgPSAxIC0gZUJpYXNcbiAgfSBlbHNlIGlmIChlID09PSBlTWF4KSB7XG4gICAgcmV0dXJuIG0gPyBOYU4gOiAoKHMgPyAtMSA6IDEpICogSW5maW5pdHkpXG4gIH0gZWxzZSB7XG4gICAgbSA9IG0gKyBNYXRoLnBvdygyLCBtTGVuKVxuICAgIGUgPSBlIC0gZUJpYXNcbiAgfVxuICByZXR1cm4gKHMgPyAtMSA6IDEpICogbSAqIE1hdGgucG93KDIsIGUgLSBtTGVuKVxufVxuXG5leHBvcnRzLndyaXRlID0gZnVuY3Rpb24gKGJ1ZmZlciwgdmFsdWUsIG9mZnNldCwgaXNMRSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBlLCBtLCBjXG4gIHZhciBlTGVuID0gKG5CeXRlcyAqIDgpIC0gbUxlbiAtIDFcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDFcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxXG4gIHZhciBydCA9IChtTGVuID09PSAyMyA/IE1hdGgucG93KDIsIC0yNCkgLSBNYXRoLnBvdygyLCAtNzcpIDogMClcbiAgdmFyIGkgPSBpc0xFID8gMCA6IChuQnl0ZXMgLSAxKVxuICB2YXIgZCA9IGlzTEUgPyAxIDogLTFcbiAgdmFyIHMgPSB2YWx1ZSA8IDAgfHwgKHZhbHVlID09PSAwICYmIDEgLyB2YWx1ZSA8IDApID8gMSA6IDBcblxuICB2YWx1ZSA9IE1hdGguYWJzKHZhbHVlKVxuXG4gIGlmIChpc05hTih2YWx1ZSkgfHwgdmFsdWUgPT09IEluZmluaXR5KSB7XG4gICAgbSA9IGlzTmFOKHZhbHVlKSA/IDEgOiAwXG4gICAgZSA9IGVNYXhcbiAgfSBlbHNlIHtcbiAgICBlID0gTWF0aC5mbG9vcihNYXRoLmxvZyh2YWx1ZSkgLyBNYXRoLkxOMilcbiAgICBpZiAodmFsdWUgKiAoYyA9IE1hdGgucG93KDIsIC1lKSkgPCAxKSB7XG4gICAgICBlLS1cbiAgICAgIGMgKj0gMlxuICAgIH1cbiAgICBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIHZhbHVlICs9IHJ0IC8gY1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWx1ZSArPSBydCAqIE1hdGgucG93KDIsIDEgLSBlQmlhcylcbiAgICB9XG4gICAgaWYgKHZhbHVlICogYyA+PSAyKSB7XG4gICAgICBlKytcbiAgICAgIGMgLz0gMlxuICAgIH1cblxuICAgIGlmIChlICsgZUJpYXMgPj0gZU1heCkge1xuICAgICAgbSA9IDBcbiAgICAgIGUgPSBlTWF4XG4gICAgfSBlbHNlIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgbSA9ICgodmFsdWUgKiBjKSAtIDEpICogTWF0aC5wb3coMiwgbUxlbilcbiAgICAgIGUgPSBlICsgZUJpYXNcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IHZhbHVlICogTWF0aC5wb3coMiwgZUJpYXMgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pXG4gICAgICBlID0gMFxuICAgIH1cbiAgfVxuXG4gIGZvciAoOyBtTGVuID49IDg7IGJ1ZmZlcltvZmZzZXQgKyBpXSA9IG0gJiAweGZmLCBpICs9IGQsIG0gLz0gMjU2LCBtTGVuIC09IDgpIHt9XG5cbiAgZSA9IChlIDw8IG1MZW4pIHwgbVxuICBlTGVuICs9IG1MZW5cbiAgZm9yICg7IGVMZW4gPiAwOyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBlICYgMHhmZiwgaSArPSBkLCBlIC89IDI1NiwgZUxlbiAtPSA4KSB7fVxuXG4gIGJ1ZmZlcltvZmZzZXQgKyBpIC0gZF0gfD0gcyAqIDEyOFxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXI7XG52YXIgdXRpbCA9IHJlcXVpcmUoJ3V0aWwnKTtcblxuZnVuY3Rpb24gY29weUJ1ZmZlcihzcmMsIHRhcmdldCwgb2Zmc2V0KSB7XG4gIHNyYy5jb3B5KHRhcmdldCwgb2Zmc2V0KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEJ1ZmZlckxpc3QoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEJ1ZmZlckxpc3QpO1xuXG4gICAgdGhpcy5oZWFkID0gbnVsbDtcbiAgICB0aGlzLnRhaWwgPSBudWxsO1xuICAgIHRoaXMubGVuZ3RoID0gMDtcbiAgfVxuXG4gIEJ1ZmZlckxpc3QucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbiBwdXNoKHYpIHtcbiAgICB2YXIgZW50cnkgPSB7IGRhdGE6IHYsIG5leHQ6IG51bGwgfTtcbiAgICBpZiAodGhpcy5sZW5ndGggPiAwKSB0aGlzLnRhaWwubmV4dCA9IGVudHJ5O2Vsc2UgdGhpcy5oZWFkID0gZW50cnk7XG4gICAgdGhpcy50YWlsID0gZW50cnk7XG4gICAgKyt0aGlzLmxlbmd0aDtcbiAgfTtcblxuICBCdWZmZXJMaXN0LnByb3RvdHlwZS51bnNoaWZ0ID0gZnVuY3Rpb24gdW5zaGlmdCh2KSB7XG4gICAgdmFyIGVudHJ5ID0geyBkYXRhOiB2LCBuZXh0OiB0aGlzLmhlYWQgfTtcbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDApIHRoaXMudGFpbCA9IGVudHJ5O1xuICAgIHRoaXMuaGVhZCA9IGVudHJ5O1xuICAgICsrdGhpcy5sZW5ndGg7XG4gIH07XG5cbiAgQnVmZmVyTGlzdC5wcm90b3R5cGUuc2hpZnQgPSBmdW5jdGlvbiBzaGlmdCgpIHtcbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDApIHJldHVybjtcbiAgICB2YXIgcmV0ID0gdGhpcy5oZWFkLmRhdGE7XG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAxKSB0aGlzLmhlYWQgPSB0aGlzLnRhaWwgPSBudWxsO2Vsc2UgdGhpcy5oZWFkID0gdGhpcy5oZWFkLm5leHQ7XG4gICAgLS10aGlzLmxlbmd0aDtcbiAgICByZXR1cm4gcmV0O1xuICB9O1xuXG4gIEJ1ZmZlckxpc3QucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gY2xlYXIoKSB7XG4gICAgdGhpcy5oZWFkID0gdGhpcy50YWlsID0gbnVsbDtcbiAgICB0aGlzLmxlbmd0aCA9IDA7XG4gIH07XG5cbiAgQnVmZmVyTGlzdC5wcm90b3R5cGUuam9pbiA9IGZ1bmN0aW9uIGpvaW4ocykge1xuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkgcmV0dXJuICcnO1xuICAgIHZhciBwID0gdGhpcy5oZWFkO1xuICAgIHZhciByZXQgPSAnJyArIHAuZGF0YTtcbiAgICB3aGlsZSAocCA9IHAubmV4dCkge1xuICAgICAgcmV0ICs9IHMgKyBwLmRhdGE7XG4gICAgfXJldHVybiByZXQ7XG4gIH07XG5cbiAgQnVmZmVyTGlzdC5wcm90b3R5cGUuY29uY2F0ID0gZnVuY3Rpb24gY29uY2F0KG4pIHtcbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDApIHJldHVybiBCdWZmZXIuYWxsb2MoMCk7XG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAxKSByZXR1cm4gdGhpcy5oZWFkLmRhdGE7XG4gICAgdmFyIHJldCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShuID4+PiAwKTtcbiAgICB2YXIgcCA9IHRoaXMuaGVhZDtcbiAgICB2YXIgaSA9IDA7XG4gICAgd2hpbGUgKHApIHtcbiAgICAgIGNvcHlCdWZmZXIocC5kYXRhLCByZXQsIGkpO1xuICAgICAgaSArPSBwLmRhdGEubGVuZ3RoO1xuICAgICAgcCA9IHAubmV4dDtcbiAgICB9XG4gICAgcmV0dXJuIHJldDtcbiAgfTtcblxuICByZXR1cm4gQnVmZmVyTGlzdDtcbn0oKTtcblxuaWYgKHV0aWwgJiYgdXRpbC5pbnNwZWN0ICYmIHV0aWwuaW5zcGVjdC5jdXN0b20pIHtcbiAgbW9kdWxlLmV4cG9ydHMucHJvdG90eXBlW3V0aWwuaW5zcGVjdC5jdXN0b21dID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBvYmogPSB1dGlsLmluc3BlY3QoeyBsZW5ndGg6IHRoaXMubGVuZ3RoIH0pO1xuICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLm5hbWUgKyAnICcgKyBvYmo7XG4gIH07XG59IiwidmFyIHNjb3BlID0gKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgJiYgZ2xvYmFsKSB8fFxuICAgICAgICAgICAgKHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiICYmIHNlbGYpIHx8XG4gICAgICAgICAgICB3aW5kb3c7XG52YXIgYXBwbHkgPSBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHk7XG5cbi8vIERPTSBBUElzLCBmb3IgY29tcGxldGVuZXNzXG5cbmV4cG9ydHMuc2V0VGltZW91dCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFRpbWVvdXQoYXBwbHkuY2FsbChzZXRUaW1lb3V0LCBzY29wZSwgYXJndW1lbnRzKSwgY2xlYXJUaW1lb3V0KTtcbn07XG5leHBvcnRzLnNldEludGVydmFsID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgVGltZW91dChhcHBseS5jYWxsKHNldEludGVydmFsLCBzY29wZSwgYXJndW1lbnRzKSwgY2xlYXJJbnRlcnZhbCk7XG59O1xuZXhwb3J0cy5jbGVhclRpbWVvdXQgPVxuZXhwb3J0cy5jbGVhckludGVydmFsID0gZnVuY3Rpb24odGltZW91dCkge1xuICBpZiAodGltZW91dCkge1xuICAgIHRpbWVvdXQuY2xvc2UoKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gVGltZW91dChpZCwgY2xlYXJGbikge1xuICB0aGlzLl9pZCA9IGlkO1xuICB0aGlzLl9jbGVhckZuID0gY2xlYXJGbjtcbn1cblRpbWVvdXQucHJvdG90eXBlLnVucmVmID0gVGltZW91dC5wcm90b3R5cGUucmVmID0gZnVuY3Rpb24oKSB7fTtcblRpbWVvdXQucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuX2NsZWFyRm4uY2FsbChzY29wZSwgdGhpcy5faWQpO1xufTtcblxuLy8gRG9lcyBub3Qgc3RhcnQgdGhlIHRpbWUsIGp1c3Qgc2V0cyB1cCB0aGUgbWVtYmVycyBuZWVkZWQuXG5leHBvcnRzLmVucm9sbCA9IGZ1bmN0aW9uKGl0ZW0sIG1zZWNzKSB7XG4gIGNsZWFyVGltZW91dChpdGVtLl9pZGxlVGltZW91dElkKTtcbiAgaXRlbS5faWRsZVRpbWVvdXQgPSBtc2Vjcztcbn07XG5cbmV4cG9ydHMudW5lbnJvbGwgPSBmdW5jdGlvbihpdGVtKSB7XG4gIGNsZWFyVGltZW91dChpdGVtLl9pZGxlVGltZW91dElkKTtcbiAgaXRlbS5faWRsZVRpbWVvdXQgPSAtMTtcbn07XG5cbmV4cG9ydHMuX3VucmVmQWN0aXZlID0gZXhwb3J0cy5hY3RpdmUgPSBmdW5jdGlvbihpdGVtKSB7XG4gIGNsZWFyVGltZW91dChpdGVtLl9pZGxlVGltZW91dElkKTtcblxuICB2YXIgbXNlY3MgPSBpdGVtLl9pZGxlVGltZW91dDtcbiAgaWYgKG1zZWNzID49IDApIHtcbiAgICBpdGVtLl9pZGxlVGltZW91dElkID0gc2V0VGltZW91dChmdW5jdGlvbiBvblRpbWVvdXQoKSB7XG4gICAgICBpZiAoaXRlbS5fb25UaW1lb3V0KVxuICAgICAgICBpdGVtLl9vblRpbWVvdXQoKTtcbiAgICB9LCBtc2Vjcyk7XG4gIH1cbn07XG5cbi8vIHNldGltbWVkaWF0ZSBhdHRhY2hlcyBpdHNlbGYgdG8gdGhlIGdsb2JhbCBvYmplY3RcbnJlcXVpcmUoXCJzZXRpbW1lZGlhdGVcIik7XG4vLyBPbiBzb21lIGV4b3RpYyBlbnZpcm9ubWVudHMsIGl0J3Mgbm90IGNsZWFyIHdoaWNoIG9iamVjdCBgc2V0aW1tZWRpYXRlYCB3YXNcbi8vIGFibGUgdG8gaW5zdGFsbCBvbnRvLiAgU2VhcmNoIGVhY2ggcG9zc2liaWxpdHkgaW4gdGhlIHNhbWUgb3JkZXIgYXMgdGhlXG4vLyBgc2V0aW1tZWRpYXRlYCBsaWJyYXJ5LlxuZXhwb3J0cy5zZXRJbW1lZGlhdGUgPSAodHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgJiYgc2VsZi5zZXRJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICh0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiICYmIGdsb2JhbC5zZXRJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICh0aGlzICYmIHRoaXMuc2V0SW1tZWRpYXRlKTtcbmV4cG9ydHMuY2xlYXJJbW1lZGlhdGUgPSAodHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgJiYgc2VsZi5jbGVhckltbWVkaWF0ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAodHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBnbG9iYWwuY2xlYXJJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMgJiYgdGhpcy5jbGVhckltbWVkaWF0ZSk7XG4iLCIoZnVuY3Rpb24gKGdsb2JhbCwgdW5kZWZpbmVkKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgICBpZiAoZ2xvYmFsLnNldEltbWVkaWF0ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIG5leHRIYW5kbGUgPSAxOyAvLyBTcGVjIHNheXMgZ3JlYXRlciB0aGFuIHplcm9cbiAgICB2YXIgdGFza3NCeUhhbmRsZSA9IHt9O1xuICAgIHZhciBjdXJyZW50bHlSdW5uaW5nQVRhc2sgPSBmYWxzZTtcbiAgICB2YXIgZG9jID0gZ2xvYmFsLmRvY3VtZW50O1xuICAgIHZhciByZWdpc3RlckltbWVkaWF0ZTtcblxuICAgIGZ1bmN0aW9uIHNldEltbWVkaWF0ZShjYWxsYmFjaykge1xuICAgICAgLy8gQ2FsbGJhY2sgY2FuIGVpdGhlciBiZSBhIGZ1bmN0aW9uIG9yIGEgc3RyaW5nXG4gICAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgY2FsbGJhY2sgPSBuZXcgRnVuY3Rpb24oXCJcIiArIGNhbGxiYWNrKTtcbiAgICAgIH1cbiAgICAgIC8vIENvcHkgZnVuY3Rpb24gYXJndW1lbnRzXG4gICAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBhcmdzW2ldID0gYXJndW1lbnRzW2kgKyAxXTtcbiAgICAgIH1cbiAgICAgIC8vIFN0b3JlIGFuZCByZWdpc3RlciB0aGUgdGFza1xuICAgICAgdmFyIHRhc2sgPSB7IGNhbGxiYWNrOiBjYWxsYmFjaywgYXJnczogYXJncyB9O1xuICAgICAgdGFza3NCeUhhbmRsZVtuZXh0SGFuZGxlXSA9IHRhc2s7XG4gICAgICByZWdpc3RlckltbWVkaWF0ZShuZXh0SGFuZGxlKTtcbiAgICAgIHJldHVybiBuZXh0SGFuZGxlKys7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2xlYXJJbW1lZGlhdGUoaGFuZGxlKSB7XG4gICAgICAgIGRlbGV0ZSB0YXNrc0J5SGFuZGxlW2hhbmRsZV07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcnVuKHRhc2spIHtcbiAgICAgICAgdmFyIGNhbGxiYWNrID0gdGFzay5jYWxsYmFjaztcbiAgICAgICAgdmFyIGFyZ3MgPSB0YXNrLmFyZ3M7XG4gICAgICAgIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICBjYWxsYmFjayhhcmdzWzBdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICBjYWxsYmFjayhhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICBjYWxsYmFjayhhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgY2FsbGJhY2suYXBwbHkodW5kZWZpbmVkLCBhcmdzKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcnVuSWZQcmVzZW50KGhhbmRsZSkge1xuICAgICAgICAvLyBGcm9tIHRoZSBzcGVjOiBcIldhaXQgdW50aWwgYW55IGludm9jYXRpb25zIG9mIHRoaXMgYWxnb3JpdGhtIHN0YXJ0ZWQgYmVmb3JlIHRoaXMgb25lIGhhdmUgY29tcGxldGVkLlwiXG4gICAgICAgIC8vIFNvIGlmIHdlJ3JlIGN1cnJlbnRseSBydW5uaW5nIGEgdGFzaywgd2UnbGwgbmVlZCB0byBkZWxheSB0aGlzIGludm9jYXRpb24uXG4gICAgICAgIGlmIChjdXJyZW50bHlSdW5uaW5nQVRhc2spIHtcbiAgICAgICAgICAgIC8vIERlbGF5IGJ5IGRvaW5nIGEgc2V0VGltZW91dC4gc2V0SW1tZWRpYXRlIHdhcyB0cmllZCBpbnN0ZWFkLCBidXQgaW4gRmlyZWZveCA3IGl0IGdlbmVyYXRlZCBhXG4gICAgICAgICAgICAvLyBcInRvbyBtdWNoIHJlY3Vyc2lvblwiIGVycm9yLlxuICAgICAgICAgICAgc2V0VGltZW91dChydW5JZlByZXNlbnQsIDAsIGhhbmRsZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgdGFzayA9IHRhc2tzQnlIYW5kbGVbaGFuZGxlXTtcbiAgICAgICAgICAgIGlmICh0YXNrKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudGx5UnVubmluZ0FUYXNrID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBydW4odGFzayk7XG4gICAgICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgY2xlYXJJbW1lZGlhdGUoaGFuZGxlKTtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudGx5UnVubmluZ0FUYXNrID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zdGFsbE5leHRUaWNrSW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgICAgICAgICBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uICgpIHsgcnVuSWZQcmVzZW50KGhhbmRsZSk7IH0pO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNhblVzZVBvc3RNZXNzYWdlKCkge1xuICAgICAgICAvLyBUaGUgdGVzdCBhZ2FpbnN0IGBpbXBvcnRTY3JpcHRzYCBwcmV2ZW50cyB0aGlzIGltcGxlbWVudGF0aW9uIGZyb20gYmVpbmcgaW5zdGFsbGVkIGluc2lkZSBhIHdlYiB3b3JrZXIsXG4gICAgICAgIC8vIHdoZXJlIGBnbG9iYWwucG9zdE1lc3NhZ2VgIG1lYW5zIHNvbWV0aGluZyBjb21wbGV0ZWx5IGRpZmZlcmVudCBhbmQgY2FuJ3QgYmUgdXNlZCBmb3IgdGhpcyBwdXJwb3NlLlxuICAgICAgICBpZiAoZ2xvYmFsLnBvc3RNZXNzYWdlICYmICFnbG9iYWwuaW1wb3J0U2NyaXB0cykge1xuICAgICAgICAgICAgdmFyIHBvc3RNZXNzYWdlSXNBc3luY2hyb25vdXMgPSB0cnVlO1xuICAgICAgICAgICAgdmFyIG9sZE9uTWVzc2FnZSA9IGdsb2JhbC5vbm1lc3NhZ2U7XG4gICAgICAgICAgICBnbG9iYWwub25tZXNzYWdlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcG9zdE1lc3NhZ2VJc0FzeW5jaHJvbm91cyA9IGZhbHNlO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGdsb2JhbC5wb3N0TWVzc2FnZShcIlwiLCBcIipcIik7XG4gICAgICAgICAgICBnbG9iYWwub25tZXNzYWdlID0gb2xkT25NZXNzYWdlO1xuICAgICAgICAgICAgcmV0dXJuIHBvc3RNZXNzYWdlSXNBc3luY2hyb25vdXM7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnN0YWxsUG9zdE1lc3NhZ2VJbXBsZW1lbnRhdGlvbigpIHtcbiAgICAgICAgLy8gSW5zdGFsbHMgYW4gZXZlbnQgaGFuZGxlciBvbiBgZ2xvYmFsYCBmb3IgdGhlIGBtZXNzYWdlYCBldmVudDogc2VlXG4gICAgICAgIC8vICogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vRE9NL3dpbmRvdy5wb3N0TWVzc2FnZVxuICAgICAgICAvLyAqIGh0dHA6Ly93d3cud2hhdHdnLm9yZy9zcGVjcy93ZWItYXBwcy9jdXJyZW50LXdvcmsvbXVsdGlwYWdlL2NvbW1zLmh0bWwjY3Jvc3NEb2N1bWVudE1lc3NhZ2VzXG5cbiAgICAgICAgdmFyIG1lc3NhZ2VQcmVmaXggPSBcInNldEltbWVkaWF0ZSRcIiArIE1hdGgucmFuZG9tKCkgKyBcIiRcIjtcbiAgICAgICAgdmFyIG9uR2xvYmFsTWVzc2FnZSA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICBpZiAoZXZlbnQuc291cmNlID09PSBnbG9iYWwgJiZcbiAgICAgICAgICAgICAgICB0eXBlb2YgZXZlbnQuZGF0YSA9PT0gXCJzdHJpbmdcIiAmJlxuICAgICAgICAgICAgICAgIGV2ZW50LmRhdGEuaW5kZXhPZihtZXNzYWdlUHJlZml4KSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJ1bklmUHJlc2VudCgrZXZlbnQuZGF0YS5zbGljZShtZXNzYWdlUHJlZml4Lmxlbmd0aCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgICAgICAgICAgZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsIG9uR2xvYmFsTWVzc2FnZSwgZmFsc2UpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZ2xvYmFsLmF0dGFjaEV2ZW50KFwib25tZXNzYWdlXCIsIG9uR2xvYmFsTWVzc2FnZSk7XG4gICAgICAgIH1cblxuICAgICAgICByZWdpc3RlckltbWVkaWF0ZSA9IGZ1bmN0aW9uKGhhbmRsZSkge1xuICAgICAgICAgICAgZ2xvYmFsLnBvc3RNZXNzYWdlKG1lc3NhZ2VQcmVmaXggKyBoYW5kbGUsIFwiKlwiKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnN0YWxsTWVzc2FnZUNoYW5uZWxJbXBsZW1lbnRhdGlvbigpIHtcbiAgICAgICAgdmFyIGNoYW5uZWwgPSBuZXcgTWVzc2FnZUNoYW5uZWwoKTtcbiAgICAgICAgY2hhbm5lbC5wb3J0MS5vbm1lc3NhZ2UgPSBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgdmFyIGhhbmRsZSA9IGV2ZW50LmRhdGE7XG4gICAgICAgICAgICBydW5JZlByZXNlbnQoaGFuZGxlKTtcbiAgICAgICAgfTtcblxuICAgICAgICByZWdpc3RlckltbWVkaWF0ZSA9IGZ1bmN0aW9uKGhhbmRsZSkge1xuICAgICAgICAgICAgY2hhbm5lbC5wb3J0Mi5wb3N0TWVzc2FnZShoYW5kbGUpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbGxSZWFkeVN0YXRlQ2hhbmdlSW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIHZhciBodG1sID0gZG9jLmRvY3VtZW50RWxlbWVudDtcbiAgICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUgPSBmdW5jdGlvbihoYW5kbGUpIHtcbiAgICAgICAgICAgIC8vIENyZWF0ZSBhIDxzY3JpcHQ+IGVsZW1lbnQ7IGl0cyByZWFkeXN0YXRlY2hhbmdlIGV2ZW50IHdpbGwgYmUgZmlyZWQgYXN5bmNocm9ub3VzbHkgb25jZSBpdCBpcyBpbnNlcnRlZFxuICAgICAgICAgICAgLy8gaW50byB0aGUgZG9jdW1lbnQuIERvIHNvLCB0aHVzIHF1ZXVpbmcgdXAgdGhlIHRhc2suIFJlbWVtYmVyIHRvIGNsZWFuIHVwIG9uY2UgaXQncyBiZWVuIGNhbGxlZC5cbiAgICAgICAgICAgIHZhciBzY3JpcHQgPSBkb2MuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKTtcbiAgICAgICAgICAgIHNjcmlwdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcnVuSWZQcmVzZW50KGhhbmRsZSk7XG4gICAgICAgICAgICAgICAgc2NyaXB0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgaHRtbC5yZW1vdmVDaGlsZChzY3JpcHQpO1xuICAgICAgICAgICAgICAgIHNjcmlwdCA9IG51bGw7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaHRtbC5hcHBlbmRDaGlsZChzY3JpcHQpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbGxTZXRUaW1lb3V0SW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KHJ1bklmUHJlc2VudCwgMCwgaGFuZGxlKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBJZiBzdXBwb3J0ZWQsIHdlIHNob3VsZCBhdHRhY2ggdG8gdGhlIHByb3RvdHlwZSBvZiBnbG9iYWwsIHNpbmNlIHRoYXQgaXMgd2hlcmUgc2V0VGltZW91dCBldCBhbC4gbGl2ZS5cbiAgICB2YXIgYXR0YWNoVG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YgJiYgT2JqZWN0LmdldFByb3RvdHlwZU9mKGdsb2JhbCk7XG4gICAgYXR0YWNoVG8gPSBhdHRhY2hUbyAmJiBhdHRhY2hUby5zZXRUaW1lb3V0ID8gYXR0YWNoVG8gOiBnbG9iYWw7XG5cbiAgICAvLyBEb24ndCBnZXQgZm9vbGVkIGJ5IGUuZy4gYnJvd3NlcmlmeSBlbnZpcm9ubWVudHMuXG4gICAgaWYgKHt9LnRvU3RyaW5nLmNhbGwoZ2xvYmFsLnByb2Nlc3MpID09PSBcIltvYmplY3QgcHJvY2Vzc11cIikge1xuICAgICAgICAvLyBGb3IgTm9kZS5qcyBiZWZvcmUgMC45XG4gICAgICAgIGluc3RhbGxOZXh0VGlja0ltcGxlbWVudGF0aW9uKCk7XG5cbiAgICB9IGVsc2UgaWYgKGNhblVzZVBvc3RNZXNzYWdlKCkpIHtcbiAgICAgICAgLy8gRm9yIG5vbi1JRTEwIG1vZGVybiBicm93c2Vyc1xuICAgICAgICBpbnN0YWxsUG9zdE1lc3NhZ2VJbXBsZW1lbnRhdGlvbigpO1xuXG4gICAgfSBlbHNlIGlmIChnbG9iYWwuTWVzc2FnZUNoYW5uZWwpIHtcbiAgICAgICAgLy8gRm9yIHdlYiB3b3JrZXJzLCB3aGVyZSBzdXBwb3J0ZWRcbiAgICAgICAgaW5zdGFsbE1lc3NhZ2VDaGFubmVsSW1wbGVtZW50YXRpb24oKTtcblxuICAgIH0gZWxzZSBpZiAoZG9jICYmIFwib25yZWFkeXN0YXRlY2hhbmdlXCIgaW4gZG9jLmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIikpIHtcbiAgICAgICAgLy8gRm9yIElFIDbigJM4XG4gICAgICAgIGluc3RhbGxSZWFkeVN0YXRlQ2hhbmdlSW1wbGVtZW50YXRpb24oKTtcblxuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEZvciBvbGRlciBicm93c2Vyc1xuICAgICAgICBpbnN0YWxsU2V0VGltZW91dEltcGxlbWVudGF0aW9uKCk7XG4gICAgfVxuXG4gICAgYXR0YWNoVG8uc2V0SW1tZWRpYXRlID0gc2V0SW1tZWRpYXRlO1xuICAgIGF0dGFjaFRvLmNsZWFySW1tZWRpYXRlID0gY2xlYXJJbW1lZGlhdGU7XG59KHR5cGVvZiBzZWxmID09PSBcInVuZGVmaW5lZFwiID8gdHlwZW9mIGdsb2JhbCA9PT0gXCJ1bmRlZmluZWRcIiA/IHRoaXMgOiBnbG9iYWwgOiBzZWxmKSk7XG4iLCJcbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBkZXByZWNhdGU7XG5cbi8qKlxuICogTWFyayB0aGF0IGEgbWV0aG9kIHNob3VsZCBub3QgYmUgdXNlZC5cbiAqIFJldHVybnMgYSBtb2RpZmllZCBmdW5jdGlvbiB3aGljaCB3YXJucyBvbmNlIGJ5IGRlZmF1bHQuXG4gKlxuICogSWYgYGxvY2FsU3RvcmFnZS5ub0RlcHJlY2F0aW9uID0gdHJ1ZWAgaXMgc2V0LCB0aGVuIGl0IGlzIGEgbm8tb3AuXG4gKlxuICogSWYgYGxvY2FsU3RvcmFnZS50aHJvd0RlcHJlY2F0aW9uID0gdHJ1ZWAgaXMgc2V0LCB0aGVuIGRlcHJlY2F0ZWQgZnVuY3Rpb25zXG4gKiB3aWxsIHRocm93IGFuIEVycm9yIHdoZW4gaW52b2tlZC5cbiAqXG4gKiBJZiBgbG9jYWxTdG9yYWdlLnRyYWNlRGVwcmVjYXRpb24gPSB0cnVlYCBpcyBzZXQsIHRoZW4gZGVwcmVjYXRlZCBmdW5jdGlvbnNcbiAqIHdpbGwgaW52b2tlIGBjb25zb2xlLnRyYWNlKClgIGluc3RlYWQgb2YgYGNvbnNvbGUuZXJyb3IoKWAuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gLSB0aGUgZnVuY3Rpb24gdG8gZGVwcmVjYXRlXG4gKiBAcGFyYW0ge1N0cmluZ30gbXNnIC0gdGhlIHN0cmluZyB0byBwcmludCB0byB0aGUgY29uc29sZSB3aGVuIGBmbmAgaXMgaW52b2tlZFxuICogQHJldHVybnMge0Z1bmN0aW9ufSBhIG5ldyBcImRlcHJlY2F0ZWRcIiB2ZXJzaW9uIG9mIGBmbmBcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gZGVwcmVjYXRlIChmbiwgbXNnKSB7XG4gIGlmIChjb25maWcoJ25vRGVwcmVjYXRpb24nKSkge1xuICAgIHJldHVybiBmbjtcbiAgfVxuXG4gIHZhciB3YXJuZWQgPSBmYWxzZTtcbiAgZnVuY3Rpb24gZGVwcmVjYXRlZCgpIHtcbiAgICBpZiAoIXdhcm5lZCkge1xuICAgICAgaWYgKGNvbmZpZygndGhyb3dEZXByZWNhdGlvbicpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihtc2cpO1xuICAgICAgfSBlbHNlIGlmIChjb25maWcoJ3RyYWNlRGVwcmVjYXRpb24nKSkge1xuICAgICAgICBjb25zb2xlLnRyYWNlKG1zZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLndhcm4obXNnKTtcbiAgICAgIH1cbiAgICAgIHdhcm5lZCA9IHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgcmV0dXJuIGRlcHJlY2F0ZWQ7XG59XG5cbi8qKlxuICogQ2hlY2tzIGBsb2NhbFN0b3JhZ2VgIGZvciBib29sZWFuIHZhbHVlcyBmb3IgdGhlIGdpdmVuIGBuYW1lYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZVxuICogQHJldHVybnMge0Jvb2xlYW59XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBjb25maWcgKG5hbWUpIHtcbiAgLy8gYWNjZXNzaW5nIGdsb2JhbC5sb2NhbFN0b3JhZ2UgY2FuIHRyaWdnZXIgYSBET01FeGNlcHRpb24gaW4gc2FuZGJveGVkIGlmcmFtZXNcbiAgdHJ5IHtcbiAgICBpZiAoIWdsb2JhbC5sb2NhbFN0b3JhZ2UpIHJldHVybiBmYWxzZTtcbiAgfSBjYXRjaCAoXykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgdmFsID0gZ2xvYmFsLmxvY2FsU3RvcmFnZVtuYW1lXTtcbiAgaWYgKG51bGwgPT0gdmFsKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiBTdHJpbmcodmFsKS50b0xvd2VyQ2FzZSgpID09PSAndHJ1ZSc7XG59XG4iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuLy8gYSBwYXNzdGhyb3VnaCBzdHJlYW0uXG4vLyBiYXNpY2FsbHkganVzdCB0aGUgbW9zdCBtaW5pbWFsIHNvcnQgb2YgVHJhbnNmb3JtIHN0cmVhbS5cbi8vIEV2ZXJ5IHdyaXR0ZW4gY2h1bmsgZ2V0cyBvdXRwdXQgYXMtaXMuXG5cbid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBQYXNzVGhyb3VnaDtcblxudmFyIFRyYW5zZm9ybSA9IHJlcXVpcmUoJy4vX3N0cmVhbV90cmFuc2Zvcm0nKTtcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciB1dGlsID0gcmVxdWlyZSgnY29yZS11dGlsLWlzJyk7XG51dGlsLmluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG51dGlsLmluaGVyaXRzKFBhc3NUaHJvdWdoLCBUcmFuc2Zvcm0pO1xuXG5mdW5jdGlvbiBQYXNzVGhyb3VnaChvcHRpb25zKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBQYXNzVGhyb3VnaCkpIHJldHVybiBuZXcgUGFzc1Rocm91Z2gob3B0aW9ucyk7XG5cbiAgVHJhbnNmb3JtLmNhbGwodGhpcywgb3B0aW9ucyk7XG59XG5cblBhc3NUaHJvdWdoLnByb3RvdHlwZS5fdHJhbnNmb3JtID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgY2IobnVsbCwgY2h1bmspO1xufTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbGliL19zdHJlYW1fd3JpdGFibGUuanMnKTtcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9saWIvX3N0cmVhbV9kdXBsZXguanMnKTtcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9yZWFkYWJsZScpLlRyYW5zZm9ybVxuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL3JlYWRhYmxlJykuUGFzc1Rocm91Z2hcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNCdWZmZXIoYXJnKSB7XG4gIHJldHVybiBhcmcgJiYgdHlwZW9mIGFyZyA9PT0gJ29iamVjdCdcbiAgICAmJiB0eXBlb2YgYXJnLmNvcHkgPT09ICdmdW5jdGlvbidcbiAgICAmJiB0eXBlb2YgYXJnLmZpbGwgPT09ICdmdW5jdGlvbidcbiAgICAmJiB0eXBlb2YgYXJnLnJlYWRVSW50OCA9PT0gJ2Z1bmN0aW9uJztcbn0iLCIvKmpzaGludCBub2RlOnRydWUgKi9cbid1c2Ugc3RyaWN0JztcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdidWZmZXInKS5CdWZmZXI7IC8vIGJyb3dzZXJpZnlcbnZhciBTbG93QnVmZmVyID0gcmVxdWlyZSgnYnVmZmVyJykuU2xvd0J1ZmZlcjtcblxubW9kdWxlLmV4cG9ydHMgPSBidWZmZXJFcTtcblxuZnVuY3Rpb24gYnVmZmVyRXEoYSwgYikge1xuXG4gIC8vIHNob3J0Y3V0dGluZyBvbiB0eXBlIGlzIG5lY2Vzc2FyeSBmb3IgY29ycmVjdG5lc3NcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYSkgfHwgIUJ1ZmZlci5pc0J1ZmZlcihiKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8vIGJ1ZmZlciBzaXplcyBzaG91bGQgYmUgd2VsbC1rbm93biBpbmZvcm1hdGlvbiwgc28gZGVzcGl0ZSB0aGlzXG4gIC8vIHNob3J0Y3V0dGluZywgaXQgZG9lc24ndCBsZWFrIGFueSBpbmZvcm1hdGlvbiBhYm91dCB0aGUgKmNvbnRlbnRzKiBvZiB0aGVcbiAgLy8gYnVmZmVycy5cbiAgaWYgKGEubGVuZ3RoICE9PSBiLmxlbmd0aCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBjID0gMDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgLypqc2hpbnQgYml0d2lzZTpmYWxzZSAqL1xuICAgIGMgfD0gYVtpXSBeIGJbaV07IC8vIFhPUlxuICB9XG4gIHJldHVybiBjID09PSAwO1xufVxuXG5idWZmZXJFcS5pbnN0YWxsID0gZnVuY3Rpb24oKSB7XG4gIEJ1ZmZlci5wcm90b3R5cGUuZXF1YWwgPSBTbG93QnVmZmVyLnByb3RvdHlwZS5lcXVhbCA9IGZ1bmN0aW9uIGVxdWFsKHRoYXQpIHtcbiAgICByZXR1cm4gYnVmZmVyRXEodGhpcywgdGhhdCk7XG4gIH07XG59O1xuXG52YXIgb3JpZ0J1ZkVxdWFsID0gQnVmZmVyLnByb3RvdHlwZS5lcXVhbDtcbnZhciBvcmlnU2xvd0J1ZkVxdWFsID0gU2xvd0J1ZmZlci5wcm90b3R5cGUuZXF1YWw7XG5idWZmZXJFcS5yZXN0b3JlID0gZnVuY3Rpb24oKSB7XG4gIEJ1ZmZlci5wcm90b3R5cGUuZXF1YWwgPSBvcmlnQnVmRXF1YWw7XG4gIFNsb3dCdWZmZXIucHJvdG90eXBlLmVxdWFsID0gb3JpZ1Nsb3dCdWZFcXVhbDtcbn07XG4iLCIndXNlIHN0cmljdCdcblxuZXhwb3J0cy5yYW5kb21CeXRlcyA9IGV4cG9ydHMucm5nID0gZXhwb3J0cy5wc2V1ZG9SYW5kb21CeXRlcyA9IGV4cG9ydHMucHJuZyA9IHJlcXVpcmUoJ3JhbmRvbWJ5dGVzJylcbmV4cG9ydHMuY3JlYXRlSGFzaCA9IGV4cG9ydHMuSGFzaCA9IHJlcXVpcmUoJ2NyZWF0ZS1oYXNoJylcbmV4cG9ydHMuY3JlYXRlSG1hYyA9IGV4cG9ydHMuSG1hYyA9IHJlcXVpcmUoJ2NyZWF0ZS1obWFjJylcblxudmFyIGFsZ29zID0gcmVxdWlyZSgnYnJvd3NlcmlmeS1zaWduL2FsZ29zJylcbnZhciBhbGdvS2V5cyA9IE9iamVjdC5rZXlzKGFsZ29zKVxudmFyIGhhc2hlcyA9IFsnc2hhMScsICdzaGEyMjQnLCAnc2hhMjU2JywgJ3NoYTM4NCcsICdzaGE1MTInLCAnbWQ1JywgJ3JtZDE2MCddLmNvbmNhdChhbGdvS2V5cylcbmV4cG9ydHMuZ2V0SGFzaGVzID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gaGFzaGVzXG59XG5cbnZhciBwID0gcmVxdWlyZSgncGJrZGYyJylcbmV4cG9ydHMucGJrZGYyID0gcC5wYmtkZjJcbmV4cG9ydHMucGJrZGYyU3luYyA9IHAucGJrZGYyU3luY1xuXG52YXIgYWVzID0gcmVxdWlyZSgnYnJvd3NlcmlmeS1jaXBoZXInKVxuXG5leHBvcnRzLkNpcGhlciA9IGFlcy5DaXBoZXJcbmV4cG9ydHMuY3JlYXRlQ2lwaGVyID0gYWVzLmNyZWF0ZUNpcGhlclxuZXhwb3J0cy5DaXBoZXJpdiA9IGFlcy5DaXBoZXJpdlxuZXhwb3J0cy5jcmVhdGVDaXBoZXJpdiA9IGFlcy5jcmVhdGVDaXBoZXJpdlxuZXhwb3J0cy5EZWNpcGhlciA9IGFlcy5EZWNpcGhlclxuZXhwb3J0cy5jcmVhdGVEZWNpcGhlciA9IGFlcy5jcmVhdGVEZWNpcGhlclxuZXhwb3J0cy5EZWNpcGhlcml2ID0gYWVzLkRlY2lwaGVyaXZcbmV4cG9ydHMuY3JlYXRlRGVjaXBoZXJpdiA9IGFlcy5jcmVhdGVEZWNpcGhlcml2XG5leHBvcnRzLmdldENpcGhlcnMgPSBhZXMuZ2V0Q2lwaGVyc1xuZXhwb3J0cy5saXN0Q2lwaGVycyA9IGFlcy5saXN0Q2lwaGVyc1xuXG52YXIgZGggPSByZXF1aXJlKCdkaWZmaWUtaGVsbG1hbicpXG5cbmV4cG9ydHMuRGlmZmllSGVsbG1hbkdyb3VwID0gZGguRGlmZmllSGVsbG1hbkdyb3VwXG5leHBvcnRzLmNyZWF0ZURpZmZpZUhlbGxtYW5Hcm91cCA9IGRoLmNyZWF0ZURpZmZpZUhlbGxtYW5Hcm91cFxuZXhwb3J0cy5nZXREaWZmaWVIZWxsbWFuID0gZGguZ2V0RGlmZmllSGVsbG1hblxuZXhwb3J0cy5jcmVhdGVEaWZmaWVIZWxsbWFuID0gZGguY3JlYXRlRGlmZmllSGVsbG1hblxuZXhwb3J0cy5EaWZmaWVIZWxsbWFuID0gZGguRGlmZmllSGVsbG1hblxuXG52YXIgc2lnbiA9IHJlcXVpcmUoJ2Jyb3dzZXJpZnktc2lnbicpXG5cbmV4cG9ydHMuY3JlYXRlU2lnbiA9IHNpZ24uY3JlYXRlU2lnblxuZXhwb3J0cy5TaWduID0gc2lnbi5TaWduXG5leHBvcnRzLmNyZWF0ZVZlcmlmeSA9IHNpZ24uY3JlYXRlVmVyaWZ5XG5leHBvcnRzLlZlcmlmeSA9IHNpZ24uVmVyaWZ5XG5cbmV4cG9ydHMuY3JlYXRlRUNESCA9IHJlcXVpcmUoJ2NyZWF0ZS1lY2RoJylcblxudmFyIHB1YmxpY0VuY3J5cHQgPSByZXF1aXJlKCdwdWJsaWMtZW5jcnlwdCcpXG5cbmV4cG9ydHMucHVibGljRW5jcnlwdCA9IHB1YmxpY0VuY3J5cHQucHVibGljRW5jcnlwdFxuZXhwb3J0cy5wcml2YXRlRW5jcnlwdCA9IHB1YmxpY0VuY3J5cHQucHJpdmF0ZUVuY3J5cHRcbmV4cG9ydHMucHVibGljRGVjcnlwdCA9IHB1YmxpY0VuY3J5cHQucHVibGljRGVjcnlwdFxuZXhwb3J0cy5wcml2YXRlRGVjcnlwdCA9IHB1YmxpY0VuY3J5cHQucHJpdmF0ZURlY3J5cHRcblxuLy8gdGhlIGxlYXN0IEkgY2FuIGRvIGlzIG1ha2UgZXJyb3IgbWVzc2FnZXMgZm9yIHRoZSByZXN0IG9mIHRoZSBub2RlLmpzL2NyeXB0byBhcGkuXG4vLyA7W1xuLy8gICAnY3JlYXRlQ3JlZGVudGlhbHMnXG4vLyBdLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbi8vICAgZXhwb3J0c1tuYW1lXSA9IGZ1bmN0aW9uICgpIHtcbi8vICAgICB0aHJvdyBuZXcgRXJyb3IoW1xuLy8gICAgICAgJ3NvcnJ5LCAnICsgbmFtZSArICcgaXMgbm90IGltcGxlbWVudGVkIHlldCcsXG4vLyAgICAgICAnd2UgYWNjZXB0IHB1bGwgcmVxdWVzdHMnLFxuLy8gICAgICAgJ2h0dHBzOi8vZ2l0aHViLmNvbS9jcnlwdG8tYnJvd3NlcmlmeS9jcnlwdG8tYnJvd3NlcmlmeSdcbi8vICAgICBdLmpvaW4oJ1xcbicpKVxuLy8gICB9XG4vLyB9KVxuXG52YXIgcmYgPSByZXF1aXJlKCdyYW5kb21maWxsJylcblxuZXhwb3J0cy5yYW5kb21GaWxsID0gcmYucmFuZG9tRmlsbFxuZXhwb3J0cy5yYW5kb21GaWxsU3luYyA9IHJmLnJhbmRvbUZpbGxTeW5jXG5cbmV4cG9ydHMuY3JlYXRlQ3JlZGVudGlhbHMgPSBmdW5jdGlvbiAoKSB7XG4gIHRocm93IG5ldyBFcnJvcihbXG4gICAgJ3NvcnJ5LCBjcmVhdGVDcmVkZW50aWFscyBpcyBub3QgaW1wbGVtZW50ZWQgeWV0JyxcbiAgICAnd2UgYWNjZXB0IHB1bGwgcmVxdWVzdHMnLFxuICAgICdodHRwczovL2dpdGh1Yi5jb20vY3J5cHRvLWJyb3dzZXJpZnkvY3J5cHRvLWJyb3dzZXJpZnknXG4gIF0uam9pbignXFxuJykpXG59XG5cbmV4cG9ydHMuY29uc3RhbnRzID0ge1xuICAnREhfQ0hFQ0tfUF9OT1RfU0FGRV9QUklNRSc6IDIsXG4gICdESF9DSEVDS19QX05PVF9QUklNRSc6IDEsXG4gICdESF9VTkFCTEVfVE9fQ0hFQ0tfR0VORVJBVE9SJzogNCxcbiAgJ0RIX05PVF9TVUlUQUJMRV9HRU5FUkFUT1InOiA4LFxuICAnTlBOX0VOQUJMRUQnOiAxLFxuICAnQUxQTl9FTkFCTEVEJzogMSxcbiAgJ1JTQV9QS0NTMV9QQURESU5HJzogMSxcbiAgJ1JTQV9TU0xWMjNfUEFERElORyc6IDIsXG4gICdSU0FfTk9fUEFERElORyc6IDMsXG4gICdSU0FfUEtDUzFfT0FFUF9QQURESU5HJzogNCxcbiAgJ1JTQV9YOTMxX1BBRERJTkcnOiA1LFxuICAnUlNBX1BLQ1MxX1BTU19QQURESU5HJzogNixcbiAgJ1BPSU5UX0NPTlZFUlNJT05fQ09NUFJFU1NFRCc6IDIsXG4gICdQT0lOVF9DT05WRVJTSU9OX1VOQ09NUFJFU1NFRCc6IDQsXG4gICdQT0lOVF9DT05WRVJTSU9OX0hZQlJJRCc6IDZcbn1cbiIsIi8qXG4gKiBBIEphdmFTY3JpcHQgaW1wbGVtZW50YXRpb24gb2YgdGhlIFNlY3VyZSBIYXNoIEFsZ29yaXRobSwgU0hBLTAsIGFzIGRlZmluZWRcbiAqIGluIEZJUFMgUFVCIDE4MC0xXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGRlcml2ZWQgZnJvbSBzaGExLmpzIG9mIHRoZSBzYW1lIHJlcG9zaXRvcnkuXG4gKiBUaGUgZGlmZmVyZW5jZSBiZXR3ZWVuIFNIQS0wIGFuZCBTSEEtMSBpcyBqdXN0IGEgYml0d2lzZSByb3RhdGUgbGVmdFxuICogb3BlcmF0aW9uIHdhcyBhZGRlZC5cbiAqL1xuXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG52YXIgSGFzaCA9IHJlcXVpcmUoJy4vaGFzaCcpXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcblxudmFyIEsgPSBbXG4gIDB4NWE4Mjc5OTksIDB4NmVkOWViYTEsIDB4OGYxYmJjZGMgfCAwLCAweGNhNjJjMWQ2IHwgMFxuXVxuXG52YXIgVyA9IG5ldyBBcnJheSg4MClcblxuZnVuY3Rpb24gU2hhICgpIHtcbiAgdGhpcy5pbml0KClcbiAgdGhpcy5fdyA9IFdcblxuICBIYXNoLmNhbGwodGhpcywgNjQsIDU2KVxufVxuXG5pbmhlcml0cyhTaGEsIEhhc2gpXG5cblNoYS5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5fYSA9IDB4Njc0NTIzMDFcbiAgdGhpcy5fYiA9IDB4ZWZjZGFiODlcbiAgdGhpcy5fYyA9IDB4OThiYWRjZmVcbiAgdGhpcy5fZCA9IDB4MTAzMjU0NzZcbiAgdGhpcy5fZSA9IDB4YzNkMmUxZjBcblxuICByZXR1cm4gdGhpc1xufVxuXG5mdW5jdGlvbiByb3RsNSAobnVtKSB7XG4gIHJldHVybiAobnVtIDw8IDUpIHwgKG51bSA+Pj4gMjcpXG59XG5cbmZ1bmN0aW9uIHJvdGwzMCAobnVtKSB7XG4gIHJldHVybiAobnVtIDw8IDMwKSB8IChudW0gPj4+IDIpXG59XG5cbmZ1bmN0aW9uIGZ0IChzLCBiLCBjLCBkKSB7XG4gIGlmIChzID09PSAwKSByZXR1cm4gKGIgJiBjKSB8ICgofmIpICYgZClcbiAgaWYgKHMgPT09IDIpIHJldHVybiAoYiAmIGMpIHwgKGIgJiBkKSB8IChjICYgZClcbiAgcmV0dXJuIGIgXiBjIF4gZFxufVxuXG5TaGEucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAoTSkge1xuICB2YXIgVyA9IHRoaXMuX3dcblxuICB2YXIgYSA9IHRoaXMuX2EgfCAwXG4gIHZhciBiID0gdGhpcy5fYiB8IDBcbiAgdmFyIGMgPSB0aGlzLl9jIHwgMFxuICB2YXIgZCA9IHRoaXMuX2QgfCAwXG4gIHZhciBlID0gdGhpcy5fZSB8IDBcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IDE2OyArK2kpIFdbaV0gPSBNLnJlYWRJbnQzMkJFKGkgKiA0KVxuICBmb3IgKDsgaSA8IDgwOyArK2kpIFdbaV0gPSBXW2kgLSAzXSBeIFdbaSAtIDhdIF4gV1tpIC0gMTRdIF4gV1tpIC0gMTZdXG5cbiAgZm9yICh2YXIgaiA9IDA7IGogPCA4MDsgKytqKSB7XG4gICAgdmFyIHMgPSB+fihqIC8gMjApXG4gICAgdmFyIHQgPSAocm90bDUoYSkgKyBmdChzLCBiLCBjLCBkKSArIGUgKyBXW2pdICsgS1tzXSkgfCAwXG5cbiAgICBlID0gZFxuICAgIGQgPSBjXG4gICAgYyA9IHJvdGwzMChiKVxuICAgIGIgPSBhXG4gICAgYSA9IHRcbiAgfVxuXG4gIHRoaXMuX2EgPSAoYSArIHRoaXMuX2EpIHwgMFxuICB0aGlzLl9iID0gKGIgKyB0aGlzLl9iKSB8IDBcbiAgdGhpcy5fYyA9IChjICsgdGhpcy5fYykgfCAwXG4gIHRoaXMuX2QgPSAoZCArIHRoaXMuX2QpIHwgMFxuICB0aGlzLl9lID0gKGUgKyB0aGlzLl9lKSB8IDBcbn1cblxuU2hhLnByb3RvdHlwZS5faGFzaCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIEggPSBCdWZmZXIuYWxsb2NVbnNhZmUoMjApXG5cbiAgSC53cml0ZUludDMyQkUodGhpcy5fYSB8IDAsIDApXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2IgfCAwLCA0KVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9jIHwgMCwgOClcbiAgSC53cml0ZUludDMyQkUodGhpcy5fZCB8IDAsIDEyKVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9lIHwgMCwgMTYpXG5cbiAgcmV0dXJuIEhcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBTaGFcbiIsIi8qXG4gKiBBIEphdmFTY3JpcHQgaW1wbGVtZW50YXRpb24gb2YgdGhlIFNlY3VyZSBIYXNoIEFsZ29yaXRobSwgU0hBLTEsIGFzIGRlZmluZWRcbiAqIGluIEZJUFMgUFVCIDE4MC0xXG4gKiBWZXJzaW9uIDIuMWEgQ29weXJpZ2h0IFBhdWwgSm9obnN0b24gMjAwMCAtIDIwMDIuXG4gKiBPdGhlciBjb250cmlidXRvcnM6IEdyZWcgSG9sdCwgQW5kcmV3IEtlcGVydCwgWWRuYXIsIExvc3RpbmV0XG4gKiBEaXN0cmlidXRlZCB1bmRlciB0aGUgQlNEIExpY2Vuc2VcbiAqIFNlZSBodHRwOi8vcGFqaG9tZS5vcmcudWsvY3J5cHQvbWQ1IGZvciBkZXRhaWxzLlxuICovXG5cbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbnZhciBIYXNoID0gcmVxdWlyZSgnLi9oYXNoJylcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxuXG52YXIgSyA9IFtcbiAgMHg1YTgyNzk5OSwgMHg2ZWQ5ZWJhMSwgMHg4ZjFiYmNkYyB8IDAsIDB4Y2E2MmMxZDYgfCAwXG5dXG5cbnZhciBXID0gbmV3IEFycmF5KDgwKVxuXG5mdW5jdGlvbiBTaGExICgpIHtcbiAgdGhpcy5pbml0KClcbiAgdGhpcy5fdyA9IFdcblxuICBIYXNoLmNhbGwodGhpcywgNjQsIDU2KVxufVxuXG5pbmhlcml0cyhTaGExLCBIYXNoKVxuXG5TaGExLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLl9hID0gMHg2NzQ1MjMwMVxuICB0aGlzLl9iID0gMHhlZmNkYWI4OVxuICB0aGlzLl9jID0gMHg5OGJhZGNmZVxuICB0aGlzLl9kID0gMHgxMDMyNTQ3NlxuICB0aGlzLl9lID0gMHhjM2QyZTFmMFxuXG4gIHJldHVybiB0aGlzXG59XG5cbmZ1bmN0aW9uIHJvdGwxIChudW0pIHtcbiAgcmV0dXJuIChudW0gPDwgMSkgfCAobnVtID4+PiAzMSlcbn1cblxuZnVuY3Rpb24gcm90bDUgKG51bSkge1xuICByZXR1cm4gKG51bSA8PCA1KSB8IChudW0gPj4+IDI3KVxufVxuXG5mdW5jdGlvbiByb3RsMzAgKG51bSkge1xuICByZXR1cm4gKG51bSA8PCAzMCkgfCAobnVtID4+PiAyKVxufVxuXG5mdW5jdGlvbiBmdCAocywgYiwgYywgZCkge1xuICBpZiAocyA9PT0gMCkgcmV0dXJuIChiICYgYykgfCAoKH5iKSAmIGQpXG4gIGlmIChzID09PSAyKSByZXR1cm4gKGIgJiBjKSB8IChiICYgZCkgfCAoYyAmIGQpXG4gIHJldHVybiBiIF4gYyBeIGRcbn1cblxuU2hhMS5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIChNKSB7XG4gIHZhciBXID0gdGhpcy5fd1xuXG4gIHZhciBhID0gdGhpcy5fYSB8IDBcbiAgdmFyIGIgPSB0aGlzLl9iIHwgMFxuICB2YXIgYyA9IHRoaXMuX2MgfCAwXG4gIHZhciBkID0gdGhpcy5fZCB8IDBcbiAgdmFyIGUgPSB0aGlzLl9lIHwgMFxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgMTY7ICsraSkgV1tpXSA9IE0ucmVhZEludDMyQkUoaSAqIDQpXG4gIGZvciAoOyBpIDwgODA7ICsraSkgV1tpXSA9IHJvdGwxKFdbaSAtIDNdIF4gV1tpIC0gOF0gXiBXW2kgLSAxNF0gXiBXW2kgLSAxNl0pXG5cbiAgZm9yICh2YXIgaiA9IDA7IGogPCA4MDsgKytqKSB7XG4gICAgdmFyIHMgPSB+fihqIC8gMjApXG4gICAgdmFyIHQgPSAocm90bDUoYSkgKyBmdChzLCBiLCBjLCBkKSArIGUgKyBXW2pdICsgS1tzXSkgfCAwXG5cbiAgICBlID0gZFxuICAgIGQgPSBjXG4gICAgYyA9IHJvdGwzMChiKVxuICAgIGIgPSBhXG4gICAgYSA9IHRcbiAgfVxuXG4gIHRoaXMuX2EgPSAoYSArIHRoaXMuX2EpIHwgMFxuICB0aGlzLl9iID0gKGIgKyB0aGlzLl9iKSB8IDBcbiAgdGhpcy5fYyA9IChjICsgdGhpcy5fYykgfCAwXG4gIHRoaXMuX2QgPSAoZCArIHRoaXMuX2QpIHwgMFxuICB0aGlzLl9lID0gKGUgKyB0aGlzLl9lKSB8IDBcbn1cblxuU2hhMS5wcm90b3R5cGUuX2hhc2ggPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBIID0gQnVmZmVyLmFsbG9jVW5zYWZlKDIwKVxuXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2EgfCAwLCAwKVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9iIHwgMCwgNClcbiAgSC53cml0ZUludDMyQkUodGhpcy5fYyB8IDAsIDgpXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2QgfCAwLCAxMilcbiAgSC53cml0ZUludDMyQkUodGhpcy5fZSB8IDAsIDE2KVxuXG4gIHJldHVybiBIXG59XG5cbm1vZHVsZS5leHBvcnRzID0gU2hhMVxuIiwiLyoqXG4gKiBBIEphdmFTY3JpcHQgaW1wbGVtZW50YXRpb24gb2YgdGhlIFNlY3VyZSBIYXNoIEFsZ29yaXRobSwgU0hBLTI1NiwgYXMgZGVmaW5lZFxuICogaW4gRklQUyAxODAtMlxuICogVmVyc2lvbiAyLjItYmV0YSBDb3B5cmlnaHQgQW5nZWwgTWFyaW4sIFBhdWwgSm9obnN0b24gMjAwMCAtIDIwMDkuXG4gKiBPdGhlciBjb250cmlidXRvcnM6IEdyZWcgSG9sdCwgQW5kcmV3IEtlcGVydCwgWWRuYXIsIExvc3RpbmV0XG4gKlxuICovXG5cbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbnZhciBTaGEyNTYgPSByZXF1aXJlKCcuL3NoYTI1NicpXG52YXIgSGFzaCA9IHJlcXVpcmUoJy4vaGFzaCcpXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcblxudmFyIFcgPSBuZXcgQXJyYXkoNjQpXG5cbmZ1bmN0aW9uIFNoYTIyNCAoKSB7XG4gIHRoaXMuaW5pdCgpXG5cbiAgdGhpcy5fdyA9IFcgLy8gbmV3IEFycmF5KDY0KVxuXG4gIEhhc2guY2FsbCh0aGlzLCA2NCwgNTYpXG59XG5cbmluaGVyaXRzKFNoYTIyNCwgU2hhMjU2KVxuXG5TaGEyMjQucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuX2EgPSAweGMxMDU5ZWQ4XG4gIHRoaXMuX2IgPSAweDM2N2NkNTA3XG4gIHRoaXMuX2MgPSAweDMwNzBkZDE3XG4gIHRoaXMuX2QgPSAweGY3MGU1OTM5XG4gIHRoaXMuX2UgPSAweGZmYzAwYjMxXG4gIHRoaXMuX2YgPSAweDY4NTgxNTExXG4gIHRoaXMuX2cgPSAweDY0Zjk4ZmE3XG4gIHRoaXMuX2ggPSAweGJlZmE0ZmE0XG5cbiAgcmV0dXJuIHRoaXNcbn1cblxuU2hhMjI0LnByb3RvdHlwZS5faGFzaCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIEggPSBCdWZmZXIuYWxsb2NVbnNhZmUoMjgpXG5cbiAgSC53cml0ZUludDMyQkUodGhpcy5fYSwgMClcbiAgSC53cml0ZUludDMyQkUodGhpcy5fYiwgNClcbiAgSC53cml0ZUludDMyQkUodGhpcy5fYywgOClcbiAgSC53cml0ZUludDMyQkUodGhpcy5fZCwgMTIpXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2UsIDE2KVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9mLCAyMClcbiAgSC53cml0ZUludDMyQkUodGhpcy5fZywgMjQpXG5cbiAgcmV0dXJuIEhcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBTaGEyMjRcbiIsInZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbnZhciBTSEE1MTIgPSByZXF1aXJlKCcuL3NoYTUxMicpXG52YXIgSGFzaCA9IHJlcXVpcmUoJy4vaGFzaCcpXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcblxudmFyIFcgPSBuZXcgQXJyYXkoMTYwKVxuXG5mdW5jdGlvbiBTaGEzODQgKCkge1xuICB0aGlzLmluaXQoKVxuICB0aGlzLl93ID0gV1xuXG4gIEhhc2guY2FsbCh0aGlzLCAxMjgsIDExMilcbn1cblxuaW5oZXJpdHMoU2hhMzg0LCBTSEE1MTIpXG5cblNoYTM4NC5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5fYWggPSAweGNiYmI5ZDVkXG4gIHRoaXMuX2JoID0gMHg2MjlhMjkyYVxuICB0aGlzLl9jaCA9IDB4OTE1OTAxNWFcbiAgdGhpcy5fZGggPSAweDE1MmZlY2Q4XG4gIHRoaXMuX2VoID0gMHg2NzMzMjY2N1xuICB0aGlzLl9maCA9IDB4OGViNDRhODdcbiAgdGhpcy5fZ2ggPSAweGRiMGMyZTBkXG4gIHRoaXMuX2hoID0gMHg0N2I1NDgxZFxuXG4gIHRoaXMuX2FsID0gMHhjMTA1OWVkOFxuICB0aGlzLl9ibCA9IDB4MzY3Y2Q1MDdcbiAgdGhpcy5fY2wgPSAweDMwNzBkZDE3XG4gIHRoaXMuX2RsID0gMHhmNzBlNTkzOVxuICB0aGlzLl9lbCA9IDB4ZmZjMDBiMzFcbiAgdGhpcy5fZmwgPSAweDY4NTgxNTExXG4gIHRoaXMuX2dsID0gMHg2NGY5OGZhN1xuICB0aGlzLl9obCA9IDB4YmVmYTRmYTRcblxuICByZXR1cm4gdGhpc1xufVxuXG5TaGEzODQucHJvdG90eXBlLl9oYXNoID0gZnVuY3Rpb24gKCkge1xuICB2YXIgSCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSg0OClcblxuICBmdW5jdGlvbiB3cml0ZUludDY0QkUgKGgsIGwsIG9mZnNldCkge1xuICAgIEgud3JpdGVJbnQzMkJFKGgsIG9mZnNldClcbiAgICBILndyaXRlSW50MzJCRShsLCBvZmZzZXQgKyA0KVxuICB9XG5cbiAgd3JpdGVJbnQ2NEJFKHRoaXMuX2FoLCB0aGlzLl9hbCwgMClcbiAgd3JpdGVJbnQ2NEJFKHRoaXMuX2JoLCB0aGlzLl9ibCwgOClcbiAgd3JpdGVJbnQ2NEJFKHRoaXMuX2NoLCB0aGlzLl9jbCwgMTYpXG4gIHdyaXRlSW50NjRCRSh0aGlzLl9kaCwgdGhpcy5fZGwsIDI0KVxuICB3cml0ZUludDY0QkUodGhpcy5fZWgsIHRoaXMuX2VsLCAzMilcbiAgd3JpdGVJbnQ2NEJFKHRoaXMuX2ZoLCB0aGlzLl9mbCwgNDApXG5cbiAgcmV0dXJuIEhcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBTaGEzODRcbiIsIid1c2Ugc3RyaWN0J1xudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG5cbnZhciBCYXNlID0gcmVxdWlyZSgnY2lwaGVyLWJhc2UnKVxuXG52YXIgWkVST1MgPSBCdWZmZXIuYWxsb2MoMTI4KVxudmFyIGJsb2Nrc2l6ZSA9IDY0XG5cbmZ1bmN0aW9uIEhtYWMgKGFsZywga2V5KSB7XG4gIEJhc2UuY2FsbCh0aGlzLCAnZGlnZXN0JylcbiAgaWYgKHR5cGVvZiBrZXkgPT09ICdzdHJpbmcnKSB7XG4gICAga2V5ID0gQnVmZmVyLmZyb20oa2V5KVxuICB9XG5cbiAgdGhpcy5fYWxnID0gYWxnXG4gIHRoaXMuX2tleSA9IGtleVxuXG4gIGlmIChrZXkubGVuZ3RoID4gYmxvY2tzaXplKSB7XG4gICAga2V5ID0gYWxnKGtleSlcbiAgfSBlbHNlIGlmIChrZXkubGVuZ3RoIDwgYmxvY2tzaXplKSB7XG4gICAga2V5ID0gQnVmZmVyLmNvbmNhdChba2V5LCBaRVJPU10sIGJsb2Nrc2l6ZSlcbiAgfVxuXG4gIHZhciBpcGFkID0gdGhpcy5faXBhZCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShibG9ja3NpemUpXG4gIHZhciBvcGFkID0gdGhpcy5fb3BhZCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShibG9ja3NpemUpXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBibG9ja3NpemU7IGkrKykge1xuICAgIGlwYWRbaV0gPSBrZXlbaV0gXiAweDM2XG4gICAgb3BhZFtpXSA9IGtleVtpXSBeIDB4NUNcbiAgfVxuXG4gIHRoaXMuX2hhc2ggPSBbaXBhZF1cbn1cblxuaW5oZXJpdHMoSG1hYywgQmFzZSlcblxuSG1hYy5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIHRoaXMuX2hhc2gucHVzaChkYXRhKVxufVxuXG5IbWFjLnByb3RvdHlwZS5fZmluYWwgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBoID0gdGhpcy5fYWxnKEJ1ZmZlci5jb25jYXQodGhpcy5faGFzaCkpXG4gIHJldHVybiB0aGlzLl9hbGcoQnVmZmVyLmNvbmNhdChbdGhpcy5fb3BhZCwgaF0pKVxufVxubW9kdWxlLmV4cG9ydHMgPSBIbWFjXG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vYnJvd3Nlci9hbGdvcml0aG1zLmpzb24nKVxuIiwidmFyIGNoZWNrUGFyYW1ldGVycyA9IHJlcXVpcmUoJy4vcHJlY29uZGl0aW9uJylcbnZhciBkZWZhdWx0RW5jb2RpbmcgPSByZXF1aXJlKCcuL2RlZmF1bHQtZW5jb2RpbmcnKVxudmFyIHN5bmMgPSByZXF1aXJlKCcuL3N5bmMnKVxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG5cbnZhciBaRVJPX0JVRlxudmFyIHN1YnRsZSA9IGdsb2JhbC5jcnlwdG8gJiYgZ2xvYmFsLmNyeXB0by5zdWJ0bGVcbnZhciB0b0Jyb3dzZXIgPSB7XG4gICdzaGEnOiAnU0hBLTEnLFxuICAnc2hhLTEnOiAnU0hBLTEnLFxuICAnc2hhMSc6ICdTSEEtMScsXG4gICdzaGEyNTYnOiAnU0hBLTI1NicsXG4gICdzaGEtMjU2JzogJ1NIQS0yNTYnLFxuICAnc2hhMzg0JzogJ1NIQS0zODQnLFxuICAnc2hhLTM4NCc6ICdTSEEtMzg0JyxcbiAgJ3NoYS01MTInOiAnU0hBLTUxMicsXG4gICdzaGE1MTInOiAnU0hBLTUxMidcbn1cbnZhciBjaGVja3MgPSBbXVxuZnVuY3Rpb24gY2hlY2tOYXRpdmUgKGFsZ28pIHtcbiAgaWYgKGdsb2JhbC5wcm9jZXNzICYmICFnbG9iYWwucHJvY2Vzcy5icm93c2VyKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShmYWxzZSlcbiAgfVxuICBpZiAoIXN1YnRsZSB8fCAhc3VidGxlLmltcG9ydEtleSB8fCAhc3VidGxlLmRlcml2ZUJpdHMpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGZhbHNlKVxuICB9XG4gIGlmIChjaGVja3NbYWxnb10gIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBjaGVja3NbYWxnb11cbiAgfVxuICBaRVJPX0JVRiA9IFpFUk9fQlVGIHx8IEJ1ZmZlci5hbGxvYyg4KVxuICB2YXIgcHJvbSA9IGJyb3dzZXJQYmtkZjIoWkVST19CVUYsIFpFUk9fQlVGLCAxMCwgMTI4LCBhbGdvKVxuICAgIC50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfSkuY2F0Y2goZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfSlcbiAgY2hlY2tzW2FsZ29dID0gcHJvbVxuICByZXR1cm4gcHJvbVxufVxuXG5mdW5jdGlvbiBicm93c2VyUGJrZGYyIChwYXNzd29yZCwgc2FsdCwgaXRlcmF0aW9ucywgbGVuZ3RoLCBhbGdvKSB7XG4gIHJldHVybiBzdWJ0bGUuaW1wb3J0S2V5KFxuICAgICdyYXcnLCBwYXNzd29yZCwge25hbWU6ICdQQktERjInfSwgZmFsc2UsIFsnZGVyaXZlQml0cyddXG4gICkudGhlbihmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuIHN1YnRsZS5kZXJpdmVCaXRzKHtcbiAgICAgIG5hbWU6ICdQQktERjInLFxuICAgICAgc2FsdDogc2FsdCxcbiAgICAgIGl0ZXJhdGlvbnM6IGl0ZXJhdGlvbnMsXG4gICAgICBoYXNoOiB7XG4gICAgICAgIG5hbWU6IGFsZ29cbiAgICAgIH1cbiAgICB9LCBrZXksIGxlbmd0aCA8PCAzKVxuICB9KS50aGVuKGZ1bmN0aW9uIChyZXMpIHtcbiAgICByZXR1cm4gQnVmZmVyLmZyb20ocmVzKVxuICB9KVxufVxuXG5mdW5jdGlvbiByZXNvbHZlUHJvbWlzZSAocHJvbWlzZSwgY2FsbGJhY2spIHtcbiAgcHJvbWlzZS50aGVuKGZ1bmN0aW9uIChvdXQpIHtcbiAgICBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgIGNhbGxiYWNrKG51bGwsIG91dClcbiAgICB9KVxuICB9LCBmdW5jdGlvbiAoZSkge1xuICAgIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24gKCkge1xuICAgICAgY2FsbGJhY2soZSlcbiAgICB9KVxuICB9KVxufVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAocGFzc3dvcmQsIHNhbHQsIGl0ZXJhdGlvbnMsIGtleWxlbiwgZGlnZXN0LCBjYWxsYmFjaykge1xuICBpZiAodHlwZW9mIGRpZ2VzdCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNhbGxiYWNrID0gZGlnZXN0XG4gICAgZGlnZXN0ID0gdW5kZWZpbmVkXG4gIH1cblxuICBkaWdlc3QgPSBkaWdlc3QgfHwgJ3NoYTEnXG4gIHZhciBhbGdvID0gdG9Ccm93c2VyW2RpZ2VzdC50b0xvd2VyQ2FzZSgpXVxuXG4gIGlmICghYWxnbyB8fCB0eXBlb2YgZ2xvYmFsLlByb21pc2UgIT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgb3V0XG4gICAgICB0cnkge1xuICAgICAgICBvdXQgPSBzeW5jKHBhc3N3b3JkLCBzYWx0LCBpdGVyYXRpb25zLCBrZXlsZW4sIGRpZ2VzdClcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGUpXG4gICAgICB9XG4gICAgICBjYWxsYmFjayhudWxsLCBvdXQpXG4gICAgfSlcbiAgfVxuXG4gIGNoZWNrUGFyYW1ldGVycyhwYXNzd29yZCwgc2FsdCwgaXRlcmF0aW9ucywga2V5bGVuKVxuICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSAnZnVuY3Rpb24nKSB0aHJvdyBuZXcgRXJyb3IoJ05vIGNhbGxiYWNrIHByb3ZpZGVkIHRvIHBia2RmMicpXG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKHBhc3N3b3JkKSkgcGFzc3dvcmQgPSBCdWZmZXIuZnJvbShwYXNzd29yZCwgZGVmYXVsdEVuY29kaW5nKVxuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihzYWx0KSkgc2FsdCA9IEJ1ZmZlci5mcm9tKHNhbHQsIGRlZmF1bHRFbmNvZGluZylcblxuICByZXNvbHZlUHJvbWlzZShjaGVja05hdGl2ZShhbGdvKS50aGVuKGZ1bmN0aW9uIChyZXNwKSB7XG4gICAgaWYgKHJlc3ApIHJldHVybiBicm93c2VyUGJrZGYyKHBhc3N3b3JkLCBzYWx0LCBpdGVyYXRpb25zLCBrZXlsZW4sIGFsZ28pXG5cbiAgICByZXR1cm4gc3luYyhwYXNzd29yZCwgc2FsdCwgaXRlcmF0aW9ucywga2V5bGVuLCBkaWdlc3QpXG4gIH0pLCBjYWxsYmFjaylcbn1cbiIsInZhciBERVMgPSByZXF1aXJlKCdicm93c2VyaWZ5LWRlcycpXG52YXIgYWVzID0gcmVxdWlyZSgnYnJvd3NlcmlmeS1hZXMvYnJvd3NlcicpXG52YXIgYWVzTW9kZXMgPSByZXF1aXJlKCdicm93c2VyaWZ5LWFlcy9tb2RlcycpXG52YXIgZGVzTW9kZXMgPSByZXF1aXJlKCdicm93c2VyaWZ5LWRlcy9tb2RlcycpXG52YXIgZWJ0ayA9IHJlcXVpcmUoJ2V2cF9ieXRlc3Rva2V5JylcblxuZnVuY3Rpb24gY3JlYXRlQ2lwaGVyIChzdWl0ZSwgcGFzc3dvcmQpIHtcbiAgc3VpdGUgPSBzdWl0ZS50b0xvd2VyQ2FzZSgpXG5cbiAgdmFyIGtleUxlbiwgaXZMZW5cbiAgaWYgKGFlc01vZGVzW3N1aXRlXSkge1xuICAgIGtleUxlbiA9IGFlc01vZGVzW3N1aXRlXS5rZXlcbiAgICBpdkxlbiA9IGFlc01vZGVzW3N1aXRlXS5pdlxuICB9IGVsc2UgaWYgKGRlc01vZGVzW3N1aXRlXSkge1xuICAgIGtleUxlbiA9IGRlc01vZGVzW3N1aXRlXS5rZXkgKiA4XG4gICAgaXZMZW4gPSBkZXNNb2Rlc1tzdWl0ZV0uaXZcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIHN1aXRlIHR5cGUnKVxuICB9XG5cbiAgdmFyIGtleXMgPSBlYnRrKHBhc3N3b3JkLCBmYWxzZSwga2V5TGVuLCBpdkxlbilcbiAgcmV0dXJuIGNyZWF0ZUNpcGhlcml2KHN1aXRlLCBrZXlzLmtleSwga2V5cy5pdilcbn1cblxuZnVuY3Rpb24gY3JlYXRlRGVjaXBoZXIgKHN1aXRlLCBwYXNzd29yZCkge1xuICBzdWl0ZSA9IHN1aXRlLnRvTG93ZXJDYXNlKClcblxuICB2YXIga2V5TGVuLCBpdkxlblxuICBpZiAoYWVzTW9kZXNbc3VpdGVdKSB7XG4gICAga2V5TGVuID0gYWVzTW9kZXNbc3VpdGVdLmtleVxuICAgIGl2TGVuID0gYWVzTW9kZXNbc3VpdGVdLml2XG4gIH0gZWxzZSBpZiAoZGVzTW9kZXNbc3VpdGVdKSB7XG4gICAga2V5TGVuID0gZGVzTW9kZXNbc3VpdGVdLmtleSAqIDhcbiAgICBpdkxlbiA9IGRlc01vZGVzW3N1aXRlXS5pdlxuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgc3VpdGUgdHlwZScpXG4gIH1cblxuICB2YXIga2V5cyA9IGVidGsocGFzc3dvcmQsIGZhbHNlLCBrZXlMZW4sIGl2TGVuKVxuICByZXR1cm4gY3JlYXRlRGVjaXBoZXJpdihzdWl0ZSwga2V5cy5rZXksIGtleXMuaXYpXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUNpcGhlcml2IChzdWl0ZSwga2V5LCBpdikge1xuICBzdWl0ZSA9IHN1aXRlLnRvTG93ZXJDYXNlKClcbiAgaWYgKGFlc01vZGVzW3N1aXRlXSkgcmV0dXJuIGFlcy5jcmVhdGVDaXBoZXJpdihzdWl0ZSwga2V5LCBpdilcbiAgaWYgKGRlc01vZGVzW3N1aXRlXSkgcmV0dXJuIG5ldyBERVMoeyBrZXk6IGtleSwgaXY6IGl2LCBtb2RlOiBzdWl0ZSB9KVxuXG4gIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgc3VpdGUgdHlwZScpXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZURlY2lwaGVyaXYgKHN1aXRlLCBrZXksIGl2KSB7XG4gIHN1aXRlID0gc3VpdGUudG9Mb3dlckNhc2UoKVxuICBpZiAoYWVzTW9kZXNbc3VpdGVdKSByZXR1cm4gYWVzLmNyZWF0ZURlY2lwaGVyaXYoc3VpdGUsIGtleSwgaXYpXG4gIGlmIChkZXNNb2Rlc1tzdWl0ZV0pIHJldHVybiBuZXcgREVTKHsga2V5OiBrZXksIGl2OiBpdiwgbW9kZTogc3VpdGUsIGRlY3J5cHQ6IHRydWUgfSlcblxuICB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIHN1aXRlIHR5cGUnKVxufVxuXG5mdW5jdGlvbiBnZXRDaXBoZXJzICgpIHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKGRlc01vZGVzKS5jb25jYXQoYWVzLmdldENpcGhlcnMoKSlcbn1cblxuZXhwb3J0cy5jcmVhdGVDaXBoZXIgPSBleHBvcnRzLkNpcGhlciA9IGNyZWF0ZUNpcGhlclxuZXhwb3J0cy5jcmVhdGVDaXBoZXJpdiA9IGV4cG9ydHMuQ2lwaGVyaXYgPSBjcmVhdGVDaXBoZXJpdlxuZXhwb3J0cy5jcmVhdGVEZWNpcGhlciA9IGV4cG9ydHMuRGVjaXBoZXIgPSBjcmVhdGVEZWNpcGhlclxuZXhwb3J0cy5jcmVhdGVEZWNpcGhlcml2ID0gZXhwb3J0cy5EZWNpcGhlcml2ID0gY3JlYXRlRGVjaXBoZXJpdlxuZXhwb3J0cy5saXN0Q2lwaGVycyA9IGV4cG9ydHMuZ2V0Q2lwaGVycyA9IGdldENpcGhlcnNcbiIsInZhciBDaXBoZXJCYXNlID0gcmVxdWlyZSgnY2lwaGVyLWJhc2UnKVxudmFyIGRlcyA9IHJlcXVpcmUoJ2Rlcy5qcycpXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcblxudmFyIG1vZGVzID0ge1xuICAnZGVzLWVkZTMtY2JjJzogZGVzLkNCQy5pbnN0YW50aWF0ZShkZXMuRURFKSxcbiAgJ2Rlcy1lZGUzJzogZGVzLkVERSxcbiAgJ2Rlcy1lZGUtY2JjJzogZGVzLkNCQy5pbnN0YW50aWF0ZShkZXMuRURFKSxcbiAgJ2Rlcy1lZGUnOiBkZXMuRURFLFxuICAnZGVzLWNiYyc6IGRlcy5DQkMuaW5zdGFudGlhdGUoZGVzLkRFUyksXG4gICdkZXMtZWNiJzogZGVzLkRFU1xufVxubW9kZXMuZGVzID0gbW9kZXNbJ2Rlcy1jYmMnXVxubW9kZXMuZGVzMyA9IG1vZGVzWydkZXMtZWRlMy1jYmMnXVxubW9kdWxlLmV4cG9ydHMgPSBERVNcbmluaGVyaXRzKERFUywgQ2lwaGVyQmFzZSlcbmZ1bmN0aW9uIERFUyAob3B0cykge1xuICBDaXBoZXJCYXNlLmNhbGwodGhpcylcbiAgdmFyIG1vZGVOYW1lID0gb3B0cy5tb2RlLnRvTG93ZXJDYXNlKClcbiAgdmFyIG1vZGUgPSBtb2Rlc1ttb2RlTmFtZV1cbiAgdmFyIHR5cGVcbiAgaWYgKG9wdHMuZGVjcnlwdCkge1xuICAgIHR5cGUgPSAnZGVjcnlwdCdcbiAgfSBlbHNlIHtcbiAgICB0eXBlID0gJ2VuY3J5cHQnXG4gIH1cbiAgdmFyIGtleSA9IG9wdHMua2V5XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGtleSkpIHtcbiAgICBrZXkgPSBCdWZmZXIuZnJvbShrZXkpXG4gIH1cbiAgaWYgKG1vZGVOYW1lID09PSAnZGVzLWVkZScgfHwgbW9kZU5hbWUgPT09ICdkZXMtZWRlLWNiYycpIHtcbiAgICBrZXkgPSBCdWZmZXIuY29uY2F0KFtrZXksIGtleS5zbGljZSgwLCA4KV0pXG4gIH1cbiAgdmFyIGl2ID0gb3B0cy5pdlxuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihpdikpIHtcbiAgICBpdiA9IEJ1ZmZlci5mcm9tKGl2KVxuICB9XG4gIHRoaXMuX2RlcyA9IG1vZGUuY3JlYXRlKHtcbiAgICBrZXk6IGtleSxcbiAgICBpdjogaXYsXG4gICAgdHlwZTogdHlwZVxuICB9KVxufVxuREVTLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgcmV0dXJuIEJ1ZmZlci5mcm9tKHRoaXMuX2Rlcy51cGRhdGUoZGF0YSkpXG59XG5ERVMucHJvdG90eXBlLl9maW5hbCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIEJ1ZmZlci5mcm9tKHRoaXMuX2Rlcy5maW5hbCgpKVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLnJlYWRVSW50MzJCRSA9IGZ1bmN0aW9uIHJlYWRVSW50MzJCRShieXRlcywgb2ZmKSB7XG4gIHZhciByZXMgPSAgKGJ5dGVzWzAgKyBvZmZdIDw8IDI0KSB8XG4gICAgICAgICAgICAgKGJ5dGVzWzEgKyBvZmZdIDw8IDE2KSB8XG4gICAgICAgICAgICAgKGJ5dGVzWzIgKyBvZmZdIDw8IDgpIHxcbiAgICAgICAgICAgICBieXRlc1szICsgb2ZmXTtcbiAgcmV0dXJuIHJlcyA+Pj4gMDtcbn07XG5cbmV4cG9ydHMud3JpdGVVSW50MzJCRSA9IGZ1bmN0aW9uIHdyaXRlVUludDMyQkUoYnl0ZXMsIHZhbHVlLCBvZmYpIHtcbiAgYnl0ZXNbMCArIG9mZl0gPSB2YWx1ZSA+Pj4gMjQ7XG4gIGJ5dGVzWzEgKyBvZmZdID0gKHZhbHVlID4+PiAxNikgJiAweGZmO1xuICBieXRlc1syICsgb2ZmXSA9ICh2YWx1ZSA+Pj4gOCkgJiAweGZmO1xuICBieXRlc1szICsgb2ZmXSA9IHZhbHVlICYgMHhmZjtcbn07XG5cbmV4cG9ydHMuaXAgPSBmdW5jdGlvbiBpcChpbkwsIGluUiwgb3V0LCBvZmYpIHtcbiAgdmFyIG91dEwgPSAwO1xuICB2YXIgb3V0UiA9IDA7XG5cbiAgZm9yICh2YXIgaSA9IDY7IGkgPj0gMDsgaSAtPSAyKSB7XG4gICAgZm9yICh2YXIgaiA9IDA7IGogPD0gMjQ7IGogKz0gOCkge1xuICAgICAgb3V0TCA8PD0gMTtcbiAgICAgIG91dEwgfD0gKGluUiA+Pj4gKGogKyBpKSkgJiAxO1xuICAgIH1cbiAgICBmb3IgKHZhciBqID0gMDsgaiA8PSAyNDsgaiArPSA4KSB7XG4gICAgICBvdXRMIDw8PSAxO1xuICAgICAgb3V0TCB8PSAoaW5MID4+PiAoaiArIGkpKSAmIDE7XG4gICAgfVxuICB9XG5cbiAgZm9yICh2YXIgaSA9IDY7IGkgPj0gMDsgaSAtPSAyKSB7XG4gICAgZm9yICh2YXIgaiA9IDE7IGogPD0gMjU7IGogKz0gOCkge1xuICAgICAgb3V0UiA8PD0gMTtcbiAgICAgIG91dFIgfD0gKGluUiA+Pj4gKGogKyBpKSkgJiAxO1xuICAgIH1cbiAgICBmb3IgKHZhciBqID0gMTsgaiA8PSAyNTsgaiArPSA4KSB7XG4gICAgICBvdXRSIDw8PSAxO1xuICAgICAgb3V0UiB8PSAoaW5MID4+PiAoaiArIGkpKSAmIDE7XG4gICAgfVxuICB9XG5cbiAgb3V0W29mZiArIDBdID0gb3V0TCA+Pj4gMDtcbiAgb3V0W29mZiArIDFdID0gb3V0UiA+Pj4gMDtcbn07XG5cbmV4cG9ydHMucmlwID0gZnVuY3Rpb24gcmlwKGluTCwgaW5SLCBvdXQsIG9mZikge1xuICB2YXIgb3V0TCA9IDA7XG4gIHZhciBvdXRSID0gMDtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IDQ7IGkrKykge1xuICAgIGZvciAodmFyIGogPSAyNDsgaiA+PSAwOyBqIC09IDgpIHtcbiAgICAgIG91dEwgPDw9IDE7XG4gICAgICBvdXRMIHw9IChpblIgPj4+IChqICsgaSkpICYgMTtcbiAgICAgIG91dEwgPDw9IDE7XG4gICAgICBvdXRMIHw9IChpbkwgPj4+IChqICsgaSkpICYgMTtcbiAgICB9XG4gIH1cbiAgZm9yICh2YXIgaSA9IDQ7IGkgPCA4OyBpKyspIHtcbiAgICBmb3IgKHZhciBqID0gMjQ7IGogPj0gMDsgaiAtPSA4KSB7XG4gICAgICBvdXRSIDw8PSAxO1xuICAgICAgb3V0UiB8PSAoaW5SID4+PiAoaiArIGkpKSAmIDE7XG4gICAgICBvdXRSIDw8PSAxO1xuICAgICAgb3V0UiB8PSAoaW5MID4+PiAoaiArIGkpKSAmIDE7XG4gICAgfVxuICB9XG5cbiAgb3V0W29mZiArIDBdID0gb3V0TCA+Pj4gMDtcbiAgb3V0W29mZiArIDFdID0gb3V0UiA+Pj4gMDtcbn07XG5cbmV4cG9ydHMucGMxID0gZnVuY3Rpb24gcGMxKGluTCwgaW5SLCBvdXQsIG9mZikge1xuICB2YXIgb3V0TCA9IDA7XG4gIHZhciBvdXRSID0gMDtcblxuICAvLyA3LCAxNSwgMjMsIDMxLCAzOSwgNDcsIDU1LCA2M1xuICAvLyA2LCAxNCwgMjIsIDMwLCAzOSwgNDcsIDU1LCA2M1xuICAvLyA1LCAxMywgMjEsIDI5LCAzOSwgNDcsIDU1LCA2M1xuICAvLyA0LCAxMiwgMjAsIDI4XG4gIGZvciAodmFyIGkgPSA3OyBpID49IDU7IGktLSkge1xuICAgIGZvciAodmFyIGogPSAwOyBqIDw9IDI0OyBqICs9IDgpIHtcbiAgICAgIG91dEwgPDw9IDE7XG4gICAgICBvdXRMIHw9IChpblIgPj4gKGogKyBpKSkgJiAxO1xuICAgIH1cbiAgICBmb3IgKHZhciBqID0gMDsgaiA8PSAyNDsgaiArPSA4KSB7XG4gICAgICBvdXRMIDw8PSAxO1xuICAgICAgb3V0TCB8PSAoaW5MID4+IChqICsgaSkpICYgMTtcbiAgICB9XG4gIH1cbiAgZm9yICh2YXIgaiA9IDA7IGogPD0gMjQ7IGogKz0gOCkge1xuICAgIG91dEwgPDw9IDE7XG4gICAgb3V0TCB8PSAoaW5SID4+IChqICsgaSkpICYgMTtcbiAgfVxuXG4gIC8vIDEsIDksIDE3LCAyNSwgMzMsIDQxLCA0OSwgNTdcbiAgLy8gMiwgMTAsIDE4LCAyNiwgMzQsIDQyLCA1MCwgNThcbiAgLy8gMywgMTEsIDE5LCAyNywgMzUsIDQzLCA1MSwgNTlcbiAgLy8gMzYsIDQ0LCA1MiwgNjBcbiAgZm9yICh2YXIgaSA9IDE7IGkgPD0gMzsgaSsrKSB7XG4gICAgZm9yICh2YXIgaiA9IDA7IGogPD0gMjQ7IGogKz0gOCkge1xuICAgICAgb3V0UiA8PD0gMTtcbiAgICAgIG91dFIgfD0gKGluUiA+PiAoaiArIGkpKSAmIDE7XG4gICAgfVxuICAgIGZvciAodmFyIGogPSAwOyBqIDw9IDI0OyBqICs9IDgpIHtcbiAgICAgIG91dFIgPDw9IDE7XG4gICAgICBvdXRSIHw9IChpbkwgPj4gKGogKyBpKSkgJiAxO1xuICAgIH1cbiAgfVxuICBmb3IgKHZhciBqID0gMDsgaiA8PSAyNDsgaiArPSA4KSB7XG4gICAgb3V0UiA8PD0gMTtcbiAgICBvdXRSIHw9IChpbkwgPj4gKGogKyBpKSkgJiAxO1xuICB9XG5cbiAgb3V0W29mZiArIDBdID0gb3V0TCA+Pj4gMDtcbiAgb3V0W29mZiArIDFdID0gb3V0UiA+Pj4gMDtcbn07XG5cbmV4cG9ydHMucjI4c2hsID0gZnVuY3Rpb24gcjI4c2hsKG51bSwgc2hpZnQpIHtcbiAgcmV0dXJuICgobnVtIDw8IHNoaWZ0KSAmIDB4ZmZmZmZmZikgfCAobnVtID4+PiAoMjggLSBzaGlmdCkpO1xufTtcblxudmFyIHBjMnRhYmxlID0gW1xuICAvLyBpbkwgPT4gb3V0TFxuICAxNCwgMTEsIDE3LCA0LCAyNywgMjMsIDI1LCAwLFxuICAxMywgMjIsIDcsIDE4LCA1LCA5LCAxNiwgMjQsXG4gIDIsIDIwLCAxMiwgMjEsIDEsIDgsIDE1LCAyNixcblxuICAvLyBpblIgPT4gb3V0UlxuICAxNSwgNCwgMjUsIDE5LCA5LCAxLCAyNiwgMTYsXG4gIDUsIDExLCAyMywgOCwgMTIsIDcsIDE3LCAwLFxuICAyMiwgMywgMTAsIDE0LCA2LCAyMCwgMjcsIDI0XG5dO1xuXG5leHBvcnRzLnBjMiA9IGZ1bmN0aW9uIHBjMihpbkwsIGluUiwgb3V0LCBvZmYpIHtcbiAgdmFyIG91dEwgPSAwO1xuICB2YXIgb3V0UiA9IDA7XG5cbiAgdmFyIGxlbiA9IHBjMnRhYmxlLmxlbmd0aCA+Pj4gMTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgIG91dEwgPDw9IDE7XG4gICAgb3V0TCB8PSAoaW5MID4+PiBwYzJ0YWJsZVtpXSkgJiAweDE7XG4gIH1cbiAgZm9yICh2YXIgaSA9IGxlbjsgaSA8IHBjMnRhYmxlLmxlbmd0aDsgaSsrKSB7XG4gICAgb3V0UiA8PD0gMTtcbiAgICBvdXRSIHw9IChpblIgPj4+IHBjMnRhYmxlW2ldKSAmIDB4MTtcbiAgfVxuXG4gIG91dFtvZmYgKyAwXSA9IG91dEwgPj4+IDA7XG4gIG91dFtvZmYgKyAxXSA9IG91dFIgPj4+IDA7XG59O1xuXG5leHBvcnRzLmV4cGFuZCA9IGZ1bmN0aW9uIGV4cGFuZChyLCBvdXQsIG9mZikge1xuICB2YXIgb3V0TCA9IDA7XG4gIHZhciBvdXRSID0gMDtcblxuICBvdXRMID0gKChyICYgMSkgPDwgNSkgfCAociA+Pj4gMjcpO1xuICBmb3IgKHZhciBpID0gMjM7IGkgPj0gMTU7IGkgLT0gNCkge1xuICAgIG91dEwgPDw9IDY7XG4gICAgb3V0TCB8PSAociA+Pj4gaSkgJiAweDNmO1xuICB9XG4gIGZvciAodmFyIGkgPSAxMTsgaSA+PSAzOyBpIC09IDQpIHtcbiAgICBvdXRSIHw9IChyID4+PiBpKSAmIDB4M2Y7XG4gICAgb3V0UiA8PD0gNjtcbiAgfVxuICBvdXRSIHw9ICgociAmIDB4MWYpIDw8IDEpIHwgKHIgPj4+IDMxKTtcblxuICBvdXRbb2ZmICsgMF0gPSBvdXRMID4+PiAwO1xuICBvdXRbb2ZmICsgMV0gPSBvdXRSID4+PiAwO1xufTtcblxudmFyIHNUYWJsZSA9IFtcbiAgMTQsIDAsIDQsIDE1LCAxMywgNywgMSwgNCwgMiwgMTQsIDE1LCAyLCAxMSwgMTMsIDgsIDEsXG4gIDMsIDEwLCAxMCwgNiwgNiwgMTIsIDEyLCAxMSwgNSwgOSwgOSwgNSwgMCwgMywgNywgOCxcbiAgNCwgMTUsIDEsIDEyLCAxNCwgOCwgOCwgMiwgMTMsIDQsIDYsIDksIDIsIDEsIDExLCA3LFxuICAxNSwgNSwgMTIsIDExLCA5LCAzLCA3LCAxNCwgMywgMTAsIDEwLCAwLCA1LCA2LCAwLCAxMyxcblxuICAxNSwgMywgMSwgMTMsIDgsIDQsIDE0LCA3LCA2LCAxNSwgMTEsIDIsIDMsIDgsIDQsIDE0LFxuICA5LCAxMiwgNywgMCwgMiwgMSwgMTMsIDEwLCAxMiwgNiwgMCwgOSwgNSwgMTEsIDEwLCA1LFxuICAwLCAxMywgMTQsIDgsIDcsIDEwLCAxMSwgMSwgMTAsIDMsIDQsIDE1LCAxMywgNCwgMSwgMixcbiAgNSwgMTEsIDgsIDYsIDEyLCA3LCA2LCAxMiwgOSwgMCwgMywgNSwgMiwgMTQsIDE1LCA5LFxuXG4gIDEwLCAxMywgMCwgNywgOSwgMCwgMTQsIDksIDYsIDMsIDMsIDQsIDE1LCA2LCA1LCAxMCxcbiAgMSwgMiwgMTMsIDgsIDEyLCA1LCA3LCAxNCwgMTEsIDEyLCA0LCAxMSwgMiwgMTUsIDgsIDEsXG4gIDEzLCAxLCA2LCAxMCwgNCwgMTMsIDksIDAsIDgsIDYsIDE1LCA5LCAzLCA4LCAwLCA3LFxuICAxMSwgNCwgMSwgMTUsIDIsIDE0LCAxMiwgMywgNSwgMTEsIDEwLCA1LCAxNCwgMiwgNywgMTIsXG5cbiAgNywgMTMsIDEzLCA4LCAxNCwgMTEsIDMsIDUsIDAsIDYsIDYsIDE1LCA5LCAwLCAxMCwgMyxcbiAgMSwgNCwgMiwgNywgOCwgMiwgNSwgMTIsIDExLCAxLCAxMiwgMTAsIDQsIDE0LCAxNSwgOSxcbiAgMTAsIDMsIDYsIDE1LCA5LCAwLCAwLCA2LCAxMiwgMTAsIDExLCAxLCA3LCAxMywgMTMsIDgsXG4gIDE1LCA5LCAxLCA0LCAzLCA1LCAxNCwgMTEsIDUsIDEyLCAyLCA3LCA4LCAyLCA0LCAxNCxcblxuICAyLCAxNCwgMTIsIDExLCA0LCAyLCAxLCAxMiwgNywgNCwgMTAsIDcsIDExLCAxMywgNiwgMSxcbiAgOCwgNSwgNSwgMCwgMywgMTUsIDE1LCAxMCwgMTMsIDMsIDAsIDksIDE0LCA4LCA5LCA2LFxuICA0LCAxMSwgMiwgOCwgMSwgMTIsIDExLCA3LCAxMCwgMSwgMTMsIDE0LCA3LCAyLCA4LCAxMyxcbiAgMTUsIDYsIDksIDE1LCAxMiwgMCwgNSwgOSwgNiwgMTAsIDMsIDQsIDAsIDUsIDE0LCAzLFxuXG4gIDEyLCAxMCwgMSwgMTUsIDEwLCA0LCAxNSwgMiwgOSwgNywgMiwgMTIsIDYsIDksIDgsIDUsXG4gIDAsIDYsIDEzLCAxLCAzLCAxMywgNCwgMTQsIDE0LCAwLCA3LCAxMSwgNSwgMywgMTEsIDgsXG4gIDksIDQsIDE0LCAzLCAxNSwgMiwgNSwgMTIsIDIsIDksIDgsIDUsIDEyLCAxNSwgMywgMTAsXG4gIDcsIDExLCAwLCAxNCwgNCwgMSwgMTAsIDcsIDEsIDYsIDEzLCAwLCAxMSwgOCwgNiwgMTMsXG5cbiAgNCwgMTMsIDExLCAwLCAyLCAxMSwgMTQsIDcsIDE1LCA0LCAwLCA5LCA4LCAxLCAxMywgMTAsXG4gIDMsIDE0LCAxMiwgMywgOSwgNSwgNywgMTIsIDUsIDIsIDEwLCAxNSwgNiwgOCwgMSwgNixcbiAgMSwgNiwgNCwgMTEsIDExLCAxMywgMTMsIDgsIDEyLCAxLCAzLCA0LCA3LCAxMCwgMTQsIDcsXG4gIDEwLCA5LCAxNSwgNSwgNiwgMCwgOCwgMTUsIDAsIDE0LCA1LCAyLCA5LCAzLCAyLCAxMixcblxuICAxMywgMSwgMiwgMTUsIDgsIDEzLCA0LCA4LCA2LCAxMCwgMTUsIDMsIDExLCA3LCAxLCA0LFxuICAxMCwgMTIsIDksIDUsIDMsIDYsIDE0LCAxMSwgNSwgMCwgMCwgMTQsIDEyLCA5LCA3LCAyLFxuICA3LCAyLCAxMSwgMSwgNCwgMTQsIDEsIDcsIDksIDQsIDEyLCAxMCwgMTQsIDgsIDIsIDEzLFxuICAwLCAxNSwgNiwgMTIsIDEwLCA5LCAxMywgMCwgMTUsIDMsIDMsIDUsIDUsIDYsIDgsIDExXG5dO1xuXG5leHBvcnRzLnN1YnN0aXR1dGUgPSBmdW5jdGlvbiBzdWJzdGl0dXRlKGluTCwgaW5SKSB7XG4gIHZhciBvdXQgPSAwO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IDQ7IGkrKykge1xuICAgIHZhciBiID0gKGluTCA+Pj4gKDE4IC0gaSAqIDYpKSAmIDB4M2Y7XG4gICAgdmFyIHNiID0gc1RhYmxlW2kgKiAweDQwICsgYl07XG5cbiAgICBvdXQgPDw9IDQ7XG4gICAgb3V0IHw9IHNiO1xuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgNDsgaSsrKSB7XG4gICAgdmFyIGIgPSAoaW5SID4+PiAoMTggLSBpICogNikpICYgMHgzZjtcbiAgICB2YXIgc2IgPSBzVGFibGVbNCAqIDB4NDAgKyBpICogMHg0MCArIGJdO1xuXG4gICAgb3V0IDw8PSA0O1xuICAgIG91dCB8PSBzYjtcbiAgfVxuICByZXR1cm4gb3V0ID4+PiAwO1xufTtcblxudmFyIHBlcm11dGVUYWJsZSA9IFtcbiAgMTYsIDI1LCAxMiwgMTEsIDMsIDIwLCA0LCAxNSwgMzEsIDE3LCA5LCA2LCAyNywgMTQsIDEsIDIyLFxuICAzMCwgMjQsIDgsIDE4LCAwLCA1LCAyOSwgMjMsIDEzLCAxOSwgMiwgMjYsIDEwLCAyMSwgMjgsIDdcbl07XG5cbmV4cG9ydHMucGVybXV0ZSA9IGZ1bmN0aW9uIHBlcm11dGUobnVtKSB7XG4gIHZhciBvdXQgPSAwO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHBlcm11dGVUYWJsZS5sZW5ndGg7IGkrKykge1xuICAgIG91dCA8PD0gMTtcbiAgICBvdXQgfD0gKG51bSA+Pj4gcGVybXV0ZVRhYmxlW2ldKSAmIDB4MTtcbiAgfVxuICByZXR1cm4gb3V0ID4+PiAwO1xufTtcblxuZXhwb3J0cy5wYWRTcGxpdCA9IGZ1bmN0aW9uIHBhZFNwbGl0KG51bSwgc2l6ZSwgZ3JvdXApIHtcbiAgdmFyIHN0ciA9IG51bS50b1N0cmluZygyKTtcbiAgd2hpbGUgKHN0ci5sZW5ndGggPCBzaXplKVxuICAgIHN0ciA9ICcwJyArIHN0cjtcblxuICB2YXIgb3V0ID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc2l6ZTsgaSArPSBncm91cClcbiAgICBvdXQucHVzaChzdHIuc2xpY2UoaSwgaSArIGdyb3VwKSk7XG4gIHJldHVybiBvdXQuam9pbignICcpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGFzc2VydCA9IHJlcXVpcmUoJ21pbmltYWxpc3RpYy1hc3NlcnQnKTtcblxuZnVuY3Rpb24gQ2lwaGVyKG9wdGlvbnMpIHtcbiAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcblxuICB0aGlzLnR5cGUgPSB0aGlzLm9wdGlvbnMudHlwZTtcbiAgdGhpcy5ibG9ja1NpemUgPSA4O1xuICB0aGlzLl9pbml0KCk7XG5cbiAgdGhpcy5idWZmZXIgPSBuZXcgQXJyYXkodGhpcy5ibG9ja1NpemUpO1xuICB0aGlzLmJ1ZmZlck9mZiA9IDA7XG59XG5tb2R1bGUuZXhwb3J0cyA9IENpcGhlcjtcblxuQ2lwaGVyLnByb3RvdHlwZS5faW5pdCA9IGZ1bmN0aW9uIF9pbml0KCkge1xuICAvLyBNaWdodCBiZSBvdmVycmlkZWRcbn07XG5cbkNpcGhlci5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlKGRhdGEpIHtcbiAgaWYgKGRhdGEubGVuZ3RoID09PSAwKVxuICAgIHJldHVybiBbXTtcblxuICBpZiAodGhpcy50eXBlID09PSAnZGVjcnlwdCcpXG4gICAgcmV0dXJuIHRoaXMuX3VwZGF0ZURlY3J5cHQoZGF0YSk7XG4gIGVsc2VcbiAgICByZXR1cm4gdGhpcy5fdXBkYXRlRW5jcnlwdChkYXRhKTtcbn07XG5cbkNpcGhlci5wcm90b3R5cGUuX2J1ZmZlciA9IGZ1bmN0aW9uIF9idWZmZXIoZGF0YSwgb2ZmKSB7XG4gIC8vIEFwcGVuZCBkYXRhIHRvIGJ1ZmZlclxuICB2YXIgbWluID0gTWF0aC5taW4odGhpcy5idWZmZXIubGVuZ3RoIC0gdGhpcy5idWZmZXJPZmYsIGRhdGEubGVuZ3RoIC0gb2ZmKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBtaW47IGkrKylcbiAgICB0aGlzLmJ1ZmZlclt0aGlzLmJ1ZmZlck9mZiArIGldID0gZGF0YVtvZmYgKyBpXTtcbiAgdGhpcy5idWZmZXJPZmYgKz0gbWluO1xuXG4gIC8vIFNoaWZ0IG5leHRcbiAgcmV0dXJuIG1pbjtcbn07XG5cbkNpcGhlci5wcm90b3R5cGUuX2ZsdXNoQnVmZmVyID0gZnVuY3Rpb24gX2ZsdXNoQnVmZmVyKG91dCwgb2ZmKSB7XG4gIHRoaXMuX3VwZGF0ZSh0aGlzLmJ1ZmZlciwgMCwgb3V0LCBvZmYpO1xuICB0aGlzLmJ1ZmZlck9mZiA9IDA7XG4gIHJldHVybiB0aGlzLmJsb2NrU2l6ZTtcbn07XG5cbkNpcGhlci5wcm90b3R5cGUuX3VwZGF0ZUVuY3J5cHQgPSBmdW5jdGlvbiBfdXBkYXRlRW5jcnlwdChkYXRhKSB7XG4gIHZhciBpbnB1dE9mZiA9IDA7XG4gIHZhciBvdXRwdXRPZmYgPSAwO1xuXG4gIHZhciBjb3VudCA9ICgodGhpcy5idWZmZXJPZmYgKyBkYXRhLmxlbmd0aCkgLyB0aGlzLmJsb2NrU2l6ZSkgfCAwO1xuICB2YXIgb3V0ID0gbmV3IEFycmF5KGNvdW50ICogdGhpcy5ibG9ja1NpemUpO1xuXG4gIGlmICh0aGlzLmJ1ZmZlck9mZiAhPT0gMCkge1xuICAgIGlucHV0T2ZmICs9IHRoaXMuX2J1ZmZlcihkYXRhLCBpbnB1dE9mZik7XG5cbiAgICBpZiAodGhpcy5idWZmZXJPZmYgPT09IHRoaXMuYnVmZmVyLmxlbmd0aClcbiAgICAgIG91dHB1dE9mZiArPSB0aGlzLl9mbHVzaEJ1ZmZlcihvdXQsIG91dHB1dE9mZik7XG4gIH1cblxuICAvLyBXcml0ZSBibG9ja3NcbiAgdmFyIG1heCA9IGRhdGEubGVuZ3RoIC0gKChkYXRhLmxlbmd0aCAtIGlucHV0T2ZmKSAlIHRoaXMuYmxvY2tTaXplKTtcbiAgZm9yICg7IGlucHV0T2ZmIDwgbWF4OyBpbnB1dE9mZiArPSB0aGlzLmJsb2NrU2l6ZSkge1xuICAgIHRoaXMuX3VwZGF0ZShkYXRhLCBpbnB1dE9mZiwgb3V0LCBvdXRwdXRPZmYpO1xuICAgIG91dHB1dE9mZiArPSB0aGlzLmJsb2NrU2l6ZTtcbiAgfVxuXG4gIC8vIFF1ZXVlIHJlc3RcbiAgZm9yICg7IGlucHV0T2ZmIDwgZGF0YS5sZW5ndGg7IGlucHV0T2ZmKyssIHRoaXMuYnVmZmVyT2ZmKyspXG4gICAgdGhpcy5idWZmZXJbdGhpcy5idWZmZXJPZmZdID0gZGF0YVtpbnB1dE9mZl07XG5cbiAgcmV0dXJuIG91dDtcbn07XG5cbkNpcGhlci5wcm90b3R5cGUuX3VwZGF0ZURlY3J5cHQgPSBmdW5jdGlvbiBfdXBkYXRlRGVjcnlwdChkYXRhKSB7XG4gIHZhciBpbnB1dE9mZiA9IDA7XG4gIHZhciBvdXRwdXRPZmYgPSAwO1xuXG4gIHZhciBjb3VudCA9IE1hdGguY2VpbCgodGhpcy5idWZmZXJPZmYgKyBkYXRhLmxlbmd0aCkgLyB0aGlzLmJsb2NrU2l6ZSkgLSAxO1xuICB2YXIgb3V0ID0gbmV3IEFycmF5KGNvdW50ICogdGhpcy5ibG9ja1NpemUpO1xuXG4gIC8vIFRPRE8oaW5kdXRueSk6IG9wdGltaXplIGl0LCB0aGlzIGlzIGZhciBmcm9tIG9wdGltYWxcbiAgZm9yICg7IGNvdW50ID4gMDsgY291bnQtLSkge1xuICAgIGlucHV0T2ZmICs9IHRoaXMuX2J1ZmZlcihkYXRhLCBpbnB1dE9mZik7XG4gICAgb3V0cHV0T2ZmICs9IHRoaXMuX2ZsdXNoQnVmZmVyKG91dCwgb3V0cHV0T2ZmKTtcbiAgfVxuXG4gIC8vIEJ1ZmZlciByZXN0IG9mIHRoZSBpbnB1dFxuICBpbnB1dE9mZiArPSB0aGlzLl9idWZmZXIoZGF0YSwgaW5wdXRPZmYpO1xuXG4gIHJldHVybiBvdXQ7XG59O1xuXG5DaXBoZXIucHJvdG90eXBlLmZpbmFsID0gZnVuY3Rpb24gZmluYWwoYnVmZmVyKSB7XG4gIHZhciBmaXJzdDtcbiAgaWYgKGJ1ZmZlcilcbiAgICBmaXJzdCA9IHRoaXMudXBkYXRlKGJ1ZmZlcik7XG5cbiAgdmFyIGxhc3Q7XG4gIGlmICh0aGlzLnR5cGUgPT09ICdlbmNyeXB0JylcbiAgICBsYXN0ID0gdGhpcy5fZmluYWxFbmNyeXB0KCk7XG4gIGVsc2VcbiAgICBsYXN0ID0gdGhpcy5fZmluYWxEZWNyeXB0KCk7XG5cbiAgaWYgKGZpcnN0KVxuICAgIHJldHVybiBmaXJzdC5jb25jYXQobGFzdCk7XG4gIGVsc2VcbiAgICByZXR1cm4gbGFzdDtcbn07XG5cbkNpcGhlci5wcm90b3R5cGUuX3BhZCA9IGZ1bmN0aW9uIF9wYWQoYnVmZmVyLCBvZmYpIHtcbiAgaWYgKG9mZiA9PT0gMClcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgd2hpbGUgKG9mZiA8IGJ1ZmZlci5sZW5ndGgpXG4gICAgYnVmZmVyW29mZisrXSA9IDA7XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuXG5DaXBoZXIucHJvdG90eXBlLl9maW5hbEVuY3J5cHQgPSBmdW5jdGlvbiBfZmluYWxFbmNyeXB0KCkge1xuICBpZiAoIXRoaXMuX3BhZCh0aGlzLmJ1ZmZlciwgdGhpcy5idWZmZXJPZmYpKVxuICAgIHJldHVybiBbXTtcblxuICB2YXIgb3V0ID0gbmV3IEFycmF5KHRoaXMuYmxvY2tTaXplKTtcbiAgdGhpcy5fdXBkYXRlKHRoaXMuYnVmZmVyLCAwLCBvdXQsIDApO1xuICByZXR1cm4gb3V0O1xufTtcblxuQ2lwaGVyLnByb3RvdHlwZS5fdW5wYWQgPSBmdW5jdGlvbiBfdW5wYWQoYnVmZmVyKSB7XG4gIHJldHVybiBidWZmZXI7XG59O1xuXG5DaXBoZXIucHJvdG90eXBlLl9maW5hbERlY3J5cHQgPSBmdW5jdGlvbiBfZmluYWxEZWNyeXB0KCkge1xuICBhc3NlcnQuZXF1YWwodGhpcy5idWZmZXJPZmYsIHRoaXMuYmxvY2tTaXplLCAnTm90IGVub3VnaCBkYXRhIHRvIGRlY3J5cHQnKTtcbiAgdmFyIG91dCA9IG5ldyBBcnJheSh0aGlzLmJsb2NrU2l6ZSk7XG4gIHRoaXMuX2ZsdXNoQnVmZmVyKG91dCwgMCk7XG5cbiAgcmV0dXJuIHRoaXMuX3VucGFkKG91dCk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYXNzZXJ0ID0gcmVxdWlyZSgnbWluaW1hbGlzdGljLWFzc2VydCcpO1xudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcblxudmFyIGRlcyA9IHJlcXVpcmUoJy4uL2RlcycpO1xudmFyIHV0aWxzID0gZGVzLnV0aWxzO1xudmFyIENpcGhlciA9IGRlcy5DaXBoZXI7XG5cbmZ1bmN0aW9uIERFU1N0YXRlKCkge1xuICB0aGlzLnRtcCA9IG5ldyBBcnJheSgyKTtcbiAgdGhpcy5rZXlzID0gbnVsbDtcbn1cblxuZnVuY3Rpb24gREVTKG9wdGlvbnMpIHtcbiAgQ2lwaGVyLmNhbGwodGhpcywgb3B0aW9ucyk7XG5cbiAgdmFyIHN0YXRlID0gbmV3IERFU1N0YXRlKCk7XG4gIHRoaXMuX2Rlc1N0YXRlID0gc3RhdGU7XG5cbiAgdGhpcy5kZXJpdmVLZXlzKHN0YXRlLCBvcHRpb25zLmtleSk7XG59XG5pbmhlcml0cyhERVMsIENpcGhlcik7XG5tb2R1bGUuZXhwb3J0cyA9IERFUztcblxuREVTLmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShvcHRpb25zKSB7XG4gIHJldHVybiBuZXcgREVTKG9wdGlvbnMpO1xufTtcblxudmFyIHNoaWZ0VGFibGUgPSBbXG4gIDEsIDEsIDIsIDIsIDIsIDIsIDIsIDIsXG4gIDEsIDIsIDIsIDIsIDIsIDIsIDIsIDFcbl07XG5cbkRFUy5wcm90b3R5cGUuZGVyaXZlS2V5cyA9IGZ1bmN0aW9uIGRlcml2ZUtleXMoc3RhdGUsIGtleSkge1xuICBzdGF0ZS5rZXlzID0gbmV3IEFycmF5KDE2ICogMik7XG5cbiAgYXNzZXJ0LmVxdWFsKGtleS5sZW5ndGgsIHRoaXMuYmxvY2tTaXplLCAnSW52YWxpZCBrZXkgbGVuZ3RoJyk7XG5cbiAgdmFyIGtMID0gdXRpbHMucmVhZFVJbnQzMkJFKGtleSwgMCk7XG4gIHZhciBrUiA9IHV0aWxzLnJlYWRVSW50MzJCRShrZXksIDQpO1xuXG4gIHV0aWxzLnBjMShrTCwga1IsIHN0YXRlLnRtcCwgMCk7XG4gIGtMID0gc3RhdGUudG1wWzBdO1xuICBrUiA9IHN0YXRlLnRtcFsxXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdGF0ZS5rZXlzLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgdmFyIHNoaWZ0ID0gc2hpZnRUYWJsZVtpID4+PiAxXTtcbiAgICBrTCA9IHV0aWxzLnIyOHNobChrTCwgc2hpZnQpO1xuICAgIGtSID0gdXRpbHMucjI4c2hsKGtSLCBzaGlmdCk7XG4gICAgdXRpbHMucGMyKGtMLCBrUiwgc3RhdGUua2V5cywgaSk7XG4gIH1cbn07XG5cbkRFUy5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIF91cGRhdGUoaW5wLCBpbk9mZiwgb3V0LCBvdXRPZmYpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fZGVzU3RhdGU7XG5cbiAgdmFyIGwgPSB1dGlscy5yZWFkVUludDMyQkUoaW5wLCBpbk9mZik7XG4gIHZhciByID0gdXRpbHMucmVhZFVJbnQzMkJFKGlucCwgaW5PZmYgKyA0KTtcblxuICAvLyBJbml0aWFsIFBlcm11dGF0aW9uXG4gIHV0aWxzLmlwKGwsIHIsIHN0YXRlLnRtcCwgMCk7XG4gIGwgPSBzdGF0ZS50bXBbMF07XG4gIHIgPSBzdGF0ZS50bXBbMV07XG5cbiAgaWYgKHRoaXMudHlwZSA9PT0gJ2VuY3J5cHQnKVxuICAgIHRoaXMuX2VuY3J5cHQoc3RhdGUsIGwsIHIsIHN0YXRlLnRtcCwgMCk7XG4gIGVsc2VcbiAgICB0aGlzLl9kZWNyeXB0KHN0YXRlLCBsLCByLCBzdGF0ZS50bXAsIDApO1xuXG4gIGwgPSBzdGF0ZS50bXBbMF07XG4gIHIgPSBzdGF0ZS50bXBbMV07XG5cbiAgdXRpbHMud3JpdGVVSW50MzJCRShvdXQsIGwsIG91dE9mZik7XG4gIHV0aWxzLndyaXRlVUludDMyQkUob3V0LCByLCBvdXRPZmYgKyA0KTtcbn07XG5cbkRFUy5wcm90b3R5cGUuX3BhZCA9IGZ1bmN0aW9uIF9wYWQoYnVmZmVyLCBvZmYpIHtcbiAgdmFyIHZhbHVlID0gYnVmZmVyLmxlbmd0aCAtIG9mZjtcbiAgZm9yICh2YXIgaSA9IG9mZjsgaSA8IGJ1ZmZlci5sZW5ndGg7IGkrKylcbiAgICBidWZmZXJbaV0gPSB2YWx1ZTtcblxuICByZXR1cm4gdHJ1ZTtcbn07XG5cbkRFUy5wcm90b3R5cGUuX3VucGFkID0gZnVuY3Rpb24gX3VucGFkKGJ1ZmZlcikge1xuICB2YXIgcGFkID0gYnVmZmVyW2J1ZmZlci5sZW5ndGggLSAxXTtcbiAgZm9yICh2YXIgaSA9IGJ1ZmZlci5sZW5ndGggLSBwYWQ7IGkgPCBidWZmZXIubGVuZ3RoOyBpKyspXG4gICAgYXNzZXJ0LmVxdWFsKGJ1ZmZlcltpXSwgcGFkKTtcblxuICByZXR1cm4gYnVmZmVyLnNsaWNlKDAsIGJ1ZmZlci5sZW5ndGggLSBwYWQpO1xufTtcblxuREVTLnByb3RvdHlwZS5fZW5jcnlwdCA9IGZ1bmN0aW9uIF9lbmNyeXB0KHN0YXRlLCBsU3RhcnQsIHJTdGFydCwgb3V0LCBvZmYpIHtcbiAgdmFyIGwgPSBsU3RhcnQ7XG4gIHZhciByID0gclN0YXJ0O1xuXG4gIC8vIEFwcGx5IGYoKSB4MTYgdGltZXNcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdGF0ZS5rZXlzLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgdmFyIGtleUwgPSBzdGF0ZS5rZXlzW2ldO1xuICAgIHZhciBrZXlSID0gc3RhdGUua2V5c1tpICsgMV07XG5cbiAgICAvLyBmKHIsIGspXG4gICAgdXRpbHMuZXhwYW5kKHIsIHN0YXRlLnRtcCwgMCk7XG5cbiAgICBrZXlMIF49IHN0YXRlLnRtcFswXTtcbiAgICBrZXlSIF49IHN0YXRlLnRtcFsxXTtcbiAgICB2YXIgcyA9IHV0aWxzLnN1YnN0aXR1dGUoa2V5TCwga2V5Uik7XG4gICAgdmFyIGYgPSB1dGlscy5wZXJtdXRlKHMpO1xuXG4gICAgdmFyIHQgPSByO1xuICAgIHIgPSAobCBeIGYpID4+PiAwO1xuICAgIGwgPSB0O1xuICB9XG5cbiAgLy8gUmV2ZXJzZSBJbml0aWFsIFBlcm11dGF0aW9uXG4gIHV0aWxzLnJpcChyLCBsLCBvdXQsIG9mZik7XG59O1xuXG5ERVMucHJvdG90eXBlLl9kZWNyeXB0ID0gZnVuY3Rpb24gX2RlY3J5cHQoc3RhdGUsIGxTdGFydCwgclN0YXJ0LCBvdXQsIG9mZikge1xuICB2YXIgbCA9IHJTdGFydDtcbiAgdmFyIHIgPSBsU3RhcnQ7XG5cbiAgLy8gQXBwbHkgZigpIHgxNiB0aW1lc1xuICBmb3IgKHZhciBpID0gc3RhdGUua2V5cy5sZW5ndGggLSAyOyBpID49IDA7IGkgLT0gMikge1xuICAgIHZhciBrZXlMID0gc3RhdGUua2V5c1tpXTtcbiAgICB2YXIga2V5UiA9IHN0YXRlLmtleXNbaSArIDFdO1xuXG4gICAgLy8gZihyLCBrKVxuICAgIHV0aWxzLmV4cGFuZChsLCBzdGF0ZS50bXAsIDApO1xuXG4gICAga2V5TCBePSBzdGF0ZS50bXBbMF07XG4gICAga2V5UiBePSBzdGF0ZS50bXBbMV07XG4gICAgdmFyIHMgPSB1dGlscy5zdWJzdGl0dXRlKGtleUwsIGtleVIpO1xuICAgIHZhciBmID0gdXRpbHMucGVybXV0ZShzKTtcblxuICAgIHZhciB0ID0gbDtcbiAgICBsID0gKHIgXiBmKSA+Pj4gMDtcbiAgICByID0gdDtcbiAgfVxuXG4gIC8vIFJldmVyc2UgSW5pdGlhbCBQZXJtdXRhdGlvblxuICB1dGlscy5yaXAobCwgciwgb3V0LCBvZmYpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGFzc2VydCA9IHJlcXVpcmUoJ21pbmltYWxpc3RpYy1hc3NlcnQnKTtcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG5cbnZhciBwcm90byA9IHt9O1xuXG5mdW5jdGlvbiBDQkNTdGF0ZShpdikge1xuICBhc3NlcnQuZXF1YWwoaXYubGVuZ3RoLCA4LCAnSW52YWxpZCBJViBsZW5ndGgnKTtcblxuICB0aGlzLml2ID0gbmV3IEFycmF5KDgpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuaXYubGVuZ3RoOyBpKyspXG4gICAgdGhpcy5pdltpXSA9IGl2W2ldO1xufVxuXG5mdW5jdGlvbiBpbnN0YW50aWF0ZShCYXNlKSB7XG4gIGZ1bmN0aW9uIENCQyhvcHRpb25zKSB7XG4gICAgQmFzZS5jYWxsKHRoaXMsIG9wdGlvbnMpO1xuICAgIHRoaXMuX2NiY0luaXQoKTtcbiAgfVxuICBpbmhlcml0cyhDQkMsIEJhc2UpO1xuXG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMocHJvdG8pO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICBDQkMucHJvdG90eXBlW2tleV0gPSBwcm90b1trZXldO1xuICB9XG5cbiAgQ0JDLmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShvcHRpb25zKSB7XG4gICAgcmV0dXJuIG5ldyBDQkMob3B0aW9ucyk7XG4gIH07XG5cbiAgcmV0dXJuIENCQztcbn1cblxuZXhwb3J0cy5pbnN0YW50aWF0ZSA9IGluc3RhbnRpYXRlO1xuXG5wcm90by5fY2JjSW5pdCA9IGZ1bmN0aW9uIF9jYmNJbml0KCkge1xuICB2YXIgc3RhdGUgPSBuZXcgQ0JDU3RhdGUodGhpcy5vcHRpb25zLml2KTtcbiAgdGhpcy5fY2JjU3RhdGUgPSBzdGF0ZTtcbn07XG5cbnByb3RvLl91cGRhdGUgPSBmdW5jdGlvbiBfdXBkYXRlKGlucCwgaW5PZmYsIG91dCwgb3V0T2ZmKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX2NiY1N0YXRlO1xuICB2YXIgc3VwZXJQcm90byA9IHRoaXMuY29uc3RydWN0b3Iuc3VwZXJfLnByb3RvdHlwZTtcblxuICB2YXIgaXYgPSBzdGF0ZS5pdjtcbiAgaWYgKHRoaXMudHlwZSA9PT0gJ2VuY3J5cHQnKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmJsb2NrU2l6ZTsgaSsrKVxuICAgICAgaXZbaV0gXj0gaW5wW2luT2ZmICsgaV07XG5cbiAgICBzdXBlclByb3RvLl91cGRhdGUuY2FsbCh0aGlzLCBpdiwgMCwgb3V0LCBvdXRPZmYpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmJsb2NrU2l6ZTsgaSsrKVxuICAgICAgaXZbaV0gPSBvdXRbb3V0T2ZmICsgaV07XG4gIH0gZWxzZSB7XG4gICAgc3VwZXJQcm90by5fdXBkYXRlLmNhbGwodGhpcywgaW5wLCBpbk9mZiwgb3V0LCBvdXRPZmYpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmJsb2NrU2l6ZTsgaSsrKVxuICAgICAgb3V0W291dE9mZiArIGldIF49IGl2W2ldO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmJsb2NrU2l6ZTsgaSsrKVxuICAgICAgaXZbaV0gPSBpbnBbaW5PZmYgKyBpXTtcbiAgfVxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGFzc2VydCA9IHJlcXVpcmUoJ21pbmltYWxpc3RpYy1hc3NlcnQnKTtcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG5cbnZhciBkZXMgPSByZXF1aXJlKCcuLi9kZXMnKTtcbnZhciBDaXBoZXIgPSBkZXMuQ2lwaGVyO1xudmFyIERFUyA9IGRlcy5ERVM7XG5cbmZ1bmN0aW9uIEVERVN0YXRlKHR5cGUsIGtleSkge1xuICBhc3NlcnQuZXF1YWwoa2V5Lmxlbmd0aCwgMjQsICdJbnZhbGlkIGtleSBsZW5ndGgnKTtcblxuICB2YXIgazEgPSBrZXkuc2xpY2UoMCwgOCk7XG4gIHZhciBrMiA9IGtleS5zbGljZSg4LCAxNik7XG4gIHZhciBrMyA9IGtleS5zbGljZSgxNiwgMjQpO1xuXG4gIGlmICh0eXBlID09PSAnZW5jcnlwdCcpIHtcbiAgICB0aGlzLmNpcGhlcnMgPSBbXG4gICAgICBERVMuY3JlYXRlKHsgdHlwZTogJ2VuY3J5cHQnLCBrZXk6IGsxIH0pLFxuICAgICAgREVTLmNyZWF0ZSh7IHR5cGU6ICdkZWNyeXB0Jywga2V5OiBrMiB9KSxcbiAgICAgIERFUy5jcmVhdGUoeyB0eXBlOiAnZW5jcnlwdCcsIGtleTogazMgfSlcbiAgICBdO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuY2lwaGVycyA9IFtcbiAgICAgIERFUy5jcmVhdGUoeyB0eXBlOiAnZGVjcnlwdCcsIGtleTogazMgfSksXG4gICAgICBERVMuY3JlYXRlKHsgdHlwZTogJ2VuY3J5cHQnLCBrZXk6IGsyIH0pLFxuICAgICAgREVTLmNyZWF0ZSh7IHR5cGU6ICdkZWNyeXB0Jywga2V5OiBrMSB9KVxuICAgIF07XG4gIH1cbn1cblxuZnVuY3Rpb24gRURFKG9wdGlvbnMpIHtcbiAgQ2lwaGVyLmNhbGwodGhpcywgb3B0aW9ucyk7XG5cbiAgdmFyIHN0YXRlID0gbmV3IEVERVN0YXRlKHRoaXMudHlwZSwgdGhpcy5vcHRpb25zLmtleSk7XG4gIHRoaXMuX2VkZVN0YXRlID0gc3RhdGU7XG59XG5pbmhlcml0cyhFREUsIENpcGhlcik7XG5cbm1vZHVsZS5leHBvcnRzID0gRURFO1xuXG5FREUuY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKG9wdGlvbnMpIHtcbiAgcmV0dXJuIG5ldyBFREUob3B0aW9ucyk7XG59O1xuXG5FREUucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiBfdXBkYXRlKGlucCwgaW5PZmYsIG91dCwgb3V0T2ZmKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX2VkZVN0YXRlO1xuXG4gIHN0YXRlLmNpcGhlcnNbMF0uX3VwZGF0ZShpbnAsIGluT2ZmLCBvdXQsIG91dE9mZik7XG4gIHN0YXRlLmNpcGhlcnNbMV0uX3VwZGF0ZShvdXQsIG91dE9mZiwgb3V0LCBvdXRPZmYpO1xuICBzdGF0ZS5jaXBoZXJzWzJdLl91cGRhdGUob3V0LCBvdXRPZmYsIG91dCwgb3V0T2ZmKTtcbn07XG5cbkVERS5wcm90b3R5cGUuX3BhZCA9IERFUy5wcm90b3R5cGUuX3BhZDtcbkVERS5wcm90b3R5cGUuX3VucGFkID0gREVTLnByb3RvdHlwZS5fdW5wYWQ7XG4iLCJ2YXIgTU9ERVMgPSByZXF1aXJlKCcuL21vZGVzJylcbnZhciBBdXRoQ2lwaGVyID0gcmVxdWlyZSgnLi9hdXRoQ2lwaGVyJylcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxudmFyIFN0cmVhbUNpcGhlciA9IHJlcXVpcmUoJy4vc3RyZWFtQ2lwaGVyJylcbnZhciBUcmFuc2Zvcm0gPSByZXF1aXJlKCdjaXBoZXItYmFzZScpXG52YXIgYWVzID0gcmVxdWlyZSgnLi9hZXMnKVxudmFyIGVidGsgPSByZXF1aXJlKCdldnBfYnl0ZXN0b2tleScpXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG5cbmZ1bmN0aW9uIENpcGhlciAobW9kZSwga2V5LCBpdikge1xuICBUcmFuc2Zvcm0uY2FsbCh0aGlzKVxuXG4gIHRoaXMuX2NhY2hlID0gbmV3IFNwbGl0dGVyKClcbiAgdGhpcy5fY2lwaGVyID0gbmV3IGFlcy5BRVMoa2V5KVxuICB0aGlzLl9wcmV2ID0gQnVmZmVyLmZyb20oaXYpXG4gIHRoaXMuX21vZGUgPSBtb2RlXG4gIHRoaXMuX2F1dG9wYWRkaW5nID0gdHJ1ZVxufVxuXG5pbmhlcml0cyhDaXBoZXIsIFRyYW5zZm9ybSlcblxuQ2lwaGVyLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgdGhpcy5fY2FjaGUuYWRkKGRhdGEpXG4gIHZhciBjaHVua1xuICB2YXIgdGhpbmdcbiAgdmFyIG91dCA9IFtdXG5cbiAgd2hpbGUgKChjaHVuayA9IHRoaXMuX2NhY2hlLmdldCgpKSkge1xuICAgIHRoaW5nID0gdGhpcy5fbW9kZS5lbmNyeXB0KHRoaXMsIGNodW5rKVxuICAgIG91dC5wdXNoKHRoaW5nKVxuICB9XG5cbiAgcmV0dXJuIEJ1ZmZlci5jb25jYXQob3V0KVxufVxuXG52YXIgUEFERElORyA9IEJ1ZmZlci5hbGxvYygxNiwgMHgxMClcblxuQ2lwaGVyLnByb3RvdHlwZS5fZmluYWwgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBjaHVuayA9IHRoaXMuX2NhY2hlLmZsdXNoKClcbiAgaWYgKHRoaXMuX2F1dG9wYWRkaW5nKSB7XG4gICAgY2h1bmsgPSB0aGlzLl9tb2RlLmVuY3J5cHQodGhpcywgY2h1bmspXG4gICAgdGhpcy5fY2lwaGVyLnNjcnViKClcbiAgICByZXR1cm4gY2h1bmtcbiAgfVxuXG4gIGlmICghY2h1bmsuZXF1YWxzKFBBRERJTkcpKSB7XG4gICAgdGhpcy5fY2lwaGVyLnNjcnViKClcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2RhdGEgbm90IG11bHRpcGxlIG9mIGJsb2NrIGxlbmd0aCcpXG4gIH1cbn1cblxuQ2lwaGVyLnByb3RvdHlwZS5zZXRBdXRvUGFkZGluZyA9IGZ1bmN0aW9uIChzZXRUbykge1xuICB0aGlzLl9hdXRvcGFkZGluZyA9ICEhc2V0VG9cbiAgcmV0dXJuIHRoaXNcbn1cblxuZnVuY3Rpb24gU3BsaXR0ZXIgKCkge1xuICB0aGlzLmNhY2hlID0gQnVmZmVyLmFsbG9jVW5zYWZlKDApXG59XG5cblNwbGl0dGVyLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiAoZGF0YSkge1xuICB0aGlzLmNhY2hlID0gQnVmZmVyLmNvbmNhdChbdGhpcy5jYWNoZSwgZGF0YV0pXG59XG5cblNwbGl0dGVyLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLmNhY2hlLmxlbmd0aCA+IDE1KSB7XG4gICAgdmFyIG91dCA9IHRoaXMuY2FjaGUuc2xpY2UoMCwgMTYpXG4gICAgdGhpcy5jYWNoZSA9IHRoaXMuY2FjaGUuc2xpY2UoMTYpXG4gICAgcmV0dXJuIG91dFxuICB9XG4gIHJldHVybiBudWxsXG59XG5cblNwbGl0dGVyLnByb3RvdHlwZS5mbHVzaCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGxlbiA9IDE2IC0gdGhpcy5jYWNoZS5sZW5ndGhcbiAgdmFyIHBhZEJ1ZmYgPSBCdWZmZXIuYWxsb2NVbnNhZmUobGVuKVxuXG4gIHZhciBpID0gLTFcbiAgd2hpbGUgKCsraSA8IGxlbikge1xuICAgIHBhZEJ1ZmYud3JpdGVVSW50OChsZW4sIGkpXG4gIH1cblxuICByZXR1cm4gQnVmZmVyLmNvbmNhdChbdGhpcy5jYWNoZSwgcGFkQnVmZl0pXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUNpcGhlcml2IChzdWl0ZSwgcGFzc3dvcmQsIGl2KSB7XG4gIHZhciBjb25maWcgPSBNT0RFU1tzdWl0ZS50b0xvd2VyQ2FzZSgpXVxuICBpZiAoIWNvbmZpZykgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBzdWl0ZSB0eXBlJylcblxuICBpZiAodHlwZW9mIHBhc3N3b3JkID09PSAnc3RyaW5nJykgcGFzc3dvcmQgPSBCdWZmZXIuZnJvbShwYXNzd29yZClcbiAgaWYgKHBhc3N3b3JkLmxlbmd0aCAhPT0gY29uZmlnLmtleSAvIDgpIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQga2V5IGxlbmd0aCAnICsgcGFzc3dvcmQubGVuZ3RoKVxuXG4gIGlmICh0eXBlb2YgaXYgPT09ICdzdHJpbmcnKSBpdiA9IEJ1ZmZlci5mcm9tKGl2KVxuICBpZiAoY29uZmlnLm1vZGUgIT09ICdHQ00nICYmIGl2Lmxlbmd0aCAhPT0gY29uZmlnLml2KSB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIGl2IGxlbmd0aCAnICsgaXYubGVuZ3RoKVxuXG4gIGlmIChjb25maWcudHlwZSA9PT0gJ3N0cmVhbScpIHtcbiAgICByZXR1cm4gbmV3IFN0cmVhbUNpcGhlcihjb25maWcubW9kdWxlLCBwYXNzd29yZCwgaXYpXG4gIH0gZWxzZSBpZiAoY29uZmlnLnR5cGUgPT09ICdhdXRoJykge1xuICAgIHJldHVybiBuZXcgQXV0aENpcGhlcihjb25maWcubW9kdWxlLCBwYXNzd29yZCwgaXYpXG4gIH1cblxuICByZXR1cm4gbmV3IENpcGhlcihjb25maWcubW9kdWxlLCBwYXNzd29yZCwgaXYpXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUNpcGhlciAoc3VpdGUsIHBhc3N3b3JkKSB7XG4gIHZhciBjb25maWcgPSBNT0RFU1tzdWl0ZS50b0xvd2VyQ2FzZSgpXVxuICBpZiAoIWNvbmZpZykgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBzdWl0ZSB0eXBlJylcblxuICB2YXIga2V5cyA9IGVidGsocGFzc3dvcmQsIGZhbHNlLCBjb25maWcua2V5LCBjb25maWcuaXYpXG4gIHJldHVybiBjcmVhdGVDaXBoZXJpdihzdWl0ZSwga2V5cy5rZXksIGtleXMuaXYpXG59XG5cbmV4cG9ydHMuY3JlYXRlQ2lwaGVyaXYgPSBjcmVhdGVDaXBoZXJpdlxuZXhwb3J0cy5jcmVhdGVDaXBoZXIgPSBjcmVhdGVDaXBoZXJcbiIsImV4cG9ydHMuZW5jcnlwdCA9IGZ1bmN0aW9uIChzZWxmLCBibG9jaykge1xuICByZXR1cm4gc2VsZi5fY2lwaGVyLmVuY3J5cHRCbG9jayhibG9jaylcbn1cblxuZXhwb3J0cy5kZWNyeXB0ID0gZnVuY3Rpb24gKHNlbGYsIGJsb2NrKSB7XG4gIHJldHVybiBzZWxmLl9jaXBoZXIuZGVjcnlwdEJsb2NrKGJsb2NrKVxufVxuIiwidmFyIHhvciA9IHJlcXVpcmUoJ2J1ZmZlci14b3InKVxuXG5leHBvcnRzLmVuY3J5cHQgPSBmdW5jdGlvbiAoc2VsZiwgYmxvY2spIHtcbiAgdmFyIGRhdGEgPSB4b3IoYmxvY2ssIHNlbGYuX3ByZXYpXG5cbiAgc2VsZi5fcHJldiA9IHNlbGYuX2NpcGhlci5lbmNyeXB0QmxvY2soZGF0YSlcbiAgcmV0dXJuIHNlbGYuX3ByZXZcbn1cblxuZXhwb3J0cy5kZWNyeXB0ID0gZnVuY3Rpb24gKHNlbGYsIGJsb2NrKSB7XG4gIHZhciBwYWQgPSBzZWxmLl9wcmV2XG5cbiAgc2VsZi5fcHJldiA9IGJsb2NrXG4gIHZhciBvdXQgPSBzZWxmLl9jaXBoZXIuZGVjcnlwdEJsb2NrKGJsb2NrKVxuXG4gIHJldHVybiB4b3Iob3V0LCBwYWQpXG59XG4iLCJ2YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcbnZhciB4b3IgPSByZXF1aXJlKCdidWZmZXIteG9yJylcblxuZnVuY3Rpb24gZW5jcnlwdFN0YXJ0IChzZWxmLCBkYXRhLCBkZWNyeXB0KSB7XG4gIHZhciBsZW4gPSBkYXRhLmxlbmd0aFxuICB2YXIgb3V0ID0geG9yKGRhdGEsIHNlbGYuX2NhY2hlKVxuICBzZWxmLl9jYWNoZSA9IHNlbGYuX2NhY2hlLnNsaWNlKGxlbilcbiAgc2VsZi5fcHJldiA9IEJ1ZmZlci5jb25jYXQoW3NlbGYuX3ByZXYsIGRlY3J5cHQgPyBkYXRhIDogb3V0XSlcbiAgcmV0dXJuIG91dFxufVxuXG5leHBvcnRzLmVuY3J5cHQgPSBmdW5jdGlvbiAoc2VsZiwgZGF0YSwgZGVjcnlwdCkge1xuICB2YXIgb3V0ID0gQnVmZmVyLmFsbG9jVW5zYWZlKDApXG4gIHZhciBsZW5cblxuICB3aGlsZSAoZGF0YS5sZW5ndGgpIHtcbiAgICBpZiAoc2VsZi5fY2FjaGUubGVuZ3RoID09PSAwKSB7XG4gICAgICBzZWxmLl9jYWNoZSA9IHNlbGYuX2NpcGhlci5lbmNyeXB0QmxvY2soc2VsZi5fcHJldilcbiAgICAgIHNlbGYuX3ByZXYgPSBCdWZmZXIuYWxsb2NVbnNhZmUoMClcbiAgICB9XG5cbiAgICBpZiAoc2VsZi5fY2FjaGUubGVuZ3RoIDw9IGRhdGEubGVuZ3RoKSB7XG4gICAgICBsZW4gPSBzZWxmLl9jYWNoZS5sZW5ndGhcbiAgICAgIG91dCA9IEJ1ZmZlci5jb25jYXQoW291dCwgZW5jcnlwdFN0YXJ0KHNlbGYsIGRhdGEuc2xpY2UoMCwgbGVuKSwgZGVjcnlwdCldKVxuICAgICAgZGF0YSA9IGRhdGEuc2xpY2UobGVuKVxuICAgIH0gZWxzZSB7XG4gICAgICBvdXQgPSBCdWZmZXIuY29uY2F0KFtvdXQsIGVuY3J5cHRTdGFydChzZWxmLCBkYXRhLCBkZWNyeXB0KV0pXG4gICAgICBicmVha1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBvdXRcbn1cbiIsInZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxuXG5mdW5jdGlvbiBlbmNyeXB0Qnl0ZSAoc2VsZiwgYnl0ZVBhcmFtLCBkZWNyeXB0KSB7XG4gIHZhciBwYWQgPSBzZWxmLl9jaXBoZXIuZW5jcnlwdEJsb2NrKHNlbGYuX3ByZXYpXG4gIHZhciBvdXQgPSBwYWRbMF0gXiBieXRlUGFyYW1cblxuICBzZWxmLl9wcmV2ID0gQnVmZmVyLmNvbmNhdChbXG4gICAgc2VsZi5fcHJldi5zbGljZSgxKSxcbiAgICBCdWZmZXIuZnJvbShbZGVjcnlwdCA/IGJ5dGVQYXJhbSA6IG91dF0pXG4gIF0pXG5cbiAgcmV0dXJuIG91dFxufVxuXG5leHBvcnRzLmVuY3J5cHQgPSBmdW5jdGlvbiAoc2VsZiwgY2h1bmssIGRlY3J5cHQpIHtcbiAgdmFyIGxlbiA9IGNodW5rLmxlbmd0aFxuICB2YXIgb3V0ID0gQnVmZmVyLmFsbG9jVW5zYWZlKGxlbilcbiAgdmFyIGkgPSAtMVxuXG4gIHdoaWxlICgrK2kgPCBsZW4pIHtcbiAgICBvdXRbaV0gPSBlbmNyeXB0Qnl0ZShzZWxmLCBjaHVua1tpXSwgZGVjcnlwdClcbiAgfVxuXG4gIHJldHVybiBvdXRcbn1cbiIsInZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxuXG5mdW5jdGlvbiBlbmNyeXB0Qnl0ZSAoc2VsZiwgYnl0ZVBhcmFtLCBkZWNyeXB0KSB7XG4gIHZhciBwYWRcbiAgdmFyIGkgPSAtMVxuICB2YXIgbGVuID0gOFxuICB2YXIgb3V0ID0gMFxuICB2YXIgYml0LCB2YWx1ZVxuICB3aGlsZSAoKytpIDwgbGVuKSB7XG4gICAgcGFkID0gc2VsZi5fY2lwaGVyLmVuY3J5cHRCbG9jayhzZWxmLl9wcmV2KVxuICAgIGJpdCA9IChieXRlUGFyYW0gJiAoMSA8PCAoNyAtIGkpKSkgPyAweDgwIDogMFxuICAgIHZhbHVlID0gcGFkWzBdIF4gYml0XG4gICAgb3V0ICs9ICgodmFsdWUgJiAweDgwKSA+PiAoaSAlIDgpKVxuICAgIHNlbGYuX3ByZXYgPSBzaGlmdEluKHNlbGYuX3ByZXYsIGRlY3J5cHQgPyBiaXQgOiB2YWx1ZSlcbiAgfVxuICByZXR1cm4gb3V0XG59XG5cbmZ1bmN0aW9uIHNoaWZ0SW4gKGJ1ZmZlciwgdmFsdWUpIHtcbiAgdmFyIGxlbiA9IGJ1ZmZlci5sZW5ndGhcbiAgdmFyIGkgPSAtMVxuICB2YXIgb3V0ID0gQnVmZmVyLmFsbG9jVW5zYWZlKGJ1ZmZlci5sZW5ndGgpXG4gIGJ1ZmZlciA9IEJ1ZmZlci5jb25jYXQoW2J1ZmZlciwgQnVmZmVyLmZyb20oW3ZhbHVlXSldKVxuXG4gIHdoaWxlICgrK2kgPCBsZW4pIHtcbiAgICBvdXRbaV0gPSBidWZmZXJbaV0gPDwgMSB8IGJ1ZmZlcltpICsgMV0gPj4gKDcpXG4gIH1cblxuICByZXR1cm4gb3V0XG59XG5cbmV4cG9ydHMuZW5jcnlwdCA9IGZ1bmN0aW9uIChzZWxmLCBjaHVuaywgZGVjcnlwdCkge1xuICB2YXIgbGVuID0gY2h1bmsubGVuZ3RoXG4gIHZhciBvdXQgPSBCdWZmZXIuYWxsb2NVbnNhZmUobGVuKVxuICB2YXIgaSA9IC0xXG5cbiAgd2hpbGUgKCsraSA8IGxlbikge1xuICAgIG91dFtpXSA9IGVuY3J5cHRCeXRlKHNlbGYsIGNodW5rW2ldLCBkZWNyeXB0KVxuICB9XG5cbiAgcmV0dXJuIG91dFxufVxuIiwidmFyIHhvciA9IHJlcXVpcmUoJ2J1ZmZlci14b3InKVxuXG5mdW5jdGlvbiBnZXRCbG9jayAoc2VsZikge1xuICBzZWxmLl9wcmV2ID0gc2VsZi5fY2lwaGVyLmVuY3J5cHRCbG9jayhzZWxmLl9wcmV2KVxuICByZXR1cm4gc2VsZi5fcHJldlxufVxuXG5leHBvcnRzLmVuY3J5cHQgPSBmdW5jdGlvbiAoc2VsZiwgY2h1bmspIHtcbiAgd2hpbGUgKHNlbGYuX2NhY2hlLmxlbmd0aCA8IGNodW5rLmxlbmd0aCkge1xuICAgIHNlbGYuX2NhY2hlID0gQnVmZmVyLmNvbmNhdChbc2VsZi5fY2FjaGUsIGdldEJsb2NrKHNlbGYpXSlcbiAgfVxuXG4gIHZhciBwYWQgPSBzZWxmLl9jYWNoZS5zbGljZSgwLCBjaHVuay5sZW5ndGgpXG4gIHNlbGYuX2NhY2hlID0gc2VsZi5fY2FjaGUuc2xpY2UoY2h1bmsubGVuZ3RoKVxuICByZXR1cm4geG9yKGNodW5rLCBwYWQpXG59XG4iLCJ2YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcbnZhciBaRVJPRVMgPSBCdWZmZXIuYWxsb2MoMTYsIDApXG5cbmZ1bmN0aW9uIHRvQXJyYXkgKGJ1Zikge1xuICByZXR1cm4gW1xuICAgIGJ1Zi5yZWFkVUludDMyQkUoMCksXG4gICAgYnVmLnJlYWRVSW50MzJCRSg0KSxcbiAgICBidWYucmVhZFVJbnQzMkJFKDgpLFxuICAgIGJ1Zi5yZWFkVUludDMyQkUoMTIpXG4gIF1cbn1cblxuZnVuY3Rpb24gZnJvbUFycmF5IChvdXQpIHtcbiAgdmFyIGJ1ZiA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSgxNilcbiAgYnVmLndyaXRlVUludDMyQkUob3V0WzBdID4+PiAwLCAwKVxuICBidWYud3JpdGVVSW50MzJCRShvdXRbMV0gPj4+IDAsIDQpXG4gIGJ1Zi53cml0ZVVJbnQzMkJFKG91dFsyXSA+Pj4gMCwgOClcbiAgYnVmLndyaXRlVUludDMyQkUob3V0WzNdID4+PiAwLCAxMilcbiAgcmV0dXJuIGJ1ZlxufVxuXG5mdW5jdGlvbiBHSEFTSCAoa2V5KSB7XG4gIHRoaXMuaCA9IGtleVxuICB0aGlzLnN0YXRlID0gQnVmZmVyLmFsbG9jKDE2LCAwKVxuICB0aGlzLmNhY2hlID0gQnVmZmVyLmFsbG9jVW5zYWZlKDApXG59XG5cbi8vIGZyb20gaHR0cDovL2JpdHdpc2VzaGlmdGxlZnQuZ2l0aHViLmlvL3NqY2wvZG9jL3N5bWJvbHMvc3JjL2NvcmVfZ2NtLmpzLmh0bWxcbi8vIGJ5IEp1aG8gVsOkaMOkLUhlcnR0dWFcbkdIQVNILnByb3RvdHlwZS5naGFzaCA9IGZ1bmN0aW9uIChibG9jaykge1xuICB2YXIgaSA9IC0xXG4gIHdoaWxlICgrK2kgPCBibG9jay5sZW5ndGgpIHtcbiAgICB0aGlzLnN0YXRlW2ldIF49IGJsb2NrW2ldXG4gIH1cbiAgdGhpcy5fbXVsdGlwbHkoKVxufVxuXG5HSEFTSC5wcm90b3R5cGUuX211bHRpcGx5ID0gZnVuY3Rpb24gKCkge1xuICB2YXIgVmkgPSB0b0FycmF5KHRoaXMuaClcbiAgdmFyIFppID0gWzAsIDAsIDAsIDBdXG4gIHZhciBqLCB4aSwgbHNiVmlcbiAgdmFyIGkgPSAtMVxuICB3aGlsZSAoKytpIDwgMTI4KSB7XG4gICAgeGkgPSAodGhpcy5zdGF0ZVt+fihpIC8gOCldICYgKDEgPDwgKDcgLSAoaSAlIDgpKSkpICE9PSAwXG4gICAgaWYgKHhpKSB7XG4gICAgICAvLyBaX2krMSA9IFpfaSBeIFZfaVxuICAgICAgWmlbMF0gXj0gVmlbMF1cbiAgICAgIFppWzFdIF49IFZpWzFdXG4gICAgICBaaVsyXSBePSBWaVsyXVxuICAgICAgWmlbM10gXj0gVmlbM11cbiAgICB9XG5cbiAgICAvLyBTdG9yZSB0aGUgdmFsdWUgb2YgTFNCKFZfaSlcbiAgICBsc2JWaSA9IChWaVszXSAmIDEpICE9PSAwXG5cbiAgICAvLyBWX2krMSA9IFZfaSA+PiAxXG4gICAgZm9yIChqID0gMzsgaiA+IDA7IGotLSkge1xuICAgICAgVmlbal0gPSAoVmlbal0gPj4+IDEpIHwgKChWaVtqIC0gMV0gJiAxKSA8PCAzMSlcbiAgICB9XG4gICAgVmlbMF0gPSBWaVswXSA+Pj4gMVxuXG4gICAgLy8gSWYgTFNCKFZfaSkgaXMgMSwgVl9pKzEgPSAoVl9pID4+IDEpIF4gUlxuICAgIGlmIChsc2JWaSkge1xuICAgICAgVmlbMF0gPSBWaVswXSBeICgweGUxIDw8IDI0KVxuICAgIH1cbiAgfVxuICB0aGlzLnN0YXRlID0gZnJvbUFycmF5KFppKVxufVxuXG5HSEFTSC5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKGJ1Zikge1xuICB0aGlzLmNhY2hlID0gQnVmZmVyLmNvbmNhdChbdGhpcy5jYWNoZSwgYnVmXSlcbiAgdmFyIGNodW5rXG4gIHdoaWxlICh0aGlzLmNhY2hlLmxlbmd0aCA+PSAxNikge1xuICAgIGNodW5rID0gdGhpcy5jYWNoZS5zbGljZSgwLCAxNilcbiAgICB0aGlzLmNhY2hlID0gdGhpcy5jYWNoZS5zbGljZSgxNilcbiAgICB0aGlzLmdoYXNoKGNodW5rKVxuICB9XG59XG5cbkdIQVNILnByb3RvdHlwZS5maW5hbCA9IGZ1bmN0aW9uIChhYmwsIGJsKSB7XG4gIGlmICh0aGlzLmNhY2hlLmxlbmd0aCkge1xuICAgIHRoaXMuZ2hhc2goQnVmZmVyLmNvbmNhdChbdGhpcy5jYWNoZSwgWkVST0VTXSwgMTYpKVxuICB9XG5cbiAgdGhpcy5naGFzaChmcm9tQXJyYXkoWzAsIGFibCwgMCwgYmxdKSlcbiAgcmV0dXJuIHRoaXMuc3RhdGVcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBHSEFTSFxuIiwidmFyIEF1dGhDaXBoZXIgPSByZXF1aXJlKCcuL2F1dGhDaXBoZXInKVxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG52YXIgTU9ERVMgPSByZXF1aXJlKCcuL21vZGVzJylcbnZhciBTdHJlYW1DaXBoZXIgPSByZXF1aXJlKCcuL3N0cmVhbUNpcGhlcicpXG52YXIgVHJhbnNmb3JtID0gcmVxdWlyZSgnY2lwaGVyLWJhc2UnKVxudmFyIGFlcyA9IHJlcXVpcmUoJy4vYWVzJylcbnZhciBlYnRrID0gcmVxdWlyZSgnZXZwX2J5dGVzdG9rZXknKVxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxuXG5mdW5jdGlvbiBEZWNpcGhlciAobW9kZSwga2V5LCBpdikge1xuICBUcmFuc2Zvcm0uY2FsbCh0aGlzKVxuXG4gIHRoaXMuX2NhY2hlID0gbmV3IFNwbGl0dGVyKClcbiAgdGhpcy5fbGFzdCA9IHZvaWQgMFxuICB0aGlzLl9jaXBoZXIgPSBuZXcgYWVzLkFFUyhrZXkpXG4gIHRoaXMuX3ByZXYgPSBCdWZmZXIuZnJvbShpdilcbiAgdGhpcy5fbW9kZSA9IG1vZGVcbiAgdGhpcy5fYXV0b3BhZGRpbmcgPSB0cnVlXG59XG5cbmluaGVyaXRzKERlY2lwaGVyLCBUcmFuc2Zvcm0pXG5cbkRlY2lwaGVyLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgdGhpcy5fY2FjaGUuYWRkKGRhdGEpXG4gIHZhciBjaHVua1xuICB2YXIgdGhpbmdcbiAgdmFyIG91dCA9IFtdXG4gIHdoaWxlICgoY2h1bmsgPSB0aGlzLl9jYWNoZS5nZXQodGhpcy5fYXV0b3BhZGRpbmcpKSkge1xuICAgIHRoaW5nID0gdGhpcy5fbW9kZS5kZWNyeXB0KHRoaXMsIGNodW5rKVxuICAgIG91dC5wdXNoKHRoaW5nKVxuICB9XG4gIHJldHVybiBCdWZmZXIuY29uY2F0KG91dClcbn1cblxuRGVjaXBoZXIucHJvdG90eXBlLl9maW5hbCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGNodW5rID0gdGhpcy5fY2FjaGUuZmx1c2goKVxuICBpZiAodGhpcy5fYXV0b3BhZGRpbmcpIHtcbiAgICByZXR1cm4gdW5wYWQodGhpcy5fbW9kZS5kZWNyeXB0KHRoaXMsIGNodW5rKSlcbiAgfSBlbHNlIGlmIChjaHVuaykge1xuICAgIHRocm93IG5ldyBFcnJvcignZGF0YSBub3QgbXVsdGlwbGUgb2YgYmxvY2sgbGVuZ3RoJylcbiAgfVxufVxuXG5EZWNpcGhlci5wcm90b3R5cGUuc2V0QXV0b1BhZGRpbmcgPSBmdW5jdGlvbiAoc2V0VG8pIHtcbiAgdGhpcy5fYXV0b3BhZGRpbmcgPSAhIXNldFRvXG4gIHJldHVybiB0aGlzXG59XG5cbmZ1bmN0aW9uIFNwbGl0dGVyICgpIHtcbiAgdGhpcy5jYWNoZSA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSgwKVxufVxuXG5TcGxpdHRlci5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgdGhpcy5jYWNoZSA9IEJ1ZmZlci5jb25jYXQoW3RoaXMuY2FjaGUsIGRhdGFdKVxufVxuXG5TcGxpdHRlci5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKGF1dG9QYWRkaW5nKSB7XG4gIHZhciBvdXRcbiAgaWYgKGF1dG9QYWRkaW5nKSB7XG4gICAgaWYgKHRoaXMuY2FjaGUubGVuZ3RoID4gMTYpIHtcbiAgICAgIG91dCA9IHRoaXMuY2FjaGUuc2xpY2UoMCwgMTYpXG4gICAgICB0aGlzLmNhY2hlID0gdGhpcy5jYWNoZS5zbGljZSgxNilcbiAgICAgIHJldHVybiBvdXRcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKHRoaXMuY2FjaGUubGVuZ3RoID49IDE2KSB7XG4gICAgICBvdXQgPSB0aGlzLmNhY2hlLnNsaWNlKDAsIDE2KVxuICAgICAgdGhpcy5jYWNoZSA9IHRoaXMuY2FjaGUuc2xpY2UoMTYpXG4gICAgICByZXR1cm4gb3V0XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG51bGxcbn1cblxuU3BsaXR0ZXIucHJvdG90eXBlLmZsdXNoID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5jYWNoZS5sZW5ndGgpIHJldHVybiB0aGlzLmNhY2hlXG59XG5cbmZ1bmN0aW9uIHVucGFkIChsYXN0KSB7XG4gIHZhciBwYWRkZWQgPSBsYXN0WzE1XVxuICBpZiAocGFkZGVkIDwgMSB8fCBwYWRkZWQgPiAxNikge1xuICAgIHRocm93IG5ldyBFcnJvcigndW5hYmxlIHRvIGRlY3J5cHQgZGF0YScpXG4gIH1cbiAgdmFyIGkgPSAtMVxuICB3aGlsZSAoKytpIDwgcGFkZGVkKSB7XG4gICAgaWYgKGxhc3RbKGkgKyAoMTYgLSBwYWRkZWQpKV0gIT09IHBhZGRlZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCd1bmFibGUgdG8gZGVjcnlwdCBkYXRhJylcbiAgICB9XG4gIH1cbiAgaWYgKHBhZGRlZCA9PT0gMTYpIHJldHVyblxuXG4gIHJldHVybiBsYXN0LnNsaWNlKDAsIDE2IC0gcGFkZGVkKVxufVxuXG5mdW5jdGlvbiBjcmVhdGVEZWNpcGhlcml2IChzdWl0ZSwgcGFzc3dvcmQsIGl2KSB7XG4gIHZhciBjb25maWcgPSBNT0RFU1tzdWl0ZS50b0xvd2VyQ2FzZSgpXVxuICBpZiAoIWNvbmZpZykgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBzdWl0ZSB0eXBlJylcblxuICBpZiAodHlwZW9mIGl2ID09PSAnc3RyaW5nJykgaXYgPSBCdWZmZXIuZnJvbShpdilcbiAgaWYgKGNvbmZpZy5tb2RlICE9PSAnR0NNJyAmJiBpdi5sZW5ndGggIT09IGNvbmZpZy5pdikgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBpdiBsZW5ndGggJyArIGl2Lmxlbmd0aClcblxuICBpZiAodHlwZW9mIHBhc3N3b3JkID09PSAnc3RyaW5nJykgcGFzc3dvcmQgPSBCdWZmZXIuZnJvbShwYXNzd29yZClcbiAgaWYgKHBhc3N3b3JkLmxlbmd0aCAhPT0gY29uZmlnLmtleSAvIDgpIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQga2V5IGxlbmd0aCAnICsgcGFzc3dvcmQubGVuZ3RoKVxuXG4gIGlmIChjb25maWcudHlwZSA9PT0gJ3N0cmVhbScpIHtcbiAgICByZXR1cm4gbmV3IFN0cmVhbUNpcGhlcihjb25maWcubW9kdWxlLCBwYXNzd29yZCwgaXYsIHRydWUpXG4gIH0gZWxzZSBpZiAoY29uZmlnLnR5cGUgPT09ICdhdXRoJykge1xuICAgIHJldHVybiBuZXcgQXV0aENpcGhlcihjb25maWcubW9kdWxlLCBwYXNzd29yZCwgaXYsIHRydWUpXG4gIH1cblxuICByZXR1cm4gbmV3IERlY2lwaGVyKGNvbmZpZy5tb2R1bGUsIHBhc3N3b3JkLCBpdilcbn1cblxuZnVuY3Rpb24gY3JlYXRlRGVjaXBoZXIgKHN1aXRlLCBwYXNzd29yZCkge1xuICB2YXIgY29uZmlnID0gTU9ERVNbc3VpdGUudG9Mb3dlckNhc2UoKV1cbiAgaWYgKCFjb25maWcpIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgc3VpdGUgdHlwZScpXG5cbiAgdmFyIGtleXMgPSBlYnRrKHBhc3N3b3JkLCBmYWxzZSwgY29uZmlnLmtleSwgY29uZmlnLml2KVxuICByZXR1cm4gY3JlYXRlRGVjaXBoZXJpdihzdWl0ZSwga2V5cy5rZXksIGtleXMuaXYpXG59XG5cbmV4cG9ydHMuY3JlYXRlRGVjaXBoZXIgPSBjcmVhdGVEZWNpcGhlclxuZXhwb3J0cy5jcmVhdGVEZWNpcGhlcml2ID0gY3JlYXRlRGVjaXBoZXJpdlxuIiwiZXhwb3J0c1snZGVzLWVjYiddID0ge1xuICBrZXk6IDgsXG4gIGl2OiAwXG59XG5leHBvcnRzWydkZXMtY2JjJ10gPSBleHBvcnRzLmRlcyA9IHtcbiAga2V5OiA4LFxuICBpdjogOFxufVxuZXhwb3J0c1snZGVzLWVkZTMtY2JjJ10gPSBleHBvcnRzLmRlczMgPSB7XG4gIGtleTogMjQsXG4gIGl2OiA4XG59XG5leHBvcnRzWydkZXMtZWRlMyddID0ge1xuICBrZXk6IDI0LFxuICBpdjogMFxufVxuZXhwb3J0c1snZGVzLWVkZS1jYmMnXSA9IHtcbiAga2V5OiAxNixcbiAgaXY6IDhcbn1cbmV4cG9ydHNbJ2Rlcy1lZGUnXSA9IHtcbiAga2V5OiAxNixcbiAgaXY6IDBcbn1cbiIsInZhciBnZW5lcmF0ZVByaW1lID0gcmVxdWlyZSgnLi9saWIvZ2VuZXJhdGVQcmltZScpXG52YXIgcHJpbWVzID0gcmVxdWlyZSgnLi9saWIvcHJpbWVzLmpzb24nKVxuXG52YXIgREggPSByZXF1aXJlKCcuL2xpYi9kaCcpXG5cbmZ1bmN0aW9uIGdldERpZmZpZUhlbGxtYW4gKG1vZCkge1xuICB2YXIgcHJpbWUgPSBuZXcgQnVmZmVyKHByaW1lc1ttb2RdLnByaW1lLCAnaGV4JylcbiAgdmFyIGdlbiA9IG5ldyBCdWZmZXIocHJpbWVzW21vZF0uZ2VuLCAnaGV4JylcblxuICByZXR1cm4gbmV3IERIKHByaW1lLCBnZW4pXG59XG5cbnZhciBFTkNPRElOR1MgPSB7XG4gICdiaW5hcnknOiB0cnVlLCAnaGV4JzogdHJ1ZSwgJ2Jhc2U2NCc6IHRydWVcbn1cblxuZnVuY3Rpb24gY3JlYXRlRGlmZmllSGVsbG1hbiAocHJpbWUsIGVuYywgZ2VuZXJhdG9yLCBnZW5jKSB7XG4gIGlmIChCdWZmZXIuaXNCdWZmZXIoZW5jKSB8fCBFTkNPRElOR1NbZW5jXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIGNyZWF0ZURpZmZpZUhlbGxtYW4ocHJpbWUsICdiaW5hcnknLCBlbmMsIGdlbmVyYXRvcilcbiAgfVxuXG4gIGVuYyA9IGVuYyB8fCAnYmluYXJ5J1xuICBnZW5jID0gZ2VuYyB8fCAnYmluYXJ5J1xuICBnZW5lcmF0b3IgPSBnZW5lcmF0b3IgfHwgbmV3IEJ1ZmZlcihbMl0pXG5cbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoZ2VuZXJhdG9yKSkge1xuICAgIGdlbmVyYXRvciA9IG5ldyBCdWZmZXIoZ2VuZXJhdG9yLCBnZW5jKVxuICB9XG5cbiAgaWYgKHR5cGVvZiBwcmltZSA9PT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gbmV3IERIKGdlbmVyYXRlUHJpbWUocHJpbWUsIGdlbmVyYXRvciksIGdlbmVyYXRvciwgdHJ1ZSlcbiAgfVxuXG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKHByaW1lKSkge1xuICAgIHByaW1lID0gbmV3IEJ1ZmZlcihwcmltZSwgZW5jKVxuICB9XG5cbiAgcmV0dXJuIG5ldyBESChwcmltZSwgZ2VuZXJhdG9yLCB0cnVlKVxufVxuXG5leHBvcnRzLkRpZmZpZUhlbGxtYW5Hcm91cCA9IGV4cG9ydHMuY3JlYXRlRGlmZmllSGVsbG1hbkdyb3VwID0gZXhwb3J0cy5nZXREaWZmaWVIZWxsbWFuID0gZ2V0RGlmZmllSGVsbG1hblxuZXhwb3J0cy5jcmVhdGVEaWZmaWVIZWxsbWFuID0gZXhwb3J0cy5EaWZmaWVIZWxsbWFuID0gY3JlYXRlRGlmZmllSGVsbG1hblxuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihtb2R1bGUpIHtcblx0aWYgKCFtb2R1bGUud2VicGFja1BvbHlmaWxsKSB7XG5cdFx0bW9kdWxlLmRlcHJlY2F0ZSA9IGZ1bmN0aW9uKCkge307XG5cdFx0bW9kdWxlLnBhdGhzID0gW107XG5cdFx0Ly8gbW9kdWxlLnBhcmVudCA9IHVuZGVmaW5lZCBieSBkZWZhdWx0XG5cdFx0aWYgKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwibG9hZGVkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmw7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJpZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdG1vZHVsZS53ZWJwYWNrUG9seWZpbGwgPSAxO1xuXHR9XG5cdHJldHVybiBtb2R1bGU7XG59O1xuIiwidmFyIEJOID0gcmVxdWlyZSgnYm4uanMnKTtcbnZhciBNaWxsZXJSYWJpbiA9IHJlcXVpcmUoJ21pbGxlci1yYWJpbicpO1xudmFyIG1pbGxlclJhYmluID0gbmV3IE1pbGxlclJhYmluKCk7XG52YXIgVFdFTlRZRk9VUiA9IG5ldyBCTigyNCk7XG52YXIgRUxFVkVOID0gbmV3IEJOKDExKTtcbnZhciBURU4gPSBuZXcgQk4oMTApO1xudmFyIFRIUkVFID0gbmV3IEJOKDMpO1xudmFyIFNFVkVOID0gbmV3IEJOKDcpO1xudmFyIHByaW1lcyA9IHJlcXVpcmUoJy4vZ2VuZXJhdGVQcmltZScpO1xudmFyIHJhbmRvbUJ5dGVzID0gcmVxdWlyZSgncmFuZG9tYnl0ZXMnKTtcbm1vZHVsZS5leHBvcnRzID0gREg7XG5cbmZ1bmN0aW9uIHNldFB1YmxpY0tleShwdWIsIGVuYykge1xuICBlbmMgPSBlbmMgfHwgJ3V0ZjgnO1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihwdWIpKSB7XG4gICAgcHViID0gbmV3IEJ1ZmZlcihwdWIsIGVuYyk7XG4gIH1cbiAgdGhpcy5fcHViID0gbmV3IEJOKHB1Yik7XG4gIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiBzZXRQcml2YXRlS2V5KHByaXYsIGVuYykge1xuICBlbmMgPSBlbmMgfHwgJ3V0ZjgnO1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihwcml2KSkge1xuICAgIHByaXYgPSBuZXcgQnVmZmVyKHByaXYsIGVuYyk7XG4gIH1cbiAgdGhpcy5fcHJpdiA9IG5ldyBCTihwcml2KTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbnZhciBwcmltZUNhY2hlID0ge307XG5mdW5jdGlvbiBjaGVja1ByaW1lKHByaW1lLCBnZW5lcmF0b3IpIHtcbiAgdmFyIGdlbiA9IGdlbmVyYXRvci50b1N0cmluZygnaGV4Jyk7XG4gIHZhciBoZXggPSBbZ2VuLCBwcmltZS50b1N0cmluZygxNildLmpvaW4oJ18nKTtcbiAgaWYgKGhleCBpbiBwcmltZUNhY2hlKSB7XG4gICAgcmV0dXJuIHByaW1lQ2FjaGVbaGV4XTtcbiAgfVxuICB2YXIgZXJyb3IgPSAwO1xuXG4gIGlmIChwcmltZS5pc0V2ZW4oKSB8fFxuICAgICFwcmltZXMuc2ltcGxlU2lldmUgfHxcbiAgICAhcHJpbWVzLmZlcm1hdFRlc3QocHJpbWUpIHx8XG4gICAgIW1pbGxlclJhYmluLnRlc3QocHJpbWUpKSB7XG4gICAgLy9ub3QgYSBwcmltZSBzbyArMVxuICAgIGVycm9yICs9IDE7XG5cbiAgICBpZiAoZ2VuID09PSAnMDInIHx8IGdlbiA9PT0gJzA1Jykge1xuICAgICAgLy8gd2UnZCBiZSBhYmxlIHRvIGNoZWNrIHRoZSBnZW5lcmF0b3JcbiAgICAgIC8vIGl0IHdvdWxkIGZhaWwgc28gKzhcbiAgICAgIGVycm9yICs9IDg7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vd2Ugd291bGRuJ3QgYmUgYWJsZSB0byB0ZXN0IHRoZSBnZW5lcmF0b3JcbiAgICAgIC8vIHNvICs0XG4gICAgICBlcnJvciArPSA0O1xuICAgIH1cbiAgICBwcmltZUNhY2hlW2hleF0gPSBlcnJvcjtcbiAgICByZXR1cm4gZXJyb3I7XG4gIH1cbiAgaWYgKCFtaWxsZXJSYWJpbi50ZXN0KHByaW1lLnNocm4oMSkpKSB7XG4gICAgLy9ub3QgYSBzYWZlIHByaW1lXG4gICAgZXJyb3IgKz0gMjtcbiAgfVxuICB2YXIgcmVtO1xuICBzd2l0Y2ggKGdlbikge1xuICAgIGNhc2UgJzAyJzpcbiAgICAgIGlmIChwcmltZS5tb2QoVFdFTlRZRk9VUikuY21wKEVMRVZFTikpIHtcbiAgICAgICAgLy8gdW5zdWlkYWJsZSBnZW5lcmF0b3JcbiAgICAgICAgZXJyb3IgKz0gODtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJzA1JzpcbiAgICAgIHJlbSA9IHByaW1lLm1vZChURU4pO1xuICAgICAgaWYgKHJlbS5jbXAoVEhSRUUpICYmIHJlbS5jbXAoU0VWRU4pKSB7XG4gICAgICAgIC8vIHByaW1lIG1vZCAxMCBuZWVkcyB0byBlcXVhbCAzIG9yIDdcbiAgICAgICAgZXJyb3IgKz0gODtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBlcnJvciArPSA0O1xuICB9XG4gIHByaW1lQ2FjaGVbaGV4XSA9IGVycm9yO1xuICByZXR1cm4gZXJyb3I7XG59XG5cbmZ1bmN0aW9uIERIKHByaW1lLCBnZW5lcmF0b3IsIG1hbGxlYWJsZSkge1xuICB0aGlzLnNldEdlbmVyYXRvcihnZW5lcmF0b3IpO1xuICB0aGlzLl9fcHJpbWUgPSBuZXcgQk4ocHJpbWUpO1xuICB0aGlzLl9wcmltZSA9IEJOLm1vbnQodGhpcy5fX3ByaW1lKTtcbiAgdGhpcy5fcHJpbWVMZW4gPSBwcmltZS5sZW5ndGg7XG4gIHRoaXMuX3B1YiA9IHVuZGVmaW5lZDtcbiAgdGhpcy5fcHJpdiA9IHVuZGVmaW5lZDtcbiAgdGhpcy5fcHJpbWVDb2RlID0gdW5kZWZpbmVkO1xuICBpZiAobWFsbGVhYmxlKSB7XG4gICAgdGhpcy5zZXRQdWJsaWNLZXkgPSBzZXRQdWJsaWNLZXk7XG4gICAgdGhpcy5zZXRQcml2YXRlS2V5ID0gc2V0UHJpdmF0ZUtleTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLl9wcmltZUNvZGUgPSA4O1xuICB9XG59XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoREgucHJvdG90eXBlLCAndmVyaWZ5RXJyb3InLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIGlmICh0eXBlb2YgdGhpcy5fcHJpbWVDb2RlICE9PSAnbnVtYmVyJykge1xuICAgICAgdGhpcy5fcHJpbWVDb2RlID0gY2hlY2tQcmltZSh0aGlzLl9fcHJpbWUsIHRoaXMuX19nZW4pO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fcHJpbWVDb2RlO1xuICB9XG59KTtcbkRILnByb3RvdHlwZS5nZW5lcmF0ZUtleXMgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICghdGhpcy5fcHJpdikge1xuICAgIHRoaXMuX3ByaXYgPSBuZXcgQk4ocmFuZG9tQnl0ZXModGhpcy5fcHJpbWVMZW4pKTtcbiAgfVxuICB0aGlzLl9wdWIgPSB0aGlzLl9nZW4udG9SZWQodGhpcy5fcHJpbWUpLnJlZFBvdyh0aGlzLl9wcml2KS5mcm9tUmVkKCk7XG4gIHJldHVybiB0aGlzLmdldFB1YmxpY0tleSgpO1xufTtcblxuREgucHJvdG90eXBlLmNvbXB1dGVTZWNyZXQgPSBmdW5jdGlvbiAob3RoZXIpIHtcbiAgb3RoZXIgPSBuZXcgQk4ob3RoZXIpO1xuICBvdGhlciA9IG90aGVyLnRvUmVkKHRoaXMuX3ByaW1lKTtcbiAgdmFyIHNlY3JldCA9IG90aGVyLnJlZFBvdyh0aGlzLl9wcml2KS5mcm9tUmVkKCk7XG4gIHZhciBvdXQgPSBuZXcgQnVmZmVyKHNlY3JldC50b0FycmF5KCkpO1xuICB2YXIgcHJpbWUgPSB0aGlzLmdldFByaW1lKCk7XG4gIGlmIChvdXQubGVuZ3RoIDwgcHJpbWUubGVuZ3RoKSB7XG4gICAgdmFyIGZyb250ID0gbmV3IEJ1ZmZlcihwcmltZS5sZW5ndGggLSBvdXQubGVuZ3RoKTtcbiAgICBmcm9udC5maWxsKDApO1xuICAgIG91dCA9IEJ1ZmZlci5jb25jYXQoW2Zyb250LCBvdXRdKTtcbiAgfVxuICByZXR1cm4gb3V0O1xufTtcblxuREgucHJvdG90eXBlLmdldFB1YmxpY0tleSA9IGZ1bmN0aW9uIGdldFB1YmxpY0tleShlbmMpIHtcbiAgcmV0dXJuIGZvcm1hdFJldHVyblZhbHVlKHRoaXMuX3B1YiwgZW5jKTtcbn07XG5cbkRILnByb3RvdHlwZS5nZXRQcml2YXRlS2V5ID0gZnVuY3Rpb24gZ2V0UHJpdmF0ZUtleShlbmMpIHtcbiAgcmV0dXJuIGZvcm1hdFJldHVyblZhbHVlKHRoaXMuX3ByaXYsIGVuYyk7XG59O1xuXG5ESC5wcm90b3R5cGUuZ2V0UHJpbWUgPSBmdW5jdGlvbiAoZW5jKSB7XG4gIHJldHVybiBmb3JtYXRSZXR1cm5WYWx1ZSh0aGlzLl9fcHJpbWUsIGVuYyk7XG59O1xuXG5ESC5wcm90b3R5cGUuZ2V0R2VuZXJhdG9yID0gZnVuY3Rpb24gKGVuYykge1xuICByZXR1cm4gZm9ybWF0UmV0dXJuVmFsdWUodGhpcy5fZ2VuLCBlbmMpO1xufTtcblxuREgucHJvdG90eXBlLnNldEdlbmVyYXRvciA9IGZ1bmN0aW9uIChnZW4sIGVuYykge1xuICBlbmMgPSBlbmMgfHwgJ3V0ZjgnO1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihnZW4pKSB7XG4gICAgZ2VuID0gbmV3IEJ1ZmZlcihnZW4sIGVuYyk7XG4gIH1cbiAgdGhpcy5fX2dlbiA9IGdlbjtcbiAgdGhpcy5fZ2VuID0gbmV3IEJOKGdlbik7XG4gIHJldHVybiB0aGlzO1xufTtcblxuZnVuY3Rpb24gZm9ybWF0UmV0dXJuVmFsdWUoYm4sIGVuYykge1xuICB2YXIgYnVmID0gbmV3IEJ1ZmZlcihibi50b0FycmF5KCkpO1xuICBpZiAoIWVuYykge1xuICAgIHJldHVybiBidWY7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGJ1Zi50b1N0cmluZyhlbmMpO1xuICB9XG59XG4iLCJ2YXIgY3JlYXRlSGFzaCA9IHJlcXVpcmUoJ2NyZWF0ZS1oYXNoJylcbnZhciBzdHJlYW0gPSByZXF1aXJlKCdzdHJlYW0nKVxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxudmFyIHNpZ24gPSByZXF1aXJlKCcuL3NpZ24nKVxudmFyIHZlcmlmeSA9IHJlcXVpcmUoJy4vdmVyaWZ5JylcblxudmFyIGFsZ29yaXRobXMgPSByZXF1aXJlKCcuL2FsZ29yaXRobXMuanNvbicpXG5PYmplY3Qua2V5cyhhbGdvcml0aG1zKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgYWxnb3JpdGhtc1trZXldLmlkID0gbmV3IEJ1ZmZlcihhbGdvcml0aG1zW2tleV0uaWQsICdoZXgnKVxuICBhbGdvcml0aG1zW2tleS50b0xvd2VyQ2FzZSgpXSA9IGFsZ29yaXRobXNba2V5XVxufSlcblxuZnVuY3Rpb24gU2lnbiAoYWxnb3JpdGhtKSB7XG4gIHN0cmVhbS5Xcml0YWJsZS5jYWxsKHRoaXMpXG5cbiAgdmFyIGRhdGEgPSBhbGdvcml0aG1zW2FsZ29yaXRobV1cbiAgaWYgKCFkYXRhKSB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gbWVzc2FnZSBkaWdlc3QnKVxuXG4gIHRoaXMuX2hhc2hUeXBlID0gZGF0YS5oYXNoXG4gIHRoaXMuX2hhc2ggPSBjcmVhdGVIYXNoKGRhdGEuaGFzaClcbiAgdGhpcy5fdGFnID0gZGF0YS5pZFxuICB0aGlzLl9zaWduVHlwZSA9IGRhdGEuc2lnblxufVxuaW5oZXJpdHMoU2lnbiwgc3RyZWFtLldyaXRhYmxlKVxuXG5TaWduLnByb3RvdHlwZS5fd3JpdGUgPSBmdW5jdGlvbiBfd3JpdGUgKGRhdGEsIF8sIGRvbmUpIHtcbiAgdGhpcy5faGFzaC51cGRhdGUoZGF0YSlcbiAgZG9uZSgpXG59XG5cblNpZ24ucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZSAoZGF0YSwgZW5jKSB7XG4gIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIGRhdGEgPSBuZXcgQnVmZmVyKGRhdGEsIGVuYylcblxuICB0aGlzLl9oYXNoLnVwZGF0ZShkYXRhKVxuICByZXR1cm4gdGhpc1xufVxuXG5TaWduLnByb3RvdHlwZS5zaWduID0gZnVuY3Rpb24gc2lnbk1ldGhvZCAoa2V5LCBlbmMpIHtcbiAgdGhpcy5lbmQoKVxuICB2YXIgaGFzaCA9IHRoaXMuX2hhc2guZGlnZXN0KClcbiAgdmFyIHNpZyA9IHNpZ24oaGFzaCwga2V5LCB0aGlzLl9oYXNoVHlwZSwgdGhpcy5fc2lnblR5cGUsIHRoaXMuX3RhZylcblxuICByZXR1cm4gZW5jID8gc2lnLnRvU3RyaW5nKGVuYykgOiBzaWdcbn1cblxuZnVuY3Rpb24gVmVyaWZ5IChhbGdvcml0aG0pIHtcbiAgc3RyZWFtLldyaXRhYmxlLmNhbGwodGhpcylcblxuICB2YXIgZGF0YSA9IGFsZ29yaXRobXNbYWxnb3JpdGhtXVxuICBpZiAoIWRhdGEpIHRocm93IG5ldyBFcnJvcignVW5rbm93biBtZXNzYWdlIGRpZ2VzdCcpXG5cbiAgdGhpcy5faGFzaCA9IGNyZWF0ZUhhc2goZGF0YS5oYXNoKVxuICB0aGlzLl90YWcgPSBkYXRhLmlkXG4gIHRoaXMuX3NpZ25UeXBlID0gZGF0YS5zaWduXG59XG5pbmhlcml0cyhWZXJpZnksIHN0cmVhbS5Xcml0YWJsZSlcblxuVmVyaWZ5LnByb3RvdHlwZS5fd3JpdGUgPSBmdW5jdGlvbiBfd3JpdGUgKGRhdGEsIF8sIGRvbmUpIHtcbiAgdGhpcy5faGFzaC51cGRhdGUoZGF0YSlcbiAgZG9uZSgpXG59XG5cblZlcmlmeS5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlIChkYXRhLCBlbmMpIHtcbiAgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykgZGF0YSA9IG5ldyBCdWZmZXIoZGF0YSwgZW5jKVxuXG4gIHRoaXMuX2hhc2gudXBkYXRlKGRhdGEpXG4gIHJldHVybiB0aGlzXG59XG5cblZlcmlmeS5wcm90b3R5cGUudmVyaWZ5ID0gZnVuY3Rpb24gdmVyaWZ5TWV0aG9kIChrZXksIHNpZywgZW5jKSB7XG4gIGlmICh0eXBlb2Ygc2lnID09PSAnc3RyaW5nJykgc2lnID0gbmV3IEJ1ZmZlcihzaWcsIGVuYylcblxuICB0aGlzLmVuZCgpXG4gIHZhciBoYXNoID0gdGhpcy5faGFzaC5kaWdlc3QoKVxuICByZXR1cm4gdmVyaWZ5KHNpZywgaGFzaCwga2V5LCB0aGlzLl9zaWduVHlwZSwgdGhpcy5fdGFnKVxufVxuXG5mdW5jdGlvbiBjcmVhdGVTaWduIChhbGdvcml0aG0pIHtcbiAgcmV0dXJuIG5ldyBTaWduKGFsZ29yaXRobSlcbn1cblxuZnVuY3Rpb24gY3JlYXRlVmVyaWZ5IChhbGdvcml0aG0pIHtcbiAgcmV0dXJuIG5ldyBWZXJpZnkoYWxnb3JpdGhtKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgU2lnbjogY3JlYXRlU2lnbixcbiAgVmVyaWZ5OiBjcmVhdGVWZXJpZnksXG4gIGNyZWF0ZVNpZ246IGNyZWF0ZVNpZ24sXG4gIGNyZWF0ZVZlcmlmeTogY3JlYXRlVmVyaWZ5XG59XG4iLCIvLyBtdWNoIG9mIHRoaXMgYmFzZWQgb24gaHR0cHM6Ly9naXRodWIuY29tL2luZHV0bnkvc2VsZi1zaWduZWQvYmxvYi9naC1wYWdlcy9saWIvcnNhLmpzXG52YXIgY3JlYXRlSG1hYyA9IHJlcXVpcmUoJ2NyZWF0ZS1obWFjJylcbnZhciBjcnQgPSByZXF1aXJlKCdicm93c2VyaWZ5LXJzYScpXG52YXIgRUMgPSByZXF1aXJlKCdlbGxpcHRpYycpLmVjXG52YXIgQk4gPSByZXF1aXJlKCdibi5qcycpXG52YXIgcGFyc2VLZXlzID0gcmVxdWlyZSgncGFyc2UtYXNuMScpXG52YXIgY3VydmVzID0gcmVxdWlyZSgnLi9jdXJ2ZXMuanNvbicpXG5cbmZ1bmN0aW9uIHNpZ24gKGhhc2gsIGtleSwgaGFzaFR5cGUsIHNpZ25UeXBlLCB0YWcpIHtcbiAgdmFyIHByaXYgPSBwYXJzZUtleXMoa2V5KVxuICBpZiAocHJpdi5jdXJ2ZSkge1xuICAgIC8vIHJzYSBrZXlzIGNhbiBiZSBpbnRlcnByZXRlZCBhcyBlY2RzYSBvbmVzIGluIG9wZW5zc2xcbiAgICBpZiAoc2lnblR5cGUgIT09ICdlY2RzYScgJiYgc2lnblR5cGUgIT09ICdlY2RzYS9yc2EnKSB0aHJvdyBuZXcgRXJyb3IoJ3dyb25nIHByaXZhdGUga2V5IHR5cGUnKVxuICAgIHJldHVybiBlY1NpZ24oaGFzaCwgcHJpdilcbiAgfSBlbHNlIGlmIChwcml2LnR5cGUgPT09ICdkc2EnKSB7XG4gICAgaWYgKHNpZ25UeXBlICE9PSAnZHNhJykgdGhyb3cgbmV3IEVycm9yKCd3cm9uZyBwcml2YXRlIGtleSB0eXBlJylcbiAgICByZXR1cm4gZHNhU2lnbihoYXNoLCBwcml2LCBoYXNoVHlwZSlcbiAgfSBlbHNlIHtcbiAgICBpZiAoc2lnblR5cGUgIT09ICdyc2EnICYmIHNpZ25UeXBlICE9PSAnZWNkc2EvcnNhJykgdGhyb3cgbmV3IEVycm9yKCd3cm9uZyBwcml2YXRlIGtleSB0eXBlJylcbiAgfVxuICBoYXNoID0gQnVmZmVyLmNvbmNhdChbdGFnLCBoYXNoXSlcbiAgdmFyIGxlbiA9IHByaXYubW9kdWx1cy5ieXRlTGVuZ3RoKClcbiAgdmFyIHBhZCA9IFsgMCwgMSBdXG4gIHdoaWxlIChoYXNoLmxlbmd0aCArIHBhZC5sZW5ndGggKyAxIDwgbGVuKSBwYWQucHVzaCgweGZmKVxuICBwYWQucHVzaCgweDAwKVxuICB2YXIgaSA9IC0xXG4gIHdoaWxlICgrK2kgPCBoYXNoLmxlbmd0aCkgcGFkLnB1c2goaGFzaFtpXSlcblxuICB2YXIgb3V0ID0gY3J0KHBhZCwgcHJpdilcbiAgcmV0dXJuIG91dFxufVxuXG5mdW5jdGlvbiBlY1NpZ24gKGhhc2gsIHByaXYpIHtcbiAgdmFyIGN1cnZlSWQgPSBjdXJ2ZXNbcHJpdi5jdXJ2ZS5qb2luKCcuJyldXG4gIGlmICghY3VydmVJZCkgdGhyb3cgbmV3IEVycm9yKCd1bmtub3duIGN1cnZlICcgKyBwcml2LmN1cnZlLmpvaW4oJy4nKSlcblxuICB2YXIgY3VydmUgPSBuZXcgRUMoY3VydmVJZClcbiAgdmFyIGtleSA9IGN1cnZlLmtleUZyb21Qcml2YXRlKHByaXYucHJpdmF0ZUtleSlcbiAgdmFyIG91dCA9IGtleS5zaWduKGhhc2gpXG5cbiAgcmV0dXJuIG5ldyBCdWZmZXIob3V0LnRvREVSKCkpXG59XG5cbmZ1bmN0aW9uIGRzYVNpZ24gKGhhc2gsIHByaXYsIGFsZ28pIHtcbiAgdmFyIHggPSBwcml2LnBhcmFtcy5wcml2X2tleVxuICB2YXIgcCA9IHByaXYucGFyYW1zLnBcbiAgdmFyIHEgPSBwcml2LnBhcmFtcy5xXG4gIHZhciBnID0gcHJpdi5wYXJhbXMuZ1xuICB2YXIgciA9IG5ldyBCTigwKVxuICB2YXIga1xuICB2YXIgSCA9IGJpdHMyaW50KGhhc2gsIHEpLm1vZChxKVxuICB2YXIgcyA9IGZhbHNlXG4gIHZhciBrdiA9IGdldEtleSh4LCBxLCBoYXNoLCBhbGdvKVxuICB3aGlsZSAocyA9PT0gZmFsc2UpIHtcbiAgICBrID0gbWFrZUtleShxLCBrdiwgYWxnbylcbiAgICByID0gbWFrZVIoZywgaywgcCwgcSlcbiAgICBzID0gay5pbnZtKHEpLmltdWwoSC5hZGQoeC5tdWwocikpKS5tb2QocSlcbiAgICBpZiAocy5jbXBuKDApID09PSAwKSB7XG4gICAgICBzID0gZmFsc2VcbiAgICAgIHIgPSBuZXcgQk4oMClcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRvREVSKHIsIHMpXG59XG5cbmZ1bmN0aW9uIHRvREVSIChyLCBzKSB7XG4gIHIgPSByLnRvQXJyYXkoKVxuICBzID0gcy50b0FycmF5KClcblxuICAvLyBQYWQgdmFsdWVzXG4gIGlmIChyWzBdICYgMHg4MCkgciA9IFsgMCBdLmNvbmNhdChyKVxuICBpZiAoc1swXSAmIDB4ODApIHMgPSBbIDAgXS5jb25jYXQocylcblxuICB2YXIgdG90YWwgPSByLmxlbmd0aCArIHMubGVuZ3RoICsgNFxuICB2YXIgcmVzID0gWyAweDMwLCB0b3RhbCwgMHgwMiwgci5sZW5ndGggXVxuICByZXMgPSByZXMuY29uY2F0KHIsIFsgMHgwMiwgcy5sZW5ndGggXSwgcylcbiAgcmV0dXJuIG5ldyBCdWZmZXIocmVzKVxufVxuXG5mdW5jdGlvbiBnZXRLZXkgKHgsIHEsIGhhc2gsIGFsZ28pIHtcbiAgeCA9IG5ldyBCdWZmZXIoeC50b0FycmF5KCkpXG4gIGlmICh4Lmxlbmd0aCA8IHEuYnl0ZUxlbmd0aCgpKSB7XG4gICAgdmFyIHplcm9zID0gbmV3IEJ1ZmZlcihxLmJ5dGVMZW5ndGgoKSAtIHgubGVuZ3RoKVxuICAgIHplcm9zLmZpbGwoMClcbiAgICB4ID0gQnVmZmVyLmNvbmNhdChbIHplcm9zLCB4IF0pXG4gIH1cbiAgdmFyIGhsZW4gPSBoYXNoLmxlbmd0aFxuICB2YXIgaGJpdHMgPSBiaXRzMm9jdGV0cyhoYXNoLCBxKVxuICB2YXIgdiA9IG5ldyBCdWZmZXIoaGxlbilcbiAgdi5maWxsKDEpXG4gIHZhciBrID0gbmV3IEJ1ZmZlcihobGVuKVxuICBrLmZpbGwoMClcbiAgayA9IGNyZWF0ZUhtYWMoYWxnbywgaykudXBkYXRlKHYpLnVwZGF0ZShuZXcgQnVmZmVyKFsgMCBdKSkudXBkYXRlKHgpLnVwZGF0ZShoYml0cykuZGlnZXN0KClcbiAgdiA9IGNyZWF0ZUhtYWMoYWxnbywgaykudXBkYXRlKHYpLmRpZ2VzdCgpXG4gIGsgPSBjcmVhdGVIbWFjKGFsZ28sIGspLnVwZGF0ZSh2KS51cGRhdGUobmV3IEJ1ZmZlcihbIDEgXSkpLnVwZGF0ZSh4KS51cGRhdGUoaGJpdHMpLmRpZ2VzdCgpXG4gIHYgPSBjcmVhdGVIbWFjKGFsZ28sIGspLnVwZGF0ZSh2KS5kaWdlc3QoKVxuICByZXR1cm4geyBrOiBrLCB2OiB2IH1cbn1cblxuZnVuY3Rpb24gYml0czJpbnQgKG9iaXRzLCBxKSB7XG4gIHZhciBiaXRzID0gbmV3IEJOKG9iaXRzKVxuICB2YXIgc2hpZnQgPSAob2JpdHMubGVuZ3RoIDw8IDMpIC0gcS5iaXRMZW5ndGgoKVxuICBpZiAoc2hpZnQgPiAwKSBiaXRzLmlzaHJuKHNoaWZ0KVxuICByZXR1cm4gYml0c1xufVxuXG5mdW5jdGlvbiBiaXRzMm9jdGV0cyAoYml0cywgcSkge1xuICBiaXRzID0gYml0czJpbnQoYml0cywgcSlcbiAgYml0cyA9IGJpdHMubW9kKHEpXG4gIHZhciBvdXQgPSBuZXcgQnVmZmVyKGJpdHMudG9BcnJheSgpKVxuICBpZiAob3V0Lmxlbmd0aCA8IHEuYnl0ZUxlbmd0aCgpKSB7XG4gICAgdmFyIHplcm9zID0gbmV3IEJ1ZmZlcihxLmJ5dGVMZW5ndGgoKSAtIG91dC5sZW5ndGgpXG4gICAgemVyb3MuZmlsbCgwKVxuICAgIG91dCA9IEJ1ZmZlci5jb25jYXQoWyB6ZXJvcywgb3V0IF0pXG4gIH1cbiAgcmV0dXJuIG91dFxufVxuXG5mdW5jdGlvbiBtYWtlS2V5IChxLCBrdiwgYWxnbykge1xuICB2YXIgdFxuICB2YXIga1xuXG4gIGRvIHtcbiAgICB0ID0gbmV3IEJ1ZmZlcigwKVxuXG4gICAgd2hpbGUgKHQubGVuZ3RoICogOCA8IHEuYml0TGVuZ3RoKCkpIHtcbiAgICAgIGt2LnYgPSBjcmVhdGVIbWFjKGFsZ28sIGt2LmspLnVwZGF0ZShrdi52KS5kaWdlc3QoKVxuICAgICAgdCA9IEJ1ZmZlci5jb25jYXQoWyB0LCBrdi52IF0pXG4gICAgfVxuXG4gICAgayA9IGJpdHMyaW50KHQsIHEpXG4gICAga3YuayA9IGNyZWF0ZUhtYWMoYWxnbywga3YuaykudXBkYXRlKGt2LnYpLnVwZGF0ZShuZXcgQnVmZmVyKFsgMCBdKSkuZGlnZXN0KClcbiAgICBrdi52ID0gY3JlYXRlSG1hYyhhbGdvLCBrdi5rKS51cGRhdGUoa3YudikuZGlnZXN0KClcbiAgfSB3aGlsZSAoay5jbXAocSkgIT09IC0xKVxuXG4gIHJldHVybiBrXG59XG5cbmZ1bmN0aW9uIG1ha2VSIChnLCBrLCBwLCBxKSB7XG4gIHJldHVybiBnLnRvUmVkKEJOLm1vbnQocCkpLnJlZFBvdyhrKS5mcm9tUmVkKCkubW9kKHEpXG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2lnblxubW9kdWxlLmV4cG9ydHMuZ2V0S2V5ID0gZ2V0S2V5XG5tb2R1bGUuZXhwb3J0cy5tYWtlS2V5ID0gbWFrZUtleVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xudmFyIEJOID0gcmVxdWlyZSgnYm4uanMnKTtcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG52YXIgQmFzZSA9IHJlcXVpcmUoJy4vYmFzZScpO1xuXG52YXIgYXNzZXJ0ID0gdXRpbHMuYXNzZXJ0O1xuXG5mdW5jdGlvbiBTaG9ydEN1cnZlKGNvbmYpIHtcbiAgQmFzZS5jYWxsKHRoaXMsICdzaG9ydCcsIGNvbmYpO1xuXG4gIHRoaXMuYSA9IG5ldyBCTihjb25mLmEsIDE2KS50b1JlZCh0aGlzLnJlZCk7XG4gIHRoaXMuYiA9IG5ldyBCTihjb25mLmIsIDE2KS50b1JlZCh0aGlzLnJlZCk7XG4gIHRoaXMudGludiA9IHRoaXMudHdvLnJlZEludm0oKTtcblxuICB0aGlzLnplcm9BID0gdGhpcy5hLmZyb21SZWQoKS5jbXBuKDApID09PSAwO1xuICB0aGlzLnRocmVlQSA9IHRoaXMuYS5mcm9tUmVkKCkuc3ViKHRoaXMucCkuY21wbigtMykgPT09IDA7XG5cbiAgLy8gSWYgdGhlIGN1cnZlIGlzIGVuZG9tb3JwaGljLCBwcmVjYWxjdWxhdGUgYmV0YSBhbmQgbGFtYmRhXG4gIHRoaXMuZW5kbyA9IHRoaXMuX2dldEVuZG9tb3JwaGlzbShjb25mKTtcbiAgdGhpcy5fZW5kb1duYWZUMSA9IG5ldyBBcnJheSg0KTtcbiAgdGhpcy5fZW5kb1duYWZUMiA9IG5ldyBBcnJheSg0KTtcbn1cbmluaGVyaXRzKFNob3J0Q3VydmUsIEJhc2UpO1xubW9kdWxlLmV4cG9ydHMgPSBTaG9ydEN1cnZlO1xuXG5TaG9ydEN1cnZlLnByb3RvdHlwZS5fZ2V0RW5kb21vcnBoaXNtID0gZnVuY3Rpb24gX2dldEVuZG9tb3JwaGlzbShjb25mKSB7XG4gIC8vIE5vIGVmZmljaWVudCBlbmRvbW9ycGhpc21cbiAgaWYgKCF0aGlzLnplcm9BIHx8ICF0aGlzLmcgfHwgIXRoaXMubiB8fCB0aGlzLnAubW9kbigzKSAhPT0gMSlcbiAgICByZXR1cm47XG5cbiAgLy8gQ29tcHV0ZSBiZXRhIGFuZCBsYW1iZGEsIHRoYXQgbGFtYmRhICogUCA9IChiZXRhICogUHg7IFB5KVxuICB2YXIgYmV0YTtcbiAgdmFyIGxhbWJkYTtcbiAgaWYgKGNvbmYuYmV0YSkge1xuICAgIGJldGEgPSBuZXcgQk4oY29uZi5iZXRhLCAxNikudG9SZWQodGhpcy5yZWQpO1xuICB9IGVsc2Uge1xuICAgIHZhciBiZXRhcyA9IHRoaXMuX2dldEVuZG9Sb290cyh0aGlzLnApO1xuICAgIC8vIENob29zZSB0aGUgc21hbGxlc3QgYmV0YVxuICAgIGJldGEgPSBiZXRhc1swXS5jbXAoYmV0YXNbMV0pIDwgMCA/IGJldGFzWzBdIDogYmV0YXNbMV07XG4gICAgYmV0YSA9IGJldGEudG9SZWQodGhpcy5yZWQpO1xuICB9XG4gIGlmIChjb25mLmxhbWJkYSkge1xuICAgIGxhbWJkYSA9IG5ldyBCTihjb25mLmxhbWJkYSwgMTYpO1xuICB9IGVsc2Uge1xuICAgIC8vIENob29zZSB0aGUgbGFtYmRhIHRoYXQgaXMgbWF0Y2hpbmcgc2VsZWN0ZWQgYmV0YVxuICAgIHZhciBsYW1iZGFzID0gdGhpcy5fZ2V0RW5kb1Jvb3RzKHRoaXMubik7XG4gICAgaWYgKHRoaXMuZy5tdWwobGFtYmRhc1swXSkueC5jbXAodGhpcy5nLngucmVkTXVsKGJldGEpKSA9PT0gMCkge1xuICAgICAgbGFtYmRhID0gbGFtYmRhc1swXTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGFtYmRhID0gbGFtYmRhc1sxXTtcbiAgICAgIGFzc2VydCh0aGlzLmcubXVsKGxhbWJkYSkueC5jbXAodGhpcy5nLngucmVkTXVsKGJldGEpKSA9PT0gMCk7XG4gICAgfVxuICB9XG5cbiAgLy8gR2V0IGJhc2lzIHZlY3RvcnMsIHVzZWQgZm9yIGJhbGFuY2VkIGxlbmd0aC10d28gcmVwcmVzZW50YXRpb25cbiAgdmFyIGJhc2lzO1xuICBpZiAoY29uZi5iYXNpcykge1xuICAgIGJhc2lzID0gY29uZi5iYXNpcy5tYXAoZnVuY3Rpb24odmVjKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBhOiBuZXcgQk4odmVjLmEsIDE2KSxcbiAgICAgICAgYjogbmV3IEJOKHZlYy5iLCAxNilcbiAgICAgIH07XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgYmFzaXMgPSB0aGlzLl9nZXRFbmRvQmFzaXMobGFtYmRhKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgYmV0YTogYmV0YSxcbiAgICBsYW1iZGE6IGxhbWJkYSxcbiAgICBiYXNpczogYmFzaXNcbiAgfTtcbn07XG5cblNob3J0Q3VydmUucHJvdG90eXBlLl9nZXRFbmRvUm9vdHMgPSBmdW5jdGlvbiBfZ2V0RW5kb1Jvb3RzKG51bSkge1xuICAvLyBGaW5kIHJvb3RzIG9mIGZvciB4XjIgKyB4ICsgMSBpbiBGXG4gIC8vIFJvb3QgPSAoLTEgKy0gU3FydCgtMykpIC8gMlxuICAvL1xuICB2YXIgcmVkID0gbnVtID09PSB0aGlzLnAgPyB0aGlzLnJlZCA6IEJOLm1vbnQobnVtKTtcbiAgdmFyIHRpbnYgPSBuZXcgQk4oMikudG9SZWQocmVkKS5yZWRJbnZtKCk7XG4gIHZhciBudGludiA9IHRpbnYucmVkTmVnKCk7XG5cbiAgdmFyIHMgPSBuZXcgQk4oMykudG9SZWQocmVkKS5yZWROZWcoKS5yZWRTcXJ0KCkucmVkTXVsKHRpbnYpO1xuXG4gIHZhciBsMSA9IG50aW52LnJlZEFkZChzKS5mcm9tUmVkKCk7XG4gIHZhciBsMiA9IG50aW52LnJlZFN1YihzKS5mcm9tUmVkKCk7XG4gIHJldHVybiBbIGwxLCBsMiBdO1xufTtcblxuU2hvcnRDdXJ2ZS5wcm90b3R5cGUuX2dldEVuZG9CYXNpcyA9IGZ1bmN0aW9uIF9nZXRFbmRvQmFzaXMobGFtYmRhKSB7XG4gIC8vIGFwcnhTcXJ0ID49IHNxcnQodGhpcy5uKVxuICB2YXIgYXByeFNxcnQgPSB0aGlzLm4udXNocm4oTWF0aC5mbG9vcih0aGlzLm4uYml0TGVuZ3RoKCkgLyAyKSk7XG5cbiAgLy8gMy43NFxuICAvLyBSdW4gRUdDRCwgdW50aWwgcihMICsgMSkgPCBhcHJ4U3FydFxuICB2YXIgdSA9IGxhbWJkYTtcbiAgdmFyIHYgPSB0aGlzLm4uY2xvbmUoKTtcbiAgdmFyIHgxID0gbmV3IEJOKDEpO1xuICB2YXIgeTEgPSBuZXcgQk4oMCk7XG4gIHZhciB4MiA9IG5ldyBCTigwKTtcbiAgdmFyIHkyID0gbmV3IEJOKDEpO1xuXG4gIC8vIE5PVEU6IGFsbCB2ZWN0b3JzIGFyZSByb290cyBvZjogYSArIGIgKiBsYW1iZGEgPSAwIChtb2QgbilcbiAgdmFyIGEwO1xuICB2YXIgYjA7XG4gIC8vIEZpcnN0IHZlY3RvclxuICB2YXIgYTE7XG4gIHZhciBiMTtcbiAgLy8gU2Vjb25kIHZlY3RvclxuICB2YXIgYTI7XG4gIHZhciBiMjtcblxuICB2YXIgcHJldlI7XG4gIHZhciBpID0gMDtcbiAgdmFyIHI7XG4gIHZhciB4O1xuICB3aGlsZSAodS5jbXBuKDApICE9PSAwKSB7XG4gICAgdmFyIHEgPSB2LmRpdih1KTtcbiAgICByID0gdi5zdWIocS5tdWwodSkpO1xuICAgIHggPSB4Mi5zdWIocS5tdWwoeDEpKTtcbiAgICB2YXIgeSA9IHkyLnN1YihxLm11bCh5MSkpO1xuXG4gICAgaWYgKCFhMSAmJiByLmNtcChhcHJ4U3FydCkgPCAwKSB7XG4gICAgICBhMCA9IHByZXZSLm5lZygpO1xuICAgICAgYjAgPSB4MTtcbiAgICAgIGExID0gci5uZWcoKTtcbiAgICAgIGIxID0geDtcbiAgICB9IGVsc2UgaWYgKGExICYmICsraSA9PT0gMikge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHByZXZSID0gcjtcblxuICAgIHYgPSB1O1xuICAgIHUgPSByO1xuICAgIHgyID0geDE7XG4gICAgeDEgPSB4O1xuICAgIHkyID0geTE7XG4gICAgeTEgPSB5O1xuICB9XG4gIGEyID0gci5uZWcoKTtcbiAgYjIgPSB4O1xuXG4gIHZhciBsZW4xID0gYTEuc3FyKCkuYWRkKGIxLnNxcigpKTtcbiAgdmFyIGxlbjIgPSBhMi5zcXIoKS5hZGQoYjIuc3FyKCkpO1xuICBpZiAobGVuMi5jbXAobGVuMSkgPj0gMCkge1xuICAgIGEyID0gYTA7XG4gICAgYjIgPSBiMDtcbiAgfVxuXG4gIC8vIE5vcm1hbGl6ZSBzaWduc1xuICBpZiAoYTEubmVnYXRpdmUpIHtcbiAgICBhMSA9IGExLm5lZygpO1xuICAgIGIxID0gYjEubmVnKCk7XG4gIH1cbiAgaWYgKGEyLm5lZ2F0aXZlKSB7XG4gICAgYTIgPSBhMi5uZWcoKTtcbiAgICBiMiA9IGIyLm5lZygpO1xuICB9XG5cbiAgcmV0dXJuIFtcbiAgICB7IGE6IGExLCBiOiBiMSB9LFxuICAgIHsgYTogYTIsIGI6IGIyIH1cbiAgXTtcbn07XG5cblNob3J0Q3VydmUucHJvdG90eXBlLl9lbmRvU3BsaXQgPSBmdW5jdGlvbiBfZW5kb1NwbGl0KGspIHtcbiAgdmFyIGJhc2lzID0gdGhpcy5lbmRvLmJhc2lzO1xuICB2YXIgdjEgPSBiYXNpc1swXTtcbiAgdmFyIHYyID0gYmFzaXNbMV07XG5cbiAgdmFyIGMxID0gdjIuYi5tdWwoaykuZGl2Um91bmQodGhpcy5uKTtcbiAgdmFyIGMyID0gdjEuYi5uZWcoKS5tdWwoaykuZGl2Um91bmQodGhpcy5uKTtcblxuICB2YXIgcDEgPSBjMS5tdWwodjEuYSk7XG4gIHZhciBwMiA9IGMyLm11bCh2Mi5hKTtcbiAgdmFyIHExID0gYzEubXVsKHYxLmIpO1xuICB2YXIgcTIgPSBjMi5tdWwodjIuYik7XG5cbiAgLy8gQ2FsY3VsYXRlIGFuc3dlclxuICB2YXIgazEgPSBrLnN1YihwMSkuc3ViKHAyKTtcbiAgdmFyIGsyID0gcTEuYWRkKHEyKS5uZWcoKTtcbiAgcmV0dXJuIHsgazE6IGsxLCBrMjogazIgfTtcbn07XG5cblNob3J0Q3VydmUucHJvdG90eXBlLnBvaW50RnJvbVggPSBmdW5jdGlvbiBwb2ludEZyb21YKHgsIG9kZCkge1xuICB4ID0gbmV3IEJOKHgsIDE2KTtcbiAgaWYgKCF4LnJlZClcbiAgICB4ID0geC50b1JlZCh0aGlzLnJlZCk7XG5cbiAgdmFyIHkyID0geC5yZWRTcXIoKS5yZWRNdWwoeCkucmVkSUFkZCh4LnJlZE11bCh0aGlzLmEpKS5yZWRJQWRkKHRoaXMuYik7XG4gIHZhciB5ID0geTIucmVkU3FydCgpO1xuICBpZiAoeS5yZWRTcXIoKS5yZWRTdWIoeTIpLmNtcCh0aGlzLnplcm8pICE9PSAwKVxuICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBwb2ludCcpO1xuXG4gIC8vIFhYWCBJcyB0aGVyZSBhbnkgd2F5IHRvIHRlbGwgaWYgdGhlIG51bWJlciBpcyBvZGQgd2l0aG91dCBjb252ZXJ0aW5nIGl0XG4gIC8vIHRvIG5vbi1yZWQgZm9ybT9cbiAgdmFyIGlzT2RkID0geS5mcm9tUmVkKCkuaXNPZGQoKTtcbiAgaWYgKG9kZCAmJiAhaXNPZGQgfHwgIW9kZCAmJiBpc09kZClcbiAgICB5ID0geS5yZWROZWcoKTtcblxuICByZXR1cm4gdGhpcy5wb2ludCh4LCB5KTtcbn07XG5cblNob3J0Q3VydmUucHJvdG90eXBlLnZhbGlkYXRlID0gZnVuY3Rpb24gdmFsaWRhdGUocG9pbnQpIHtcbiAgaWYgKHBvaW50LmluZilcbiAgICByZXR1cm4gdHJ1ZTtcblxuICB2YXIgeCA9IHBvaW50Lng7XG4gIHZhciB5ID0gcG9pbnQueTtcblxuICB2YXIgYXggPSB0aGlzLmEucmVkTXVsKHgpO1xuICB2YXIgcmhzID0geC5yZWRTcXIoKS5yZWRNdWwoeCkucmVkSUFkZChheCkucmVkSUFkZCh0aGlzLmIpO1xuICByZXR1cm4geS5yZWRTcXIoKS5yZWRJU3ViKHJocykuY21wbigwKSA9PT0gMDtcbn07XG5cblNob3J0Q3VydmUucHJvdG90eXBlLl9lbmRvV25hZk11bEFkZCA9XG4gICAgZnVuY3Rpb24gX2VuZG9XbmFmTXVsQWRkKHBvaW50cywgY29lZmZzLCBqYWNvYmlhblJlc3VsdCkge1xuICB2YXIgbnBvaW50cyA9IHRoaXMuX2VuZG9XbmFmVDE7XG4gIHZhciBuY29lZmZzID0gdGhpcy5fZW5kb1duYWZUMjtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwb2ludHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc3BsaXQgPSB0aGlzLl9lbmRvU3BsaXQoY29lZmZzW2ldKTtcbiAgICB2YXIgcCA9IHBvaW50c1tpXTtcbiAgICB2YXIgYmV0YSA9IHAuX2dldEJldGEoKTtcblxuICAgIGlmIChzcGxpdC5rMS5uZWdhdGl2ZSkge1xuICAgICAgc3BsaXQuazEuaW5lZygpO1xuICAgICAgcCA9IHAubmVnKHRydWUpO1xuICAgIH1cbiAgICBpZiAoc3BsaXQuazIubmVnYXRpdmUpIHtcbiAgICAgIHNwbGl0LmsyLmluZWcoKTtcbiAgICAgIGJldGEgPSBiZXRhLm5lZyh0cnVlKTtcbiAgICB9XG5cbiAgICBucG9pbnRzW2kgKiAyXSA9IHA7XG4gICAgbnBvaW50c1tpICogMiArIDFdID0gYmV0YTtcbiAgICBuY29lZmZzW2kgKiAyXSA9IHNwbGl0LmsxO1xuICAgIG5jb2VmZnNbaSAqIDIgKyAxXSA9IHNwbGl0LmsyO1xuICB9XG4gIHZhciByZXMgPSB0aGlzLl93bmFmTXVsQWRkKDEsIG5wb2ludHMsIG5jb2VmZnMsIGkgKiAyLCBqYWNvYmlhblJlc3VsdCk7XG5cbiAgLy8gQ2xlYW4tdXAgcmVmZXJlbmNlcyB0byBwb2ludHMgYW5kIGNvZWZmaWNpZW50c1xuICBmb3IgKHZhciBqID0gMDsgaiA8IGkgKiAyOyBqKyspIHtcbiAgICBucG9pbnRzW2pdID0gbnVsbDtcbiAgICBuY29lZmZzW2pdID0gbnVsbDtcbiAgfVxuICByZXR1cm4gcmVzO1xufTtcblxuZnVuY3Rpb24gUG9pbnQoY3VydmUsIHgsIHksIGlzUmVkKSB7XG4gIEJhc2UuQmFzZVBvaW50LmNhbGwodGhpcywgY3VydmUsICdhZmZpbmUnKTtcbiAgaWYgKHggPT09IG51bGwgJiYgeSA9PT0gbnVsbCkge1xuICAgIHRoaXMueCA9IG51bGw7XG4gICAgdGhpcy55ID0gbnVsbDtcbiAgICB0aGlzLmluZiA9IHRydWU7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy54ID0gbmV3IEJOKHgsIDE2KTtcbiAgICB0aGlzLnkgPSBuZXcgQk4oeSwgMTYpO1xuICAgIC8vIEZvcmNlIHJlZGdvbWVyeSByZXByZXNlbnRhdGlvbiB3aGVuIGxvYWRpbmcgZnJvbSBKU09OXG4gICAgaWYgKGlzUmVkKSB7XG4gICAgICB0aGlzLnguZm9yY2VSZWQodGhpcy5jdXJ2ZS5yZWQpO1xuICAgICAgdGhpcy55LmZvcmNlUmVkKHRoaXMuY3VydmUucmVkKTtcbiAgICB9XG4gICAgaWYgKCF0aGlzLngucmVkKVxuICAgICAgdGhpcy54ID0gdGhpcy54LnRvUmVkKHRoaXMuY3VydmUucmVkKTtcbiAgICBpZiAoIXRoaXMueS5yZWQpXG4gICAgICB0aGlzLnkgPSB0aGlzLnkudG9SZWQodGhpcy5jdXJ2ZS5yZWQpO1xuICAgIHRoaXMuaW5mID0gZmFsc2U7XG4gIH1cbn1cbmluaGVyaXRzKFBvaW50LCBCYXNlLkJhc2VQb2ludCk7XG5cblNob3J0Q3VydmUucHJvdG90eXBlLnBvaW50ID0gZnVuY3Rpb24gcG9pbnQoeCwgeSwgaXNSZWQpIHtcbiAgcmV0dXJuIG5ldyBQb2ludCh0aGlzLCB4LCB5LCBpc1JlZCk7XG59O1xuXG5TaG9ydEN1cnZlLnByb3RvdHlwZS5wb2ludEZyb21KU09OID0gZnVuY3Rpb24gcG9pbnRGcm9tSlNPTihvYmosIHJlZCkge1xuICByZXR1cm4gUG9pbnQuZnJvbUpTT04odGhpcywgb2JqLCByZWQpO1xufTtcblxuUG9pbnQucHJvdG90eXBlLl9nZXRCZXRhID0gZnVuY3Rpb24gX2dldEJldGEoKSB7XG4gIGlmICghdGhpcy5jdXJ2ZS5lbmRvKVxuICAgIHJldHVybjtcblxuICB2YXIgcHJlID0gdGhpcy5wcmVjb21wdXRlZDtcbiAgaWYgKHByZSAmJiBwcmUuYmV0YSlcbiAgICByZXR1cm4gcHJlLmJldGE7XG5cbiAgdmFyIGJldGEgPSB0aGlzLmN1cnZlLnBvaW50KHRoaXMueC5yZWRNdWwodGhpcy5jdXJ2ZS5lbmRvLmJldGEpLCB0aGlzLnkpO1xuICBpZiAocHJlKSB7XG4gICAgdmFyIGN1cnZlID0gdGhpcy5jdXJ2ZTtcbiAgICB2YXIgZW5kb011bCA9IGZ1bmN0aW9uKHApIHtcbiAgICAgIHJldHVybiBjdXJ2ZS5wb2ludChwLngucmVkTXVsKGN1cnZlLmVuZG8uYmV0YSksIHAueSk7XG4gICAgfTtcbiAgICBwcmUuYmV0YSA9IGJldGE7XG4gICAgYmV0YS5wcmVjb21wdXRlZCA9IHtcbiAgICAgIGJldGE6IG51bGwsXG4gICAgICBuYWY6IHByZS5uYWYgJiYge1xuICAgICAgICB3bmQ6IHByZS5uYWYud25kLFxuICAgICAgICBwb2ludHM6IHByZS5uYWYucG9pbnRzLm1hcChlbmRvTXVsKVxuICAgICAgfSxcbiAgICAgIGRvdWJsZXM6IHByZS5kb3VibGVzICYmIHtcbiAgICAgICAgc3RlcDogcHJlLmRvdWJsZXMuc3RlcCxcbiAgICAgICAgcG9pbnRzOiBwcmUuZG91Ymxlcy5wb2ludHMubWFwKGVuZG9NdWwpXG4gICAgICB9XG4gICAgfTtcbiAgfVxuICByZXR1cm4gYmV0YTtcbn07XG5cblBvaW50LnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04oKSB7XG4gIGlmICghdGhpcy5wcmVjb21wdXRlZClcbiAgICByZXR1cm4gWyB0aGlzLngsIHRoaXMueSBdO1xuXG4gIHJldHVybiBbIHRoaXMueCwgdGhpcy55LCB0aGlzLnByZWNvbXB1dGVkICYmIHtcbiAgICBkb3VibGVzOiB0aGlzLnByZWNvbXB1dGVkLmRvdWJsZXMgJiYge1xuICAgICAgc3RlcDogdGhpcy5wcmVjb21wdXRlZC5kb3VibGVzLnN0ZXAsXG4gICAgICBwb2ludHM6IHRoaXMucHJlY29tcHV0ZWQuZG91Ymxlcy5wb2ludHMuc2xpY2UoMSlcbiAgICB9LFxuICAgIG5hZjogdGhpcy5wcmVjb21wdXRlZC5uYWYgJiYge1xuICAgICAgd25kOiB0aGlzLnByZWNvbXB1dGVkLm5hZi53bmQsXG4gICAgICBwb2ludHM6IHRoaXMucHJlY29tcHV0ZWQubmFmLnBvaW50cy5zbGljZSgxKVxuICAgIH1cbiAgfSBdO1xufTtcblxuUG9pbnQuZnJvbUpTT04gPSBmdW5jdGlvbiBmcm9tSlNPTihjdXJ2ZSwgb2JqLCByZWQpIHtcbiAgaWYgKHR5cGVvZiBvYmogPT09ICdzdHJpbmcnKVxuICAgIG9iaiA9IEpTT04ucGFyc2Uob2JqKTtcbiAgdmFyIHJlcyA9IGN1cnZlLnBvaW50KG9ialswXSwgb2JqWzFdLCByZWQpO1xuICBpZiAoIW9ialsyXSlcbiAgICByZXR1cm4gcmVzO1xuXG4gIGZ1bmN0aW9uIG9iajJwb2ludChvYmopIHtcbiAgICByZXR1cm4gY3VydmUucG9pbnQob2JqWzBdLCBvYmpbMV0sIHJlZCk7XG4gIH1cblxuICB2YXIgcHJlID0gb2JqWzJdO1xuICByZXMucHJlY29tcHV0ZWQgPSB7XG4gICAgYmV0YTogbnVsbCxcbiAgICBkb3VibGVzOiBwcmUuZG91YmxlcyAmJiB7XG4gICAgICBzdGVwOiBwcmUuZG91Ymxlcy5zdGVwLFxuICAgICAgcG9pbnRzOiBbIHJlcyBdLmNvbmNhdChwcmUuZG91Ymxlcy5wb2ludHMubWFwKG9iajJwb2ludCkpXG4gICAgfSxcbiAgICBuYWY6IHByZS5uYWYgJiYge1xuICAgICAgd25kOiBwcmUubmFmLnduZCxcbiAgICAgIHBvaW50czogWyByZXMgXS5jb25jYXQocHJlLm5hZi5wb2ludHMubWFwKG9iajJwb2ludCkpXG4gICAgfVxuICB9O1xuICByZXR1cm4gcmVzO1xufTtcblxuUG9pbnQucHJvdG90eXBlLmluc3BlY3QgPSBmdW5jdGlvbiBpbnNwZWN0KCkge1xuICBpZiAodGhpcy5pc0luZmluaXR5KCkpXG4gICAgcmV0dXJuICc8RUMgUG9pbnQgSW5maW5pdHk+JztcbiAgcmV0dXJuICc8RUMgUG9pbnQgeDogJyArIHRoaXMueC5mcm9tUmVkKCkudG9TdHJpbmcoMTYsIDIpICtcbiAgICAgICcgeTogJyArIHRoaXMueS5mcm9tUmVkKCkudG9TdHJpbmcoMTYsIDIpICsgJz4nO1xufTtcblxuUG9pbnQucHJvdG90eXBlLmlzSW5maW5pdHkgPSBmdW5jdGlvbiBpc0luZmluaXR5KCkge1xuICByZXR1cm4gdGhpcy5pbmY7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gYWRkKHApIHtcbiAgLy8gTyArIFAgPSBQXG4gIGlmICh0aGlzLmluZilcbiAgICByZXR1cm4gcDtcblxuICAvLyBQICsgTyA9IFBcbiAgaWYgKHAuaW5mKVxuICAgIHJldHVybiB0aGlzO1xuXG4gIC8vIFAgKyBQID0gMlBcbiAgaWYgKHRoaXMuZXEocCkpXG4gICAgcmV0dXJuIHRoaXMuZGJsKCk7XG5cbiAgLy8gUCArICgtUCkgPSBPXG4gIGlmICh0aGlzLm5lZygpLmVxKHApKVxuICAgIHJldHVybiB0aGlzLmN1cnZlLnBvaW50KG51bGwsIG51bGwpO1xuXG4gIC8vIFAgKyBRID0gT1xuICBpZiAodGhpcy54LmNtcChwLngpID09PSAwKVxuICAgIHJldHVybiB0aGlzLmN1cnZlLnBvaW50KG51bGwsIG51bGwpO1xuXG4gIHZhciBjID0gdGhpcy55LnJlZFN1YihwLnkpO1xuICBpZiAoYy5jbXBuKDApICE9PSAwKVxuICAgIGMgPSBjLnJlZE11bCh0aGlzLngucmVkU3ViKHAueCkucmVkSW52bSgpKTtcbiAgdmFyIG54ID0gYy5yZWRTcXIoKS5yZWRJU3ViKHRoaXMueCkucmVkSVN1YihwLngpO1xuICB2YXIgbnkgPSBjLnJlZE11bCh0aGlzLngucmVkU3ViKG54KSkucmVkSVN1Yih0aGlzLnkpO1xuICByZXR1cm4gdGhpcy5jdXJ2ZS5wb2ludChueCwgbnkpO1xufTtcblxuUG9pbnQucHJvdG90eXBlLmRibCA9IGZ1bmN0aW9uIGRibCgpIHtcbiAgaWYgKHRoaXMuaW5mKVxuICAgIHJldHVybiB0aGlzO1xuXG4gIC8vIDJQID0gT1xuICB2YXIgeXMxID0gdGhpcy55LnJlZEFkZCh0aGlzLnkpO1xuICBpZiAoeXMxLmNtcG4oMCkgPT09IDApXG4gICAgcmV0dXJuIHRoaXMuY3VydmUucG9pbnQobnVsbCwgbnVsbCk7XG5cbiAgdmFyIGEgPSB0aGlzLmN1cnZlLmE7XG5cbiAgdmFyIHgyID0gdGhpcy54LnJlZFNxcigpO1xuICB2YXIgZHlpbnYgPSB5czEucmVkSW52bSgpO1xuICB2YXIgYyA9IHgyLnJlZEFkZCh4MikucmVkSUFkZCh4MikucmVkSUFkZChhKS5yZWRNdWwoZHlpbnYpO1xuXG4gIHZhciBueCA9IGMucmVkU3FyKCkucmVkSVN1Yih0aGlzLngucmVkQWRkKHRoaXMueCkpO1xuICB2YXIgbnkgPSBjLnJlZE11bCh0aGlzLngucmVkU3ViKG54KSkucmVkSVN1Yih0aGlzLnkpO1xuICByZXR1cm4gdGhpcy5jdXJ2ZS5wb2ludChueCwgbnkpO1xufTtcblxuUG9pbnQucHJvdG90eXBlLmdldFggPSBmdW5jdGlvbiBnZXRYKCkge1xuICByZXR1cm4gdGhpcy54LmZyb21SZWQoKTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5nZXRZID0gZnVuY3Rpb24gZ2V0WSgpIHtcbiAgcmV0dXJuIHRoaXMueS5mcm9tUmVkKCk7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUubXVsID0gZnVuY3Rpb24gbXVsKGspIHtcbiAgayA9IG5ldyBCTihrLCAxNik7XG4gIGlmICh0aGlzLmlzSW5maW5pdHkoKSlcbiAgICByZXR1cm4gdGhpcztcbiAgZWxzZSBpZiAodGhpcy5faGFzRG91YmxlcyhrKSlcbiAgICByZXR1cm4gdGhpcy5jdXJ2ZS5fZml4ZWROYWZNdWwodGhpcywgayk7XG4gIGVsc2UgaWYgKHRoaXMuY3VydmUuZW5kbylcbiAgICByZXR1cm4gdGhpcy5jdXJ2ZS5fZW5kb1duYWZNdWxBZGQoWyB0aGlzIF0sIFsgayBdKTtcbiAgZWxzZVxuICAgIHJldHVybiB0aGlzLmN1cnZlLl93bmFmTXVsKHRoaXMsIGspO1xufTtcblxuUG9pbnQucHJvdG90eXBlLm11bEFkZCA9IGZ1bmN0aW9uIG11bEFkZChrMSwgcDIsIGsyKSB7XG4gIHZhciBwb2ludHMgPSBbIHRoaXMsIHAyIF07XG4gIHZhciBjb2VmZnMgPSBbIGsxLCBrMiBdO1xuICBpZiAodGhpcy5jdXJ2ZS5lbmRvKVxuICAgIHJldHVybiB0aGlzLmN1cnZlLl9lbmRvV25hZk11bEFkZChwb2ludHMsIGNvZWZmcyk7XG4gIGVsc2VcbiAgICByZXR1cm4gdGhpcy5jdXJ2ZS5fd25hZk11bEFkZCgxLCBwb2ludHMsIGNvZWZmcywgMik7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuam11bEFkZCA9IGZ1bmN0aW9uIGptdWxBZGQoazEsIHAyLCBrMikge1xuICB2YXIgcG9pbnRzID0gWyB0aGlzLCBwMiBdO1xuICB2YXIgY29lZmZzID0gWyBrMSwgazIgXTtcbiAgaWYgKHRoaXMuY3VydmUuZW5kbylcbiAgICByZXR1cm4gdGhpcy5jdXJ2ZS5fZW5kb1duYWZNdWxBZGQocG9pbnRzLCBjb2VmZnMsIHRydWUpO1xuICBlbHNlXG4gICAgcmV0dXJuIHRoaXMuY3VydmUuX3duYWZNdWxBZGQoMSwgcG9pbnRzLCBjb2VmZnMsIDIsIHRydWUpO1xufTtcblxuUG9pbnQucHJvdG90eXBlLmVxID0gZnVuY3Rpb24gZXEocCkge1xuICByZXR1cm4gdGhpcyA9PT0gcCB8fFxuICAgICAgICAgdGhpcy5pbmYgPT09IHAuaW5mICYmXG4gICAgICAgICAgICAgKHRoaXMuaW5mIHx8IHRoaXMueC5jbXAocC54KSA9PT0gMCAmJiB0aGlzLnkuY21wKHAueSkgPT09IDApO1xufTtcblxuUG9pbnQucHJvdG90eXBlLm5lZyA9IGZ1bmN0aW9uIG5lZyhfcHJlY29tcHV0ZSkge1xuICBpZiAodGhpcy5pbmYpXG4gICAgcmV0dXJuIHRoaXM7XG5cbiAgdmFyIHJlcyA9IHRoaXMuY3VydmUucG9pbnQodGhpcy54LCB0aGlzLnkucmVkTmVnKCkpO1xuICBpZiAoX3ByZWNvbXB1dGUgJiYgdGhpcy5wcmVjb21wdXRlZCkge1xuICAgIHZhciBwcmUgPSB0aGlzLnByZWNvbXB1dGVkO1xuICAgIHZhciBuZWdhdGUgPSBmdW5jdGlvbihwKSB7XG4gICAgICByZXR1cm4gcC5uZWcoKTtcbiAgICB9O1xuICAgIHJlcy5wcmVjb21wdXRlZCA9IHtcbiAgICAgIG5hZjogcHJlLm5hZiAmJiB7XG4gICAgICAgIHduZDogcHJlLm5hZi53bmQsXG4gICAgICAgIHBvaW50czogcHJlLm5hZi5wb2ludHMubWFwKG5lZ2F0ZSlcbiAgICAgIH0sXG4gICAgICBkb3VibGVzOiBwcmUuZG91YmxlcyAmJiB7XG4gICAgICAgIHN0ZXA6IHByZS5kb3VibGVzLnN0ZXAsXG4gICAgICAgIHBvaW50czogcHJlLmRvdWJsZXMucG9pbnRzLm1hcChuZWdhdGUpXG4gICAgICB9XG4gICAgfTtcbiAgfVxuICByZXR1cm4gcmVzO1xufTtcblxuUG9pbnQucHJvdG90eXBlLnRvSiA9IGZ1bmN0aW9uIHRvSigpIHtcbiAgaWYgKHRoaXMuaW5mKVxuICAgIHJldHVybiB0aGlzLmN1cnZlLmpwb2ludChudWxsLCBudWxsLCBudWxsKTtcblxuICB2YXIgcmVzID0gdGhpcy5jdXJ2ZS5qcG9pbnQodGhpcy54LCB0aGlzLnksIHRoaXMuY3VydmUub25lKTtcbiAgcmV0dXJuIHJlcztcbn07XG5cbmZ1bmN0aW9uIEpQb2ludChjdXJ2ZSwgeCwgeSwgeikge1xuICBCYXNlLkJhc2VQb2ludC5jYWxsKHRoaXMsIGN1cnZlLCAnamFjb2JpYW4nKTtcbiAgaWYgKHggPT09IG51bGwgJiYgeSA9PT0gbnVsbCAmJiB6ID09PSBudWxsKSB7XG4gICAgdGhpcy54ID0gdGhpcy5jdXJ2ZS5vbmU7XG4gICAgdGhpcy55ID0gdGhpcy5jdXJ2ZS5vbmU7XG4gICAgdGhpcy56ID0gbmV3IEJOKDApO1xuICB9IGVsc2Uge1xuICAgIHRoaXMueCA9IG5ldyBCTih4LCAxNik7XG4gICAgdGhpcy55ID0gbmV3IEJOKHksIDE2KTtcbiAgICB0aGlzLnogPSBuZXcgQk4oeiwgMTYpO1xuICB9XG4gIGlmICghdGhpcy54LnJlZClcbiAgICB0aGlzLnggPSB0aGlzLngudG9SZWQodGhpcy5jdXJ2ZS5yZWQpO1xuICBpZiAoIXRoaXMueS5yZWQpXG4gICAgdGhpcy55ID0gdGhpcy55LnRvUmVkKHRoaXMuY3VydmUucmVkKTtcbiAgaWYgKCF0aGlzLnoucmVkKVxuICAgIHRoaXMueiA9IHRoaXMuei50b1JlZCh0aGlzLmN1cnZlLnJlZCk7XG5cbiAgdGhpcy56T25lID0gdGhpcy56ID09PSB0aGlzLmN1cnZlLm9uZTtcbn1cbmluaGVyaXRzKEpQb2ludCwgQmFzZS5CYXNlUG9pbnQpO1xuXG5TaG9ydEN1cnZlLnByb3RvdHlwZS5qcG9pbnQgPSBmdW5jdGlvbiBqcG9pbnQoeCwgeSwgeikge1xuICByZXR1cm4gbmV3IEpQb2ludCh0aGlzLCB4LCB5LCB6KTtcbn07XG5cbkpQb2ludC5wcm90b3R5cGUudG9QID0gZnVuY3Rpb24gdG9QKCkge1xuICBpZiAodGhpcy5pc0luZmluaXR5KCkpXG4gICAgcmV0dXJuIHRoaXMuY3VydmUucG9pbnQobnVsbCwgbnVsbCk7XG5cbiAgdmFyIHppbnYgPSB0aGlzLnoucmVkSW52bSgpO1xuICB2YXIgemludjIgPSB6aW52LnJlZFNxcigpO1xuICB2YXIgYXggPSB0aGlzLngucmVkTXVsKHppbnYyKTtcbiAgdmFyIGF5ID0gdGhpcy55LnJlZE11bCh6aW52MikucmVkTXVsKHppbnYpO1xuXG4gIHJldHVybiB0aGlzLmN1cnZlLnBvaW50KGF4LCBheSk7XG59O1xuXG5KUG9pbnQucHJvdG90eXBlLm5lZyA9IGZ1bmN0aW9uIG5lZygpIHtcbiAgcmV0dXJuIHRoaXMuY3VydmUuanBvaW50KHRoaXMueCwgdGhpcy55LnJlZE5lZygpLCB0aGlzLnopO1xufTtcblxuSlBvaW50LnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiBhZGQocCkge1xuICAvLyBPICsgUCA9IFBcbiAgaWYgKHRoaXMuaXNJbmZpbml0eSgpKVxuICAgIHJldHVybiBwO1xuXG4gIC8vIFAgKyBPID0gUFxuICBpZiAocC5pc0luZmluaXR5KCkpXG4gICAgcmV0dXJuIHRoaXM7XG5cbiAgLy8gMTJNICsgNFMgKyA3QVxuICB2YXIgcHoyID0gcC56LnJlZFNxcigpO1xuICB2YXIgejIgPSB0aGlzLnoucmVkU3FyKCk7XG4gIHZhciB1MSA9IHRoaXMueC5yZWRNdWwocHoyKTtcbiAgdmFyIHUyID0gcC54LnJlZE11bCh6Mik7XG4gIHZhciBzMSA9IHRoaXMueS5yZWRNdWwocHoyLnJlZE11bChwLnopKTtcbiAgdmFyIHMyID0gcC55LnJlZE11bCh6Mi5yZWRNdWwodGhpcy56KSk7XG5cbiAgdmFyIGggPSB1MS5yZWRTdWIodTIpO1xuICB2YXIgciA9IHMxLnJlZFN1YihzMik7XG4gIGlmIChoLmNtcG4oMCkgPT09IDApIHtcbiAgICBpZiAoci5jbXBuKDApICE9PSAwKVxuICAgICAgcmV0dXJuIHRoaXMuY3VydmUuanBvaW50KG51bGwsIG51bGwsIG51bGwpO1xuICAgIGVsc2VcbiAgICAgIHJldHVybiB0aGlzLmRibCgpO1xuICB9XG5cbiAgdmFyIGgyID0gaC5yZWRTcXIoKTtcbiAgdmFyIGgzID0gaDIucmVkTXVsKGgpO1xuICB2YXIgdiA9IHUxLnJlZE11bChoMik7XG5cbiAgdmFyIG54ID0gci5yZWRTcXIoKS5yZWRJQWRkKGgzKS5yZWRJU3ViKHYpLnJlZElTdWIodik7XG4gIHZhciBueSA9IHIucmVkTXVsKHYucmVkSVN1YihueCkpLnJlZElTdWIoczEucmVkTXVsKGgzKSk7XG4gIHZhciBueiA9IHRoaXMuei5yZWRNdWwocC56KS5yZWRNdWwoaCk7XG5cbiAgcmV0dXJuIHRoaXMuY3VydmUuanBvaW50KG54LCBueSwgbnopO1xufTtcblxuSlBvaW50LnByb3RvdHlwZS5taXhlZEFkZCA9IGZ1bmN0aW9uIG1peGVkQWRkKHApIHtcbiAgLy8gTyArIFAgPSBQXG4gIGlmICh0aGlzLmlzSW5maW5pdHkoKSlcbiAgICByZXR1cm4gcC50b0ooKTtcblxuICAvLyBQICsgTyA9IFBcbiAgaWYgKHAuaXNJbmZpbml0eSgpKVxuICAgIHJldHVybiB0aGlzO1xuXG4gIC8vIDhNICsgM1MgKyA3QVxuICB2YXIgejIgPSB0aGlzLnoucmVkU3FyKCk7XG4gIHZhciB1MSA9IHRoaXMueDtcbiAgdmFyIHUyID0gcC54LnJlZE11bCh6Mik7XG4gIHZhciBzMSA9IHRoaXMueTtcbiAgdmFyIHMyID0gcC55LnJlZE11bCh6MikucmVkTXVsKHRoaXMueik7XG5cbiAgdmFyIGggPSB1MS5yZWRTdWIodTIpO1xuICB2YXIgciA9IHMxLnJlZFN1YihzMik7XG4gIGlmIChoLmNtcG4oMCkgPT09IDApIHtcbiAgICBpZiAoci5jbXBuKDApICE9PSAwKVxuICAgICAgcmV0dXJuIHRoaXMuY3VydmUuanBvaW50KG51bGwsIG51bGwsIG51bGwpO1xuICAgIGVsc2VcbiAgICAgIHJldHVybiB0aGlzLmRibCgpO1xuICB9XG5cbiAgdmFyIGgyID0gaC5yZWRTcXIoKTtcbiAgdmFyIGgzID0gaDIucmVkTXVsKGgpO1xuICB2YXIgdiA9IHUxLnJlZE11bChoMik7XG5cbiAgdmFyIG54ID0gci5yZWRTcXIoKS5yZWRJQWRkKGgzKS5yZWRJU3ViKHYpLnJlZElTdWIodik7XG4gIHZhciBueSA9IHIucmVkTXVsKHYucmVkSVN1YihueCkpLnJlZElTdWIoczEucmVkTXVsKGgzKSk7XG4gIHZhciBueiA9IHRoaXMuei5yZWRNdWwoaCk7XG5cbiAgcmV0dXJuIHRoaXMuY3VydmUuanBvaW50KG54LCBueSwgbnopO1xufTtcblxuSlBvaW50LnByb3RvdHlwZS5kYmxwID0gZnVuY3Rpb24gZGJscChwb3cpIHtcbiAgaWYgKHBvdyA9PT0gMClcbiAgICByZXR1cm4gdGhpcztcbiAgaWYgKHRoaXMuaXNJbmZpbml0eSgpKVxuICAgIHJldHVybiB0aGlzO1xuICBpZiAoIXBvdylcbiAgICByZXR1cm4gdGhpcy5kYmwoKTtcblxuICBpZiAodGhpcy5jdXJ2ZS56ZXJvQSB8fCB0aGlzLmN1cnZlLnRocmVlQSkge1xuICAgIHZhciByID0gdGhpcztcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBvdzsgaSsrKVxuICAgICAgciA9IHIuZGJsKCk7XG4gICAgcmV0dXJuIHI7XG4gIH1cblxuICAvLyAxTSArIDJTICsgMUEgKyBOICogKDRTICsgNU0gKyA4QSlcbiAgLy8gTiA9IDEgPT4gNk0gKyA2UyArIDlBXG4gIHZhciBhID0gdGhpcy5jdXJ2ZS5hO1xuICB2YXIgdGludiA9IHRoaXMuY3VydmUudGludjtcblxuICB2YXIganggPSB0aGlzLng7XG4gIHZhciBqeSA9IHRoaXMueTtcbiAgdmFyIGp6ID0gdGhpcy56O1xuICB2YXIgano0ID0ganoucmVkU3FyKCkucmVkU3FyKCk7XG5cbiAgLy8gUmV1c2UgcmVzdWx0c1xuICB2YXIganlkID0gankucmVkQWRkKGp5KTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwb3c7IGkrKykge1xuICAgIHZhciBqeDIgPSBqeC5yZWRTcXIoKTtcbiAgICB2YXIganlkMiA9IGp5ZC5yZWRTcXIoKTtcbiAgICB2YXIganlkNCA9IGp5ZDIucmVkU3FyKCk7XG4gICAgdmFyIGMgPSBqeDIucmVkQWRkKGp4MikucmVkSUFkZChqeDIpLnJlZElBZGQoYS5yZWRNdWwoano0KSk7XG5cbiAgICB2YXIgdDEgPSBqeC5yZWRNdWwoanlkMik7XG4gICAgdmFyIG54ID0gYy5yZWRTcXIoKS5yZWRJU3ViKHQxLnJlZEFkZCh0MSkpO1xuICAgIHZhciB0MiA9IHQxLnJlZElTdWIobngpO1xuICAgIHZhciBkbnkgPSBjLnJlZE11bCh0Mik7XG4gICAgZG55ID0gZG55LnJlZElBZGQoZG55KS5yZWRJU3ViKGp5ZDQpO1xuICAgIHZhciBueiA9IGp5ZC5yZWRNdWwoanopO1xuICAgIGlmIChpICsgMSA8IHBvdylcbiAgICAgIGp6NCA9IGp6NC5yZWRNdWwoanlkNCk7XG5cbiAgICBqeCA9IG54O1xuICAgIGp6ID0gbno7XG4gICAganlkID0gZG55O1xuICB9XG5cbiAgcmV0dXJuIHRoaXMuY3VydmUuanBvaW50KGp4LCBqeWQucmVkTXVsKHRpbnYpLCBqeik7XG59O1xuXG5KUG9pbnQucHJvdG90eXBlLmRibCA9IGZ1bmN0aW9uIGRibCgpIHtcbiAgaWYgKHRoaXMuaXNJbmZpbml0eSgpKVxuICAgIHJldHVybiB0aGlzO1xuXG4gIGlmICh0aGlzLmN1cnZlLnplcm9BKVxuICAgIHJldHVybiB0aGlzLl96ZXJvRGJsKCk7XG4gIGVsc2UgaWYgKHRoaXMuY3VydmUudGhyZWVBKVxuICAgIHJldHVybiB0aGlzLl90aHJlZURibCgpO1xuICBlbHNlXG4gICAgcmV0dXJuIHRoaXMuX2RibCgpO1xufTtcblxuSlBvaW50LnByb3RvdHlwZS5femVyb0RibCA9IGZ1bmN0aW9uIF96ZXJvRGJsKCkge1xuICB2YXIgbng7XG4gIHZhciBueTtcbiAgdmFyIG56O1xuICAvLyBaID0gMVxuICBpZiAodGhpcy56T25lKSB7XG4gICAgLy8gaHlwZXJlbGxpcHRpYy5vcmcvRUZEL2cxcC9hdXRvLXNob3J0dy1qYWNvYmlhbi0wLmh0bWxcbiAgICAvLyAgICAgI2RvdWJsaW5nLW1kYmwtMjAwNy1ibFxuICAgIC8vIDFNICsgNVMgKyAxNEFcblxuICAgIC8vIFhYID0gWDFeMlxuICAgIHZhciB4eCA9IHRoaXMueC5yZWRTcXIoKTtcbiAgICAvLyBZWSA9IFkxXjJcbiAgICB2YXIgeXkgPSB0aGlzLnkucmVkU3FyKCk7XG4gICAgLy8gWVlZWSA9IFlZXjJcbiAgICB2YXIgeXl5eSA9IHl5LnJlZFNxcigpO1xuICAgIC8vIFMgPSAyICogKChYMSArIFlZKV4yIC0gWFggLSBZWVlZKVxuICAgIHZhciBzID0gdGhpcy54LnJlZEFkZCh5eSkucmVkU3FyKCkucmVkSVN1Yih4eCkucmVkSVN1Yih5eXl5KTtcbiAgICBzID0gcy5yZWRJQWRkKHMpO1xuICAgIC8vIE0gPSAzICogWFggKyBhOyBhID0gMFxuICAgIHZhciBtID0geHgucmVkQWRkKHh4KS5yZWRJQWRkKHh4KTtcbiAgICAvLyBUID0gTSBeIDIgLSAyKlNcbiAgICB2YXIgdCA9IG0ucmVkU3FyKCkucmVkSVN1YihzKS5yZWRJU3ViKHMpO1xuXG4gICAgLy8gOCAqIFlZWVlcbiAgICB2YXIgeXl5eTggPSB5eXl5LnJlZElBZGQoeXl5eSk7XG4gICAgeXl5eTggPSB5eXl5OC5yZWRJQWRkKHl5eXk4KTtcbiAgICB5eXl5OCA9IHl5eXk4LnJlZElBZGQoeXl5eTgpO1xuXG4gICAgLy8gWDMgPSBUXG4gICAgbnggPSB0O1xuICAgIC8vIFkzID0gTSAqIChTIC0gVCkgLSA4ICogWVlZWVxuICAgIG55ID0gbS5yZWRNdWwocy5yZWRJU3ViKHQpKS5yZWRJU3ViKHl5eXk4KTtcbiAgICAvLyBaMyA9IDIqWTFcbiAgICBueiA9IHRoaXMueS5yZWRBZGQodGhpcy55KTtcbiAgfSBlbHNlIHtcbiAgICAvLyBoeXBlcmVsbGlwdGljLm9yZy9FRkQvZzFwL2F1dG8tc2hvcnR3LWphY29iaWFuLTAuaHRtbFxuICAgIC8vICAgICAjZG91YmxpbmctZGJsLTIwMDktbFxuICAgIC8vIDJNICsgNVMgKyAxM0FcblxuICAgIC8vIEEgPSBYMV4yXG4gICAgdmFyIGEgPSB0aGlzLngucmVkU3FyKCk7XG4gICAgLy8gQiA9IFkxXjJcbiAgICB2YXIgYiA9IHRoaXMueS5yZWRTcXIoKTtcbiAgICAvLyBDID0gQl4yXG4gICAgdmFyIGMgPSBiLnJlZFNxcigpO1xuICAgIC8vIEQgPSAyICogKChYMSArIEIpXjIgLSBBIC0gQylcbiAgICB2YXIgZCA9IHRoaXMueC5yZWRBZGQoYikucmVkU3FyKCkucmVkSVN1YihhKS5yZWRJU3ViKGMpO1xuICAgIGQgPSBkLnJlZElBZGQoZCk7XG4gICAgLy8gRSA9IDMgKiBBXG4gICAgdmFyIGUgPSBhLnJlZEFkZChhKS5yZWRJQWRkKGEpO1xuICAgIC8vIEYgPSBFXjJcbiAgICB2YXIgZiA9IGUucmVkU3FyKCk7XG5cbiAgICAvLyA4ICogQ1xuICAgIHZhciBjOCA9IGMucmVkSUFkZChjKTtcbiAgICBjOCA9IGM4LnJlZElBZGQoYzgpO1xuICAgIGM4ID0gYzgucmVkSUFkZChjOCk7XG5cbiAgICAvLyBYMyA9IEYgLSAyICogRFxuICAgIG54ID0gZi5yZWRJU3ViKGQpLnJlZElTdWIoZCk7XG4gICAgLy8gWTMgPSBFICogKEQgLSBYMykgLSA4ICogQ1xuICAgIG55ID0gZS5yZWRNdWwoZC5yZWRJU3ViKG54KSkucmVkSVN1YihjOCk7XG4gICAgLy8gWjMgPSAyICogWTEgKiBaMVxuICAgIG56ID0gdGhpcy55LnJlZE11bCh0aGlzLnopO1xuICAgIG56ID0gbnoucmVkSUFkZChueik7XG4gIH1cblxuICByZXR1cm4gdGhpcy5jdXJ2ZS5qcG9pbnQobngsIG55LCBueik7XG59O1xuXG5KUG9pbnQucHJvdG90eXBlLl90aHJlZURibCA9IGZ1bmN0aW9uIF90aHJlZURibCgpIHtcbiAgdmFyIG54O1xuICB2YXIgbnk7XG4gIHZhciBuejtcbiAgLy8gWiA9IDFcbiAgaWYgKHRoaXMuek9uZSkge1xuICAgIC8vIGh5cGVyZWxsaXB0aWMub3JnL0VGRC9nMXAvYXV0by1zaG9ydHctamFjb2JpYW4tMy5odG1sXG4gICAgLy8gICAgICNkb3VibGluZy1tZGJsLTIwMDctYmxcbiAgICAvLyAxTSArIDVTICsgMTVBXG5cbiAgICAvLyBYWCA9IFgxXjJcbiAgICB2YXIgeHggPSB0aGlzLngucmVkU3FyKCk7XG4gICAgLy8gWVkgPSBZMV4yXG4gICAgdmFyIHl5ID0gdGhpcy55LnJlZFNxcigpO1xuICAgIC8vIFlZWVkgPSBZWV4yXG4gICAgdmFyIHl5eXkgPSB5eS5yZWRTcXIoKTtcbiAgICAvLyBTID0gMiAqICgoWDEgKyBZWSleMiAtIFhYIC0gWVlZWSlcbiAgICB2YXIgcyA9IHRoaXMueC5yZWRBZGQoeXkpLnJlZFNxcigpLnJlZElTdWIoeHgpLnJlZElTdWIoeXl5eSk7XG4gICAgcyA9IHMucmVkSUFkZChzKTtcbiAgICAvLyBNID0gMyAqIFhYICsgYVxuICAgIHZhciBtID0geHgucmVkQWRkKHh4KS5yZWRJQWRkKHh4KS5yZWRJQWRkKHRoaXMuY3VydmUuYSk7XG4gICAgLy8gVCA9IE1eMiAtIDIgKiBTXG4gICAgdmFyIHQgPSBtLnJlZFNxcigpLnJlZElTdWIocykucmVkSVN1YihzKTtcbiAgICAvLyBYMyA9IFRcbiAgICBueCA9IHQ7XG4gICAgLy8gWTMgPSBNICogKFMgLSBUKSAtIDggKiBZWVlZXG4gICAgdmFyIHl5eXk4ID0geXl5eS5yZWRJQWRkKHl5eXkpO1xuICAgIHl5eXk4ID0geXl5eTgucmVkSUFkZCh5eXl5OCk7XG4gICAgeXl5eTggPSB5eXl5OC5yZWRJQWRkKHl5eXk4KTtcbiAgICBueSA9IG0ucmVkTXVsKHMucmVkSVN1Yih0KSkucmVkSVN1Yih5eXl5OCk7XG4gICAgLy8gWjMgPSAyICogWTFcbiAgICBueiA9IHRoaXMueS5yZWRBZGQodGhpcy55KTtcbiAgfSBlbHNlIHtcbiAgICAvLyBoeXBlcmVsbGlwdGljLm9yZy9FRkQvZzFwL2F1dG8tc2hvcnR3LWphY29iaWFuLTMuaHRtbCNkb3VibGluZy1kYmwtMjAwMS1iXG4gICAgLy8gM00gKyA1U1xuXG4gICAgLy8gZGVsdGEgPSBaMV4yXG4gICAgdmFyIGRlbHRhID0gdGhpcy56LnJlZFNxcigpO1xuICAgIC8vIGdhbW1hID0gWTFeMlxuICAgIHZhciBnYW1tYSA9IHRoaXMueS5yZWRTcXIoKTtcbiAgICAvLyBiZXRhID0gWDEgKiBnYW1tYVxuICAgIHZhciBiZXRhID0gdGhpcy54LnJlZE11bChnYW1tYSk7XG4gICAgLy8gYWxwaGEgPSAzICogKFgxIC0gZGVsdGEpICogKFgxICsgZGVsdGEpXG4gICAgdmFyIGFscGhhID0gdGhpcy54LnJlZFN1YihkZWx0YSkucmVkTXVsKHRoaXMueC5yZWRBZGQoZGVsdGEpKTtcbiAgICBhbHBoYSA9IGFscGhhLnJlZEFkZChhbHBoYSkucmVkSUFkZChhbHBoYSk7XG4gICAgLy8gWDMgPSBhbHBoYV4yIC0gOCAqIGJldGFcbiAgICB2YXIgYmV0YTQgPSBiZXRhLnJlZElBZGQoYmV0YSk7XG4gICAgYmV0YTQgPSBiZXRhNC5yZWRJQWRkKGJldGE0KTtcbiAgICB2YXIgYmV0YTggPSBiZXRhNC5yZWRBZGQoYmV0YTQpO1xuICAgIG54ID0gYWxwaGEucmVkU3FyKCkucmVkSVN1YihiZXRhOCk7XG4gICAgLy8gWjMgPSAoWTEgKyBaMSleMiAtIGdhbW1hIC0gZGVsdGFcbiAgICBueiA9IHRoaXMueS5yZWRBZGQodGhpcy56KS5yZWRTcXIoKS5yZWRJU3ViKGdhbW1hKS5yZWRJU3ViKGRlbHRhKTtcbiAgICAvLyBZMyA9IGFscGhhICogKDQgKiBiZXRhIC0gWDMpIC0gOCAqIGdhbW1hXjJcbiAgICB2YXIgZ2dhbW1hOCA9IGdhbW1hLnJlZFNxcigpO1xuICAgIGdnYW1tYTggPSBnZ2FtbWE4LnJlZElBZGQoZ2dhbW1hOCk7XG4gICAgZ2dhbW1hOCA9IGdnYW1tYTgucmVkSUFkZChnZ2FtbWE4KTtcbiAgICBnZ2FtbWE4ID0gZ2dhbW1hOC5yZWRJQWRkKGdnYW1tYTgpO1xuICAgIG55ID0gYWxwaGEucmVkTXVsKGJldGE0LnJlZElTdWIobngpKS5yZWRJU3ViKGdnYW1tYTgpO1xuICB9XG5cbiAgcmV0dXJuIHRoaXMuY3VydmUuanBvaW50KG54LCBueSwgbnopO1xufTtcblxuSlBvaW50LnByb3RvdHlwZS5fZGJsID0gZnVuY3Rpb24gX2RibCgpIHtcbiAgdmFyIGEgPSB0aGlzLmN1cnZlLmE7XG5cbiAgLy8gNE0gKyA2UyArIDEwQVxuICB2YXIganggPSB0aGlzLng7XG4gIHZhciBqeSA9IHRoaXMueTtcbiAgdmFyIGp6ID0gdGhpcy56O1xuICB2YXIgano0ID0ganoucmVkU3FyKCkucmVkU3FyKCk7XG5cbiAgdmFyIGp4MiA9IGp4LnJlZFNxcigpO1xuICB2YXIgankyID0gankucmVkU3FyKCk7XG5cbiAgdmFyIGMgPSBqeDIucmVkQWRkKGp4MikucmVkSUFkZChqeDIpLnJlZElBZGQoYS5yZWRNdWwoano0KSk7XG5cbiAgdmFyIGp4ZDQgPSBqeC5yZWRBZGQoangpO1xuICBqeGQ0ID0ganhkNC5yZWRJQWRkKGp4ZDQpO1xuICB2YXIgdDEgPSBqeGQ0LnJlZE11bChqeTIpO1xuICB2YXIgbnggPSBjLnJlZFNxcigpLnJlZElTdWIodDEucmVkQWRkKHQxKSk7XG4gIHZhciB0MiA9IHQxLnJlZElTdWIobngpO1xuXG4gIHZhciBqeWQ4ID0gankyLnJlZFNxcigpO1xuICBqeWQ4ID0ganlkOC5yZWRJQWRkKGp5ZDgpO1xuICBqeWQ4ID0ganlkOC5yZWRJQWRkKGp5ZDgpO1xuICBqeWQ4ID0ganlkOC5yZWRJQWRkKGp5ZDgpO1xuICB2YXIgbnkgPSBjLnJlZE11bCh0MikucmVkSVN1YihqeWQ4KTtcbiAgdmFyIG56ID0gankucmVkQWRkKGp5KS5yZWRNdWwoanopO1xuXG4gIHJldHVybiB0aGlzLmN1cnZlLmpwb2ludChueCwgbnksIG56KTtcbn07XG5cbkpQb2ludC5wcm90b3R5cGUudHJwbCA9IGZ1bmN0aW9uIHRycGwoKSB7XG4gIGlmICghdGhpcy5jdXJ2ZS56ZXJvQSlcbiAgICByZXR1cm4gdGhpcy5kYmwoKS5hZGQodGhpcyk7XG5cbiAgLy8gaHlwZXJlbGxpcHRpYy5vcmcvRUZEL2cxcC9hdXRvLXNob3J0dy1qYWNvYmlhbi0wLmh0bWwjdHJpcGxpbmctdHBsLTIwMDctYmxcbiAgLy8gNU0gKyAxMFMgKyAuLi5cblxuICAvLyBYWCA9IFgxXjJcbiAgdmFyIHh4ID0gdGhpcy54LnJlZFNxcigpO1xuICAvLyBZWSA9IFkxXjJcbiAgdmFyIHl5ID0gdGhpcy55LnJlZFNxcigpO1xuICAvLyBaWiA9IFoxXjJcbiAgdmFyIHp6ID0gdGhpcy56LnJlZFNxcigpO1xuICAvLyBZWVlZID0gWVleMlxuICB2YXIgeXl5eSA9IHl5LnJlZFNxcigpO1xuICAvLyBNID0gMyAqIFhYICsgYSAqIFpaMjsgYSA9IDBcbiAgdmFyIG0gPSB4eC5yZWRBZGQoeHgpLnJlZElBZGQoeHgpO1xuICAvLyBNTSA9IE1eMlxuICB2YXIgbW0gPSBtLnJlZFNxcigpO1xuICAvLyBFID0gNiAqICgoWDEgKyBZWSleMiAtIFhYIC0gWVlZWSkgLSBNTVxuICB2YXIgZSA9IHRoaXMueC5yZWRBZGQoeXkpLnJlZFNxcigpLnJlZElTdWIoeHgpLnJlZElTdWIoeXl5eSk7XG4gIGUgPSBlLnJlZElBZGQoZSk7XG4gIGUgPSBlLnJlZEFkZChlKS5yZWRJQWRkKGUpO1xuICBlID0gZS5yZWRJU3ViKG1tKTtcbiAgLy8gRUUgPSBFXjJcbiAgdmFyIGVlID0gZS5yZWRTcXIoKTtcbiAgLy8gVCA9IDE2KllZWVlcbiAgdmFyIHQgPSB5eXl5LnJlZElBZGQoeXl5eSk7XG4gIHQgPSB0LnJlZElBZGQodCk7XG4gIHQgPSB0LnJlZElBZGQodCk7XG4gIHQgPSB0LnJlZElBZGQodCk7XG4gIC8vIFUgPSAoTSArIEUpXjIgLSBNTSAtIEVFIC0gVFxuICB2YXIgdSA9IG0ucmVkSUFkZChlKS5yZWRTcXIoKS5yZWRJU3ViKG1tKS5yZWRJU3ViKGVlKS5yZWRJU3ViKHQpO1xuICAvLyBYMyA9IDQgKiAoWDEgKiBFRSAtIDQgKiBZWSAqIFUpXG4gIHZhciB5eXU0ID0geXkucmVkTXVsKHUpO1xuICB5eXU0ID0geXl1NC5yZWRJQWRkKHl5dTQpO1xuICB5eXU0ID0geXl1NC5yZWRJQWRkKHl5dTQpO1xuICB2YXIgbnggPSB0aGlzLngucmVkTXVsKGVlKS5yZWRJU3ViKHl5dTQpO1xuICBueCA9IG54LnJlZElBZGQobngpO1xuICBueCA9IG54LnJlZElBZGQobngpO1xuICAvLyBZMyA9IDggKiBZMSAqIChVICogKFQgLSBVKSAtIEUgKiBFRSlcbiAgdmFyIG55ID0gdGhpcy55LnJlZE11bCh1LnJlZE11bCh0LnJlZElTdWIodSkpLnJlZElTdWIoZS5yZWRNdWwoZWUpKSk7XG4gIG55ID0gbnkucmVkSUFkZChueSk7XG4gIG55ID0gbnkucmVkSUFkZChueSk7XG4gIG55ID0gbnkucmVkSUFkZChueSk7XG4gIC8vIFozID0gKFoxICsgRSleMiAtIFpaIC0gRUVcbiAgdmFyIG56ID0gdGhpcy56LnJlZEFkZChlKS5yZWRTcXIoKS5yZWRJU3ViKHp6KS5yZWRJU3ViKGVlKTtcblxuICByZXR1cm4gdGhpcy5jdXJ2ZS5qcG9pbnQobngsIG55LCBueik7XG59O1xuXG5KUG9pbnQucHJvdG90eXBlLm11bCA9IGZ1bmN0aW9uIG11bChrLCBrYmFzZSkge1xuICBrID0gbmV3IEJOKGssIGtiYXNlKTtcblxuICByZXR1cm4gdGhpcy5jdXJ2ZS5fd25hZk11bCh0aGlzLCBrKTtcbn07XG5cbkpQb2ludC5wcm90b3R5cGUuZXEgPSBmdW5jdGlvbiBlcShwKSB7XG4gIGlmIChwLnR5cGUgPT09ICdhZmZpbmUnKVxuICAgIHJldHVybiB0aGlzLmVxKHAudG9KKCkpO1xuXG4gIGlmICh0aGlzID09PSBwKVxuICAgIHJldHVybiB0cnVlO1xuXG4gIC8vIHgxICogejJeMiA9PSB4MiAqIHoxXjJcbiAgdmFyIHoyID0gdGhpcy56LnJlZFNxcigpO1xuICB2YXIgcHoyID0gcC56LnJlZFNxcigpO1xuICBpZiAodGhpcy54LnJlZE11bChwejIpLnJlZElTdWIocC54LnJlZE11bCh6MikpLmNtcG4oMCkgIT09IDApXG4gICAgcmV0dXJuIGZhbHNlO1xuXG4gIC8vIHkxICogejJeMyA9PSB5MiAqIHoxXjNcbiAgdmFyIHozID0gejIucmVkTXVsKHRoaXMueik7XG4gIHZhciBwejMgPSBwejIucmVkTXVsKHAueik7XG4gIHJldHVybiB0aGlzLnkucmVkTXVsKHB6MykucmVkSVN1YihwLnkucmVkTXVsKHozKSkuY21wbigwKSA9PT0gMDtcbn07XG5cbkpQb2ludC5wcm90b3R5cGUuZXFYVG9QID0gZnVuY3Rpb24gZXFYVG9QKHgpIHtcbiAgdmFyIHpzID0gdGhpcy56LnJlZFNxcigpO1xuICB2YXIgcnggPSB4LnRvUmVkKHRoaXMuY3VydmUucmVkKS5yZWRNdWwoenMpO1xuICBpZiAodGhpcy54LmNtcChyeCkgPT09IDApXG4gICAgcmV0dXJuIHRydWU7XG5cbiAgdmFyIHhjID0geC5jbG9uZSgpO1xuICB2YXIgdCA9IHRoaXMuY3VydmUucmVkTi5yZWRNdWwoenMpO1xuICBmb3IgKDs7KSB7XG4gICAgeGMuaWFkZCh0aGlzLmN1cnZlLm4pO1xuICAgIGlmICh4Yy5jbXAodGhpcy5jdXJ2ZS5wKSA+PSAwKVxuICAgICAgcmV0dXJuIGZhbHNlO1xuXG4gICAgcngucmVkSUFkZCh0KTtcbiAgICBpZiAodGhpcy54LmNtcChyeCkgPT09IDApXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufTtcblxuSlBvaW50LnByb3RvdHlwZS5pbnNwZWN0ID0gZnVuY3Rpb24gaW5zcGVjdCgpIHtcbiAgaWYgKHRoaXMuaXNJbmZpbml0eSgpKVxuICAgIHJldHVybiAnPEVDIEpQb2ludCBJbmZpbml0eT4nO1xuICByZXR1cm4gJzxFQyBKUG9pbnQgeDogJyArIHRoaXMueC50b1N0cmluZygxNiwgMikgK1xuICAgICAgJyB5OiAnICsgdGhpcy55LnRvU3RyaW5nKDE2LCAyKSArXG4gICAgICAnIHo6ICcgKyB0aGlzLnoudG9TdHJpbmcoMTYsIDIpICsgJz4nO1xufTtcblxuSlBvaW50LnByb3RvdHlwZS5pc0luZmluaXR5ID0gZnVuY3Rpb24gaXNJbmZpbml0eSgpIHtcbiAgLy8gWFhYIFRoaXMgY29kZSBhc3N1bWVzIHRoYXQgemVybyBpcyBhbHdheXMgemVybyBpbiByZWRcbiAgcmV0dXJuIHRoaXMuei5jbXBuKDApID09PSAwO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEJOID0gcmVxdWlyZSgnYm4uanMnKTtcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG52YXIgQmFzZSA9IHJlcXVpcmUoJy4vYmFzZScpO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuXG5mdW5jdGlvbiBNb250Q3VydmUoY29uZikge1xuICBCYXNlLmNhbGwodGhpcywgJ21vbnQnLCBjb25mKTtcblxuICB0aGlzLmEgPSBuZXcgQk4oY29uZi5hLCAxNikudG9SZWQodGhpcy5yZWQpO1xuICB0aGlzLmIgPSBuZXcgQk4oY29uZi5iLCAxNikudG9SZWQodGhpcy5yZWQpO1xuICB0aGlzLmk0ID0gbmV3IEJOKDQpLnRvUmVkKHRoaXMucmVkKS5yZWRJbnZtKCk7XG4gIHRoaXMudHdvID0gbmV3IEJOKDIpLnRvUmVkKHRoaXMucmVkKTtcbiAgdGhpcy5hMjQgPSB0aGlzLmk0LnJlZE11bCh0aGlzLmEucmVkQWRkKHRoaXMudHdvKSk7XG59XG5pbmhlcml0cyhNb250Q3VydmUsIEJhc2UpO1xubW9kdWxlLmV4cG9ydHMgPSBNb250Q3VydmU7XG5cbk1vbnRDdXJ2ZS5wcm90b3R5cGUudmFsaWRhdGUgPSBmdW5jdGlvbiB2YWxpZGF0ZShwb2ludCkge1xuICB2YXIgeCA9IHBvaW50Lm5vcm1hbGl6ZSgpLng7XG4gIHZhciB4MiA9IHgucmVkU3FyKCk7XG4gIHZhciByaHMgPSB4Mi5yZWRNdWwoeCkucmVkQWRkKHgyLnJlZE11bCh0aGlzLmEpKS5yZWRBZGQoeCk7XG4gIHZhciB5ID0gcmhzLnJlZFNxcnQoKTtcblxuICByZXR1cm4geS5yZWRTcXIoKS5jbXAocmhzKSA9PT0gMDtcbn07XG5cbmZ1bmN0aW9uIFBvaW50KGN1cnZlLCB4LCB6KSB7XG4gIEJhc2UuQmFzZVBvaW50LmNhbGwodGhpcywgY3VydmUsICdwcm9qZWN0aXZlJyk7XG4gIGlmICh4ID09PSBudWxsICYmIHogPT09IG51bGwpIHtcbiAgICB0aGlzLnggPSB0aGlzLmN1cnZlLm9uZTtcbiAgICB0aGlzLnogPSB0aGlzLmN1cnZlLnplcm87XG4gIH0gZWxzZSB7XG4gICAgdGhpcy54ID0gbmV3IEJOKHgsIDE2KTtcbiAgICB0aGlzLnogPSBuZXcgQk4oeiwgMTYpO1xuICAgIGlmICghdGhpcy54LnJlZClcbiAgICAgIHRoaXMueCA9IHRoaXMueC50b1JlZCh0aGlzLmN1cnZlLnJlZCk7XG4gICAgaWYgKCF0aGlzLnoucmVkKVxuICAgICAgdGhpcy56ID0gdGhpcy56LnRvUmVkKHRoaXMuY3VydmUucmVkKTtcbiAgfVxufVxuaW5oZXJpdHMoUG9pbnQsIEJhc2UuQmFzZVBvaW50KTtcblxuTW9udEN1cnZlLnByb3RvdHlwZS5kZWNvZGVQb2ludCA9IGZ1bmN0aW9uIGRlY29kZVBvaW50KGJ5dGVzLCBlbmMpIHtcbiAgcmV0dXJuIHRoaXMucG9pbnQodXRpbHMudG9BcnJheShieXRlcywgZW5jKSwgMSk7XG59O1xuXG5Nb250Q3VydmUucHJvdG90eXBlLnBvaW50ID0gZnVuY3Rpb24gcG9pbnQoeCwgeikge1xuICByZXR1cm4gbmV3IFBvaW50KHRoaXMsIHgsIHopO1xufTtcblxuTW9udEN1cnZlLnByb3RvdHlwZS5wb2ludEZyb21KU09OID0gZnVuY3Rpb24gcG9pbnRGcm9tSlNPTihvYmopIHtcbiAgcmV0dXJuIFBvaW50LmZyb21KU09OKHRoaXMsIG9iaik7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUucHJlY29tcHV0ZSA9IGZ1bmN0aW9uIHByZWNvbXB1dGUoKSB7XG4gIC8vIE5vLW9wXG59O1xuXG5Qb2ludC5wcm90b3R5cGUuX2VuY29kZSA9IGZ1bmN0aW9uIF9lbmNvZGUoKSB7XG4gIHJldHVybiB0aGlzLmdldFgoKS50b0FycmF5KCdiZScsIHRoaXMuY3VydmUucC5ieXRlTGVuZ3RoKCkpO1xufTtcblxuUG9pbnQuZnJvbUpTT04gPSBmdW5jdGlvbiBmcm9tSlNPTihjdXJ2ZSwgb2JqKSB7XG4gIHJldHVybiBuZXcgUG9pbnQoY3VydmUsIG9ialswXSwgb2JqWzFdIHx8IGN1cnZlLm9uZSk7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuaW5zcGVjdCA9IGZ1bmN0aW9uIGluc3BlY3QoKSB7XG4gIGlmICh0aGlzLmlzSW5maW5pdHkoKSlcbiAgICByZXR1cm4gJzxFQyBQb2ludCBJbmZpbml0eT4nO1xuICByZXR1cm4gJzxFQyBQb2ludCB4OiAnICsgdGhpcy54LmZyb21SZWQoKS50b1N0cmluZygxNiwgMikgK1xuICAgICAgJyB6OiAnICsgdGhpcy56LmZyb21SZWQoKS50b1N0cmluZygxNiwgMikgKyAnPic7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuaXNJbmZpbml0eSA9IGZ1bmN0aW9uIGlzSW5maW5pdHkoKSB7XG4gIC8vIFhYWCBUaGlzIGNvZGUgYXNzdW1lcyB0aGF0IHplcm8gaXMgYWx3YXlzIHplcm8gaW4gcmVkXG4gIHJldHVybiB0aGlzLnouY21wbigwKSA9PT0gMDtcbn07XG5cblBvaW50LnByb3RvdHlwZS5kYmwgPSBmdW5jdGlvbiBkYmwoKSB7XG4gIC8vIGh0dHA6Ly9oeXBlcmVsbGlwdGljLm9yZy9FRkQvZzFwL2F1dG8tbW9udGdvbS14ei5odG1sI2RvdWJsaW5nLWRibC0xOTg3LW0tM1xuICAvLyAyTSArIDJTICsgNEFcblxuICAvLyBBID0gWDEgKyBaMVxuICB2YXIgYSA9IHRoaXMueC5yZWRBZGQodGhpcy56KTtcbiAgLy8gQUEgPSBBXjJcbiAgdmFyIGFhID0gYS5yZWRTcXIoKTtcbiAgLy8gQiA9IFgxIC0gWjFcbiAgdmFyIGIgPSB0aGlzLngucmVkU3ViKHRoaXMueik7XG4gIC8vIEJCID0gQl4yXG4gIHZhciBiYiA9IGIucmVkU3FyKCk7XG4gIC8vIEMgPSBBQSAtIEJCXG4gIHZhciBjID0gYWEucmVkU3ViKGJiKTtcbiAgLy8gWDMgPSBBQSAqIEJCXG4gIHZhciBueCA9IGFhLnJlZE11bChiYik7XG4gIC8vIFozID0gQyAqIChCQiArIEEyNCAqIEMpXG4gIHZhciBueiA9IGMucmVkTXVsKGJiLnJlZEFkZCh0aGlzLmN1cnZlLmEyNC5yZWRNdWwoYykpKTtcbiAgcmV0dXJuIHRoaXMuY3VydmUucG9pbnQobngsIG56KTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiBhZGQoKSB7XG4gIHRocm93IG5ldyBFcnJvcignTm90IHN1cHBvcnRlZCBvbiBNb250Z29tZXJ5IGN1cnZlJyk7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuZGlmZkFkZCA9IGZ1bmN0aW9uIGRpZmZBZGQocCwgZGlmZikge1xuICAvLyBodHRwOi8vaHlwZXJlbGxpcHRpYy5vcmcvRUZEL2cxcC9hdXRvLW1vbnRnb20teHouaHRtbCNkaWZmYWRkLWRhZGQtMTk4Ny1tLTNcbiAgLy8gNE0gKyAyUyArIDZBXG5cbiAgLy8gQSA9IFgyICsgWjJcbiAgdmFyIGEgPSB0aGlzLngucmVkQWRkKHRoaXMueik7XG4gIC8vIEIgPSBYMiAtIFoyXG4gIHZhciBiID0gdGhpcy54LnJlZFN1Yih0aGlzLnopO1xuICAvLyBDID0gWDMgKyBaM1xuICB2YXIgYyA9IHAueC5yZWRBZGQocC56KTtcbiAgLy8gRCA9IFgzIC0gWjNcbiAgdmFyIGQgPSBwLngucmVkU3ViKHAueik7XG4gIC8vIERBID0gRCAqIEFcbiAgdmFyIGRhID0gZC5yZWRNdWwoYSk7XG4gIC8vIENCID0gQyAqIEJcbiAgdmFyIGNiID0gYy5yZWRNdWwoYik7XG4gIC8vIFg1ID0gWjEgKiAoREEgKyBDQileMlxuICB2YXIgbnggPSBkaWZmLnoucmVkTXVsKGRhLnJlZEFkZChjYikucmVkU3FyKCkpO1xuICAvLyBaNSA9IFgxICogKERBIC0gQ0IpXjJcbiAgdmFyIG56ID0gZGlmZi54LnJlZE11bChkYS5yZWRJU3ViKGNiKS5yZWRTcXIoKSk7XG4gIHJldHVybiB0aGlzLmN1cnZlLnBvaW50KG54LCBueik7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUubXVsID0gZnVuY3Rpb24gbXVsKGspIHtcbiAgdmFyIHQgPSBrLmNsb25lKCk7XG4gIHZhciBhID0gdGhpczsgLy8gKE4gLyAyKSAqIFEgKyBRXG4gIHZhciBiID0gdGhpcy5jdXJ2ZS5wb2ludChudWxsLCBudWxsKTsgLy8gKE4gLyAyKSAqIFFcbiAgdmFyIGMgPSB0aGlzOyAvLyBRXG5cbiAgZm9yICh2YXIgYml0cyA9IFtdOyB0LmNtcG4oMCkgIT09IDA7IHQuaXVzaHJuKDEpKVxuICAgIGJpdHMucHVzaCh0LmFuZGxuKDEpKTtcblxuICBmb3IgKHZhciBpID0gYml0cy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgIGlmIChiaXRzW2ldID09PSAwKSB7XG4gICAgICAvLyBOICogUSArIFEgPSAoKE4gLyAyKSAqIFEgKyBRKSkgKyAoTiAvIDIpICogUVxuICAgICAgYSA9IGEuZGlmZkFkZChiLCBjKTtcbiAgICAgIC8vIE4gKiBRID0gMiAqICgoTiAvIDIpICogUSArIFEpKVxuICAgICAgYiA9IGIuZGJsKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIE4gKiBRID0gKChOIC8gMikgKiBRICsgUSkgKyAoKE4gLyAyKSAqIFEpXG4gICAgICBiID0gYS5kaWZmQWRkKGIsIGMpO1xuICAgICAgLy8gTiAqIFEgKyBRID0gMiAqICgoTiAvIDIpICogUSArIFEpXG4gICAgICBhID0gYS5kYmwoKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGI7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUubXVsQWRkID0gZnVuY3Rpb24gbXVsQWRkKCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ05vdCBzdXBwb3J0ZWQgb24gTW9udGdvbWVyeSBjdXJ2ZScpO1xufTtcblxuUG9pbnQucHJvdG90eXBlLmp1bWxBZGQgPSBmdW5jdGlvbiBqdW1sQWRkKCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ05vdCBzdXBwb3J0ZWQgb24gTW9udGdvbWVyeSBjdXJ2ZScpO1xufTtcblxuUG9pbnQucHJvdG90eXBlLmVxID0gZnVuY3Rpb24gZXEob3RoZXIpIHtcbiAgcmV0dXJuIHRoaXMuZ2V0WCgpLmNtcChvdGhlci5nZXRYKCkpID09PSAwO1xufTtcblxuUG9pbnQucHJvdG90eXBlLm5vcm1hbGl6ZSA9IGZ1bmN0aW9uIG5vcm1hbGl6ZSgpIHtcbiAgdGhpcy54ID0gdGhpcy54LnJlZE11bCh0aGlzLnoucmVkSW52bSgpKTtcbiAgdGhpcy56ID0gdGhpcy5jdXJ2ZS5vbmU7XG4gIHJldHVybiB0aGlzO1xufTtcblxuUG9pbnQucHJvdG90eXBlLmdldFggPSBmdW5jdGlvbiBnZXRYKCkge1xuICAvLyBOb3JtYWxpemUgY29vcmRpbmF0ZXNcbiAgdGhpcy5ub3JtYWxpemUoKTtcblxuICByZXR1cm4gdGhpcy54LmZyb21SZWQoKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG52YXIgQk4gPSByZXF1aXJlKCdibi5qcycpO1xudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcbnZhciBCYXNlID0gcmVxdWlyZSgnLi9iYXNlJyk7XG5cbnZhciBhc3NlcnQgPSB1dGlscy5hc3NlcnQ7XG5cbmZ1bmN0aW9uIEVkd2FyZHNDdXJ2ZShjb25mKSB7XG4gIC8vIE5PVEU6IEltcG9ydGFudCBhcyB3ZSBhcmUgY3JlYXRpbmcgcG9pbnQgaW4gQmFzZS5jYWxsKClcbiAgdGhpcy50d2lzdGVkID0gKGNvbmYuYSB8IDApICE9PSAxO1xuICB0aGlzLm1PbmVBID0gdGhpcy50d2lzdGVkICYmIChjb25mLmEgfCAwKSA9PT0gLTE7XG4gIHRoaXMuZXh0ZW5kZWQgPSB0aGlzLm1PbmVBO1xuXG4gIEJhc2UuY2FsbCh0aGlzLCAnZWR3YXJkcycsIGNvbmYpO1xuXG4gIHRoaXMuYSA9IG5ldyBCTihjb25mLmEsIDE2KS51bW9kKHRoaXMucmVkLm0pO1xuICB0aGlzLmEgPSB0aGlzLmEudG9SZWQodGhpcy5yZWQpO1xuICB0aGlzLmMgPSBuZXcgQk4oY29uZi5jLCAxNikudG9SZWQodGhpcy5yZWQpO1xuICB0aGlzLmMyID0gdGhpcy5jLnJlZFNxcigpO1xuICB0aGlzLmQgPSBuZXcgQk4oY29uZi5kLCAxNikudG9SZWQodGhpcy5yZWQpO1xuICB0aGlzLmRkID0gdGhpcy5kLnJlZEFkZCh0aGlzLmQpO1xuXG4gIGFzc2VydCghdGhpcy50d2lzdGVkIHx8IHRoaXMuYy5mcm9tUmVkKCkuY21wbigxKSA9PT0gMCk7XG4gIHRoaXMub25lQyA9IChjb25mLmMgfCAwKSA9PT0gMTtcbn1cbmluaGVyaXRzKEVkd2FyZHNDdXJ2ZSwgQmFzZSk7XG5tb2R1bGUuZXhwb3J0cyA9IEVkd2FyZHNDdXJ2ZTtcblxuRWR3YXJkc0N1cnZlLnByb3RvdHlwZS5fbXVsQSA9IGZ1bmN0aW9uIF9tdWxBKG51bSkge1xuICBpZiAodGhpcy5tT25lQSlcbiAgICByZXR1cm4gbnVtLnJlZE5lZygpO1xuICBlbHNlXG4gICAgcmV0dXJuIHRoaXMuYS5yZWRNdWwobnVtKTtcbn07XG5cbkVkd2FyZHNDdXJ2ZS5wcm90b3R5cGUuX211bEMgPSBmdW5jdGlvbiBfbXVsQyhudW0pIHtcbiAgaWYgKHRoaXMub25lQylcbiAgICByZXR1cm4gbnVtO1xuICBlbHNlXG4gICAgcmV0dXJuIHRoaXMuYy5yZWRNdWwobnVtKTtcbn07XG5cbi8vIEp1c3QgZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBTaG9ydCBjdXJ2ZVxuRWR3YXJkc0N1cnZlLnByb3RvdHlwZS5qcG9pbnQgPSBmdW5jdGlvbiBqcG9pbnQoeCwgeSwgeiwgdCkge1xuICByZXR1cm4gdGhpcy5wb2ludCh4LCB5LCB6LCB0KTtcbn07XG5cbkVkd2FyZHNDdXJ2ZS5wcm90b3R5cGUucG9pbnRGcm9tWCA9IGZ1bmN0aW9uIHBvaW50RnJvbVgoeCwgb2RkKSB7XG4gIHggPSBuZXcgQk4oeCwgMTYpO1xuICBpZiAoIXgucmVkKVxuICAgIHggPSB4LnRvUmVkKHRoaXMucmVkKTtcblxuICB2YXIgeDIgPSB4LnJlZFNxcigpO1xuICB2YXIgcmhzID0gdGhpcy5jMi5yZWRTdWIodGhpcy5hLnJlZE11bCh4MikpO1xuICB2YXIgbGhzID0gdGhpcy5vbmUucmVkU3ViKHRoaXMuYzIucmVkTXVsKHRoaXMuZCkucmVkTXVsKHgyKSk7XG5cbiAgdmFyIHkyID0gcmhzLnJlZE11bChsaHMucmVkSW52bSgpKTtcbiAgdmFyIHkgPSB5Mi5yZWRTcXJ0KCk7XG4gIGlmICh5LnJlZFNxcigpLnJlZFN1Yih5MikuY21wKHRoaXMuemVybykgIT09IDApXG4gICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIHBvaW50Jyk7XG5cbiAgdmFyIGlzT2RkID0geS5mcm9tUmVkKCkuaXNPZGQoKTtcbiAgaWYgKG9kZCAmJiAhaXNPZGQgfHwgIW9kZCAmJiBpc09kZClcbiAgICB5ID0geS5yZWROZWcoKTtcblxuICByZXR1cm4gdGhpcy5wb2ludCh4LCB5KTtcbn07XG5cbkVkd2FyZHNDdXJ2ZS5wcm90b3R5cGUucG9pbnRGcm9tWSA9IGZ1bmN0aW9uIHBvaW50RnJvbVkoeSwgb2RkKSB7XG4gIHkgPSBuZXcgQk4oeSwgMTYpO1xuICBpZiAoIXkucmVkKVxuICAgIHkgPSB5LnRvUmVkKHRoaXMucmVkKTtcblxuICAvLyB4XjIgPSAoeV4yIC0gY14yKSAvIChjXjIgZCB5XjIgLSBhKVxuICB2YXIgeTIgPSB5LnJlZFNxcigpO1xuICB2YXIgbGhzID0geTIucmVkU3ViKHRoaXMuYzIpO1xuICB2YXIgcmhzID0geTIucmVkTXVsKHRoaXMuZCkucmVkTXVsKHRoaXMuYzIpLnJlZFN1Yih0aGlzLmEpO1xuICB2YXIgeDIgPSBsaHMucmVkTXVsKHJocy5yZWRJbnZtKCkpO1xuXG4gIGlmICh4Mi5jbXAodGhpcy56ZXJvKSA9PT0gMCkge1xuICAgIGlmIChvZGQpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgcG9pbnQnKTtcbiAgICBlbHNlXG4gICAgICByZXR1cm4gdGhpcy5wb2ludCh0aGlzLnplcm8sIHkpO1xuICB9XG5cbiAgdmFyIHggPSB4Mi5yZWRTcXJ0KCk7XG4gIGlmICh4LnJlZFNxcigpLnJlZFN1Yih4MikuY21wKHRoaXMuemVybykgIT09IDApXG4gICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIHBvaW50Jyk7XG5cbiAgaWYgKHguZnJvbVJlZCgpLmlzT2RkKCkgIT09IG9kZClcbiAgICB4ID0geC5yZWROZWcoKTtcblxuICByZXR1cm4gdGhpcy5wb2ludCh4LCB5KTtcbn07XG5cbkVkd2FyZHNDdXJ2ZS5wcm90b3R5cGUudmFsaWRhdGUgPSBmdW5jdGlvbiB2YWxpZGF0ZShwb2ludCkge1xuICBpZiAocG9pbnQuaXNJbmZpbml0eSgpKVxuICAgIHJldHVybiB0cnVlO1xuXG4gIC8vIEN1cnZlOiBBICogWF4yICsgWV4yID0gQ14yICogKDEgKyBEICogWF4yICogWV4yKVxuICBwb2ludC5ub3JtYWxpemUoKTtcblxuICB2YXIgeDIgPSBwb2ludC54LnJlZFNxcigpO1xuICB2YXIgeTIgPSBwb2ludC55LnJlZFNxcigpO1xuICB2YXIgbGhzID0geDIucmVkTXVsKHRoaXMuYSkucmVkQWRkKHkyKTtcbiAgdmFyIHJocyA9IHRoaXMuYzIucmVkTXVsKHRoaXMub25lLnJlZEFkZCh0aGlzLmQucmVkTXVsKHgyKS5yZWRNdWwoeTIpKSk7XG5cbiAgcmV0dXJuIGxocy5jbXAocmhzKSA9PT0gMDtcbn07XG5cbmZ1bmN0aW9uIFBvaW50KGN1cnZlLCB4LCB5LCB6LCB0KSB7XG4gIEJhc2UuQmFzZVBvaW50LmNhbGwodGhpcywgY3VydmUsICdwcm9qZWN0aXZlJyk7XG4gIGlmICh4ID09PSBudWxsICYmIHkgPT09IG51bGwgJiYgeiA9PT0gbnVsbCkge1xuICAgIHRoaXMueCA9IHRoaXMuY3VydmUuemVybztcbiAgICB0aGlzLnkgPSB0aGlzLmN1cnZlLm9uZTtcbiAgICB0aGlzLnogPSB0aGlzLmN1cnZlLm9uZTtcbiAgICB0aGlzLnQgPSB0aGlzLmN1cnZlLnplcm87XG4gICAgdGhpcy56T25lID0gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLnggPSBuZXcgQk4oeCwgMTYpO1xuICAgIHRoaXMueSA9IG5ldyBCTih5LCAxNik7XG4gICAgdGhpcy56ID0geiA/IG5ldyBCTih6LCAxNikgOiB0aGlzLmN1cnZlLm9uZTtcbiAgICB0aGlzLnQgPSB0ICYmIG5ldyBCTih0LCAxNik7XG4gICAgaWYgKCF0aGlzLngucmVkKVxuICAgICAgdGhpcy54ID0gdGhpcy54LnRvUmVkKHRoaXMuY3VydmUucmVkKTtcbiAgICBpZiAoIXRoaXMueS5yZWQpXG4gICAgICB0aGlzLnkgPSB0aGlzLnkudG9SZWQodGhpcy5jdXJ2ZS5yZWQpO1xuICAgIGlmICghdGhpcy56LnJlZClcbiAgICAgIHRoaXMueiA9IHRoaXMuei50b1JlZCh0aGlzLmN1cnZlLnJlZCk7XG4gICAgaWYgKHRoaXMudCAmJiAhdGhpcy50LnJlZClcbiAgICAgIHRoaXMudCA9IHRoaXMudC50b1JlZCh0aGlzLmN1cnZlLnJlZCk7XG4gICAgdGhpcy56T25lID0gdGhpcy56ID09PSB0aGlzLmN1cnZlLm9uZTtcblxuICAgIC8vIFVzZSBleHRlbmRlZCBjb29yZGluYXRlc1xuICAgIGlmICh0aGlzLmN1cnZlLmV4dGVuZGVkICYmICF0aGlzLnQpIHtcbiAgICAgIHRoaXMudCA9IHRoaXMueC5yZWRNdWwodGhpcy55KTtcbiAgICAgIGlmICghdGhpcy56T25lKVxuICAgICAgICB0aGlzLnQgPSB0aGlzLnQucmVkTXVsKHRoaXMuei5yZWRJbnZtKCkpO1xuICAgIH1cbiAgfVxufVxuaW5oZXJpdHMoUG9pbnQsIEJhc2UuQmFzZVBvaW50KTtcblxuRWR3YXJkc0N1cnZlLnByb3RvdHlwZS5wb2ludEZyb21KU09OID0gZnVuY3Rpb24gcG9pbnRGcm9tSlNPTihvYmopIHtcbiAgcmV0dXJuIFBvaW50LmZyb21KU09OKHRoaXMsIG9iaik7XG59O1xuXG5FZHdhcmRzQ3VydmUucHJvdG90eXBlLnBvaW50ID0gZnVuY3Rpb24gcG9pbnQoeCwgeSwgeiwgdCkge1xuICByZXR1cm4gbmV3IFBvaW50KHRoaXMsIHgsIHksIHosIHQpO1xufTtcblxuUG9pbnQuZnJvbUpTT04gPSBmdW5jdGlvbiBmcm9tSlNPTihjdXJ2ZSwgb2JqKSB7XG4gIHJldHVybiBuZXcgUG9pbnQoY3VydmUsIG9ialswXSwgb2JqWzFdLCBvYmpbMl0pO1xufTtcblxuUG9pbnQucHJvdG90eXBlLmluc3BlY3QgPSBmdW5jdGlvbiBpbnNwZWN0KCkge1xuICBpZiAodGhpcy5pc0luZmluaXR5KCkpXG4gICAgcmV0dXJuICc8RUMgUG9pbnQgSW5maW5pdHk+JztcbiAgcmV0dXJuICc8RUMgUG9pbnQgeDogJyArIHRoaXMueC5mcm9tUmVkKCkudG9TdHJpbmcoMTYsIDIpICtcbiAgICAgICcgeTogJyArIHRoaXMueS5mcm9tUmVkKCkudG9TdHJpbmcoMTYsIDIpICtcbiAgICAgICcgejogJyArIHRoaXMuei5mcm9tUmVkKCkudG9TdHJpbmcoMTYsIDIpICsgJz4nO1xufTtcblxuUG9pbnQucHJvdG90eXBlLmlzSW5maW5pdHkgPSBmdW5jdGlvbiBpc0luZmluaXR5KCkge1xuICAvLyBYWFggVGhpcyBjb2RlIGFzc3VtZXMgdGhhdCB6ZXJvIGlzIGFsd2F5cyB6ZXJvIGluIHJlZFxuICByZXR1cm4gdGhpcy54LmNtcG4oMCkgPT09IDAgJiZcbiAgICAodGhpcy55LmNtcCh0aGlzLnopID09PSAwIHx8XG4gICAgKHRoaXMuek9uZSAmJiB0aGlzLnkuY21wKHRoaXMuY3VydmUuYykgPT09IDApKTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5fZXh0RGJsID0gZnVuY3Rpb24gX2V4dERibCgpIHtcbiAgLy8gaHlwZXJlbGxpcHRpYy5vcmcvRUZEL2cxcC9hdXRvLXR3aXN0ZWQtZXh0ZW5kZWQtMS5odG1sXG4gIC8vICAgICAjZG91YmxpbmctZGJsLTIwMDgtaHdjZFxuICAvLyA0TSArIDRTXG5cbiAgLy8gQSA9IFgxXjJcbiAgdmFyIGEgPSB0aGlzLngucmVkU3FyKCk7XG4gIC8vIEIgPSBZMV4yXG4gIHZhciBiID0gdGhpcy55LnJlZFNxcigpO1xuICAvLyBDID0gMiAqIFoxXjJcbiAgdmFyIGMgPSB0aGlzLnoucmVkU3FyKCk7XG4gIGMgPSBjLnJlZElBZGQoYyk7XG4gIC8vIEQgPSBhICogQVxuICB2YXIgZCA9IHRoaXMuY3VydmUuX211bEEoYSk7XG4gIC8vIEUgPSAoWDEgKyBZMSleMiAtIEEgLSBCXG4gIHZhciBlID0gdGhpcy54LnJlZEFkZCh0aGlzLnkpLnJlZFNxcigpLnJlZElTdWIoYSkucmVkSVN1YihiKTtcbiAgLy8gRyA9IEQgKyBCXG4gIHZhciBnID0gZC5yZWRBZGQoYik7XG4gIC8vIEYgPSBHIC0gQ1xuICB2YXIgZiA9IGcucmVkU3ViKGMpO1xuICAvLyBIID0gRCAtIEJcbiAgdmFyIGggPSBkLnJlZFN1YihiKTtcbiAgLy8gWDMgPSBFICogRlxuICB2YXIgbnggPSBlLnJlZE11bChmKTtcbiAgLy8gWTMgPSBHICogSFxuICB2YXIgbnkgPSBnLnJlZE11bChoKTtcbiAgLy8gVDMgPSBFICogSFxuICB2YXIgbnQgPSBlLnJlZE11bChoKTtcbiAgLy8gWjMgPSBGICogR1xuICB2YXIgbnogPSBmLnJlZE11bChnKTtcbiAgcmV0dXJuIHRoaXMuY3VydmUucG9pbnQobngsIG55LCBueiwgbnQpO1xufTtcblxuUG9pbnQucHJvdG90eXBlLl9wcm9qRGJsID0gZnVuY3Rpb24gX3Byb2pEYmwoKSB7XG4gIC8vIGh5cGVyZWxsaXB0aWMub3JnL0VGRC9nMXAvYXV0by10d2lzdGVkLXByb2plY3RpdmUuaHRtbFxuICAvLyAgICAgI2RvdWJsaW5nLWRibC0yMDA4LWJiamxwXG4gIC8vICAgICAjZG91YmxpbmctZGJsLTIwMDctYmxcbiAgLy8gYW5kIG90aGVyc1xuICAvLyBHZW5lcmFsbHkgM00gKyA0UyBvciAyTSArIDRTXG5cbiAgLy8gQiA9IChYMSArIFkxKV4yXG4gIHZhciBiID0gdGhpcy54LnJlZEFkZCh0aGlzLnkpLnJlZFNxcigpO1xuICAvLyBDID0gWDFeMlxuICB2YXIgYyA9IHRoaXMueC5yZWRTcXIoKTtcbiAgLy8gRCA9IFkxXjJcbiAgdmFyIGQgPSB0aGlzLnkucmVkU3FyKCk7XG5cbiAgdmFyIG54O1xuICB2YXIgbnk7XG4gIHZhciBuejtcbiAgaWYgKHRoaXMuY3VydmUudHdpc3RlZCkge1xuICAgIC8vIEUgPSBhICogQ1xuICAgIHZhciBlID0gdGhpcy5jdXJ2ZS5fbXVsQShjKTtcbiAgICAvLyBGID0gRSArIERcbiAgICB2YXIgZiA9IGUucmVkQWRkKGQpO1xuICAgIGlmICh0aGlzLnpPbmUpIHtcbiAgICAgIC8vIFgzID0gKEIgLSBDIC0gRCkgKiAoRiAtIDIpXG4gICAgICBueCA9IGIucmVkU3ViKGMpLnJlZFN1YihkKS5yZWRNdWwoZi5yZWRTdWIodGhpcy5jdXJ2ZS50d28pKTtcbiAgICAgIC8vIFkzID0gRiAqIChFIC0gRClcbiAgICAgIG55ID0gZi5yZWRNdWwoZS5yZWRTdWIoZCkpO1xuICAgICAgLy8gWjMgPSBGXjIgLSAyICogRlxuICAgICAgbnogPSBmLnJlZFNxcigpLnJlZFN1YihmKS5yZWRTdWIoZik7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEggPSBaMV4yXG4gICAgICB2YXIgaCA9IHRoaXMuei5yZWRTcXIoKTtcbiAgICAgIC8vIEogPSBGIC0gMiAqIEhcbiAgICAgIHZhciBqID0gZi5yZWRTdWIoaCkucmVkSVN1YihoKTtcbiAgICAgIC8vIFgzID0gKEItQy1EKSpKXG4gICAgICBueCA9IGIucmVkU3ViKGMpLnJlZElTdWIoZCkucmVkTXVsKGopO1xuICAgICAgLy8gWTMgPSBGICogKEUgLSBEKVxuICAgICAgbnkgPSBmLnJlZE11bChlLnJlZFN1YihkKSk7XG4gICAgICAvLyBaMyA9IEYgKiBKXG4gICAgICBueiA9IGYucmVkTXVsKGopO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBFID0gQyArIERcbiAgICB2YXIgZSA9IGMucmVkQWRkKGQpO1xuICAgIC8vIEggPSAoYyAqIFoxKV4yXG4gICAgdmFyIGggPSB0aGlzLmN1cnZlLl9tdWxDKHRoaXMueikucmVkU3FyKCk7XG4gICAgLy8gSiA9IEUgLSAyICogSFxuICAgIHZhciBqID0gZS5yZWRTdWIoaCkucmVkU3ViKGgpO1xuICAgIC8vIFgzID0gYyAqIChCIC0gRSkgKiBKXG4gICAgbnggPSB0aGlzLmN1cnZlLl9tdWxDKGIucmVkSVN1YihlKSkucmVkTXVsKGopO1xuICAgIC8vIFkzID0gYyAqIEUgKiAoQyAtIEQpXG4gICAgbnkgPSB0aGlzLmN1cnZlLl9tdWxDKGUpLnJlZE11bChjLnJlZElTdWIoZCkpO1xuICAgIC8vIFozID0gRSAqIEpcbiAgICBueiA9IGUucmVkTXVsKGopO1xuICB9XG4gIHJldHVybiB0aGlzLmN1cnZlLnBvaW50KG54LCBueSwgbnopO1xufTtcblxuUG9pbnQucHJvdG90eXBlLmRibCA9IGZ1bmN0aW9uIGRibCgpIHtcbiAgaWYgKHRoaXMuaXNJbmZpbml0eSgpKVxuICAgIHJldHVybiB0aGlzO1xuXG4gIC8vIERvdWJsZSBpbiBleHRlbmRlZCBjb29yZGluYXRlc1xuICBpZiAodGhpcy5jdXJ2ZS5leHRlbmRlZClcbiAgICByZXR1cm4gdGhpcy5fZXh0RGJsKCk7XG4gIGVsc2VcbiAgICByZXR1cm4gdGhpcy5fcHJvakRibCgpO1xufTtcblxuUG9pbnQucHJvdG90eXBlLl9leHRBZGQgPSBmdW5jdGlvbiBfZXh0QWRkKHApIHtcbiAgLy8gaHlwZXJlbGxpcHRpYy5vcmcvRUZEL2cxcC9hdXRvLXR3aXN0ZWQtZXh0ZW5kZWQtMS5odG1sXG4gIC8vICAgICAjYWRkaXRpb24tYWRkLTIwMDgtaHdjZC0zXG4gIC8vIDhNXG5cbiAgLy8gQSA9IChZMSAtIFgxKSAqIChZMiAtIFgyKVxuICB2YXIgYSA9IHRoaXMueS5yZWRTdWIodGhpcy54KS5yZWRNdWwocC55LnJlZFN1YihwLngpKTtcbiAgLy8gQiA9IChZMSArIFgxKSAqIChZMiArIFgyKVxuICB2YXIgYiA9IHRoaXMueS5yZWRBZGQodGhpcy54KS5yZWRNdWwocC55LnJlZEFkZChwLngpKTtcbiAgLy8gQyA9IFQxICogayAqIFQyXG4gIHZhciBjID0gdGhpcy50LnJlZE11bCh0aGlzLmN1cnZlLmRkKS5yZWRNdWwocC50KTtcbiAgLy8gRCA9IFoxICogMiAqIFoyXG4gIHZhciBkID0gdGhpcy56LnJlZE11bChwLnoucmVkQWRkKHAueikpO1xuICAvLyBFID0gQiAtIEFcbiAgdmFyIGUgPSBiLnJlZFN1YihhKTtcbiAgLy8gRiA9IEQgLSBDXG4gIHZhciBmID0gZC5yZWRTdWIoYyk7XG4gIC8vIEcgPSBEICsgQ1xuICB2YXIgZyA9IGQucmVkQWRkKGMpO1xuICAvLyBIID0gQiArIEFcbiAgdmFyIGggPSBiLnJlZEFkZChhKTtcbiAgLy8gWDMgPSBFICogRlxuICB2YXIgbnggPSBlLnJlZE11bChmKTtcbiAgLy8gWTMgPSBHICogSFxuICB2YXIgbnkgPSBnLnJlZE11bChoKTtcbiAgLy8gVDMgPSBFICogSFxuICB2YXIgbnQgPSBlLnJlZE11bChoKTtcbiAgLy8gWjMgPSBGICogR1xuICB2YXIgbnogPSBmLnJlZE11bChnKTtcbiAgcmV0dXJuIHRoaXMuY3VydmUucG9pbnQobngsIG55LCBueiwgbnQpO1xufTtcblxuUG9pbnQucHJvdG90eXBlLl9wcm9qQWRkID0gZnVuY3Rpb24gX3Byb2pBZGQocCkge1xuICAvLyBoeXBlcmVsbGlwdGljLm9yZy9FRkQvZzFwL2F1dG8tdHdpc3RlZC1wcm9qZWN0aXZlLmh0bWxcbiAgLy8gICAgICNhZGRpdGlvbi1hZGQtMjAwOC1iYmpscFxuICAvLyAgICAgI2FkZGl0aW9uLWFkZC0yMDA3LWJsXG4gIC8vIDEwTSArIDFTXG5cbiAgLy8gQSA9IFoxICogWjJcbiAgdmFyIGEgPSB0aGlzLnoucmVkTXVsKHAueik7XG4gIC8vIEIgPSBBXjJcbiAgdmFyIGIgPSBhLnJlZFNxcigpO1xuICAvLyBDID0gWDEgKiBYMlxuICB2YXIgYyA9IHRoaXMueC5yZWRNdWwocC54KTtcbiAgLy8gRCA9IFkxICogWTJcbiAgdmFyIGQgPSB0aGlzLnkucmVkTXVsKHAueSk7XG4gIC8vIEUgPSBkICogQyAqIERcbiAgdmFyIGUgPSB0aGlzLmN1cnZlLmQucmVkTXVsKGMpLnJlZE11bChkKTtcbiAgLy8gRiA9IEIgLSBFXG4gIHZhciBmID0gYi5yZWRTdWIoZSk7XG4gIC8vIEcgPSBCICsgRVxuICB2YXIgZyA9IGIucmVkQWRkKGUpO1xuICAvLyBYMyA9IEEgKiBGICogKChYMSArIFkxKSAqIChYMiArIFkyKSAtIEMgLSBEKVxuICB2YXIgdG1wID0gdGhpcy54LnJlZEFkZCh0aGlzLnkpLnJlZE11bChwLngucmVkQWRkKHAueSkpLnJlZElTdWIoYykucmVkSVN1YihkKTtcbiAgdmFyIG54ID0gYS5yZWRNdWwoZikucmVkTXVsKHRtcCk7XG4gIHZhciBueTtcbiAgdmFyIG56O1xuICBpZiAodGhpcy5jdXJ2ZS50d2lzdGVkKSB7XG4gICAgLy8gWTMgPSBBICogRyAqIChEIC0gYSAqIEMpXG4gICAgbnkgPSBhLnJlZE11bChnKS5yZWRNdWwoZC5yZWRTdWIodGhpcy5jdXJ2ZS5fbXVsQShjKSkpO1xuICAgIC8vIFozID0gRiAqIEdcbiAgICBueiA9IGYucmVkTXVsKGcpO1xuICB9IGVsc2Uge1xuICAgIC8vIFkzID0gQSAqIEcgKiAoRCAtIEMpXG4gICAgbnkgPSBhLnJlZE11bChnKS5yZWRNdWwoZC5yZWRTdWIoYykpO1xuICAgIC8vIFozID0gYyAqIEYgKiBHXG4gICAgbnogPSB0aGlzLmN1cnZlLl9tdWxDKGYpLnJlZE11bChnKTtcbiAgfVxuICByZXR1cm4gdGhpcy5jdXJ2ZS5wb2ludChueCwgbnksIG56KTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiBhZGQocCkge1xuICBpZiAodGhpcy5pc0luZmluaXR5KCkpXG4gICAgcmV0dXJuIHA7XG4gIGlmIChwLmlzSW5maW5pdHkoKSlcbiAgICByZXR1cm4gdGhpcztcblxuICBpZiAodGhpcy5jdXJ2ZS5leHRlbmRlZClcbiAgICByZXR1cm4gdGhpcy5fZXh0QWRkKHApO1xuICBlbHNlXG4gICAgcmV0dXJuIHRoaXMuX3Byb2pBZGQocCk7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUubXVsID0gZnVuY3Rpb24gbXVsKGspIHtcbiAgaWYgKHRoaXMuX2hhc0RvdWJsZXMoaykpXG4gICAgcmV0dXJuIHRoaXMuY3VydmUuX2ZpeGVkTmFmTXVsKHRoaXMsIGspO1xuICBlbHNlXG4gICAgcmV0dXJuIHRoaXMuY3VydmUuX3duYWZNdWwodGhpcywgayk7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUubXVsQWRkID0gZnVuY3Rpb24gbXVsQWRkKGsxLCBwLCBrMikge1xuICByZXR1cm4gdGhpcy5jdXJ2ZS5fd25hZk11bEFkZCgxLCBbIHRoaXMsIHAgXSwgWyBrMSwgazIgXSwgMiwgZmFsc2UpO1xufTtcblxuUG9pbnQucHJvdG90eXBlLmptdWxBZGQgPSBmdW5jdGlvbiBqbXVsQWRkKGsxLCBwLCBrMikge1xuICByZXR1cm4gdGhpcy5jdXJ2ZS5fd25hZk11bEFkZCgxLCBbIHRoaXMsIHAgXSwgWyBrMSwgazIgXSwgMiwgdHJ1ZSk7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUubm9ybWFsaXplID0gZnVuY3Rpb24gbm9ybWFsaXplKCkge1xuICBpZiAodGhpcy56T25lKVxuICAgIHJldHVybiB0aGlzO1xuXG4gIC8vIE5vcm1hbGl6ZSBjb29yZGluYXRlc1xuICB2YXIgemkgPSB0aGlzLnoucmVkSW52bSgpO1xuICB0aGlzLnggPSB0aGlzLngucmVkTXVsKHppKTtcbiAgdGhpcy55ID0gdGhpcy55LnJlZE11bCh6aSk7XG4gIGlmICh0aGlzLnQpXG4gICAgdGhpcy50ID0gdGhpcy50LnJlZE11bCh6aSk7XG4gIHRoaXMueiA9IHRoaXMuY3VydmUub25lO1xuICB0aGlzLnpPbmUgPSB0cnVlO1xuICByZXR1cm4gdGhpcztcbn07XG5cblBvaW50LnByb3RvdHlwZS5uZWcgPSBmdW5jdGlvbiBuZWcoKSB7XG4gIHJldHVybiB0aGlzLmN1cnZlLnBvaW50KHRoaXMueC5yZWROZWcoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy55LFxuICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnosXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudCAmJiB0aGlzLnQucmVkTmVnKCkpO1xufTtcblxuUG9pbnQucHJvdG90eXBlLmdldFggPSBmdW5jdGlvbiBnZXRYKCkge1xuICB0aGlzLm5vcm1hbGl6ZSgpO1xuICByZXR1cm4gdGhpcy54LmZyb21SZWQoKTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5nZXRZID0gZnVuY3Rpb24gZ2V0WSgpIHtcbiAgdGhpcy5ub3JtYWxpemUoKTtcbiAgcmV0dXJuIHRoaXMueS5mcm9tUmVkKCk7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuZXEgPSBmdW5jdGlvbiBlcShvdGhlcikge1xuICByZXR1cm4gdGhpcyA9PT0gb3RoZXIgfHxcbiAgICAgICAgIHRoaXMuZ2V0WCgpLmNtcChvdGhlci5nZXRYKCkpID09PSAwICYmXG4gICAgICAgICB0aGlzLmdldFkoKS5jbXAob3RoZXIuZ2V0WSgpKSA9PT0gMDtcbn07XG5cblBvaW50LnByb3RvdHlwZS5lcVhUb1AgPSBmdW5jdGlvbiBlcVhUb1AoeCkge1xuICB2YXIgcnggPSB4LnRvUmVkKHRoaXMuY3VydmUucmVkKS5yZWRNdWwodGhpcy56KTtcbiAgaWYgKHRoaXMueC5jbXAocngpID09PSAwKVxuICAgIHJldHVybiB0cnVlO1xuXG4gIHZhciB4YyA9IHguY2xvbmUoKTtcbiAgdmFyIHQgPSB0aGlzLmN1cnZlLnJlZE4ucmVkTXVsKHRoaXMueik7XG4gIGZvciAoOzspIHtcbiAgICB4Yy5pYWRkKHRoaXMuY3VydmUubik7XG4gICAgaWYgKHhjLmNtcCh0aGlzLmN1cnZlLnApID49IDApXG4gICAgICByZXR1cm4gZmFsc2U7XG5cbiAgICByeC5yZWRJQWRkKHQpO1xuICAgIGlmICh0aGlzLnguY21wKHJ4KSA9PT0gMClcbiAgICAgIHJldHVybiB0cnVlO1xuICB9XG59O1xuXG4vLyBDb21wYXRpYmlsaXR5IHdpdGggQmFzZUN1cnZlXG5Qb2ludC5wcm90b3R5cGUudG9QID0gUG9pbnQucHJvdG90eXBlLm5vcm1hbGl6ZTtcblBvaW50LnByb3RvdHlwZS5taXhlZEFkZCA9IFBvaW50LnByb3RvdHlwZS5hZGQ7XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuc2hhMSA9IHJlcXVpcmUoJy4vc2hhLzEnKTtcbmV4cG9ydHMuc2hhMjI0ID0gcmVxdWlyZSgnLi9zaGEvMjI0Jyk7XG5leHBvcnRzLnNoYTI1NiA9IHJlcXVpcmUoJy4vc2hhLzI1NicpO1xuZXhwb3J0cy5zaGEzODQgPSByZXF1aXJlKCcuL3NoYS8zODQnKTtcbmV4cG9ydHMuc2hhNTEyID0gcmVxdWlyZSgnLi9zaGEvNTEyJyk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG52YXIgY29tbW9uID0gcmVxdWlyZSgnLi4vY29tbW9uJyk7XG52YXIgc2hhQ29tbW9uID0gcmVxdWlyZSgnLi9jb21tb24nKTtcblxudmFyIHJvdGwzMiA9IHV0aWxzLnJvdGwzMjtcbnZhciBzdW0zMiA9IHV0aWxzLnN1bTMyO1xudmFyIHN1bTMyXzUgPSB1dGlscy5zdW0zMl81O1xudmFyIGZ0XzEgPSBzaGFDb21tb24uZnRfMTtcbnZhciBCbG9ja0hhc2ggPSBjb21tb24uQmxvY2tIYXNoO1xuXG52YXIgc2hhMV9LID0gW1xuICAweDVBODI3OTk5LCAweDZFRDlFQkExLFxuICAweDhGMUJCQ0RDLCAweENBNjJDMUQ2XG5dO1xuXG5mdW5jdGlvbiBTSEExKCkge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgU0hBMSkpXG4gICAgcmV0dXJuIG5ldyBTSEExKCk7XG5cbiAgQmxvY2tIYXNoLmNhbGwodGhpcyk7XG4gIHRoaXMuaCA9IFtcbiAgICAweDY3NDUyMzAxLCAweGVmY2RhYjg5LCAweDk4YmFkY2ZlLFxuICAgIDB4MTAzMjU0NzYsIDB4YzNkMmUxZjAgXTtcbiAgdGhpcy5XID0gbmV3IEFycmF5KDgwKTtcbn1cblxudXRpbHMuaW5oZXJpdHMoU0hBMSwgQmxvY2tIYXNoKTtcbm1vZHVsZS5leHBvcnRzID0gU0hBMTtcblxuU0hBMS5ibG9ja1NpemUgPSA1MTI7XG5TSEExLm91dFNpemUgPSAxNjA7XG5TSEExLmhtYWNTdHJlbmd0aCA9IDgwO1xuU0hBMS5wYWRMZW5ndGggPSA2NDtcblxuU0hBMS5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIF91cGRhdGUobXNnLCBzdGFydCkge1xuICB2YXIgVyA9IHRoaXMuVztcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IDE2OyBpKyspXG4gICAgV1tpXSA9IG1zZ1tzdGFydCArIGldO1xuXG4gIGZvcig7IGkgPCBXLmxlbmd0aDsgaSsrKVxuICAgIFdbaV0gPSByb3RsMzIoV1tpIC0gM10gXiBXW2kgLSA4XSBeIFdbaSAtIDE0XSBeIFdbaSAtIDE2XSwgMSk7XG5cbiAgdmFyIGEgPSB0aGlzLmhbMF07XG4gIHZhciBiID0gdGhpcy5oWzFdO1xuICB2YXIgYyA9IHRoaXMuaFsyXTtcbiAgdmFyIGQgPSB0aGlzLmhbM107XG4gIHZhciBlID0gdGhpcy5oWzRdO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBXLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHMgPSB+fihpIC8gMjApO1xuICAgIHZhciB0ID0gc3VtMzJfNShyb3RsMzIoYSwgNSksIGZ0XzEocywgYiwgYywgZCksIGUsIFdbaV0sIHNoYTFfS1tzXSk7XG4gICAgZSA9IGQ7XG4gICAgZCA9IGM7XG4gICAgYyA9IHJvdGwzMihiLCAzMCk7XG4gICAgYiA9IGE7XG4gICAgYSA9IHQ7XG4gIH1cblxuICB0aGlzLmhbMF0gPSBzdW0zMih0aGlzLmhbMF0sIGEpO1xuICB0aGlzLmhbMV0gPSBzdW0zMih0aGlzLmhbMV0sIGIpO1xuICB0aGlzLmhbMl0gPSBzdW0zMih0aGlzLmhbMl0sIGMpO1xuICB0aGlzLmhbM10gPSBzdW0zMih0aGlzLmhbM10sIGQpO1xuICB0aGlzLmhbNF0gPSBzdW0zMih0aGlzLmhbNF0sIGUpO1xufTtcblxuU0hBMS5wcm90b3R5cGUuX2RpZ2VzdCA9IGZ1bmN0aW9uIGRpZ2VzdChlbmMpIHtcbiAgaWYgKGVuYyA9PT0gJ2hleCcpXG4gICAgcmV0dXJuIHV0aWxzLnRvSGV4MzIodGhpcy5oLCAnYmlnJyk7XG4gIGVsc2VcbiAgICByZXR1cm4gdXRpbHMuc3BsaXQzMih0aGlzLmgsICdiaWcnKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG52YXIgU0hBMjU2ID0gcmVxdWlyZSgnLi8yNTYnKTtcblxuZnVuY3Rpb24gU0hBMjI0KCkge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgU0hBMjI0KSlcbiAgICByZXR1cm4gbmV3IFNIQTIyNCgpO1xuXG4gIFNIQTI1Ni5jYWxsKHRoaXMpO1xuICB0aGlzLmggPSBbXG4gICAgMHhjMTA1OWVkOCwgMHgzNjdjZDUwNywgMHgzMDcwZGQxNywgMHhmNzBlNTkzOSxcbiAgICAweGZmYzAwYjMxLCAweDY4NTgxNTExLCAweDY0Zjk4ZmE3LCAweGJlZmE0ZmE0IF07XG59XG51dGlscy5pbmhlcml0cyhTSEEyMjQsIFNIQTI1Nik7XG5tb2R1bGUuZXhwb3J0cyA9IFNIQTIyNDtcblxuU0hBMjI0LmJsb2NrU2l6ZSA9IDUxMjtcblNIQTIyNC5vdXRTaXplID0gMjI0O1xuU0hBMjI0LmhtYWNTdHJlbmd0aCA9IDE5MjtcblNIQTIyNC5wYWRMZW5ndGggPSA2NDtcblxuU0hBMjI0LnByb3RvdHlwZS5fZGlnZXN0ID0gZnVuY3Rpb24gZGlnZXN0KGVuYykge1xuICAvLyBKdXN0IHRydW5jYXRlIG91dHB1dFxuICBpZiAoZW5jID09PSAnaGV4JylcbiAgICByZXR1cm4gdXRpbHMudG9IZXgzMih0aGlzLmguc2xpY2UoMCwgNyksICdiaWcnKTtcbiAgZWxzZVxuICAgIHJldHVybiB1dGlscy5zcGxpdDMyKHRoaXMuaC5zbGljZSgwLCA3KSwgJ2JpZycpO1xufTtcblxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuXG52YXIgU0hBNTEyID0gcmVxdWlyZSgnLi81MTInKTtcblxuZnVuY3Rpb24gU0hBMzg0KCkge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgU0hBMzg0KSlcbiAgICByZXR1cm4gbmV3IFNIQTM4NCgpO1xuXG4gIFNIQTUxMi5jYWxsKHRoaXMpO1xuICB0aGlzLmggPSBbXG4gICAgMHhjYmJiOWQ1ZCwgMHhjMTA1OWVkOCxcbiAgICAweDYyOWEyOTJhLCAweDM2N2NkNTA3LFxuICAgIDB4OTE1OTAxNWEsIDB4MzA3MGRkMTcsXG4gICAgMHgxNTJmZWNkOCwgMHhmNzBlNTkzOSxcbiAgICAweDY3MzMyNjY3LCAweGZmYzAwYjMxLFxuICAgIDB4OGViNDRhODcsIDB4Njg1ODE1MTEsXG4gICAgMHhkYjBjMmUwZCwgMHg2NGY5OGZhNyxcbiAgICAweDQ3YjU0ODFkLCAweGJlZmE0ZmE0IF07XG59XG51dGlscy5pbmhlcml0cyhTSEEzODQsIFNIQTUxMik7XG5tb2R1bGUuZXhwb3J0cyA9IFNIQTM4NDtcblxuU0hBMzg0LmJsb2NrU2l6ZSA9IDEwMjQ7XG5TSEEzODQub3V0U2l6ZSA9IDM4NDtcblNIQTM4NC5obWFjU3RyZW5ndGggPSAxOTI7XG5TSEEzODQucGFkTGVuZ3RoID0gMTI4O1xuXG5TSEEzODQucHJvdG90eXBlLl9kaWdlc3QgPSBmdW5jdGlvbiBkaWdlc3QoZW5jKSB7XG4gIGlmIChlbmMgPT09ICdoZXgnKVxuICAgIHJldHVybiB1dGlscy50b0hleDMyKHRoaXMuaC5zbGljZSgwLCAxMiksICdiaWcnKTtcbiAgZWxzZVxuICAgIHJldHVybiB1dGlscy5zcGxpdDMyKHRoaXMuaC5zbGljZSgwLCAxMiksICdiaWcnKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbnZhciBjb21tb24gPSByZXF1aXJlKCcuL2NvbW1vbicpO1xuXG52YXIgcm90bDMyID0gdXRpbHMucm90bDMyO1xudmFyIHN1bTMyID0gdXRpbHMuc3VtMzI7XG52YXIgc3VtMzJfMyA9IHV0aWxzLnN1bTMyXzM7XG52YXIgc3VtMzJfNCA9IHV0aWxzLnN1bTMyXzQ7XG52YXIgQmxvY2tIYXNoID0gY29tbW9uLkJsb2NrSGFzaDtcblxuZnVuY3Rpb24gUklQRU1EMTYwKCkge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgUklQRU1EMTYwKSlcbiAgICByZXR1cm4gbmV3IFJJUEVNRDE2MCgpO1xuXG4gIEJsb2NrSGFzaC5jYWxsKHRoaXMpO1xuXG4gIHRoaXMuaCA9IFsgMHg2NzQ1MjMwMSwgMHhlZmNkYWI4OSwgMHg5OGJhZGNmZSwgMHgxMDMyNTQ3NiwgMHhjM2QyZTFmMCBdO1xuICB0aGlzLmVuZGlhbiA9ICdsaXR0bGUnO1xufVxudXRpbHMuaW5oZXJpdHMoUklQRU1EMTYwLCBCbG9ja0hhc2gpO1xuZXhwb3J0cy5yaXBlbWQxNjAgPSBSSVBFTUQxNjA7XG5cblJJUEVNRDE2MC5ibG9ja1NpemUgPSA1MTI7XG5SSVBFTUQxNjAub3V0U2l6ZSA9IDE2MDtcblJJUEVNRDE2MC5obWFjU3RyZW5ndGggPSAxOTI7XG5SSVBFTUQxNjAucGFkTGVuZ3RoID0gNjQ7XG5cblJJUEVNRDE2MC5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZShtc2csIHN0YXJ0KSB7XG4gIHZhciBBID0gdGhpcy5oWzBdO1xuICB2YXIgQiA9IHRoaXMuaFsxXTtcbiAgdmFyIEMgPSB0aGlzLmhbMl07XG4gIHZhciBEID0gdGhpcy5oWzNdO1xuICB2YXIgRSA9IHRoaXMuaFs0XTtcbiAgdmFyIEFoID0gQTtcbiAgdmFyIEJoID0gQjtcbiAgdmFyIENoID0gQztcbiAgdmFyIERoID0gRDtcbiAgdmFyIEVoID0gRTtcbiAgZm9yICh2YXIgaiA9IDA7IGogPCA4MDsgaisrKSB7XG4gICAgdmFyIFQgPSBzdW0zMihcbiAgICAgIHJvdGwzMihcbiAgICAgICAgc3VtMzJfNChBLCBmKGosIEIsIEMsIEQpLCBtc2dbcltqXSArIHN0YXJ0XSwgSyhqKSksXG4gICAgICAgIHNbal0pLFxuICAgICAgRSk7XG4gICAgQSA9IEU7XG4gICAgRSA9IEQ7XG4gICAgRCA9IHJvdGwzMihDLCAxMCk7XG4gICAgQyA9IEI7XG4gICAgQiA9IFQ7XG4gICAgVCA9IHN1bTMyKFxuICAgICAgcm90bDMyKFxuICAgICAgICBzdW0zMl80KEFoLCBmKDc5IC0gaiwgQmgsIENoLCBEaCksIG1zZ1tyaFtqXSArIHN0YXJ0XSwgS2goaikpLFxuICAgICAgICBzaFtqXSksXG4gICAgICBFaCk7XG4gICAgQWggPSBFaDtcbiAgICBFaCA9IERoO1xuICAgIERoID0gcm90bDMyKENoLCAxMCk7XG4gICAgQ2ggPSBCaDtcbiAgICBCaCA9IFQ7XG4gIH1cbiAgVCA9IHN1bTMyXzModGhpcy5oWzFdLCBDLCBEaCk7XG4gIHRoaXMuaFsxXSA9IHN1bTMyXzModGhpcy5oWzJdLCBELCBFaCk7XG4gIHRoaXMuaFsyXSA9IHN1bTMyXzModGhpcy5oWzNdLCBFLCBBaCk7XG4gIHRoaXMuaFszXSA9IHN1bTMyXzModGhpcy5oWzRdLCBBLCBCaCk7XG4gIHRoaXMuaFs0XSA9IHN1bTMyXzModGhpcy5oWzBdLCBCLCBDaCk7XG4gIHRoaXMuaFswXSA9IFQ7XG59O1xuXG5SSVBFTUQxNjAucHJvdG90eXBlLl9kaWdlc3QgPSBmdW5jdGlvbiBkaWdlc3QoZW5jKSB7XG4gIGlmIChlbmMgPT09ICdoZXgnKVxuICAgIHJldHVybiB1dGlscy50b0hleDMyKHRoaXMuaCwgJ2xpdHRsZScpO1xuICBlbHNlXG4gICAgcmV0dXJuIHV0aWxzLnNwbGl0MzIodGhpcy5oLCAnbGl0dGxlJyk7XG59O1xuXG5mdW5jdGlvbiBmKGosIHgsIHksIHopIHtcbiAgaWYgKGogPD0gMTUpXG4gICAgcmV0dXJuIHggXiB5IF4gejtcbiAgZWxzZSBpZiAoaiA8PSAzMSlcbiAgICByZXR1cm4gKHggJiB5KSB8ICgofngpICYgeik7XG4gIGVsc2UgaWYgKGogPD0gNDcpXG4gICAgcmV0dXJuICh4IHwgKH55KSkgXiB6O1xuICBlbHNlIGlmIChqIDw9IDYzKVxuICAgIHJldHVybiAoeCAmIHopIHwgKHkgJiAofnopKTtcbiAgZWxzZVxuICAgIHJldHVybiB4IF4gKHkgfCAofnopKTtcbn1cblxuZnVuY3Rpb24gSyhqKSB7XG4gIGlmIChqIDw9IDE1KVxuICAgIHJldHVybiAweDAwMDAwMDAwO1xuICBlbHNlIGlmIChqIDw9IDMxKVxuICAgIHJldHVybiAweDVhODI3OTk5O1xuICBlbHNlIGlmIChqIDw9IDQ3KVxuICAgIHJldHVybiAweDZlZDllYmExO1xuICBlbHNlIGlmIChqIDw9IDYzKVxuICAgIHJldHVybiAweDhmMWJiY2RjO1xuICBlbHNlXG4gICAgcmV0dXJuIDB4YTk1M2ZkNGU7XG59XG5cbmZ1bmN0aW9uIEtoKGopIHtcbiAgaWYgKGogPD0gMTUpXG4gICAgcmV0dXJuIDB4NTBhMjhiZTY7XG4gIGVsc2UgaWYgKGogPD0gMzEpXG4gICAgcmV0dXJuIDB4NWM0ZGQxMjQ7XG4gIGVsc2UgaWYgKGogPD0gNDcpXG4gICAgcmV0dXJuIDB4NmQ3MDNlZjM7XG4gIGVsc2UgaWYgKGogPD0gNjMpXG4gICAgcmV0dXJuIDB4N2E2ZDc2ZTk7XG4gIGVsc2VcbiAgICByZXR1cm4gMHgwMDAwMDAwMDtcbn1cblxudmFyIHIgPSBbXG4gIDAsIDEsIDIsIDMsIDQsIDUsIDYsIDcsIDgsIDksIDEwLCAxMSwgMTIsIDEzLCAxNCwgMTUsXG4gIDcsIDQsIDEzLCAxLCAxMCwgNiwgMTUsIDMsIDEyLCAwLCA5LCA1LCAyLCAxNCwgMTEsIDgsXG4gIDMsIDEwLCAxNCwgNCwgOSwgMTUsIDgsIDEsIDIsIDcsIDAsIDYsIDEzLCAxMSwgNSwgMTIsXG4gIDEsIDksIDExLCAxMCwgMCwgOCwgMTIsIDQsIDEzLCAzLCA3LCAxNSwgMTQsIDUsIDYsIDIsXG4gIDQsIDAsIDUsIDksIDcsIDEyLCAyLCAxMCwgMTQsIDEsIDMsIDgsIDExLCA2LCAxNSwgMTNcbl07XG5cbnZhciByaCA9IFtcbiAgNSwgMTQsIDcsIDAsIDksIDIsIDExLCA0LCAxMywgNiwgMTUsIDgsIDEsIDEwLCAzLCAxMixcbiAgNiwgMTEsIDMsIDcsIDAsIDEzLCA1LCAxMCwgMTQsIDE1LCA4LCAxMiwgNCwgOSwgMSwgMixcbiAgMTUsIDUsIDEsIDMsIDcsIDE0LCA2LCA5LCAxMSwgOCwgMTIsIDIsIDEwLCAwLCA0LCAxMyxcbiAgOCwgNiwgNCwgMSwgMywgMTEsIDE1LCAwLCA1LCAxMiwgMiwgMTMsIDksIDcsIDEwLCAxNCxcbiAgMTIsIDE1LCAxMCwgNCwgMSwgNSwgOCwgNywgNiwgMiwgMTMsIDE0LCAwLCAzLCA5LCAxMVxuXTtcblxudmFyIHMgPSBbXG4gIDExLCAxNCwgMTUsIDEyLCA1LCA4LCA3LCA5LCAxMSwgMTMsIDE0LCAxNSwgNiwgNywgOSwgOCxcbiAgNywgNiwgOCwgMTMsIDExLCA5LCA3LCAxNSwgNywgMTIsIDE1LCA5LCAxMSwgNywgMTMsIDEyLFxuICAxMSwgMTMsIDYsIDcsIDE0LCA5LCAxMywgMTUsIDE0LCA4LCAxMywgNiwgNSwgMTIsIDcsIDUsXG4gIDExLCAxMiwgMTQsIDE1LCAxNCwgMTUsIDksIDgsIDksIDE0LCA1LCA2LCA4LCA2LCA1LCAxMixcbiAgOSwgMTUsIDUsIDExLCA2LCA4LCAxMywgMTIsIDUsIDEyLCAxMywgMTQsIDExLCA4LCA1LCA2XG5dO1xuXG52YXIgc2ggPSBbXG4gIDgsIDksIDksIDExLCAxMywgMTUsIDE1LCA1LCA3LCA3LCA4LCAxMSwgMTQsIDE0LCAxMiwgNixcbiAgOSwgMTMsIDE1LCA3LCAxMiwgOCwgOSwgMTEsIDcsIDcsIDEyLCA3LCA2LCAxNSwgMTMsIDExLFxuICA5LCA3LCAxNSwgMTEsIDgsIDYsIDYsIDE0LCAxMiwgMTMsIDUsIDE0LCAxMywgMTMsIDcsIDUsXG4gIDE1LCA1LCA4LCAxMSwgMTQsIDE0LCA2LCAxNCwgNiwgOSwgMTIsIDksIDEyLCA1LCAxNSwgOCxcbiAgOCwgNSwgMTIsIDksIDEyLCA1LCAxNCwgNiwgOCwgMTMsIDYsIDUsIDE1LCAxMywgMTEsIDExXG5dO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG52YXIgYXNzZXJ0ID0gcmVxdWlyZSgnbWluaW1hbGlzdGljLWFzc2VydCcpO1xuXG5mdW5jdGlvbiBIbWFjKGhhc2gsIGtleSwgZW5jKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBIbWFjKSlcbiAgICByZXR1cm4gbmV3IEhtYWMoaGFzaCwga2V5LCBlbmMpO1xuICB0aGlzLkhhc2ggPSBoYXNoO1xuICB0aGlzLmJsb2NrU2l6ZSA9IGhhc2guYmxvY2tTaXplIC8gODtcbiAgdGhpcy5vdXRTaXplID0gaGFzaC5vdXRTaXplIC8gODtcbiAgdGhpcy5pbm5lciA9IG51bGw7XG4gIHRoaXMub3V0ZXIgPSBudWxsO1xuXG4gIHRoaXMuX2luaXQodXRpbHMudG9BcnJheShrZXksIGVuYykpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBIbWFjO1xuXG5IbWFjLnByb3RvdHlwZS5faW5pdCA9IGZ1bmN0aW9uIGluaXQoa2V5KSB7XG4gIC8vIFNob3J0ZW4ga2V5LCBpZiBuZWVkZWRcbiAgaWYgKGtleS5sZW5ndGggPiB0aGlzLmJsb2NrU2l6ZSlcbiAgICBrZXkgPSBuZXcgdGhpcy5IYXNoKCkudXBkYXRlKGtleSkuZGlnZXN0KCk7XG4gIGFzc2VydChrZXkubGVuZ3RoIDw9IHRoaXMuYmxvY2tTaXplKTtcblxuICAvLyBBZGQgcGFkZGluZyB0byBrZXlcbiAgZm9yICh2YXIgaSA9IGtleS5sZW5ndGg7IGkgPCB0aGlzLmJsb2NrU2l6ZTsgaSsrKVxuICAgIGtleS5wdXNoKDApO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBrZXkubGVuZ3RoOyBpKyspXG4gICAga2V5W2ldIF49IDB4MzY7XG4gIHRoaXMuaW5uZXIgPSBuZXcgdGhpcy5IYXNoKCkudXBkYXRlKGtleSk7XG5cbiAgLy8gMHgzNiBeIDB4NWMgPSAweDZhXG4gIGZvciAoaSA9IDA7IGkgPCBrZXkubGVuZ3RoOyBpKyspXG4gICAga2V5W2ldIF49IDB4NmE7XG4gIHRoaXMub3V0ZXIgPSBuZXcgdGhpcy5IYXNoKCkudXBkYXRlKGtleSk7XG59O1xuXG5IbWFjLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUobXNnLCBlbmMpIHtcbiAgdGhpcy5pbm5lci51cGRhdGUobXNnLCBlbmMpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbkhtYWMucHJvdG90eXBlLmRpZ2VzdCA9IGZ1bmN0aW9uIGRpZ2VzdChlbmMpIHtcbiAgdGhpcy5vdXRlci51cGRhdGUodGhpcy5pbm5lci5kaWdlc3QoKSk7XG4gIHJldHVybiB0aGlzLm91dGVyLmRpZ2VzdChlbmMpO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0ge1xuICBkb3VibGVzOiB7XG4gICAgc3RlcDogNCxcbiAgICBwb2ludHM6IFtcbiAgICAgIFtcbiAgICAgICAgJ2U2MGZjZTkzYjU5ZTllYzUzMDExYWFiYzIxYzIzZTk3YjJhMzEzNjliODdhNWFlOWM0NGVlODllMmE2ZGVjMGEnLFxuICAgICAgICAnZjdlMzUwNzM5OWU1OTU5MjlkYjk5ZjM0ZjU3OTM3MTAxMjk2ODkxZTQ0ZDIzZjBiZTFmMzJjY2U2OTYxNjgyMSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc4MjgyMjYzMjEyYzYwOWQ5ZWEyYTZlM2UxNzJkZTIzOGQ4YzM5Y2FiZDVhYzFjYTEwNjQ2ZTIzZmQ1ZjUxNTA4JyxcbiAgICAgICAgJzExZjhhODA5ODU1N2RmZTQ1ZTgyNTZlODMwYjYwYWNlNjJkNjEzYWMyZjdiMTdiZWQzMWI2ZWFmZjZlMjZjYWYnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMTc1ZTE1OWY3MjhiODY1YTcyZjk5Y2M2YzZmYzg0NmRlMGI5MzgzM2ZkMjIyMmVkNzNmY2U1YjU1MWU1YjczOScsXG4gICAgICAgICdkMzUwNmUwZDllM2M3OWViYTRlZjk3YTUxZmY3MWY1ZWFjYjU5NTVhZGQyNDM0NWM2ZWZhNmZmZWU5ZmVkNjk1J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzM2M2Q5MGQ0NDdiMDBjOWM5OWNlYWMwNWI2MjYyZWUwNTM0NDFjN2U1NTU1MmZmZTUyNmJhZDhmODNmZjQ2NDAnLFxuICAgICAgICAnNGUyNzNhZGZjNzMyMjIxOTUzYjQ0NTM5N2YzMzYzMTQ1YjlhODkwMDgxOTllY2I2MjAwM2M3ZjNiZWU5ZGU5J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzhiNGI1ZjE2NWRmM2MyYmU4YzYyNDRiNWI3NDU2Mzg4NDNlNGE3ODFhMTViY2QxYjY5Zjc5YTU1ZGZmZGY4MGMnLFxuICAgICAgICAnNGFhZDBhNmY2OGQzMDhiNGIzZmJkNzgxM2FiMGRhMDRmOWUzMzY1NDYxNjJlZTU2YjNlZmYwYzY1ZmQ0ZmQzNidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc3MjNjYmFhNmU1ZGI5OTZkNmJmNzcxYzAwYmQ1NDhjN2I3MDBkYmZmYTZjMGU3N2JjYjYxMTU5MjUyMzJmY2RhJyxcbiAgICAgICAgJzk2ZTg2N2I1NTk1Y2M0OThhOTIxMTM3NDg4ODI0ZDZlMjY2MGEwNjUzNzc5NDk0ODAxZGMwNjlkOWViMzlmNWYnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZWViZmE0ZDQ5M2JlYmY5OGJhNWZlZWM4MTJjMmQzYjUwOTQ3OTYxMjM3YTkxOTgzOWE1MzNlY2EwZTdkZDdmYScsXG4gICAgICAgICc1ZDlhOGNhMzk3MGVmMGYyNjllZTdlZGFmMTc4MDg5ZDlhZTRjZGMzYTcxMWY3MTJkZGZkNGZkYWUxZGU4OTk5J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzEwMGY0NGRhNjk2ZTcxNjcyNzkxZDBhMDliN2JkZTQ1OWYxMjE1YTI5YjNjMDNiZmVmZDc4MzViMzlhNDhkYjAnLFxuICAgICAgICAnY2RkOWUxMzE5MmEwMGI3NzJlYzhmMzMwMGMwOTA2NjZiN2ZmNGExOGZmNTE5NWFjMGZiZDVjZDYyYmM2NWEwOSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdlMTAzMWJlMjYyYzdlZDFiMWRjOTIyN2E0YTA0YzAxN2E3N2Y4ZDQ0NjRmM2IzODUyYzhhY2RlNmU1MzRmZDJkJyxcbiAgICAgICAgJzlkNzA2MTkyODk0MDQwNWU2YmI2YTQxNzY1OTc1MzVhZjI5MmRkNDE5ZTFjZWQ3OWE0NGYxOGYyOTQ1NmEwMGQnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZmVlYTZjYWU0NmQ1NWI1MzBhYzI4MzlmMTQzYmQ3ZWM1Y2Y4YjI2NmE0MWQ2YWY1MmQ1ZTY4OGQ5MDk0Njk2ZCcsXG4gICAgICAgICdlNTdjNmI2Yzk3ZGNlMWJhYjA2ZTRlMTJiZjNlY2Q1Yzk4MWM4OTU3Y2M0MTQ0MmQzMTU1ZGViZjE4MDkwMDg4J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2RhNjdhOTFkOTEwNDljZGNiMzY3YmU0YmU2ZmZjYTNjZmVlZDY1N2Q4MDg1ODNkZTMzZmE5NzhiYzFlYzZjYjEnLFxuICAgICAgICAnOWJhY2FhMzU0ODE2NDJiYzQxZjQ2M2Y3ZWM5NzgwZTVkZWM3YWRjNTA4Zjc0MGExN2U5ZWE4ZTI3YTY4YmUxZCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc1MzkwNGZhYTBiMzM0Y2RkYTZlMDAwOTM1ZWYyMjE1MWVjMDhkMGY3YmIxMTA2OWY1NzU0NWNjYzFhMzdiN2MwJyxcbiAgICAgICAgJzViYzA4N2QwYmM4MDEwNmQ4OGM5ZWNjYWMyMGQzYzFjMTM5OTk5ODFlMTQ0MzQ2OTlkY2IwOTZiMDIyNzcxYzgnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnOGU3YmNkMGJkMzU5ODNhNzcxOWNjYTc3NjRjYTkwNjc3OWI1M2EwNDNhOWI4YmNhZWZmOTU5ZjQzYWQ4NjA0NycsXG4gICAgICAgICcxMGI3NzcwYjJhM2RhNGIzOTQwMzEwNDIwY2E5NTE0NTc5ZTg4ZTJlNDdmZDY4YjNlYTEwMDQ3ZTg0NjAzNzJhJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzM4NWVlZDM0YzFjZGZmMjFlNmQwODE4Njg5YjgxYmRlNzFhN2Y0ZjE4Mzk3ZTY2OTBhODQxZTE1OTljNDM4NjInLFxuICAgICAgICAnMjgzYmViYzNlOGVhMjNmNTY3MDFkZTE5ZTllYmY0NTc2YjMwNGVlYzIwODZkYzhjYzA0NThmZTU1NDJlNTQ1MydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc2ZjlkOWI4MDNlY2YxOTE2MzdjNzNhNDQxM2RmYTE4MGZkZGY4NGE1OTQ3ZmJjOWM2MDZlZDg2YzNmYWMzYTcnLFxuICAgICAgICAnN2M4MGM2OGU2MDMwNTliYTY5YjhlMmEzMGU0NWM0ZDQ3ZWE0ZGQyZjVjMjgxMDAyZDg2ODkwNjAzYTg0MjE2MCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICczMzIyZDQwMTI0M2M0ZTI1ODJhMjE0N2MxMDRkNmVjYmY3NzRkMTYzZGIwZjVlNTMxM2I3ZTBlNzQyZDBlNmJkJyxcbiAgICAgICAgJzU2ZTcwNzk3ZTk2NjRlZjViZmIwMTliYzRkZGFmOWI3MjgwNWY2M2VhMjg3M2FmNjI0ZjNhMmU5NmMyOGIyYTAnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnODU2NzJjN2QyZGUwYjdkYTJiZDE3NzBkODk2NjU4Njg3NDFiM2Y5YWY3NjQzMzk3NzIxZDc0ZDI4MTM0YWI4MycsXG4gICAgICAgICc3YzQ4MWI5YjViNDNiMmViNjM3NDA0OWJmYTYyYzJlNWU3N2YxN2ZjYzUyOThmNDRjOGUzMDk0Zjc5MDMxM2E2J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzk0OGJmODA5YjE5ODhhNDZiMDZjOWYxOTE5NDEzYjEwZjkyMjZjNjBmNjY4ODMyZmZkOTU5YWY2MGM4MmEwYScsXG4gICAgICAgICc1M2E1NjI4NTZkY2I2NjQ2ZGM2Yjc0YzVkMWMzNDE4YzZkNGRmZjA4Yzk3Y2QyYmVkNGNiN2Y4OGQ4YzhlNTg5J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzYyNjBjZTdmNDYxODAxYzM0ZjA2N2NlMGYwMjg3M2E4ZjFiMGU0NGRmYzY5NzUyYWNjZWNkODE5ZjM4ZmQ4ZTgnLFxuICAgICAgICAnYmMyZGE4MmI2ZmE1YjU3MWE3ZjA5MDQ5Nzc2YTFlZjdlY2QyOTIyMzgwNTFjMTk4YzFhODRlOTViMmI0YWUxNydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdlNTAzN2RlMGFmYzFkOGQ0M2Q4MzQ4NDE0YmJmNDEwMzA0M2VjOGY1NzViZmRjNDMyOTUzY2M4ZDIwMzdmYTJkJyxcbiAgICAgICAgJzQ1NzE1MzRiYWE5NGQzYjVmOWY5OGQwOWZiOTkwYmRkYmQ1ZjViMDNlYzQ4MWYxMGUwZTVkYzg0MWQ3NTViZGEnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZTA2MzcyYjBmNGEyMDdhZGY1ZWE5MDVlOGYxNzcxYjRlN2U4ZGJkMWM2YTZjNWI3MjU4NjZhMGFlNGZjZTcyNScsXG4gICAgICAgICc3YTkwODk3NGJjZTE4Y2ZlMTJhMjdiYjJhZDVhNDg4Y2Q3NDg0YTc3ODcxMDQ4NzBiMjcwMzRmOTRlZWUzMWRkJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzIxM2M3YTcxNWNkNWQ0NTM1OGQwYmJmOWRjMGNlMDIyMDRiMTBiZGRlMmEzZjU4NTQwYWQ2OTA4ZDA1NTk3NTQnLFxuICAgICAgICAnNGI2ZGFkMGI1YWU0NjI1MDcwMTNhZDA2MjQ1YmExOTBiYjQ4NTBmNWYzNmE3ZWVkZGZmMmMyNzUzNGI0NThmMidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc0ZTdjMjcyYTdhZjRiMzRlOGRiYjkzNTJhNTQxOWE4N2UyODM4YzcwYWRjNjJjZGRmMGNjM2EzYjA4ZmJkNTNjJyxcbiAgICAgICAgJzE3NzQ5Yzc2NmM5ZDBiMThlMTZmZDA5ZjZkZWY2ODFiNTMwYjk2MTRiZmY3ZGQzM2UwYjM5NDE4MTdkY2FhZTYnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZmVhNzRlM2RiZTc3OGIxYjEwZjIzOGFkNjE2ODZhYTVjNzZlM2RiMmJlNDMwNTc2MzI0MjdlMjg0MGZiMjdiNicsXG4gICAgICAgICc2ZTA1NjhkYjliMGIxMzI5N2NmNjc0ZGVjY2I2YWY5MzEyNmI1OTZiOTczZjdiNzc3MDFkM2RiN2YyM2NiOTZmJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzc2ZTY0MTEzZjY3N2NmMGUxMGEyNTcwZDU5OTk2OGQzMTU0NGUxNzliNzYwNDMyOTUyYzAyYTQ0MTdiZGRlMzknLFxuICAgICAgICAnYzkwZGRmOGRlZTRlOTVjZjU3NzA2NmQ3MDY4MWYwZDM1ZTJhMzNkMmI1NmQyMDMyYjRiMTc1MmQxOTAxYWMwMSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdjNzM4YzU2YjAzYjJhYmUxZTgyODFiYWE3NDNmOGY5YThmN2NjNjQzZGYyNmNiZWUzYWIxNTAyNDJiY2JiODkxJyxcbiAgICAgICAgJzg5M2ZiNTc4OTUxYWQyNTM3ZjcxOGYyZWFjYmZiYmJiODIzMTRlZWY3ODgwY2ZlOTE3ZTczNWQ5Njk5YTg0YzMnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZDg5NTYyNjU0OGI2NWI4MWUyNjRjNzYzN2M5NzI4NzdkMWQ3MmU1ZjNhOTI1MDE0MzcyZTlmNjU4OGY2YzE0YicsXG4gICAgICAgICdmZWJmYWEzOGYyYmM3ZWFlNzI4ZWM2MDgxOGMzNDBlYjAzNDI4ZDYzMmJiMDY3ZTE3OTM2M2VkNzVkN2Q5OTFmJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2I4ZGE5NDAzMmE5NTc1MThlYjBmNjQzMzU3MWU4NzYxY2VmZmM3MzY5M2U4NGVkZDQ5MTUwYTU2NGY2NzZlMDMnLFxuICAgICAgICAnMjgwNGRmYTQ0ODA1YTFlNGQ3Yzk5Y2M5NzYyODA4YjA5MmNjNTg0ZDk1ZmYzYjUxMTQ4OGU0ZTc0ZWZkZjZlNydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdlODBmZWExNDQ0MWZiMzNhN2Q4YWRhYjk0NzVkN2ZhYjIwMTllZmZiNTE1NmE3OTJmMWExMTc3OGUzYzBkZjVkJyxcbiAgICAgICAgJ2VlZDFkZTdmNjM4ZTAwNzcxZTg5NzY4Y2EzY2E5NDQ3MmQxNTVlODBhZjMyMmVhOWZjYjQyOTFiNmFjOWVjNzgnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnYTMwMTY5N2JkZmNkNzA0MzEzYmE0OGU1MWQ1Njc1NDNmMmExODIwMzFlZmQ2OTE1ZGRjMDdiYmNjNGUxNjA3MCcsXG4gICAgICAgICc3MzcwZjkxY2ZiNjdlNGY1MDgxODA5ZmEyNWQ0MGY5YjE3MzVkYmY3YzBhMTFhMTMwYzBkMWEwNDFlMTc3ZWExJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzkwYWQ4NWIzODlkNmI5MzY0NjNmOWQwNTEyNjc4ZGUyMDhjYzMzMGIxMTMwN2ZmZmFiN2FjNjNlM2ZiMDRlZDQnLFxuICAgICAgICAnZTUwN2EzNjIwYTM4MjYxYWZmZGNiZDk0MjcyMjJiODM5YWVmYWJlMTU4Mjg5NGQ5OTFkNGQ0OGNiNmVmMTUwJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzhmNjhiOWQyZjYzYjVmMzM5MjM5YzFhZDk4MWYxNjJlZTg4YzU2Nzg3MjNlYTMzNTFiN2I0NDRjOWVjNGMwZGEnLFxuICAgICAgICAnNjYyYTlmMmRiYTA2Mzk4NmRlMWQ5MGMyYjZiZTIxNWRiYmVhMmNmZTk1NTEwYmZkZjIzY2JmNzk1MDFmZmY4MidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdlNGYzZmIwMTc2YWY4NWQ2NWZmOTlmZjkxOThjMzYwOTFmNDhlODY1MDM2ODFlM2U2Njg2ZmQ1MDUzMjMxZTExJyxcbiAgICAgICAgJzFlNjM2MzNhZDBlZjRmMWMxNjYxYTZkMGVhMDJiNzI4NmNjN2U3NGVjOTUxZDFjOTgyMmMzODU3NmZlYjczYmMnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnOGMwMGZhOWIxOGViZjMzMWViOTYxNTM3YTQ1YTQyNjZjNzAzNGYyZjBkNGUxZDA3MTZmYjZlYWUyMGVhZTI5ZScsXG4gICAgICAgICdlZmE0NzI2N2ZlYTUyMWExYTlkYzM0M2EzNzM2Yzk3NGMyZmFkYWZhODFlMzZjNTRlN2QyYTRjNjY3MDI0MTRiJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2U3YTI2Y2U2OWRkNDgyOWYzZTEwY2VjMGE5ZTk4ZWQzMTQzZDA4NGYzMDhiOTJjMDk5N2ZkZGZjNjBjYjNlNDEnLFxuICAgICAgICAnMmE3NThlMzAwZmE3OTg0YjQ3MWIwMDZhMWFhZmJiMThkMGE2YjJjMDQyMGU4M2UyMGU4YTk0MjFjZjJjZmQ1MSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdiNjQ1OWUwZWUzNjYyZWM4ZDIzNTQwYzIyM2JjYmRjNTcxY2JjYjk2N2Q3OTQyNGYzY2YyOWViM2RlNmI4MGVmJyxcbiAgICAgICAgJzY3Yzg3NmQwNmYzZTA2ZGUxZGFkZjE2ZTU2NjFkYjNjNGIzYWU2ZDQ4ZTM1YjJmZjMwYmYwYjYxYTcxYmE0NSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdkNjhhODBjODI4MGJiODQwNzkzMjM0YWExMThmMDYyMzFkNmYxZmM2N2U3M2M1YTVkZWRhMGY1YjQ5Njk0M2U4JyxcbiAgICAgICAgJ2RiOGJhOWZmZjRiNTg2ZDAwYzRiMWY5MTc3YjBlMjhiNWIwZTdiOGY3ODQ1Mjk1YTI5NGM4NDI2NmIxMzMxMjAnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMzI0YWVkN2RmNjVjODA0MjUyZGMwMjcwOTA3YTMwYjA5NjEyYWViOTczNDQ5Y2VhNDA5NTk4MGZjMjhkM2Q1ZCcsXG4gICAgICAgICc2NDhhMzY1Nzc0YjYxZjJmZjEzMGMwYzM1YWVjMWY0ZjE5MjEzYjBjN2UzMzI4NDM5NjcyMjRhZjk2YWI3Yzg0J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzRkZjljMTQ5MTljZGU2MWY2ZDUxZGZkYmU1ZmVlNWRjZWVjNDE0M2JhOGQxY2E4ODhlOGJkMzczZmQwNTRjOTYnLFxuICAgICAgICAnMzVlYzUxMDkyZDg3MjgwNTA5NzRjMjNhMWQ4NWQ0YjVkNTA2Y2RjMjg4NDkwMTkyZWJhYzA2Y2FkMTBkNWQnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnOWMzOTE5YTg0YTQ3NDg3MGZhZWQ4YTljMWNjNjYwMjE1MjM0ODkwNTRkN2YwMzA4Y2JmYzk5YzhhYzFmOThjZCcsXG4gICAgICAgICdkZGI4NGYwZjRhNGRkZDU3NTg0ZjA0NGJmMjYwZTY0MTkwNTMyNmY3NmM2NGM4ZTZiZTdlNWUwM2Q0ZmM1OTlkJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzYwNTcxNzBiMWRkMTJmZGY4ZGUwNWYyODFkOGUwNmJiOTFlMTQ5M2E4YjkxZDRjYzVhMjEzODIxMjBhOTU5ZTUnLFxuICAgICAgICAnOWExYWYwYjI2YTZhNDgwN2FkZDlhMmRhZjcxZGYyNjI0NjUxNTJiYzNlZTI0YzY1ZTg5OWJlOTMyMzg1YTJhOCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdhNTc2ZGY4ZTIzYTA4NDExNDIxNDM5YTQ1MThkYTMxODgwY2VmMGZiYTdkNGRmMTJiMWE2OTczZWVjYjk0MjY2JyxcbiAgICAgICAgJzQwYTZiZjIwZTc2NjQwYjJjOTJiOTdhZmU1OGNkODJjNDMyZTEwYTdmNTE0ZDlmM2VlOGJlMTFhZTFiMjhlYzgnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNzc3OGE3OGMyOGRlYzNlMzBhMDVmZTk2MjlkZThjMzhiYjMwZDFmNWNmOWEzYTIwOGY3NjM4ODliZTU4YWQ3MScsXG4gICAgICAgICczNDYyNmQ5YWI1YTViMjJmZjcwOThlMTJmMmZmNTgwMDg3YjM4NDExZmYyNGFjNTYzYjUxM2ZjMWZkOWY0M2FjJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzkyODk1NWVlNjM3YTg0NDYzNzI5ZmQzMGU3YWZkMmVkNWY5NjI3NGU1YWQ3ZTVjYjA5ZWRhOWMwNmQ5MDNhYycsXG4gICAgICAgICdjMjU2MjEwMDNkM2Y0MmE4MjdiNzhhMTMwOTNhOTVlZWFjM2QyNmVmYThhOGQ4M2ZjNTE4MGU5MzViY2QwOTFmJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzg1ZDBmZWYzZWM2ZGIxMDkzOTkwNjRmM2EwZTNiMjg1NTY0NWI0YTkwN2FkMzU0NTI3YWFlNzUxNjNkODI3NTEnLFxuICAgICAgICAnMWYwMzY0ODQxM2EzOGMwYmUyOWQ0OTZlNTgyY2Y1NjYzZTg3NTFlOTY4NzczMzE1ODJjMjM3YTI0ZWIxZjk2MidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdmZjJiMGRjZTk3ZWVjZTk3YzFjOWI2MDQxNzk4Yjg1ZGZkZmI2ZDg4ODJkYTIwMzA4ZjU0MDQ4MjQ1MjYwODdlJyxcbiAgICAgICAgJzQ5M2QxM2ZlZjUyNGJhMTg4YWY0YzRkYzU0ZDA3OTM2YzdiN2VkNmZiOTBlMmNlYjJjOTUxZTAxZjBjMjk5MDcnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnODI3ZmJiZTRiMWU4ODBlYTllZDJiMmU2MzAxYjIxMmI1N2YxZWUxNDhjZDZkZDI4NzgwZTVlMmNmODU2ZTI0MScsXG4gICAgICAgICdjNjBmOWM5MjNjNzI3YjBiNzFiZWYyYzY3ZDFkMTI2ODdmZjdhNjMxODY5MDMxNjZkNjA1YjY4YmFlYzI5M2VjJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2VhYTY0OWYyMWY1MWJkYmFlN2JlNGFlMzRjZTZlNTIxN2E1OGZkY2U3ZjQ3ZjlhYTdmM2I1OGZhMjEyMGUyYjMnLFxuICAgICAgICAnYmUzMjc5ZWQ1YmJiYjAzYWM2OWE4MGY4OTg3OWFhNWEwMWE2Yjk2NWYxM2Y3ZTU5ZDQ3YTUzMDViYTVhZDkzZCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdlNGE0MmQ0M2M1Y2YxNjlkOTM5MWRmNmRlY2Y0MmVlNTQxYjZkOGYwYzlhMTM3NDAxZTIzNjMyZGRhMzRkMjRmJyxcbiAgICAgICAgJzRkOWY5MmU3MTZkMWM3MzUyNmZjOTljY2ZiOGFkMzRjZTg4NmVlZGZhOGQ4ZTRmMTNhN2Y3MTMxZGViYTk0MTQnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMWVjODBmZWYzNjBjYmRkOTU0MTYwZmFkYWIzNTJiNmI5MmI1MzU3NmE4OGZlYTQ5NDcxNzNiOWQ0MzAwYmYxOScsXG4gICAgICAgICdhZWVmZTkzNzU2YjUzNDBkMmYzYTQ5NThhN2FiYmY1ZTAxNDZlNzdmNjI5NWEwN2I2NzFjZGMxY2MxMDdjZWZkJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzE0NmE3NzhjMDQ2NzBjMmY5MWIwMGFmNDY4MGRmYThiY2UzNDkwNzE3ZDU4YmE4ODlkZGI1OTI4MzY2NjQyYmUnLFxuICAgICAgICAnYjMxOGUwZWMzMzU0MDI4YWRkNjY5ODI3ZjlkNGIyODcwYWFhOTcxZDJmN2U1ZWQxZDBiMjk3NDgzZDgzZWZkMCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdmYTUwYzBmNjFkMjJlNWYwN2UzYWNlYmIxYWEwN2IxMjhkMDAxMjIwOWEyOGI5Nzc2ZDc2YTg3OTMxODBlZWY5JyxcbiAgICAgICAgJzZiODRjNjkyMjM5N2ViYTliNzJjZDI4NzIyODFhNjhhNWU2ODMyOTNhNTdhMjEzYjM4Y2Q4ZDdkM2Y0ZjI4MTEnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZGExZDYxZDBjYTcyMWExMWIxYTViZjZiN2Q4OGU4NDIxYTI4OGFiNWQ1YmJhNTIyMGU1M2QzMmI1ZjA2N2VjMicsXG4gICAgICAgICc4MTU3ZjU1YTdjOTkzMDZjNzljMDc2NjE2MWM5MWUyOTY2YTczODk5ZDI3OWI0OGE2NTVmYmEwZjFhZDgzNmYxJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2E4ZTI4MmZmMGM5NzA2OTA3MjE1ZmY5OGU4ZmQ0MTY2MTUzMTFkZTA0NDZmMWUwNjJhNzNiMDYxMGQwNjRlMTMnLFxuICAgICAgICAnN2Y5NzM1NWI4ZGI4MWMwOWFiZmI3ZjNjNWIyNTE1ODg4YjY3OWEzZTUwZGQ2YmQ2Y2VmN2M3MzExMWY0Y2MwYydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICcxNzRhNTNiOWM5YTI4NTg3MmQzOWU1NmU2OTEzY2FiMTVkNTliMWZhNTEyNTA4YzAyMmYzODJkZTgzMTk0OTdjJyxcbiAgICAgICAgJ2NjYzlkYzM3YWJmYzljMTY1N2I0MTU1ZjJjNDdmOWU2NjQ2YjNhMWQ4Y2I5ODU0MzgzZGExM2FjMDc5YWZhNzMnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnOTU5Mzk2OTgxOTQzNzg1YzNkM2U1N2VkZjUwMThjZGJlMDM5ZTczMGU0OTE4YjNkODg0ZmRmZjA5NDc1YjdiYScsXG4gICAgICAgICcyZTdlNTUyODg4YzMzMWRkOGJhMDM4NmE0YjljZDY4NDljNjUzZjY0Yzg3MDkzODVlOWI4YWJmODc1MjRmMmZkJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2QyYTYzYTUwYWU0MDFlNTZkNjQ1YTExNTNiMTA5YThmY2NhMGE0M2Q1NjFmYmEyZGJiNTEzNDBjOWQ4MmIxNTEnLFxuICAgICAgICAnZTgyZDg2ZmI2NDQzZmNiNzU2NWFlZTU4YjI5NDgyMjBhNzBmNzUwYWY0ODRjYTUyZDQxNDIxNzRkY2Y4OTQwNSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc2NDU4N2UyMzM1NDcxZWI4OTBlZTc4OTZkN2NmZGM4NjZiYWNiZGJkMzgzOTMxN2IzNDM2ZjliNDU2MTdlMDczJyxcbiAgICAgICAgJ2Q5OWZjZGQ1YmY2OTAyZTJhZTk2ZGQ2NDQ3YzI5OWExODViOTBhMzkxMzNhZWFiMzU4Mjk5ZTVlOWZhZjY1ODknXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnODQ4MWJkZTBlNGU0ZDg4NWIzYTU0NmQzZTU0OWRlMDQyZjBhYTZjZWEyNTBlN2ZkMzU4ZDZjODZkZDQ1ZTQ1OCcsXG4gICAgICAgICczOGVlN2I4Y2JhNTQwNGRkODRhMjViZjM5Y2VjYjJjYTkwMGE3OWM0MmIyNjJlNTU2ZDY0YjFiNTk3NzkwNTdlJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzEzNDY0YTU3YTc4MTAyYWE2MmI2OTc5YWU4MTdmNDYzN2ZmY2ZlZDNjNGIxY2UzMGJjZDYzMDNmNmNhZjY2NmInLFxuICAgICAgICAnNjliZTE1OTAwNDYxNDU4MGVmN2U0MzM0NTNjY2IwY2E0OGYzMDBhODFkMDk0MmUxM2Y0OTVhOTA3ZjZlY2MyNydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdiYzRhOWRmNWI3MTNmZTJlOWFlZjQzMGJjYzFkYzk3YTBjZDljY2VkZTJmMjg1ODhjYWRhM2EwZDJkODNmMzY2JyxcbiAgICAgICAgJ2QzYTgxY2E2ZTc4NWMwNjM4MzkzN2FkZjRiNzk4Y2FhNmU4YTlmYmZhNTQ3YjE2ZDc1OGQ2NjY1ODFmMzNjMSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc4YzI4YTk3YmY4Mjk4YmMwZDIzZDhjNzQ5NDUyYTMyZTY5NGI2NWUzMGE5NDcyYTM5NTRhYjMwZmU1MzI0Y2FhJyxcbiAgICAgICAgJzQwYTMwNDYzYTMzMDUxOTMzNzhmZWRmMzFmN2NjMGViN2FlNzg0ZjA0NTFjYjk0NTllNzFkYzczY2JlZjk0ODInXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnOGVhOTY2NjEzOTUyN2E4YzFkZDk0Y2U0ZjA3MWZkMjNjOGIzNTBjNWE0YmIzMzc0OGM0YmExMTFmYWNjYWUwJyxcbiAgICAgICAgJzYyMGVmYWJiYzhlZTI3ODJlMjRlN2MwY2ZiOTVjNWQ3MzViNzgzYmU5Y2YwZjhlOTU1YWYzNGEzMGU2MmI5NDUnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZGQzNjI1ZmFlZjViYTA2MDc0NjY5NzE2YmJkMzc4OGQ4OWJkZGU4MTU5NTk5NjgwOTJmNzZjYzRlYjlhOTc4NycsXG4gICAgICAgICc3YTE4OGZhMzUyMGUzMGQ0NjFkYTI1MDEwNDU3MzFjYTk0MTQ2MTk4Mjg4MzM5NTkzN2Y2OGQwMGM2NDRhNTczJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2Y3MTBkNzlkOWViOTYyMjk3ZTRmNjIzMmI0MGU4ZjdmZWIyYmM2MzgxNDYxNGQ2OTJjMTJkZTc1MjQwODIyMWUnLFxuICAgICAgICAnZWE5OGU2NzIzMmQzYjMyOTVkM2I1MzU1MzIxMTVjY2FjODYxMmM3MjE4NTE2MTc1MjZhZTQ3YTljNzdiZmM4MidcbiAgICAgIF1cbiAgICBdXG4gIH0sXG4gIG5hZjoge1xuICAgIHduZDogNyxcbiAgICBwb2ludHM6IFtcbiAgICAgIFtcbiAgICAgICAgJ2Y5MzA4YTAxOTI1OGMzMTA0OTM0NGY4NWY4OWQ1MjI5YjUzMWM4NDU4MzZmOTliMDg2MDFmMTEzYmNlMDM2ZjknLFxuICAgICAgICAnMzg4ZjdiMGY2MzJkZTgxNDBmZTMzN2U2MmEzN2YzNTY2NTAwYTk5OTM0YzIyMzFiNmNiOWZkNzU4NGI4ZTY3MidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICcyZjhiZGU0ZDFhMDcyMDkzNTViNGE3MjUwYTVjNTEyOGU4OGI4NGJkZGM2MTlhYjdjYmE4ZDU2OWIyNDBlZmU0JyxcbiAgICAgICAgJ2Q4YWMyMjI2MzZlNWUzZDZkNGRiYTlkZGE2YzljNDI2Zjc4ODI3MWJhYjBkNjg0MGRjYTg3ZDNhYTZhYzYyZDYnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNWNiZGYwNjQ2ZTVkYjRlYWEzOThmMzY1ZjJlYTdhMGUzZDQxOWI3ZTAzMzBlMzljZTkyYmRkZWRjYWM0ZjliYycsXG4gICAgICAgICc2YWViY2E0MGJhMjU1OTYwYTMxNzhkNmQ4NjFhNTRkYmE4MTNkMGI4MTNmZGU3YjVhNTA4MjYyODA4NzI2NGRhJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2FjZDQ4NGUyZjBjN2Y2NTMwOWFkMTc4YTlmNTU5YWJkZTA5Nzk2OTc0YzU3ZTcxNGMzNWYxMTBkZmMyN2NjYmUnLFxuICAgICAgICAnY2MzMzg5MjFiMGE3ZDlmZDY0MzgwOTcxNzYzYjYxZTlhZGQ4ODhhNDM3NWY4ZTBmMDVjYzI2MmFjNjRmOWMzNydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc3NzRhZTdmODU4YTk0MTFlNWVmNDI0NmI3MGM2NWFhYzU2NDk5ODBiZTVjMTc4OTFiYmVjMTc4OTVkYTAwOGNiJyxcbiAgICAgICAgJ2Q5ODRhMDMyZWI2YjVlMTkwMjQzZGQ1NmQ3YjdiMzY1MzcyZGIxZTJkZmY5ZDZhODMwMWQ3NGM5Yzk1M2M2MWInXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZjI4NzczYzJkOTc1Mjg4YmM3ZDFkMjA1YzM3NDg2NTFiMDc1ZmJjNjYxMGU1OGNkZGVlZGRmOGYxOTQwNWFhOCcsXG4gICAgICAgICdhYjA5MDJlOGQ4ODBhODk3NTgyMTJlYjY1Y2RhZjQ3M2ExYTA2ZGE1MjFmYTkxZjI5YjVjYjUyZGIwM2VkODEnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZDc5MjRkNGY3ZDQzZWE5NjVhNDY1YWUzMDk1ZmY0MTEzMWU1OTQ2ZjNjODVmNzllNDRhZGJjZjhlMjdlMDgwZScsXG4gICAgICAgICc1ODFlMjg3MmE4NmM3MmE2ODM4NDJlYzIyOGNjNmRlZmVhNDBhZjJiZDg5NmQzYTVjNTA0ZGM5ZmY2YTI2YjU4J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2RlZmRlYTRjZGI2Nzc3NTBhNDIwZmVlODA3ZWFjZjIxZWI5ODk4YWU3OWI5NzY4NzY2ZTRmYWEwNGEyZDRhMzQnLFxuICAgICAgICAnNDIxMWFiMDY5NDYzNTE2OGU5OTdiMGVhZDJhOTNkYWVjZWQxZjRhMDRhOTVjMGY2Y2ZiMTk5ZjY5ZTU2ZWI3NydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICcyYjRlYTBhNzk3YTQ0M2QyOTNlZjVjZmY0NDRmNDk3OWYwNmFjZmViZDdlODZkMjc3NDc1NjU2MTM4Mzg1YjZjJyxcbiAgICAgICAgJzg1ZTg5YmMwMzc5NDVkOTNiMzQzMDgzYjVhMWM4NjEzMWEwMWY2MGM1MDI2OTc2M2I1NzBjODU0ZTVjMDliN2EnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMzUyYmJmNGE0Y2RkMTI1NjRmOTNmYTMzMmNlMzMzMzAxZDlhZDQwMjcxZjgxMDcxODEzNDBhZWYyNWJlNTlkNScsXG4gICAgICAgICczMjFlYjQwNzUzNDhmNTM0ZDU5YzE4MjU5ZGRhM2UxZjRhMWIzYjJlNzFiMTAzOWM2N2JkM2Q4YmNmODE5OThjJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzJmYTIxMDRkNmIzOGQxMWIwMjMwMDEwNTU5ODc5MTI0ZTQyYWI4ZGZlZmY1ZmYyOWRjOWNkYWRkNGVjYWNjM2YnLFxuICAgICAgICAnMmRlMTA2ODI5NWRkODY1YjY0NTY5MzM1YmQ1ZGQ4MDE4MWQ3MGVjZmM4ODI2NDg0MjNiYTc2YjUzMmI3ZDY3J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzkyNDgyNzliMDliNGQ2OGRhYjIxYTliMDY2ZWRkYTgzMjYzYzNkODRlMDk1NzJlMjY5Y2EwY2Q3ZjU0NTM3MTQnLFxuICAgICAgICAnNzMwMTZmN2JmMjM0YWFkZTVkMWFhNzFiZGVhMmIxZmYzZmMwZGUyYTg4NzkxMmZmZTU0YTMyY2U5N2NiMzQwMidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdkYWVkNGYyYmUzYThiZjI3OGU3MDEzMmZiMGJlYjc1MjJmNTcwZTE0NGJmNjE1YzA3ZTk5NmQ0NDNkZWU4NzI5JyxcbiAgICAgICAgJ2E2OWRjZTRhN2Q2Yzk4ZThkNGExYWNhODdlZjhkNzAwM2Y4M2MyMzBmM2FmYTcyNmFiNDBlNTIyOTBiZTFjNTUnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnYzQ0ZDEyYzcwNjVkODEyZThhY2YyOGQ3Y2JiMTlmOTAxMWVjZDllOWZkZjI4MWIwZTZhM2I1ZTg3ZDIyZTdkYicsXG4gICAgICAgICcyMTE5YTQ2MGNlMzI2Y2RjNzZjNDU5MjZjOTgyZmRhYzBlMTA2ZTg2MWVkZjYxYzVhMDM5MDYzZjBlMGU2NDgyJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzZhMjQ1YmY2ZGM2OTg1MDRjODlhMjBjZmRlZDYwODUzMTUyYjY5NTMzNmMyODA2M2I2MWM2NWNiZDI2OWU2YjQnLFxuICAgICAgICAnZTAyMmNmNDJjMmJkNGE3MDhiM2Y1MTI2ZjE2YTI0YWQ4YjMzYmE0OGQwNDIzYjZlZmQ1ZTYzNDgxMDBkOGE4MidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICcxNjk3ZmZhNmZkOWRlNjI3YzA3N2UzZDJmZTU0MTA4NGNlMTMzMDBiMGJlYzExNDZmOTVhZTU3ZjBkMGJkNmE1JyxcbiAgICAgICAgJ2I5YzM5OGYxODY4MDZmNWQyNzU2MTUwNmU0NTU3NDMzYTJjZjE1MDA5ZTQ5OGFlN2FkZWU5ZDYzZDAxYjIzOTYnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNjA1YmRiMDE5OTgxNzE4Yjk4NmQwZjA3ZTgzNGNiMGQ5ZGViODM2MGZmYjdmNjFkZjk4MjM0NWVmMjdhNzQ3OScsXG4gICAgICAgICcyOTcyZDJkZTRmOGQyMDY4MWE3OGQ5M2VjOTZmZTIzYzI2YmZhZTg0ZmIxNGRiNDNiMDFlMWU5MDU2YjhjNDknXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNjJkMTRkYWI0MTUwYmY0OTc0MDJmZGM0NWEyMTVlMTBkY2IwMWMzNTQ5NTliMTBjZmUzMWM3ZTlkODdmZjMzZCcsXG4gICAgICAgICc4MGZjMDZiZDhjYzViMDEwOTgwODhhMTk1MGVlZDBkYjAxYWExMzI5NjdhYjQ3MjIzNWY1NjQyNDgzYjI1ZWFmJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzgwYzYwYWQwMDQwZjI3ZGFkZTViNGIwNmM0MDhlNTZiMmM1MGU5ZjU2YjliOGI0MjVlNTU1YzJmODYzMDhiNmYnLFxuICAgICAgICAnMWMzODMwM2YxY2M1YzMwZjI2ZTY2YmFkN2ZlNzJmNzBhNjVlZWQ0Y2JlNzAyNGViMWFhMDFmNTY0MzBiZDU3YSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc3YTkzNzVhZDYxNjdhZDU0YWE3NGM2MzQ4Y2M1NGQzNDRjYzVkYzk0ODdkODQ3MDQ5ZDVlYWJiMGZhMDNjOGZiJyxcbiAgICAgICAgJ2QwZTNmYTllY2E4NzI2OTA5NTU5ZTBkNzkyNjkwNDZiZGM1OWVhMTBjNzBjZTJiMDJkNDk5ZWMyMjRkYzdmNydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdkNTI4ZWNkOWI2OTZiNTRjOTA3YTllZDA0NTQ0N2E3OWJiNDA4ZWMzOWI2OGRmNTA0YmI1MWY0NTliYzNmZmM5JyxcbiAgICAgICAgJ2VlY2Y0MTI1MzEzNmU1Zjk5OTY2ZjIxODgxZmQ2NTZlYmM0MzQ1NDA1YzUyMGRiYzA2MzQ2NWI1MjE0MDk5MzMnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNDkzNzBhNGI1ZjQzNDEyZWEyNWY1MTRlOGVjZGFkMDUyNjYxMTVlNGE3ZWNiMTM4NzIzMTgwOGY4YjQ1OTYzJyxcbiAgICAgICAgJzc1OGYzZjQxYWZkNmVkNDI4YjMwODFiMDUxMmZkNjJhNTRjM2YzYWZiYjViNjc2NGI2NTMwNTJhMTI5NDljOWEnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNzdmMjMwOTM2ZWU4OGNiYmQ3M2RmOTMwZDY0NzAyZWY4ODFkODExZTBlMTQ5OGUyZjFjMTNlYjFmYzM0NWQ3NCcsXG4gICAgICAgICc5NThlZjQyYTc4ODZiNjQwMGEwODI2NmU5YmExYjM3ODk2Yzk1MzMwZDk3MDc3Y2JiZThlYjNjNzY3MWM2MGQ2J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2YyZGFjOTkxY2M0Y2U0YjllYTQ0ODg3ZTVjN2MwYmNlNThjODAwNzRhYjlkNGRiYWViMjg1MzFiNzczOWY1MzAnLFxuICAgICAgICAnZTBkZWRjOWIzYjJmOGRhZDRkYTFmMzJkZWMyNTMxZGY5ZWI1ZmJlYjA1OThlNGZkMWExMTdkYmE3MDNhM2MzNydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc0NjNiM2Q5ZjY2MjYyMWZiMWI0YmU4ZmJiZTI1MjAxMjVhMjE2Y2RmYzlkYWUzZGViY2JhNDg1MGM2OTBkNDViJyxcbiAgICAgICAgJzVlZDQzMGQ3OGMyOTZjMzU0MzExNDMwNmRkODYyMmQ3YzYyMmUyN2M5NzBhMWRlMzFjYjM3N2IwMWFmNzMwN2UnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZjE2ZjgwNDI0NGU0NmUyYTA5MjMyZDRhZmYzYjU5OTc2Yjk4ZmFjMTQzMjhhMmQxYTMyNDk2YjQ5OTk4ZjI0NycsXG4gICAgICAgICdjZWRhYmQ5YjgyMjAzZjdlMTNkMjA2ZmNkZjRlMzNkOTJhNmM1M2MyNmU1Y2NlMjZkNjU3OTk2MmM0ZTMxZGY2J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2NhZjc1NDI3MmRjODQ1NjNiMDM1MmI3YTE0MzExYWY1NWQyNDUzMTVhY2UyN2M2NTM2OWUxNWY3MTUxZDQxZDEnLFxuICAgICAgICAnY2I0NzQ2NjBlZjM1ZjVmMmE0MWI2NDNmYTVlNDYwNTc1ZjRmYTliNzk2MjIzMmE1YzMyZjkwODMxOGEwNDQ3NidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICcyNjAwY2E0YjI4MmNiOTg2Zjg1ZDBmMTcwOTk3OWQ4YjQ0YTA5YzA3Y2I4NmQ3YzEyNDQ5N2JjODZmMDgyMTIwJyxcbiAgICAgICAgJzQxMTliODg3NTNjMTViZDZhNjkzYjAzZmNkZGJiNDVkNWFjNmJlNzRhYjVmMGVmNDRiMGJlOTQ3NWE3ZTRiNDAnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNzYzNWNhNzJkN2U4NDMyYzMzOGVjNTNjZDEyMjIwYmMwMWM0ODY4NWUyNGY3ZGM4YzYwMmE3NzQ2OTk4ZTQzNScsXG4gICAgICAgICc5MWI2NDk2MDk0ODlkNjEzZDFkNWU1OTBmNzhlNmQ3NGVjZmMwNjFkNTcwNDhiYWQ5ZTc2ZjMwMmM1YjljNjEnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNzU0ZTMyMzlmMzI1NTcwY2RiYmY0YTg3ZGVlZThhNjZiN2YyYjMzNDc5ZDQ2OGZiYzFhNTA3NDNiZjU2Y2MxOCcsXG4gICAgICAgICc2NzNmYjg2ZTViZGEzMGZiM2NkMGVkMzA0ZWE0OWEwMjNlZTMzZDAxOTdhNjk1ZDBjNWQ5ODA5M2M1MzY2ODMnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZTNlNmJkMTA3MWExZTk2YWZmNTc4NTljODJkNTcwZjAzMzA4MDA2NjFkMWM5NTJmOWZlMjY5NDY5MWQ5YjllOCcsXG4gICAgICAgICc1OWM5ZTBiYmEzOTRlNzZmNDBjMGFhNTgzNzlhM2NiNmE1YTIyODM5OTNlOTBjNDE2NzAwMmFmNDkyMGUzN2Y1J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzE4NmI0ODNkMDU2YTAzMzgyNmFlNzNkODhmNzMyOTg1YzRjY2IxZjMyYmEzNWY0YjRjYzQ3ZmRjZjA0YWE2ZWInLFxuICAgICAgICAnM2I5NTJkMzJjNjdjZjc3ZTJlMTc0NDZlMjA0MTgwYWIyMWZiODA5MDg5NTEzOGI0YTRhNzk3Zjg2ZTgwODg4YidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdkZjlkNzBhNmI5ODc2Y2U1NDRjOTg1NjFmNGJlNGY3MjU0NDJlNmQyYjczN2Q5YzkxYTgzMjE3MjRjZTA5NjNmJyxcbiAgICAgICAgJzU1ZWIyZGFmZDg0ZDZjY2Q1Zjg2MmI3ODVkYzM5ZDRhYjE1NzIyMjcyMGVmOWRhMjE3YjhjNDVjZjJiYTI0MTcnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNWVkZDVjYzIzYzUxZTg3YTQ5N2NhODE1ZDVkY2UwZjhhYjUyNTU0Zjg0OWVkODk5NWRlNjRjNWYzNGNlNzE0MycsXG4gICAgICAgICdlZmFlOWM4ZGJjMTQxMzA2NjFlOGNlYzAzMGM4OWFkMGMxM2M2NmMwZDE3YTI5MDVjZGM3MDZhYjczOTlhODY4J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzI5MDc5OGMyYjY0NzY4MzBkYTEyZmUwMjI4N2U5ZTc3N2FhM2ZiYTFjMzU1YjE3YTcyMmQzNjJmODQ2MTRmYmEnLFxuICAgICAgICAnZTM4ZGE3NmRjZDQ0MDYyMTk4OGQwMGJjZjc5YWYyNWQ1YjI5YzA5NGRiMmEyMzE0NmQwMDNhZmQ0MTk0M2U3YSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdhZjNjNDIzYTk1ZDlmNWIzMDU0NzU0ZWZhMTUwYWMzOWNkMjk1NTJmZTM2MDI1NzM2MmRmZGVjZWY0MDUzYjQ1JyxcbiAgICAgICAgJ2Y5OGEzZmQ4MzFlYjJiNzQ5YTkzYjBlNmYzNWNmYjQwYzhjZDVhYTY2N2ExNTU4MWJjMmZlZGVkNDk4ZmQ5YzYnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNzY2ZGJiMjRkMTM0ZTc0NWNjY2FhMjhjOTliZjI3NDkwNmJiNjZiMjZkY2Y5OGRmOGQyZmVkNTBkODg0MjQ5YScsXG4gICAgICAgICc3NDRiMTE1MmVhY2JlNWUzOGRjYzg4Nzk4MGRhMzhiODk3NTg0YTY1ZmEwNmNlZGQyYzkyNGY5N2NiYWM1OTk2J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzU5ZGJmNDZmOGM5NDc1OWJhMjEyNzdjMzM3ODRmNDE2NDVmN2I0NGY2YzU5NmE1OGNlOTJlNjY2MTkxYWJlM2UnLFxuICAgICAgICAnYzUzNGFkNDQxNzVmYmMzMDBmNGVhNmNlNjQ4MzA5YTA0MmNlNzM5YTc5MTk3OThjZDg1ZTIxNmM0YTMwN2Y2ZSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdmMTNhZGE5NTEwM2M0NTM3MzA1ZTY5MWU3NGU5YTRhOGRkNjQ3ZTcxMWE5NWU3M2NiNjJkYzYwMThjZmQ4N2I4JyxcbiAgICAgICAgJ2UxMzgxN2I0NGVlMTRkZTY2M2JmNGJjODA4MzQxZjMyNjk0OWUyMWE2YTc1YzI1NzA3Nzg0MTliZGFmNTczM2QnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNzc1NGI0ZmEwZThhY2VkMDZkNDE2N2EyYzU5Y2NhNGNkYTE4NjljMDZlYmFkZmI2NDg4NTUwMDE1YTg4NTIyYycsXG4gICAgICAgICczMGU5M2U4NjRlNjY5ZDgyMjI0Yjk2N2MzMDIwYjhmYThkMWU0ZTM1MGI2Y2JjYzUzN2E0OGI1Nzg0MTE2M2EyJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzk0OGRjYWRmNTk5MGUwNDhhYTM4NzRkNDZhYmVmOWQ3MDE4NThmOTVkZTgwNDFkMmE2ODI4Yzk5ZTIyNjI1MTknLFxuICAgICAgICAnZTQ5MWE0MjUzN2Y2ZTU5N2Q1ZDI4YTMyMjRiMWJjMjVkZjkxNTRlZmJkMmVmMWQyY2JiYTJjYWU1MzQ3ZDU3ZSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc3OTYyNDE0NDUwYzc2YzE2ODljN2I0OGY4MjAyZWMzN2ZiMjI0Y2Y1YWMwYmZhMTU3MDMyOGE4YTNkN2M3N2FiJyxcbiAgICAgICAgJzEwMGI2MTBlYzRmZmI0NzYwZDVjMWZjMTMzZWY2ZjZiMTI1MDdhMDUxZjA0YWM1NzYwYWZhNWIyOWRiODM0MzcnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMzUxNDA4NzgzNDk2NGI1NGIxNWIxNjA2NDRkOTE1NDg1YTE2OTc3MjI1Yjg4NDdiYjBkZDA4NTEzN2VjNDdjYScsXG4gICAgICAgICdlZjBhZmJiMjA1NjIwNTQ0OGUxNjUyYzQ4ZTgxMjdmYzYwMzllNzdjMTVjMjM3OGI3ZTdkMTVhMGRlMjkzMzExJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2QzY2MzMGFkNmI0ODNlNGJjNzljZTJjOWRkOGJjNTQ5OTNlOTQ3ZWI4ZGY3ODdiNDQyOTQzZDNmN2I1MjdlYWYnLFxuICAgICAgICAnOGIzNzhhMjJkODI3Mjc4ZDg5YzVlOWJlOGY5NTA4YWUzYzJhZDQ2MjkwMzU4NjMwYWZiMzRkYjA0ZWVkZTBhNCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICcxNjI0ZDg0NzgwNzMyODYwY2UxYzc4ZmNiZmVmZTA4YjJiMjk4MjNkYjkxM2Y2NDkzOTc1YmEwZmY0ODQ3NjEwJyxcbiAgICAgICAgJzY4NjUxY2Y5YjZkYTkwM2UwOTE0NDQ4YzZjZDlkNGNhODk2ODc4ZjUyODJiZTRjOGNjMDZlMmE0MDQwNzg1NzUnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNzMzY2U4MGRhOTU1YThhMjY5MDJjOTU2MzNlNjJhOTg1MTkyNDc0YjVhZjIwN2RhNmRmN2I0ZmQ1ZmM2MWNkNCcsXG4gICAgICAgICdmNTQzNWEyYmQyYmFkZjdkNDg1YTRkOGI4ZGI5ZmNjZTNlMWVmOGUwMjAxZTQ1NzhjNTQ2NzNiYzFkYzVlYTFkJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzE1ZDk0NDEyNTQ5NDUwNjRjZjFhMWMzM2JiZDNiNDlmODk2NmM1MDkyMTcxZTY5OWVmMjU4ZGZhYjgxYzA0NWMnLFxuICAgICAgICAnZDU2ZWIzMGI2OTQ2M2U3MjM0ZjUxMzdiNzNiODQxNzc0MzQ4MDBiYWNlYmZjNjg1ZmMzN2JiZTllZmU0MDcwZCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdhMWQwZmNmMmVjOWRlNjc1YjYxMjEzNmU1Y2U3MGQyNzFjMjE0MTdjOWQyYjhhYWFhYzEzODU5OWQwNzE3OTQwJyxcbiAgICAgICAgJ2VkZDc3ZjUwYmNiNWEzY2FiMmU5MDczNzMwOTY2N2YyNjQxNDYyYTU0MDcwZjNkNTE5MjEyZDM5YzE5N2E2MjknXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZTIyZmJlMTVjMGFmOGNjYzU3ODBjMDczNWY4NGRiZTlhNzkwYmFkZWU4MjQ1YzA2YzdjYTM3MzMxY2IzNjk4MCcsXG4gICAgICAgICdhODU1YmFiYWQ1Y2Q2MGM4OGI0MzBhNjlmNTNhMWE3YTM4Mjg5MTU0OTY0Nzk5YmU0M2QwNmQ3N2QzMWRhMDYnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMzExMDkxZGQ5ODYwZThlMjBlZTEzNDczYzExNTVmNWY2OTYzNWUzOTQ3MDRlYWE3NDAwOTQ1MjI0NmNmYTliMycsXG4gICAgICAgICc2NmRiNjU2Zjg3ZDFmMDRmZmZkMWYwNDc4OGMwNjgzMDg3MWVjNWE2NGZlZWU2ODViZDgwZjBiMTI4NmQ4Mzc0J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzM0YzFmZDA0ZDMwMWJlODliMzFjMDQ0MmQzZTZhYzI0ODgzOTI4YjQ1YTkzNDA3ODE4NjdkNDIzMmVjMmRiZGYnLFxuICAgICAgICAnOTQxNDY4NWU5N2IxYjU5NTRiZDQ2ZjczMDE3NDEzNmQ1N2YxY2VlYjQ4NzQ0M2RjNTMyMTg1N2JhNzNhYmVlJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2YyMTllYTVkNmI1NDcwMWMxYzE0ZGU1YjU1N2ViNDJhOGQxM2YzYWJiY2QwOGFmZmNjMmE1ZTZiMDQ5YjhkNjMnLFxuICAgICAgICAnNGNiOTU5NTdlODNkNDBiMGY3M2FmNDU0NGNjY2Y2YjFmNGIwOGQzYzA3YjI3ZmI4ZDhjMjk2MmE0MDA3NjZkMSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdkN2I4NzQwZjc0YThmYmFhYjFmNjgzZGI4ZjQ1ZGUyNjU0M2E1NDkwYmNhNjI3MDg3MjM2OTEyNDY5YTBiNDQ4JyxcbiAgICAgICAgJ2ZhNzc5NjgxMjhkOWM5MmVlMTAxMGYzMzdhZDQ3MTdlZmYxNWRiNWVkM2MwNDliMzQxMWUwMzE1ZWFhNDU5M2InXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMzJkMzFjMjIyZjhmNmYwZWY4NmY3Yzk4ZDNhMzMzNWVhZDViY2QzMmFiZGQ5NDI4OWZlNGQzMDkxYWE4MjRiZicsXG4gICAgICAgICc1ZjMwMzJmNTg5MjE1NmUzOWNjZDNkNzkxNWI5ZTFkYTJlNmRhYzllNmYyNmU5NjExMThkMTRiODQ2MmUxNjYxJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzc0NjFmMzcxOTE0YWIzMjY3MTA0NWExNTVkOTgzMWVhODc5M2Q3N2NkNTk1OTJjNDM0MGY4NmNiYzE4MzQ3YjUnLFxuICAgICAgICAnOGVjMGJhMjM4Yjk2YmVjMGNiZGRkY2FlMGFhNDQyNTQyZWVlMWZmNTBjOTg2ZWE2YjM5ODQ3YjNjYzA5MmZmNidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdlZTA3OWFkYjFkZjE4NjAwNzQzNTZhMjVhYTM4MjA2YTZkNzE2YjJjM2U2NzQ1M2QyODc2OThiYWQ3YjJiMmQ2JyxcbiAgICAgICAgJzhkYzI0MTJhYWZlM2JlNWM0YzVmMzdlMGVjYzVmOWY2YTQ0Njk4OWFmMDRjNGUyNWViYWFjNDc5ZWMxYzhjMWUnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMTZlYzkzZTQ0N2VjODNmMDQ2N2IxODMwMmVlNjIwZjdlNjVkZTMzMTg3NGM5ZGM3MmJmZDg2MTZiYTlkYTZiNScsXG4gICAgICAgICc1ZTQ2MzExNTBlNjJmYjQwZDBlOGMyYTdjYTU4MDRhMzlkNTgxODZhNTBlNDk3MTM5NjI2Nzc4ZTI1YjA2NzRkJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2VhYTVmOTgwYzI0NWY2ZjAzODk3ODI5MGFmYTcwYjZiZDg4NTU4OTdmOThiNmFhNDg1Yjk2MDY1ZDUzN2JkOTknLFxuICAgICAgICAnZjY1ZjVkM2UyOTJjMmUwODE5YTUyODM5MWM5OTQ2MjRkNzg0ODY5ZDdlNmVhNjdmYjE4MDQxMDI0ZWRjMDdkYydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc3OGM5NDA3NTQ0YWMxMzI2OTJlZTE5MTBhMDI0Mzk5NThhZTA0ODc3MTUxMzQyZWE5NmM0YjZiMzVhNDlmNTEnLFxuICAgICAgICAnZjNlMDMxOTE2OWViOWI4NWQ1NDA0Nzk1NTM5YTVlNjhmYTFmYmQ1ODNjMDY0ZDI0NjJiNjc1ZjE5NGEzZGRiNCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc0OTRmNGJlMjE5YTFhNzcwMTZkY2Q4Mzg0MzFhZWEwMDAxY2RjOGFlN2E2ZmM2ODg3MjY1NzhkOTcwMjg1N2E1JyxcbiAgICAgICAgJzQyMjQyYTk2OTI4M2E1ZjMzOWJhN2YwNzVlMzZiYTJhZjkyNWNlMzBkNzY3ZWQ2ZTU1ZjRiMDMxODgwZDU2MmMnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnYTU5OGE4MDMwZGE2ZDg2YzZiYzdmMmY1MTQ0ZWE1NDlkMjgyMTFlYTU4ZmFhNzBlYmY0YzFlNjY1YzFmZTliNScsXG4gICAgICAgICcyMDRiNWQ2Zjg0ODIyYzMwN2U0YjRhNzE0MDczN2FlYzIzZmM2M2I2NWIzNWY4NmExMDAyNmRiZDJkODY0ZTZiJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2M0MTkxNjM2NWFiYjJiNWQwOTE5MmY1ZjJkYmVhZmVjMjA4ZjAyMGYxMjU3MGExODRkYmFkYzNlNTg1OTU5OTcnLFxuICAgICAgICAnNGYxNDM1MWQwMDg3ZWZhNDlkMjQ1YjMyODk4NDk4OWQ1Y2FmOTQ1MGYzNGJmYzBlZDE2ZTk2YjU4ZmE5OTEzJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzg0MWQ2MDYzYTU4NmZhNDc1YTcyNDYwNGRhMDNiYzViOTJhMmUwZDJlMGEzNmFjZmU0YzczYTU1MTQ3NDI4ODEnLFxuICAgICAgICAnNzM4NjdmNTljMDY1OWU4MTkwNGY5YTFjNzU0MzY5OGU2MjU2MmQ2NzQ0YzE2OWNlN2EzNmRlMDFhOGQ2MTU0J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzVlOTViYjM5OWE2OTcxZDM3NjAyNjk0N2Y4OWJkZTJmMjgyYjMzODEwOTI4YmU0ZGVkMTEyYWM0ZDcwZTIwZDUnLFxuICAgICAgICAnMzlmMjNmMzY2ODA5MDg1YmVlYmZjNzExODEzMTM3NzVhOTljOWFlZDdkOGJhMzhiMTYxMzg0Yzc0NjAxMjg2NSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICczNmU0NjQxYTUzOTQ4ZmQ0NzZjMzlmOGE5OWZkOTc0ZTVlYzA3NTY0YjUzMTVkOGJmOTk0NzFiY2EwZWYyZjY2JyxcbiAgICAgICAgJ2QyNDI0YjFiMWFiZTRlYjgxNjQyMjdiMDg1YzlhYTk0NTZlYTEzNDkzZmQ1NjNlMDZmZDUxY2Y1Njk0Yzc4ZmMnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMzM2NTgxZWE3YmZiYmIyOTBjMTkxYTJmNTA3YTQxY2Y1NjQzODQyMTcwZTkxNGZhZWFiMjdjMmM1NzlmNzI2JyxcbiAgICAgICAgJ2VhZDEyMTY4NTk1ZmUxYmU5OTI1MjEyOWI2ZTU2YjMzOTFmN2FiMTQxMGNkMWUwZWYzZGNkY2FiZDJmZGEyMjQnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnOGFiODk4MTZkYWRmZDZiNmExZjI2MzRmY2YwMGVjODQwMzc4MTAyNWVkNjg5MGM0ODQ5NzQyNzA2YmQ0M2VkZScsXG4gICAgICAgICc2ZmRjZWYwOWYyZjZkMGEwNDRlNjU0YWVmNjI0MTM2ZjUwM2Q0NTljM2U4OTg0NTg1OGE0N2E5MTI5Y2RkMjRlJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzFlMzNmMWE3NDZjOWM1Nzc4MTMzMzQ0ZDkyOTlmY2FhMjBiMDkzOGU4YWNmZjI1NDRiYjQwMjg0YjhjNWZiOTQnLFxuICAgICAgICAnNjA2NjAyNTdkZDExYjNhYTljOGVkNjE4ZDI0ZWRmZjIzMDZkMzIwZjFkMDMwMTBlMzNhN2QyMDU3ZjNiM2I2J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzg1YjdjMWRjYjNjZWMxYjdlZTdmMzBkZWQ3OWRkMjBhMGVkMWY0Y2MxOGNiY2ZjZmE0MTAzNjFmZDhmMDhmMzEnLFxuICAgICAgICAnM2Q5OGE5Y2RkMDI2ZGQ0M2YzOTA0OGYyNWE4ODQ3ZjRmY2FmYWQxODk1ZDdhNjMzYzZmZWQzYzM1ZTk5OTUxMSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICcyOWRmOWZiZDhkOWU0NjUwOTI3NWY0YjEyNWQ2ZDQ1ZDdmYmU5YTNiODc4YTdhZjg3MmEyODAwNjYxYWM1ZjUxJyxcbiAgICAgICAgJ2I0YzRmZTk5Yzc3NWE2MDZlMmQ4ODYyMTc5MTM5ZmZkYTYxZGM4NjFjMDE5ZTU1Y2QyODc2ZWIyYTI3ZDg0YidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdhMGIxY2FlMDZiMGE4NDdhM2ZlYTZlNjcxYWFmOGFkZmRmZTU4Y2EyZjc2ODEwNWM4MDgyYjJlNDQ5ZmNlMjUyJyxcbiAgICAgICAgJ2FlNDM0MTAyZWRkZTA5NThlYzRiMTlkOTE3YTZhMjhlNmI3MmRhMTgzNGFmZjBlNjUwZjA0OTUwM2EyOTZjZjInXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNGU4Y2VhZmI5YjNlOWExMzZkYzdmZjY3ZTg0MDI5NWI0OTlkZmIzYjIxMzNlNGJhMTEzZjJlNGMwZTEyMWU1JyxcbiAgICAgICAgJ2NmMjE3NDExOGM4YjZkN2E0YjQ4ZjZkNTM0Y2U1Yzc5NDIyYzA4NmE2MzQ2MDUwMmI4MjdjZTYyYTMyNjY4M2MnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZDI0YTQ0ZTA0N2UxOWI2ZjVhZmI4MWM3Y2EyZjY5MDgwYTUwNzY2ODlhMDEwOTE5ZjQyNzI1YzJiNzg5YTMzYicsXG4gICAgICAgICc2ZmI4ZDU1OTFiNDY2ZjhmYzYzZGI1MGYxYzBmMWM2OTAxM2Y5OTY4ODdiODI0NGQyY2RlYzQxN2FmZWE4ZmEzJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2VhMDE2MDZhN2E2YzljZGQyNDlmZGZjZmFjYjk5NTg0MDAxZWRkMjhhYmJhYjc3YjUxMDRlOThlOGUzYjM1ZDQnLFxuICAgICAgICAnMzIyYWY0OTA4YzczMTJiMGNmYmZlMzY5ZjdhN2IzY2RiN2Q0NDk0YmMyODIzNzAwY2ZkNjUyMTg4YTNlYTk4ZCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdhZjhhZGRiZjJiNjYxYzhhNmM2MzI4NjU1ZWI5NjY1MTI1MjAwN2Q4YzVlYTMxYmU0YWQxOTZkZThjZTIxMzFmJyxcbiAgICAgICAgJzY3NDllNjdjMDI5Yjg1ZjUyYTAzNGVhZmQwOTY4MzZiMjUyMDgxODY4MGUyNmFjOGYzZGZiY2RiNzE3NDk3MDAnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZTNhZTE5NzQ1NjZjYTA2Y2M1MTZkNDdlMGZiMTY1YTY3NGEzZGFiY2ZjYTE1ZTcyMmYwZTM0NTBmNDU4ODknLFxuICAgICAgICAnMmFlYWJlN2U0NTMxNTEwMTE2MjE3ZjA3YmY0ZDA3MzAwZGU5N2U0ODc0ZjgxZjUzMzQyMGE3MmVlYjBiZDZhNCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc1OTFlZTM1NTMxM2Q5OTcyMWNmNjk5M2ZmZWQxZTNlMzAxOTkzZmYzZWQyNTg4MDIwNzVlYThjZWQzOTdlMjQ2JyxcbiAgICAgICAgJ2IwZWE1NThhMTEzYzMwYmVhNjBmYzQ3NzU0NjBjNzkwMWZmMGIwNTNkMjVjYTJiZGVlZTk4ZjFhNGJlNWQxOTYnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMTEzOTZkNTVmZGE1NGM0OWYxOWFhOTczMThkOGRhNjFmYTg1ODRlNDdiMDg0OTQ1MDc3Y2YwMzI1NWI1Mjk4NCcsXG4gICAgICAgICc5OThjNzRhOGNkNDVhYzAxMjg5ZDU4MzNhN2JlYjQ3NDRmZjUzNmIwMWIyNTdiZTRjNTc2N2JlYTkzZWE1N2E0J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzNjNWQyYTFiYTM5YzVhMTc5MDAwMDczOGM5ZTBjNDBiOGRjZGZkNTQ2ODc1NGI2NDA1NTQwMTU3ZTAxN2FhN2EnLFxuICAgICAgICAnYjIyODQyNzk5OTVhMzRlMmY5ZDRkZTczOTZmYzE4YjgwZjliOGI5ZmRkMjcwZjY2NjFmNzljYTRjODFiZDI1NydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdjYzg3MDRiOGE2MGEwZGVmYTNhOTlhNzI5OWYyZTljM2ZiYzM5NWFmYjA0YWMwNzg0MjVlZjhhMTc5M2NjMDMwJyxcbiAgICAgICAgJ2JkZDQ2MDM5ZmVlZDE3ODgxZDFlMDg2MmRiMzQ3ZjhjZjM5NWI3NGZjNGJjZGM0ZTk0MGI3NGUzYWMxZjFiMTMnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnYzUzM2U0ZjdlYTg1NTVhYWNkOTc3N2FjNWNhZDI5Yjk3ZGQ0ZGVmY2NjNTNlZTdlYTIwNDExOWIyODg5YjE5NycsXG4gICAgICAgICc2ZjBhMjU2YmM1ZWZkZjQyOWEyZmI2MjQyZjFhNDNhMmQ5YjkyNWJiNGE0YjNhMjZiYjhlMGY0NWViNTk2MDk2J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2MxNGY4ZjJjY2IyN2Q2ZjEwOWY2ZDA4ZDAzY2M5NmE2OWJhOGMzNGVlYzA3YmJjZjU2NmQ0OGUzM2RhNjU5MycsXG4gICAgICAgICdjMzU5ZDY5MjNiYjM5OGY3ZmQ0NDczZTE2ZmUxYzI4NDc1Yjc0MGRkMDk4MDc1ZTZjMGU4NjQ5MTEzZGMzYTM4J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2E2Y2JjMzA0NmJjNmE0NTBiYWMyNDc4OWZhMTcxMTVhNGM5NzM5ZWQ3NWY4ZjIxY2U0NDFmNzJlMGI5MGU2ZWYnLFxuICAgICAgICAnMjFhZTdmNDY4MGU4ODliYjEzMDYxOWUyYzBmOTVhMzYwY2ViNTczYzcwNjAzMTM5ODYyYWZkNjE3ZmE5YjlmJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzM0N2Q2ZDlhMDJjNDg5MjdlYmZiODZjMTM1OWIxY2FmMTMwYTNjMDI2N2QxMWNlNjM0NGIzOWY5OWQ0M2NjMzgnLFxuICAgICAgICAnNjBlYTdmNjFhMzUzNTI0ZDFjOTg3ZjZlY2VjOTJmMDg2ZDU2NWFiNjg3ODcwY2IxMjY4OWZmMWUzMWM3NDQ0OCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdkYTY1NDVkMjE4MWRiOGQ5ODNmN2RjYjM3NWVmNTg2NmQ0N2M2N2IxYmYzMWM4Y2Y4NTVlZjc0MzdiNzI2NTZhJyxcbiAgICAgICAgJzQ5Yjk2NzE1YWI2ODc4YTc5ZTc4ZjA3Y2U1NjgwYzVkNjY3MzA1MWI0OTM1YmQ4OTdmZWE4MjRiNzdkYzIwOGEnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnYzQwNzQ3Y2M5ZDAxMmNiMWExM2I4MTQ4MzA5YzZkZTdlYzI1ZDY5NDVkNjU3MTQ2YjlkNTk5NGI4ZmViMTExMScsXG4gICAgICAgICc1Y2E1NjA3NTNiZTJhMTJmYzZkZTZjYWYyY2I0ODk1NjVkYjkzNjE1NmI5NTE0ZTFiYjVlODMwMzdlMGZhMmQ0J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzRlNDJjOGVjODJjOTk3OThjY2YzYTYxMGJlODcwZTc4MzM4YzdmNzEzMzQ4YmQzNGM4MjAzZWY0MDM3ZjM1MDInLFxuICAgICAgICAnNzU3MWQ3NGVlNWUwZmI5MmE3YThiMzNhMDc3ODMzNDFhNTQ5MjE0NGNjNTRiY2M0MGE5NDQ3MzY5MzYwNjQzNydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICczNzc1YWI3MDg5YmM2YWY4MjNhYmEyZTFhZjcwYjIzNmQyNTFjYWRiMGM4Njc0MzI4NzUyMmExYjNiMGRlZGVhJyxcbiAgICAgICAgJ2JlNTJkMTA3YmNmYTA5ZDhiY2I5NzM2YTgyOGNmYTdmYWM4ZGIxN2JmN2E3NmEyYzQyYWQ5NjE0MDkwMThjZjcnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnY2VlMzFjYmY3ZTM0ZWMzNzlkOTRmYjgxNGQzZDc3NWFkOTU0NTk1ZDEzMTRiYTg4NDY5NTllM2U4MmY3NGUyNicsXG4gICAgICAgICc4ZmQ2NGExNGMwNmI1ODljMjZiOTQ3YWUyYmNmNmJmYTAxNDllZjBiZTE0ZWQ0ZDgwZjQ0OGEwMWM0M2IxYzZkJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2I0ZjllYWVhMDliNjkxNzYxOWY2ZWE2YTRlYjU0NjRlZmRkYjU4ZmQ0NWIxZWJlZmNkYzFhMDFkMDhiNDc5ODYnLFxuICAgICAgICAnMzllNWM5OTI1YjVhNTRiMDc0MzNhNGYxOGM2MTcyNmY4YmIxMzFjMDEyY2E1NDJlYjI0YThhYzA3MjAwNjgyYSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdkNDI2M2RmYzNkMmRmOTIzYTAxNzlhNDg5NjZkMzBjZTg0ZTI1MTVhZmMzZGNjYzFiNzc5MDc3OTJlYmNjNjBlJyxcbiAgICAgICAgJzYyZGZhZjA3YTBmNzhmZWIzMGUzMGQ2Mjk1ODUzY2UxODllMTI3NzYwYWQ2Y2Y3ZmFlMTY0ZTEyMmEyMDhkNTQnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNDg0NTc1MjQ4MjBmYTY1YTRmOGQzNWViNjkzMDg1N2MwMDMyYWNjMGE0YTJkZTQyMjIzM2VlZGE4OTc2MTJjNCcsXG4gICAgICAgICcyNWE3NDhhYjM2Nzk3OWQ5ODczM2MzOGExZmExYzJlN2RjNmNjMDdkYjJkNjBhOWFlN2E3NmFhYTQ5YmQwZjc3J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2RmZWVlZjE4ODExMDFmMmNiMTE2NDRmM2EyYWZkZmMyMDQ1ZTE5OTE5MTUyOTIzZjM2N2ExNzY3YzExY2NlZGEnLFxuICAgICAgICAnZWNmYjcwNTZjZjFkZTA0MmY5NDIwYmFiMzk2NzkzYzBjMzkwYmRlNzRiNGJiZGZmMTZhODNhZTA5YTlhNzUxNydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc2ZDdlZjZiMTc1NDNmODM3M2M1NzNmNDRlMWYzODk4MzVkODliY2JjNjA2MmNlZDM2YzgyZGY4M2I4ZmFlODU5JyxcbiAgICAgICAgJ2NkNDUwZWMzMzU0Mzg5ODZkZmVmYTEwYzU3ZmVhOWJjYzUyMWEwOTU5YjJkODBiYmY3NGIxOTBkY2E3MTJkMTAnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZTc1NjA1ZDU5MTAyYTVhMjY4NDUwMGQzYjk5MWYyZTNmM2M4OGI5MzIyNTU0NzAzNWFmMjVhZjY2ZTA0NTQxZicsXG4gICAgICAgICdmNWM1NDc1NGE4ZjcxZWU1NDBiOWI0ODcyODQ3M2UzMTRmNzI5YWM1MzA4YjA2OTM4MzYwOTkwZTJiZmFkMTI1J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2ViOTg2NjBmNGM0ZGZhYTA2YTJiZTQ1M2Q1MDIwYmM5OWEwYzJlNjBhYmUzODg0NTdkZDQzZmVmYjFlZDYyMGMnLFxuICAgICAgICAnNmNiOWE4ODc2ZDljYjg1MjA2MDlhZjNhZGQyNmNkMjBhMGE3Y2Q4YTk0MTExMzFjZTg1ZjQ0MTAwMDk5MjIzZSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICcxM2U4N2IwMjdkODUxNGQzNTkzOWYyZTY4OTJiMTk5MjIxNTQ1OTY5NDE4ODgzMzZkYzM1NjNlM2I4ZGJhOTQyJyxcbiAgICAgICAgJ2ZlZjVhM2M2ODA1OWE2ZGVjNWQ2MjQxMTRiZjFlOTFhYWMyYjlkYTU2OGQ2YWJlYjI1NzBkNTU2NDZiOGFkZjEnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZWUxNjMwMjZlOWZkNmZlMDE3YzM4ZjA2YTViZTZmYzEyNTQyNGIzNzFjZTI3MDhlN2JmNDQ5MTY5MWU1NzY0YScsXG4gICAgICAgICcxYWNiMjUwZjI1NWRkNjFjNDNkOTRjY2M2NzBkMGY1OGY0OWFlM2ZhMTViOTY2MjNlNTQzMGRhMGFkNmM2MmIyJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2IyNjhmNWVmOWFkNTFlNGQ3OGRlM2E3NTBjMmRjODliMWU2MjZkNDM1MDU4Njc5OTk5MzJlNWRiMzNhZjNkODAnLFxuICAgICAgICAnNWYzMTBkNGIzYzk5YjllYmIxOWY3N2Q0MWMxZGVlMDE4Y2YwZDM0ZmQ0MTkxNjE0MDAzZTk0NWExMjE2ZTQyMydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdmZjA3ZjMxMThhOWRmMDM1ZTlmYWQ4NWViNmM3YmZlNDJiMDJmMDFjYTk5Y2VlYTNiZjdmZmRiYTkzYzQ3NTBkJyxcbiAgICAgICAgJzQzODEzNmQ2MDNlODU4YTNhNWM0NDBjMzhlY2NiYWRkYzFkMjk0MjExNGUyZWRkZDQ3NDBkMDk4Y2VkMWYwZDgnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnOGQ4Yjk4NTVjN2MwNTJhMzQxNDZmZDIwZmZiNjU4YmVhNGI5ZjY5ZTBkODI1ZWJlYzE2ZThjM2NlMmI1MjZhMScsXG4gICAgICAgICdjZGI1NTllZWRjMmQ3OWY5MjZiYWY0NGZiODRlYTRkNDRiY2Y1MGZlZTUxZDdjZWIzMGUyZTdmNDYzMDM2NzU4J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzUyZGIwYjUzODRkZmJmMDViZmE5ZDQ3MmQ3YWUyNmRmZTRiODUxY2VjYTkxYjFlYmE1NDI2MzE4MGRhMzJiNjMnLFxuICAgICAgICAnYzNiOTk3ZDA1MGVlNWQ0MjNlYmFmNjZhNmRiOWY1N2IzMTgwYzkwMjg3NTY3OWRlOTI0YjY5ZDg0YTdiMzc1J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2U2MmY5NDkwZDNkNTFkYTYzOTVlZmQyNGU4MDkxOWNjN2QwZjI5YzNmM2ZhNDhjNmZmZjU0M2JlY2JkNDMzNTInLFxuICAgICAgICAnNmQ4OWFkN2JhNDg3NmIwYjIyYzJjYTI4MGM2ODI4NjJmMzQyYzg1OTFmMWRhZjUxNzBlMDdiZmQ5Y2NhZmE3ZCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc3ZjMwZWEyNDc2YjM5OWI0OTU3NTA5Yzg4Zjc3ZDAxOTFhZmEyZmY1Y2I3YjE0ZmQ2ZDhlN2Q2NWFhYWIxMTkzJyxcbiAgICAgICAgJ2NhNWVmN2Q0YjIzMWM5NGMzYjE1Mzg5YTVmNjMxMWU5ZGFmZjdiYjY3YjEwM2U5ODgwZWY0YmZmNjM3YWNhZWMnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNTA5OGZmMWUxZDlmMTRmYjQ2YTIxMGZhZGE2YzkwM2ZlZjBmYjdiNGExZGQxZDlhYzYwYTAzNjE4MDBiN2EwMCcsXG4gICAgICAgICc5NzMxMTQxZDgxZmM4ZjgwODRkMzdjNmU3NTQyMDA2YjNlZTFiNDBkNjBkZmU1MzYyYTViMTMyZmQxN2RkYzAnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMzJiNzhjN2RlOWVlNTEyYTcyODk1YmU2YjljYmVmYTZlMmYzYzRjY2NlNDQ1Yzk2YjlmMmM4MWUyNzc4YWQ1OCcsXG4gICAgICAgICdlZTE4NDlmNTEzZGY3MWUzMmVmYzM4OTZlZTI4MjYwYzczYmI4MDU0N2FlMjI3NWJhNDk3MjM3Nzk0Yzg3NTNjJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2UyY2I3NGZkZGM4ZTlmYmNkMDc2ZWVmMmE3YzcyYjBjZTM3ZDUwZjA4MjY5ZGZjMDc0YjU4MTU1MDU0N2E0ZjcnLFxuICAgICAgICAnZDNhYTJlZDcxYzlkZDIyNDdhNjJkZjA2MjczNmViMGJhZGRlYTllMzYxMjJkMmJlODY0MWFiY2IwMDVjYzRhNCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc4NDM4NDQ3NTY2ZDRkN2JlZGFkYzI5OTQ5NmFiMzU3NDI2MDA5YTM1ZjIzNWNiMTQxYmUwZDk5Y2QxMGFlM2E4JyxcbiAgICAgICAgJ2M0ZTEwMjA5MTY5ODBhNGRhNWQwMWFjNWU2YWQzMzA3MzRlZjBkNzkwNjYzMWM0ZjIzOTA0MjZiMmVkZDc5MWYnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNDE2MmQ0ODhiODk0MDIwMzliNTg0YzZmYzZjMzA4ODcwNTg3ZDljNDZmNjYwYjg3OGFiNjVjODJjNzExZDY3ZScsXG4gICAgICAgICc2NzE2M2U5MDMyMzYyODlmNzc2ZjIyYzI1ZmI4YTNhZmMxNzMyZjJiODRiNGU5NWRiZGE0N2FlNWEwODUyNjQ5J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzNmYWQzZmE4NGNhZjBmMzRmMGY4OWJmZDJkY2Y1NGZjMTc1ZDc2N2FlYzNlNTA2ODRmM2JhNGE0YmY1ZjY4M2QnLFxuICAgICAgICAnY2QxYmM3Y2I2Y2M0MDdiYjJmMGNhNjQ3YzcxOGE3MzBjZjcxODcyZTdkMGQyYTUzZmEyMGVmY2RmZTYxODI2J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzY3NGYyNjAwYTMwMDdhMDA1NjhjMWE3Y2UwNWQwODE2YzFmYjg0YmYxMzcwNzk4ZjFjNjk1MzJmYWViMWE4NmInLFxuICAgICAgICAnMjk5ZDIxZjk0MTNmMzNiM2VkZjQzYjI1NzAwNDU4MGI3MGRiNTdkYTBiMTgyMjU5ZTA5ZWVjYzY5ZTBkMzhhNSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdkMzJmNGRhNTRhZGU3NGFiYjgxYjgxNWFkMWZiM2IyNjNkODJkNmM2OTI3MTRiY2ZmODdkMjliZDVlZTlmMDhmJyxcbiAgICAgICAgJ2Y5NDI5ZTczOGI4ZTUzYjk2OGU5OTAxNmMwNTk3MDc3ODJlMTRmNDUzNTM1OWQ1ODJmYzQxNjkxMGIzZWVhODcnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMzBlNGU2NzA0MzUzODU1NTZlNTkzNjU3MTM1ODQ1ZDM2ZmJiNjkzMWY3MmIwOGNiMWVkOTU0ZjFlM2NlM2ZmNicsXG4gICAgICAgICc0NjJmOWJjZTYxOTg5ODYzODQ5OTM1MDExM2JiYzliMTBhODc4ZDM1ZGE3MDc0MGRjNjk1YTU1OWViODhkYjdiJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2JlMjA2MjAwM2M1MWNjMzAwNDY4MjkwNDMzMGU0ZGVlN2YzZGNkMTBiMDFlNTgwYmYxOTcxYjA0ZDRjYWQyOTcnLFxuICAgICAgICAnNjIxODhiYzQ5ZDYxZTU0Mjg1NzNkNDhhNzRlMWM2NTViMWM2MTA5MDkwNTY4MmEwZDU1NThlZDcyZGNjYjliYydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc5MzE0NDQyM2FjZTM0NTFlZDI5ZTBmYjlhYzJhZjIxMWNiNmU4NGE2MDFkZjU5OTNjNDE5ODU5ZmZmNWRmMDRhJyxcbiAgICAgICAgJzdjMTBkZmIxNjRjMzQyNWY1YzcxYTNmOWQ3OTkyMDM4ZjEwNjUyMjRmNzJiYjlkMWQ5MDJhNmQxMzAzN2I0N2MnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnYjAxNWY4MDQ0ZjVmY2JkY2YyMWNhMjZkNmMzNGZiODE5NzgyOTIwNWM3YjdkMmE3Y2I2NjQxOGMxNTdiMTEyYycsXG4gICAgICAgICdhYjhjMWUwODZkMDRlODEzNzQ0YTY1NWIyZGY4ZDVmODNiM2NkYzZmYWEzMDg4YzFkM2FlYTE0NTRlM2ExZDVmJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2Q1ZTllMWRhNjQ5ZDk3ZDg5ZTQ4NjgxMTdhNDY1YTNhNGY4YTE4ZGU1N2ExNDBkMzZiM2YyYWYzNDFhMjFiNTInLFxuICAgICAgICAnNGNiMDQ0MzdmMzkxZWQ3MzExMWExM2NjMWQ0ZGQwZGIxNjkzNDY1YzIyNDA0ODBkODk1NWU4NTkyZjI3NDQ3YSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdkM2FlNDEwNDdkZDdjYTA2NWRiZjhlZDc3Yjk5MjQzOTk4MzAwNWNkNzJlMTZkNmY5OTZhNTMxNmQzNjk2NmJiJyxcbiAgICAgICAgJ2JkMWFlYjIxYWQyMmViYjIyYTEwZjAzMDM0MTdjNmQ5NjRmOGNkZDdkZjBhY2E2MTRiMTBkYzE0ZDEyNWFjNDYnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNDYzZTI3NjNkODg1Zjk1OGZjNjZjZGQyMjgwMGYwYTQ4NzE5N2QwYTgyZTM3N2I0OWY4MGFmODdjODk3YjA2NScsXG4gICAgICAgICdiZmVmYWNkYjBlNWQwZmQ3ZGYzYTMxMWE5NGRlMDYyYjI2YjgwYzYxZmJjOTc1MDhiNzk5OTI2NzFlZjdjYTdmJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzc5ODVmZGZkMTI3YzA1NjdjNmY1M2VjMWJiNjNlYzMxNThlNTk3YzQwYmZlNzQ3YzgzY2RkZmM5MTA2NDE5MTcnLFxuICAgICAgICAnNjAzYzEyZGFmM2Q5ODYyZWYyYjI1ZmUxZGUyODlhZWQyNGVkMjkxZTBlYzY3MDg3MDNhNWJkNTY3ZjMyZWQwMydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc3NGExYWQ2YjVmNzZlMzlkYjJkZDI0OTQxMGVhYzdmOTllNzRjNTljYjgzZDJkMGVkNWZmMTU0M2RhNzcwM2U5JyxcbiAgICAgICAgJ2NjNjE1N2VmMThjOWM2M2NkNjE5M2Q4MzYzMWJiZWEwMDkzZTA5Njg5NDJlOGMzM2Q1NzM3ZmQ3OTBlMGRiMDgnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMzA2ODJhNTA3MDMzNzVmNjAyZDQxNjY2NGJhMTliN2ZjOWJhYjQyYzcyNzQ3NDYzYTcxZDA4OTZiMjJmNmRhMycsXG4gICAgICAgICc1NTNlMDRmNmIwMThiNGZhNmM4ZjM5ZTdmMzExZDMxNzYyOTBkMGUwZjE5Y2E3M2YxNzcxNGQ5OTc3YTIyZmY4J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzllMjE1OGYwZDdjMGQ1ZjI2YzM3OTFlZmVmYTc5NTk3NjU0ZTdhMmIyNDY0ZjUyYjFlZTZjMTM0Nzc2OWVmNTcnLFxuICAgICAgICAnNzEyZmNkZDFiOTA1M2YwOTAwM2EzNDgxZmE3NzYyZTlmZmQ3YzhlZjM1YTM4NTA5ZTJmYmYyNjI5MDA4MzczJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzE3NmUyNjk4OWE0M2M5Y2ZlYmE0MDI5YzIwMjUzOGMyODE3MmU1NjZlM2M0ZmNlNzMyMjg1N2YzYmUzMjdkNjYnLFxuICAgICAgICAnZWQ4Y2M5ZDA0YjI5ZWI4NzdkMjcwYjQ4NzhkYzQzYzE5YWVmZDMxZjRlZWUwOWVlN2I0NzgzNGMxZmE0YjFjMydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc3NWQ0NmVmZWEzNzcxZTZlNjhhYmI4OWExM2FkNzQ3ZWNmMTg5MjM5M2RmYzRmMWI3MDA0Nzg4YzUwMzc0ZGE4JyxcbiAgICAgICAgJzk4NTIzOTBhOTk1MDc2NzlmZDBiODZmZDJiMzlhODY4ZDdlZmMyMjE1MTM0NmUxYTNjYTQ3MjY1ODZhNmJlZDgnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnODA5YTIwYzY3ZDY0OTAwZmZiNjk4YzRjODI1ZjZkNWYyMzEwZmIwNDUxYzg2OTM0NWI3MzE5ZjY0NTYwNTcyMScsXG4gICAgICAgICc5ZTk5NDk4MGQ5OTE3ZTIyYjc2YjA2MTkyN2ZhMDQxNDNkMDk2Y2NjNTQ5NjNlNmE1ZWJmYTVmM2Y4ZTI4NmMxJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzFiMzg5MDNhNDNmN2YxMTRlZDQ1MDBiNGVhYzcwODNmZGVmZWNlMWNmMjljNjM1MjhkNTYzNDQ2Zjk3MmMxODAnLFxuICAgICAgICAnNDAzNmVkYzkzMWE2MGFlODg5MzUzZjc3ZmQ1M2RlNGEyNzA4YjI2YjZmNWRhNzJhZDMzOTQxMTlkYWY0MDhmOSdcbiAgICAgIF1cbiAgICBdXG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBCTiA9IHJlcXVpcmUoJ2JuLmpzJyk7XG52YXIgSG1hY0RSQkcgPSByZXF1aXJlKCdobWFjLWRyYmcnKTtcbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG52YXIgY3VydmVzID0gcmVxdWlyZSgnLi4vY3VydmVzJyk7XG52YXIgcmFuZCA9IHJlcXVpcmUoJ2Jyb3JhbmQnKTtcbnZhciBhc3NlcnQgPSB1dGlscy5hc3NlcnQ7XG5cbnZhciBLZXlQYWlyID0gcmVxdWlyZSgnLi9rZXknKTtcbnZhciBTaWduYXR1cmUgPSByZXF1aXJlKCcuL3NpZ25hdHVyZScpO1xuXG5mdW5jdGlvbiBFQyhvcHRpb25zKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBFQykpXG4gICAgcmV0dXJuIG5ldyBFQyhvcHRpb25zKTtcblxuICAvLyBTaG9ydGN1dCBgZWxsaXB0aWMuZWMoY3VydmUtbmFtZSlgXG4gIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ3N0cmluZycpIHtcbiAgICBhc3NlcnQoY3VydmVzLmhhc093blByb3BlcnR5KG9wdGlvbnMpLCAnVW5rbm93biBjdXJ2ZSAnICsgb3B0aW9ucyk7XG5cbiAgICBvcHRpb25zID0gY3VydmVzW29wdGlvbnNdO1xuICB9XG5cbiAgLy8gU2hvcnRjdXQgZm9yIGBlbGxpcHRpYy5lYyhlbGxpcHRpYy5jdXJ2ZXMuY3VydmVOYW1lKWBcbiAgaWYgKG9wdGlvbnMgaW5zdGFuY2VvZiBjdXJ2ZXMuUHJlc2V0Q3VydmUpXG4gICAgb3B0aW9ucyA9IHsgY3VydmU6IG9wdGlvbnMgfTtcblxuICB0aGlzLmN1cnZlID0gb3B0aW9ucy5jdXJ2ZS5jdXJ2ZTtcbiAgdGhpcy5uID0gdGhpcy5jdXJ2ZS5uO1xuICB0aGlzLm5oID0gdGhpcy5uLnVzaHJuKDEpO1xuICB0aGlzLmcgPSB0aGlzLmN1cnZlLmc7XG5cbiAgLy8gUG9pbnQgb24gY3VydmVcbiAgdGhpcy5nID0gb3B0aW9ucy5jdXJ2ZS5nO1xuICB0aGlzLmcucHJlY29tcHV0ZShvcHRpb25zLmN1cnZlLm4uYml0TGVuZ3RoKCkgKyAxKTtcblxuICAvLyBIYXNoIGZvciBmdW5jdGlvbiBmb3IgRFJCR1xuICB0aGlzLmhhc2ggPSBvcHRpb25zLmhhc2ggfHwgb3B0aW9ucy5jdXJ2ZS5oYXNoO1xufVxubW9kdWxlLmV4cG9ydHMgPSBFQztcblxuRUMucHJvdG90eXBlLmtleVBhaXIgPSBmdW5jdGlvbiBrZXlQYWlyKG9wdGlvbnMpIHtcbiAgcmV0dXJuIG5ldyBLZXlQYWlyKHRoaXMsIG9wdGlvbnMpO1xufTtcblxuRUMucHJvdG90eXBlLmtleUZyb21Qcml2YXRlID0gZnVuY3Rpb24ga2V5RnJvbVByaXZhdGUocHJpdiwgZW5jKSB7XG4gIHJldHVybiBLZXlQYWlyLmZyb21Qcml2YXRlKHRoaXMsIHByaXYsIGVuYyk7XG59O1xuXG5FQy5wcm90b3R5cGUua2V5RnJvbVB1YmxpYyA9IGZ1bmN0aW9uIGtleUZyb21QdWJsaWMocHViLCBlbmMpIHtcbiAgcmV0dXJuIEtleVBhaXIuZnJvbVB1YmxpYyh0aGlzLCBwdWIsIGVuYyk7XG59O1xuXG5FQy5wcm90b3R5cGUuZ2VuS2V5UGFpciA9IGZ1bmN0aW9uIGdlbktleVBhaXIob3B0aW9ucykge1xuICBpZiAoIW9wdGlvbnMpXG4gICAgb3B0aW9ucyA9IHt9O1xuXG4gIC8vIEluc3RhbnRpYXRlIEhtYWNfRFJCR1xuICB2YXIgZHJiZyA9IG5ldyBIbWFjRFJCRyh7XG4gICAgaGFzaDogdGhpcy5oYXNoLFxuICAgIHBlcnM6IG9wdGlvbnMucGVycyxcbiAgICBwZXJzRW5jOiBvcHRpb25zLnBlcnNFbmMgfHwgJ3V0ZjgnLFxuICAgIGVudHJvcHk6IG9wdGlvbnMuZW50cm9weSB8fCByYW5kKHRoaXMuaGFzaC5obWFjU3RyZW5ndGgpLFxuICAgIGVudHJvcHlFbmM6IG9wdGlvbnMuZW50cm9weSAmJiBvcHRpb25zLmVudHJvcHlFbmMgfHwgJ3V0ZjgnLFxuICAgIG5vbmNlOiB0aGlzLm4udG9BcnJheSgpXG4gIH0pO1xuXG4gIHZhciBieXRlcyA9IHRoaXMubi5ieXRlTGVuZ3RoKCk7XG4gIHZhciBuczIgPSB0aGlzLm4uc3ViKG5ldyBCTigyKSk7XG4gIGRvIHtcbiAgICB2YXIgcHJpdiA9IG5ldyBCTihkcmJnLmdlbmVyYXRlKGJ5dGVzKSk7XG4gICAgaWYgKHByaXYuY21wKG5zMikgPiAwKVxuICAgICAgY29udGludWU7XG5cbiAgICBwcml2LmlhZGRuKDEpO1xuICAgIHJldHVybiB0aGlzLmtleUZyb21Qcml2YXRlKHByaXYpO1xuICB9IHdoaWxlICh0cnVlKTtcbn07XG5cbkVDLnByb3RvdHlwZS5fdHJ1bmNhdGVUb04gPSBmdW5jdGlvbiB0cnVuY2F0ZVRvTihtc2csIHRydW5jT25seSkge1xuICB2YXIgZGVsdGEgPSBtc2cuYnl0ZUxlbmd0aCgpICogOCAtIHRoaXMubi5iaXRMZW5ndGgoKTtcbiAgaWYgKGRlbHRhID4gMClcbiAgICBtc2cgPSBtc2cudXNocm4oZGVsdGEpO1xuICBpZiAoIXRydW5jT25seSAmJiBtc2cuY21wKHRoaXMubikgPj0gMClcbiAgICByZXR1cm4gbXNnLnN1Yih0aGlzLm4pO1xuICBlbHNlXG4gICAgcmV0dXJuIG1zZztcbn07XG5cbkVDLnByb3RvdHlwZS5zaWduID0gZnVuY3Rpb24gc2lnbihtc2csIGtleSwgZW5jLCBvcHRpb25zKSB7XG4gIGlmICh0eXBlb2YgZW5jID09PSAnb2JqZWN0Jykge1xuICAgIG9wdGlvbnMgPSBlbmM7XG4gICAgZW5jID0gbnVsbDtcbiAgfVxuICBpZiAoIW9wdGlvbnMpXG4gICAgb3B0aW9ucyA9IHt9O1xuXG4gIGtleSA9IHRoaXMua2V5RnJvbVByaXZhdGUoa2V5LCBlbmMpO1xuICBtc2cgPSB0aGlzLl90cnVuY2F0ZVRvTihuZXcgQk4obXNnLCAxNikpO1xuXG4gIC8vIFplcm8tZXh0ZW5kIGtleSB0byBwcm92aWRlIGVub3VnaCBlbnRyb3B5XG4gIHZhciBieXRlcyA9IHRoaXMubi5ieXRlTGVuZ3RoKCk7XG4gIHZhciBia2V5ID0ga2V5LmdldFByaXZhdGUoKS50b0FycmF5KCdiZScsIGJ5dGVzKTtcblxuICAvLyBaZXJvLWV4dGVuZCBub25jZSB0byBoYXZlIHRoZSBzYW1lIGJ5dGUgc2l6ZSBhcyBOXG4gIHZhciBub25jZSA9IG1zZy50b0FycmF5KCdiZScsIGJ5dGVzKTtcblxuICAvLyBJbnN0YW50aWF0ZSBIbWFjX0RSQkdcbiAgdmFyIGRyYmcgPSBuZXcgSG1hY0RSQkcoe1xuICAgIGhhc2g6IHRoaXMuaGFzaCxcbiAgICBlbnRyb3B5OiBia2V5LFxuICAgIG5vbmNlOiBub25jZSxcbiAgICBwZXJzOiBvcHRpb25zLnBlcnMsXG4gICAgcGVyc0VuYzogb3B0aW9ucy5wZXJzRW5jIHx8ICd1dGY4J1xuICB9KTtcblxuICAvLyBOdW1iZXIgb2YgYnl0ZXMgdG8gZ2VuZXJhdGVcbiAgdmFyIG5zMSA9IHRoaXMubi5zdWIobmV3IEJOKDEpKTtcblxuICBmb3IgKHZhciBpdGVyID0gMDsgdHJ1ZTsgaXRlcisrKSB7XG4gICAgdmFyIGsgPSBvcHRpb25zLmsgP1xuICAgICAgICBvcHRpb25zLmsoaXRlcikgOlxuICAgICAgICBuZXcgQk4oZHJiZy5nZW5lcmF0ZSh0aGlzLm4uYnl0ZUxlbmd0aCgpKSk7XG4gICAgayA9IHRoaXMuX3RydW5jYXRlVG9OKGssIHRydWUpO1xuICAgIGlmIChrLmNtcG4oMSkgPD0gMCB8fCBrLmNtcChuczEpID49IDApXG4gICAgICBjb250aW51ZTtcblxuICAgIHZhciBrcCA9IHRoaXMuZy5tdWwoayk7XG4gICAgaWYgKGtwLmlzSW5maW5pdHkoKSlcbiAgICAgIGNvbnRpbnVlO1xuXG4gICAgdmFyIGtwWCA9IGtwLmdldFgoKTtcbiAgICB2YXIgciA9IGtwWC51bW9kKHRoaXMubik7XG4gICAgaWYgKHIuY21wbigwKSA9PT0gMClcbiAgICAgIGNvbnRpbnVlO1xuXG4gICAgdmFyIHMgPSBrLmludm0odGhpcy5uKS5tdWwoci5tdWwoa2V5LmdldFByaXZhdGUoKSkuaWFkZChtc2cpKTtcbiAgICBzID0gcy51bW9kKHRoaXMubik7XG4gICAgaWYgKHMuY21wbigwKSA9PT0gMClcbiAgICAgIGNvbnRpbnVlO1xuXG4gICAgdmFyIHJlY292ZXJ5UGFyYW0gPSAoa3AuZ2V0WSgpLmlzT2RkKCkgPyAxIDogMCkgfFxuICAgICAgICAgICAgICAgICAgICAgICAgKGtwWC5jbXAocikgIT09IDAgPyAyIDogMCk7XG5cbiAgICAvLyBVc2UgY29tcGxlbWVudCBvZiBgc2AsIGlmIGl0IGlzID4gYG4gLyAyYFxuICAgIGlmIChvcHRpb25zLmNhbm9uaWNhbCAmJiBzLmNtcCh0aGlzLm5oKSA+IDApIHtcbiAgICAgIHMgPSB0aGlzLm4uc3ViKHMpO1xuICAgICAgcmVjb3ZlcnlQYXJhbSBePSAxO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgU2lnbmF0dXJlKHsgcjogciwgczogcywgcmVjb3ZlcnlQYXJhbTogcmVjb3ZlcnlQYXJhbSB9KTtcbiAgfVxufTtcblxuRUMucHJvdG90eXBlLnZlcmlmeSA9IGZ1bmN0aW9uIHZlcmlmeShtc2csIHNpZ25hdHVyZSwga2V5LCBlbmMpIHtcbiAgbXNnID0gdGhpcy5fdHJ1bmNhdGVUb04obmV3IEJOKG1zZywgMTYpKTtcbiAga2V5ID0gdGhpcy5rZXlGcm9tUHVibGljKGtleSwgZW5jKTtcbiAgc2lnbmF0dXJlID0gbmV3IFNpZ25hdHVyZShzaWduYXR1cmUsICdoZXgnKTtcblxuICAvLyBQZXJmb3JtIHByaW1pdGl2ZSB2YWx1ZXMgdmFsaWRhdGlvblxuICB2YXIgciA9IHNpZ25hdHVyZS5yO1xuICB2YXIgcyA9IHNpZ25hdHVyZS5zO1xuICBpZiAoci5jbXBuKDEpIDwgMCB8fCByLmNtcCh0aGlzLm4pID49IDApXG4gICAgcmV0dXJuIGZhbHNlO1xuICBpZiAocy5jbXBuKDEpIDwgMCB8fCBzLmNtcCh0aGlzLm4pID49IDApXG4gICAgcmV0dXJuIGZhbHNlO1xuXG4gIC8vIFZhbGlkYXRlIHNpZ25hdHVyZVxuICB2YXIgc2ludiA9IHMuaW52bSh0aGlzLm4pO1xuICB2YXIgdTEgPSBzaW52Lm11bChtc2cpLnVtb2QodGhpcy5uKTtcbiAgdmFyIHUyID0gc2ludi5tdWwocikudW1vZCh0aGlzLm4pO1xuXG4gIGlmICghdGhpcy5jdXJ2ZS5fbWF4d2VsbFRyaWNrKSB7XG4gICAgdmFyIHAgPSB0aGlzLmcubXVsQWRkKHUxLCBrZXkuZ2V0UHVibGljKCksIHUyKTtcbiAgICBpZiAocC5pc0luZmluaXR5KCkpXG4gICAgICByZXR1cm4gZmFsc2U7XG5cbiAgICByZXR1cm4gcC5nZXRYKCkudW1vZCh0aGlzLm4pLmNtcChyKSA9PT0gMDtcbiAgfVxuXG4gIC8vIE5PVEU6IEdyZWcgTWF4d2VsbCdzIHRyaWNrLCBpbnNwaXJlZCBieTpcbiAgLy8gaHR0cHM6Ly9naXQuaW8vdmFkM0tcblxuICB2YXIgcCA9IHRoaXMuZy5qbXVsQWRkKHUxLCBrZXkuZ2V0UHVibGljKCksIHUyKTtcbiAgaWYgKHAuaXNJbmZpbml0eSgpKVxuICAgIHJldHVybiBmYWxzZTtcblxuICAvLyBDb21wYXJlIGBwLnhgIG9mIEphY29iaWFuIHBvaW50IHdpdGggYHJgLFxuICAvLyB0aGlzIHdpbGwgZG8gYHAueCA9PSByICogcC56XjJgIGluc3RlYWQgb2YgbXVsdGlwbHlpbmcgYHAueGAgYnkgdGhlXG4gIC8vIGludmVyc2Ugb2YgYHAuel4yYFxuICByZXR1cm4gcC5lcVhUb1Aocik7XG59O1xuXG5FQy5wcm90b3R5cGUucmVjb3ZlclB1YktleSA9IGZ1bmN0aW9uKG1zZywgc2lnbmF0dXJlLCBqLCBlbmMpIHtcbiAgYXNzZXJ0KCgzICYgaikgPT09IGosICdUaGUgcmVjb3ZlcnkgcGFyYW0gaXMgbW9yZSB0aGFuIHR3byBiaXRzJyk7XG4gIHNpZ25hdHVyZSA9IG5ldyBTaWduYXR1cmUoc2lnbmF0dXJlLCBlbmMpO1xuXG4gIHZhciBuID0gdGhpcy5uO1xuICB2YXIgZSA9IG5ldyBCTihtc2cpO1xuICB2YXIgciA9IHNpZ25hdHVyZS5yO1xuICB2YXIgcyA9IHNpZ25hdHVyZS5zO1xuXG4gIC8vIEEgc2V0IExTQiBzaWduaWZpZXMgdGhhdCB0aGUgeS1jb29yZGluYXRlIGlzIG9kZFxuICB2YXIgaXNZT2RkID0gaiAmIDE7XG4gIHZhciBpc1NlY29uZEtleSA9IGogPj4gMTtcbiAgaWYgKHIuY21wKHRoaXMuY3VydmUucC51bW9kKHRoaXMuY3VydmUubikpID49IDAgJiYgaXNTZWNvbmRLZXkpXG4gICAgdGhyb3cgbmV3IEVycm9yKCdVbmFibGUgdG8gZmluZCBzZW5jb25kIGtleSBjYW5kaW5hdGUnKTtcblxuICAvLyAxLjEuIExldCB4ID0gciArIGpuLlxuICBpZiAoaXNTZWNvbmRLZXkpXG4gICAgciA9IHRoaXMuY3VydmUucG9pbnRGcm9tWChyLmFkZCh0aGlzLmN1cnZlLm4pLCBpc1lPZGQpO1xuICBlbHNlXG4gICAgciA9IHRoaXMuY3VydmUucG9pbnRGcm9tWChyLCBpc1lPZGQpO1xuXG4gIHZhciBySW52ID0gc2lnbmF0dXJlLnIuaW52bShuKTtcbiAgdmFyIHMxID0gbi5zdWIoZSkubXVsKHJJbnYpLnVtb2Qobik7XG4gIHZhciBzMiA9IHMubXVsKHJJbnYpLnVtb2Qobik7XG5cbiAgLy8gMS42LjEgQ29tcHV0ZSBRID0gcl4tMSAoc1IgLSAgZUcpXG4gIC8vICAgICAgICAgICAgICAgUSA9IHJeLTEgKHNSICsgLWVHKVxuICByZXR1cm4gdGhpcy5nLm11bEFkZChzMSwgciwgczIpO1xufTtcblxuRUMucHJvdG90eXBlLmdldEtleVJlY292ZXJ5UGFyYW0gPSBmdW5jdGlvbihlLCBzaWduYXR1cmUsIFEsIGVuYykge1xuICBzaWduYXR1cmUgPSBuZXcgU2lnbmF0dXJlKHNpZ25hdHVyZSwgZW5jKTtcbiAgaWYgKHNpZ25hdHVyZS5yZWNvdmVyeVBhcmFtICE9PSBudWxsKVxuICAgIHJldHVybiBzaWduYXR1cmUucmVjb3ZlcnlQYXJhbTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IDQ7IGkrKykge1xuICAgIHZhciBRcHJpbWU7XG4gICAgdHJ5IHtcbiAgICAgIFFwcmltZSA9IHRoaXMucmVjb3ZlclB1YktleShlLCBzaWduYXR1cmUsIGkpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGlmIChRcHJpbWUuZXEoUSkpXG4gICAgICByZXR1cm4gaTtcbiAgfVxuICB0aHJvdyBuZXcgRXJyb3IoJ1VuYWJsZSB0byBmaW5kIHZhbGlkIHJlY292ZXJ5IGZhY3RvcicpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGhhc2ggPSByZXF1aXJlKCdoYXNoLmpzJyk7XG52YXIgdXRpbHMgPSByZXF1aXJlKCdtaW5pbWFsaXN0aWMtY3J5cHRvLXV0aWxzJyk7XG52YXIgYXNzZXJ0ID0gcmVxdWlyZSgnbWluaW1hbGlzdGljLWFzc2VydCcpO1xuXG5mdW5jdGlvbiBIbWFjRFJCRyhvcHRpb25zKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBIbWFjRFJCRykpXG4gICAgcmV0dXJuIG5ldyBIbWFjRFJCRyhvcHRpb25zKTtcbiAgdGhpcy5oYXNoID0gb3B0aW9ucy5oYXNoO1xuICB0aGlzLnByZWRSZXNpc3QgPSAhIW9wdGlvbnMucHJlZFJlc2lzdDtcblxuICB0aGlzLm91dExlbiA9IHRoaXMuaGFzaC5vdXRTaXplO1xuICB0aGlzLm1pbkVudHJvcHkgPSBvcHRpb25zLm1pbkVudHJvcHkgfHwgdGhpcy5oYXNoLmhtYWNTdHJlbmd0aDtcblxuICB0aGlzLl9yZXNlZWQgPSBudWxsO1xuICB0aGlzLnJlc2VlZEludGVydmFsID0gbnVsbDtcbiAgdGhpcy5LID0gbnVsbDtcbiAgdGhpcy5WID0gbnVsbDtcblxuICB2YXIgZW50cm9weSA9IHV0aWxzLnRvQXJyYXkob3B0aW9ucy5lbnRyb3B5LCBvcHRpb25zLmVudHJvcHlFbmMgfHwgJ2hleCcpO1xuICB2YXIgbm9uY2UgPSB1dGlscy50b0FycmF5KG9wdGlvbnMubm9uY2UsIG9wdGlvbnMubm9uY2VFbmMgfHwgJ2hleCcpO1xuICB2YXIgcGVycyA9IHV0aWxzLnRvQXJyYXkob3B0aW9ucy5wZXJzLCBvcHRpb25zLnBlcnNFbmMgfHwgJ2hleCcpO1xuICBhc3NlcnQoZW50cm9weS5sZW5ndGggPj0gKHRoaXMubWluRW50cm9weSAvIDgpLFxuICAgICAgICAgJ05vdCBlbm91Z2ggZW50cm9weS4gTWluaW11bSBpczogJyArIHRoaXMubWluRW50cm9weSArICcgYml0cycpO1xuICB0aGlzLl9pbml0KGVudHJvcHksIG5vbmNlLCBwZXJzKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gSG1hY0RSQkc7XG5cbkhtYWNEUkJHLnByb3RvdHlwZS5faW5pdCA9IGZ1bmN0aW9uIGluaXQoZW50cm9weSwgbm9uY2UsIHBlcnMpIHtcbiAgdmFyIHNlZWQgPSBlbnRyb3B5LmNvbmNhdChub25jZSkuY29uY2F0KHBlcnMpO1xuXG4gIHRoaXMuSyA9IG5ldyBBcnJheSh0aGlzLm91dExlbiAvIDgpO1xuICB0aGlzLlYgPSBuZXcgQXJyYXkodGhpcy5vdXRMZW4gLyA4KTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLlYubGVuZ3RoOyBpKyspIHtcbiAgICB0aGlzLktbaV0gPSAweDAwO1xuICAgIHRoaXMuVltpXSA9IDB4MDE7XG4gIH1cblxuICB0aGlzLl91cGRhdGUoc2VlZCk7XG4gIHRoaXMuX3Jlc2VlZCA9IDE7XG4gIHRoaXMucmVzZWVkSW50ZXJ2YWwgPSAweDEwMDAwMDAwMDAwMDA7ICAvLyAyXjQ4XG59O1xuXG5IbWFjRFJCRy5wcm90b3R5cGUuX2htYWMgPSBmdW5jdGlvbiBobWFjKCkge1xuICByZXR1cm4gbmV3IGhhc2guaG1hYyh0aGlzLmhhc2gsIHRoaXMuSyk7XG59O1xuXG5IbWFjRFJCRy5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZShzZWVkKSB7XG4gIHZhciBrbWFjID0gdGhpcy5faG1hYygpXG4gICAgICAgICAgICAgICAgIC51cGRhdGUodGhpcy5WKVxuICAgICAgICAgICAgICAgICAudXBkYXRlKFsgMHgwMCBdKTtcbiAgaWYgKHNlZWQpXG4gICAga21hYyA9IGttYWMudXBkYXRlKHNlZWQpO1xuICB0aGlzLksgPSBrbWFjLmRpZ2VzdCgpO1xuICB0aGlzLlYgPSB0aGlzLl9obWFjKCkudXBkYXRlKHRoaXMuVikuZGlnZXN0KCk7XG4gIGlmICghc2VlZClcbiAgICByZXR1cm47XG5cbiAgdGhpcy5LID0gdGhpcy5faG1hYygpXG4gICAgICAgICAgICAgICAudXBkYXRlKHRoaXMuVilcbiAgICAgICAgICAgICAgIC51cGRhdGUoWyAweDAxIF0pXG4gICAgICAgICAgICAgICAudXBkYXRlKHNlZWQpXG4gICAgICAgICAgICAgICAuZGlnZXN0KCk7XG4gIHRoaXMuViA9IHRoaXMuX2htYWMoKS51cGRhdGUodGhpcy5WKS5kaWdlc3QoKTtcbn07XG5cbkhtYWNEUkJHLnByb3RvdHlwZS5yZXNlZWQgPSBmdW5jdGlvbiByZXNlZWQoZW50cm9weSwgZW50cm9weUVuYywgYWRkLCBhZGRFbmMpIHtcbiAgLy8gT3B0aW9uYWwgZW50cm9weSBlbmNcbiAgaWYgKHR5cGVvZiBlbnRyb3B5RW5jICE9PSAnc3RyaW5nJykge1xuICAgIGFkZEVuYyA9IGFkZDtcbiAgICBhZGQgPSBlbnRyb3B5RW5jO1xuICAgIGVudHJvcHlFbmMgPSBudWxsO1xuICB9XG5cbiAgZW50cm9weSA9IHV0aWxzLnRvQXJyYXkoZW50cm9weSwgZW50cm9weUVuYyk7XG4gIGFkZCA9IHV0aWxzLnRvQXJyYXkoYWRkLCBhZGRFbmMpO1xuXG4gIGFzc2VydChlbnRyb3B5Lmxlbmd0aCA+PSAodGhpcy5taW5FbnRyb3B5IC8gOCksXG4gICAgICAgICAnTm90IGVub3VnaCBlbnRyb3B5LiBNaW5pbXVtIGlzOiAnICsgdGhpcy5taW5FbnRyb3B5ICsgJyBiaXRzJyk7XG5cbiAgdGhpcy5fdXBkYXRlKGVudHJvcHkuY29uY2F0KGFkZCB8fCBbXSkpO1xuICB0aGlzLl9yZXNlZWQgPSAxO1xufTtcblxuSG1hY0RSQkcucHJvdG90eXBlLmdlbmVyYXRlID0gZnVuY3Rpb24gZ2VuZXJhdGUobGVuLCBlbmMsIGFkZCwgYWRkRW5jKSB7XG4gIGlmICh0aGlzLl9yZXNlZWQgPiB0aGlzLnJlc2VlZEludGVydmFsKVxuICAgIHRocm93IG5ldyBFcnJvcignUmVzZWVkIGlzIHJlcXVpcmVkJyk7XG5cbiAgLy8gT3B0aW9uYWwgZW5jb2RpbmdcbiAgaWYgKHR5cGVvZiBlbmMgIT09ICdzdHJpbmcnKSB7XG4gICAgYWRkRW5jID0gYWRkO1xuICAgIGFkZCA9IGVuYztcbiAgICBlbmMgPSBudWxsO1xuICB9XG5cbiAgLy8gT3B0aW9uYWwgYWRkaXRpb25hbCBkYXRhXG4gIGlmIChhZGQpIHtcbiAgICBhZGQgPSB1dGlscy50b0FycmF5KGFkZCwgYWRkRW5jIHx8ICdoZXgnKTtcbiAgICB0aGlzLl91cGRhdGUoYWRkKTtcbiAgfVxuXG4gIHZhciB0ZW1wID0gW107XG4gIHdoaWxlICh0ZW1wLmxlbmd0aCA8IGxlbikge1xuICAgIHRoaXMuViA9IHRoaXMuX2htYWMoKS51cGRhdGUodGhpcy5WKS5kaWdlc3QoKTtcbiAgICB0ZW1wID0gdGVtcC5jb25jYXQodGhpcy5WKTtcbiAgfVxuXG4gIHZhciByZXMgPSB0ZW1wLnNsaWNlKDAsIGxlbik7XG4gIHRoaXMuX3VwZGF0ZShhZGQpO1xuICB0aGlzLl9yZXNlZWQrKztcbiAgcmV0dXJuIHV0aWxzLmVuY29kZShyZXMsIGVuYyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQk4gPSByZXF1aXJlKCdibi5qcycpO1xudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcbnZhciBhc3NlcnQgPSB1dGlscy5hc3NlcnQ7XG5cbmZ1bmN0aW9uIEtleVBhaXIoZWMsIG9wdGlvbnMpIHtcbiAgdGhpcy5lYyA9IGVjO1xuICB0aGlzLnByaXYgPSBudWxsO1xuICB0aGlzLnB1YiA9IG51bGw7XG5cbiAgLy8gS2V5UGFpcihlYywgeyBwcml2OiAuLi4sIHB1YjogLi4uIH0pXG4gIGlmIChvcHRpb25zLnByaXYpXG4gICAgdGhpcy5faW1wb3J0UHJpdmF0ZShvcHRpb25zLnByaXYsIG9wdGlvbnMucHJpdkVuYyk7XG4gIGlmIChvcHRpb25zLnB1YilcbiAgICB0aGlzLl9pbXBvcnRQdWJsaWMob3B0aW9ucy5wdWIsIG9wdGlvbnMucHViRW5jKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gS2V5UGFpcjtcblxuS2V5UGFpci5mcm9tUHVibGljID0gZnVuY3Rpb24gZnJvbVB1YmxpYyhlYywgcHViLCBlbmMpIHtcbiAgaWYgKHB1YiBpbnN0YW5jZW9mIEtleVBhaXIpXG4gICAgcmV0dXJuIHB1YjtcblxuICByZXR1cm4gbmV3IEtleVBhaXIoZWMsIHtcbiAgICBwdWI6IHB1YixcbiAgICBwdWJFbmM6IGVuY1xuICB9KTtcbn07XG5cbktleVBhaXIuZnJvbVByaXZhdGUgPSBmdW5jdGlvbiBmcm9tUHJpdmF0ZShlYywgcHJpdiwgZW5jKSB7XG4gIGlmIChwcml2IGluc3RhbmNlb2YgS2V5UGFpcilcbiAgICByZXR1cm4gcHJpdjtcblxuICByZXR1cm4gbmV3IEtleVBhaXIoZWMsIHtcbiAgICBwcml2OiBwcml2LFxuICAgIHByaXZFbmM6IGVuY1xuICB9KTtcbn07XG5cbktleVBhaXIucHJvdG90eXBlLnZhbGlkYXRlID0gZnVuY3Rpb24gdmFsaWRhdGUoKSB7XG4gIHZhciBwdWIgPSB0aGlzLmdldFB1YmxpYygpO1xuXG4gIGlmIChwdWIuaXNJbmZpbml0eSgpKVxuICAgIHJldHVybiB7IHJlc3VsdDogZmFsc2UsIHJlYXNvbjogJ0ludmFsaWQgcHVibGljIGtleScgfTtcbiAgaWYgKCFwdWIudmFsaWRhdGUoKSlcbiAgICByZXR1cm4geyByZXN1bHQ6IGZhbHNlLCByZWFzb246ICdQdWJsaWMga2V5IGlzIG5vdCBhIHBvaW50JyB9O1xuICBpZiAoIXB1Yi5tdWwodGhpcy5lYy5jdXJ2ZS5uKS5pc0luZmluaXR5KCkpXG4gICAgcmV0dXJuIHsgcmVzdWx0OiBmYWxzZSwgcmVhc29uOiAnUHVibGljIGtleSAqIE4gIT0gTycgfTtcblxuICByZXR1cm4geyByZXN1bHQ6IHRydWUsIHJlYXNvbjogbnVsbCB9O1xufTtcblxuS2V5UGFpci5wcm90b3R5cGUuZ2V0UHVibGljID0gZnVuY3Rpb24gZ2V0UHVibGljKGNvbXBhY3QsIGVuYykge1xuICAvLyBjb21wYWN0IGlzIG9wdGlvbmFsIGFyZ3VtZW50XG4gIGlmICh0eXBlb2YgY29tcGFjdCA9PT0gJ3N0cmluZycpIHtcbiAgICBlbmMgPSBjb21wYWN0O1xuICAgIGNvbXBhY3QgPSBudWxsO1xuICB9XG5cbiAgaWYgKCF0aGlzLnB1YilcbiAgICB0aGlzLnB1YiA9IHRoaXMuZWMuZy5tdWwodGhpcy5wcml2KTtcblxuICBpZiAoIWVuYylcbiAgICByZXR1cm4gdGhpcy5wdWI7XG5cbiAgcmV0dXJuIHRoaXMucHViLmVuY29kZShlbmMsIGNvbXBhY3QpO1xufTtcblxuS2V5UGFpci5wcm90b3R5cGUuZ2V0UHJpdmF0ZSA9IGZ1bmN0aW9uIGdldFByaXZhdGUoZW5jKSB7XG4gIGlmIChlbmMgPT09ICdoZXgnKVxuICAgIHJldHVybiB0aGlzLnByaXYudG9TdHJpbmcoMTYsIDIpO1xuICBlbHNlXG4gICAgcmV0dXJuIHRoaXMucHJpdjtcbn07XG5cbktleVBhaXIucHJvdG90eXBlLl9pbXBvcnRQcml2YXRlID0gZnVuY3Rpb24gX2ltcG9ydFByaXZhdGUoa2V5LCBlbmMpIHtcbiAgdGhpcy5wcml2ID0gbmV3IEJOKGtleSwgZW5jIHx8IDE2KTtcblxuICAvLyBFbnN1cmUgdGhhdCB0aGUgcHJpdiB3b24ndCBiZSBiaWdnZXIgdGhhbiBuLCBvdGhlcndpc2Ugd2UgbWF5IGZhaWxcbiAgLy8gaW4gZml4ZWQgbXVsdGlwbGljYXRpb24gbWV0aG9kXG4gIHRoaXMucHJpdiA9IHRoaXMucHJpdi51bW9kKHRoaXMuZWMuY3VydmUubik7XG59O1xuXG5LZXlQYWlyLnByb3RvdHlwZS5faW1wb3J0UHVibGljID0gZnVuY3Rpb24gX2ltcG9ydFB1YmxpYyhrZXksIGVuYykge1xuICBpZiAoa2V5LnggfHwga2V5LnkpIHtcbiAgICAvLyBNb250Z29tZXJ5IHBvaW50cyBvbmx5IGhhdmUgYW4gYHhgIGNvb3JkaW5hdGUuXG4gICAgLy8gV2VpZXJzdHJhc3MvRWR3YXJkcyBwb2ludHMgb24gdGhlIG90aGVyIGhhbmQgaGF2ZSBib3RoIGB4YCBhbmRcbiAgICAvLyBgeWAgY29vcmRpbmF0ZXMuXG4gICAgaWYgKHRoaXMuZWMuY3VydmUudHlwZSA9PT0gJ21vbnQnKSB7XG4gICAgICBhc3NlcnQoa2V5LngsICdOZWVkIHggY29vcmRpbmF0ZScpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5lYy5jdXJ2ZS50eXBlID09PSAnc2hvcnQnIHx8XG4gICAgICAgICAgICAgICB0aGlzLmVjLmN1cnZlLnR5cGUgPT09ICdlZHdhcmRzJykge1xuICAgICAgYXNzZXJ0KGtleS54ICYmIGtleS55LCAnTmVlZCBib3RoIHggYW5kIHkgY29vcmRpbmF0ZScpO1xuICAgIH1cbiAgICB0aGlzLnB1YiA9IHRoaXMuZWMuY3VydmUucG9pbnQoa2V5LngsIGtleS55KTtcbiAgICByZXR1cm47XG4gIH1cbiAgdGhpcy5wdWIgPSB0aGlzLmVjLmN1cnZlLmRlY29kZVBvaW50KGtleSwgZW5jKTtcbn07XG5cbi8vIEVDREhcbktleVBhaXIucHJvdG90eXBlLmRlcml2ZSA9IGZ1bmN0aW9uIGRlcml2ZShwdWIpIHtcbiAgcmV0dXJuIHB1Yi5tdWwodGhpcy5wcml2KS5nZXRYKCk7XG59O1xuXG4vLyBFQ0RTQVxuS2V5UGFpci5wcm90b3R5cGUuc2lnbiA9IGZ1bmN0aW9uIHNpZ24obXNnLCBlbmMsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIHRoaXMuZWMuc2lnbihtc2csIHRoaXMsIGVuYywgb3B0aW9ucyk7XG59O1xuXG5LZXlQYWlyLnByb3RvdHlwZS52ZXJpZnkgPSBmdW5jdGlvbiB2ZXJpZnkobXNnLCBzaWduYXR1cmUpIHtcbiAgcmV0dXJuIHRoaXMuZWMudmVyaWZ5KG1zZywgc2lnbmF0dXJlLCB0aGlzKTtcbn07XG5cbktleVBhaXIucHJvdG90eXBlLmluc3BlY3QgPSBmdW5jdGlvbiBpbnNwZWN0KCkge1xuICByZXR1cm4gJzxLZXkgcHJpdjogJyArICh0aGlzLnByaXYgJiYgdGhpcy5wcml2LnRvU3RyaW5nKDE2LCAyKSkgK1xuICAgICAgICAgJyBwdWI6ICcgKyAodGhpcy5wdWIgJiYgdGhpcy5wdWIuaW5zcGVjdCgpKSArICcgPic7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQk4gPSByZXF1aXJlKCdibi5qcycpO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xudmFyIGFzc2VydCA9IHV0aWxzLmFzc2VydDtcblxuZnVuY3Rpb24gU2lnbmF0dXJlKG9wdGlvbnMsIGVuYykge1xuICBpZiAob3B0aW9ucyBpbnN0YW5jZW9mIFNpZ25hdHVyZSlcbiAgICByZXR1cm4gb3B0aW9ucztcblxuICBpZiAodGhpcy5faW1wb3J0REVSKG9wdGlvbnMsIGVuYykpXG4gICAgcmV0dXJuO1xuXG4gIGFzc2VydChvcHRpb25zLnIgJiYgb3B0aW9ucy5zLCAnU2lnbmF0dXJlIHdpdGhvdXQgciBvciBzJyk7XG4gIHRoaXMuciA9IG5ldyBCTihvcHRpb25zLnIsIDE2KTtcbiAgdGhpcy5zID0gbmV3IEJOKG9wdGlvbnMucywgMTYpO1xuICBpZiAob3B0aW9ucy5yZWNvdmVyeVBhcmFtID09PSB1bmRlZmluZWQpXG4gICAgdGhpcy5yZWNvdmVyeVBhcmFtID0gbnVsbDtcbiAgZWxzZVxuICAgIHRoaXMucmVjb3ZlcnlQYXJhbSA9IG9wdGlvbnMucmVjb3ZlcnlQYXJhbTtcbn1cbm1vZHVsZS5leHBvcnRzID0gU2lnbmF0dXJlO1xuXG5mdW5jdGlvbiBQb3NpdGlvbigpIHtcbiAgdGhpcy5wbGFjZSA9IDA7XG59XG5cbmZ1bmN0aW9uIGdldExlbmd0aChidWYsIHApIHtcbiAgdmFyIGluaXRpYWwgPSBidWZbcC5wbGFjZSsrXTtcbiAgaWYgKCEoaW5pdGlhbCAmIDB4ODApKSB7XG4gICAgcmV0dXJuIGluaXRpYWw7XG4gIH1cbiAgdmFyIG9jdGV0TGVuID0gaW5pdGlhbCAmIDB4ZjtcbiAgdmFyIHZhbCA9IDA7XG4gIGZvciAodmFyIGkgPSAwLCBvZmYgPSBwLnBsYWNlOyBpIDwgb2N0ZXRMZW47IGkrKywgb2ZmKyspIHtcbiAgICB2YWwgPDw9IDg7XG4gICAgdmFsIHw9IGJ1ZltvZmZdO1xuICB9XG4gIHAucGxhY2UgPSBvZmY7XG4gIHJldHVybiB2YWw7XG59XG5cbmZ1bmN0aW9uIHJtUGFkZGluZyhidWYpIHtcbiAgdmFyIGkgPSAwO1xuICB2YXIgbGVuID0gYnVmLmxlbmd0aCAtIDE7XG4gIHdoaWxlICghYnVmW2ldICYmICEoYnVmW2kgKyAxXSAmIDB4ODApICYmIGkgPCBsZW4pIHtcbiAgICBpKys7XG4gIH1cbiAgaWYgKGkgPT09IDApIHtcbiAgICByZXR1cm4gYnVmO1xuICB9XG4gIHJldHVybiBidWYuc2xpY2UoaSk7XG59XG5cblNpZ25hdHVyZS5wcm90b3R5cGUuX2ltcG9ydERFUiA9IGZ1bmN0aW9uIF9pbXBvcnRERVIoZGF0YSwgZW5jKSB7XG4gIGRhdGEgPSB1dGlscy50b0FycmF5KGRhdGEsIGVuYyk7XG4gIHZhciBwID0gbmV3IFBvc2l0aW9uKCk7XG4gIGlmIChkYXRhW3AucGxhY2UrK10gIT09IDB4MzApIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIGxlbiA9IGdldExlbmd0aChkYXRhLCBwKTtcbiAgaWYgKChsZW4gKyBwLnBsYWNlKSAhPT0gZGF0YS5sZW5ndGgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKGRhdGFbcC5wbGFjZSsrXSAhPT0gMHgwMikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgcmxlbiA9IGdldExlbmd0aChkYXRhLCBwKTtcbiAgdmFyIHIgPSBkYXRhLnNsaWNlKHAucGxhY2UsIHJsZW4gKyBwLnBsYWNlKTtcbiAgcC5wbGFjZSArPSBybGVuO1xuICBpZiAoZGF0YVtwLnBsYWNlKytdICE9PSAweDAyKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBzbGVuID0gZ2V0TGVuZ3RoKGRhdGEsIHApO1xuICBpZiAoZGF0YS5sZW5ndGggIT09IHNsZW4gKyBwLnBsYWNlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBzID0gZGF0YS5zbGljZShwLnBsYWNlLCBzbGVuICsgcC5wbGFjZSk7XG4gIGlmIChyWzBdID09PSAwICYmIChyWzFdICYgMHg4MCkpIHtcbiAgICByID0gci5zbGljZSgxKTtcbiAgfVxuICBpZiAoc1swXSA9PT0gMCAmJiAoc1sxXSAmIDB4ODApKSB7XG4gICAgcyA9IHMuc2xpY2UoMSk7XG4gIH1cblxuICB0aGlzLnIgPSBuZXcgQk4ocik7XG4gIHRoaXMucyA9IG5ldyBCTihzKTtcbiAgdGhpcy5yZWNvdmVyeVBhcmFtID0gbnVsbDtcblxuICByZXR1cm4gdHJ1ZTtcbn07XG5cbmZ1bmN0aW9uIGNvbnN0cnVjdExlbmd0aChhcnIsIGxlbikge1xuICBpZiAobGVuIDwgMHg4MCkge1xuICAgIGFyci5wdXNoKGxlbik7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBvY3RldHMgPSAxICsgKE1hdGgubG9nKGxlbikgLyBNYXRoLkxOMiA+Pj4gMyk7XG4gIGFyci5wdXNoKG9jdGV0cyB8IDB4ODApO1xuICB3aGlsZSAoLS1vY3RldHMpIHtcbiAgICBhcnIucHVzaCgobGVuID4+PiAob2N0ZXRzIDw8IDMpKSAmIDB4ZmYpO1xuICB9XG4gIGFyci5wdXNoKGxlbik7XG59XG5cblNpZ25hdHVyZS5wcm90b3R5cGUudG9ERVIgPSBmdW5jdGlvbiB0b0RFUihlbmMpIHtcbiAgdmFyIHIgPSB0aGlzLnIudG9BcnJheSgpO1xuICB2YXIgcyA9IHRoaXMucy50b0FycmF5KCk7XG5cbiAgLy8gUGFkIHZhbHVlc1xuICBpZiAoclswXSAmIDB4ODApXG4gICAgciA9IFsgMCBdLmNvbmNhdChyKTtcbiAgLy8gUGFkIHZhbHVlc1xuICBpZiAoc1swXSAmIDB4ODApXG4gICAgcyA9IFsgMCBdLmNvbmNhdChzKTtcblxuICByID0gcm1QYWRkaW5nKHIpO1xuICBzID0gcm1QYWRkaW5nKHMpO1xuXG4gIHdoaWxlICghc1swXSAmJiAhKHNbMV0gJiAweDgwKSkge1xuICAgIHMgPSBzLnNsaWNlKDEpO1xuICB9XG4gIHZhciBhcnIgPSBbIDB4MDIgXTtcbiAgY29uc3RydWN0TGVuZ3RoKGFyciwgci5sZW5ndGgpO1xuICBhcnIgPSBhcnIuY29uY2F0KHIpO1xuICBhcnIucHVzaCgweDAyKTtcbiAgY29uc3RydWN0TGVuZ3RoKGFyciwgcy5sZW5ndGgpO1xuICB2YXIgYmFja0hhbGYgPSBhcnIuY29uY2F0KHMpO1xuICB2YXIgcmVzID0gWyAweDMwIF07XG4gIGNvbnN0cnVjdExlbmd0aChyZXMsIGJhY2tIYWxmLmxlbmd0aCk7XG4gIHJlcyA9IHJlcy5jb25jYXQoYmFja0hhbGYpO1xuICByZXR1cm4gdXRpbHMuZW5jb2RlKHJlcywgZW5jKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBoYXNoID0gcmVxdWlyZSgnaGFzaC5qcycpO1xudmFyIGN1cnZlcyA9IHJlcXVpcmUoJy4uL2N1cnZlcycpO1xudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcbnZhciBhc3NlcnQgPSB1dGlscy5hc3NlcnQ7XG52YXIgcGFyc2VCeXRlcyA9IHV0aWxzLnBhcnNlQnl0ZXM7XG52YXIgS2V5UGFpciA9IHJlcXVpcmUoJy4va2V5Jyk7XG52YXIgU2lnbmF0dXJlID0gcmVxdWlyZSgnLi9zaWduYXR1cmUnKTtcblxuZnVuY3Rpb24gRUREU0EoY3VydmUpIHtcbiAgYXNzZXJ0KGN1cnZlID09PSAnZWQyNTUxOScsICdvbmx5IHRlc3RlZCB3aXRoIGVkMjU1MTkgc28gZmFyJyk7XG5cbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIEVERFNBKSlcbiAgICByZXR1cm4gbmV3IEVERFNBKGN1cnZlKTtcblxuICB2YXIgY3VydmUgPSBjdXJ2ZXNbY3VydmVdLmN1cnZlO1xuICB0aGlzLmN1cnZlID0gY3VydmU7XG4gIHRoaXMuZyA9IGN1cnZlLmc7XG4gIHRoaXMuZy5wcmVjb21wdXRlKGN1cnZlLm4uYml0TGVuZ3RoKCkgKyAxKTtcblxuICB0aGlzLnBvaW50Q2xhc3MgPSBjdXJ2ZS5wb2ludCgpLmNvbnN0cnVjdG9yO1xuICB0aGlzLmVuY29kaW5nTGVuZ3RoID0gTWF0aC5jZWlsKGN1cnZlLm4uYml0TGVuZ3RoKCkgLyA4KTtcbiAgdGhpcy5oYXNoID0gaGFzaC5zaGE1MTI7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gRUREU0E7XG5cbi8qKlxuKiBAcGFyYW0ge0FycmF5fFN0cmluZ30gbWVzc2FnZSAtIG1lc3NhZ2UgYnl0ZXNcbiogQHBhcmFtIHtBcnJheXxTdHJpbmd8S2V5UGFpcn0gc2VjcmV0IC0gc2VjcmV0IGJ5dGVzIG9yIGEga2V5cGFpclxuKiBAcmV0dXJucyB7U2lnbmF0dXJlfSAtIHNpZ25hdHVyZVxuKi9cbkVERFNBLnByb3RvdHlwZS5zaWduID0gZnVuY3Rpb24gc2lnbihtZXNzYWdlLCBzZWNyZXQpIHtcbiAgbWVzc2FnZSA9IHBhcnNlQnl0ZXMobWVzc2FnZSk7XG4gIHZhciBrZXkgPSB0aGlzLmtleUZyb21TZWNyZXQoc2VjcmV0KTtcbiAgdmFyIHIgPSB0aGlzLmhhc2hJbnQoa2V5Lm1lc3NhZ2VQcmVmaXgoKSwgbWVzc2FnZSk7XG4gIHZhciBSID0gdGhpcy5nLm11bChyKTtcbiAgdmFyIFJlbmNvZGVkID0gdGhpcy5lbmNvZGVQb2ludChSKTtcbiAgdmFyIHNfID0gdGhpcy5oYXNoSW50KFJlbmNvZGVkLCBrZXkucHViQnl0ZXMoKSwgbWVzc2FnZSlcbiAgICAgICAgICAgICAgIC5tdWwoa2V5LnByaXYoKSk7XG4gIHZhciBTID0gci5hZGQoc18pLnVtb2QodGhpcy5jdXJ2ZS5uKTtcbiAgcmV0dXJuIHRoaXMubWFrZVNpZ25hdHVyZSh7IFI6IFIsIFM6IFMsIFJlbmNvZGVkOiBSZW5jb2RlZCB9KTtcbn07XG5cbi8qKlxuKiBAcGFyYW0ge0FycmF5fSBtZXNzYWdlIC0gbWVzc2FnZSBieXRlc1xuKiBAcGFyYW0ge0FycmF5fFN0cmluZ3xTaWduYXR1cmV9IHNpZyAtIHNpZyBieXRlc1xuKiBAcGFyYW0ge0FycmF5fFN0cmluZ3xQb2ludHxLZXlQYWlyfSBwdWIgLSBwdWJsaWMga2V5XG4qIEByZXR1cm5zIHtCb29sZWFufSAtIHRydWUgaWYgcHVibGljIGtleSBtYXRjaGVzIHNpZyBvZiBtZXNzYWdlXG4qL1xuRUREU0EucHJvdG90eXBlLnZlcmlmeSA9IGZ1bmN0aW9uIHZlcmlmeShtZXNzYWdlLCBzaWcsIHB1Yikge1xuICBtZXNzYWdlID0gcGFyc2VCeXRlcyhtZXNzYWdlKTtcbiAgc2lnID0gdGhpcy5tYWtlU2lnbmF0dXJlKHNpZyk7XG4gIHZhciBrZXkgPSB0aGlzLmtleUZyb21QdWJsaWMocHViKTtcbiAgdmFyIGggPSB0aGlzLmhhc2hJbnQoc2lnLlJlbmNvZGVkKCksIGtleS5wdWJCeXRlcygpLCBtZXNzYWdlKTtcbiAgdmFyIFNHID0gdGhpcy5nLm11bChzaWcuUygpKTtcbiAgdmFyIFJwbHVzQWggPSBzaWcuUigpLmFkZChrZXkucHViKCkubXVsKGgpKTtcbiAgcmV0dXJuIFJwbHVzQWguZXEoU0cpO1xufTtcblxuRUREU0EucHJvdG90eXBlLmhhc2hJbnQgPSBmdW5jdGlvbiBoYXNoSW50KCkge1xuICB2YXIgaGFzaCA9IHRoaXMuaGFzaCgpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKylcbiAgICBoYXNoLnVwZGF0ZShhcmd1bWVudHNbaV0pO1xuICByZXR1cm4gdXRpbHMuaW50RnJvbUxFKGhhc2guZGlnZXN0KCkpLnVtb2QodGhpcy5jdXJ2ZS5uKTtcbn07XG5cbkVERFNBLnByb3RvdHlwZS5rZXlGcm9tUHVibGljID0gZnVuY3Rpb24ga2V5RnJvbVB1YmxpYyhwdWIpIHtcbiAgcmV0dXJuIEtleVBhaXIuZnJvbVB1YmxpYyh0aGlzLCBwdWIpO1xufTtcblxuRUREU0EucHJvdG90eXBlLmtleUZyb21TZWNyZXQgPSBmdW5jdGlvbiBrZXlGcm9tU2VjcmV0KHNlY3JldCkge1xuICByZXR1cm4gS2V5UGFpci5mcm9tU2VjcmV0KHRoaXMsIHNlY3JldCk7XG59O1xuXG5FRERTQS5wcm90b3R5cGUubWFrZVNpZ25hdHVyZSA9IGZ1bmN0aW9uIG1ha2VTaWduYXR1cmUoc2lnKSB7XG4gIGlmIChzaWcgaW5zdGFuY2VvZiBTaWduYXR1cmUpXG4gICAgcmV0dXJuIHNpZztcbiAgcmV0dXJuIG5ldyBTaWduYXR1cmUodGhpcywgc2lnKTtcbn07XG5cbi8qKlxuKiAqIGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9kcmFmdC1qb3NlZnNzb24tZWRkc2EtZWQyNTUxOS0wMyNzZWN0aW9uLTUuMlxuKlxuKiBFRERTQSBkZWZpbmVzIG1ldGhvZHMgZm9yIGVuY29kaW5nIGFuZCBkZWNvZGluZyBwb2ludHMgYW5kIGludGVnZXJzLiBUaGVzZSBhcmVcbiogaGVscGVyIGNvbnZlbmllbmNlIG1ldGhvZHMsIHRoYXQgcGFzcyBhbG9uZyB0byB1dGlsaXR5IGZ1bmN0aW9ucyBpbXBsaWVkXG4qIHBhcmFtZXRlcnMuXG4qXG4qL1xuRUREU0EucHJvdG90eXBlLmVuY29kZVBvaW50ID0gZnVuY3Rpb24gZW5jb2RlUG9pbnQocG9pbnQpIHtcbiAgdmFyIGVuYyA9IHBvaW50LmdldFkoKS50b0FycmF5KCdsZScsIHRoaXMuZW5jb2RpbmdMZW5ndGgpO1xuICBlbmNbdGhpcy5lbmNvZGluZ0xlbmd0aCAtIDFdIHw9IHBvaW50LmdldFgoKS5pc09kZCgpID8gMHg4MCA6IDA7XG4gIHJldHVybiBlbmM7XG59O1xuXG5FRERTQS5wcm90b3R5cGUuZGVjb2RlUG9pbnQgPSBmdW5jdGlvbiBkZWNvZGVQb2ludChieXRlcykge1xuICBieXRlcyA9IHV0aWxzLnBhcnNlQnl0ZXMoYnl0ZXMpO1xuXG4gIHZhciBsYXN0SXggPSBieXRlcy5sZW5ndGggLSAxO1xuICB2YXIgbm9ybWVkID0gYnl0ZXMuc2xpY2UoMCwgbGFzdEl4KS5jb25jYXQoYnl0ZXNbbGFzdEl4XSAmIH4weDgwKTtcbiAgdmFyIHhJc09kZCA9IChieXRlc1tsYXN0SXhdICYgMHg4MCkgIT09IDA7XG5cbiAgdmFyIHkgPSB1dGlscy5pbnRGcm9tTEUobm9ybWVkKTtcbiAgcmV0dXJuIHRoaXMuY3VydmUucG9pbnRGcm9tWSh5LCB4SXNPZGQpO1xufTtcblxuRUREU0EucHJvdG90eXBlLmVuY29kZUludCA9IGZ1bmN0aW9uIGVuY29kZUludChudW0pIHtcbiAgcmV0dXJuIG51bS50b0FycmF5KCdsZScsIHRoaXMuZW5jb2RpbmdMZW5ndGgpO1xufTtcblxuRUREU0EucHJvdG90eXBlLmRlY29kZUludCA9IGZ1bmN0aW9uIGRlY29kZUludChieXRlcykge1xuICByZXR1cm4gdXRpbHMuaW50RnJvbUxFKGJ5dGVzKTtcbn07XG5cbkVERFNBLnByb3RvdHlwZS5pc1BvaW50ID0gZnVuY3Rpb24gaXNQb2ludCh2YWwpIHtcbiAgcmV0dXJuIHZhbCBpbnN0YW5jZW9mIHRoaXMucG9pbnRDbGFzcztcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG52YXIgYXNzZXJ0ID0gdXRpbHMuYXNzZXJ0O1xudmFyIHBhcnNlQnl0ZXMgPSB1dGlscy5wYXJzZUJ5dGVzO1xudmFyIGNhY2hlZFByb3BlcnR5ID0gdXRpbHMuY2FjaGVkUHJvcGVydHk7XG5cbi8qKlxuKiBAcGFyYW0ge0VERFNBfSBlZGRzYSAtIGluc3RhbmNlXG4qIEBwYXJhbSB7T2JqZWN0fSBwYXJhbXMgLSBwdWJsaWMvcHJpdmF0ZSBrZXkgcGFyYW1ldGVyc1xuKlxuKiBAcGFyYW0ge0FycmF5PEJ5dGU+fSBbcGFyYW1zLnNlY3JldF0gLSBzZWNyZXQgc2VlZCBieXRlc1xuKiBAcGFyYW0ge1BvaW50fSBbcGFyYW1zLnB1Yl0gLSBwdWJsaWMga2V5IHBvaW50IChha2EgYEFgIGluIGVkZHNhIHRlcm1zKVxuKiBAcGFyYW0ge0FycmF5PEJ5dGU+fSBbcGFyYW1zLnB1Yl0gLSBwdWJsaWMga2V5IHBvaW50IGVuY29kZWQgYXMgYnl0ZXNcbipcbiovXG5mdW5jdGlvbiBLZXlQYWlyKGVkZHNhLCBwYXJhbXMpIHtcbiAgdGhpcy5lZGRzYSA9IGVkZHNhO1xuICB0aGlzLl9zZWNyZXQgPSBwYXJzZUJ5dGVzKHBhcmFtcy5zZWNyZXQpO1xuICBpZiAoZWRkc2EuaXNQb2ludChwYXJhbXMucHViKSlcbiAgICB0aGlzLl9wdWIgPSBwYXJhbXMucHViO1xuICBlbHNlXG4gICAgdGhpcy5fcHViQnl0ZXMgPSBwYXJzZUJ5dGVzKHBhcmFtcy5wdWIpO1xufVxuXG5LZXlQYWlyLmZyb21QdWJsaWMgPSBmdW5jdGlvbiBmcm9tUHVibGljKGVkZHNhLCBwdWIpIHtcbiAgaWYgKHB1YiBpbnN0YW5jZW9mIEtleVBhaXIpXG4gICAgcmV0dXJuIHB1YjtcbiAgcmV0dXJuIG5ldyBLZXlQYWlyKGVkZHNhLCB7IHB1YjogcHViIH0pO1xufTtcblxuS2V5UGFpci5mcm9tU2VjcmV0ID0gZnVuY3Rpb24gZnJvbVNlY3JldChlZGRzYSwgc2VjcmV0KSB7XG4gIGlmIChzZWNyZXQgaW5zdGFuY2VvZiBLZXlQYWlyKVxuICAgIHJldHVybiBzZWNyZXQ7XG4gIHJldHVybiBuZXcgS2V5UGFpcihlZGRzYSwgeyBzZWNyZXQ6IHNlY3JldCB9KTtcbn07XG5cbktleVBhaXIucHJvdG90eXBlLnNlY3JldCA9IGZ1bmN0aW9uIHNlY3JldCgpIHtcbiAgcmV0dXJuIHRoaXMuX3NlY3JldDtcbn07XG5cbmNhY2hlZFByb3BlcnR5KEtleVBhaXIsICdwdWJCeXRlcycsIGZ1bmN0aW9uIHB1YkJ5dGVzKCkge1xuICByZXR1cm4gdGhpcy5lZGRzYS5lbmNvZGVQb2ludCh0aGlzLnB1YigpKTtcbn0pO1xuXG5jYWNoZWRQcm9wZXJ0eShLZXlQYWlyLCAncHViJywgZnVuY3Rpb24gcHViKCkge1xuICBpZiAodGhpcy5fcHViQnl0ZXMpXG4gICAgcmV0dXJuIHRoaXMuZWRkc2EuZGVjb2RlUG9pbnQodGhpcy5fcHViQnl0ZXMpO1xuICByZXR1cm4gdGhpcy5lZGRzYS5nLm11bCh0aGlzLnByaXYoKSk7XG59KTtcblxuY2FjaGVkUHJvcGVydHkoS2V5UGFpciwgJ3ByaXZCeXRlcycsIGZ1bmN0aW9uIHByaXZCeXRlcygpIHtcbiAgdmFyIGVkZHNhID0gdGhpcy5lZGRzYTtcbiAgdmFyIGhhc2ggPSB0aGlzLmhhc2goKTtcbiAgdmFyIGxhc3RJeCA9IGVkZHNhLmVuY29kaW5nTGVuZ3RoIC0gMTtcblxuICB2YXIgYSA9IGhhc2guc2xpY2UoMCwgZWRkc2EuZW5jb2RpbmdMZW5ndGgpO1xuICBhWzBdICY9IDI0ODtcbiAgYVtsYXN0SXhdICY9IDEyNztcbiAgYVtsYXN0SXhdIHw9IDY0O1xuXG4gIHJldHVybiBhO1xufSk7XG5cbmNhY2hlZFByb3BlcnR5KEtleVBhaXIsICdwcml2JywgZnVuY3Rpb24gcHJpdigpIHtcbiAgcmV0dXJuIHRoaXMuZWRkc2EuZGVjb2RlSW50KHRoaXMucHJpdkJ5dGVzKCkpO1xufSk7XG5cbmNhY2hlZFByb3BlcnR5KEtleVBhaXIsICdoYXNoJywgZnVuY3Rpb24gaGFzaCgpIHtcbiAgcmV0dXJuIHRoaXMuZWRkc2EuaGFzaCgpLnVwZGF0ZSh0aGlzLnNlY3JldCgpKS5kaWdlc3QoKTtcbn0pO1xuXG5jYWNoZWRQcm9wZXJ0eShLZXlQYWlyLCAnbWVzc2FnZVByZWZpeCcsIGZ1bmN0aW9uIG1lc3NhZ2VQcmVmaXgoKSB7XG4gIHJldHVybiB0aGlzLmhhc2goKS5zbGljZSh0aGlzLmVkZHNhLmVuY29kaW5nTGVuZ3RoKTtcbn0pO1xuXG5LZXlQYWlyLnByb3RvdHlwZS5zaWduID0gZnVuY3Rpb24gc2lnbihtZXNzYWdlKSB7XG4gIGFzc2VydCh0aGlzLl9zZWNyZXQsICdLZXlQYWlyIGNhbiBvbmx5IHZlcmlmeScpO1xuICByZXR1cm4gdGhpcy5lZGRzYS5zaWduKG1lc3NhZ2UsIHRoaXMpO1xufTtcblxuS2V5UGFpci5wcm90b3R5cGUudmVyaWZ5ID0gZnVuY3Rpb24gdmVyaWZ5KG1lc3NhZ2UsIHNpZykge1xuICByZXR1cm4gdGhpcy5lZGRzYS52ZXJpZnkobWVzc2FnZSwgc2lnLCB0aGlzKTtcbn07XG5cbktleVBhaXIucHJvdG90eXBlLmdldFNlY3JldCA9IGZ1bmN0aW9uIGdldFNlY3JldChlbmMpIHtcbiAgYXNzZXJ0KHRoaXMuX3NlY3JldCwgJ0tleVBhaXIgaXMgcHVibGljIG9ubHknKTtcbiAgcmV0dXJuIHV0aWxzLmVuY29kZSh0aGlzLnNlY3JldCgpLCBlbmMpO1xufTtcblxuS2V5UGFpci5wcm90b3R5cGUuZ2V0UHVibGljID0gZnVuY3Rpb24gZ2V0UHVibGljKGVuYykge1xuICByZXR1cm4gdXRpbHMuZW5jb2RlKHRoaXMucHViQnl0ZXMoKSwgZW5jKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gS2V5UGFpcjtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEJOID0gcmVxdWlyZSgnYm4uanMnKTtcbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG52YXIgYXNzZXJ0ID0gdXRpbHMuYXNzZXJ0O1xudmFyIGNhY2hlZFByb3BlcnR5ID0gdXRpbHMuY2FjaGVkUHJvcGVydHk7XG52YXIgcGFyc2VCeXRlcyA9IHV0aWxzLnBhcnNlQnl0ZXM7XG5cbi8qKlxuKiBAcGFyYW0ge0VERFNBfSBlZGRzYSAtIGVkZHNhIGluc3RhbmNlXG4qIEBwYXJhbSB7QXJyYXk8Qnl0ZXM+fE9iamVjdH0gc2lnIC1cbiogQHBhcmFtIHtBcnJheTxCeXRlcz58UG9pbnR9IFtzaWcuUl0gLSBSIHBvaW50IGFzIFBvaW50IG9yIGJ5dGVzXG4qIEBwYXJhbSB7QXJyYXk8Qnl0ZXM+fGJufSBbc2lnLlNdIC0gUyBzY2FsYXIgYXMgYm4gb3IgYnl0ZXNcbiogQHBhcmFtIHtBcnJheTxCeXRlcz59IFtzaWcuUmVuY29kZWRdIC0gUiBwb2ludCBlbmNvZGVkXG4qIEBwYXJhbSB7QXJyYXk8Qnl0ZXM+fSBbc2lnLlNlbmNvZGVkXSAtIFMgc2NhbGFyIGVuY29kZWRcbiovXG5mdW5jdGlvbiBTaWduYXR1cmUoZWRkc2EsIHNpZykge1xuICB0aGlzLmVkZHNhID0gZWRkc2E7XG5cbiAgaWYgKHR5cGVvZiBzaWcgIT09ICdvYmplY3QnKVxuICAgIHNpZyA9IHBhcnNlQnl0ZXMoc2lnKTtcblxuICBpZiAoQXJyYXkuaXNBcnJheShzaWcpKSB7XG4gICAgc2lnID0ge1xuICAgICAgUjogc2lnLnNsaWNlKDAsIGVkZHNhLmVuY29kaW5nTGVuZ3RoKSxcbiAgICAgIFM6IHNpZy5zbGljZShlZGRzYS5lbmNvZGluZ0xlbmd0aClcbiAgICB9O1xuICB9XG5cbiAgYXNzZXJ0KHNpZy5SICYmIHNpZy5TLCAnU2lnbmF0dXJlIHdpdGhvdXQgUiBvciBTJyk7XG5cbiAgaWYgKGVkZHNhLmlzUG9pbnQoc2lnLlIpKVxuICAgIHRoaXMuX1IgPSBzaWcuUjtcbiAgaWYgKHNpZy5TIGluc3RhbmNlb2YgQk4pXG4gICAgdGhpcy5fUyA9IHNpZy5TO1xuXG4gIHRoaXMuX1JlbmNvZGVkID0gQXJyYXkuaXNBcnJheShzaWcuUikgPyBzaWcuUiA6IHNpZy5SZW5jb2RlZDtcbiAgdGhpcy5fU2VuY29kZWQgPSBBcnJheS5pc0FycmF5KHNpZy5TKSA/IHNpZy5TIDogc2lnLlNlbmNvZGVkO1xufVxuXG5jYWNoZWRQcm9wZXJ0eShTaWduYXR1cmUsICdTJywgZnVuY3Rpb24gUygpIHtcbiAgcmV0dXJuIHRoaXMuZWRkc2EuZGVjb2RlSW50KHRoaXMuU2VuY29kZWQoKSk7XG59KTtcblxuY2FjaGVkUHJvcGVydHkoU2lnbmF0dXJlLCAnUicsIGZ1bmN0aW9uIFIoKSB7XG4gIHJldHVybiB0aGlzLmVkZHNhLmRlY29kZVBvaW50KHRoaXMuUmVuY29kZWQoKSk7XG59KTtcblxuY2FjaGVkUHJvcGVydHkoU2lnbmF0dXJlLCAnUmVuY29kZWQnLCBmdW5jdGlvbiBSZW5jb2RlZCgpIHtcbiAgcmV0dXJuIHRoaXMuZWRkc2EuZW5jb2RlUG9pbnQodGhpcy5SKCkpO1xufSk7XG5cbmNhY2hlZFByb3BlcnR5KFNpZ25hdHVyZSwgJ1NlbmNvZGVkJywgZnVuY3Rpb24gU2VuY29kZWQoKSB7XG4gIHJldHVybiB0aGlzLmVkZHNhLmVuY29kZUludCh0aGlzLlMoKSk7XG59KTtcblxuU2lnbmF0dXJlLnByb3RvdHlwZS50b0J5dGVzID0gZnVuY3Rpb24gdG9CeXRlcygpIHtcbiAgcmV0dXJuIHRoaXMuUmVuY29kZWQoKS5jb25jYXQodGhpcy5TZW5jb2RlZCgpKTtcbn07XG5cblNpZ25hdHVyZS5wcm90b3R5cGUudG9IZXggPSBmdW5jdGlvbiB0b0hleCgpIHtcbiAgcmV0dXJuIHV0aWxzLmVuY29kZSh0aGlzLnRvQnl0ZXMoKSwgJ2hleCcpLnRvVXBwZXJDYXNlKCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNpZ25hdHVyZTtcbiIsIi8vIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2luZHV0bnkvc2VsZi1zaWduZWQvYmxvYi9naC1wYWdlcy9saWIvYXNuMS5qc1xuLy8gRmVkb3IsIHlvdSBhcmUgYW1hemluZy5cbid1c2Ugc3RyaWN0J1xuXG52YXIgYXNuMSA9IHJlcXVpcmUoJ2FzbjEuanMnKVxuXG5leHBvcnRzLmNlcnRpZmljYXRlID0gcmVxdWlyZSgnLi9jZXJ0aWZpY2F0ZScpXG5cbnZhciBSU0FQcml2YXRlS2V5ID0gYXNuMS5kZWZpbmUoJ1JTQVByaXZhdGVLZXknLCBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuc2VxKCkub2JqKFxuICAgIHRoaXMua2V5KCd2ZXJzaW9uJykuaW50KCksXG4gICAgdGhpcy5rZXkoJ21vZHVsdXMnKS5pbnQoKSxcbiAgICB0aGlzLmtleSgncHVibGljRXhwb25lbnQnKS5pbnQoKSxcbiAgICB0aGlzLmtleSgncHJpdmF0ZUV4cG9uZW50JykuaW50KCksXG4gICAgdGhpcy5rZXkoJ3ByaW1lMScpLmludCgpLFxuICAgIHRoaXMua2V5KCdwcmltZTInKS5pbnQoKSxcbiAgICB0aGlzLmtleSgnZXhwb25lbnQxJykuaW50KCksXG4gICAgdGhpcy5rZXkoJ2V4cG9uZW50MicpLmludCgpLFxuICAgIHRoaXMua2V5KCdjb2VmZmljaWVudCcpLmludCgpXG4gIClcbn0pXG5leHBvcnRzLlJTQVByaXZhdGVLZXkgPSBSU0FQcml2YXRlS2V5XG5cbnZhciBSU0FQdWJsaWNLZXkgPSBhc24xLmRlZmluZSgnUlNBUHVibGljS2V5JywgZnVuY3Rpb24gKCkge1xuICB0aGlzLnNlcSgpLm9iaihcbiAgICB0aGlzLmtleSgnbW9kdWx1cycpLmludCgpLFxuICAgIHRoaXMua2V5KCdwdWJsaWNFeHBvbmVudCcpLmludCgpXG4gIClcbn0pXG5leHBvcnRzLlJTQVB1YmxpY0tleSA9IFJTQVB1YmxpY0tleVxuXG52YXIgUHVibGljS2V5ID0gYXNuMS5kZWZpbmUoJ1N1YmplY3RQdWJsaWNLZXlJbmZvJywgZnVuY3Rpb24gKCkge1xuICB0aGlzLnNlcSgpLm9iaihcbiAgICB0aGlzLmtleSgnYWxnb3JpdGhtJykudXNlKEFsZ29yaXRobUlkZW50aWZpZXIpLFxuICAgIHRoaXMua2V5KCdzdWJqZWN0UHVibGljS2V5JykuYml0c3RyKClcbiAgKVxufSlcbmV4cG9ydHMuUHVibGljS2V5ID0gUHVibGljS2V5XG5cbnZhciBBbGdvcml0aG1JZGVudGlmaWVyID0gYXNuMS5kZWZpbmUoJ0FsZ29yaXRobUlkZW50aWZpZXInLCBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuc2VxKCkub2JqKFxuICAgIHRoaXMua2V5KCdhbGdvcml0aG0nKS5vYmppZCgpLFxuICAgIHRoaXMua2V5KCdub25lJykubnVsbF8oKS5vcHRpb25hbCgpLFxuICAgIHRoaXMua2V5KCdjdXJ2ZScpLm9iamlkKCkub3B0aW9uYWwoKSxcbiAgICB0aGlzLmtleSgncGFyYW1zJykuc2VxKCkub2JqKFxuICAgICAgdGhpcy5rZXkoJ3AnKS5pbnQoKSxcbiAgICAgIHRoaXMua2V5KCdxJykuaW50KCksXG4gICAgICB0aGlzLmtleSgnZycpLmludCgpXG4gICAgKS5vcHRpb25hbCgpXG4gIClcbn0pXG5cbnZhciBQcml2YXRlS2V5SW5mbyA9IGFzbjEuZGVmaW5lKCdQcml2YXRlS2V5SW5mbycsIGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5zZXEoKS5vYmooXG4gICAgdGhpcy5rZXkoJ3ZlcnNpb24nKS5pbnQoKSxcbiAgICB0aGlzLmtleSgnYWxnb3JpdGhtJykudXNlKEFsZ29yaXRobUlkZW50aWZpZXIpLFxuICAgIHRoaXMua2V5KCdzdWJqZWN0UHJpdmF0ZUtleScpLm9jdHN0cigpXG4gIClcbn0pXG5leHBvcnRzLlByaXZhdGVLZXkgPSBQcml2YXRlS2V5SW5mb1xudmFyIEVuY3J5cHRlZFByaXZhdGVLZXlJbmZvID0gYXNuMS5kZWZpbmUoJ0VuY3J5cHRlZFByaXZhdGVLZXlJbmZvJywgZnVuY3Rpb24gKCkge1xuICB0aGlzLnNlcSgpLm9iaihcbiAgICB0aGlzLmtleSgnYWxnb3JpdGhtJykuc2VxKCkub2JqKFxuICAgICAgdGhpcy5rZXkoJ2lkJykub2JqaWQoKSxcbiAgICAgIHRoaXMua2V5KCdkZWNyeXB0Jykuc2VxKCkub2JqKFxuICAgICAgICB0aGlzLmtleSgna2RlJykuc2VxKCkub2JqKFxuICAgICAgICAgIHRoaXMua2V5KCdpZCcpLm9iamlkKCksXG4gICAgICAgICAgdGhpcy5rZXkoJ2tkZXBhcmFtcycpLnNlcSgpLm9iaihcbiAgICAgICAgICAgIHRoaXMua2V5KCdzYWx0Jykub2N0c3RyKCksXG4gICAgICAgICAgICB0aGlzLmtleSgnaXRlcnMnKS5pbnQoKVxuICAgICAgICAgIClcbiAgICAgICAgKSxcbiAgICAgICAgdGhpcy5rZXkoJ2NpcGhlcicpLnNlcSgpLm9iaihcbiAgICAgICAgICB0aGlzLmtleSgnYWxnbycpLm9iamlkKCksXG4gICAgICAgICAgdGhpcy5rZXkoJ2l2Jykub2N0c3RyKClcbiAgICAgICAgKVxuICAgICAgKVxuICAgICksXG4gICAgdGhpcy5rZXkoJ3N1YmplY3RQcml2YXRlS2V5Jykub2N0c3RyKClcbiAgKVxufSlcblxuZXhwb3J0cy5FbmNyeXB0ZWRQcml2YXRlS2V5ID0gRW5jcnlwdGVkUHJpdmF0ZUtleUluZm9cblxudmFyIERTQVByaXZhdGVLZXkgPSBhc24xLmRlZmluZSgnRFNBUHJpdmF0ZUtleScsIGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5zZXEoKS5vYmooXG4gICAgdGhpcy5rZXkoJ3ZlcnNpb24nKS5pbnQoKSxcbiAgICB0aGlzLmtleSgncCcpLmludCgpLFxuICAgIHRoaXMua2V5KCdxJykuaW50KCksXG4gICAgdGhpcy5rZXkoJ2cnKS5pbnQoKSxcbiAgICB0aGlzLmtleSgncHViX2tleScpLmludCgpLFxuICAgIHRoaXMua2V5KCdwcml2X2tleScpLmludCgpXG4gIClcbn0pXG5leHBvcnRzLkRTQVByaXZhdGVLZXkgPSBEU0FQcml2YXRlS2V5XG5cbmV4cG9ydHMuRFNBcGFyYW0gPSBhc24xLmRlZmluZSgnRFNBcGFyYW0nLCBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuaW50KClcbn0pXG5cbnZhciBFQ1ByaXZhdGVLZXkgPSBhc24xLmRlZmluZSgnRUNQcml2YXRlS2V5JywgZnVuY3Rpb24gKCkge1xuICB0aGlzLnNlcSgpLm9iaihcbiAgICB0aGlzLmtleSgndmVyc2lvbicpLmludCgpLFxuICAgIHRoaXMua2V5KCdwcml2YXRlS2V5Jykub2N0c3RyKCksXG4gICAgdGhpcy5rZXkoJ3BhcmFtZXRlcnMnKS5vcHRpb25hbCgpLmV4cGxpY2l0KDApLnVzZShFQ1BhcmFtZXRlcnMpLFxuICAgIHRoaXMua2V5KCdwdWJsaWNLZXknKS5vcHRpb25hbCgpLmV4cGxpY2l0KDEpLmJpdHN0cigpXG4gIClcbn0pXG5leHBvcnRzLkVDUHJpdmF0ZUtleSA9IEVDUHJpdmF0ZUtleVxuXG52YXIgRUNQYXJhbWV0ZXJzID0gYXNuMS5kZWZpbmUoJ0VDUGFyYW1ldGVycycsIGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5jaG9pY2Uoe1xuICAgIG5hbWVkQ3VydmU6IHRoaXMub2JqaWQoKVxuICB9KVxufSlcblxuZXhwb3J0cy5zaWduYXR1cmUgPSBhc24xLmRlZmluZSgnc2lnbmF0dXJlJywgZnVuY3Rpb24gKCkge1xuICB0aGlzLnNlcSgpLm9iaihcbiAgICB0aGlzLmtleSgncicpLmludCgpLFxuICAgIHRoaXMua2V5KCdzJykuaW50KClcbiAgKVxufSlcbiIsInZhciBhc24xID0gcmVxdWlyZSgnLi4vYXNuMScpO1xudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcblxudmFyIGFwaSA9IGV4cG9ydHM7XG5cbmFwaS5kZWZpbmUgPSBmdW5jdGlvbiBkZWZpbmUobmFtZSwgYm9keSkge1xuICByZXR1cm4gbmV3IEVudGl0eShuYW1lLCBib2R5KTtcbn07XG5cbmZ1bmN0aW9uIEVudGl0eShuYW1lLCBib2R5KSB7XG4gIHRoaXMubmFtZSA9IG5hbWU7XG4gIHRoaXMuYm9keSA9IGJvZHk7XG5cbiAgdGhpcy5kZWNvZGVycyA9IHt9O1xuICB0aGlzLmVuY29kZXJzID0ge307XG59O1xuXG5FbnRpdHkucHJvdG90eXBlLl9jcmVhdGVOYW1lZCA9IGZ1bmN0aW9uIGNyZWF0ZU5hbWVkKGJhc2UpIHtcbiAgdmFyIG5hbWVkO1xuICB0cnkge1xuICAgIG5hbWVkID0gcmVxdWlyZSgndm0nKS5ydW5JblRoaXNDb250ZXh0KFxuICAgICAgJyhmdW5jdGlvbiAnICsgdGhpcy5uYW1lICsgJyhlbnRpdHkpIHtcXG4nICtcbiAgICAgICcgIHRoaXMuX2luaXROYW1lZChlbnRpdHkpO1xcbicgK1xuICAgICAgJ30pJ1xuICAgICk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBuYW1lZCA9IGZ1bmN0aW9uIChlbnRpdHkpIHtcbiAgICAgIHRoaXMuX2luaXROYW1lZChlbnRpdHkpO1xuICAgIH07XG4gIH1cbiAgaW5oZXJpdHMobmFtZWQsIGJhc2UpO1xuICBuYW1lZC5wcm90b3R5cGUuX2luaXROYW1lZCA9IGZ1bmN0aW9uIGluaXRuYW1lZChlbnRpdHkpIHtcbiAgICBiYXNlLmNhbGwodGhpcywgZW50aXR5KTtcbiAgfTtcblxuICByZXR1cm4gbmV3IG5hbWVkKHRoaXMpO1xufTtcblxuRW50aXR5LnByb3RvdHlwZS5fZ2V0RGVjb2RlciA9IGZ1bmN0aW9uIF9nZXREZWNvZGVyKGVuYykge1xuICBlbmMgPSBlbmMgfHwgJ2Rlcic7XG4gIC8vIExhemlseSBjcmVhdGUgZGVjb2RlclxuICBpZiAoIXRoaXMuZGVjb2RlcnMuaGFzT3duUHJvcGVydHkoZW5jKSlcbiAgICB0aGlzLmRlY29kZXJzW2VuY10gPSB0aGlzLl9jcmVhdGVOYW1lZChhc24xLmRlY29kZXJzW2VuY10pO1xuICByZXR1cm4gdGhpcy5kZWNvZGVyc1tlbmNdO1xufTtcblxuRW50aXR5LnByb3RvdHlwZS5kZWNvZGUgPSBmdW5jdGlvbiBkZWNvZGUoZGF0YSwgZW5jLCBvcHRpb25zKSB7XG4gIHJldHVybiB0aGlzLl9nZXREZWNvZGVyKGVuYykuZGVjb2RlKGRhdGEsIG9wdGlvbnMpO1xufTtcblxuRW50aXR5LnByb3RvdHlwZS5fZ2V0RW5jb2RlciA9IGZ1bmN0aW9uIF9nZXRFbmNvZGVyKGVuYykge1xuICBlbmMgPSBlbmMgfHwgJ2Rlcic7XG4gIC8vIExhemlseSBjcmVhdGUgZW5jb2RlclxuICBpZiAoIXRoaXMuZW5jb2RlcnMuaGFzT3duUHJvcGVydHkoZW5jKSlcbiAgICB0aGlzLmVuY29kZXJzW2VuY10gPSB0aGlzLl9jcmVhdGVOYW1lZChhc24xLmVuY29kZXJzW2VuY10pO1xuICByZXR1cm4gdGhpcy5lbmNvZGVyc1tlbmNdO1xufTtcblxuRW50aXR5LnByb3RvdHlwZS5lbmNvZGUgPSBmdW5jdGlvbiBlbmNvZGUoZGF0YSwgZW5jLCAvKiBpbnRlcm5hbCAqLyByZXBvcnRlcikge1xuICByZXR1cm4gdGhpcy5fZ2V0RW5jb2RlcihlbmMpLmVuY29kZShkYXRhLCByZXBvcnRlcik7XG59O1xuIiwidmFyIGluZGV4T2YgPSBmdW5jdGlvbiAoeHMsIGl0ZW0pIHtcbiAgICBpZiAoeHMuaW5kZXhPZikgcmV0dXJuIHhzLmluZGV4T2YoaXRlbSk7XG4gICAgZWxzZSBmb3IgKHZhciBpID0gMDsgaSA8IHhzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmICh4c1tpXSA9PT0gaXRlbSkgcmV0dXJuIGk7XG4gICAgfVxuICAgIHJldHVybiAtMTtcbn07XG52YXIgT2JqZWN0X2tleXMgPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgaWYgKE9iamVjdC5rZXlzKSByZXR1cm4gT2JqZWN0LmtleXMob2JqKVxuICAgIGVsc2Uge1xuICAgICAgICB2YXIgcmVzID0gW107XG4gICAgICAgIGZvciAodmFyIGtleSBpbiBvYmopIHJlcy5wdXNoKGtleSlcbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG59O1xuXG52YXIgZm9yRWFjaCA9IGZ1bmN0aW9uICh4cywgZm4pIHtcbiAgICBpZiAoeHMuZm9yRWFjaCkgcmV0dXJuIHhzLmZvckVhY2goZm4pXG4gICAgZWxzZSBmb3IgKHZhciBpID0gMDsgaSA8IHhzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGZuKHhzW2ldLCBpLCB4cyk7XG4gICAgfVxufTtcblxudmFyIGRlZmluZVByb3AgPSAoZnVuY3Rpb24oKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAnXycsIHt9KTtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iaiwgbmFtZSwgdmFsdWUpIHtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIG5hbWUsIHtcbiAgICAgICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgdmFsdWU6IHZhbHVlXG4gICAgICAgICAgICB9KVxuICAgICAgICB9O1xuICAgIH0gY2F0Y2goZSkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24ob2JqLCBuYW1lLCB2YWx1ZSkge1xuICAgICAgICAgICAgb2JqW25hbWVdID0gdmFsdWU7XG4gICAgICAgIH07XG4gICAgfVxufSgpKTtcblxudmFyIGdsb2JhbHMgPSBbJ0FycmF5JywgJ0Jvb2xlYW4nLCAnRGF0ZScsICdFcnJvcicsICdFdmFsRXJyb3InLCAnRnVuY3Rpb24nLFxuJ0luZmluaXR5JywgJ0pTT04nLCAnTWF0aCcsICdOYU4nLCAnTnVtYmVyJywgJ09iamVjdCcsICdSYW5nZUVycm9yJyxcbidSZWZlcmVuY2VFcnJvcicsICdSZWdFeHAnLCAnU3RyaW5nJywgJ1N5bnRheEVycm9yJywgJ1R5cGVFcnJvcicsICdVUklFcnJvcicsXG4nZGVjb2RlVVJJJywgJ2RlY29kZVVSSUNvbXBvbmVudCcsICdlbmNvZGVVUkknLCAnZW5jb2RlVVJJQ29tcG9uZW50JywgJ2VzY2FwZScsXG4nZXZhbCcsICdpc0Zpbml0ZScsICdpc05hTicsICdwYXJzZUZsb2F0JywgJ3BhcnNlSW50JywgJ3VuZGVmaW5lZCcsICd1bmVzY2FwZSddO1xuXG5mdW5jdGlvbiBDb250ZXh0KCkge31cbkNvbnRleHQucHJvdG90eXBlID0ge307XG5cbnZhciBTY3JpcHQgPSBleHBvcnRzLlNjcmlwdCA9IGZ1bmN0aW9uIE5vZGVTY3JpcHQgKGNvZGUpIHtcbiAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgU2NyaXB0KSkgcmV0dXJuIG5ldyBTY3JpcHQoY29kZSk7XG4gICAgdGhpcy5jb2RlID0gY29kZTtcbn07XG5cblNjcmlwdC5wcm90b3R5cGUucnVuSW5Db250ZXh0ID0gZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICBpZiAoIShjb250ZXh0IGluc3RhbmNlb2YgQ29udGV4dCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIm5lZWRzIGEgJ2NvbnRleHQnIGFyZ3VtZW50LlwiKTtcbiAgICB9XG4gICAgXG4gICAgdmFyIGlmcmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lmcmFtZScpO1xuICAgIGlmICghaWZyYW1lLnN0eWxlKSBpZnJhbWUuc3R5bGUgPSB7fTtcbiAgICBpZnJhbWUuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICBcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGlmcmFtZSk7XG4gICAgXG4gICAgdmFyIHdpbiA9IGlmcmFtZS5jb250ZW50V2luZG93O1xuICAgIHZhciB3RXZhbCA9IHdpbi5ldmFsLCB3RXhlY1NjcmlwdCA9IHdpbi5leGVjU2NyaXB0O1xuXG4gICAgaWYgKCF3RXZhbCAmJiB3RXhlY1NjcmlwdCkge1xuICAgICAgICAvLyB3aW4uZXZhbCgpIG1hZ2ljYWxseSBhcHBlYXJzIHdoZW4gdGhpcyBpcyBjYWxsZWQgaW4gSUU6XG4gICAgICAgIHdFeGVjU2NyaXB0LmNhbGwod2luLCAnbnVsbCcpO1xuICAgICAgICB3RXZhbCA9IHdpbi5ldmFsO1xuICAgIH1cbiAgICBcbiAgICBmb3JFYWNoKE9iamVjdF9rZXlzKGNvbnRleHQpLCBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHdpbltrZXldID0gY29udGV4dFtrZXldO1xuICAgIH0pO1xuICAgIGZvckVhY2goZ2xvYmFscywgZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBpZiAoY29udGV4dFtrZXldKSB7XG4gICAgICAgICAgICB3aW5ba2V5XSA9IGNvbnRleHRba2V5XTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIFxuICAgIHZhciB3aW5LZXlzID0gT2JqZWN0X2tleXMod2luKTtcblxuICAgIHZhciByZXMgPSB3RXZhbC5jYWxsKHdpbiwgdGhpcy5jb2RlKTtcbiAgICBcbiAgICBmb3JFYWNoKE9iamVjdF9rZXlzKHdpbiksIGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgLy8gQXZvaWQgY29weWluZyBjaXJjdWxhciBvYmplY3RzIGxpa2UgYHRvcGAgYW5kIGB3aW5kb3dgIGJ5IG9ubHlcbiAgICAgICAgLy8gdXBkYXRpbmcgZXhpc3RpbmcgY29udGV4dCBwcm9wZXJ0aWVzIG9yIG5ldyBwcm9wZXJ0aWVzIGluIHRoZSBgd2luYFxuICAgICAgICAvLyB0aGF0IHdhcyBvbmx5IGludHJvZHVjZWQgYWZ0ZXIgdGhlIGV2YWwuXG4gICAgICAgIGlmIChrZXkgaW4gY29udGV4dCB8fCBpbmRleE9mKHdpbktleXMsIGtleSkgPT09IC0xKSB7XG4gICAgICAgICAgICBjb250ZXh0W2tleV0gPSB3aW5ba2V5XTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgZm9yRWFjaChnbG9iYWxzLCBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGlmICghKGtleSBpbiBjb250ZXh0KSkge1xuICAgICAgICAgICAgZGVmaW5lUHJvcChjb250ZXh0LCBrZXksIHdpbltrZXldKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIFxuICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoaWZyYW1lKTtcbiAgICBcbiAgICByZXR1cm4gcmVzO1xufTtcblxuU2NyaXB0LnByb3RvdHlwZS5ydW5JblRoaXNDb250ZXh0ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBldmFsKHRoaXMuY29kZSk7IC8vIG1heWJlLi4uXG59O1xuXG5TY3JpcHQucHJvdG90eXBlLnJ1bkluTmV3Q29udGV4dCA9IGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgdmFyIGN0eCA9IFNjcmlwdC5jcmVhdGVDb250ZXh0KGNvbnRleHQpO1xuICAgIHZhciByZXMgPSB0aGlzLnJ1bkluQ29udGV4dChjdHgpO1xuXG4gICAgaWYgKGNvbnRleHQpIHtcbiAgICAgICAgZm9yRWFjaChPYmplY3Rfa2V5cyhjdHgpLCBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICBjb250ZXh0W2tleV0gPSBjdHhba2V5XTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcztcbn07XG5cbmZvckVhY2goT2JqZWN0X2tleXMoU2NyaXB0LnByb3RvdHlwZSksIGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgZXhwb3J0c1tuYW1lXSA9IFNjcmlwdFtuYW1lXSA9IGZ1bmN0aW9uIChjb2RlKSB7XG4gICAgICAgIHZhciBzID0gU2NyaXB0KGNvZGUpO1xuICAgICAgICByZXR1cm4gc1tuYW1lXS5hcHBseShzLCBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSkpO1xuICAgIH07XG59KTtcblxuZXhwb3J0cy5pc0NvbnRleHQgPSBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgIHJldHVybiBjb250ZXh0IGluc3RhbmNlb2YgQ29udGV4dDtcbn07XG5cbmV4cG9ydHMuY3JlYXRlU2NyaXB0ID0gZnVuY3Rpb24gKGNvZGUpIHtcbiAgICByZXR1cm4gZXhwb3J0cy5TY3JpcHQoY29kZSk7XG59O1xuXG5leHBvcnRzLmNyZWF0ZUNvbnRleHQgPSBTY3JpcHQuY3JlYXRlQ29udGV4dCA9IGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgdmFyIGNvcHkgPSBuZXcgQ29udGV4dCgpO1xuICAgIGlmKHR5cGVvZiBjb250ZXh0ID09PSAnb2JqZWN0Jykge1xuICAgICAgICBmb3JFYWNoKE9iamVjdF9rZXlzKGNvbnRleHQpLCBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICBjb3B5W2tleV0gPSBjb250ZXh0W2tleV07XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gY29weTtcbn07XG4iLCJ2YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xuXG5mdW5jdGlvbiBSZXBvcnRlcihvcHRpb25zKSB7XG4gIHRoaXMuX3JlcG9ydGVyU3RhdGUgPSB7XG4gICAgb2JqOiBudWxsLFxuICAgIHBhdGg6IFtdLFxuICAgIG9wdGlvbnM6IG9wdGlvbnMgfHwge30sXG4gICAgZXJyb3JzOiBbXVxuICB9O1xufVxuZXhwb3J0cy5SZXBvcnRlciA9IFJlcG9ydGVyO1xuXG5SZXBvcnRlci5wcm90b3R5cGUuaXNFcnJvciA9IGZ1bmN0aW9uIGlzRXJyb3Iob2JqKSB7XG4gIHJldHVybiBvYmogaW5zdGFuY2VvZiBSZXBvcnRlckVycm9yO1xufTtcblxuUmVwb3J0ZXIucHJvdG90eXBlLnNhdmUgPSBmdW5jdGlvbiBzYXZlKCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9yZXBvcnRlclN0YXRlO1xuXG4gIHJldHVybiB7IG9iajogc3RhdGUub2JqLCBwYXRoTGVuOiBzdGF0ZS5wYXRoLmxlbmd0aCB9O1xufTtcblxuUmVwb3J0ZXIucHJvdG90eXBlLnJlc3RvcmUgPSBmdW5jdGlvbiByZXN0b3JlKGRhdGEpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVwb3J0ZXJTdGF0ZTtcblxuICBzdGF0ZS5vYmogPSBkYXRhLm9iajtcbiAgc3RhdGUucGF0aCA9IHN0YXRlLnBhdGguc2xpY2UoMCwgZGF0YS5wYXRoTGVuKTtcbn07XG5cblJlcG9ydGVyLnByb3RvdHlwZS5lbnRlcktleSA9IGZ1bmN0aW9uIGVudGVyS2V5KGtleSkge1xuICByZXR1cm4gdGhpcy5fcmVwb3J0ZXJTdGF0ZS5wYXRoLnB1c2goa2V5KTtcbn07XG5cblJlcG9ydGVyLnByb3RvdHlwZS5leGl0S2V5ID0gZnVuY3Rpb24gZXhpdEtleShpbmRleCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9yZXBvcnRlclN0YXRlO1xuXG4gIHN0YXRlLnBhdGggPSBzdGF0ZS5wYXRoLnNsaWNlKDAsIGluZGV4IC0gMSk7XG59O1xuXG5SZXBvcnRlci5wcm90b3R5cGUubGVhdmVLZXkgPSBmdW5jdGlvbiBsZWF2ZUtleShpbmRleCwga2V5LCB2YWx1ZSkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9yZXBvcnRlclN0YXRlO1xuXG4gIHRoaXMuZXhpdEtleShpbmRleCk7XG4gIGlmIChzdGF0ZS5vYmogIT09IG51bGwpXG4gICAgc3RhdGUub2JqW2tleV0gPSB2YWx1ZTtcbn07XG5cblJlcG9ydGVyLnByb3RvdHlwZS5wYXRoID0gZnVuY3Rpb24gcGF0aCgpIHtcbiAgcmV0dXJuIHRoaXMuX3JlcG9ydGVyU3RhdGUucGF0aC5qb2luKCcvJyk7XG59O1xuXG5SZXBvcnRlci5wcm90b3R5cGUuZW50ZXJPYmplY3QgPSBmdW5jdGlvbiBlbnRlck9iamVjdCgpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVwb3J0ZXJTdGF0ZTtcblxuICB2YXIgcHJldiA9IHN0YXRlLm9iajtcbiAgc3RhdGUub2JqID0ge307XG4gIHJldHVybiBwcmV2O1xufTtcblxuUmVwb3J0ZXIucHJvdG90eXBlLmxlYXZlT2JqZWN0ID0gZnVuY3Rpb24gbGVhdmVPYmplY3QocHJldikge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9yZXBvcnRlclN0YXRlO1xuXG4gIHZhciBub3cgPSBzdGF0ZS5vYmo7XG4gIHN0YXRlLm9iaiA9IHByZXY7XG4gIHJldHVybiBub3c7XG59O1xuXG5SZXBvcnRlci5wcm90b3R5cGUuZXJyb3IgPSBmdW5jdGlvbiBlcnJvcihtc2cpIHtcbiAgdmFyIGVycjtcbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVwb3J0ZXJTdGF0ZTtcblxuICB2YXIgaW5oZXJpdGVkID0gbXNnIGluc3RhbmNlb2YgUmVwb3J0ZXJFcnJvcjtcbiAgaWYgKGluaGVyaXRlZCkge1xuICAgIGVyciA9IG1zZztcbiAgfSBlbHNlIHtcbiAgICBlcnIgPSBuZXcgUmVwb3J0ZXJFcnJvcihzdGF0ZS5wYXRoLm1hcChmdW5jdGlvbihlbGVtKSB7XG4gICAgICByZXR1cm4gJ1snICsgSlNPTi5zdHJpbmdpZnkoZWxlbSkgKyAnXSc7XG4gICAgfSkuam9pbignJyksIG1zZy5tZXNzYWdlIHx8IG1zZywgbXNnLnN0YWNrKTtcbiAgfVxuXG4gIGlmICghc3RhdGUub3B0aW9ucy5wYXJ0aWFsKVxuICAgIHRocm93IGVycjtcblxuICBpZiAoIWluaGVyaXRlZClcbiAgICBzdGF0ZS5lcnJvcnMucHVzaChlcnIpO1xuXG4gIHJldHVybiBlcnI7XG59O1xuXG5SZXBvcnRlci5wcm90b3R5cGUud3JhcFJlc3VsdCA9IGZ1bmN0aW9uIHdyYXBSZXN1bHQocmVzdWx0KSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlcG9ydGVyU3RhdGU7XG4gIGlmICghc3RhdGUub3B0aW9ucy5wYXJ0aWFsKVxuICAgIHJldHVybiByZXN1bHQ7XG5cbiAgcmV0dXJuIHtcbiAgICByZXN1bHQ6IHRoaXMuaXNFcnJvcihyZXN1bHQpID8gbnVsbCA6IHJlc3VsdCxcbiAgICBlcnJvcnM6IHN0YXRlLmVycm9yc1xuICB9O1xufTtcblxuZnVuY3Rpb24gUmVwb3J0ZXJFcnJvcihwYXRoLCBtc2cpIHtcbiAgdGhpcy5wYXRoID0gcGF0aDtcbiAgdGhpcy5yZXRocm93KG1zZyk7XG59O1xuaW5oZXJpdHMoUmVwb3J0ZXJFcnJvciwgRXJyb3IpO1xuXG5SZXBvcnRlckVycm9yLnByb3RvdHlwZS5yZXRocm93ID0gZnVuY3Rpb24gcmV0aHJvdyhtc2cpIHtcbiAgdGhpcy5tZXNzYWdlID0gbXNnICsgJyBhdDogJyArICh0aGlzLnBhdGggfHwgJyhzaGFsbG93KScpO1xuICBpZiAoRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UpXG4gICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgUmVwb3J0ZXJFcnJvcik7XG5cbiAgaWYgKCF0aGlzLnN0YWNrKSB7XG4gICAgdHJ5IHtcbiAgICAgIC8vIElFIG9ubHkgYWRkcyBzdGFjayB3aGVuIHRocm93blxuICAgICAgdGhyb3cgbmV3IEVycm9yKHRoaXMubWVzc2FnZSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgdGhpcy5zdGFjayA9IGUuc3RhY2s7XG4gICAgfVxuICB9XG4gIHJldHVybiB0aGlzO1xufTtcbiIsInZhciBSZXBvcnRlciA9IHJlcXVpcmUoJy4uL2Jhc2UnKS5SZXBvcnRlcjtcbnZhciBFbmNvZGVyQnVmZmVyID0gcmVxdWlyZSgnLi4vYmFzZScpLkVuY29kZXJCdWZmZXI7XG52YXIgRGVjb2RlckJ1ZmZlciA9IHJlcXVpcmUoJy4uL2Jhc2UnKS5EZWNvZGVyQnVmZmVyO1xudmFyIGFzc2VydCA9IHJlcXVpcmUoJ21pbmltYWxpc3RpYy1hc3NlcnQnKTtcblxuLy8gU3VwcG9ydGVkIHRhZ3NcbnZhciB0YWdzID0gW1xuICAnc2VxJywgJ3NlcW9mJywgJ3NldCcsICdzZXRvZicsICdvYmppZCcsICdib29sJyxcbiAgJ2dlbnRpbWUnLCAndXRjdGltZScsICdudWxsXycsICdlbnVtJywgJ2ludCcsICdvYmpEZXNjJyxcbiAgJ2JpdHN0cicsICdibXBzdHInLCAnY2hhcnN0cicsICdnZW5zdHInLCAnZ3JhcGhzdHInLCAnaWE1c3RyJywgJ2lzbzY0NnN0cicsXG4gICdudW1zdHInLCAnb2N0c3RyJywgJ3ByaW50c3RyJywgJ3Q2MXN0cicsICd1bmlzdHInLCAndXRmOHN0cicsICd2aWRlb3N0cidcbl07XG5cbi8vIFB1YmxpYyBtZXRob2RzIGxpc3RcbnZhciBtZXRob2RzID0gW1xuICAna2V5JywgJ29iaicsICd1c2UnLCAnb3B0aW9uYWwnLCAnZXhwbGljaXQnLCAnaW1wbGljaXQnLCAnZGVmJywgJ2Nob2ljZScsXG4gICdhbnknLCAnY29udGFpbnMnXG5dLmNvbmNhdCh0YWdzKTtcblxuLy8gT3ZlcnJpZGVkIG1ldGhvZHMgbGlzdFxudmFyIG92ZXJyaWRlZCA9IFtcbiAgJ19wZWVrVGFnJywgJ19kZWNvZGVUYWcnLCAnX3VzZScsXG4gICdfZGVjb2RlU3RyJywgJ19kZWNvZGVPYmppZCcsICdfZGVjb2RlVGltZScsXG4gICdfZGVjb2RlTnVsbCcsICdfZGVjb2RlSW50JywgJ19kZWNvZGVCb29sJywgJ19kZWNvZGVMaXN0JyxcblxuICAnX2VuY29kZUNvbXBvc2l0ZScsICdfZW5jb2RlU3RyJywgJ19lbmNvZGVPYmppZCcsICdfZW5jb2RlVGltZScsXG4gICdfZW5jb2RlTnVsbCcsICdfZW5jb2RlSW50JywgJ19lbmNvZGVCb29sJ1xuXTtcblxuZnVuY3Rpb24gTm9kZShlbmMsIHBhcmVudCkge1xuICB2YXIgc3RhdGUgPSB7fTtcbiAgdGhpcy5fYmFzZVN0YXRlID0gc3RhdGU7XG5cbiAgc3RhdGUuZW5jID0gZW5jO1xuXG4gIHN0YXRlLnBhcmVudCA9IHBhcmVudCB8fCBudWxsO1xuICBzdGF0ZS5jaGlsZHJlbiA9IG51bGw7XG5cbiAgLy8gU3RhdGVcbiAgc3RhdGUudGFnID0gbnVsbDtcbiAgc3RhdGUuYXJncyA9IG51bGw7XG4gIHN0YXRlLnJldmVyc2VBcmdzID0gbnVsbDtcbiAgc3RhdGUuY2hvaWNlID0gbnVsbDtcbiAgc3RhdGUub3B0aW9uYWwgPSBmYWxzZTtcbiAgc3RhdGUuYW55ID0gZmFsc2U7XG4gIHN0YXRlLm9iaiA9IGZhbHNlO1xuICBzdGF0ZS51c2UgPSBudWxsO1xuICBzdGF0ZS51c2VEZWNvZGVyID0gbnVsbDtcbiAgc3RhdGUua2V5ID0gbnVsbDtcbiAgc3RhdGVbJ2RlZmF1bHQnXSA9IG51bGw7XG4gIHN0YXRlLmV4cGxpY2l0ID0gbnVsbDtcbiAgc3RhdGUuaW1wbGljaXQgPSBudWxsO1xuICBzdGF0ZS5jb250YWlucyA9IG51bGw7XG5cbiAgLy8gU2hvdWxkIGNyZWF0ZSBuZXcgaW5zdGFuY2Ugb24gZWFjaCBtZXRob2RcbiAgaWYgKCFzdGF0ZS5wYXJlbnQpIHtcbiAgICBzdGF0ZS5jaGlsZHJlbiA9IFtdO1xuICAgIHRoaXMuX3dyYXAoKTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBOb2RlO1xuXG52YXIgc3RhdGVQcm9wcyA9IFtcbiAgJ2VuYycsICdwYXJlbnQnLCAnY2hpbGRyZW4nLCAndGFnJywgJ2FyZ3MnLCAncmV2ZXJzZUFyZ3MnLCAnY2hvaWNlJyxcbiAgJ29wdGlvbmFsJywgJ2FueScsICdvYmonLCAndXNlJywgJ2FsdGVyZWRVc2UnLCAna2V5JywgJ2RlZmF1bHQnLCAnZXhwbGljaXQnLFxuICAnaW1wbGljaXQnLCAnY29udGFpbnMnXG5dO1xuXG5Ob2RlLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uIGNsb25lKCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG4gIHZhciBjc3RhdGUgPSB7fTtcbiAgc3RhdGVQcm9wcy5mb3JFYWNoKGZ1bmN0aW9uKHByb3ApIHtcbiAgICBjc3RhdGVbcHJvcF0gPSBzdGF0ZVtwcm9wXTtcbiAgfSk7XG4gIHZhciByZXMgPSBuZXcgdGhpcy5jb25zdHJ1Y3Rvcihjc3RhdGUucGFyZW50KTtcbiAgcmVzLl9iYXNlU3RhdGUgPSBjc3RhdGU7XG4gIHJldHVybiByZXM7XG59O1xuXG5Ob2RlLnByb3RvdHlwZS5fd3JhcCA9IGZ1bmN0aW9uIHdyYXAoKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX2Jhc2VTdGF0ZTtcbiAgbWV0aG9kcy5mb3JFYWNoKGZ1bmN0aW9uKG1ldGhvZCkge1xuICAgIHRoaXNbbWV0aG9kXSA9IGZ1bmN0aW9uIF93cmFwcGVkTWV0aG9kKCkge1xuICAgICAgdmFyIGNsb25lID0gbmV3IHRoaXMuY29uc3RydWN0b3IodGhpcyk7XG4gICAgICBzdGF0ZS5jaGlsZHJlbi5wdXNoKGNsb25lKTtcbiAgICAgIHJldHVybiBjbG9uZVttZXRob2RdLmFwcGx5KGNsb25lLCBhcmd1bWVudHMpO1xuICAgIH07XG4gIH0sIHRoaXMpO1xufTtcblxuTm9kZS5wcm90b3R5cGUuX2luaXQgPSBmdW5jdGlvbiBpbml0KGJvZHkpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuXG4gIGFzc2VydChzdGF0ZS5wYXJlbnQgPT09IG51bGwpO1xuICBib2R5LmNhbGwodGhpcyk7XG5cbiAgLy8gRmlsdGVyIGNoaWxkcmVuXG4gIHN0YXRlLmNoaWxkcmVuID0gc3RhdGUuY2hpbGRyZW4uZmlsdGVyKGZ1bmN0aW9uKGNoaWxkKSB7XG4gICAgcmV0dXJuIGNoaWxkLl9iYXNlU3RhdGUucGFyZW50ID09PSB0aGlzO1xuICB9LCB0aGlzKTtcbiAgYXNzZXJ0LmVxdWFsKHN0YXRlLmNoaWxkcmVuLmxlbmd0aCwgMSwgJ1Jvb3Qgbm9kZSBjYW4gaGF2ZSBvbmx5IG9uZSBjaGlsZCcpO1xufTtcblxuTm9kZS5wcm90b3R5cGUuX3VzZUFyZ3MgPSBmdW5jdGlvbiB1c2VBcmdzKGFyZ3MpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuXG4gIC8vIEZpbHRlciBjaGlsZHJlbiBhbmQgYXJnc1xuICB2YXIgY2hpbGRyZW4gPSBhcmdzLmZpbHRlcihmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4gYXJnIGluc3RhbmNlb2YgdGhpcy5jb25zdHJ1Y3RvcjtcbiAgfSwgdGhpcyk7XG4gIGFyZ3MgPSBhcmdzLmZpbHRlcihmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4gIShhcmcgaW5zdGFuY2VvZiB0aGlzLmNvbnN0cnVjdG9yKTtcbiAgfSwgdGhpcyk7XG5cbiAgaWYgKGNoaWxkcmVuLmxlbmd0aCAhPT0gMCkge1xuICAgIGFzc2VydChzdGF0ZS5jaGlsZHJlbiA9PT0gbnVsbCk7XG4gICAgc3RhdGUuY2hpbGRyZW4gPSBjaGlsZHJlbjtcblxuICAgIC8vIFJlcGxhY2UgcGFyZW50IHRvIG1haW50YWluIGJhY2t3YXJkIGxpbmtcbiAgICBjaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uKGNoaWxkKSB7XG4gICAgICBjaGlsZC5fYmFzZVN0YXRlLnBhcmVudCA9IHRoaXM7XG4gICAgfSwgdGhpcyk7XG4gIH1cbiAgaWYgKGFyZ3MubGVuZ3RoICE9PSAwKSB7XG4gICAgYXNzZXJ0KHN0YXRlLmFyZ3MgPT09IG51bGwpO1xuICAgIHN0YXRlLmFyZ3MgPSBhcmdzO1xuICAgIHN0YXRlLnJldmVyc2VBcmdzID0gYXJncy5tYXAoZnVuY3Rpb24oYXJnKSB7XG4gICAgICBpZiAodHlwZW9mIGFyZyAhPT0gJ29iamVjdCcgfHwgYXJnLmNvbnN0cnVjdG9yICE9PSBPYmplY3QpXG4gICAgICAgIHJldHVybiBhcmc7XG5cbiAgICAgIHZhciByZXMgPSB7fTtcbiAgICAgIE9iamVjdC5rZXlzKGFyZykuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgaWYgKGtleSA9PSAoa2V5IHwgMCkpXG4gICAgICAgICAga2V5IHw9IDA7XG4gICAgICAgIHZhciB2YWx1ZSA9IGFyZ1trZXldO1xuICAgICAgICByZXNbdmFsdWVdID0ga2V5O1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzO1xuICAgIH0pO1xuICB9XG59O1xuXG4vL1xuLy8gT3ZlcnJpZGVkIG1ldGhvZHNcbi8vXG5cbm92ZXJyaWRlZC5mb3JFYWNoKGZ1bmN0aW9uKG1ldGhvZCkge1xuICBOb2RlLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24gX292ZXJyaWRlZCgpIHtcbiAgICB2YXIgc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG4gICAgdGhyb3cgbmV3IEVycm9yKG1ldGhvZCArICcgbm90IGltcGxlbWVudGVkIGZvciBlbmNvZGluZzogJyArIHN0YXRlLmVuYyk7XG4gIH07XG59KTtcblxuLy9cbi8vIFB1YmxpYyBtZXRob2RzXG4vL1xuXG50YWdzLmZvckVhY2goZnVuY3Rpb24odGFnKSB7XG4gIE5vZGUucHJvdG90eXBlW3RhZ10gPSBmdW5jdGlvbiBfdGFnTWV0aG9kKCkge1xuICAgIHZhciBzdGF0ZSA9IHRoaXMuX2Jhc2VTdGF0ZTtcbiAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG5cbiAgICBhc3NlcnQoc3RhdGUudGFnID09PSBudWxsKTtcbiAgICBzdGF0ZS50YWcgPSB0YWc7XG5cbiAgICB0aGlzLl91c2VBcmdzKGFyZ3MpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG59KTtcblxuTm9kZS5wcm90b3R5cGUudXNlID0gZnVuY3Rpb24gdXNlKGl0ZW0pIHtcbiAgYXNzZXJ0KGl0ZW0pO1xuICB2YXIgc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG5cbiAgYXNzZXJ0KHN0YXRlLnVzZSA9PT0gbnVsbCk7XG4gIHN0YXRlLnVzZSA9IGl0ZW07XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5Ob2RlLnByb3RvdHlwZS5vcHRpb25hbCA9IGZ1bmN0aW9uIG9wdGlvbmFsKCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG5cbiAgc3RhdGUub3B0aW9uYWwgPSB0cnVlO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuTm9kZS5wcm90b3R5cGUuZGVmID0gZnVuY3Rpb24gZGVmKHZhbCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG5cbiAgYXNzZXJ0KHN0YXRlWydkZWZhdWx0J10gPT09IG51bGwpO1xuICBzdGF0ZVsnZGVmYXVsdCddID0gdmFsO1xuICBzdGF0ZS5vcHRpb25hbCA9IHRydWU7XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5Ob2RlLnByb3RvdHlwZS5leHBsaWNpdCA9IGZ1bmN0aW9uIGV4cGxpY2l0KG51bSkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG5cbiAgYXNzZXJ0KHN0YXRlLmV4cGxpY2l0ID09PSBudWxsICYmIHN0YXRlLmltcGxpY2l0ID09PSBudWxsKTtcbiAgc3RhdGUuZXhwbGljaXQgPSBudW07XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5Ob2RlLnByb3RvdHlwZS5pbXBsaWNpdCA9IGZ1bmN0aW9uIGltcGxpY2l0KG51bSkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG5cbiAgYXNzZXJ0KHN0YXRlLmV4cGxpY2l0ID09PSBudWxsICYmIHN0YXRlLmltcGxpY2l0ID09PSBudWxsKTtcbiAgc3RhdGUuaW1wbGljaXQgPSBudW07XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5Ob2RlLnByb3RvdHlwZS5vYmogPSBmdW5jdGlvbiBvYmooKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX2Jhc2VTdGF0ZTtcbiAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO1xuXG4gIHN0YXRlLm9iaiA9IHRydWU7XG5cbiAgaWYgKGFyZ3MubGVuZ3RoICE9PSAwKVxuICAgIHRoaXMuX3VzZUFyZ3MoYXJncyk7XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5Ob2RlLnByb3RvdHlwZS5rZXkgPSBmdW5jdGlvbiBrZXkobmV3S2V5KSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX2Jhc2VTdGF0ZTtcblxuICBhc3NlcnQoc3RhdGUua2V5ID09PSBudWxsKTtcbiAgc3RhdGUua2V5ID0gbmV3S2V5O1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuTm9kZS5wcm90b3R5cGUuYW55ID0gZnVuY3Rpb24gYW55KCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG5cbiAgc3RhdGUuYW55ID0gdHJ1ZTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbk5vZGUucHJvdG90eXBlLmNob2ljZSA9IGZ1bmN0aW9uIGNob2ljZShvYmopIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuXG4gIGFzc2VydChzdGF0ZS5jaG9pY2UgPT09IG51bGwpO1xuICBzdGF0ZS5jaG9pY2UgPSBvYmo7XG4gIHRoaXMuX3VzZUFyZ3MoT2JqZWN0LmtleXMob2JqKS5tYXAoZnVuY3Rpb24oa2V5KSB7XG4gICAgcmV0dXJuIG9ialtrZXldO1xuICB9KSk7XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5Ob2RlLnByb3RvdHlwZS5jb250YWlucyA9IGZ1bmN0aW9uIGNvbnRhaW5zKGl0ZW0pIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuXG4gIGFzc2VydChzdGF0ZS51c2UgPT09IG51bGwpO1xuICBzdGF0ZS5jb250YWlucyA9IGl0ZW07XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vL1xuLy8gRGVjb2Rpbmdcbi8vXG5cbk5vZGUucHJvdG90eXBlLl9kZWNvZGUgPSBmdW5jdGlvbiBkZWNvZGUoaW5wdXQsIG9wdGlvbnMpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuXG4gIC8vIERlY29kZSByb290IG5vZGVcbiAgaWYgKHN0YXRlLnBhcmVudCA9PT0gbnVsbClcbiAgICByZXR1cm4gaW5wdXQud3JhcFJlc3VsdChzdGF0ZS5jaGlsZHJlblswXS5fZGVjb2RlKGlucHV0LCBvcHRpb25zKSk7XG5cbiAgdmFyIHJlc3VsdCA9IHN0YXRlWydkZWZhdWx0J107XG4gIHZhciBwcmVzZW50ID0gdHJ1ZTtcblxuICB2YXIgcHJldktleSA9IG51bGw7XG4gIGlmIChzdGF0ZS5rZXkgIT09IG51bGwpXG4gICAgcHJldktleSA9IGlucHV0LmVudGVyS2V5KHN0YXRlLmtleSk7XG5cbiAgLy8gQ2hlY2sgaWYgdGFnIGlzIHRoZXJlXG4gIGlmIChzdGF0ZS5vcHRpb25hbCkge1xuICAgIHZhciB0YWcgPSBudWxsO1xuICAgIGlmIChzdGF0ZS5leHBsaWNpdCAhPT0gbnVsbClcbiAgICAgIHRhZyA9IHN0YXRlLmV4cGxpY2l0O1xuICAgIGVsc2UgaWYgKHN0YXRlLmltcGxpY2l0ICE9PSBudWxsKVxuICAgICAgdGFnID0gc3RhdGUuaW1wbGljaXQ7XG4gICAgZWxzZSBpZiAoc3RhdGUudGFnICE9PSBudWxsKVxuICAgICAgdGFnID0gc3RhdGUudGFnO1xuXG4gICAgaWYgKHRhZyA9PT0gbnVsbCAmJiAhc3RhdGUuYW55KSB7XG4gICAgICAvLyBUcmlhbCBhbmQgRXJyb3JcbiAgICAgIHZhciBzYXZlID0gaW5wdXQuc2F2ZSgpO1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKHN0YXRlLmNob2ljZSA9PT0gbnVsbClcbiAgICAgICAgICB0aGlzLl9kZWNvZGVHZW5lcmljKHN0YXRlLnRhZywgaW5wdXQsIG9wdGlvbnMpO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgdGhpcy5fZGVjb2RlQ2hvaWNlKGlucHV0LCBvcHRpb25zKTtcbiAgICAgICAgcHJlc2VudCA9IHRydWU7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHByZXNlbnQgPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlucHV0LnJlc3RvcmUoc2F2ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByZXNlbnQgPSB0aGlzLl9wZWVrVGFnKGlucHV0LCB0YWcsIHN0YXRlLmFueSk7XG5cbiAgICAgIGlmIChpbnB1dC5pc0Vycm9yKHByZXNlbnQpKVxuICAgICAgICByZXR1cm4gcHJlc2VudDtcbiAgICB9XG4gIH1cblxuICAvLyBQdXNoIG9iamVjdCBvbiBzdGFja1xuICB2YXIgcHJldk9iajtcbiAgaWYgKHN0YXRlLm9iaiAmJiBwcmVzZW50KVxuICAgIHByZXZPYmogPSBpbnB1dC5lbnRlck9iamVjdCgpO1xuXG4gIGlmIChwcmVzZW50KSB7XG4gICAgLy8gVW53cmFwIGV4cGxpY2l0IHZhbHVlc1xuICAgIGlmIChzdGF0ZS5leHBsaWNpdCAhPT0gbnVsbCkge1xuICAgICAgdmFyIGV4cGxpY2l0ID0gdGhpcy5fZGVjb2RlVGFnKGlucHV0LCBzdGF0ZS5leHBsaWNpdCk7XG4gICAgICBpZiAoaW5wdXQuaXNFcnJvcihleHBsaWNpdCkpXG4gICAgICAgIHJldHVybiBleHBsaWNpdDtcbiAgICAgIGlucHV0ID0gZXhwbGljaXQ7XG4gICAgfVxuXG4gICAgdmFyIHN0YXJ0ID0gaW5wdXQub2Zmc2V0O1xuXG4gICAgLy8gVW53cmFwIGltcGxpY2l0IGFuZCBub3JtYWwgdmFsdWVzXG4gICAgaWYgKHN0YXRlLnVzZSA9PT0gbnVsbCAmJiBzdGF0ZS5jaG9pY2UgPT09IG51bGwpIHtcbiAgICAgIGlmIChzdGF0ZS5hbnkpXG4gICAgICAgIHZhciBzYXZlID0gaW5wdXQuc2F2ZSgpO1xuICAgICAgdmFyIGJvZHkgPSB0aGlzLl9kZWNvZGVUYWcoXG4gICAgICAgIGlucHV0LFxuICAgICAgICBzdGF0ZS5pbXBsaWNpdCAhPT0gbnVsbCA/IHN0YXRlLmltcGxpY2l0IDogc3RhdGUudGFnLFxuICAgICAgICBzdGF0ZS5hbnlcbiAgICAgICk7XG4gICAgICBpZiAoaW5wdXQuaXNFcnJvcihib2R5KSlcbiAgICAgICAgcmV0dXJuIGJvZHk7XG5cbiAgICAgIGlmIChzdGF0ZS5hbnkpXG4gICAgICAgIHJlc3VsdCA9IGlucHV0LnJhdyhzYXZlKTtcbiAgICAgIGVsc2VcbiAgICAgICAgaW5wdXQgPSBib2R5O1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMudHJhY2sgJiYgc3RhdGUudGFnICE9PSBudWxsKVxuICAgICAgb3B0aW9ucy50cmFjayhpbnB1dC5wYXRoKCksIHN0YXJ0LCBpbnB1dC5sZW5ndGgsICd0YWdnZWQnKTtcblxuICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMudHJhY2sgJiYgc3RhdGUudGFnICE9PSBudWxsKVxuICAgICAgb3B0aW9ucy50cmFjayhpbnB1dC5wYXRoKCksIGlucHV0Lm9mZnNldCwgaW5wdXQubGVuZ3RoLCAnY29udGVudCcpO1xuXG4gICAgLy8gU2VsZWN0IHByb3BlciBtZXRob2QgZm9yIHRhZ1xuICAgIGlmIChzdGF0ZS5hbnkpXG4gICAgICByZXN1bHQgPSByZXN1bHQ7XG4gICAgZWxzZSBpZiAoc3RhdGUuY2hvaWNlID09PSBudWxsKVxuICAgICAgcmVzdWx0ID0gdGhpcy5fZGVjb2RlR2VuZXJpYyhzdGF0ZS50YWcsIGlucHV0LCBvcHRpb25zKTtcbiAgICBlbHNlXG4gICAgICByZXN1bHQgPSB0aGlzLl9kZWNvZGVDaG9pY2UoaW5wdXQsIG9wdGlvbnMpO1xuXG4gICAgaWYgKGlucHV0LmlzRXJyb3IocmVzdWx0KSlcbiAgICAgIHJldHVybiByZXN1bHQ7XG5cbiAgICAvLyBEZWNvZGUgY2hpbGRyZW5cbiAgICBpZiAoIXN0YXRlLmFueSAmJiBzdGF0ZS5jaG9pY2UgPT09IG51bGwgJiYgc3RhdGUuY2hpbGRyZW4gIT09IG51bGwpIHtcbiAgICAgIHN0YXRlLmNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24gZGVjb2RlQ2hpbGRyZW4oY2hpbGQpIHtcbiAgICAgICAgLy8gTk9URTogV2UgYXJlIGlnbm9yaW5nIGVycm9ycyBoZXJlLCB0byBsZXQgcGFyc2VyIGNvbnRpbnVlIHdpdGggb3RoZXJcbiAgICAgICAgLy8gcGFydHMgb2YgZW5jb2RlZCBkYXRhXG4gICAgICAgIGNoaWxkLl9kZWNvZGUoaW5wdXQsIG9wdGlvbnMpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gRGVjb2RlIGNvbnRhaW5lZC9lbmNvZGVkIGJ5IHNjaGVtYSwgb25seSBpbiBiaXQgb3Igb2N0ZXQgc3RyaW5nc1xuICAgIGlmIChzdGF0ZS5jb250YWlucyAmJiAoc3RhdGUudGFnID09PSAnb2N0c3RyJyB8fCBzdGF0ZS50YWcgPT09ICdiaXRzdHInKSkge1xuICAgICAgdmFyIGRhdGEgPSBuZXcgRGVjb2RlckJ1ZmZlcihyZXN1bHQpO1xuICAgICAgcmVzdWx0ID0gdGhpcy5fZ2V0VXNlKHN0YXRlLmNvbnRhaW5zLCBpbnB1dC5fcmVwb3J0ZXJTdGF0ZS5vYmopXG4gICAgICAgICAgLl9kZWNvZGUoZGF0YSwgb3B0aW9ucyk7XG4gICAgfVxuICB9XG5cbiAgLy8gUG9wIG9iamVjdFxuICBpZiAoc3RhdGUub2JqICYmIHByZXNlbnQpXG4gICAgcmVzdWx0ID0gaW5wdXQubGVhdmVPYmplY3QocHJldk9iaik7XG5cbiAgLy8gU2V0IGtleVxuICBpZiAoc3RhdGUua2V5ICE9PSBudWxsICYmIChyZXN1bHQgIT09IG51bGwgfHwgcHJlc2VudCA9PT0gdHJ1ZSkpXG4gICAgaW5wdXQubGVhdmVLZXkocHJldktleSwgc3RhdGUua2V5LCByZXN1bHQpO1xuICBlbHNlIGlmIChwcmV2S2V5ICE9PSBudWxsKVxuICAgIGlucHV0LmV4aXRLZXkocHJldktleSk7XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbk5vZGUucHJvdG90eXBlLl9kZWNvZGVHZW5lcmljID0gZnVuY3Rpb24gZGVjb2RlR2VuZXJpYyh0YWcsIGlucHV0LCBvcHRpb25zKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX2Jhc2VTdGF0ZTtcblxuICBpZiAodGFnID09PSAnc2VxJyB8fCB0YWcgPT09ICdzZXQnKVxuICAgIHJldHVybiBudWxsO1xuICBpZiAodGFnID09PSAnc2Vxb2YnIHx8IHRhZyA9PT0gJ3NldG9mJylcbiAgICByZXR1cm4gdGhpcy5fZGVjb2RlTGlzdChpbnB1dCwgdGFnLCBzdGF0ZS5hcmdzWzBdLCBvcHRpb25zKTtcbiAgZWxzZSBpZiAoL3N0ciQvLnRlc3QodGFnKSlcbiAgICByZXR1cm4gdGhpcy5fZGVjb2RlU3RyKGlucHV0LCB0YWcsIG9wdGlvbnMpO1xuICBlbHNlIGlmICh0YWcgPT09ICdvYmppZCcgJiYgc3RhdGUuYXJncylcbiAgICByZXR1cm4gdGhpcy5fZGVjb2RlT2JqaWQoaW5wdXQsIHN0YXRlLmFyZ3NbMF0sIHN0YXRlLmFyZ3NbMV0sIG9wdGlvbnMpO1xuICBlbHNlIGlmICh0YWcgPT09ICdvYmppZCcpXG4gICAgcmV0dXJuIHRoaXMuX2RlY29kZU9iamlkKGlucHV0LCBudWxsLCBudWxsLCBvcHRpb25zKTtcbiAgZWxzZSBpZiAodGFnID09PSAnZ2VudGltZScgfHwgdGFnID09PSAndXRjdGltZScpXG4gICAgcmV0dXJuIHRoaXMuX2RlY29kZVRpbWUoaW5wdXQsIHRhZywgb3B0aW9ucyk7XG4gIGVsc2UgaWYgKHRhZyA9PT0gJ251bGxfJylcbiAgICByZXR1cm4gdGhpcy5fZGVjb2RlTnVsbChpbnB1dCwgb3B0aW9ucyk7XG4gIGVsc2UgaWYgKHRhZyA9PT0gJ2Jvb2wnKVxuICAgIHJldHVybiB0aGlzLl9kZWNvZGVCb29sKGlucHV0LCBvcHRpb25zKTtcbiAgZWxzZSBpZiAodGFnID09PSAnb2JqRGVzYycpXG4gICAgcmV0dXJuIHRoaXMuX2RlY29kZVN0cihpbnB1dCwgdGFnLCBvcHRpb25zKTtcbiAgZWxzZSBpZiAodGFnID09PSAnaW50JyB8fCB0YWcgPT09ICdlbnVtJylcbiAgICByZXR1cm4gdGhpcy5fZGVjb2RlSW50KGlucHV0LCBzdGF0ZS5hcmdzICYmIHN0YXRlLmFyZ3NbMF0sIG9wdGlvbnMpO1xuXG4gIGlmIChzdGF0ZS51c2UgIT09IG51bGwpIHtcbiAgICByZXR1cm4gdGhpcy5fZ2V0VXNlKHN0YXRlLnVzZSwgaW5wdXQuX3JlcG9ydGVyU3RhdGUub2JqKVxuICAgICAgICAuX2RlY29kZShpbnB1dCwgb3B0aW9ucyk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGlucHV0LmVycm9yKCd1bmtub3duIHRhZzogJyArIHRhZyk7XG4gIH1cbn07XG5cbk5vZGUucHJvdG90eXBlLl9nZXRVc2UgPSBmdW5jdGlvbiBfZ2V0VXNlKGVudGl0eSwgb2JqKSB7XG5cbiAgdmFyIHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuICAvLyBDcmVhdGUgYWx0ZXJlZCB1c2UgZGVjb2RlciBpZiBpbXBsaWNpdCBpcyBzZXRcbiAgc3RhdGUudXNlRGVjb2RlciA9IHRoaXMuX3VzZShlbnRpdHksIG9iaik7XG4gIGFzc2VydChzdGF0ZS51c2VEZWNvZGVyLl9iYXNlU3RhdGUucGFyZW50ID09PSBudWxsKTtcbiAgc3RhdGUudXNlRGVjb2RlciA9IHN0YXRlLnVzZURlY29kZXIuX2Jhc2VTdGF0ZS5jaGlsZHJlblswXTtcbiAgaWYgKHN0YXRlLmltcGxpY2l0ICE9PSBzdGF0ZS51c2VEZWNvZGVyLl9iYXNlU3RhdGUuaW1wbGljaXQpIHtcbiAgICBzdGF0ZS51c2VEZWNvZGVyID0gc3RhdGUudXNlRGVjb2Rlci5jbG9uZSgpO1xuICAgIHN0YXRlLnVzZURlY29kZXIuX2Jhc2VTdGF0ZS5pbXBsaWNpdCA9IHN0YXRlLmltcGxpY2l0O1xuICB9XG4gIHJldHVybiBzdGF0ZS51c2VEZWNvZGVyO1xufTtcblxuTm9kZS5wcm90b3R5cGUuX2RlY29kZUNob2ljZSA9IGZ1bmN0aW9uIGRlY29kZUNob2ljZShpbnB1dCwgb3B0aW9ucykge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG4gIHZhciByZXN1bHQgPSBudWxsO1xuICB2YXIgbWF0Y2ggPSBmYWxzZTtcblxuICBPYmplY3Qua2V5cyhzdGF0ZS5jaG9pY2UpLnNvbWUoZnVuY3Rpb24oa2V5KSB7XG4gICAgdmFyIHNhdmUgPSBpbnB1dC5zYXZlKCk7XG4gICAgdmFyIG5vZGUgPSBzdGF0ZS5jaG9pY2Vba2V5XTtcbiAgICB0cnkge1xuICAgICAgdmFyIHZhbHVlID0gbm9kZS5fZGVjb2RlKGlucHV0LCBvcHRpb25zKTtcbiAgICAgIGlmIChpbnB1dC5pc0Vycm9yKHZhbHVlKSlcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuXG4gICAgICByZXN1bHQgPSB7IHR5cGU6IGtleSwgdmFsdWU6IHZhbHVlIH07XG4gICAgICBtYXRjaCA9IHRydWU7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaW5wdXQucmVzdG9yZShzYXZlKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH0sIHRoaXMpO1xuXG4gIGlmICghbWF0Y2gpXG4gICAgcmV0dXJuIGlucHV0LmVycm9yKCdDaG9pY2Ugbm90IG1hdGNoZWQnKTtcblxuICByZXR1cm4gcmVzdWx0O1xufTtcblxuLy9cbi8vIEVuY29kaW5nXG4vL1xuXG5Ob2RlLnByb3RvdHlwZS5fY3JlYXRlRW5jb2RlckJ1ZmZlciA9IGZ1bmN0aW9uIGNyZWF0ZUVuY29kZXJCdWZmZXIoZGF0YSkge1xuICByZXR1cm4gbmV3IEVuY29kZXJCdWZmZXIoZGF0YSwgdGhpcy5yZXBvcnRlcik7XG59O1xuXG5Ob2RlLnByb3RvdHlwZS5fZW5jb2RlID0gZnVuY3Rpb24gZW5jb2RlKGRhdGEsIHJlcG9ydGVyLCBwYXJlbnQpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuICBpZiAoc3RhdGVbJ2RlZmF1bHQnXSAhPT0gbnVsbCAmJiBzdGF0ZVsnZGVmYXVsdCddID09PSBkYXRhKVxuICAgIHJldHVybjtcblxuICB2YXIgcmVzdWx0ID0gdGhpcy5fZW5jb2RlVmFsdWUoZGF0YSwgcmVwb3J0ZXIsIHBhcmVudCk7XG4gIGlmIChyZXN1bHQgPT09IHVuZGVmaW5lZClcbiAgICByZXR1cm47XG5cbiAgaWYgKHRoaXMuX3NraXBEZWZhdWx0KHJlc3VsdCwgcmVwb3J0ZXIsIHBhcmVudCkpXG4gICAgcmV0dXJuO1xuXG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5Ob2RlLnByb3RvdHlwZS5fZW5jb2RlVmFsdWUgPSBmdW5jdGlvbiBlbmNvZGUoZGF0YSwgcmVwb3J0ZXIsIHBhcmVudCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG5cbiAgLy8gRGVjb2RlIHJvb3Qgbm9kZVxuICBpZiAoc3RhdGUucGFyZW50ID09PSBudWxsKVxuICAgIHJldHVybiBzdGF0ZS5jaGlsZHJlblswXS5fZW5jb2RlKGRhdGEsIHJlcG9ydGVyIHx8IG5ldyBSZXBvcnRlcigpKTtcblxuICB2YXIgcmVzdWx0ID0gbnVsbDtcblxuICAvLyBTZXQgcmVwb3J0ZXIgdG8gc2hhcmUgaXQgd2l0aCBhIGNoaWxkIGNsYXNzXG4gIHRoaXMucmVwb3J0ZXIgPSByZXBvcnRlcjtcblxuICAvLyBDaGVjayBpZiBkYXRhIGlzIHRoZXJlXG4gIGlmIChzdGF0ZS5vcHRpb25hbCAmJiBkYXRhID09PSB1bmRlZmluZWQpIHtcbiAgICBpZiAoc3RhdGVbJ2RlZmF1bHQnXSAhPT0gbnVsbClcbiAgICAgIGRhdGEgPSBzdGF0ZVsnZGVmYXVsdCddXG4gICAgZWxzZVxuICAgICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gRW5jb2RlIGNoaWxkcmVuIGZpcnN0XG4gIHZhciBjb250ZW50ID0gbnVsbDtcbiAgdmFyIHByaW1pdGl2ZSA9IGZhbHNlO1xuICBpZiAoc3RhdGUuYW55KSB7XG4gICAgLy8gQW55dGhpbmcgdGhhdCB3YXMgZ2l2ZW4gaXMgdHJhbnNsYXRlZCB0byBidWZmZXJcbiAgICByZXN1bHQgPSB0aGlzLl9jcmVhdGVFbmNvZGVyQnVmZmVyKGRhdGEpO1xuICB9IGVsc2UgaWYgKHN0YXRlLmNob2ljZSkge1xuICAgIHJlc3VsdCA9IHRoaXMuX2VuY29kZUNob2ljZShkYXRhLCByZXBvcnRlcik7XG4gIH0gZWxzZSBpZiAoc3RhdGUuY29udGFpbnMpIHtcbiAgICBjb250ZW50ID0gdGhpcy5fZ2V0VXNlKHN0YXRlLmNvbnRhaW5zLCBwYXJlbnQpLl9lbmNvZGUoZGF0YSwgcmVwb3J0ZXIpO1xuICAgIHByaW1pdGl2ZSA9IHRydWU7XG4gIH0gZWxzZSBpZiAoc3RhdGUuY2hpbGRyZW4pIHtcbiAgICBjb250ZW50ID0gc3RhdGUuY2hpbGRyZW4ubWFwKGZ1bmN0aW9uKGNoaWxkKSB7XG4gICAgICBpZiAoY2hpbGQuX2Jhc2VTdGF0ZS50YWcgPT09ICdudWxsXycpXG4gICAgICAgIHJldHVybiBjaGlsZC5fZW5jb2RlKG51bGwsIHJlcG9ydGVyLCBkYXRhKTtcblxuICAgICAgaWYgKGNoaWxkLl9iYXNlU3RhdGUua2V5ID09PSBudWxsKVxuICAgICAgICByZXR1cm4gcmVwb3J0ZXIuZXJyb3IoJ0NoaWxkIHNob3VsZCBoYXZlIGEga2V5Jyk7XG4gICAgICB2YXIgcHJldktleSA9IHJlcG9ydGVyLmVudGVyS2V5KGNoaWxkLl9iYXNlU3RhdGUua2V5KTtcblxuICAgICAgaWYgKHR5cGVvZiBkYXRhICE9PSAnb2JqZWN0JylcbiAgICAgICAgcmV0dXJuIHJlcG9ydGVyLmVycm9yKCdDaGlsZCBleHBlY3RlZCwgYnV0IGlucHV0IGlzIG5vdCBvYmplY3QnKTtcblxuICAgICAgdmFyIHJlcyA9IGNoaWxkLl9lbmNvZGUoZGF0YVtjaGlsZC5fYmFzZVN0YXRlLmtleV0sIHJlcG9ydGVyLCBkYXRhKTtcbiAgICAgIHJlcG9ydGVyLmxlYXZlS2V5KHByZXZLZXkpO1xuXG4gICAgICByZXR1cm4gcmVzO1xuICAgIH0sIHRoaXMpLmZpbHRlcihmdW5jdGlvbihjaGlsZCkge1xuICAgICAgcmV0dXJuIGNoaWxkO1xuICAgIH0pO1xuICAgIGNvbnRlbnQgPSB0aGlzLl9jcmVhdGVFbmNvZGVyQnVmZmVyKGNvbnRlbnQpO1xuICB9IGVsc2Uge1xuICAgIGlmIChzdGF0ZS50YWcgPT09ICdzZXFvZicgfHwgc3RhdGUudGFnID09PSAnc2V0b2YnKSB7XG4gICAgICAvLyBUT0RPKGluZHV0bnkpOiB0aGlzIHNob3VsZCBiZSB0aHJvd24gb24gRFNMIGxldmVsXG4gICAgICBpZiAoIShzdGF0ZS5hcmdzICYmIHN0YXRlLmFyZ3MubGVuZ3RoID09PSAxKSlcbiAgICAgICAgcmV0dXJuIHJlcG9ydGVyLmVycm9yKCdUb28gbWFueSBhcmdzIGZvciA6ICcgKyBzdGF0ZS50YWcpO1xuXG4gICAgICBpZiAoIUFycmF5LmlzQXJyYXkoZGF0YSkpXG4gICAgICAgIHJldHVybiByZXBvcnRlci5lcnJvcignc2Vxb2Yvc2V0b2YsIGJ1dCBkYXRhIGlzIG5vdCBBcnJheScpO1xuXG4gICAgICB2YXIgY2hpbGQgPSB0aGlzLmNsb25lKCk7XG4gICAgICBjaGlsZC5fYmFzZVN0YXRlLmltcGxpY2l0ID0gbnVsbDtcbiAgICAgIGNvbnRlbnQgPSB0aGlzLl9jcmVhdGVFbmNvZGVyQnVmZmVyKGRhdGEubWFwKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgICAgdmFyIHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuXG4gICAgICAgIHJldHVybiB0aGlzLl9nZXRVc2Uoc3RhdGUuYXJnc1swXSwgZGF0YSkuX2VuY29kZShpdGVtLCByZXBvcnRlcik7XG4gICAgICB9LCBjaGlsZCkpO1xuICAgIH0gZWxzZSBpZiAoc3RhdGUudXNlICE9PSBudWxsKSB7XG4gICAgICByZXN1bHQgPSB0aGlzLl9nZXRVc2Uoc3RhdGUudXNlLCBwYXJlbnQpLl9lbmNvZGUoZGF0YSwgcmVwb3J0ZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb250ZW50ID0gdGhpcy5fZW5jb2RlUHJpbWl0aXZlKHN0YXRlLnRhZywgZGF0YSk7XG4gICAgICBwcmltaXRpdmUgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIC8vIEVuY29kZSBkYXRhIGl0c2VsZlxuICB2YXIgcmVzdWx0O1xuICBpZiAoIXN0YXRlLmFueSAmJiBzdGF0ZS5jaG9pY2UgPT09IG51bGwpIHtcbiAgICB2YXIgdGFnID0gc3RhdGUuaW1wbGljaXQgIT09IG51bGwgPyBzdGF0ZS5pbXBsaWNpdCA6IHN0YXRlLnRhZztcbiAgICB2YXIgY2xzID0gc3RhdGUuaW1wbGljaXQgPT09IG51bGwgPyAndW5pdmVyc2FsJyA6ICdjb250ZXh0JztcblxuICAgIGlmICh0YWcgPT09IG51bGwpIHtcbiAgICAgIGlmIChzdGF0ZS51c2UgPT09IG51bGwpXG4gICAgICAgIHJlcG9ydGVyLmVycm9yKCdUYWcgY291bGQgYmUgb21pdHRlZCBvbmx5IGZvciAudXNlKCknKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHN0YXRlLnVzZSA9PT0gbnVsbClcbiAgICAgICAgcmVzdWx0ID0gdGhpcy5fZW5jb2RlQ29tcG9zaXRlKHRhZywgcHJpbWl0aXZlLCBjbHMsIGNvbnRlbnQpO1xuICAgIH1cbiAgfVxuXG4gIC8vIFdyYXAgaW4gZXhwbGljaXRcbiAgaWYgKHN0YXRlLmV4cGxpY2l0ICE9PSBudWxsKVxuICAgIHJlc3VsdCA9IHRoaXMuX2VuY29kZUNvbXBvc2l0ZShzdGF0ZS5leHBsaWNpdCwgZmFsc2UsICdjb250ZXh0JywgcmVzdWx0KTtcblxuICByZXR1cm4gcmVzdWx0O1xufTtcblxuTm9kZS5wcm90b3R5cGUuX2VuY29kZUNob2ljZSA9IGZ1bmN0aW9uIGVuY29kZUNob2ljZShkYXRhLCByZXBvcnRlcikge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG5cbiAgdmFyIG5vZGUgPSBzdGF0ZS5jaG9pY2VbZGF0YS50eXBlXTtcbiAgaWYgKCFub2RlKSB7XG4gICAgYXNzZXJ0KFxuICAgICAgICBmYWxzZSxcbiAgICAgICAgZGF0YS50eXBlICsgJyBub3QgZm91bmQgaW4gJyArXG4gICAgICAgICAgICBKU09OLnN0cmluZ2lmeShPYmplY3Qua2V5cyhzdGF0ZS5jaG9pY2UpKSk7XG4gIH1cbiAgcmV0dXJuIG5vZGUuX2VuY29kZShkYXRhLnZhbHVlLCByZXBvcnRlcik7XG59O1xuXG5Ob2RlLnByb3RvdHlwZS5fZW5jb2RlUHJpbWl0aXZlID0gZnVuY3Rpb24gZW5jb2RlUHJpbWl0aXZlKHRhZywgZGF0YSkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG5cbiAgaWYgKC9zdHIkLy50ZXN0KHRhZykpXG4gICAgcmV0dXJuIHRoaXMuX2VuY29kZVN0cihkYXRhLCB0YWcpO1xuICBlbHNlIGlmICh0YWcgPT09ICdvYmppZCcgJiYgc3RhdGUuYXJncylcbiAgICByZXR1cm4gdGhpcy5fZW5jb2RlT2JqaWQoZGF0YSwgc3RhdGUucmV2ZXJzZUFyZ3NbMF0sIHN0YXRlLmFyZ3NbMV0pO1xuICBlbHNlIGlmICh0YWcgPT09ICdvYmppZCcpXG4gICAgcmV0dXJuIHRoaXMuX2VuY29kZU9iamlkKGRhdGEsIG51bGwsIG51bGwpO1xuICBlbHNlIGlmICh0YWcgPT09ICdnZW50aW1lJyB8fCB0YWcgPT09ICd1dGN0aW1lJylcbiAgICByZXR1cm4gdGhpcy5fZW5jb2RlVGltZShkYXRhLCB0YWcpO1xuICBlbHNlIGlmICh0YWcgPT09ICdudWxsXycpXG4gICAgcmV0dXJuIHRoaXMuX2VuY29kZU51bGwoKTtcbiAgZWxzZSBpZiAodGFnID09PSAnaW50JyB8fCB0YWcgPT09ICdlbnVtJylcbiAgICByZXR1cm4gdGhpcy5fZW5jb2RlSW50KGRhdGEsIHN0YXRlLmFyZ3MgJiYgc3RhdGUucmV2ZXJzZUFyZ3NbMF0pO1xuICBlbHNlIGlmICh0YWcgPT09ICdib29sJylcbiAgICByZXR1cm4gdGhpcy5fZW5jb2RlQm9vbChkYXRhKTtcbiAgZWxzZSBpZiAodGFnID09PSAnb2JqRGVzYycpXG4gICAgcmV0dXJuIHRoaXMuX2VuY29kZVN0cihkYXRhLCB0YWcpO1xuICBlbHNlXG4gICAgdGhyb3cgbmV3IEVycm9yKCdVbnN1cHBvcnRlZCB0YWc6ICcgKyB0YWcpO1xufTtcblxuTm9kZS5wcm90b3R5cGUuX2lzTnVtc3RyID0gZnVuY3Rpb24gaXNOdW1zdHIoc3RyKSB7XG4gIHJldHVybiAvXlswLTkgXSokLy50ZXN0KHN0cik7XG59O1xuXG5Ob2RlLnByb3RvdHlwZS5faXNQcmludHN0ciA9IGZ1bmN0aW9uIGlzUHJpbnRzdHIoc3RyKSB7XG4gIHJldHVybiAvXltBLVphLXowLTkgJ1xcKFxcKVxcKyxcXC1cXC5cXC86PVxcP10qJC8udGVzdChzdHIpO1xufTtcbiIsInZhciBjb25zdGFudHMgPSByZXF1aXJlKCcuLi9jb25zdGFudHMnKTtcblxuZXhwb3J0cy50YWdDbGFzcyA9IHtcbiAgMDogJ3VuaXZlcnNhbCcsXG4gIDE6ICdhcHBsaWNhdGlvbicsXG4gIDI6ICdjb250ZXh0JyxcbiAgMzogJ3ByaXZhdGUnXG59O1xuZXhwb3J0cy50YWdDbGFzc0J5TmFtZSA9IGNvbnN0YW50cy5fcmV2ZXJzZShleHBvcnRzLnRhZ0NsYXNzKTtcblxuZXhwb3J0cy50YWcgPSB7XG4gIDB4MDA6ICdlbmQnLFxuICAweDAxOiAnYm9vbCcsXG4gIDB4MDI6ICdpbnQnLFxuICAweDAzOiAnYml0c3RyJyxcbiAgMHgwNDogJ29jdHN0cicsXG4gIDB4MDU6ICdudWxsXycsXG4gIDB4MDY6ICdvYmppZCcsXG4gIDB4MDc6ICdvYmpEZXNjJyxcbiAgMHgwODogJ2V4dGVybmFsJyxcbiAgMHgwOTogJ3JlYWwnLFxuICAweDBhOiAnZW51bScsXG4gIDB4MGI6ICdlbWJlZCcsXG4gIDB4MGM6ICd1dGY4c3RyJyxcbiAgMHgwZDogJ3JlbGF0aXZlT2lkJyxcbiAgMHgxMDogJ3NlcScsXG4gIDB4MTE6ICdzZXQnLFxuICAweDEyOiAnbnVtc3RyJyxcbiAgMHgxMzogJ3ByaW50c3RyJyxcbiAgMHgxNDogJ3Q2MXN0cicsXG4gIDB4MTU6ICd2aWRlb3N0cicsXG4gIDB4MTY6ICdpYTVzdHInLFxuICAweDE3OiAndXRjdGltZScsXG4gIDB4MTg6ICdnZW50aW1lJyxcbiAgMHgxOTogJ2dyYXBoc3RyJyxcbiAgMHgxYTogJ2lzbzY0NnN0cicsXG4gIDB4MWI6ICdnZW5zdHInLFxuICAweDFjOiAndW5pc3RyJyxcbiAgMHgxZDogJ2NoYXJzdHInLFxuICAweDFlOiAnYm1wc3RyJ1xufTtcbmV4cG9ydHMudGFnQnlOYW1lID0gY29uc3RhbnRzLl9yZXZlcnNlKGV4cG9ydHMudGFnKTtcbiIsInZhciBkZWNvZGVycyA9IGV4cG9ydHM7XG5cbmRlY29kZXJzLmRlciA9IHJlcXVpcmUoJy4vZGVyJyk7XG5kZWNvZGVycy5wZW0gPSByZXF1aXJlKCcuL3BlbScpO1xuIiwidmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdidWZmZXInKS5CdWZmZXI7XG5cbnZhciBERVJEZWNvZGVyID0gcmVxdWlyZSgnLi9kZXInKTtcblxuZnVuY3Rpb24gUEVNRGVjb2RlcihlbnRpdHkpIHtcbiAgREVSRGVjb2Rlci5jYWxsKHRoaXMsIGVudGl0eSk7XG4gIHRoaXMuZW5jID0gJ3BlbSc7XG59O1xuaW5oZXJpdHMoUEVNRGVjb2RlciwgREVSRGVjb2Rlcik7XG5tb2R1bGUuZXhwb3J0cyA9IFBFTURlY29kZXI7XG5cblBFTURlY29kZXIucHJvdG90eXBlLmRlY29kZSA9IGZ1bmN0aW9uIGRlY29kZShkYXRhLCBvcHRpb25zKSB7XG4gIHZhciBsaW5lcyA9IGRhdGEudG9TdHJpbmcoKS5zcGxpdCgvW1xcclxcbl0rL2cpO1xuXG4gIHZhciBsYWJlbCA9IG9wdGlvbnMubGFiZWwudG9VcHBlckNhc2UoKTtcblxuICB2YXIgcmUgPSAvXi0tLS0tKEJFR0lOfEVORCkgKFteLV0rKS0tLS0tJC87XG4gIHZhciBzdGFydCA9IC0xO1xuICB2YXIgZW5kID0gLTE7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGluZXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgbWF0Y2ggPSBsaW5lc1tpXS5tYXRjaChyZSk7XG4gICAgaWYgKG1hdGNoID09PSBudWxsKVxuICAgICAgY29udGludWU7XG5cbiAgICBpZiAobWF0Y2hbMl0gIT09IGxhYmVsKVxuICAgICAgY29udGludWU7XG5cbiAgICBpZiAoc3RhcnQgPT09IC0xKSB7XG4gICAgICBpZiAobWF0Y2hbMV0gIT09ICdCRUdJTicpXG4gICAgICAgIGJyZWFrO1xuICAgICAgc3RhcnQgPSBpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAobWF0Y2hbMV0gIT09ICdFTkQnKVxuICAgICAgICBicmVhaztcbiAgICAgIGVuZCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgaWYgKHN0YXJ0ID09PSAtMSB8fCBlbmQgPT09IC0xKVxuICAgIHRocm93IG5ldyBFcnJvcignUEVNIHNlY3Rpb24gbm90IGZvdW5kIGZvcjogJyArIGxhYmVsKTtcblxuICB2YXIgYmFzZTY0ID0gbGluZXMuc2xpY2Uoc3RhcnQgKyAxLCBlbmQpLmpvaW4oJycpO1xuICAvLyBSZW1vdmUgZXhjZXNzaXZlIHN5bWJvbHNcbiAgYmFzZTY0LnJlcGxhY2UoL1teYS16MC05XFwrXFwvPV0rL2dpLCAnJyk7XG5cbiAgdmFyIGlucHV0ID0gbmV3IEJ1ZmZlcihiYXNlNjQsICdiYXNlNjQnKTtcbiAgcmV0dXJuIERFUkRlY29kZXIucHJvdG90eXBlLmRlY29kZS5jYWxsKHRoaXMsIGlucHV0LCBvcHRpb25zKTtcbn07XG4iLCJ2YXIgZW5jb2RlcnMgPSBleHBvcnRzO1xuXG5lbmNvZGVycy5kZXIgPSByZXF1aXJlKCcuL2RlcicpO1xuZW5jb2RlcnMucGVtID0gcmVxdWlyZSgnLi9wZW0nKTtcbiIsInZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG5cbnZhciBERVJFbmNvZGVyID0gcmVxdWlyZSgnLi9kZXInKTtcblxuZnVuY3Rpb24gUEVNRW5jb2RlcihlbnRpdHkpIHtcbiAgREVSRW5jb2Rlci5jYWxsKHRoaXMsIGVudGl0eSk7XG4gIHRoaXMuZW5jID0gJ3BlbSc7XG59O1xuaW5oZXJpdHMoUEVNRW5jb2RlciwgREVSRW5jb2Rlcik7XG5tb2R1bGUuZXhwb3J0cyA9IFBFTUVuY29kZXI7XG5cblBFTUVuY29kZXIucHJvdG90eXBlLmVuY29kZSA9IGZ1bmN0aW9uIGVuY29kZShkYXRhLCBvcHRpb25zKSB7XG4gIHZhciBidWYgPSBERVJFbmNvZGVyLnByb3RvdHlwZS5lbmNvZGUuY2FsbCh0aGlzLCBkYXRhKTtcblxuICB2YXIgcCA9IGJ1Zi50b1N0cmluZygnYmFzZTY0Jyk7XG4gIHZhciBvdXQgPSBbICctLS0tLUJFR0lOICcgKyBvcHRpb25zLmxhYmVsICsgJy0tLS0tJyBdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHAubGVuZ3RoOyBpICs9IDY0KVxuICAgIG91dC5wdXNoKHAuc2xpY2UoaSwgaSArIDY0KSk7XG4gIG91dC5wdXNoKCctLS0tLUVORCAnICsgb3B0aW9ucy5sYWJlbCArICctLS0tLScpO1xuICByZXR1cm4gb3V0LmpvaW4oJ1xcbicpO1xufTtcbiIsIi8vIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL1JhbnRhbmVuL25vZGUtZHRscy9ibG9iLzI1YTdkYzg2MWJkYTM4Y2ZlYWM5M2E3MjM1MDBlZWE0ZjBhYzJlODYvQ2VydGlmaWNhdGUuanNcbi8vIHRoYW5rcyB0byBAUmFudGFuZW5cblxuJ3VzZSBzdHJpY3QnXG5cbnZhciBhc24gPSByZXF1aXJlKCdhc24xLmpzJylcblxudmFyIFRpbWUgPSBhc24uZGVmaW5lKCdUaW1lJywgZnVuY3Rpb24gKCkge1xuICB0aGlzLmNob2ljZSh7XG4gICAgdXRjVGltZTogdGhpcy51dGN0aW1lKCksXG4gICAgZ2VuZXJhbFRpbWU6IHRoaXMuZ2VudGltZSgpXG4gIH0pXG59KVxuXG52YXIgQXR0cmlidXRlVHlwZVZhbHVlID0gYXNuLmRlZmluZSgnQXR0cmlidXRlVHlwZVZhbHVlJywgZnVuY3Rpb24gKCkge1xuICB0aGlzLnNlcSgpLm9iaihcbiAgICB0aGlzLmtleSgndHlwZScpLm9iamlkKCksXG4gICAgdGhpcy5rZXkoJ3ZhbHVlJykuYW55KClcbiAgKVxufSlcblxudmFyIEFsZ29yaXRobUlkZW50aWZpZXIgPSBhc24uZGVmaW5lKCdBbGdvcml0aG1JZGVudGlmaWVyJywgZnVuY3Rpb24gKCkge1xuICB0aGlzLnNlcSgpLm9iaihcbiAgICB0aGlzLmtleSgnYWxnb3JpdGhtJykub2JqaWQoKSxcbiAgICB0aGlzLmtleSgncGFyYW1ldGVycycpLm9wdGlvbmFsKCksXG4gICAgdGhpcy5rZXkoJ2N1cnZlJykub2JqaWQoKS5vcHRpb25hbCgpXG4gIClcbn0pXG5cbnZhciBTdWJqZWN0UHVibGljS2V5SW5mbyA9IGFzbi5kZWZpbmUoJ1N1YmplY3RQdWJsaWNLZXlJbmZvJywgZnVuY3Rpb24gKCkge1xuICB0aGlzLnNlcSgpLm9iaihcbiAgICB0aGlzLmtleSgnYWxnb3JpdGhtJykudXNlKEFsZ29yaXRobUlkZW50aWZpZXIpLFxuICAgIHRoaXMua2V5KCdzdWJqZWN0UHVibGljS2V5JykuYml0c3RyKClcbiAgKVxufSlcblxudmFyIFJlbGF0aXZlRGlzdGluZ3Vpc2hlZE5hbWUgPSBhc24uZGVmaW5lKCdSZWxhdGl2ZURpc3Rpbmd1aXNoZWROYW1lJywgZnVuY3Rpb24gKCkge1xuICB0aGlzLnNldG9mKEF0dHJpYnV0ZVR5cGVWYWx1ZSlcbn0pXG5cbnZhciBSRE5TZXF1ZW5jZSA9IGFzbi5kZWZpbmUoJ1JETlNlcXVlbmNlJywgZnVuY3Rpb24gKCkge1xuICB0aGlzLnNlcW9mKFJlbGF0aXZlRGlzdGluZ3Vpc2hlZE5hbWUpXG59KVxuXG52YXIgTmFtZSA9IGFzbi5kZWZpbmUoJ05hbWUnLCBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuY2hvaWNlKHtcbiAgICByZG5TZXF1ZW5jZTogdGhpcy51c2UoUkROU2VxdWVuY2UpXG4gIH0pXG59KVxuXG52YXIgVmFsaWRpdHkgPSBhc24uZGVmaW5lKCdWYWxpZGl0eScsIGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5zZXEoKS5vYmooXG4gICAgdGhpcy5rZXkoJ25vdEJlZm9yZScpLnVzZShUaW1lKSxcbiAgICB0aGlzLmtleSgnbm90QWZ0ZXInKS51c2UoVGltZSlcbiAgKVxufSlcblxudmFyIEV4dGVuc2lvbiA9IGFzbi5kZWZpbmUoJ0V4dGVuc2lvbicsIGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5zZXEoKS5vYmooXG4gICAgdGhpcy5rZXkoJ2V4dG5JRCcpLm9iamlkKCksXG4gICAgdGhpcy5rZXkoJ2NyaXRpY2FsJykuYm9vbCgpLmRlZihmYWxzZSksXG4gICAgdGhpcy5rZXkoJ2V4dG5WYWx1ZScpLm9jdHN0cigpXG4gIClcbn0pXG5cbnZhciBUQlNDZXJ0aWZpY2F0ZSA9IGFzbi5kZWZpbmUoJ1RCU0NlcnRpZmljYXRlJywgZnVuY3Rpb24gKCkge1xuICB0aGlzLnNlcSgpLm9iaihcbiAgICB0aGlzLmtleSgndmVyc2lvbicpLmV4cGxpY2l0KDApLmludCgpLm9wdGlvbmFsKCksXG4gICAgdGhpcy5rZXkoJ3NlcmlhbE51bWJlcicpLmludCgpLFxuICAgIHRoaXMua2V5KCdzaWduYXR1cmUnKS51c2UoQWxnb3JpdGhtSWRlbnRpZmllciksXG4gICAgdGhpcy5rZXkoJ2lzc3VlcicpLnVzZShOYW1lKSxcbiAgICB0aGlzLmtleSgndmFsaWRpdHknKS51c2UoVmFsaWRpdHkpLFxuICAgIHRoaXMua2V5KCdzdWJqZWN0JykudXNlKE5hbWUpLFxuICAgIHRoaXMua2V5KCdzdWJqZWN0UHVibGljS2V5SW5mbycpLnVzZShTdWJqZWN0UHVibGljS2V5SW5mbyksXG4gICAgdGhpcy5rZXkoJ2lzc3VlclVuaXF1ZUlEJykuaW1wbGljaXQoMSkuYml0c3RyKCkub3B0aW9uYWwoKSxcbiAgICB0aGlzLmtleSgnc3ViamVjdFVuaXF1ZUlEJykuaW1wbGljaXQoMikuYml0c3RyKCkub3B0aW9uYWwoKSxcbiAgICB0aGlzLmtleSgnZXh0ZW5zaW9ucycpLmV4cGxpY2l0KDMpLnNlcW9mKEV4dGVuc2lvbikub3B0aW9uYWwoKVxuICApXG59KVxuXG52YXIgWDUwOUNlcnRpZmljYXRlID0gYXNuLmRlZmluZSgnWDUwOUNlcnRpZmljYXRlJywgZnVuY3Rpb24gKCkge1xuICB0aGlzLnNlcSgpLm9iaihcbiAgICB0aGlzLmtleSgndGJzQ2VydGlmaWNhdGUnKS51c2UoVEJTQ2VydGlmaWNhdGUpLFxuICAgIHRoaXMua2V5KCdzaWduYXR1cmVBbGdvcml0aG0nKS51c2UoQWxnb3JpdGhtSWRlbnRpZmllciksXG4gICAgdGhpcy5rZXkoJ3NpZ25hdHVyZVZhbHVlJykuYml0c3RyKClcbiAgKVxufSlcblxubW9kdWxlLmV4cG9ydHMgPSBYNTA5Q2VydGlmaWNhdGVcbiIsIi8vIGFkYXB0ZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vYXBhdGlsL3BlbXN0cmlwXG52YXIgZmluZFByb2MgPSAvUHJvYy1UeXBlOiA0LEVOQ1JZUFRFRFtcXG5cXHJdK0RFSy1JbmZvOiBBRVMtKCg/OjEyOCl8KD86MTkyKXwoPzoyNTYpKS1DQkMsKFswLTlBLUhdKylbXFxuXFxyXSsoWzAtOUEtelxcblxcclxcK1xcL1xcPV0rKVtcXG5cXHJdKy9tXG52YXIgc3RhcnRSZWdleCA9IC9eLS0tLS1CRUdJTiAoKD86Lio/IEtFWSl8Q0VSVElGSUNBVEUpLS0tLS0vbVxudmFyIGZ1bGxSZWdleCA9IC9eLS0tLS1CRUdJTiAoKD86Lio/IEtFWSl8Q0VSVElGSUNBVEUpLS0tLS0oWzAtOUEtelxcblxcclxcK1xcL1xcPV0rKS0tLS0tRU5EIFxcMS0tLS0tJC9tXG52YXIgZXZwID0gcmVxdWlyZSgnZXZwX2J5dGVzdG9rZXknKVxudmFyIGNpcGhlcnMgPSByZXF1aXJlKCdicm93c2VyaWZ5LWFlcycpXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9rZXksIHBhc3N3b3JkKSB7XG4gIHZhciBrZXkgPSBva2V5LnRvU3RyaW5nKClcbiAgdmFyIG1hdGNoID0ga2V5Lm1hdGNoKGZpbmRQcm9jKVxuICB2YXIgZGVjcnlwdGVkXG4gIGlmICghbWF0Y2gpIHtcbiAgICB2YXIgbWF0Y2gyID0ga2V5Lm1hdGNoKGZ1bGxSZWdleClcbiAgICBkZWNyeXB0ZWQgPSBuZXcgQnVmZmVyKG1hdGNoMlsyXS5yZXBsYWNlKC9bXFxyXFxuXS9nLCAnJyksICdiYXNlNjQnKVxuICB9IGVsc2Uge1xuICAgIHZhciBzdWl0ZSA9ICdhZXMnICsgbWF0Y2hbMV1cbiAgICB2YXIgaXYgPSBCdWZmZXIuZnJvbShtYXRjaFsyXSwgJ2hleCcpXG4gICAgdmFyIGNpcGhlclRleHQgPSBCdWZmZXIuZnJvbShtYXRjaFszXS5yZXBsYWNlKC9bXFxyXFxuXS9nLCAnJyksICdiYXNlNjQnKVxuICAgIHZhciBjaXBoZXJLZXkgPSBldnAocGFzc3dvcmQsIGl2LnNsaWNlKDAsIDgpLCBwYXJzZUludChtYXRjaFsxXSwgMTApKS5rZXlcbiAgICB2YXIgb3V0ID0gW11cbiAgICB2YXIgY2lwaGVyID0gY2lwaGVycy5jcmVhdGVEZWNpcGhlcml2KHN1aXRlLCBjaXBoZXJLZXksIGl2KVxuICAgIG91dC5wdXNoKGNpcGhlci51cGRhdGUoY2lwaGVyVGV4dCkpXG4gICAgb3V0LnB1c2goY2lwaGVyLmZpbmFsKCkpXG4gICAgZGVjcnlwdGVkID0gQnVmZmVyLmNvbmNhdChvdXQpXG4gIH1cbiAgdmFyIHRhZyA9IGtleS5tYXRjaChzdGFydFJlZ2V4KVsxXVxuICByZXR1cm4ge1xuICAgIHRhZzogdGFnLFxuICAgIGRhdGE6IGRlY3J5cHRlZFxuICB9XG59XG4iLCIvLyBtdWNoIG9mIHRoaXMgYmFzZWQgb24gaHR0cHM6Ly9naXRodWIuY29tL2luZHV0bnkvc2VsZi1zaWduZWQvYmxvYi9naC1wYWdlcy9saWIvcnNhLmpzXG52YXIgQk4gPSByZXF1aXJlKCdibi5qcycpXG52YXIgRUMgPSByZXF1aXJlKCdlbGxpcHRpYycpLmVjXG52YXIgcGFyc2VLZXlzID0gcmVxdWlyZSgncGFyc2UtYXNuMScpXG52YXIgY3VydmVzID0gcmVxdWlyZSgnLi9jdXJ2ZXMuanNvbicpXG5cbmZ1bmN0aW9uIHZlcmlmeSAoc2lnLCBoYXNoLCBrZXksIHNpZ25UeXBlLCB0YWcpIHtcbiAgdmFyIHB1YiA9IHBhcnNlS2V5cyhrZXkpXG4gIGlmIChwdWIudHlwZSA9PT0gJ2VjJykge1xuICAgIC8vIHJzYSBrZXlzIGNhbiBiZSBpbnRlcnByZXRlZCBhcyBlY2RzYSBvbmVzIGluIG9wZW5zc2xcbiAgICBpZiAoc2lnblR5cGUgIT09ICdlY2RzYScgJiYgc2lnblR5cGUgIT09ICdlY2RzYS9yc2EnKSB0aHJvdyBuZXcgRXJyb3IoJ3dyb25nIHB1YmxpYyBrZXkgdHlwZScpXG4gICAgcmV0dXJuIGVjVmVyaWZ5KHNpZywgaGFzaCwgcHViKVxuICB9IGVsc2UgaWYgKHB1Yi50eXBlID09PSAnZHNhJykge1xuICAgIGlmIChzaWduVHlwZSAhPT0gJ2RzYScpIHRocm93IG5ldyBFcnJvcignd3JvbmcgcHVibGljIGtleSB0eXBlJylcbiAgICByZXR1cm4gZHNhVmVyaWZ5KHNpZywgaGFzaCwgcHViKVxuICB9IGVsc2Uge1xuICAgIGlmIChzaWduVHlwZSAhPT0gJ3JzYScgJiYgc2lnblR5cGUgIT09ICdlY2RzYS9yc2EnKSB0aHJvdyBuZXcgRXJyb3IoJ3dyb25nIHB1YmxpYyBrZXkgdHlwZScpXG4gIH1cbiAgaGFzaCA9IEJ1ZmZlci5jb25jYXQoW3RhZywgaGFzaF0pXG4gIHZhciBsZW4gPSBwdWIubW9kdWx1cy5ieXRlTGVuZ3RoKClcbiAgdmFyIHBhZCA9IFsgMSBdXG4gIHZhciBwYWROdW0gPSAwXG4gIHdoaWxlIChoYXNoLmxlbmd0aCArIHBhZC5sZW5ndGggKyAyIDwgbGVuKSB7XG4gICAgcGFkLnB1c2goMHhmZilcbiAgICBwYWROdW0rK1xuICB9XG4gIHBhZC5wdXNoKDB4MDApXG4gIHZhciBpID0gLTFcbiAgd2hpbGUgKCsraSA8IGhhc2gubGVuZ3RoKSB7XG4gICAgcGFkLnB1c2goaGFzaFtpXSlcbiAgfVxuICBwYWQgPSBuZXcgQnVmZmVyKHBhZClcbiAgdmFyIHJlZCA9IEJOLm1vbnQocHViLm1vZHVsdXMpXG4gIHNpZyA9IG5ldyBCTihzaWcpLnRvUmVkKHJlZClcblxuICBzaWcgPSBzaWcucmVkUG93KG5ldyBCTihwdWIucHVibGljRXhwb25lbnQpKVxuICBzaWcgPSBuZXcgQnVmZmVyKHNpZy5mcm9tUmVkKCkudG9BcnJheSgpKVxuICB2YXIgb3V0ID0gcGFkTnVtIDwgOCA/IDEgOiAwXG4gIGxlbiA9IE1hdGgubWluKHNpZy5sZW5ndGgsIHBhZC5sZW5ndGgpXG4gIGlmIChzaWcubGVuZ3RoICE9PSBwYWQubGVuZ3RoKSBvdXQgPSAxXG5cbiAgaSA9IC0xXG4gIHdoaWxlICgrK2kgPCBsZW4pIG91dCB8PSBzaWdbaV0gXiBwYWRbaV1cbiAgcmV0dXJuIG91dCA9PT0gMFxufVxuXG5mdW5jdGlvbiBlY1ZlcmlmeSAoc2lnLCBoYXNoLCBwdWIpIHtcbiAgdmFyIGN1cnZlSWQgPSBjdXJ2ZXNbcHViLmRhdGEuYWxnb3JpdGhtLmN1cnZlLmpvaW4oJy4nKV1cbiAgaWYgKCFjdXJ2ZUlkKSB0aHJvdyBuZXcgRXJyb3IoJ3Vua25vd24gY3VydmUgJyArIHB1Yi5kYXRhLmFsZ29yaXRobS5jdXJ2ZS5qb2luKCcuJykpXG5cbiAgdmFyIGN1cnZlID0gbmV3IEVDKGN1cnZlSWQpXG4gIHZhciBwdWJrZXkgPSBwdWIuZGF0YS5zdWJqZWN0UHJpdmF0ZUtleS5kYXRhXG5cbiAgcmV0dXJuIGN1cnZlLnZlcmlmeShoYXNoLCBzaWcsIHB1YmtleSlcbn1cblxuZnVuY3Rpb24gZHNhVmVyaWZ5IChzaWcsIGhhc2gsIHB1Yikge1xuICB2YXIgcCA9IHB1Yi5kYXRhLnBcbiAgdmFyIHEgPSBwdWIuZGF0YS5xXG4gIHZhciBnID0gcHViLmRhdGEuZ1xuICB2YXIgeSA9IHB1Yi5kYXRhLnB1Yl9rZXlcbiAgdmFyIHVucGFja2VkID0gcGFyc2VLZXlzLnNpZ25hdHVyZS5kZWNvZGUoc2lnLCAnZGVyJylcbiAgdmFyIHMgPSB1bnBhY2tlZC5zXG4gIHZhciByID0gdW5wYWNrZWQuclxuICBjaGVja1ZhbHVlKHMsIHEpXG4gIGNoZWNrVmFsdWUociwgcSlcbiAgdmFyIG1vbnRwID0gQk4ubW9udChwKVxuICB2YXIgdyA9IHMuaW52bShxKVxuICB2YXIgdiA9IGcudG9SZWQobW9udHApXG4gICAgLnJlZFBvdyhuZXcgQk4oaGFzaCkubXVsKHcpLm1vZChxKSlcbiAgICAuZnJvbVJlZCgpXG4gICAgLm11bCh5LnRvUmVkKG1vbnRwKS5yZWRQb3coci5tdWwodykubW9kKHEpKS5mcm9tUmVkKCkpXG4gICAgLm1vZChwKVxuICAgIC5tb2QocSlcbiAgcmV0dXJuIHYuY21wKHIpID09PSAwXG59XG5cbmZ1bmN0aW9uIGNoZWNrVmFsdWUgKGIsIHEpIHtcbiAgaWYgKGIuY21wbigwKSA8PSAwKSB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgc2lnJylcbiAgaWYgKGIuY21wKHEpID49IHEpIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBzaWcnKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHZlcmlmeVxuIiwidmFyIGVsbGlwdGljID0gcmVxdWlyZSgnZWxsaXB0aWMnKVxudmFyIEJOID0gcmVxdWlyZSgnYm4uanMnKVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNyZWF0ZUVDREggKGN1cnZlKSB7XG4gIHJldHVybiBuZXcgRUNESChjdXJ2ZSlcbn1cblxudmFyIGFsaWFzZXMgPSB7XG4gIHNlY3AyNTZrMToge1xuICAgIG5hbWU6ICdzZWNwMjU2azEnLFxuICAgIGJ5dGVMZW5ndGg6IDMyXG4gIH0sXG4gIHNlY3AyMjRyMToge1xuICAgIG5hbWU6ICdwMjI0JyxcbiAgICBieXRlTGVuZ3RoOiAyOFxuICB9LFxuICBwcmltZTI1NnYxOiB7XG4gICAgbmFtZTogJ3AyNTYnLFxuICAgIGJ5dGVMZW5ndGg6IDMyXG4gIH0sXG4gIHByaW1lMTkydjE6IHtcbiAgICBuYW1lOiAncDE5MicsXG4gICAgYnl0ZUxlbmd0aDogMjRcbiAgfSxcbiAgZWQyNTUxOToge1xuICAgIG5hbWU6ICdlZDI1NTE5JyxcbiAgICBieXRlTGVuZ3RoOiAzMlxuICB9LFxuICBzZWNwMzg0cjE6IHtcbiAgICBuYW1lOiAncDM4NCcsXG4gICAgYnl0ZUxlbmd0aDogNDhcbiAgfSxcbiAgc2VjcDUyMXIxOiB7XG4gICAgbmFtZTogJ3A1MjEnLFxuICAgIGJ5dGVMZW5ndGg6IDY2XG4gIH1cbn1cblxuYWxpYXNlcy5wMjI0ID0gYWxpYXNlcy5zZWNwMjI0cjFcbmFsaWFzZXMucDI1NiA9IGFsaWFzZXMuc2VjcDI1NnIxID0gYWxpYXNlcy5wcmltZTI1NnYxXG5hbGlhc2VzLnAxOTIgPSBhbGlhc2VzLnNlY3AxOTJyMSA9IGFsaWFzZXMucHJpbWUxOTJ2MVxuYWxpYXNlcy5wMzg0ID0gYWxpYXNlcy5zZWNwMzg0cjFcbmFsaWFzZXMucDUyMSA9IGFsaWFzZXMuc2VjcDUyMXIxXG5cbmZ1bmN0aW9uIEVDREggKGN1cnZlKSB7XG4gIHRoaXMuY3VydmVUeXBlID0gYWxpYXNlc1tjdXJ2ZV1cbiAgaWYgKCF0aGlzLmN1cnZlVHlwZSkge1xuICAgIHRoaXMuY3VydmVUeXBlID0ge1xuICAgICAgbmFtZTogY3VydmVcbiAgICB9XG4gIH1cbiAgdGhpcy5jdXJ2ZSA9IG5ldyBlbGxpcHRpYy5lYyh0aGlzLmN1cnZlVHlwZS5uYW1lKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5ldy1jYXBcbiAgdGhpcy5rZXlzID0gdm9pZCAwXG59XG5cbkVDREgucHJvdG90eXBlLmdlbmVyYXRlS2V5cyA9IGZ1bmN0aW9uIChlbmMsIGZvcm1hdCkge1xuICB0aGlzLmtleXMgPSB0aGlzLmN1cnZlLmdlbktleVBhaXIoKVxuICByZXR1cm4gdGhpcy5nZXRQdWJsaWNLZXkoZW5jLCBmb3JtYXQpXG59XG5cbkVDREgucHJvdG90eXBlLmNvbXB1dGVTZWNyZXQgPSBmdW5jdGlvbiAob3RoZXIsIGluZW5jLCBlbmMpIHtcbiAgaW5lbmMgPSBpbmVuYyB8fCAndXRmOCdcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIob3RoZXIpKSB7XG4gICAgb3RoZXIgPSBuZXcgQnVmZmVyKG90aGVyLCBpbmVuYylcbiAgfVxuICB2YXIgb3RoZXJQdWIgPSB0aGlzLmN1cnZlLmtleUZyb21QdWJsaWMob3RoZXIpLmdldFB1YmxpYygpXG4gIHZhciBvdXQgPSBvdGhlclB1Yi5tdWwodGhpcy5rZXlzLmdldFByaXZhdGUoKSkuZ2V0WCgpXG4gIHJldHVybiBmb3JtYXRSZXR1cm5WYWx1ZShvdXQsIGVuYywgdGhpcy5jdXJ2ZVR5cGUuYnl0ZUxlbmd0aClcbn1cblxuRUNESC5wcm90b3R5cGUuZ2V0UHVibGljS2V5ID0gZnVuY3Rpb24gKGVuYywgZm9ybWF0KSB7XG4gIHZhciBrZXkgPSB0aGlzLmtleXMuZ2V0UHVibGljKGZvcm1hdCA9PT0gJ2NvbXByZXNzZWQnLCB0cnVlKVxuICBpZiAoZm9ybWF0ID09PSAnaHlicmlkJykge1xuICAgIGlmIChrZXlba2V5Lmxlbmd0aCAtIDFdICUgMikge1xuICAgICAga2V5WzBdID0gN1xuICAgIH0gZWxzZSB7XG4gICAgICBrZXlbMF0gPSA2XG4gICAgfVxuICB9XG4gIHJldHVybiBmb3JtYXRSZXR1cm5WYWx1ZShrZXksIGVuYylcbn1cblxuRUNESC5wcm90b3R5cGUuZ2V0UHJpdmF0ZUtleSA9IGZ1bmN0aW9uIChlbmMpIHtcbiAgcmV0dXJuIGZvcm1hdFJldHVyblZhbHVlKHRoaXMua2V5cy5nZXRQcml2YXRlKCksIGVuYylcbn1cblxuRUNESC5wcm90b3R5cGUuc2V0UHVibGljS2V5ID0gZnVuY3Rpb24gKHB1YiwgZW5jKSB7XG4gIGVuYyA9IGVuYyB8fCAndXRmOCdcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIocHViKSkge1xuICAgIHB1YiA9IG5ldyBCdWZmZXIocHViLCBlbmMpXG4gIH1cbiAgdGhpcy5rZXlzLl9pbXBvcnRQdWJsaWMocHViKVxuICByZXR1cm4gdGhpc1xufVxuXG5FQ0RILnByb3RvdHlwZS5zZXRQcml2YXRlS2V5ID0gZnVuY3Rpb24gKHByaXYsIGVuYykge1xuICBlbmMgPSBlbmMgfHwgJ3V0ZjgnXG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKHByaXYpKSB7XG4gICAgcHJpdiA9IG5ldyBCdWZmZXIocHJpdiwgZW5jKVxuICB9XG5cbiAgdmFyIF9wcml2ID0gbmV3IEJOKHByaXYpXG4gIF9wcml2ID0gX3ByaXYudG9TdHJpbmcoMTYpXG4gIHRoaXMua2V5cyA9IHRoaXMuY3VydmUuZ2VuS2V5UGFpcigpXG4gIHRoaXMua2V5cy5faW1wb3J0UHJpdmF0ZShfcHJpdilcbiAgcmV0dXJuIHRoaXNcbn1cblxuZnVuY3Rpb24gZm9ybWF0UmV0dXJuVmFsdWUgKGJuLCBlbmMsIGxlbikge1xuICBpZiAoIUFycmF5LmlzQXJyYXkoYm4pKSB7XG4gICAgYm4gPSBibi50b0FycmF5KClcbiAgfVxuICB2YXIgYnVmID0gbmV3IEJ1ZmZlcihibilcbiAgaWYgKGxlbiAmJiBidWYubGVuZ3RoIDwgbGVuKSB7XG4gICAgdmFyIHplcm9zID0gbmV3IEJ1ZmZlcihsZW4gLSBidWYubGVuZ3RoKVxuICAgIHplcm9zLmZpbGwoMClcbiAgICBidWYgPSBCdWZmZXIuY29uY2F0KFt6ZXJvcywgYnVmXSlcbiAgfVxuICBpZiAoIWVuYykge1xuICAgIHJldHVybiBidWZcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYnVmLnRvU3RyaW5nKGVuYylcbiAgfVxufVxuIiwiZXhwb3J0cy5wdWJsaWNFbmNyeXB0ID0gcmVxdWlyZSgnLi9wdWJsaWNFbmNyeXB0JylcbmV4cG9ydHMucHJpdmF0ZURlY3J5cHQgPSByZXF1aXJlKCcuL3ByaXZhdGVEZWNyeXB0JylcblxuZXhwb3J0cy5wcml2YXRlRW5jcnlwdCA9IGZ1bmN0aW9uIHByaXZhdGVFbmNyeXB0IChrZXksIGJ1Zikge1xuICByZXR1cm4gZXhwb3J0cy5wdWJsaWNFbmNyeXB0KGtleSwgYnVmLCB0cnVlKVxufVxuXG5leHBvcnRzLnB1YmxpY0RlY3J5cHQgPSBmdW5jdGlvbiBwdWJsaWNEZWNyeXB0IChrZXksIGJ1Zikge1xuICByZXR1cm4gZXhwb3J0cy5wcml2YXRlRGVjcnlwdChrZXksIGJ1ZiwgdHJ1ZSlcbn1cbiIsInZhciBwYXJzZUtleXMgPSByZXF1aXJlKCdwYXJzZS1hc24xJylcbnZhciByYW5kb21CeXRlcyA9IHJlcXVpcmUoJ3JhbmRvbWJ5dGVzJylcbnZhciBjcmVhdGVIYXNoID0gcmVxdWlyZSgnY3JlYXRlLWhhc2gnKVxudmFyIG1nZiA9IHJlcXVpcmUoJy4vbWdmJylcbnZhciB4b3IgPSByZXF1aXJlKCcuL3hvcicpXG52YXIgQk4gPSByZXF1aXJlKCdibi5qcycpXG52YXIgd2l0aFB1YmxpYyA9IHJlcXVpcmUoJy4vd2l0aFB1YmxpYycpXG52YXIgY3J0ID0gcmVxdWlyZSgnYnJvd3NlcmlmeS1yc2EnKVxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcHVibGljRW5jcnlwdCAocHVibGljS2V5LCBtc2csIHJldmVyc2UpIHtcbiAgdmFyIHBhZGRpbmdcbiAgaWYgKHB1YmxpY0tleS5wYWRkaW5nKSB7XG4gICAgcGFkZGluZyA9IHB1YmxpY0tleS5wYWRkaW5nXG4gIH0gZWxzZSBpZiAocmV2ZXJzZSkge1xuICAgIHBhZGRpbmcgPSAxXG4gIH0gZWxzZSB7XG4gICAgcGFkZGluZyA9IDRcbiAgfVxuICB2YXIga2V5ID0gcGFyc2VLZXlzKHB1YmxpY0tleSlcbiAgdmFyIHBhZGRlZE1zZ1xuICBpZiAocGFkZGluZyA9PT0gNCkge1xuICAgIHBhZGRlZE1zZyA9IG9hZXAoa2V5LCBtc2cpXG4gIH0gZWxzZSBpZiAocGFkZGluZyA9PT0gMSkge1xuICAgIHBhZGRlZE1zZyA9IHBrY3MxKGtleSwgbXNnLCByZXZlcnNlKVxuICB9IGVsc2UgaWYgKHBhZGRpbmcgPT09IDMpIHtcbiAgICBwYWRkZWRNc2cgPSBuZXcgQk4obXNnKVxuICAgIGlmIChwYWRkZWRNc2cuY21wKGtleS5tb2R1bHVzKSA+PSAwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2RhdGEgdG9vIGxvbmcgZm9yIG1vZHVsdXMnKVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Vua25vd24gcGFkZGluZycpXG4gIH1cbiAgaWYgKHJldmVyc2UpIHtcbiAgICByZXR1cm4gY3J0KHBhZGRlZE1zZywga2V5KVxuICB9IGVsc2Uge1xuICAgIHJldHVybiB3aXRoUHVibGljKHBhZGRlZE1zZywga2V5KVxuICB9XG59XG5cbmZ1bmN0aW9uIG9hZXAgKGtleSwgbXNnKSB7XG4gIHZhciBrID0ga2V5Lm1vZHVsdXMuYnl0ZUxlbmd0aCgpXG4gIHZhciBtTGVuID0gbXNnLmxlbmd0aFxuICB2YXIgaUhhc2ggPSBjcmVhdGVIYXNoKCdzaGExJykudXBkYXRlKEJ1ZmZlci5hbGxvYygwKSkuZGlnZXN0KClcbiAgdmFyIGhMZW4gPSBpSGFzaC5sZW5ndGhcbiAgdmFyIGhMZW4yID0gMiAqIGhMZW5cbiAgaWYgKG1MZW4gPiBrIC0gaExlbjIgLSAyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdtZXNzYWdlIHRvbyBsb25nJylcbiAgfVxuICB2YXIgcHMgPSBCdWZmZXIuYWxsb2MoayAtIG1MZW4gLSBoTGVuMiAtIDIpXG4gIHZhciBkYmxlbiA9IGsgLSBoTGVuIC0gMVxuICB2YXIgc2VlZCA9IHJhbmRvbUJ5dGVzKGhMZW4pXG4gIHZhciBtYXNrZWREYiA9IHhvcihCdWZmZXIuY29uY2F0KFtpSGFzaCwgcHMsIEJ1ZmZlci5hbGxvYygxLCAxKSwgbXNnXSwgZGJsZW4pLCBtZ2Yoc2VlZCwgZGJsZW4pKVxuICB2YXIgbWFza2VkU2VlZCA9IHhvcihzZWVkLCBtZ2YobWFza2VkRGIsIGhMZW4pKVxuICByZXR1cm4gbmV3IEJOKEJ1ZmZlci5jb25jYXQoW0J1ZmZlci5hbGxvYygxKSwgbWFza2VkU2VlZCwgbWFza2VkRGJdLCBrKSlcbn1cbmZ1bmN0aW9uIHBrY3MxIChrZXksIG1zZywgcmV2ZXJzZSkge1xuICB2YXIgbUxlbiA9IG1zZy5sZW5ndGhcbiAgdmFyIGsgPSBrZXkubW9kdWx1cy5ieXRlTGVuZ3RoKClcbiAgaWYgKG1MZW4gPiBrIC0gMTEpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ21lc3NhZ2UgdG9vIGxvbmcnKVxuICB9XG4gIHZhciBwc1xuICBpZiAocmV2ZXJzZSkge1xuICAgIHBzID0gQnVmZmVyLmFsbG9jKGsgLSBtTGVuIC0gMywgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBwcyA9IG5vblplcm8oayAtIG1MZW4gLSAzKVxuICB9XG4gIHJldHVybiBuZXcgQk4oQnVmZmVyLmNvbmNhdChbQnVmZmVyLmZyb20oWzAsIHJldmVyc2UgPyAxIDogMl0pLCBwcywgQnVmZmVyLmFsbG9jKDEpLCBtc2ddLCBrKSlcbn1cbmZ1bmN0aW9uIG5vblplcm8gKGxlbikge1xuICB2YXIgb3V0ID0gQnVmZmVyLmFsbG9jVW5zYWZlKGxlbilcbiAgdmFyIGkgPSAwXG4gIHZhciBjYWNoZSA9IHJhbmRvbUJ5dGVzKGxlbiAqIDIpXG4gIHZhciBjdXIgPSAwXG4gIHZhciBudW1cbiAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICBpZiAoY3VyID09PSBjYWNoZS5sZW5ndGgpIHtcbiAgICAgIGNhY2hlID0gcmFuZG9tQnl0ZXMobGVuICogMilcbiAgICAgIGN1ciA9IDBcbiAgICB9XG4gICAgbnVtID0gY2FjaGVbY3VyKytdXG4gICAgaWYgKG51bSkge1xuICAgICAgb3V0W2krK10gPSBudW1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIG91dFxufVxuIiwidmFyIHBhcnNlS2V5cyA9IHJlcXVpcmUoJ3BhcnNlLWFzbjEnKVxudmFyIG1nZiA9IHJlcXVpcmUoJy4vbWdmJylcbnZhciB4b3IgPSByZXF1aXJlKCcuL3hvcicpXG52YXIgQk4gPSByZXF1aXJlKCdibi5qcycpXG52YXIgY3J0ID0gcmVxdWlyZSgnYnJvd3NlcmlmeS1yc2EnKVxudmFyIGNyZWF0ZUhhc2ggPSByZXF1aXJlKCdjcmVhdGUtaGFzaCcpXG52YXIgd2l0aFB1YmxpYyA9IHJlcXVpcmUoJy4vd2l0aFB1YmxpYycpXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBwcml2YXRlRGVjcnlwdCAocHJpdmF0ZUtleSwgZW5jLCByZXZlcnNlKSB7XG4gIHZhciBwYWRkaW5nXG4gIGlmIChwcml2YXRlS2V5LnBhZGRpbmcpIHtcbiAgICBwYWRkaW5nID0gcHJpdmF0ZUtleS5wYWRkaW5nXG4gIH0gZWxzZSBpZiAocmV2ZXJzZSkge1xuICAgIHBhZGRpbmcgPSAxXG4gIH0gZWxzZSB7XG4gICAgcGFkZGluZyA9IDRcbiAgfVxuXG4gIHZhciBrZXkgPSBwYXJzZUtleXMocHJpdmF0ZUtleSlcbiAgdmFyIGsgPSBrZXkubW9kdWx1cy5ieXRlTGVuZ3RoKClcbiAgaWYgKGVuYy5sZW5ndGggPiBrIHx8IG5ldyBCTihlbmMpLmNtcChrZXkubW9kdWx1cykgPj0gMCkge1xuICAgIHRocm93IG5ldyBFcnJvcignZGVjcnlwdGlvbiBlcnJvcicpXG4gIH1cbiAgdmFyIG1zZ1xuICBpZiAocmV2ZXJzZSkge1xuICAgIG1zZyA9IHdpdGhQdWJsaWMobmV3IEJOKGVuYyksIGtleSlcbiAgfSBlbHNlIHtcbiAgICBtc2cgPSBjcnQoZW5jLCBrZXkpXG4gIH1cbiAgdmFyIHpCdWZmZXIgPSBCdWZmZXIuYWxsb2MoayAtIG1zZy5sZW5ndGgpXG4gIG1zZyA9IEJ1ZmZlci5jb25jYXQoW3pCdWZmZXIsIG1zZ10sIGspXG4gIGlmIChwYWRkaW5nID09PSA0KSB7XG4gICAgcmV0dXJuIG9hZXAoa2V5LCBtc2cpXG4gIH0gZWxzZSBpZiAocGFkZGluZyA9PT0gMSkge1xuICAgIHJldHVybiBwa2NzMShrZXksIG1zZywgcmV2ZXJzZSlcbiAgfSBlbHNlIGlmIChwYWRkaW5nID09PSAzKSB7XG4gICAgcmV0dXJuIG1zZ1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcigndW5rbm93biBwYWRkaW5nJylcbiAgfVxufVxuXG5mdW5jdGlvbiBvYWVwIChrZXksIG1zZykge1xuICB2YXIgayA9IGtleS5tb2R1bHVzLmJ5dGVMZW5ndGgoKVxuICB2YXIgaUhhc2ggPSBjcmVhdGVIYXNoKCdzaGExJykudXBkYXRlKEJ1ZmZlci5hbGxvYygwKSkuZGlnZXN0KClcbiAgdmFyIGhMZW4gPSBpSGFzaC5sZW5ndGhcbiAgaWYgKG1zZ1swXSAhPT0gMCkge1xuICAgIHRocm93IG5ldyBFcnJvcignZGVjcnlwdGlvbiBlcnJvcicpXG4gIH1cbiAgdmFyIG1hc2tlZFNlZWQgPSBtc2cuc2xpY2UoMSwgaExlbiArIDEpXG4gIHZhciBtYXNrZWREYiA9IG1zZy5zbGljZShoTGVuICsgMSlcbiAgdmFyIHNlZWQgPSB4b3IobWFza2VkU2VlZCwgbWdmKG1hc2tlZERiLCBoTGVuKSlcbiAgdmFyIGRiID0geG9yKG1hc2tlZERiLCBtZ2Yoc2VlZCwgayAtIGhMZW4gLSAxKSlcbiAgaWYgKGNvbXBhcmUoaUhhc2gsIGRiLnNsaWNlKDAsIGhMZW4pKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignZGVjcnlwdGlvbiBlcnJvcicpXG4gIH1cbiAgdmFyIGkgPSBoTGVuXG4gIHdoaWxlIChkYltpXSA9PT0gMCkge1xuICAgIGkrK1xuICB9XG4gIGlmIChkYltpKytdICE9PSAxKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdkZWNyeXB0aW9uIGVycm9yJylcbiAgfVxuICByZXR1cm4gZGIuc2xpY2UoaSlcbn1cblxuZnVuY3Rpb24gcGtjczEgKGtleSwgbXNnLCByZXZlcnNlKSB7XG4gIHZhciBwMSA9IG1zZy5zbGljZSgwLCAyKVxuICB2YXIgaSA9IDJcbiAgdmFyIHN0YXR1cyA9IDBcbiAgd2hpbGUgKG1zZ1tpKytdICE9PSAwKSB7XG4gICAgaWYgKGkgPj0gbXNnLmxlbmd0aCkge1xuICAgICAgc3RhdHVzKytcbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG4gIHZhciBwcyA9IG1zZy5zbGljZSgyLCBpIC0gMSlcblxuICBpZiAoKHAxLnRvU3RyaW5nKCdoZXgnKSAhPT0gJzAwMDInICYmICFyZXZlcnNlKSB8fCAocDEudG9TdHJpbmcoJ2hleCcpICE9PSAnMDAwMScgJiYgcmV2ZXJzZSkpIHtcbiAgICBzdGF0dXMrK1xuICB9XG4gIGlmIChwcy5sZW5ndGggPCA4KSB7XG4gICAgc3RhdHVzKytcbiAgfVxuICBpZiAoc3RhdHVzKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdkZWNyeXB0aW9uIGVycm9yJylcbiAgfVxuICByZXR1cm4gbXNnLnNsaWNlKGkpXG59XG5mdW5jdGlvbiBjb21wYXJlIChhLCBiKSB7XG4gIGEgPSBCdWZmZXIuZnJvbShhKVxuICBiID0gQnVmZmVyLmZyb20oYilcbiAgdmFyIGRpZiA9IDBcbiAgdmFyIGxlbiA9IGEubGVuZ3RoXG4gIGlmIChhLmxlbmd0aCAhPT0gYi5sZW5ndGgpIHtcbiAgICBkaWYrK1xuICAgIGxlbiA9IE1hdGgubWluKGEubGVuZ3RoLCBiLmxlbmd0aClcbiAgfVxuICB2YXIgaSA9IC0xXG4gIHdoaWxlICgrK2kgPCBsZW4pIHtcbiAgICBkaWYgKz0gKGFbaV0gXiBiW2ldKVxuICB9XG4gIHJldHVybiBkaWZcbn1cbiIsIid1c2Ugc3RyaWN0J1xuXG5mdW5jdGlvbiBvbGRCcm93c2VyICgpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdzZWN1cmUgcmFuZG9tIG51bWJlciBnZW5lcmF0aW9uIG5vdCBzdXBwb3J0ZWQgYnkgdGhpcyBicm93c2VyXFxudXNlIGNocm9tZSwgRmlyZUZveCBvciBJbnRlcm5ldCBFeHBsb3JlciAxMScpXG59XG52YXIgc2FmZUJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJylcbnZhciByYW5kb21ieXRlcyA9IHJlcXVpcmUoJ3JhbmRvbWJ5dGVzJylcbnZhciBCdWZmZXIgPSBzYWZlQnVmZmVyLkJ1ZmZlclxudmFyIGtCdWZmZXJNYXhMZW5ndGggPSBzYWZlQnVmZmVyLmtNYXhMZW5ndGhcbnZhciBjcnlwdG8gPSBnbG9iYWwuY3J5cHRvIHx8IGdsb2JhbC5tc0NyeXB0b1xudmFyIGtNYXhVaW50MzIgPSBNYXRoLnBvdygyLCAzMikgLSAxXG5mdW5jdGlvbiBhc3NlcnRPZmZzZXQgKG9mZnNldCwgbGVuZ3RoKSB7XG4gIGlmICh0eXBlb2Ygb2Zmc2V0ICE9PSAnbnVtYmVyJyB8fCBvZmZzZXQgIT09IG9mZnNldCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ29mZnNldCBtdXN0IGJlIGEgbnVtYmVyJylcbiAgfVxuXG4gIGlmIChvZmZzZXQgPiBrTWF4VWludDMyIHx8IG9mZnNldCA8IDApIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdvZmZzZXQgbXVzdCBiZSBhIHVpbnQzMicpXG4gIH1cblxuICBpZiAob2Zmc2V0ID4ga0J1ZmZlck1heExlbmd0aCB8fCBvZmZzZXQgPiBsZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignb2Zmc2V0IG91dCBvZiByYW5nZScpXG4gIH1cbn1cblxuZnVuY3Rpb24gYXNzZXJ0U2l6ZSAoc2l6ZSwgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgaWYgKHR5cGVvZiBzaXplICE9PSAnbnVtYmVyJyB8fCBzaXplICE9PSBzaXplKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignc2l6ZSBtdXN0IGJlIGEgbnVtYmVyJylcbiAgfVxuXG4gIGlmIChzaXplID4ga01heFVpbnQzMiB8fCBzaXplIDwgMCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3NpemUgbXVzdCBiZSBhIHVpbnQzMicpXG4gIH1cblxuICBpZiAoc2l6ZSArIG9mZnNldCA+IGxlbmd0aCB8fCBzaXplID4ga0J1ZmZlck1heExlbmd0aCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdidWZmZXIgdG9vIHNtYWxsJylcbiAgfVxufVxuaWYgKChjcnlwdG8gJiYgY3J5cHRvLmdldFJhbmRvbVZhbHVlcykgfHwgIXByb2Nlc3MuYnJvd3Nlcikge1xuICBleHBvcnRzLnJhbmRvbUZpbGwgPSByYW5kb21GaWxsXG4gIGV4cG9ydHMucmFuZG9tRmlsbFN5bmMgPSByYW5kb21GaWxsU3luY1xufSBlbHNlIHtcbiAgZXhwb3J0cy5yYW5kb21GaWxsID0gb2xkQnJvd3NlclxuICBleHBvcnRzLnJhbmRvbUZpbGxTeW5jID0gb2xkQnJvd3NlclxufVxuZnVuY3Rpb24gcmFuZG9tRmlsbCAoYnVmLCBvZmZzZXQsIHNpemUsIGNiKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGJ1ZikgJiYgIShidWYgaW5zdGFuY2VvZiBnbG9iYWwuVWludDhBcnJheSkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImJ1ZlwiIGFyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXIgb3IgVWludDhBcnJheScpXG4gIH1cblxuICBpZiAodHlwZW9mIG9mZnNldCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNiID0gb2Zmc2V0XG4gICAgb2Zmc2V0ID0gMFxuICAgIHNpemUgPSBidWYubGVuZ3RoXG4gIH0gZWxzZSBpZiAodHlwZW9mIHNpemUgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYiA9IHNpemVcbiAgICBzaXplID0gYnVmLmxlbmd0aCAtIG9mZnNldFxuICB9IGVsc2UgaWYgKHR5cGVvZiBjYiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wiY2JcIiBhcmd1bWVudCBtdXN0IGJlIGEgZnVuY3Rpb24nKVxuICB9XG4gIGFzc2VydE9mZnNldChvZmZzZXQsIGJ1Zi5sZW5ndGgpXG4gIGFzc2VydFNpemUoc2l6ZSwgb2Zmc2V0LCBidWYubGVuZ3RoKVxuICByZXR1cm4gYWN0dWFsRmlsbChidWYsIG9mZnNldCwgc2l6ZSwgY2IpXG59XG5cbmZ1bmN0aW9uIGFjdHVhbEZpbGwgKGJ1Ziwgb2Zmc2V0LCBzaXplLCBjYikge1xuICBpZiAocHJvY2Vzcy5icm93c2VyKSB7XG4gICAgdmFyIG91ckJ1ZiA9IGJ1Zi5idWZmZXJcbiAgICB2YXIgdWludCA9IG5ldyBVaW50OEFycmF5KG91ckJ1Ziwgb2Zmc2V0LCBzaXplKVxuICAgIGNyeXB0by5nZXRSYW5kb21WYWx1ZXModWludClcbiAgICBpZiAoY2IpIHtcbiAgICAgIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICBjYihudWxsLCBidWYpXG4gICAgICB9KVxuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIHJldHVybiBidWZcbiAgfVxuICBpZiAoY2IpIHtcbiAgICByYW5kb21ieXRlcyhzaXplLCBmdW5jdGlvbiAoZXJyLCBieXRlcykge1xuICAgICAgaWYgKGVycikge1xuICAgICAgICByZXR1cm4gY2IoZXJyKVxuICAgICAgfVxuICAgICAgYnl0ZXMuY29weShidWYsIG9mZnNldClcbiAgICAgIGNiKG51bGwsIGJ1ZilcbiAgICB9KVxuICAgIHJldHVyblxuICB9XG4gIHZhciBieXRlcyA9IHJhbmRvbWJ5dGVzKHNpemUpXG4gIGJ5dGVzLmNvcHkoYnVmLCBvZmZzZXQpXG4gIHJldHVybiBidWZcbn1cbmZ1bmN0aW9uIHJhbmRvbUZpbGxTeW5jIChidWYsIG9mZnNldCwgc2l6ZSkge1xuICBpZiAodHlwZW9mIG9mZnNldCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBvZmZzZXQgPSAwXG4gIH1cbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYnVmKSAmJiAhKGJ1ZiBpbnN0YW5jZW9mIGdsb2JhbC5VaW50OEFycmF5KSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wiYnVmXCIgYXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlciBvciBVaW50OEFycmF5JylcbiAgfVxuXG4gIGFzc2VydE9mZnNldChvZmZzZXQsIGJ1Zi5sZW5ndGgpXG5cbiAgaWYgKHNpemUgPT09IHVuZGVmaW5lZCkgc2l6ZSA9IGJ1Zi5sZW5ndGggLSBvZmZzZXRcblxuICBhc3NlcnRTaXplKHNpemUsIG9mZnNldCwgYnVmLmxlbmd0aClcblxuICByZXR1cm4gYWN0dWFsRmlsbChidWYsIG9mZnNldCwgc2l6ZSlcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyO1xuXG52YXIgZ2V0UGFyYW1CeXRlc0ZvckFsZyA9IHJlcXVpcmUoJy4vcGFyYW0tYnl0ZXMtZm9yLWFsZycpO1xuXG52YXIgTUFYX09DVEVUID0gMHg4MCxcblx0Q0xBU1NfVU5JVkVSU0FMID0gMCxcblx0UFJJTUlUSVZFX0JJVCA9IDB4MjAsXG5cdFRBR19TRVEgPSAweDEwLFxuXHRUQUdfSU5UID0gMHgwMixcblx0RU5DT0RFRF9UQUdfU0VRID0gKFRBR19TRVEgfCBQUklNSVRJVkVfQklUKSB8IChDTEFTU19VTklWRVJTQUwgPDwgNiksXG5cdEVOQ09ERURfVEFHX0lOVCA9IFRBR19JTlQgfCAoQ0xBU1NfVU5JVkVSU0FMIDw8IDYpO1xuXG5mdW5jdGlvbiBiYXNlNjRVcmwoYmFzZTY0KSB7XG5cdHJldHVybiBiYXNlNjRcblx0XHQucmVwbGFjZSgvPS9nLCAnJylcblx0XHQucmVwbGFjZSgvXFwrL2csICctJylcblx0XHQucmVwbGFjZSgvXFwvL2csICdfJyk7XG59XG5cbmZ1bmN0aW9uIHNpZ25hdHVyZUFzQnVmZmVyKHNpZ25hdHVyZSkge1xuXHRpZiAoQnVmZmVyLmlzQnVmZmVyKHNpZ25hdHVyZSkpIHtcblx0XHRyZXR1cm4gc2lnbmF0dXJlO1xuXHR9IGVsc2UgaWYgKCdzdHJpbmcnID09PSB0eXBlb2Ygc2lnbmF0dXJlKSB7XG5cdFx0cmV0dXJuIEJ1ZmZlci5mcm9tKHNpZ25hdHVyZSwgJ2Jhc2U2NCcpO1xuXHR9XG5cblx0dGhyb3cgbmV3IFR5cGVFcnJvcignRUNEU0Egc2lnbmF0dXJlIG11c3QgYmUgYSBCYXNlNjQgc3RyaW5nIG9yIGEgQnVmZmVyJyk7XG59XG5cbmZ1bmN0aW9uIGRlclRvSm9zZShzaWduYXR1cmUsIGFsZykge1xuXHRzaWduYXR1cmUgPSBzaWduYXR1cmVBc0J1ZmZlcihzaWduYXR1cmUpO1xuXHR2YXIgcGFyYW1CeXRlcyA9IGdldFBhcmFtQnl0ZXNGb3JBbGcoYWxnKTtcblxuXHQvLyB0aGUgREVSIGVuY29kZWQgcGFyYW0gc2hvdWxkIGF0IG1vc3QgYmUgdGhlIHBhcmFtIHNpemUsIHBsdXMgYSBwYWRkaW5nXG5cdC8vIHplcm8sIHNpbmNlIGR1ZSB0byBiZWluZyBhIHNpZ25lZCBpbnRlZ2VyXG5cdHZhciBtYXhFbmNvZGVkUGFyYW1MZW5ndGggPSBwYXJhbUJ5dGVzICsgMTtcblxuXHR2YXIgaW5wdXRMZW5ndGggPSBzaWduYXR1cmUubGVuZ3RoO1xuXG5cdHZhciBvZmZzZXQgPSAwO1xuXHRpZiAoc2lnbmF0dXJlW29mZnNldCsrXSAhPT0gRU5DT0RFRF9UQUdfU0VRKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKCdDb3VsZCBub3QgZmluZCBleHBlY3RlZCBcInNlcVwiJyk7XG5cdH1cblxuXHR2YXIgc2VxTGVuZ3RoID0gc2lnbmF0dXJlW29mZnNldCsrXTtcblx0aWYgKHNlcUxlbmd0aCA9PT0gKE1BWF9PQ1RFVCB8IDEpKSB7XG5cdFx0c2VxTGVuZ3RoID0gc2lnbmF0dXJlW29mZnNldCsrXTtcblx0fVxuXG5cdGlmIChpbnB1dExlbmd0aCAtIG9mZnNldCA8IHNlcUxlbmd0aCkge1xuXHRcdHRocm93IG5ldyBFcnJvcignXCJzZXFcIiBzcGVjaWZpZWQgbGVuZ3RoIG9mIFwiJyArIHNlcUxlbmd0aCArICdcIiwgb25seSBcIicgKyAoaW5wdXRMZW5ndGggLSBvZmZzZXQpICsgJ1wiIHJlbWFpbmluZycpO1xuXHR9XG5cblx0aWYgKHNpZ25hdHVyZVtvZmZzZXQrK10gIT09IEVOQ09ERURfVEFHX0lOVCkge1xuXHRcdHRocm93IG5ldyBFcnJvcignQ291bGQgbm90IGZpbmQgZXhwZWN0ZWQgXCJpbnRcIiBmb3IgXCJyXCInKTtcblx0fVxuXG5cdHZhciByTGVuZ3RoID0gc2lnbmF0dXJlW29mZnNldCsrXTtcblxuXHRpZiAoaW5wdXRMZW5ndGggLSBvZmZzZXQgLSAyIDwgckxlbmd0aCkge1xuXHRcdHRocm93IG5ldyBFcnJvcignXCJyXCIgc3BlY2lmaWVkIGxlbmd0aCBvZiBcIicgKyByTGVuZ3RoICsgJ1wiLCBvbmx5IFwiJyArIChpbnB1dExlbmd0aCAtIG9mZnNldCAtIDIpICsgJ1wiIGF2YWlsYWJsZScpO1xuXHR9XG5cblx0aWYgKG1heEVuY29kZWRQYXJhbUxlbmd0aCA8IHJMZW5ndGgpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoJ1wiclwiIHNwZWNpZmllZCBsZW5ndGggb2YgXCInICsgckxlbmd0aCArICdcIiwgbWF4IG9mIFwiJyArIG1heEVuY29kZWRQYXJhbUxlbmd0aCArICdcIiBpcyBhY2NlcHRhYmxlJyk7XG5cdH1cblxuXHR2YXIgck9mZnNldCA9IG9mZnNldDtcblx0b2Zmc2V0ICs9IHJMZW5ndGg7XG5cblx0aWYgKHNpZ25hdHVyZVtvZmZzZXQrK10gIT09IEVOQ09ERURfVEFHX0lOVCkge1xuXHRcdHRocm93IG5ldyBFcnJvcignQ291bGQgbm90IGZpbmQgZXhwZWN0ZWQgXCJpbnRcIiBmb3IgXCJzXCInKTtcblx0fVxuXG5cdHZhciBzTGVuZ3RoID0gc2lnbmF0dXJlW29mZnNldCsrXTtcblxuXHRpZiAoaW5wdXRMZW5ndGggLSBvZmZzZXQgIT09IHNMZW5ndGgpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoJ1wic1wiIHNwZWNpZmllZCBsZW5ndGggb2YgXCInICsgc0xlbmd0aCArICdcIiwgZXhwZWN0ZWQgXCInICsgKGlucHV0TGVuZ3RoIC0gb2Zmc2V0KSArICdcIicpO1xuXHR9XG5cblx0aWYgKG1heEVuY29kZWRQYXJhbUxlbmd0aCA8IHNMZW5ndGgpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoJ1wic1wiIHNwZWNpZmllZCBsZW5ndGggb2YgXCInICsgc0xlbmd0aCArICdcIiwgbWF4IG9mIFwiJyArIG1heEVuY29kZWRQYXJhbUxlbmd0aCArICdcIiBpcyBhY2NlcHRhYmxlJyk7XG5cdH1cblxuXHR2YXIgc09mZnNldCA9IG9mZnNldDtcblx0b2Zmc2V0ICs9IHNMZW5ndGg7XG5cblx0aWYgKG9mZnNldCAhPT0gaW5wdXRMZW5ndGgpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHRvIGNvbnN1bWUgZW50aXJlIGJ1ZmZlciwgYnV0IFwiJyArIChpbnB1dExlbmd0aCAtIG9mZnNldCkgKyAnXCIgYnl0ZXMgcmVtYWluJyk7XG5cdH1cblxuXHR2YXIgclBhZGRpbmcgPSBwYXJhbUJ5dGVzIC0gckxlbmd0aCxcblx0XHRzUGFkZGluZyA9IHBhcmFtQnl0ZXMgLSBzTGVuZ3RoO1xuXG5cdHZhciBkc3QgPSBCdWZmZXIuYWxsb2NVbnNhZmUoclBhZGRpbmcgKyByTGVuZ3RoICsgc1BhZGRpbmcgKyBzTGVuZ3RoKTtcblxuXHRmb3IgKG9mZnNldCA9IDA7IG9mZnNldCA8IHJQYWRkaW5nOyArK29mZnNldCkge1xuXHRcdGRzdFtvZmZzZXRdID0gMDtcblx0fVxuXHRzaWduYXR1cmUuY29weShkc3QsIG9mZnNldCwgck9mZnNldCArIE1hdGgubWF4KC1yUGFkZGluZywgMCksIHJPZmZzZXQgKyByTGVuZ3RoKTtcblxuXHRvZmZzZXQgPSBwYXJhbUJ5dGVzO1xuXG5cdGZvciAodmFyIG8gPSBvZmZzZXQ7IG9mZnNldCA8IG8gKyBzUGFkZGluZzsgKytvZmZzZXQpIHtcblx0XHRkc3Rbb2Zmc2V0XSA9IDA7XG5cdH1cblx0c2lnbmF0dXJlLmNvcHkoZHN0LCBvZmZzZXQsIHNPZmZzZXQgKyBNYXRoLm1heCgtc1BhZGRpbmcsIDApLCBzT2Zmc2V0ICsgc0xlbmd0aCk7XG5cblx0ZHN0ID0gZHN0LnRvU3RyaW5nKCdiYXNlNjQnKTtcblx0ZHN0ID0gYmFzZTY0VXJsKGRzdCk7XG5cblx0cmV0dXJuIGRzdDtcbn1cblxuZnVuY3Rpb24gY291bnRQYWRkaW5nKGJ1Ziwgc3RhcnQsIHN0b3ApIHtcblx0dmFyIHBhZGRpbmcgPSAwO1xuXHR3aGlsZSAoc3RhcnQgKyBwYWRkaW5nIDwgc3RvcCAmJiBidWZbc3RhcnQgKyBwYWRkaW5nXSA9PT0gMCkge1xuXHRcdCsrcGFkZGluZztcblx0fVxuXG5cdHZhciBuZWVkc1NpZ24gPSBidWZbc3RhcnQgKyBwYWRkaW5nXSA+PSBNQVhfT0NURVQ7XG5cdGlmIChuZWVkc1NpZ24pIHtcblx0XHQtLXBhZGRpbmc7XG5cdH1cblxuXHRyZXR1cm4gcGFkZGluZztcbn1cblxuZnVuY3Rpb24gam9zZVRvRGVyKHNpZ25hdHVyZSwgYWxnKSB7XG5cdHNpZ25hdHVyZSA9IHNpZ25hdHVyZUFzQnVmZmVyKHNpZ25hdHVyZSk7XG5cdHZhciBwYXJhbUJ5dGVzID0gZ2V0UGFyYW1CeXRlc0ZvckFsZyhhbGcpO1xuXG5cdHZhciBzaWduYXR1cmVCeXRlcyA9IHNpZ25hdHVyZS5sZW5ndGg7XG5cdGlmIChzaWduYXR1cmVCeXRlcyAhPT0gcGFyYW1CeXRlcyAqIDIpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdcIicgKyBhbGcgKyAnXCIgc2lnbmF0dXJlcyBtdXN0IGJlIFwiJyArIHBhcmFtQnl0ZXMgKiAyICsgJ1wiIGJ5dGVzLCBzYXcgXCInICsgc2lnbmF0dXJlQnl0ZXMgKyAnXCInKTtcblx0fVxuXG5cdHZhciByUGFkZGluZyA9IGNvdW50UGFkZGluZyhzaWduYXR1cmUsIDAsIHBhcmFtQnl0ZXMpO1xuXHR2YXIgc1BhZGRpbmcgPSBjb3VudFBhZGRpbmcoc2lnbmF0dXJlLCBwYXJhbUJ5dGVzLCBzaWduYXR1cmUubGVuZ3RoKTtcblx0dmFyIHJMZW5ndGggPSBwYXJhbUJ5dGVzIC0gclBhZGRpbmc7XG5cdHZhciBzTGVuZ3RoID0gcGFyYW1CeXRlcyAtIHNQYWRkaW5nO1xuXG5cdHZhciByc0J5dGVzID0gMSArIDEgKyByTGVuZ3RoICsgMSArIDEgKyBzTGVuZ3RoO1xuXG5cdHZhciBzaG9ydExlbmd0aCA9IHJzQnl0ZXMgPCBNQVhfT0NURVQ7XG5cblx0dmFyIGRzdCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSgoc2hvcnRMZW5ndGggPyAyIDogMykgKyByc0J5dGVzKTtcblxuXHR2YXIgb2Zmc2V0ID0gMDtcblx0ZHN0W29mZnNldCsrXSA9IEVOQ09ERURfVEFHX1NFUTtcblx0aWYgKHNob3J0TGVuZ3RoKSB7XG5cdFx0Ly8gQml0IDggaGFzIHZhbHVlIFwiMFwiXG5cdFx0Ly8gYml0cyA3LTEgZ2l2ZSB0aGUgbGVuZ3RoLlxuXHRcdGRzdFtvZmZzZXQrK10gPSByc0J5dGVzO1xuXHR9IGVsc2Uge1xuXHRcdC8vIEJpdCA4IG9mIGZpcnN0IG9jdGV0IGhhcyB2YWx1ZSBcIjFcIlxuXHRcdC8vIGJpdHMgNy0xIGdpdmUgdGhlIG51bWJlciBvZiBhZGRpdGlvbmFsIGxlbmd0aCBvY3RldHMuXG5cdFx0ZHN0W29mZnNldCsrXSA9IE1BWF9PQ1RFVFx0fCAxO1xuXHRcdC8vIGxlbmd0aCwgYmFzZSAyNTZcblx0XHRkc3Rbb2Zmc2V0KytdID0gcnNCeXRlcyAmIDB4ZmY7XG5cdH1cblx0ZHN0W29mZnNldCsrXSA9IEVOQ09ERURfVEFHX0lOVDtcblx0ZHN0W29mZnNldCsrXSA9IHJMZW5ndGg7XG5cdGlmIChyUGFkZGluZyA8IDApIHtcblx0XHRkc3Rbb2Zmc2V0KytdID0gMDtcblx0XHRvZmZzZXQgKz0gc2lnbmF0dXJlLmNvcHkoZHN0LCBvZmZzZXQsIDAsIHBhcmFtQnl0ZXMpO1xuXHR9IGVsc2Uge1xuXHRcdG9mZnNldCArPSBzaWduYXR1cmUuY29weShkc3QsIG9mZnNldCwgclBhZGRpbmcsIHBhcmFtQnl0ZXMpO1xuXHR9XG5cdGRzdFtvZmZzZXQrK10gPSBFTkNPREVEX1RBR19JTlQ7XG5cdGRzdFtvZmZzZXQrK10gPSBzTGVuZ3RoO1xuXHRpZiAoc1BhZGRpbmcgPCAwKSB7XG5cdFx0ZHN0W29mZnNldCsrXSA9IDA7XG5cdFx0c2lnbmF0dXJlLmNvcHkoZHN0LCBvZmZzZXQsIHBhcmFtQnl0ZXMpO1xuXHR9IGVsc2Uge1xuXHRcdHNpZ25hdHVyZS5jb3B5KGRzdCwgb2Zmc2V0LCBwYXJhbUJ5dGVzICsgc1BhZGRpbmcpO1xuXHR9XG5cblx0cmV0dXJuIGRzdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cdGRlclRvSm9zZTogZGVyVG9Kb3NlLFxuXHRqb3NlVG9EZXI6IGpvc2VUb0RlclxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gZ2V0UGFyYW1TaXplKGtleVNpemUpIHtcblx0dmFyIHJlc3VsdCA9ICgoa2V5U2l6ZSAvIDgpIHwgMCkgKyAoa2V5U2l6ZSAlIDggPT09IDAgPyAwIDogMSk7XG5cdHJldHVybiByZXN1bHQ7XG59XG5cbnZhciBwYXJhbUJ5dGVzRm9yQWxnID0ge1xuXHRFUzI1NjogZ2V0UGFyYW1TaXplKDI1NiksXG5cdEVTMzg0OiBnZXRQYXJhbVNpemUoMzg0KSxcblx0RVM1MTI6IGdldFBhcmFtU2l6ZSg1MjEpXG59O1xuXG5mdW5jdGlvbiBnZXRQYXJhbUJ5dGVzRm9yQWxnKGFsZykge1xuXHR2YXIgcGFyYW1CeXRlcyA9IHBhcmFtQnl0ZXNGb3JBbGdbYWxnXTtcblx0aWYgKHBhcmFtQnl0ZXMpIHtcblx0XHRyZXR1cm4gcGFyYW1CeXRlcztcblx0fVxuXG5cdHRocm93IG5ldyBFcnJvcignVW5rbm93biBhbGdvcml0aG0gXCInICsgYWxnICsgJ1wiJyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0UGFyYW1CeXRlc0ZvckFsZztcbiIsIi8qZ2xvYmFsIG1vZHVsZSovXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXI7XG52YXIgRGF0YVN0cmVhbSA9IHJlcXVpcmUoJy4vZGF0YS1zdHJlYW0nKTtcbnZhciBqd2EgPSByZXF1aXJlKCdqd2EnKTtcbnZhciBTdHJlYW0gPSByZXF1aXJlKCdzdHJlYW0nKTtcbnZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4vdG9zdHJpbmcnKTtcbnZhciB1dGlsID0gcmVxdWlyZSgndXRpbCcpO1xudmFyIEpXU19SRUdFWCA9IC9eW2EtekEtWjAtOVxcLV9dKz9cXC5bYS16QS1aMC05XFwtX10rP1xcLihbYS16QS1aMC05XFwtX10rKT8kLztcblxuZnVuY3Rpb24gaXNPYmplY3QodGhpbmcpIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh0aGluZykgPT09ICdbb2JqZWN0IE9iamVjdF0nO1xufVxuXG5mdW5jdGlvbiBzYWZlSnNvblBhcnNlKHRoaW5nKSB7XG4gIGlmIChpc09iamVjdCh0aGluZykpXG4gICAgcmV0dXJuIHRoaW5nO1xuICB0cnkgeyByZXR1cm4gSlNPTi5wYXJzZSh0aGluZyk7IH1cbiAgY2F0Y2ggKGUpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfVxufVxuXG5mdW5jdGlvbiBoZWFkZXJGcm9tSldTKGp3c1NpZykge1xuICB2YXIgZW5jb2RlZEhlYWRlciA9IGp3c1NpZy5zcGxpdCgnLicsIDEpWzBdO1xuICByZXR1cm4gc2FmZUpzb25QYXJzZShCdWZmZXIuZnJvbShlbmNvZGVkSGVhZGVyLCAnYmFzZTY0JykudG9TdHJpbmcoJ2JpbmFyeScpKTtcbn1cblxuZnVuY3Rpb24gc2VjdXJlZElucHV0RnJvbUpXUyhqd3NTaWcpIHtcbiAgcmV0dXJuIGp3c1NpZy5zcGxpdCgnLicsIDIpLmpvaW4oJy4nKTtcbn1cblxuZnVuY3Rpb24gc2lnbmF0dXJlRnJvbUpXUyhqd3NTaWcpIHtcbiAgcmV0dXJuIGp3c1NpZy5zcGxpdCgnLicpWzJdO1xufVxuXG5mdW5jdGlvbiBwYXlsb2FkRnJvbUpXUyhqd3NTaWcsIGVuY29kaW5nKSB7XG4gIGVuY29kaW5nID0gZW5jb2RpbmcgfHwgJ3V0ZjgnO1xuICB2YXIgcGF5bG9hZCA9IGp3c1NpZy5zcGxpdCgnLicpWzFdO1xuICByZXR1cm4gQnVmZmVyLmZyb20ocGF5bG9hZCwgJ2Jhc2U2NCcpLnRvU3RyaW5nKGVuY29kaW5nKTtcbn1cblxuZnVuY3Rpb24gaXNWYWxpZEp3cyhzdHJpbmcpIHtcbiAgcmV0dXJuIEpXU19SRUdFWC50ZXN0KHN0cmluZykgJiYgISFoZWFkZXJGcm9tSldTKHN0cmluZyk7XG59XG5cbmZ1bmN0aW9uIGp3c1ZlcmlmeShqd3NTaWcsIGFsZ29yaXRobSwgc2VjcmV0T3JLZXkpIHtcbiAgaWYgKCFhbGdvcml0aG0pIHtcbiAgICB2YXIgZXJyID0gbmV3IEVycm9yKFwiTWlzc2luZyBhbGdvcml0aG0gcGFyYW1ldGVyIGZvciBqd3MudmVyaWZ5XCIpO1xuICAgIGVyci5jb2RlID0gXCJNSVNTSU5HX0FMR09SSVRITVwiO1xuICAgIHRocm93IGVycjtcbiAgfVxuICBqd3NTaWcgPSB0b1N0cmluZyhqd3NTaWcpO1xuICB2YXIgc2lnbmF0dXJlID0gc2lnbmF0dXJlRnJvbUpXUyhqd3NTaWcpO1xuICB2YXIgc2VjdXJlZElucHV0ID0gc2VjdXJlZElucHV0RnJvbUpXUyhqd3NTaWcpO1xuICB2YXIgYWxnbyA9IGp3YShhbGdvcml0aG0pO1xuICByZXR1cm4gYWxnby52ZXJpZnkoc2VjdXJlZElucHV0LCBzaWduYXR1cmUsIHNlY3JldE9yS2V5KTtcbn1cblxuZnVuY3Rpb24gandzRGVjb2RlKGp3c1NpZywgb3B0cykge1xuICBvcHRzID0gb3B0cyB8fCB7fTtcbiAgandzU2lnID0gdG9TdHJpbmcoandzU2lnKTtcblxuICBpZiAoIWlzVmFsaWRKd3MoandzU2lnKSlcbiAgICByZXR1cm4gbnVsbDtcblxuICB2YXIgaGVhZGVyID0gaGVhZGVyRnJvbUpXUyhqd3NTaWcpO1xuXG4gIGlmICghaGVhZGVyKVxuICAgIHJldHVybiBudWxsO1xuXG4gIHZhciBwYXlsb2FkID0gcGF5bG9hZEZyb21KV1MoandzU2lnKTtcbiAgaWYgKGhlYWRlci50eXAgPT09ICdKV1QnIHx8IG9wdHMuanNvbilcbiAgICBwYXlsb2FkID0gSlNPTi5wYXJzZShwYXlsb2FkLCBvcHRzLmVuY29kaW5nKTtcblxuICByZXR1cm4ge1xuICAgIGhlYWRlcjogaGVhZGVyLFxuICAgIHBheWxvYWQ6IHBheWxvYWQsXG4gICAgc2lnbmF0dXJlOiBzaWduYXR1cmVGcm9tSldTKGp3c1NpZylcbiAgfTtcbn1cblxuZnVuY3Rpb24gVmVyaWZ5U3RyZWFtKG9wdHMpIHtcbiAgb3B0cyA9IG9wdHMgfHwge307XG4gIHZhciBzZWNyZXRPcktleSA9IG9wdHMuc2VjcmV0fHxvcHRzLnB1YmxpY0tleXx8b3B0cy5rZXk7XG4gIHZhciBzZWNyZXRTdHJlYW0gPSBuZXcgRGF0YVN0cmVhbShzZWNyZXRPcktleSk7XG4gIHRoaXMucmVhZGFibGUgPSB0cnVlO1xuICB0aGlzLmFsZ29yaXRobSA9IG9wdHMuYWxnb3JpdGhtO1xuICB0aGlzLmVuY29kaW5nID0gb3B0cy5lbmNvZGluZztcbiAgdGhpcy5zZWNyZXQgPSB0aGlzLnB1YmxpY0tleSA9IHRoaXMua2V5ID0gc2VjcmV0U3RyZWFtO1xuICB0aGlzLnNpZ25hdHVyZSA9IG5ldyBEYXRhU3RyZWFtKG9wdHMuc2lnbmF0dXJlKTtcbiAgdGhpcy5zZWNyZXQub25jZSgnY2xvc2UnLCBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCF0aGlzLnNpZ25hdHVyZS53cml0YWJsZSAmJiB0aGlzLnJlYWRhYmxlKVxuICAgICAgdGhpcy52ZXJpZnkoKTtcbiAgfS5iaW5kKHRoaXMpKTtcblxuICB0aGlzLnNpZ25hdHVyZS5vbmNlKCdjbG9zZScsIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXRoaXMuc2VjcmV0LndyaXRhYmxlICYmIHRoaXMucmVhZGFibGUpXG4gICAgICB0aGlzLnZlcmlmeSgpO1xuICB9LmJpbmQodGhpcykpO1xufVxudXRpbC5pbmhlcml0cyhWZXJpZnlTdHJlYW0sIFN0cmVhbSk7XG5WZXJpZnlTdHJlYW0ucHJvdG90eXBlLnZlcmlmeSA9IGZ1bmN0aW9uIHZlcmlmeSgpIHtcbiAgdHJ5IHtcbiAgICB2YXIgdmFsaWQgPSBqd3NWZXJpZnkodGhpcy5zaWduYXR1cmUuYnVmZmVyLCB0aGlzLmFsZ29yaXRobSwgdGhpcy5rZXkuYnVmZmVyKTtcbiAgICB2YXIgb2JqID0gandzRGVjb2RlKHRoaXMuc2lnbmF0dXJlLmJ1ZmZlciwgdGhpcy5lbmNvZGluZyk7XG4gICAgdGhpcy5lbWl0KCdkb25lJywgdmFsaWQsIG9iaik7XG4gICAgdGhpcy5lbWl0KCdkYXRhJywgdmFsaWQpO1xuICAgIHRoaXMuZW1pdCgnZW5kJyk7XG4gICAgdGhpcy5yZWFkYWJsZSA9IGZhbHNlO1xuICAgIHJldHVybiB2YWxpZDtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHRoaXMucmVhZGFibGUgPSBmYWxzZTtcbiAgICB0aGlzLmVtaXQoJ2Vycm9yJywgZSk7XG4gICAgdGhpcy5lbWl0KCdjbG9zZScpO1xuICB9XG59O1xuXG5WZXJpZnlTdHJlYW0uZGVjb2RlID0gandzRGVjb2RlO1xuVmVyaWZ5U3RyZWFtLmlzVmFsaWQgPSBpc1ZhbGlkSndzO1xuVmVyaWZ5U3RyZWFtLnZlcmlmeSA9IGp3c1ZlcmlmeTtcblxubW9kdWxlLmV4cG9ydHMgPSBWZXJpZnlTdHJlYW07XG4iLCJ2YXIgSnNvbldlYlRva2VuRXJyb3IgPSByZXF1aXJlKCcuL2xpYi9Kc29uV2ViVG9rZW5FcnJvcicpO1xudmFyIE5vdEJlZm9yZUVycm9yICAgID0gcmVxdWlyZSgnLi9saWIvTm90QmVmb3JlRXJyb3InKTtcbnZhciBUb2tlbkV4cGlyZWRFcnJvciA9IHJlcXVpcmUoJy4vbGliL1Rva2VuRXhwaXJlZEVycm9yJyk7XG52YXIgZGVjb2RlICAgICAgICAgICAgPSByZXF1aXJlKCcuL2RlY29kZScpO1xudmFyIHRpbWVzcGFuICAgICAgICAgID0gcmVxdWlyZSgnLi9saWIvdGltZXNwYW4nKTtcbnZhciBQU19TVVBQT1JURUQgICAgICA9IHJlcXVpcmUoJy4vbGliL3BzU3VwcG9ydGVkJyk7XG52YXIgandzICAgICAgICAgICAgICAgPSByZXF1aXJlKCdqd3MnKTtcblxudmFyIFBVQl9LRVlfQUxHUyA9IFsnUlMyNTYnLCAnUlMzODQnLCAnUlM1MTInLCAnRVMyNTYnLCAnRVMzODQnLCAnRVM1MTInXTtcbnZhciBSU0FfS0VZX0FMR1MgPSBbJ1JTMjU2JywgJ1JTMzg0JywgJ1JTNTEyJ107XG52YXIgSFNfQUxHUyA9IFsnSFMyNTYnLCAnSFMzODQnLCAnSFM1MTInXTtcblxuaWYgKFBTX1NVUFBPUlRFRCkge1xuICBQVUJfS0VZX0FMR1Muc3BsaWNlKDMsIDAsICdQUzI1NicsICdQUzM4NCcsICdQUzUxMicpO1xuICBSU0FfS0VZX0FMR1Muc3BsaWNlKDMsIDAsICdQUzI1NicsICdQUzM4NCcsICdQUzUxMicpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChqd3RTdHJpbmcsIHNlY3JldE9yUHVibGljS2V5LCBvcHRpb25zLCBjYWxsYmFjaykge1xuICBpZiAoKHR5cGVvZiBvcHRpb25zID09PSAnZnVuY3Rpb24nKSAmJiAhY2FsbGJhY2spIHtcbiAgICBjYWxsYmFjayA9IG9wdGlvbnM7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG5cbiAgaWYgKCFvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG5cbiAgLy9jbG9uZSB0aGlzIG9iamVjdCBzaW5jZSB3ZSBhcmUgZ29pbmcgdG8gbXV0YXRlIGl0LlxuICBvcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgb3B0aW9ucyk7XG5cbiAgdmFyIGRvbmU7XG5cbiAgaWYgKGNhbGxiYWNrKSB7XG4gICAgZG9uZSA9IGNhbGxiYWNrO1xuICB9IGVsc2Uge1xuICAgIGRvbmUgPSBmdW5jdGlvbihlcnIsIGRhdGEpIHtcbiAgICAgIGlmIChlcnIpIHRocm93IGVycjtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH07XG4gIH1cblxuICBpZiAob3B0aW9ucy5jbG9ja1RpbWVzdGFtcCAmJiB0eXBlb2Ygb3B0aW9ucy5jbG9ja1RpbWVzdGFtcCAhPT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gZG9uZShuZXcgSnNvbldlYlRva2VuRXJyb3IoJ2Nsb2NrVGltZXN0YW1wIG11c3QgYmUgYSBudW1iZXInKSk7XG4gIH1cblxuICBpZiAob3B0aW9ucy5ub25jZSAhPT0gdW5kZWZpbmVkICYmICh0eXBlb2Ygb3B0aW9ucy5ub25jZSAhPT0gJ3N0cmluZycgfHwgb3B0aW9ucy5ub25jZS50cmltKCkgPT09ICcnKSkge1xuICAgIHJldHVybiBkb25lKG5ldyBKc29uV2ViVG9rZW5FcnJvcignbm9uY2UgbXVzdCBiZSBhIG5vbi1lbXB0eSBzdHJpbmcnKSk7XG4gIH1cblxuICB2YXIgY2xvY2tUaW1lc3RhbXAgPSBvcHRpb25zLmNsb2NrVGltZXN0YW1wIHx8IE1hdGguZmxvb3IoRGF0ZS5ub3coKSAvIDEwMDApO1xuXG4gIGlmICghand0U3RyaW5nKXtcbiAgICByZXR1cm4gZG9uZShuZXcgSnNvbldlYlRva2VuRXJyb3IoJ2p3dCBtdXN0IGJlIHByb3ZpZGVkJykpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBqd3RTdHJpbmcgIT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGRvbmUobmV3IEpzb25XZWJUb2tlbkVycm9yKCdqd3QgbXVzdCBiZSBhIHN0cmluZycpKTtcbiAgfVxuXG4gIHZhciBwYXJ0cyA9IGp3dFN0cmluZy5zcGxpdCgnLicpO1xuXG4gIGlmIChwYXJ0cy5sZW5ndGggIT09IDMpe1xuICAgIHJldHVybiBkb25lKG5ldyBKc29uV2ViVG9rZW5FcnJvcignand0IG1hbGZvcm1lZCcpKTtcbiAgfVxuXG4gIHZhciBkZWNvZGVkVG9rZW47XG5cbiAgdHJ5IHtcbiAgICBkZWNvZGVkVG9rZW4gPSBkZWNvZGUoand0U3RyaW5nLCB7IGNvbXBsZXRlOiB0cnVlIH0pO1xuICB9IGNhdGNoKGVycikge1xuICAgIHJldHVybiBkb25lKGVycik7XG4gIH1cblxuICBpZiAoIWRlY29kZWRUb2tlbikge1xuICAgIHJldHVybiBkb25lKG5ldyBKc29uV2ViVG9rZW5FcnJvcignaW52YWxpZCB0b2tlbicpKTtcbiAgfVxuXG4gIHZhciBoZWFkZXIgPSBkZWNvZGVkVG9rZW4uaGVhZGVyO1xuICB2YXIgZ2V0U2VjcmV0O1xuXG4gIGlmKHR5cGVvZiBzZWNyZXRPclB1YmxpY0tleSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGlmKCFjYWxsYmFjaykge1xuICAgICAgcmV0dXJuIGRvbmUobmV3IEpzb25XZWJUb2tlbkVycm9yKCd2ZXJpZnkgbXVzdCBiZSBjYWxsZWQgYXN5bmNocm9ub3VzIGlmIHNlY3JldCBvciBwdWJsaWMga2V5IGlzIHByb3ZpZGVkIGFzIGEgY2FsbGJhY2snKSk7XG4gICAgfVxuXG4gICAgZ2V0U2VjcmV0ID0gc2VjcmV0T3JQdWJsaWNLZXk7XG4gIH1cbiAgZWxzZSB7XG4gICAgZ2V0U2VjcmV0ID0gZnVuY3Rpb24oaGVhZGVyLCBzZWNyZXRDYWxsYmFjaykge1xuICAgICAgcmV0dXJuIHNlY3JldENhbGxiYWNrKG51bGwsIHNlY3JldE9yUHVibGljS2V5KTtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIGdldFNlY3JldChoZWFkZXIsIGZ1bmN0aW9uKGVyciwgc2VjcmV0T3JQdWJsaWNLZXkpIHtcbiAgICBpZihlcnIpIHtcbiAgICAgIHJldHVybiBkb25lKG5ldyBKc29uV2ViVG9rZW5FcnJvcignZXJyb3IgaW4gc2VjcmV0IG9yIHB1YmxpYyBrZXkgY2FsbGJhY2s6ICcgKyBlcnIubWVzc2FnZSkpO1xuICAgIH1cblxuICAgIHZhciBoYXNTaWduYXR1cmUgPSBwYXJ0c1syXS50cmltKCkgIT09ICcnO1xuXG4gICAgaWYgKCFoYXNTaWduYXR1cmUgJiYgc2VjcmV0T3JQdWJsaWNLZXkpe1xuICAgICAgcmV0dXJuIGRvbmUobmV3IEpzb25XZWJUb2tlbkVycm9yKCdqd3Qgc2lnbmF0dXJlIGlzIHJlcXVpcmVkJykpO1xuICAgIH1cblxuICAgIGlmIChoYXNTaWduYXR1cmUgJiYgIXNlY3JldE9yUHVibGljS2V5KSB7XG4gICAgICByZXR1cm4gZG9uZShuZXcgSnNvbldlYlRva2VuRXJyb3IoJ3NlY3JldCBvciBwdWJsaWMga2V5IG11c3QgYmUgcHJvdmlkZWQnKSk7XG4gICAgfVxuXG4gICAgaWYgKCFoYXNTaWduYXR1cmUgJiYgIW9wdGlvbnMuYWxnb3JpdGhtcykge1xuICAgICAgb3B0aW9ucy5hbGdvcml0aG1zID0gWydub25lJ107XG4gICAgfVxuXG4gICAgaWYgKCFvcHRpb25zLmFsZ29yaXRobXMpIHtcbiAgICAgIG9wdGlvbnMuYWxnb3JpdGhtcyA9IH5zZWNyZXRPclB1YmxpY0tleS50b1N0cmluZygpLmluZGV4T2YoJ0JFR0lOIENFUlRJRklDQVRFJykgfHxcbiAgICAgICAgfnNlY3JldE9yUHVibGljS2V5LnRvU3RyaW5nKCkuaW5kZXhPZignQkVHSU4gUFVCTElDIEtFWScpID8gUFVCX0tFWV9BTEdTIDpcbiAgICAgICAgfnNlY3JldE9yUHVibGljS2V5LnRvU3RyaW5nKCkuaW5kZXhPZignQkVHSU4gUlNBIFBVQkxJQyBLRVknKSA/IFJTQV9LRVlfQUxHUyA6IEhTX0FMR1M7XG5cbiAgICB9XG5cbiAgICBpZiAoIX5vcHRpb25zLmFsZ29yaXRobXMuaW5kZXhPZihkZWNvZGVkVG9rZW4uaGVhZGVyLmFsZykpIHtcbiAgICAgIHJldHVybiBkb25lKG5ldyBKc29uV2ViVG9rZW5FcnJvcignaW52YWxpZCBhbGdvcml0aG0nKSk7XG4gICAgfVxuXG4gICAgdmFyIHZhbGlkO1xuXG4gICAgdHJ5IHtcbiAgICAgIHZhbGlkID0gandzLnZlcmlmeShqd3RTdHJpbmcsIGRlY29kZWRUb2tlbi5oZWFkZXIuYWxnLCBzZWNyZXRPclB1YmxpY0tleSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIGRvbmUoZSk7XG4gICAgfVxuXG4gICAgaWYgKCF2YWxpZCkge1xuICAgICAgcmV0dXJuIGRvbmUobmV3IEpzb25XZWJUb2tlbkVycm9yKCdpbnZhbGlkIHNpZ25hdHVyZScpKTtcbiAgICB9XG5cbiAgICB2YXIgcGF5bG9hZCA9IGRlY29kZWRUb2tlbi5wYXlsb2FkO1xuXG4gICAgaWYgKHR5cGVvZiBwYXlsb2FkLm5iZiAhPT0gJ3VuZGVmaW5lZCcgJiYgIW9wdGlvbnMuaWdub3JlTm90QmVmb3JlKSB7XG4gICAgICBpZiAodHlwZW9mIHBheWxvYWQubmJmICE9PSAnbnVtYmVyJykge1xuICAgICAgICByZXR1cm4gZG9uZShuZXcgSnNvbldlYlRva2VuRXJyb3IoJ2ludmFsaWQgbmJmIHZhbHVlJykpO1xuICAgICAgfVxuICAgICAgaWYgKHBheWxvYWQubmJmID4gY2xvY2tUaW1lc3RhbXAgKyAob3B0aW9ucy5jbG9ja1RvbGVyYW5jZSB8fCAwKSkge1xuICAgICAgICByZXR1cm4gZG9uZShuZXcgTm90QmVmb3JlRXJyb3IoJ2p3dCBub3QgYWN0aXZlJywgbmV3IERhdGUocGF5bG9hZC5uYmYgKiAxMDAwKSkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0eXBlb2YgcGF5bG9hZC5leHAgIT09ICd1bmRlZmluZWQnICYmICFvcHRpb25zLmlnbm9yZUV4cGlyYXRpb24pIHtcbiAgICAgIGlmICh0eXBlb2YgcGF5bG9hZC5leHAgIT09ICdudW1iZXInKSB7XG4gICAgICAgIHJldHVybiBkb25lKG5ldyBKc29uV2ViVG9rZW5FcnJvcignaW52YWxpZCBleHAgdmFsdWUnKSk7XG4gICAgICB9XG4gICAgICBpZiAoY2xvY2tUaW1lc3RhbXAgPj0gcGF5bG9hZC5leHAgKyAob3B0aW9ucy5jbG9ja1RvbGVyYW5jZSB8fCAwKSkge1xuICAgICAgICByZXR1cm4gZG9uZShuZXcgVG9rZW5FeHBpcmVkRXJyb3IoJ2p3dCBleHBpcmVkJywgbmV3IERhdGUocGF5bG9hZC5leHAgKiAxMDAwKSkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChvcHRpb25zLmF1ZGllbmNlKSB7XG4gICAgICB2YXIgYXVkaWVuY2VzID0gQXJyYXkuaXNBcnJheShvcHRpb25zLmF1ZGllbmNlKSA/IG9wdGlvbnMuYXVkaWVuY2UgOiBbb3B0aW9ucy5hdWRpZW5jZV07XG4gICAgICB2YXIgdGFyZ2V0ID0gQXJyYXkuaXNBcnJheShwYXlsb2FkLmF1ZCkgPyBwYXlsb2FkLmF1ZCA6IFtwYXlsb2FkLmF1ZF07XG5cbiAgICAgIHZhciBtYXRjaCA9IHRhcmdldC5zb21lKGZ1bmN0aW9uICh0YXJnZXRBdWRpZW5jZSkge1xuICAgICAgICByZXR1cm4gYXVkaWVuY2VzLnNvbWUoZnVuY3Rpb24gKGF1ZGllbmNlKSB7XG4gICAgICAgICAgcmV0dXJuIGF1ZGllbmNlIGluc3RhbmNlb2YgUmVnRXhwID8gYXVkaWVuY2UudGVzdCh0YXJnZXRBdWRpZW5jZSkgOiBhdWRpZW5jZSA9PT0gdGFyZ2V0QXVkaWVuY2U7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG5cbiAgICAgIGlmICghbWF0Y2gpIHtcbiAgICAgICAgcmV0dXJuIGRvbmUobmV3IEpzb25XZWJUb2tlbkVycm9yKCdqd3QgYXVkaWVuY2UgaW52YWxpZC4gZXhwZWN0ZWQ6ICcgKyBhdWRpZW5jZXMuam9pbignIG9yICcpKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuaXNzdWVyKSB7XG4gICAgICB2YXIgaW52YWxpZF9pc3N1ZXIgPVxuICAgICAgICAgICAgICAodHlwZW9mIG9wdGlvbnMuaXNzdWVyID09PSAnc3RyaW5nJyAmJiBwYXlsb2FkLmlzcyAhPT0gb3B0aW9ucy5pc3N1ZXIpIHx8XG4gICAgICAgICAgICAgIChBcnJheS5pc0FycmF5KG9wdGlvbnMuaXNzdWVyKSAmJiBvcHRpb25zLmlzc3Vlci5pbmRleE9mKHBheWxvYWQuaXNzKSA9PT0gLTEpO1xuXG4gICAgICBpZiAoaW52YWxpZF9pc3N1ZXIpIHtcbiAgICAgICAgcmV0dXJuIGRvbmUobmV3IEpzb25XZWJUb2tlbkVycm9yKCdqd3QgaXNzdWVyIGludmFsaWQuIGV4cGVjdGVkOiAnICsgb3B0aW9ucy5pc3N1ZXIpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5zdWJqZWN0KSB7XG4gICAgICBpZiAocGF5bG9hZC5zdWIgIT09IG9wdGlvbnMuc3ViamVjdCkge1xuICAgICAgICByZXR1cm4gZG9uZShuZXcgSnNvbldlYlRva2VuRXJyb3IoJ2p3dCBzdWJqZWN0IGludmFsaWQuIGV4cGVjdGVkOiAnICsgb3B0aW9ucy5zdWJqZWN0KSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuand0aWQpIHtcbiAgICAgIGlmIChwYXlsb2FkLmp0aSAhPT0gb3B0aW9ucy5qd3RpZCkge1xuICAgICAgICByZXR1cm4gZG9uZShuZXcgSnNvbldlYlRva2VuRXJyb3IoJ2p3dCBqd3RpZCBpbnZhbGlkLiBleHBlY3RlZDogJyArIG9wdGlvbnMuand0aWQpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5ub25jZSkge1xuICAgICAgaWYgKHBheWxvYWQubm9uY2UgIT09IG9wdGlvbnMubm9uY2UpIHtcbiAgICAgICAgcmV0dXJuIGRvbmUobmV3IEpzb25XZWJUb2tlbkVycm9yKCdqd3Qgbm9uY2UgaW52YWxpZC4gZXhwZWN0ZWQ6ICcgKyBvcHRpb25zLm5vbmNlKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMubWF4QWdlKSB7XG4gICAgICBpZiAodHlwZW9mIHBheWxvYWQuaWF0ICE9PSAnbnVtYmVyJykge1xuICAgICAgICByZXR1cm4gZG9uZShuZXcgSnNvbldlYlRva2VuRXJyb3IoJ2lhdCByZXF1aXJlZCB3aGVuIG1heEFnZSBpcyBzcGVjaWZpZWQnKSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBtYXhBZ2VUaW1lc3RhbXAgPSB0aW1lc3BhbihvcHRpb25zLm1heEFnZSwgcGF5bG9hZC5pYXQpO1xuICAgICAgaWYgKHR5cGVvZiBtYXhBZ2VUaW1lc3RhbXAgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybiBkb25lKG5ldyBKc29uV2ViVG9rZW5FcnJvcignXCJtYXhBZ2VcIiBzaG91bGQgYmUgYSBudW1iZXIgb2Ygc2Vjb25kcyBvciBzdHJpbmcgcmVwcmVzZW50aW5nIGEgdGltZXNwYW4gZWc6IFwiMWRcIiwgXCIyMGhcIiwgNjAnKSk7XG4gICAgICB9XG4gICAgICBpZiAoY2xvY2tUaW1lc3RhbXAgPj0gbWF4QWdlVGltZXN0YW1wICsgKG9wdGlvbnMuY2xvY2tUb2xlcmFuY2UgfHwgMCkpIHtcbiAgICAgICAgcmV0dXJuIGRvbmUobmV3IFRva2VuRXhwaXJlZEVycm9yKCdtYXhBZ2UgZXhjZWVkZWQnLCBuZXcgRGF0ZShtYXhBZ2VUaW1lc3RhbXAgKiAxMDAwKSkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChvcHRpb25zLmNvbXBsZXRlID09PSB0cnVlKSB7XG4gICAgICB2YXIgc2lnbmF0dXJlID0gZGVjb2RlZFRva2VuLnNpZ25hdHVyZTtcblxuICAgICAgcmV0dXJuIGRvbmUobnVsbCwge1xuICAgICAgICBoZWFkZXI6IGhlYWRlcixcbiAgICAgICAgcGF5bG9hZDogcGF5bG9hZCxcbiAgICAgICAgc2lnbmF0dXJlOiBzaWduYXR1cmVcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBkb25lKG51bGwsIHBheWxvYWQpO1xuICB9KTtcbn07XG4iLCIvKipcbiAqIEhlbHBlcnMuXG4gKi9cblxudmFyIHMgPSAxMDAwO1xudmFyIG0gPSBzICogNjA7XG52YXIgaCA9IG0gKiA2MDtcbnZhciBkID0gaCAqIDI0O1xudmFyIHcgPSBkICogNztcbnZhciB5ID0gZCAqIDM2NS4yNTtcblxuLyoqXG4gKiBQYXJzZSBvciBmb3JtYXQgdGhlIGdpdmVuIGB2YWxgLlxuICpcbiAqIE9wdGlvbnM6XG4gKlxuICogIC0gYGxvbmdgIHZlcmJvc2UgZm9ybWF0dGluZyBbZmFsc2VdXG4gKlxuICogQHBhcmFtIHtTdHJpbmd8TnVtYmVyfSB2YWxcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cbiAqIEB0aHJvd3Mge0Vycm9yfSB0aHJvdyBhbiBlcnJvciBpZiB2YWwgaXMgbm90IGEgbm9uLWVtcHR5IHN0cmluZyBvciBhIG51bWJlclxuICogQHJldHVybiB7U3RyaW5nfE51bWJlcn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbih2YWwsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbDtcbiAgaWYgKHR5cGUgPT09ICdzdHJpbmcnICYmIHZhbC5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuIHBhcnNlKHZhbCk7XG4gIH0gZWxzZSBpZiAodHlwZSA9PT0gJ251bWJlcicgJiYgaXNGaW5pdGUodmFsKSkge1xuICAgIHJldHVybiBvcHRpb25zLmxvbmcgPyBmbXRMb25nKHZhbCkgOiBmbXRTaG9ydCh2YWwpO1xuICB9XG4gIHRocm93IG5ldyBFcnJvcihcbiAgICAndmFsIGlzIG5vdCBhIG5vbi1lbXB0eSBzdHJpbmcgb3IgYSB2YWxpZCBudW1iZXIuIHZhbD0nICtcbiAgICAgIEpTT04uc3RyaW5naWZ5KHZhbClcbiAgKTtcbn07XG5cbi8qKlxuICogUGFyc2UgdGhlIGdpdmVuIGBzdHJgIGFuZCByZXR1cm4gbWlsbGlzZWNvbmRzLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge051bWJlcn1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHBhcnNlKHN0cikge1xuICBzdHIgPSBTdHJpbmcoc3RyKTtcbiAgaWYgKHN0ci5sZW5ndGggPiAxMDApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIG1hdGNoID0gL14oLT8oPzpcXGQrKT9cXC4/XFxkKykgKihtaWxsaXNlY29uZHM/fG1zZWNzP3xtc3xzZWNvbmRzP3xzZWNzP3xzfG1pbnV0ZXM/fG1pbnM/fG18aG91cnM/fGhycz98aHxkYXlzP3xkfHdlZWtzP3x3fHllYXJzP3x5cnM/fHkpPyQvaS5leGVjKFxuICAgIHN0clxuICApO1xuICBpZiAoIW1hdGNoKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBuID0gcGFyc2VGbG9hdChtYXRjaFsxXSk7XG4gIHZhciB0eXBlID0gKG1hdGNoWzJdIHx8ICdtcycpLnRvTG93ZXJDYXNlKCk7XG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgJ3llYXJzJzpcbiAgICBjYXNlICd5ZWFyJzpcbiAgICBjYXNlICd5cnMnOlxuICAgIGNhc2UgJ3lyJzpcbiAgICBjYXNlICd5JzpcbiAgICAgIHJldHVybiBuICogeTtcbiAgICBjYXNlICd3ZWVrcyc6XG4gICAgY2FzZSAnd2Vlayc6XG4gICAgY2FzZSAndyc6XG4gICAgICByZXR1cm4gbiAqIHc7XG4gICAgY2FzZSAnZGF5cyc6XG4gICAgY2FzZSAnZGF5JzpcbiAgICBjYXNlICdkJzpcbiAgICAgIHJldHVybiBuICogZDtcbiAgICBjYXNlICdob3Vycyc6XG4gICAgY2FzZSAnaG91cic6XG4gICAgY2FzZSAnaHJzJzpcbiAgICBjYXNlICdocic6XG4gICAgY2FzZSAnaCc6XG4gICAgICByZXR1cm4gbiAqIGg7XG4gICAgY2FzZSAnbWludXRlcyc6XG4gICAgY2FzZSAnbWludXRlJzpcbiAgICBjYXNlICdtaW5zJzpcbiAgICBjYXNlICdtaW4nOlxuICAgIGNhc2UgJ20nOlxuICAgICAgcmV0dXJuIG4gKiBtO1xuICAgIGNhc2UgJ3NlY29uZHMnOlxuICAgIGNhc2UgJ3NlY29uZCc6XG4gICAgY2FzZSAnc2Vjcyc6XG4gICAgY2FzZSAnc2VjJzpcbiAgICBjYXNlICdzJzpcbiAgICAgIHJldHVybiBuICogcztcbiAgICBjYXNlICdtaWxsaXNlY29uZHMnOlxuICAgIGNhc2UgJ21pbGxpc2Vjb25kJzpcbiAgICBjYXNlICdtc2Vjcyc6XG4gICAgY2FzZSAnbXNlYyc6XG4gICAgY2FzZSAnbXMnOlxuICAgICAgcmV0dXJuIG47XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbn1cblxuLyoqXG4gKiBTaG9ydCBmb3JtYXQgZm9yIGBtc2AuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IG1zXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBmbXRTaG9ydChtcykge1xuICB2YXIgbXNBYnMgPSBNYXRoLmFicyhtcyk7XG4gIGlmIChtc0FicyA+PSBkKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBkKSArICdkJztcbiAgfVxuICBpZiAobXNBYnMgPj0gaCkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gaCkgKyAnaCc7XG4gIH1cbiAgaWYgKG1zQWJzID49IG0pIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIG0pICsgJ20nO1xuICB9XG4gIGlmIChtc0FicyA+PSBzKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBzKSArICdzJztcbiAgfVxuICByZXR1cm4gbXMgKyAnbXMnO1xufVxuXG4vKipcbiAqIExvbmcgZm9ybWF0IGZvciBgbXNgLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBtc1xuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gZm10TG9uZyhtcykge1xuICB2YXIgbXNBYnMgPSBNYXRoLmFicyhtcyk7XG4gIGlmIChtc0FicyA+PSBkKSB7XG4gICAgcmV0dXJuIHBsdXJhbChtcywgbXNBYnMsIGQsICdkYXknKTtcbiAgfVxuICBpZiAobXNBYnMgPj0gaCkge1xuICAgIHJldHVybiBwbHVyYWwobXMsIG1zQWJzLCBoLCAnaG91cicpO1xuICB9XG4gIGlmIChtc0FicyA+PSBtKSB7XG4gICAgcmV0dXJuIHBsdXJhbChtcywgbXNBYnMsIG0sICdtaW51dGUnKTtcbiAgfVxuICBpZiAobXNBYnMgPj0gcykge1xuICAgIHJldHVybiBwbHVyYWwobXMsIG1zQWJzLCBzLCAnc2Vjb25kJyk7XG4gIH1cbiAgcmV0dXJuIG1zICsgJyBtcyc7XG59XG5cbi8qKlxuICogUGx1cmFsaXphdGlvbiBoZWxwZXIuXG4gKi9cblxuZnVuY3Rpb24gcGx1cmFsKG1zLCBtc0FicywgbiwgbmFtZSkge1xuICB2YXIgaXNQbHVyYWwgPSBtc0FicyA+PSBuICogMS41O1xuICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIG4pICsgJyAnICsgbmFtZSArIChpc1BsdXJhbCA/ICdzJyA6ICcnKTtcbn1cbiIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IFNlbVZlclxuXG52YXIgZGVidWdcbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5pZiAodHlwZW9mIHByb2Nlc3MgPT09ICdvYmplY3QnICYmXG4gICAgcHJvY2Vzcy5lbnYgJiZcbiAgICBwcm9jZXNzLmVudi5OT0RFX0RFQlVHICYmXG4gICAgL1xcYnNlbXZlclxcYi9pLnRlc3QocHJvY2Vzcy5lbnYuTk9ERV9ERUJVRykpIHtcbiAgZGVidWcgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDApXG4gICAgYXJncy51bnNoaWZ0KCdTRU1WRVInKVxuICAgIGNvbnNvbGUubG9nLmFwcGx5KGNvbnNvbGUsIGFyZ3MpXG4gIH1cbn0gZWxzZSB7XG4gIGRlYnVnID0gZnVuY3Rpb24gKCkge31cbn1cblxuLy8gTm90ZTogdGhpcyBpcyB0aGUgc2VtdmVyLm9yZyB2ZXJzaW9uIG9mIHRoZSBzcGVjIHRoYXQgaXQgaW1wbGVtZW50c1xuLy8gTm90IG5lY2Vzc2FyaWx5IHRoZSBwYWNrYWdlIHZlcnNpb24gb2YgdGhpcyBjb2RlLlxuZXhwb3J0cy5TRU1WRVJfU1BFQ19WRVJTSU9OID0gJzIuMC4wJ1xuXG52YXIgTUFYX0xFTkdUSCA9IDI1NlxudmFyIE1BWF9TQUZFX0lOVEVHRVIgPSBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUiB8fFxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLyA5MDA3MTk5MjU0NzQwOTkxXG5cbi8vIE1heCBzYWZlIHNlZ21lbnQgbGVuZ3RoIGZvciBjb2VyY2lvbi5cbnZhciBNQVhfU0FGRV9DT01QT05FTlRfTEVOR1RIID0gMTZcblxuLy8gVGhlIGFjdHVhbCByZWdleHBzIGdvIG9uIGV4cG9ydHMucmVcbnZhciByZSA9IGV4cG9ydHMucmUgPSBbXVxudmFyIHNyYyA9IGV4cG9ydHMuc3JjID0gW11cbnZhciBSID0gMFxuXG4vLyBUaGUgZm9sbG93aW5nIFJlZ3VsYXIgRXhwcmVzc2lvbnMgY2FuIGJlIHVzZWQgZm9yIHRva2VuaXppbmcsXG4vLyB2YWxpZGF0aW5nLCBhbmQgcGFyc2luZyBTZW1WZXIgdmVyc2lvbiBzdHJpbmdzLlxuXG4vLyAjIyBOdW1lcmljIElkZW50aWZpZXJcbi8vIEEgc2luZ2xlIGAwYCwgb3IgYSBub24temVybyBkaWdpdCBmb2xsb3dlZCBieSB6ZXJvIG9yIG1vcmUgZGlnaXRzLlxuXG52YXIgTlVNRVJJQ0lERU5USUZJRVIgPSBSKytcbnNyY1tOVU1FUklDSURFTlRJRklFUl0gPSAnMHxbMS05XVxcXFxkKidcbnZhciBOVU1FUklDSURFTlRJRklFUkxPT1NFID0gUisrXG5zcmNbTlVNRVJJQ0lERU5USUZJRVJMT09TRV0gPSAnWzAtOV0rJ1xuXG4vLyAjIyBOb24tbnVtZXJpYyBJZGVudGlmaWVyXG4vLyBaZXJvIG9yIG1vcmUgZGlnaXRzLCBmb2xsb3dlZCBieSBhIGxldHRlciBvciBoeXBoZW4sIGFuZCB0aGVuIHplcm8gb3Jcbi8vIG1vcmUgbGV0dGVycywgZGlnaXRzLCBvciBoeXBoZW5zLlxuXG52YXIgTk9OTlVNRVJJQ0lERU5USUZJRVIgPSBSKytcbnNyY1tOT05OVU1FUklDSURFTlRJRklFUl0gPSAnXFxcXGQqW2EtekEtWi1dW2EtekEtWjAtOS1dKidcblxuLy8gIyMgTWFpbiBWZXJzaW9uXG4vLyBUaHJlZSBkb3Qtc2VwYXJhdGVkIG51bWVyaWMgaWRlbnRpZmllcnMuXG5cbnZhciBNQUlOVkVSU0lPTiA9IFIrK1xuc3JjW01BSU5WRVJTSU9OXSA9ICcoJyArIHNyY1tOVU1FUklDSURFTlRJRklFUl0gKyAnKVxcXFwuJyArXG4gICAgICAgICAgICAgICAgICAgJygnICsgc3JjW05VTUVSSUNJREVOVElGSUVSXSArICcpXFxcXC4nICtcbiAgICAgICAgICAgICAgICAgICAnKCcgKyBzcmNbTlVNRVJJQ0lERU5USUZJRVJdICsgJyknXG5cbnZhciBNQUlOVkVSU0lPTkxPT1NFID0gUisrXG5zcmNbTUFJTlZFUlNJT05MT09TRV0gPSAnKCcgKyBzcmNbTlVNRVJJQ0lERU5USUZJRVJMT09TRV0gKyAnKVxcXFwuJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAnKCcgKyBzcmNbTlVNRVJJQ0lERU5USUZJRVJMT09TRV0gKyAnKVxcXFwuJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAnKCcgKyBzcmNbTlVNRVJJQ0lERU5USUZJRVJMT09TRV0gKyAnKSdcblxuLy8gIyMgUHJlLXJlbGVhc2UgVmVyc2lvbiBJZGVudGlmaWVyXG4vLyBBIG51bWVyaWMgaWRlbnRpZmllciwgb3IgYSBub24tbnVtZXJpYyBpZGVudGlmaWVyLlxuXG52YXIgUFJFUkVMRUFTRUlERU5USUZJRVIgPSBSKytcbnNyY1tQUkVSRUxFQVNFSURFTlRJRklFUl0gPSAnKD86JyArIHNyY1tOVU1FUklDSURFTlRJRklFUl0gK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICd8JyArIHNyY1tOT05OVU1FUklDSURFTlRJRklFUl0gKyAnKSdcblxudmFyIFBSRVJFTEVBU0VJREVOVElGSUVSTE9PU0UgPSBSKytcbnNyY1tQUkVSRUxFQVNFSURFTlRJRklFUkxPT1NFXSA9ICcoPzonICsgc3JjW05VTUVSSUNJREVOVElGSUVSTE9PU0VdICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd8JyArIHNyY1tOT05OVU1FUklDSURFTlRJRklFUl0gKyAnKSdcblxuLy8gIyMgUHJlLXJlbGVhc2UgVmVyc2lvblxuLy8gSHlwaGVuLCBmb2xsb3dlZCBieSBvbmUgb3IgbW9yZSBkb3Qtc2VwYXJhdGVkIHByZS1yZWxlYXNlIHZlcnNpb25cbi8vIGlkZW50aWZpZXJzLlxuXG52YXIgUFJFUkVMRUFTRSA9IFIrK1xuc3JjW1BSRVJFTEVBU0VdID0gJyg/Oi0oJyArIHNyY1tQUkVSRUxFQVNFSURFTlRJRklFUl0gK1xuICAgICAgICAgICAgICAgICAgJyg/OlxcXFwuJyArIHNyY1tQUkVSRUxFQVNFSURFTlRJRklFUl0gKyAnKSopKSdcblxudmFyIFBSRVJFTEVBU0VMT09TRSA9IFIrK1xuc3JjW1BSRVJFTEVBU0VMT09TRV0gPSAnKD86LT8oJyArIHNyY1tQUkVSRUxFQVNFSURFTlRJRklFUkxPT1NFXSArXG4gICAgICAgICAgICAgICAgICAgICAgICcoPzpcXFxcLicgKyBzcmNbUFJFUkVMRUFTRUlERU5USUZJRVJMT09TRV0gKyAnKSopKSdcblxuLy8gIyMgQnVpbGQgTWV0YWRhdGEgSWRlbnRpZmllclxuLy8gQW55IGNvbWJpbmF0aW9uIG9mIGRpZ2l0cywgbGV0dGVycywgb3IgaHlwaGVucy5cblxudmFyIEJVSUxESURFTlRJRklFUiA9IFIrK1xuc3JjW0JVSUxESURFTlRJRklFUl0gPSAnWzAtOUEtWmEtei1dKydcblxuLy8gIyMgQnVpbGQgTWV0YWRhdGFcbi8vIFBsdXMgc2lnbiwgZm9sbG93ZWQgYnkgb25lIG9yIG1vcmUgcGVyaW9kLXNlcGFyYXRlZCBidWlsZCBtZXRhZGF0YVxuLy8gaWRlbnRpZmllcnMuXG5cbnZhciBCVUlMRCA9IFIrK1xuc3JjW0JVSUxEXSA9ICcoPzpcXFxcKygnICsgc3JjW0JVSUxESURFTlRJRklFUl0gK1xuICAgICAgICAgICAgICcoPzpcXFxcLicgKyBzcmNbQlVJTERJREVOVElGSUVSXSArICcpKikpJ1xuXG4vLyAjIyBGdWxsIFZlcnNpb24gU3RyaW5nXG4vLyBBIG1haW4gdmVyc2lvbiwgZm9sbG93ZWQgb3B0aW9uYWxseSBieSBhIHByZS1yZWxlYXNlIHZlcnNpb24gYW5kXG4vLyBidWlsZCBtZXRhZGF0YS5cblxuLy8gTm90ZSB0aGF0IHRoZSBvbmx5IG1ham9yLCBtaW5vciwgcGF0Y2gsIGFuZCBwcmUtcmVsZWFzZSBzZWN0aW9ucyBvZlxuLy8gdGhlIHZlcnNpb24gc3RyaW5nIGFyZSBjYXB0dXJpbmcgZ3JvdXBzLiAgVGhlIGJ1aWxkIG1ldGFkYXRhIGlzIG5vdCBhXG4vLyBjYXB0dXJpbmcgZ3JvdXAsIGJlY2F1c2UgaXQgc2hvdWxkIG5vdCBldmVyIGJlIHVzZWQgaW4gdmVyc2lvblxuLy8gY29tcGFyaXNvbi5cblxudmFyIEZVTEwgPSBSKytcbnZhciBGVUxMUExBSU4gPSAndj8nICsgc3JjW01BSU5WRVJTSU9OXSArXG4gICAgICAgICAgICAgICAgc3JjW1BSRVJFTEVBU0VdICsgJz8nICtcbiAgICAgICAgICAgICAgICBzcmNbQlVJTERdICsgJz8nXG5cbnNyY1tGVUxMXSA9ICdeJyArIEZVTExQTEFJTiArICckJ1xuXG4vLyBsaWtlIGZ1bGwsIGJ1dCBhbGxvd3MgdjEuMi4zIGFuZCA9MS4yLjMsIHdoaWNoIHBlb3BsZSBkbyBzb21ldGltZXMuXG4vLyBhbHNvLCAxLjAuMGFscGhhMSAocHJlcmVsZWFzZSB3aXRob3V0IHRoZSBoeXBoZW4pIHdoaWNoIGlzIHByZXR0eVxuLy8gY29tbW9uIGluIHRoZSBucG0gcmVnaXN0cnkuXG52YXIgTE9PU0VQTEFJTiA9ICdbdj1cXFxcc10qJyArIHNyY1tNQUlOVkVSU0lPTkxPT1NFXSArXG4gICAgICAgICAgICAgICAgIHNyY1tQUkVSRUxFQVNFTE9PU0VdICsgJz8nICtcbiAgICAgICAgICAgICAgICAgc3JjW0JVSUxEXSArICc/J1xuXG52YXIgTE9PU0UgPSBSKytcbnNyY1tMT09TRV0gPSAnXicgKyBMT09TRVBMQUlOICsgJyQnXG5cbnZhciBHVExUID0gUisrXG5zcmNbR1RMVF0gPSAnKCg/Ojx8Pik/PT8pJ1xuXG4vLyBTb21ldGhpbmcgbGlrZSBcIjIuKlwiIG9yIFwiMS4yLnhcIi5cbi8vIE5vdGUgdGhhdCBcIngueFwiIGlzIGEgdmFsaWQgeFJhbmdlIGlkZW50aWZlciwgbWVhbmluZyBcImFueSB2ZXJzaW9uXCJcbi8vIE9ubHkgdGhlIGZpcnN0IGl0ZW0gaXMgc3RyaWN0bHkgcmVxdWlyZWQuXG52YXIgWFJBTkdFSURFTlRJRklFUkxPT1NFID0gUisrXG5zcmNbWFJBTkdFSURFTlRJRklFUkxPT1NFXSA9IHNyY1tOVU1FUklDSURFTlRJRklFUkxPT1NFXSArICd8eHxYfFxcXFwqJ1xudmFyIFhSQU5HRUlERU5USUZJRVIgPSBSKytcbnNyY1tYUkFOR0VJREVOVElGSUVSXSA9IHNyY1tOVU1FUklDSURFTlRJRklFUl0gKyAnfHh8WHxcXFxcKidcblxudmFyIFhSQU5HRVBMQUlOID0gUisrXG5zcmNbWFJBTkdFUExBSU5dID0gJ1t2PVxcXFxzXSooJyArIHNyY1tYUkFOR0VJREVOVElGSUVSXSArICcpJyArXG4gICAgICAgICAgICAgICAgICAgJyg/OlxcXFwuKCcgKyBzcmNbWFJBTkdFSURFTlRJRklFUl0gKyAnKScgK1xuICAgICAgICAgICAgICAgICAgICcoPzpcXFxcLignICsgc3JjW1hSQU5HRUlERU5USUZJRVJdICsgJyknICtcbiAgICAgICAgICAgICAgICAgICAnKD86JyArIHNyY1tQUkVSRUxFQVNFXSArICcpPycgK1xuICAgICAgICAgICAgICAgICAgIHNyY1tCVUlMRF0gKyAnPycgK1xuICAgICAgICAgICAgICAgICAgICcpPyk/J1xuXG52YXIgWFJBTkdFUExBSU5MT09TRSA9IFIrK1xuc3JjW1hSQU5HRVBMQUlOTE9PU0VdID0gJ1t2PVxcXFxzXSooJyArIHNyY1tYUkFOR0VJREVOVElGSUVSTE9PU0VdICsgJyknICtcbiAgICAgICAgICAgICAgICAgICAgICAgICcoPzpcXFxcLignICsgc3JjW1hSQU5HRUlERU5USUZJRVJMT09TRV0gKyAnKScgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJyg/OlxcXFwuKCcgKyBzcmNbWFJBTkdFSURFTlRJRklFUkxPT1NFXSArICcpJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAnKD86JyArIHNyY1tQUkVSRUxFQVNFTE9PU0VdICsgJyk/JyArXG4gICAgICAgICAgICAgICAgICAgICAgICBzcmNbQlVJTERdICsgJz8nICtcbiAgICAgICAgICAgICAgICAgICAgICAgICcpPyk/J1xuXG52YXIgWFJBTkdFID0gUisrXG5zcmNbWFJBTkdFXSA9ICdeJyArIHNyY1tHVExUXSArICdcXFxccyonICsgc3JjW1hSQU5HRVBMQUlOXSArICckJ1xudmFyIFhSQU5HRUxPT1NFID0gUisrXG5zcmNbWFJBTkdFTE9PU0VdID0gJ14nICsgc3JjW0dUTFRdICsgJ1xcXFxzKicgKyBzcmNbWFJBTkdFUExBSU5MT09TRV0gKyAnJCdcblxuLy8gQ29lcmNpb24uXG4vLyBFeHRyYWN0IGFueXRoaW5nIHRoYXQgY291bGQgY29uY2VpdmFibHkgYmUgYSBwYXJ0IG9mIGEgdmFsaWQgc2VtdmVyXG52YXIgQ09FUkNFID0gUisrXG5zcmNbQ09FUkNFXSA9ICcoPzpefFteXFxcXGRdKScgK1xuICAgICAgICAgICAgICAnKFxcXFxkezEsJyArIE1BWF9TQUZFX0NPTVBPTkVOVF9MRU5HVEggKyAnfSknICtcbiAgICAgICAgICAgICAgJyg/OlxcXFwuKFxcXFxkezEsJyArIE1BWF9TQUZFX0NPTVBPTkVOVF9MRU5HVEggKyAnfSkpPycgK1xuICAgICAgICAgICAgICAnKD86XFxcXC4oXFxcXGR7MSwnICsgTUFYX1NBRkVfQ09NUE9ORU5UX0xFTkdUSCArICd9KSk/JyArXG4gICAgICAgICAgICAgICcoPzokfFteXFxcXGRdKSdcblxuLy8gVGlsZGUgcmFuZ2VzLlxuLy8gTWVhbmluZyBpcyBcInJlYXNvbmFibHkgYXQgb3IgZ3JlYXRlciB0aGFuXCJcbnZhciBMT05FVElMREUgPSBSKytcbnNyY1tMT05FVElMREVdID0gJyg/On4+PyknXG5cbnZhciBUSUxERVRSSU0gPSBSKytcbnNyY1tUSUxERVRSSU1dID0gJyhcXFxccyopJyArIHNyY1tMT05FVElMREVdICsgJ1xcXFxzKydcbnJlW1RJTERFVFJJTV0gPSBuZXcgUmVnRXhwKHNyY1tUSUxERVRSSU1dLCAnZycpXG52YXIgdGlsZGVUcmltUmVwbGFjZSA9ICckMX4nXG5cbnZhciBUSUxERSA9IFIrK1xuc3JjW1RJTERFXSA9ICdeJyArIHNyY1tMT05FVElMREVdICsgc3JjW1hSQU5HRVBMQUlOXSArICckJ1xudmFyIFRJTERFTE9PU0UgPSBSKytcbnNyY1tUSUxERUxPT1NFXSA9ICdeJyArIHNyY1tMT05FVElMREVdICsgc3JjW1hSQU5HRVBMQUlOTE9PU0VdICsgJyQnXG5cbi8vIENhcmV0IHJhbmdlcy5cbi8vIE1lYW5pbmcgaXMgXCJhdCBsZWFzdCBhbmQgYmFja3dhcmRzIGNvbXBhdGlibGUgd2l0aFwiXG52YXIgTE9ORUNBUkVUID0gUisrXG5zcmNbTE9ORUNBUkVUXSA9ICcoPzpcXFxcXiknXG5cbnZhciBDQVJFVFRSSU0gPSBSKytcbnNyY1tDQVJFVFRSSU1dID0gJyhcXFxccyopJyArIHNyY1tMT05FQ0FSRVRdICsgJ1xcXFxzKydcbnJlW0NBUkVUVFJJTV0gPSBuZXcgUmVnRXhwKHNyY1tDQVJFVFRSSU1dLCAnZycpXG52YXIgY2FyZXRUcmltUmVwbGFjZSA9ICckMV4nXG5cbnZhciBDQVJFVCA9IFIrK1xuc3JjW0NBUkVUXSA9ICdeJyArIHNyY1tMT05FQ0FSRVRdICsgc3JjW1hSQU5HRVBMQUlOXSArICckJ1xudmFyIENBUkVUTE9PU0UgPSBSKytcbnNyY1tDQVJFVExPT1NFXSA9ICdeJyArIHNyY1tMT05FQ0FSRVRdICsgc3JjW1hSQU5HRVBMQUlOTE9PU0VdICsgJyQnXG5cbi8vIEEgc2ltcGxlIGd0L2x0L2VxIHRoaW5nLCBvciBqdXN0IFwiXCIgdG8gaW5kaWNhdGUgXCJhbnkgdmVyc2lvblwiXG52YXIgQ09NUEFSQVRPUkxPT1NFID0gUisrXG5zcmNbQ09NUEFSQVRPUkxPT1NFXSA9ICdeJyArIHNyY1tHVExUXSArICdcXFxccyooJyArIExPT1NFUExBSU4gKyAnKSR8XiQnXG52YXIgQ09NUEFSQVRPUiA9IFIrK1xuc3JjW0NPTVBBUkFUT1JdID0gJ14nICsgc3JjW0dUTFRdICsgJ1xcXFxzKignICsgRlVMTFBMQUlOICsgJykkfF4kJ1xuXG4vLyBBbiBleHByZXNzaW9uIHRvIHN0cmlwIGFueSB3aGl0ZXNwYWNlIGJldHdlZW4gdGhlIGd0bHQgYW5kIHRoZSB0aGluZ1xuLy8gaXQgbW9kaWZpZXMsIHNvIHRoYXQgYD4gMS4yLjNgID09PiBgPjEuMi4zYFxudmFyIENPTVBBUkFUT1JUUklNID0gUisrXG5zcmNbQ09NUEFSQVRPUlRSSU1dID0gJyhcXFxccyopJyArIHNyY1tHVExUXSArXG4gICAgICAgICAgICAgICAgICAgICAgJ1xcXFxzKignICsgTE9PU0VQTEFJTiArICd8JyArIHNyY1tYUkFOR0VQTEFJTl0gKyAnKSdcblxuLy8gdGhpcyBvbmUgaGFzIHRvIHVzZSB0aGUgL2cgZmxhZ1xucmVbQ09NUEFSQVRPUlRSSU1dID0gbmV3IFJlZ0V4cChzcmNbQ09NUEFSQVRPUlRSSU1dLCAnZycpXG52YXIgY29tcGFyYXRvclRyaW1SZXBsYWNlID0gJyQxJDIkMydcblxuLy8gU29tZXRoaW5nIGxpa2UgYDEuMi4zIC0gMS4yLjRgXG4vLyBOb3RlIHRoYXQgdGhlc2UgYWxsIHVzZSB0aGUgbG9vc2UgZm9ybSwgYmVjYXVzZSB0aGV5J2xsIGJlXG4vLyBjaGVja2VkIGFnYWluc3QgZWl0aGVyIHRoZSBzdHJpY3Qgb3IgbG9vc2UgY29tcGFyYXRvciBmb3JtXG4vLyBsYXRlci5cbnZhciBIWVBIRU5SQU5HRSA9IFIrK1xuc3JjW0hZUEhFTlJBTkdFXSA9ICdeXFxcXHMqKCcgKyBzcmNbWFJBTkdFUExBSU5dICsgJyknICtcbiAgICAgICAgICAgICAgICAgICAnXFxcXHMrLVxcXFxzKycgK1xuICAgICAgICAgICAgICAgICAgICcoJyArIHNyY1tYUkFOR0VQTEFJTl0gKyAnKScgK1xuICAgICAgICAgICAgICAgICAgICdcXFxccyokJ1xuXG52YXIgSFlQSEVOUkFOR0VMT09TRSA9IFIrK1xuc3JjW0hZUEhFTlJBTkdFTE9PU0VdID0gJ15cXFxccyooJyArIHNyY1tYUkFOR0VQTEFJTkxPT1NFXSArICcpJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAnXFxcXHMrLVxcXFxzKycgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJygnICsgc3JjW1hSQU5HRVBMQUlOTE9PU0VdICsgJyknICtcbiAgICAgICAgICAgICAgICAgICAgICAgICdcXFxccyokJ1xuXG4vLyBTdGFyIHJhbmdlcyBiYXNpY2FsbHkganVzdCBhbGxvdyBhbnl0aGluZyBhdCBhbGwuXG52YXIgU1RBUiA9IFIrK1xuc3JjW1NUQVJdID0gJyg8fD4pPz0/XFxcXHMqXFxcXConXG5cbi8vIENvbXBpbGUgdG8gYWN0dWFsIHJlZ2V4cCBvYmplY3RzLlxuLy8gQWxsIGFyZSBmbGFnLWZyZWUsIHVubGVzcyB0aGV5IHdlcmUgY3JlYXRlZCBhYm92ZSB3aXRoIGEgZmxhZy5cbmZvciAodmFyIGkgPSAwOyBpIDwgUjsgaSsrKSB7XG4gIGRlYnVnKGksIHNyY1tpXSlcbiAgaWYgKCFyZVtpXSkge1xuICAgIHJlW2ldID0gbmV3IFJlZ0V4cChzcmNbaV0pXG4gIH1cbn1cblxuZXhwb3J0cy5wYXJzZSA9IHBhcnNlXG5mdW5jdGlvbiBwYXJzZSAodmVyc2lvbiwgb3B0aW9ucykge1xuICBpZiAoIW9wdGlvbnMgfHwgdHlwZW9mIG9wdGlvbnMgIT09ICdvYmplY3QnKSB7XG4gICAgb3B0aW9ucyA9IHtcbiAgICAgIGxvb3NlOiAhIW9wdGlvbnMsXG4gICAgICBpbmNsdWRlUHJlcmVsZWFzZTogZmFsc2VcbiAgICB9XG4gIH1cblxuICBpZiAodmVyc2lvbiBpbnN0YW5jZW9mIFNlbVZlcikge1xuICAgIHJldHVybiB2ZXJzaW9uXG4gIH1cblxuICBpZiAodHlwZW9mIHZlcnNpb24gIT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIG51bGxcbiAgfVxuXG4gIGlmICh2ZXJzaW9uLmxlbmd0aCA+IE1BWF9MRU5HVEgpIHtcbiAgICByZXR1cm4gbnVsbFxuICB9XG5cbiAgdmFyIHIgPSBvcHRpb25zLmxvb3NlID8gcmVbTE9PU0VdIDogcmVbRlVMTF1cbiAgaWYgKCFyLnRlc3QodmVyc2lvbikpIHtcbiAgICByZXR1cm4gbnVsbFxuICB9XG5cbiAgdHJ5IHtcbiAgICByZXR1cm4gbmV3IFNlbVZlcih2ZXJzaW9uLCBvcHRpb25zKVxuICB9IGNhdGNoIChlcikge1xuICAgIHJldHVybiBudWxsXG4gIH1cbn1cblxuZXhwb3J0cy52YWxpZCA9IHZhbGlkXG5mdW5jdGlvbiB2YWxpZCAodmVyc2lvbiwgb3B0aW9ucykge1xuICB2YXIgdiA9IHBhcnNlKHZlcnNpb24sIG9wdGlvbnMpXG4gIHJldHVybiB2ID8gdi52ZXJzaW9uIDogbnVsbFxufVxuXG5leHBvcnRzLmNsZWFuID0gY2xlYW5cbmZ1bmN0aW9uIGNsZWFuICh2ZXJzaW9uLCBvcHRpb25zKSB7XG4gIHZhciBzID0gcGFyc2UodmVyc2lvbi50cmltKCkucmVwbGFjZSgvXls9dl0rLywgJycpLCBvcHRpb25zKVxuICByZXR1cm4gcyA/IHMudmVyc2lvbiA6IG51bGxcbn1cblxuZXhwb3J0cy5TZW1WZXIgPSBTZW1WZXJcblxuZnVuY3Rpb24gU2VtVmVyICh2ZXJzaW9uLCBvcHRpb25zKSB7XG4gIGlmICghb3B0aW9ucyB8fCB0eXBlb2Ygb3B0aW9ucyAhPT0gJ29iamVjdCcpIHtcbiAgICBvcHRpb25zID0ge1xuICAgICAgbG9vc2U6ICEhb3B0aW9ucyxcbiAgICAgIGluY2x1ZGVQcmVyZWxlYXNlOiBmYWxzZVxuICAgIH1cbiAgfVxuICBpZiAodmVyc2lvbiBpbnN0YW5jZW9mIFNlbVZlcikge1xuICAgIGlmICh2ZXJzaW9uLmxvb3NlID09PSBvcHRpb25zLmxvb3NlKSB7XG4gICAgICByZXR1cm4gdmVyc2lvblxuICAgIH0gZWxzZSB7XG4gICAgICB2ZXJzaW9uID0gdmVyc2lvbi52ZXJzaW9uXG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2ZXJzaW9uICE9PSAnc3RyaW5nJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgVmVyc2lvbjogJyArIHZlcnNpb24pXG4gIH1cblxuICBpZiAodmVyc2lvbi5sZW5ndGggPiBNQVhfTEVOR1RIKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcigndmVyc2lvbiBpcyBsb25nZXIgdGhhbiAnICsgTUFYX0xFTkdUSCArICcgY2hhcmFjdGVycycpXG4gIH1cblxuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgU2VtVmVyKSkge1xuICAgIHJldHVybiBuZXcgU2VtVmVyKHZlcnNpb24sIG9wdGlvbnMpXG4gIH1cblxuICBkZWJ1ZygnU2VtVmVyJywgdmVyc2lvbiwgb3B0aW9ucylcbiAgdGhpcy5vcHRpb25zID0gb3B0aW9uc1xuICB0aGlzLmxvb3NlID0gISFvcHRpb25zLmxvb3NlXG5cbiAgdmFyIG0gPSB2ZXJzaW9uLnRyaW0oKS5tYXRjaChvcHRpb25zLmxvb3NlID8gcmVbTE9PU0VdIDogcmVbRlVMTF0pXG5cbiAgaWYgKCFtKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCBWZXJzaW9uOiAnICsgdmVyc2lvbilcbiAgfVxuXG4gIHRoaXMucmF3ID0gdmVyc2lvblxuXG4gIC8vIHRoZXNlIGFyZSBhY3R1YWxseSBudW1iZXJzXG4gIHRoaXMubWFqb3IgPSArbVsxXVxuICB0aGlzLm1pbm9yID0gK21bMl1cbiAgdGhpcy5wYXRjaCA9ICttWzNdXG5cbiAgaWYgKHRoaXMubWFqb3IgPiBNQVhfU0FGRV9JTlRFR0VSIHx8IHRoaXMubWFqb3IgPCAwKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCBtYWpvciB2ZXJzaW9uJylcbiAgfVxuXG4gIGlmICh0aGlzLm1pbm9yID4gTUFYX1NBRkVfSU5URUdFUiB8fCB0aGlzLm1pbm9yIDwgMCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgbWlub3IgdmVyc2lvbicpXG4gIH1cblxuICBpZiAodGhpcy5wYXRjaCA+IE1BWF9TQUZFX0lOVEVHRVIgfHwgdGhpcy5wYXRjaCA8IDApIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIHBhdGNoIHZlcnNpb24nKVxuICB9XG5cbiAgLy8gbnVtYmVyaWZ5IGFueSBwcmVyZWxlYXNlIG51bWVyaWMgaWRzXG4gIGlmICghbVs0XSkge1xuICAgIHRoaXMucHJlcmVsZWFzZSA9IFtdXG4gIH0gZWxzZSB7XG4gICAgdGhpcy5wcmVyZWxlYXNlID0gbVs0XS5zcGxpdCgnLicpLm1hcChmdW5jdGlvbiAoaWQpIHtcbiAgICAgIGlmICgvXlswLTldKyQvLnRlc3QoaWQpKSB7XG4gICAgICAgIHZhciBudW0gPSAraWRcbiAgICAgICAgaWYgKG51bSA+PSAwICYmIG51bSA8IE1BWF9TQUZFX0lOVEVHRVIpIHtcbiAgICAgICAgICByZXR1cm4gbnVtXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBpZFxuICAgIH0pXG4gIH1cblxuICB0aGlzLmJ1aWxkID0gbVs1XSA/IG1bNV0uc3BsaXQoJy4nKSA6IFtdXG4gIHRoaXMuZm9ybWF0KClcbn1cblxuU2VtVmVyLnByb3RvdHlwZS5mb3JtYXQgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMudmVyc2lvbiA9IHRoaXMubWFqb3IgKyAnLicgKyB0aGlzLm1pbm9yICsgJy4nICsgdGhpcy5wYXRjaFxuICBpZiAodGhpcy5wcmVyZWxlYXNlLmxlbmd0aCkge1xuICAgIHRoaXMudmVyc2lvbiArPSAnLScgKyB0aGlzLnByZXJlbGVhc2Uuam9pbignLicpXG4gIH1cbiAgcmV0dXJuIHRoaXMudmVyc2lvblxufVxuXG5TZW1WZXIucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy52ZXJzaW9uXG59XG5cblNlbVZlci5wcm90b3R5cGUuY29tcGFyZSA9IGZ1bmN0aW9uIChvdGhlcikge1xuICBkZWJ1ZygnU2VtVmVyLmNvbXBhcmUnLCB0aGlzLnZlcnNpb24sIHRoaXMub3B0aW9ucywgb3RoZXIpXG4gIGlmICghKG90aGVyIGluc3RhbmNlb2YgU2VtVmVyKSkge1xuICAgIG90aGVyID0gbmV3IFNlbVZlcihvdGhlciwgdGhpcy5vcHRpb25zKVxuICB9XG5cbiAgcmV0dXJuIHRoaXMuY29tcGFyZU1haW4ob3RoZXIpIHx8IHRoaXMuY29tcGFyZVByZShvdGhlcilcbn1cblxuU2VtVmVyLnByb3RvdHlwZS5jb21wYXJlTWFpbiA9IGZ1bmN0aW9uIChvdGhlcikge1xuICBpZiAoIShvdGhlciBpbnN0YW5jZW9mIFNlbVZlcikpIHtcbiAgICBvdGhlciA9IG5ldyBTZW1WZXIob3RoZXIsIHRoaXMub3B0aW9ucylcbiAgfVxuXG4gIHJldHVybiBjb21wYXJlSWRlbnRpZmllcnModGhpcy5tYWpvciwgb3RoZXIubWFqb3IpIHx8XG4gICAgICAgICBjb21wYXJlSWRlbnRpZmllcnModGhpcy5taW5vciwgb3RoZXIubWlub3IpIHx8XG4gICAgICAgICBjb21wYXJlSWRlbnRpZmllcnModGhpcy5wYXRjaCwgb3RoZXIucGF0Y2gpXG59XG5cblNlbVZlci5wcm90b3R5cGUuY29tcGFyZVByZSA9IGZ1bmN0aW9uIChvdGhlcikge1xuICBpZiAoIShvdGhlciBpbnN0YW5jZW9mIFNlbVZlcikpIHtcbiAgICBvdGhlciA9IG5ldyBTZW1WZXIob3RoZXIsIHRoaXMub3B0aW9ucylcbiAgfVxuXG4gIC8vIE5PVCBoYXZpbmcgYSBwcmVyZWxlYXNlIGlzID4gaGF2aW5nIG9uZVxuICBpZiAodGhpcy5wcmVyZWxlYXNlLmxlbmd0aCAmJiAhb3RoZXIucHJlcmVsZWFzZS5sZW5ndGgpIHtcbiAgICByZXR1cm4gLTFcbiAgfSBlbHNlIGlmICghdGhpcy5wcmVyZWxlYXNlLmxlbmd0aCAmJiBvdGhlci5wcmVyZWxlYXNlLmxlbmd0aCkge1xuICAgIHJldHVybiAxXG4gIH0gZWxzZSBpZiAoIXRoaXMucHJlcmVsZWFzZS5sZW5ndGggJiYgIW90aGVyLnByZXJlbGVhc2UubGVuZ3RoKSB7XG4gICAgcmV0dXJuIDBcbiAgfVxuXG4gIHZhciBpID0gMFxuICBkbyB7XG4gICAgdmFyIGEgPSB0aGlzLnByZXJlbGVhc2VbaV1cbiAgICB2YXIgYiA9IG90aGVyLnByZXJlbGVhc2VbaV1cbiAgICBkZWJ1ZygncHJlcmVsZWFzZSBjb21wYXJlJywgaSwgYSwgYilcbiAgICBpZiAoYSA9PT0gdW5kZWZpbmVkICYmIGIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIDBcbiAgICB9IGVsc2UgaWYgKGIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIDFcbiAgICB9IGVsc2UgaWYgKGEgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIC0xXG4gICAgfSBlbHNlIGlmIChhID09PSBiKSB7XG4gICAgICBjb250aW51ZVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gY29tcGFyZUlkZW50aWZpZXJzKGEsIGIpXG4gICAgfVxuICB9IHdoaWxlICgrK2kpXG59XG5cbi8vIHByZW1pbm9yIHdpbGwgYnVtcCB0aGUgdmVyc2lvbiB1cCB0byB0aGUgbmV4dCBtaW5vciByZWxlYXNlLCBhbmQgaW1tZWRpYXRlbHlcbi8vIGRvd24gdG8gcHJlLXJlbGVhc2UuIHByZW1ham9yIGFuZCBwcmVwYXRjaCB3b3JrIHRoZSBzYW1lIHdheS5cblNlbVZlci5wcm90b3R5cGUuaW5jID0gZnVuY3Rpb24gKHJlbGVhc2UsIGlkZW50aWZpZXIpIHtcbiAgc3dpdGNoIChyZWxlYXNlKSB7XG4gICAgY2FzZSAncHJlbWFqb3InOlxuICAgICAgdGhpcy5wcmVyZWxlYXNlLmxlbmd0aCA9IDBcbiAgICAgIHRoaXMucGF0Y2ggPSAwXG4gICAgICB0aGlzLm1pbm9yID0gMFxuICAgICAgdGhpcy5tYWpvcisrXG4gICAgICB0aGlzLmluYygncHJlJywgaWRlbnRpZmllcilcbiAgICAgIGJyZWFrXG4gICAgY2FzZSAncHJlbWlub3InOlxuICAgICAgdGhpcy5wcmVyZWxlYXNlLmxlbmd0aCA9IDBcbiAgICAgIHRoaXMucGF0Y2ggPSAwXG4gICAgICB0aGlzLm1pbm9yKytcbiAgICAgIHRoaXMuaW5jKCdwcmUnLCBpZGVudGlmaWVyKVxuICAgICAgYnJlYWtcbiAgICBjYXNlICdwcmVwYXRjaCc6XG4gICAgICAvLyBJZiB0aGlzIGlzIGFscmVhZHkgYSBwcmVyZWxlYXNlLCBpdCB3aWxsIGJ1bXAgdG8gdGhlIG5leHQgdmVyc2lvblxuICAgICAgLy8gZHJvcCBhbnkgcHJlcmVsZWFzZXMgdGhhdCBtaWdodCBhbHJlYWR5IGV4aXN0LCBzaW5jZSB0aGV5IGFyZSBub3RcbiAgICAgIC8vIHJlbGV2YW50IGF0IHRoaXMgcG9pbnQuXG4gICAgICB0aGlzLnByZXJlbGVhc2UubGVuZ3RoID0gMFxuICAgICAgdGhpcy5pbmMoJ3BhdGNoJywgaWRlbnRpZmllcilcbiAgICAgIHRoaXMuaW5jKCdwcmUnLCBpZGVudGlmaWVyKVxuICAgICAgYnJlYWtcbiAgICAvLyBJZiB0aGUgaW5wdXQgaXMgYSBub24tcHJlcmVsZWFzZSB2ZXJzaW9uLCB0aGlzIGFjdHMgdGhlIHNhbWUgYXNcbiAgICAvLyBwcmVwYXRjaC5cbiAgICBjYXNlICdwcmVyZWxlYXNlJzpcbiAgICAgIGlmICh0aGlzLnByZXJlbGVhc2UubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHRoaXMuaW5jKCdwYXRjaCcsIGlkZW50aWZpZXIpXG4gICAgICB9XG4gICAgICB0aGlzLmluYygncHJlJywgaWRlbnRpZmllcilcbiAgICAgIGJyZWFrXG5cbiAgICBjYXNlICdtYWpvcic6XG4gICAgICAvLyBJZiB0aGlzIGlzIGEgcHJlLW1ham9yIHZlcnNpb24sIGJ1bXAgdXAgdG8gdGhlIHNhbWUgbWFqb3IgdmVyc2lvbi5cbiAgICAgIC8vIE90aGVyd2lzZSBpbmNyZW1lbnQgbWFqb3IuXG4gICAgICAvLyAxLjAuMC01IGJ1bXBzIHRvIDEuMC4wXG4gICAgICAvLyAxLjEuMCBidW1wcyB0byAyLjAuMFxuICAgICAgaWYgKHRoaXMubWlub3IgIT09IDAgfHxcbiAgICAgICAgICB0aGlzLnBhdGNoICE9PSAwIHx8XG4gICAgICAgICAgdGhpcy5wcmVyZWxlYXNlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICB0aGlzLm1ham9yKytcbiAgICAgIH1cbiAgICAgIHRoaXMubWlub3IgPSAwXG4gICAgICB0aGlzLnBhdGNoID0gMFxuICAgICAgdGhpcy5wcmVyZWxlYXNlID0gW11cbiAgICAgIGJyZWFrXG4gICAgY2FzZSAnbWlub3InOlxuICAgICAgLy8gSWYgdGhpcyBpcyBhIHByZS1taW5vciB2ZXJzaW9uLCBidW1wIHVwIHRvIHRoZSBzYW1lIG1pbm9yIHZlcnNpb24uXG4gICAgICAvLyBPdGhlcndpc2UgaW5jcmVtZW50IG1pbm9yLlxuICAgICAgLy8gMS4yLjAtNSBidW1wcyB0byAxLjIuMFxuICAgICAgLy8gMS4yLjEgYnVtcHMgdG8gMS4zLjBcbiAgICAgIGlmICh0aGlzLnBhdGNoICE9PSAwIHx8IHRoaXMucHJlcmVsZWFzZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgdGhpcy5taW5vcisrXG4gICAgICB9XG4gICAgICB0aGlzLnBhdGNoID0gMFxuICAgICAgdGhpcy5wcmVyZWxlYXNlID0gW11cbiAgICAgIGJyZWFrXG4gICAgY2FzZSAncGF0Y2gnOlxuICAgICAgLy8gSWYgdGhpcyBpcyBub3QgYSBwcmUtcmVsZWFzZSB2ZXJzaW9uLCBpdCB3aWxsIGluY3JlbWVudCB0aGUgcGF0Y2guXG4gICAgICAvLyBJZiBpdCBpcyBhIHByZS1yZWxlYXNlIGl0IHdpbGwgYnVtcCB1cCB0byB0aGUgc2FtZSBwYXRjaCB2ZXJzaW9uLlxuICAgICAgLy8gMS4yLjAtNSBwYXRjaGVzIHRvIDEuMi4wXG4gICAgICAvLyAxLjIuMCBwYXRjaGVzIHRvIDEuMi4xXG4gICAgICBpZiAodGhpcy5wcmVyZWxlYXNlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICB0aGlzLnBhdGNoKytcbiAgICAgIH1cbiAgICAgIHRoaXMucHJlcmVsZWFzZSA9IFtdXG4gICAgICBicmVha1xuICAgIC8vIFRoaXMgcHJvYmFibHkgc2hvdWxkbid0IGJlIHVzZWQgcHVibGljbHkuXG4gICAgLy8gMS4wLjAgXCJwcmVcIiB3b3VsZCBiZWNvbWUgMS4wLjAtMCB3aGljaCBpcyB0aGUgd3JvbmcgZGlyZWN0aW9uLlxuICAgIGNhc2UgJ3ByZSc6XG4gICAgICBpZiAodGhpcy5wcmVyZWxlYXNlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICB0aGlzLnByZXJlbGVhc2UgPSBbMF1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBpID0gdGhpcy5wcmVyZWxlYXNlLmxlbmd0aFxuICAgICAgICB3aGlsZSAoLS1pID49IDApIHtcbiAgICAgICAgICBpZiAodHlwZW9mIHRoaXMucHJlcmVsZWFzZVtpXSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIHRoaXMucHJlcmVsZWFzZVtpXSsrXG4gICAgICAgICAgICBpID0gLTJcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGkgPT09IC0xKSB7XG4gICAgICAgICAgLy8gZGlkbid0IGluY3JlbWVudCBhbnl0aGluZ1xuICAgICAgICAgIHRoaXMucHJlcmVsZWFzZS5wdXNoKDApXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChpZGVudGlmaWVyKSB7XG4gICAgICAgIC8vIDEuMi4wLWJldGEuMSBidW1wcyB0byAxLjIuMC1iZXRhLjIsXG4gICAgICAgIC8vIDEuMi4wLWJldGEuZm9vYmx6IG9yIDEuMi4wLWJldGEgYnVtcHMgdG8gMS4yLjAtYmV0YS4wXG4gICAgICAgIGlmICh0aGlzLnByZXJlbGVhc2VbMF0gPT09IGlkZW50aWZpZXIpIHtcbiAgICAgICAgICBpZiAoaXNOYU4odGhpcy5wcmVyZWxlYXNlWzFdKSkge1xuICAgICAgICAgICAgdGhpcy5wcmVyZWxlYXNlID0gW2lkZW50aWZpZXIsIDBdXG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMucHJlcmVsZWFzZSA9IFtpZGVudGlmaWVyLCAwXVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBicmVha1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBpbmNyZW1lbnQgYXJndW1lbnQ6ICcgKyByZWxlYXNlKVxuICB9XG4gIHRoaXMuZm9ybWF0KClcbiAgdGhpcy5yYXcgPSB0aGlzLnZlcnNpb25cbiAgcmV0dXJuIHRoaXNcbn1cblxuZXhwb3J0cy5pbmMgPSBpbmNcbmZ1bmN0aW9uIGluYyAodmVyc2lvbiwgcmVsZWFzZSwgbG9vc2UsIGlkZW50aWZpZXIpIHtcbiAgaWYgKHR5cGVvZiAobG9vc2UpID09PSAnc3RyaW5nJykge1xuICAgIGlkZW50aWZpZXIgPSBsb29zZVxuICAgIGxvb3NlID0gdW5kZWZpbmVkXG4gIH1cblxuICB0cnkge1xuICAgIHJldHVybiBuZXcgU2VtVmVyKHZlcnNpb24sIGxvb3NlKS5pbmMocmVsZWFzZSwgaWRlbnRpZmllcikudmVyc2lvblxuICB9IGNhdGNoIChlcikge1xuICAgIHJldHVybiBudWxsXG4gIH1cbn1cblxuZXhwb3J0cy5kaWZmID0gZGlmZlxuZnVuY3Rpb24gZGlmZiAodmVyc2lvbjEsIHZlcnNpb24yKSB7XG4gIGlmIChlcSh2ZXJzaW9uMSwgdmVyc2lvbjIpKSB7XG4gICAgcmV0dXJuIG51bGxcbiAgfSBlbHNlIHtcbiAgICB2YXIgdjEgPSBwYXJzZSh2ZXJzaW9uMSlcbiAgICB2YXIgdjIgPSBwYXJzZSh2ZXJzaW9uMilcbiAgICB2YXIgcHJlZml4ID0gJydcbiAgICBpZiAodjEucHJlcmVsZWFzZS5sZW5ndGggfHwgdjIucHJlcmVsZWFzZS5sZW5ndGgpIHtcbiAgICAgIHByZWZpeCA9ICdwcmUnXG4gICAgICB2YXIgZGVmYXVsdFJlc3VsdCA9ICdwcmVyZWxlYXNlJ1xuICAgIH1cbiAgICBmb3IgKHZhciBrZXkgaW4gdjEpIHtcbiAgICAgIGlmIChrZXkgPT09ICdtYWpvcicgfHwga2V5ID09PSAnbWlub3InIHx8IGtleSA9PT0gJ3BhdGNoJykge1xuICAgICAgICBpZiAodjFba2V5XSAhPT0gdjJba2V5XSkge1xuICAgICAgICAgIHJldHVybiBwcmVmaXggKyBrZXlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZGVmYXVsdFJlc3VsdCAvLyBtYXkgYmUgdW5kZWZpbmVkXG4gIH1cbn1cblxuZXhwb3J0cy5jb21wYXJlSWRlbnRpZmllcnMgPSBjb21wYXJlSWRlbnRpZmllcnNcblxudmFyIG51bWVyaWMgPSAvXlswLTldKyQvXG5mdW5jdGlvbiBjb21wYXJlSWRlbnRpZmllcnMgKGEsIGIpIHtcbiAgdmFyIGFudW0gPSBudW1lcmljLnRlc3QoYSlcbiAgdmFyIGJudW0gPSBudW1lcmljLnRlc3QoYilcblxuICBpZiAoYW51bSAmJiBibnVtKSB7XG4gICAgYSA9ICthXG4gICAgYiA9ICtiXG4gIH1cblxuICByZXR1cm4gYSA9PT0gYiA/IDBcbiAgICA6IChhbnVtICYmICFibnVtKSA/IC0xXG4gICAgOiAoYm51bSAmJiAhYW51bSkgPyAxXG4gICAgOiBhIDwgYiA/IC0xXG4gICAgOiAxXG59XG5cbmV4cG9ydHMucmNvbXBhcmVJZGVudGlmaWVycyA9IHJjb21wYXJlSWRlbnRpZmllcnNcbmZ1bmN0aW9uIHJjb21wYXJlSWRlbnRpZmllcnMgKGEsIGIpIHtcbiAgcmV0dXJuIGNvbXBhcmVJZGVudGlmaWVycyhiLCBhKVxufVxuXG5leHBvcnRzLm1ham9yID0gbWFqb3JcbmZ1bmN0aW9uIG1ham9yIChhLCBsb29zZSkge1xuICByZXR1cm4gbmV3IFNlbVZlcihhLCBsb29zZSkubWFqb3Jcbn1cblxuZXhwb3J0cy5taW5vciA9IG1pbm9yXG5mdW5jdGlvbiBtaW5vciAoYSwgbG9vc2UpIHtcbiAgcmV0dXJuIG5ldyBTZW1WZXIoYSwgbG9vc2UpLm1pbm9yXG59XG5cbmV4cG9ydHMucGF0Y2ggPSBwYXRjaFxuZnVuY3Rpb24gcGF0Y2ggKGEsIGxvb3NlKSB7XG4gIHJldHVybiBuZXcgU2VtVmVyKGEsIGxvb3NlKS5wYXRjaFxufVxuXG5leHBvcnRzLmNvbXBhcmUgPSBjb21wYXJlXG5mdW5jdGlvbiBjb21wYXJlIChhLCBiLCBsb29zZSkge1xuICByZXR1cm4gbmV3IFNlbVZlcihhLCBsb29zZSkuY29tcGFyZShuZXcgU2VtVmVyKGIsIGxvb3NlKSlcbn1cblxuZXhwb3J0cy5jb21wYXJlTG9vc2UgPSBjb21wYXJlTG9vc2VcbmZ1bmN0aW9uIGNvbXBhcmVMb29zZSAoYSwgYikge1xuICByZXR1cm4gY29tcGFyZShhLCBiLCB0cnVlKVxufVxuXG5leHBvcnRzLnJjb21wYXJlID0gcmNvbXBhcmVcbmZ1bmN0aW9uIHJjb21wYXJlIChhLCBiLCBsb29zZSkge1xuICByZXR1cm4gY29tcGFyZShiLCBhLCBsb29zZSlcbn1cblxuZXhwb3J0cy5zb3J0ID0gc29ydFxuZnVuY3Rpb24gc29ydCAobGlzdCwgbG9vc2UpIHtcbiAgcmV0dXJuIGxpc3Quc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgIHJldHVybiBleHBvcnRzLmNvbXBhcmUoYSwgYiwgbG9vc2UpXG4gIH0pXG59XG5cbmV4cG9ydHMucnNvcnQgPSByc29ydFxuZnVuY3Rpb24gcnNvcnQgKGxpc3QsIGxvb3NlKSB7XG4gIHJldHVybiBsaXN0LnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gZXhwb3J0cy5yY29tcGFyZShhLCBiLCBsb29zZSlcbiAgfSlcbn1cblxuZXhwb3J0cy5ndCA9IGd0XG5mdW5jdGlvbiBndCAoYSwgYiwgbG9vc2UpIHtcbiAgcmV0dXJuIGNvbXBhcmUoYSwgYiwgbG9vc2UpID4gMFxufVxuXG5leHBvcnRzLmx0ID0gbHRcbmZ1bmN0aW9uIGx0IChhLCBiLCBsb29zZSkge1xuICByZXR1cm4gY29tcGFyZShhLCBiLCBsb29zZSkgPCAwXG59XG5cbmV4cG9ydHMuZXEgPSBlcVxuZnVuY3Rpb24gZXEgKGEsIGIsIGxvb3NlKSB7XG4gIHJldHVybiBjb21wYXJlKGEsIGIsIGxvb3NlKSA9PT0gMFxufVxuXG5leHBvcnRzLm5lcSA9IG5lcVxuZnVuY3Rpb24gbmVxIChhLCBiLCBsb29zZSkge1xuICByZXR1cm4gY29tcGFyZShhLCBiLCBsb29zZSkgIT09IDBcbn1cblxuZXhwb3J0cy5ndGUgPSBndGVcbmZ1bmN0aW9uIGd0ZSAoYSwgYiwgbG9vc2UpIHtcbiAgcmV0dXJuIGNvbXBhcmUoYSwgYiwgbG9vc2UpID49IDBcbn1cblxuZXhwb3J0cy5sdGUgPSBsdGVcbmZ1bmN0aW9uIGx0ZSAoYSwgYiwgbG9vc2UpIHtcbiAgcmV0dXJuIGNvbXBhcmUoYSwgYiwgbG9vc2UpIDw9IDBcbn1cblxuZXhwb3J0cy5jbXAgPSBjbXBcbmZ1bmN0aW9uIGNtcCAoYSwgb3AsIGIsIGxvb3NlKSB7XG4gIHN3aXRjaCAob3ApIHtcbiAgICBjYXNlICc9PT0nOlxuICAgICAgaWYgKHR5cGVvZiBhID09PSAnb2JqZWN0JylcbiAgICAgICAgYSA9IGEudmVyc2lvblxuICAgICAgaWYgKHR5cGVvZiBiID09PSAnb2JqZWN0JylcbiAgICAgICAgYiA9IGIudmVyc2lvblxuICAgICAgcmV0dXJuIGEgPT09IGJcblxuICAgIGNhc2UgJyE9PSc6XG4gICAgICBpZiAodHlwZW9mIGEgPT09ICdvYmplY3QnKVxuICAgICAgICBhID0gYS52ZXJzaW9uXG4gICAgICBpZiAodHlwZW9mIGIgPT09ICdvYmplY3QnKVxuICAgICAgICBiID0gYi52ZXJzaW9uXG4gICAgICByZXR1cm4gYSAhPT0gYlxuXG4gICAgY2FzZSAnJzpcbiAgICBjYXNlICc9JzpcbiAgICBjYXNlICc9PSc6XG4gICAgICByZXR1cm4gZXEoYSwgYiwgbG9vc2UpXG5cbiAgICBjYXNlICchPSc6XG4gICAgICByZXR1cm4gbmVxKGEsIGIsIGxvb3NlKVxuXG4gICAgY2FzZSAnPic6XG4gICAgICByZXR1cm4gZ3QoYSwgYiwgbG9vc2UpXG5cbiAgICBjYXNlICc+PSc6XG4gICAgICByZXR1cm4gZ3RlKGEsIGIsIGxvb3NlKVxuXG4gICAgY2FzZSAnPCc6XG4gICAgICByZXR1cm4gbHQoYSwgYiwgbG9vc2UpXG5cbiAgICBjYXNlICc8PSc6XG4gICAgICByZXR1cm4gbHRlKGEsIGIsIGxvb3NlKVxuXG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgb3BlcmF0b3I6ICcgKyBvcClcbiAgfVxufVxuXG5leHBvcnRzLkNvbXBhcmF0b3IgPSBDb21wYXJhdG9yXG5mdW5jdGlvbiBDb21wYXJhdG9yIChjb21wLCBvcHRpb25zKSB7XG4gIGlmICghb3B0aW9ucyB8fCB0eXBlb2Ygb3B0aW9ucyAhPT0gJ29iamVjdCcpIHtcbiAgICBvcHRpb25zID0ge1xuICAgICAgbG9vc2U6ICEhb3B0aW9ucyxcbiAgICAgIGluY2x1ZGVQcmVyZWxlYXNlOiBmYWxzZVxuICAgIH1cbiAgfVxuXG4gIGlmIChjb21wIGluc3RhbmNlb2YgQ29tcGFyYXRvcikge1xuICAgIGlmIChjb21wLmxvb3NlID09PSAhIW9wdGlvbnMubG9vc2UpIHtcbiAgICAgIHJldHVybiBjb21wXG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbXAgPSBjb21wLnZhbHVlXG4gICAgfVxuICB9XG5cbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIENvbXBhcmF0b3IpKSB7XG4gICAgcmV0dXJuIG5ldyBDb21wYXJhdG9yKGNvbXAsIG9wdGlvbnMpXG4gIH1cblxuICBkZWJ1ZygnY29tcGFyYXRvcicsIGNvbXAsIG9wdGlvbnMpXG4gIHRoaXMub3B0aW9ucyA9IG9wdGlvbnNcbiAgdGhpcy5sb29zZSA9ICEhb3B0aW9ucy5sb29zZVxuICB0aGlzLnBhcnNlKGNvbXApXG5cbiAgaWYgKHRoaXMuc2VtdmVyID09PSBBTlkpIHtcbiAgICB0aGlzLnZhbHVlID0gJydcbiAgfSBlbHNlIHtcbiAgICB0aGlzLnZhbHVlID0gdGhpcy5vcGVyYXRvciArIHRoaXMuc2VtdmVyLnZlcnNpb25cbiAgfVxuXG4gIGRlYnVnKCdjb21wJywgdGhpcylcbn1cblxudmFyIEFOWSA9IHt9XG5Db21wYXJhdG9yLnByb3RvdHlwZS5wYXJzZSA9IGZ1bmN0aW9uIChjb21wKSB7XG4gIHZhciByID0gdGhpcy5vcHRpb25zLmxvb3NlID8gcmVbQ09NUEFSQVRPUkxPT1NFXSA6IHJlW0NPTVBBUkFUT1JdXG4gIHZhciBtID0gY29tcC5tYXRjaChyKVxuXG4gIGlmICghbSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgY29tcGFyYXRvcjogJyArIGNvbXApXG4gIH1cblxuICB0aGlzLm9wZXJhdG9yID0gbVsxXVxuICBpZiAodGhpcy5vcGVyYXRvciA9PT0gJz0nKSB7XG4gICAgdGhpcy5vcGVyYXRvciA9ICcnXG4gIH1cblxuICAvLyBpZiBpdCBsaXRlcmFsbHkgaXMganVzdCAnPicgb3IgJycgdGhlbiBhbGxvdyBhbnl0aGluZy5cbiAgaWYgKCFtWzJdKSB7XG4gICAgdGhpcy5zZW12ZXIgPSBBTllcbiAgfSBlbHNlIHtcbiAgICB0aGlzLnNlbXZlciA9IG5ldyBTZW1WZXIobVsyXSwgdGhpcy5vcHRpb25zLmxvb3NlKVxuICB9XG59XG5cbkNvbXBhcmF0b3IucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy52YWx1ZVxufVxuXG5Db21wYXJhdG9yLnByb3RvdHlwZS50ZXN0ID0gZnVuY3Rpb24gKHZlcnNpb24pIHtcbiAgZGVidWcoJ0NvbXBhcmF0b3IudGVzdCcsIHZlcnNpb24sIHRoaXMub3B0aW9ucy5sb29zZSlcblxuICBpZiAodGhpcy5zZW12ZXIgPT09IEFOWSkge1xuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICBpZiAodHlwZW9mIHZlcnNpb24gPT09ICdzdHJpbmcnKSB7XG4gICAgdmVyc2lvbiA9IG5ldyBTZW1WZXIodmVyc2lvbiwgdGhpcy5vcHRpb25zKVxuICB9XG5cbiAgcmV0dXJuIGNtcCh2ZXJzaW9uLCB0aGlzLm9wZXJhdG9yLCB0aGlzLnNlbXZlciwgdGhpcy5vcHRpb25zKVxufVxuXG5Db21wYXJhdG9yLnByb3RvdHlwZS5pbnRlcnNlY3RzID0gZnVuY3Rpb24gKGNvbXAsIG9wdGlvbnMpIHtcbiAgaWYgKCEoY29tcCBpbnN0YW5jZW9mIENvbXBhcmF0b3IpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignYSBDb21wYXJhdG9yIGlzIHJlcXVpcmVkJylcbiAgfVxuXG4gIGlmICghb3B0aW9ucyB8fCB0eXBlb2Ygb3B0aW9ucyAhPT0gJ29iamVjdCcpIHtcbiAgICBvcHRpb25zID0ge1xuICAgICAgbG9vc2U6ICEhb3B0aW9ucyxcbiAgICAgIGluY2x1ZGVQcmVyZWxlYXNlOiBmYWxzZVxuICAgIH1cbiAgfVxuXG4gIHZhciByYW5nZVRtcFxuXG4gIGlmICh0aGlzLm9wZXJhdG9yID09PSAnJykge1xuICAgIHJhbmdlVG1wID0gbmV3IFJhbmdlKGNvbXAudmFsdWUsIG9wdGlvbnMpXG4gICAgcmV0dXJuIHNhdGlzZmllcyh0aGlzLnZhbHVlLCByYW5nZVRtcCwgb3B0aW9ucylcbiAgfSBlbHNlIGlmIChjb21wLm9wZXJhdG9yID09PSAnJykge1xuICAgIHJhbmdlVG1wID0gbmV3IFJhbmdlKHRoaXMudmFsdWUsIG9wdGlvbnMpXG4gICAgcmV0dXJuIHNhdGlzZmllcyhjb21wLnNlbXZlciwgcmFuZ2VUbXAsIG9wdGlvbnMpXG4gIH1cblxuICB2YXIgc2FtZURpcmVjdGlvbkluY3JlYXNpbmcgPVxuICAgICh0aGlzLm9wZXJhdG9yID09PSAnPj0nIHx8IHRoaXMub3BlcmF0b3IgPT09ICc+JykgJiZcbiAgICAoY29tcC5vcGVyYXRvciA9PT0gJz49JyB8fCBjb21wLm9wZXJhdG9yID09PSAnPicpXG4gIHZhciBzYW1lRGlyZWN0aW9uRGVjcmVhc2luZyA9XG4gICAgKHRoaXMub3BlcmF0b3IgPT09ICc8PScgfHwgdGhpcy5vcGVyYXRvciA9PT0gJzwnKSAmJlxuICAgIChjb21wLm9wZXJhdG9yID09PSAnPD0nIHx8IGNvbXAub3BlcmF0b3IgPT09ICc8JylcbiAgdmFyIHNhbWVTZW1WZXIgPSB0aGlzLnNlbXZlci52ZXJzaW9uID09PSBjb21wLnNlbXZlci52ZXJzaW9uXG4gIHZhciBkaWZmZXJlbnREaXJlY3Rpb25zSW5jbHVzaXZlID1cbiAgICAodGhpcy5vcGVyYXRvciA9PT0gJz49JyB8fCB0aGlzLm9wZXJhdG9yID09PSAnPD0nKSAmJlxuICAgIChjb21wLm9wZXJhdG9yID09PSAnPj0nIHx8IGNvbXAub3BlcmF0b3IgPT09ICc8PScpXG4gIHZhciBvcHBvc2l0ZURpcmVjdGlvbnNMZXNzVGhhbiA9XG4gICAgY21wKHRoaXMuc2VtdmVyLCAnPCcsIGNvbXAuc2VtdmVyLCBvcHRpb25zKSAmJlxuICAgICgodGhpcy5vcGVyYXRvciA9PT0gJz49JyB8fCB0aGlzLm9wZXJhdG9yID09PSAnPicpICYmXG4gICAgKGNvbXAub3BlcmF0b3IgPT09ICc8PScgfHwgY29tcC5vcGVyYXRvciA9PT0gJzwnKSlcbiAgdmFyIG9wcG9zaXRlRGlyZWN0aW9uc0dyZWF0ZXJUaGFuID1cbiAgICBjbXAodGhpcy5zZW12ZXIsICc+JywgY29tcC5zZW12ZXIsIG9wdGlvbnMpICYmXG4gICAgKCh0aGlzLm9wZXJhdG9yID09PSAnPD0nIHx8IHRoaXMub3BlcmF0b3IgPT09ICc8JykgJiZcbiAgICAoY29tcC5vcGVyYXRvciA9PT0gJz49JyB8fCBjb21wLm9wZXJhdG9yID09PSAnPicpKVxuXG4gIHJldHVybiBzYW1lRGlyZWN0aW9uSW5jcmVhc2luZyB8fCBzYW1lRGlyZWN0aW9uRGVjcmVhc2luZyB8fFxuICAgIChzYW1lU2VtVmVyICYmIGRpZmZlcmVudERpcmVjdGlvbnNJbmNsdXNpdmUpIHx8XG4gICAgb3Bwb3NpdGVEaXJlY3Rpb25zTGVzc1RoYW4gfHwgb3Bwb3NpdGVEaXJlY3Rpb25zR3JlYXRlclRoYW5cbn1cblxuZXhwb3J0cy5SYW5nZSA9IFJhbmdlXG5mdW5jdGlvbiBSYW5nZSAocmFuZ2UsIG9wdGlvbnMpIHtcbiAgaWYgKCFvcHRpb25zIHx8IHR5cGVvZiBvcHRpb25zICE9PSAnb2JqZWN0Jykge1xuICAgIG9wdGlvbnMgPSB7XG4gICAgICBsb29zZTogISFvcHRpb25zLFxuICAgICAgaW5jbHVkZVByZXJlbGVhc2U6IGZhbHNlXG4gICAgfVxuICB9XG5cbiAgaWYgKHJhbmdlIGluc3RhbmNlb2YgUmFuZ2UpIHtcbiAgICBpZiAocmFuZ2UubG9vc2UgPT09ICEhb3B0aW9ucy5sb29zZSAmJlxuICAgICAgICByYW5nZS5pbmNsdWRlUHJlcmVsZWFzZSA9PT0gISFvcHRpb25zLmluY2x1ZGVQcmVyZWxlYXNlKSB7XG4gICAgICByZXR1cm4gcmFuZ2VcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG5ldyBSYW5nZShyYW5nZS5yYXcsIG9wdGlvbnMpXG4gICAgfVxuICB9XG5cbiAgaWYgKHJhbmdlIGluc3RhbmNlb2YgQ29tcGFyYXRvcikge1xuICAgIHJldHVybiBuZXcgUmFuZ2UocmFuZ2UudmFsdWUsIG9wdGlvbnMpXG4gIH1cblxuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgUmFuZ2UpKSB7XG4gICAgcmV0dXJuIG5ldyBSYW5nZShyYW5nZSwgb3B0aW9ucylcbiAgfVxuXG4gIHRoaXMub3B0aW9ucyA9IG9wdGlvbnNcbiAgdGhpcy5sb29zZSA9ICEhb3B0aW9ucy5sb29zZVxuICB0aGlzLmluY2x1ZGVQcmVyZWxlYXNlID0gISFvcHRpb25zLmluY2x1ZGVQcmVyZWxlYXNlXG5cbiAgLy8gRmlyc3QsIHNwbGl0IGJhc2VkIG9uIGJvb2xlYW4gb3IgfHxcbiAgdGhpcy5yYXcgPSByYW5nZVxuICB0aGlzLnNldCA9IHJhbmdlLnNwbGl0KC9cXHMqXFx8XFx8XFxzKi8pLm1hcChmdW5jdGlvbiAocmFuZ2UpIHtcbiAgICByZXR1cm4gdGhpcy5wYXJzZVJhbmdlKHJhbmdlLnRyaW0oKSlcbiAgfSwgdGhpcykuZmlsdGVyKGZ1bmN0aW9uIChjKSB7XG4gICAgLy8gdGhyb3cgb3V0IGFueSB0aGF0IGFyZSBub3QgcmVsZXZhbnQgZm9yIHdoYXRldmVyIHJlYXNvblxuICAgIHJldHVybiBjLmxlbmd0aFxuICB9KVxuXG4gIGlmICghdGhpcy5zZXQubGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCBTZW1WZXIgUmFuZ2U6ICcgKyByYW5nZSlcbiAgfVxuXG4gIHRoaXMuZm9ybWF0KClcbn1cblxuUmFuZ2UucHJvdG90eXBlLmZvcm1hdCA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5yYW5nZSA9IHRoaXMuc2V0Lm1hcChmdW5jdGlvbiAoY29tcHMpIHtcbiAgICByZXR1cm4gY29tcHMuam9pbignICcpLnRyaW0oKVxuICB9KS5qb2luKCd8fCcpLnRyaW0oKVxuICByZXR1cm4gdGhpcy5yYW5nZVxufVxuXG5SYW5nZS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLnJhbmdlXG59XG5cblJhbmdlLnByb3RvdHlwZS5wYXJzZVJhbmdlID0gZnVuY3Rpb24gKHJhbmdlKSB7XG4gIHZhciBsb29zZSA9IHRoaXMub3B0aW9ucy5sb29zZVxuICByYW5nZSA9IHJhbmdlLnRyaW0oKVxuICAvLyBgMS4yLjMgLSAxLjIuNGAgPT4gYD49MS4yLjMgPD0xLjIuNGBcbiAgdmFyIGhyID0gbG9vc2UgPyByZVtIWVBIRU5SQU5HRUxPT1NFXSA6IHJlW0hZUEhFTlJBTkdFXVxuICByYW5nZSA9IHJhbmdlLnJlcGxhY2UoaHIsIGh5cGhlblJlcGxhY2UpXG4gIGRlYnVnKCdoeXBoZW4gcmVwbGFjZScsIHJhbmdlKVxuICAvLyBgPiAxLjIuMyA8IDEuMi41YCA9PiBgPjEuMi4zIDwxLjIuNWBcbiAgcmFuZ2UgPSByYW5nZS5yZXBsYWNlKHJlW0NPTVBBUkFUT1JUUklNXSwgY29tcGFyYXRvclRyaW1SZXBsYWNlKVxuICBkZWJ1ZygnY29tcGFyYXRvciB0cmltJywgcmFuZ2UsIHJlW0NPTVBBUkFUT1JUUklNXSlcblxuICAvLyBgfiAxLjIuM2AgPT4gYH4xLjIuM2BcbiAgcmFuZ2UgPSByYW5nZS5yZXBsYWNlKHJlW1RJTERFVFJJTV0sIHRpbGRlVHJpbVJlcGxhY2UpXG5cbiAgLy8gYF4gMS4yLjNgID0+IGBeMS4yLjNgXG4gIHJhbmdlID0gcmFuZ2UucmVwbGFjZShyZVtDQVJFVFRSSU1dLCBjYXJldFRyaW1SZXBsYWNlKVxuXG4gIC8vIG5vcm1hbGl6ZSBzcGFjZXNcbiAgcmFuZ2UgPSByYW5nZS5zcGxpdCgvXFxzKy8pLmpvaW4oJyAnKVxuXG4gIC8vIEF0IHRoaXMgcG9pbnQsIHRoZSByYW5nZSBpcyBjb21wbGV0ZWx5IHRyaW1tZWQgYW5kXG4gIC8vIHJlYWR5IHRvIGJlIHNwbGl0IGludG8gY29tcGFyYXRvcnMuXG5cbiAgdmFyIGNvbXBSZSA9IGxvb3NlID8gcmVbQ09NUEFSQVRPUkxPT1NFXSA6IHJlW0NPTVBBUkFUT1JdXG4gIHZhciBzZXQgPSByYW5nZS5zcGxpdCgnICcpLm1hcChmdW5jdGlvbiAoY29tcCkge1xuICAgIHJldHVybiBwYXJzZUNvbXBhcmF0b3IoY29tcCwgdGhpcy5vcHRpb25zKVxuICB9LCB0aGlzKS5qb2luKCcgJykuc3BsaXQoL1xccysvKVxuICBpZiAodGhpcy5vcHRpb25zLmxvb3NlKSB7XG4gICAgLy8gaW4gbG9vc2UgbW9kZSwgdGhyb3cgb3V0IGFueSB0aGF0IGFyZSBub3QgdmFsaWQgY29tcGFyYXRvcnNcbiAgICBzZXQgPSBzZXQuZmlsdGVyKGZ1bmN0aW9uIChjb21wKSB7XG4gICAgICByZXR1cm4gISFjb21wLm1hdGNoKGNvbXBSZSlcbiAgICB9KVxuICB9XG4gIHNldCA9IHNldC5tYXAoZnVuY3Rpb24gKGNvbXApIHtcbiAgICByZXR1cm4gbmV3IENvbXBhcmF0b3IoY29tcCwgdGhpcy5vcHRpb25zKVxuICB9LCB0aGlzKVxuXG4gIHJldHVybiBzZXRcbn1cblxuUmFuZ2UucHJvdG90eXBlLmludGVyc2VjdHMgPSBmdW5jdGlvbiAocmFuZ2UsIG9wdGlvbnMpIHtcbiAgaWYgKCEocmFuZ2UgaW5zdGFuY2VvZiBSYW5nZSkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdhIFJhbmdlIGlzIHJlcXVpcmVkJylcbiAgfVxuXG4gIHJldHVybiB0aGlzLnNldC5zb21lKGZ1bmN0aW9uICh0aGlzQ29tcGFyYXRvcnMpIHtcbiAgICByZXR1cm4gdGhpc0NvbXBhcmF0b3JzLmV2ZXJ5KGZ1bmN0aW9uICh0aGlzQ29tcGFyYXRvcikge1xuICAgICAgcmV0dXJuIHJhbmdlLnNldC5zb21lKGZ1bmN0aW9uIChyYW5nZUNvbXBhcmF0b3JzKSB7XG4gICAgICAgIHJldHVybiByYW5nZUNvbXBhcmF0b3JzLmV2ZXJ5KGZ1bmN0aW9uIChyYW5nZUNvbXBhcmF0b3IpIHtcbiAgICAgICAgICByZXR1cm4gdGhpc0NvbXBhcmF0b3IuaW50ZXJzZWN0cyhyYW5nZUNvbXBhcmF0b3IsIG9wdGlvbnMpXG4gICAgICAgIH0pXG4gICAgICB9KVxuICAgIH0pXG4gIH0pXG59XG5cbi8vIE1vc3RseSBqdXN0IGZvciB0ZXN0aW5nIGFuZCBsZWdhY3kgQVBJIHJlYXNvbnNcbmV4cG9ydHMudG9Db21wYXJhdG9ycyA9IHRvQ29tcGFyYXRvcnNcbmZ1bmN0aW9uIHRvQ29tcGFyYXRvcnMgKHJhbmdlLCBvcHRpb25zKSB7XG4gIHJldHVybiBuZXcgUmFuZ2UocmFuZ2UsIG9wdGlvbnMpLnNldC5tYXAoZnVuY3Rpb24gKGNvbXApIHtcbiAgICByZXR1cm4gY29tcC5tYXAoZnVuY3Rpb24gKGMpIHtcbiAgICAgIHJldHVybiBjLnZhbHVlXG4gICAgfSkuam9pbignICcpLnRyaW0oKS5zcGxpdCgnICcpXG4gIH0pXG59XG5cbi8vIGNvbXByaXNlZCBvZiB4cmFuZ2VzLCB0aWxkZXMsIHN0YXJzLCBhbmQgZ3RsdCdzIGF0IHRoaXMgcG9pbnQuXG4vLyBhbHJlYWR5IHJlcGxhY2VkIHRoZSBoeXBoZW4gcmFuZ2VzXG4vLyB0dXJuIGludG8gYSBzZXQgb2YgSlVTVCBjb21wYXJhdG9ycy5cbmZ1bmN0aW9uIHBhcnNlQ29tcGFyYXRvciAoY29tcCwgb3B0aW9ucykge1xuICBkZWJ1ZygnY29tcCcsIGNvbXAsIG9wdGlvbnMpXG4gIGNvbXAgPSByZXBsYWNlQ2FyZXRzKGNvbXAsIG9wdGlvbnMpXG4gIGRlYnVnKCdjYXJldCcsIGNvbXApXG4gIGNvbXAgPSByZXBsYWNlVGlsZGVzKGNvbXAsIG9wdGlvbnMpXG4gIGRlYnVnKCd0aWxkZXMnLCBjb21wKVxuICBjb21wID0gcmVwbGFjZVhSYW5nZXMoY29tcCwgb3B0aW9ucylcbiAgZGVidWcoJ3hyYW5nZScsIGNvbXApXG4gIGNvbXAgPSByZXBsYWNlU3RhcnMoY29tcCwgb3B0aW9ucylcbiAgZGVidWcoJ3N0YXJzJywgY29tcClcbiAgcmV0dXJuIGNvbXBcbn1cblxuZnVuY3Rpb24gaXNYIChpZCkge1xuICByZXR1cm4gIWlkIHx8IGlkLnRvTG93ZXJDYXNlKCkgPT09ICd4JyB8fCBpZCA9PT0gJyonXG59XG5cbi8vIH4sIH4+IC0tPiAqIChhbnksIGtpbmRhIHNpbGx5KVxuLy8gfjIsIH4yLngsIH4yLngueCwgfj4yLCB+PjIueCB+PjIueC54IC0tPiA+PTIuMC4wIDwzLjAuMFxuLy8gfjIuMCwgfjIuMC54LCB+PjIuMCwgfj4yLjAueCAtLT4gPj0yLjAuMCA8Mi4xLjBcbi8vIH4xLjIsIH4xLjIueCwgfj4xLjIsIH4+MS4yLnggLS0+ID49MS4yLjAgPDEuMy4wXG4vLyB+MS4yLjMsIH4+MS4yLjMgLS0+ID49MS4yLjMgPDEuMy4wXG4vLyB+MS4yLjAsIH4+MS4yLjAgLS0+ID49MS4yLjAgPDEuMy4wXG5mdW5jdGlvbiByZXBsYWNlVGlsZGVzIChjb21wLCBvcHRpb25zKSB7XG4gIHJldHVybiBjb21wLnRyaW0oKS5zcGxpdCgvXFxzKy8pLm1hcChmdW5jdGlvbiAoY29tcCkge1xuICAgIHJldHVybiByZXBsYWNlVGlsZGUoY29tcCwgb3B0aW9ucylcbiAgfSkuam9pbignICcpXG59XG5cbmZ1bmN0aW9uIHJlcGxhY2VUaWxkZSAoY29tcCwgb3B0aW9ucykge1xuICB2YXIgciA9IG9wdGlvbnMubG9vc2UgPyByZVtUSUxERUxPT1NFXSA6IHJlW1RJTERFXVxuICByZXR1cm4gY29tcC5yZXBsYWNlKHIsIGZ1bmN0aW9uIChfLCBNLCBtLCBwLCBwcikge1xuICAgIGRlYnVnKCd0aWxkZScsIGNvbXAsIF8sIE0sIG0sIHAsIHByKVxuICAgIHZhciByZXRcblxuICAgIGlmIChpc1goTSkpIHtcbiAgICAgIHJldCA9ICcnXG4gICAgfSBlbHNlIGlmIChpc1gobSkpIHtcbiAgICAgIHJldCA9ICc+PScgKyBNICsgJy4wLjAgPCcgKyAoK00gKyAxKSArICcuMC4wJ1xuICAgIH0gZWxzZSBpZiAoaXNYKHApKSB7XG4gICAgICAvLyB+MS4yID09ID49MS4yLjAgPDEuMy4wXG4gICAgICByZXQgPSAnPj0nICsgTSArICcuJyArIG0gKyAnLjAgPCcgKyBNICsgJy4nICsgKCttICsgMSkgKyAnLjAnXG4gICAgfSBlbHNlIGlmIChwcikge1xuICAgICAgZGVidWcoJ3JlcGxhY2VUaWxkZSBwcicsIHByKVxuICAgICAgcmV0ID0gJz49JyArIE0gKyAnLicgKyBtICsgJy4nICsgcCArICctJyArIHByICtcbiAgICAgICAgICAgICcgPCcgKyBNICsgJy4nICsgKCttICsgMSkgKyAnLjAnXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIH4xLjIuMyA9PSA+PTEuMi4zIDwxLjMuMFxuICAgICAgcmV0ID0gJz49JyArIE0gKyAnLicgKyBtICsgJy4nICsgcCArXG4gICAgICAgICAgICAnIDwnICsgTSArICcuJyArICgrbSArIDEpICsgJy4wJ1xuICAgIH1cblxuICAgIGRlYnVnKCd0aWxkZSByZXR1cm4nLCByZXQpXG4gICAgcmV0dXJuIHJldFxuICB9KVxufVxuXG4vLyBeIC0tPiAqIChhbnksIGtpbmRhIHNpbGx5KVxuLy8gXjIsIF4yLngsIF4yLngueCAtLT4gPj0yLjAuMCA8My4wLjBcbi8vIF4yLjAsIF4yLjAueCAtLT4gPj0yLjAuMCA8My4wLjBcbi8vIF4xLjIsIF4xLjIueCAtLT4gPj0xLjIuMCA8Mi4wLjBcbi8vIF4xLjIuMyAtLT4gPj0xLjIuMyA8Mi4wLjBcbi8vIF4xLjIuMCAtLT4gPj0xLjIuMCA8Mi4wLjBcbmZ1bmN0aW9uIHJlcGxhY2VDYXJldHMgKGNvbXAsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIGNvbXAudHJpbSgpLnNwbGl0KC9cXHMrLykubWFwKGZ1bmN0aW9uIChjb21wKSB7XG4gICAgcmV0dXJuIHJlcGxhY2VDYXJldChjb21wLCBvcHRpb25zKVxuICB9KS5qb2luKCcgJylcbn1cblxuZnVuY3Rpb24gcmVwbGFjZUNhcmV0IChjb21wLCBvcHRpb25zKSB7XG4gIGRlYnVnKCdjYXJldCcsIGNvbXAsIG9wdGlvbnMpXG4gIHZhciByID0gb3B0aW9ucy5sb29zZSA/IHJlW0NBUkVUTE9PU0VdIDogcmVbQ0FSRVRdXG4gIHJldHVybiBjb21wLnJlcGxhY2UociwgZnVuY3Rpb24gKF8sIE0sIG0sIHAsIHByKSB7XG4gICAgZGVidWcoJ2NhcmV0JywgY29tcCwgXywgTSwgbSwgcCwgcHIpXG4gICAgdmFyIHJldFxuXG4gICAgaWYgKGlzWChNKSkge1xuICAgICAgcmV0ID0gJydcbiAgICB9IGVsc2UgaWYgKGlzWChtKSkge1xuICAgICAgcmV0ID0gJz49JyArIE0gKyAnLjAuMCA8JyArICgrTSArIDEpICsgJy4wLjAnXG4gICAgfSBlbHNlIGlmIChpc1gocCkpIHtcbiAgICAgIGlmIChNID09PSAnMCcpIHtcbiAgICAgICAgcmV0ID0gJz49JyArIE0gKyAnLicgKyBtICsgJy4wIDwnICsgTSArICcuJyArICgrbSArIDEpICsgJy4wJ1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0ID0gJz49JyArIE0gKyAnLicgKyBtICsgJy4wIDwnICsgKCtNICsgMSkgKyAnLjAuMCdcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHByKSB7XG4gICAgICBkZWJ1ZygncmVwbGFjZUNhcmV0IHByJywgcHIpXG4gICAgICBpZiAoTSA9PT0gJzAnKSB7XG4gICAgICAgIGlmIChtID09PSAnMCcpIHtcbiAgICAgICAgICByZXQgPSAnPj0nICsgTSArICcuJyArIG0gKyAnLicgKyBwICsgJy0nICsgcHIgK1xuICAgICAgICAgICAgICAgICcgPCcgKyBNICsgJy4nICsgbSArICcuJyArICgrcCArIDEpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0ID0gJz49JyArIE0gKyAnLicgKyBtICsgJy4nICsgcCArICctJyArIHByICtcbiAgICAgICAgICAgICAgICAnIDwnICsgTSArICcuJyArICgrbSArIDEpICsgJy4wJ1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXQgPSAnPj0nICsgTSArICcuJyArIG0gKyAnLicgKyBwICsgJy0nICsgcHIgK1xuICAgICAgICAgICAgICAnIDwnICsgKCtNICsgMSkgKyAnLjAuMCdcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZGVidWcoJ25vIHByJylcbiAgICAgIGlmIChNID09PSAnMCcpIHtcbiAgICAgICAgaWYgKG0gPT09ICcwJykge1xuICAgICAgICAgIHJldCA9ICc+PScgKyBNICsgJy4nICsgbSArICcuJyArIHAgK1xuICAgICAgICAgICAgICAgICcgPCcgKyBNICsgJy4nICsgbSArICcuJyArICgrcCArIDEpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0ID0gJz49JyArIE0gKyAnLicgKyBtICsgJy4nICsgcCArXG4gICAgICAgICAgICAgICAgJyA8JyArIE0gKyAnLicgKyAoK20gKyAxKSArICcuMCdcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0ID0gJz49JyArIE0gKyAnLicgKyBtICsgJy4nICsgcCArXG4gICAgICAgICAgICAgICcgPCcgKyAoK00gKyAxKSArICcuMC4wJ1xuICAgICAgfVxuICAgIH1cblxuICAgIGRlYnVnKCdjYXJldCByZXR1cm4nLCByZXQpXG4gICAgcmV0dXJuIHJldFxuICB9KVxufVxuXG5mdW5jdGlvbiByZXBsYWNlWFJhbmdlcyAoY29tcCwgb3B0aW9ucykge1xuICBkZWJ1ZygncmVwbGFjZVhSYW5nZXMnLCBjb21wLCBvcHRpb25zKVxuICByZXR1cm4gY29tcC5zcGxpdCgvXFxzKy8pLm1hcChmdW5jdGlvbiAoY29tcCkge1xuICAgIHJldHVybiByZXBsYWNlWFJhbmdlKGNvbXAsIG9wdGlvbnMpXG4gIH0pLmpvaW4oJyAnKVxufVxuXG5mdW5jdGlvbiByZXBsYWNlWFJhbmdlIChjb21wLCBvcHRpb25zKSB7XG4gIGNvbXAgPSBjb21wLnRyaW0oKVxuICB2YXIgciA9IG9wdGlvbnMubG9vc2UgPyByZVtYUkFOR0VMT09TRV0gOiByZVtYUkFOR0VdXG4gIHJldHVybiBjb21wLnJlcGxhY2UociwgZnVuY3Rpb24gKHJldCwgZ3RsdCwgTSwgbSwgcCwgcHIpIHtcbiAgICBkZWJ1ZygneFJhbmdlJywgY29tcCwgcmV0LCBndGx0LCBNLCBtLCBwLCBwcilcbiAgICB2YXIgeE0gPSBpc1goTSlcbiAgICB2YXIgeG0gPSB4TSB8fCBpc1gobSlcbiAgICB2YXIgeHAgPSB4bSB8fCBpc1gocClcbiAgICB2YXIgYW55WCA9IHhwXG5cbiAgICBpZiAoZ3RsdCA9PT0gJz0nICYmIGFueVgpIHtcbiAgICAgIGd0bHQgPSAnJ1xuICAgIH1cblxuICAgIGlmICh4TSkge1xuICAgICAgaWYgKGd0bHQgPT09ICc+JyB8fCBndGx0ID09PSAnPCcpIHtcbiAgICAgICAgLy8gbm90aGluZyBpcyBhbGxvd2VkXG4gICAgICAgIHJldCA9ICc8MC4wLjAnXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBub3RoaW5nIGlzIGZvcmJpZGRlblxuICAgICAgICByZXQgPSAnKidcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGd0bHQgJiYgYW55WCkge1xuICAgICAgLy8gd2Uga25vdyBwYXRjaCBpcyBhbiB4LCBiZWNhdXNlIHdlIGhhdmUgYW55IHggYXQgYWxsLlxuICAgICAgLy8gcmVwbGFjZSBYIHdpdGggMFxuICAgICAgaWYgKHhtKSB7XG4gICAgICAgIG0gPSAwXG4gICAgICB9XG4gICAgICBwID0gMFxuXG4gICAgICBpZiAoZ3RsdCA9PT0gJz4nKSB7XG4gICAgICAgIC8vID4xID0+ID49Mi4wLjBcbiAgICAgICAgLy8gPjEuMiA9PiA+PTEuMy4wXG4gICAgICAgIC8vID4xLjIuMyA9PiA+PSAxLjIuNFxuICAgICAgICBndGx0ID0gJz49J1xuICAgICAgICBpZiAoeG0pIHtcbiAgICAgICAgICBNID0gK00gKyAxXG4gICAgICAgICAgbSA9IDBcbiAgICAgICAgICBwID0gMFxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG0gPSArbSArIDFcbiAgICAgICAgICBwID0gMFxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGd0bHQgPT09ICc8PScpIHtcbiAgICAgICAgLy8gPD0wLjcueCBpcyBhY3R1YWxseSA8MC44LjAsIHNpbmNlIGFueSAwLjcueCBzaG91bGRcbiAgICAgICAgLy8gcGFzcy4gIFNpbWlsYXJseSwgPD03LnggaXMgYWN0dWFsbHkgPDguMC4wLCBldGMuXG4gICAgICAgIGd0bHQgPSAnPCdcbiAgICAgICAgaWYgKHhtKSB7XG4gICAgICAgICAgTSA9ICtNICsgMVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG0gPSArbSArIDFcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXQgPSBndGx0ICsgTSArICcuJyArIG0gKyAnLicgKyBwXG4gICAgfSBlbHNlIGlmICh4bSkge1xuICAgICAgcmV0ID0gJz49JyArIE0gKyAnLjAuMCA8JyArICgrTSArIDEpICsgJy4wLjAnXG4gICAgfSBlbHNlIGlmICh4cCkge1xuICAgICAgcmV0ID0gJz49JyArIE0gKyAnLicgKyBtICsgJy4wIDwnICsgTSArICcuJyArICgrbSArIDEpICsgJy4wJ1xuICAgIH1cblxuICAgIGRlYnVnKCd4UmFuZ2UgcmV0dXJuJywgcmV0KVxuXG4gICAgcmV0dXJuIHJldFxuICB9KVxufVxuXG4vLyBCZWNhdXNlICogaXMgQU5ELWVkIHdpdGggZXZlcnl0aGluZyBlbHNlIGluIHRoZSBjb21wYXJhdG9yLFxuLy8gYW5kICcnIG1lYW5zIFwiYW55IHZlcnNpb25cIiwganVzdCByZW1vdmUgdGhlICpzIGVudGlyZWx5LlxuZnVuY3Rpb24gcmVwbGFjZVN0YXJzIChjb21wLCBvcHRpb25zKSB7XG4gIGRlYnVnKCdyZXBsYWNlU3RhcnMnLCBjb21wLCBvcHRpb25zKVxuICAvLyBMb29zZW5lc3MgaXMgaWdub3JlZCBoZXJlLiAgc3RhciBpcyBhbHdheXMgYXMgbG9vc2UgYXMgaXQgZ2V0cyFcbiAgcmV0dXJuIGNvbXAudHJpbSgpLnJlcGxhY2UocmVbU1RBUl0sICcnKVxufVxuXG4vLyBUaGlzIGZ1bmN0aW9uIGlzIHBhc3NlZCB0byBzdHJpbmcucmVwbGFjZShyZVtIWVBIRU5SQU5HRV0pXG4vLyBNLCBtLCBwYXRjaCwgcHJlcmVsZWFzZSwgYnVpbGRcbi8vIDEuMiAtIDMuNC41ID0+ID49MS4yLjAgPD0zLjQuNVxuLy8gMS4yLjMgLSAzLjQgPT4gPj0xLjIuMCA8My41LjAgQW55IDMuNC54IHdpbGwgZG9cbi8vIDEuMiAtIDMuNCA9PiA+PTEuMi4wIDwzLjUuMFxuZnVuY3Rpb24gaHlwaGVuUmVwbGFjZSAoJDAsXG4gIGZyb20sIGZNLCBmbSwgZnAsIGZwciwgZmIsXG4gIHRvLCB0TSwgdG0sIHRwLCB0cHIsIHRiKSB7XG4gIGlmIChpc1goZk0pKSB7XG4gICAgZnJvbSA9ICcnXG4gIH0gZWxzZSBpZiAoaXNYKGZtKSkge1xuICAgIGZyb20gPSAnPj0nICsgZk0gKyAnLjAuMCdcbiAgfSBlbHNlIGlmIChpc1goZnApKSB7XG4gICAgZnJvbSA9ICc+PScgKyBmTSArICcuJyArIGZtICsgJy4wJ1xuICB9IGVsc2Uge1xuICAgIGZyb20gPSAnPj0nICsgZnJvbVxuICB9XG5cbiAgaWYgKGlzWCh0TSkpIHtcbiAgICB0byA9ICcnXG4gIH0gZWxzZSBpZiAoaXNYKHRtKSkge1xuICAgIHRvID0gJzwnICsgKCt0TSArIDEpICsgJy4wLjAnXG4gIH0gZWxzZSBpZiAoaXNYKHRwKSkge1xuICAgIHRvID0gJzwnICsgdE0gKyAnLicgKyAoK3RtICsgMSkgKyAnLjAnXG4gIH0gZWxzZSBpZiAodHByKSB7XG4gICAgdG8gPSAnPD0nICsgdE0gKyAnLicgKyB0bSArICcuJyArIHRwICsgJy0nICsgdHByXG4gIH0gZWxzZSB7XG4gICAgdG8gPSAnPD0nICsgdG9cbiAgfVxuXG4gIHJldHVybiAoZnJvbSArICcgJyArIHRvKS50cmltKClcbn1cblxuLy8gaWYgQU5ZIG9mIHRoZSBzZXRzIG1hdGNoIEFMTCBvZiBpdHMgY29tcGFyYXRvcnMsIHRoZW4gcGFzc1xuUmFuZ2UucHJvdG90eXBlLnRlc3QgPSBmdW5jdGlvbiAodmVyc2lvbikge1xuICBpZiAoIXZlcnNpb24pIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIGlmICh0eXBlb2YgdmVyc2lvbiA9PT0gJ3N0cmluZycpIHtcbiAgICB2ZXJzaW9uID0gbmV3IFNlbVZlcih2ZXJzaW9uLCB0aGlzLm9wdGlvbnMpXG4gIH1cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuc2V0Lmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHRlc3RTZXQodGhpcy5zZXRbaV0sIHZlcnNpb24sIHRoaXMub3B0aW9ucykpIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZVxufVxuXG5mdW5jdGlvbiB0ZXN0U2V0IChzZXQsIHZlcnNpb24sIG9wdGlvbnMpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZXQubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoIXNldFtpXS50ZXN0KHZlcnNpb24pKSB7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gIH1cblxuICBpZiAodmVyc2lvbi5wcmVyZWxlYXNlLmxlbmd0aCAmJiAhb3B0aW9ucy5pbmNsdWRlUHJlcmVsZWFzZSkge1xuICAgIC8vIEZpbmQgdGhlIHNldCBvZiB2ZXJzaW9ucyB0aGF0IGFyZSBhbGxvd2VkIHRvIGhhdmUgcHJlcmVsZWFzZXNcbiAgICAvLyBGb3IgZXhhbXBsZSwgXjEuMi4zLXByLjEgZGVzdWdhcnMgdG8gPj0xLjIuMy1wci4xIDwyLjAuMFxuICAgIC8vIFRoYXQgc2hvdWxkIGFsbG93IGAxLjIuMy1wci4yYCB0byBwYXNzLlxuICAgIC8vIEhvd2V2ZXIsIGAxLjIuNC1hbHBoYS5ub3RyZWFkeWAgc2hvdWxkIE5PVCBiZSBhbGxvd2VkLFxuICAgIC8vIGV2ZW4gdGhvdWdoIGl0J3Mgd2l0aGluIHRoZSByYW5nZSBzZXQgYnkgdGhlIGNvbXBhcmF0b3JzLlxuICAgIGZvciAoaSA9IDA7IGkgPCBzZXQubGVuZ3RoOyBpKyspIHtcbiAgICAgIGRlYnVnKHNldFtpXS5zZW12ZXIpXG4gICAgICBpZiAoc2V0W2ldLnNlbXZlciA9PT0gQU5ZKSB7XG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIGlmIChzZXRbaV0uc2VtdmVyLnByZXJlbGVhc2UubGVuZ3RoID4gMCkge1xuICAgICAgICB2YXIgYWxsb3dlZCA9IHNldFtpXS5zZW12ZXJcbiAgICAgICAgaWYgKGFsbG93ZWQubWFqb3IgPT09IHZlcnNpb24ubWFqb3IgJiZcbiAgICAgICAgICAgIGFsbG93ZWQubWlub3IgPT09IHZlcnNpb24ubWlub3IgJiZcbiAgICAgICAgICAgIGFsbG93ZWQucGF0Y2ggPT09IHZlcnNpb24ucGF0Y2gpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gVmVyc2lvbiBoYXMgYSAtcHJlLCBidXQgaXQncyBub3Qgb25lIG9mIHRoZSBvbmVzIHdlIGxpa2UuXG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICByZXR1cm4gdHJ1ZVxufVxuXG5leHBvcnRzLnNhdGlzZmllcyA9IHNhdGlzZmllc1xuZnVuY3Rpb24gc2F0aXNmaWVzICh2ZXJzaW9uLCByYW5nZSwgb3B0aW9ucykge1xuICB0cnkge1xuICAgIHJhbmdlID0gbmV3IFJhbmdlKHJhbmdlLCBvcHRpb25zKVxuICB9IGNhdGNoIChlcikge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG4gIHJldHVybiByYW5nZS50ZXN0KHZlcnNpb24pXG59XG5cbmV4cG9ydHMubWF4U2F0aXNmeWluZyA9IG1heFNhdGlzZnlpbmdcbmZ1bmN0aW9uIG1heFNhdGlzZnlpbmcgKHZlcnNpb25zLCByYW5nZSwgb3B0aW9ucykge1xuICB2YXIgbWF4ID0gbnVsbFxuICB2YXIgbWF4U1YgPSBudWxsXG4gIHRyeSB7XG4gICAgdmFyIHJhbmdlT2JqID0gbmV3IFJhbmdlKHJhbmdlLCBvcHRpb25zKVxuICB9IGNhdGNoIChlcikge1xuICAgIHJldHVybiBudWxsXG4gIH1cbiAgdmVyc2lvbnMuZm9yRWFjaChmdW5jdGlvbiAodikge1xuICAgIGlmIChyYW5nZU9iai50ZXN0KHYpKSB7XG4gICAgICAvLyBzYXRpc2ZpZXModiwgcmFuZ2UsIG9wdGlvbnMpXG4gICAgICBpZiAoIW1heCB8fCBtYXhTVi5jb21wYXJlKHYpID09PSAtMSkge1xuICAgICAgICAvLyBjb21wYXJlKG1heCwgdiwgdHJ1ZSlcbiAgICAgICAgbWF4ID0gdlxuICAgICAgICBtYXhTViA9IG5ldyBTZW1WZXIobWF4LCBvcHRpb25zKVxuICAgICAgfVxuICAgIH1cbiAgfSlcbiAgcmV0dXJuIG1heFxufVxuXG5leHBvcnRzLm1pblNhdGlzZnlpbmcgPSBtaW5TYXRpc2Z5aW5nXG5mdW5jdGlvbiBtaW5TYXRpc2Z5aW5nICh2ZXJzaW9ucywgcmFuZ2UsIG9wdGlvbnMpIHtcbiAgdmFyIG1pbiA9IG51bGxcbiAgdmFyIG1pblNWID0gbnVsbFxuICB0cnkge1xuICAgIHZhciByYW5nZU9iaiA9IG5ldyBSYW5nZShyYW5nZSwgb3B0aW9ucylcbiAgfSBjYXRjaCAoZXIpIHtcbiAgICByZXR1cm4gbnVsbFxuICB9XG4gIHZlcnNpb25zLmZvckVhY2goZnVuY3Rpb24gKHYpIHtcbiAgICBpZiAocmFuZ2VPYmoudGVzdCh2KSkge1xuICAgICAgLy8gc2F0aXNmaWVzKHYsIHJhbmdlLCBvcHRpb25zKVxuICAgICAgaWYgKCFtaW4gfHwgbWluU1YuY29tcGFyZSh2KSA9PT0gMSkge1xuICAgICAgICAvLyBjb21wYXJlKG1pbiwgdiwgdHJ1ZSlcbiAgICAgICAgbWluID0gdlxuICAgICAgICBtaW5TViA9IG5ldyBTZW1WZXIobWluLCBvcHRpb25zKVxuICAgICAgfVxuICAgIH1cbiAgfSlcbiAgcmV0dXJuIG1pblxufVxuXG5leHBvcnRzLm1pblZlcnNpb24gPSBtaW5WZXJzaW9uXG5mdW5jdGlvbiBtaW5WZXJzaW9uIChyYW5nZSwgbG9vc2UpIHtcbiAgcmFuZ2UgPSBuZXcgUmFuZ2UocmFuZ2UsIGxvb3NlKVxuXG4gIHZhciBtaW52ZXIgPSBuZXcgU2VtVmVyKCcwLjAuMCcpXG4gIGlmIChyYW5nZS50ZXN0KG1pbnZlcikpIHtcbiAgICByZXR1cm4gbWludmVyXG4gIH1cblxuICBtaW52ZXIgPSBuZXcgU2VtVmVyKCcwLjAuMC0wJylcbiAgaWYgKHJhbmdlLnRlc3QobWludmVyKSkge1xuICAgIHJldHVybiBtaW52ZXJcbiAgfVxuXG4gIG1pbnZlciA9IG51bGxcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCByYW5nZS5zZXQubGVuZ3RoOyArK2kpIHtcbiAgICB2YXIgY29tcGFyYXRvcnMgPSByYW5nZS5zZXRbaV1cblxuICAgIGNvbXBhcmF0b3JzLmZvckVhY2goZnVuY3Rpb24gKGNvbXBhcmF0b3IpIHtcbiAgICAgIC8vIENsb25lIHRvIGF2b2lkIG1hbmlwdWxhdGluZyB0aGUgY29tcGFyYXRvcidzIHNlbXZlciBvYmplY3QuXG4gICAgICB2YXIgY29tcHZlciA9IG5ldyBTZW1WZXIoY29tcGFyYXRvci5zZW12ZXIudmVyc2lvbilcbiAgICAgIHN3aXRjaCAoY29tcGFyYXRvci5vcGVyYXRvcikge1xuICAgICAgICBjYXNlICc+JzpcbiAgICAgICAgICBpZiAoY29tcHZlci5wcmVyZWxlYXNlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgY29tcHZlci5wYXRjaCsrXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbXB2ZXIucHJlcmVsZWFzZS5wdXNoKDApXG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbXB2ZXIucmF3ID0gY29tcHZlci5mb3JtYXQoKVxuICAgICAgICAgIC8qIGZhbGx0aHJvdWdoICovXG4gICAgICAgIGNhc2UgJyc6XG4gICAgICAgIGNhc2UgJz49JzpcbiAgICAgICAgICBpZiAoIW1pbnZlciB8fCBndChtaW52ZXIsIGNvbXB2ZXIpKSB7XG4gICAgICAgICAgICBtaW52ZXIgPSBjb21wdmVyXG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgJzwnOlxuICAgICAgICBjYXNlICc8PSc6XG4gICAgICAgICAgLyogSWdub3JlIG1heGltdW0gdmVyc2lvbnMgKi9cbiAgICAgICAgICBicmVha1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVW5leHBlY3RlZCBvcGVyYXRpb246ICcgKyBjb21wYXJhdG9yLm9wZXJhdG9yKVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICBpZiAobWludmVyICYmIHJhbmdlLnRlc3QobWludmVyKSkge1xuICAgIHJldHVybiBtaW52ZXJcbiAgfVxuXG4gIHJldHVybiBudWxsXG59XG5cbmV4cG9ydHMudmFsaWRSYW5nZSA9IHZhbGlkUmFuZ2VcbmZ1bmN0aW9uIHZhbGlkUmFuZ2UgKHJhbmdlLCBvcHRpb25zKSB7XG4gIHRyeSB7XG4gICAgLy8gUmV0dXJuICcqJyBpbnN0ZWFkIG9mICcnIHNvIHRoYXQgdHJ1dGhpbmVzcyB3b3Jrcy5cbiAgICAvLyBUaGlzIHdpbGwgdGhyb3cgaWYgaXQncyBpbnZhbGlkIGFueXdheVxuICAgIHJldHVybiBuZXcgUmFuZ2UocmFuZ2UsIG9wdGlvbnMpLnJhbmdlIHx8ICcqJ1xuICB9IGNhdGNoIChlcikge1xuICAgIHJldHVybiBudWxsXG4gIH1cbn1cblxuLy8gRGV0ZXJtaW5lIGlmIHZlcnNpb24gaXMgbGVzcyB0aGFuIGFsbCB0aGUgdmVyc2lvbnMgcG9zc2libGUgaW4gdGhlIHJhbmdlXG5leHBvcnRzLmx0ciA9IGx0clxuZnVuY3Rpb24gbHRyICh2ZXJzaW9uLCByYW5nZSwgb3B0aW9ucykge1xuICByZXR1cm4gb3V0c2lkZSh2ZXJzaW9uLCByYW5nZSwgJzwnLCBvcHRpb25zKVxufVxuXG4vLyBEZXRlcm1pbmUgaWYgdmVyc2lvbiBpcyBncmVhdGVyIHRoYW4gYWxsIHRoZSB2ZXJzaW9ucyBwb3NzaWJsZSBpbiB0aGUgcmFuZ2UuXG5leHBvcnRzLmd0ciA9IGd0clxuZnVuY3Rpb24gZ3RyICh2ZXJzaW9uLCByYW5nZSwgb3B0aW9ucykge1xuICByZXR1cm4gb3V0c2lkZSh2ZXJzaW9uLCByYW5nZSwgJz4nLCBvcHRpb25zKVxufVxuXG5leHBvcnRzLm91dHNpZGUgPSBvdXRzaWRlXG5mdW5jdGlvbiBvdXRzaWRlICh2ZXJzaW9uLCByYW5nZSwgaGlsbywgb3B0aW9ucykge1xuICB2ZXJzaW9uID0gbmV3IFNlbVZlcih2ZXJzaW9uLCBvcHRpb25zKVxuICByYW5nZSA9IG5ldyBSYW5nZShyYW5nZSwgb3B0aW9ucylcblxuICB2YXIgZ3RmbiwgbHRlZm4sIGx0Zm4sIGNvbXAsIGVjb21wXG4gIHN3aXRjaCAoaGlsbykge1xuICAgIGNhc2UgJz4nOlxuICAgICAgZ3RmbiA9IGd0XG4gICAgICBsdGVmbiA9IGx0ZVxuICAgICAgbHRmbiA9IGx0XG4gICAgICBjb21wID0gJz4nXG4gICAgICBlY29tcCA9ICc+PSdcbiAgICAgIGJyZWFrXG4gICAgY2FzZSAnPCc6XG4gICAgICBndGZuID0gbHRcbiAgICAgIGx0ZWZuID0gZ3RlXG4gICAgICBsdGZuID0gZ3RcbiAgICAgIGNvbXAgPSAnPCdcbiAgICAgIGVjb21wID0gJzw9J1xuICAgICAgYnJlYWtcbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignTXVzdCBwcm92aWRlIGEgaGlsbyB2YWwgb2YgXCI8XCIgb3IgXCI+XCInKVxuICB9XG5cbiAgLy8gSWYgaXQgc2F0aXNpZmVzIHRoZSByYW5nZSBpdCBpcyBub3Qgb3V0c2lkZVxuICBpZiAoc2F0aXNmaWVzKHZlcnNpb24sIHJhbmdlLCBvcHRpb25zKSkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgLy8gRnJvbSBub3cgb24sIHZhcmlhYmxlIHRlcm1zIGFyZSBhcyBpZiB3ZSdyZSBpbiBcImd0clwiIG1vZGUuXG4gIC8vIGJ1dCBub3RlIHRoYXQgZXZlcnl0aGluZyBpcyBmbGlwcGVkIGZvciB0aGUgXCJsdHJcIiBmdW5jdGlvbi5cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHJhbmdlLnNldC5sZW5ndGg7ICsraSkge1xuICAgIHZhciBjb21wYXJhdG9ycyA9IHJhbmdlLnNldFtpXVxuXG4gICAgdmFyIGhpZ2ggPSBudWxsXG4gICAgdmFyIGxvdyA9IG51bGxcblxuICAgIGNvbXBhcmF0b3JzLmZvckVhY2goZnVuY3Rpb24gKGNvbXBhcmF0b3IpIHtcbiAgICAgIGlmIChjb21wYXJhdG9yLnNlbXZlciA9PT0gQU5ZKSB7XG4gICAgICAgIGNvbXBhcmF0b3IgPSBuZXcgQ29tcGFyYXRvcignPj0wLjAuMCcpXG4gICAgICB9XG4gICAgICBoaWdoID0gaGlnaCB8fCBjb21wYXJhdG9yXG4gICAgICBsb3cgPSBsb3cgfHwgY29tcGFyYXRvclxuICAgICAgaWYgKGd0Zm4oY29tcGFyYXRvci5zZW12ZXIsIGhpZ2guc2VtdmVyLCBvcHRpb25zKSkge1xuICAgICAgICBoaWdoID0gY29tcGFyYXRvclxuICAgICAgfSBlbHNlIGlmIChsdGZuKGNvbXBhcmF0b3Iuc2VtdmVyLCBsb3cuc2VtdmVyLCBvcHRpb25zKSkge1xuICAgICAgICBsb3cgPSBjb21wYXJhdG9yXG4gICAgICB9XG4gICAgfSlcblxuICAgIC8vIElmIHRoZSBlZGdlIHZlcnNpb24gY29tcGFyYXRvciBoYXMgYSBvcGVyYXRvciB0aGVuIG91ciB2ZXJzaW9uXG4gICAgLy8gaXNuJ3Qgb3V0c2lkZSBpdFxuICAgIGlmIChoaWdoLm9wZXJhdG9yID09PSBjb21wIHx8IGhpZ2gub3BlcmF0b3IgPT09IGVjb21wKSB7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG5cbiAgICAvLyBJZiB0aGUgbG93ZXN0IHZlcnNpb24gY29tcGFyYXRvciBoYXMgYW4gb3BlcmF0b3IgYW5kIG91ciB2ZXJzaW9uXG4gICAgLy8gaXMgbGVzcyB0aGFuIGl0IHRoZW4gaXQgaXNuJ3QgaGlnaGVyIHRoYW4gdGhlIHJhbmdlXG4gICAgaWYgKCghbG93Lm9wZXJhdG9yIHx8IGxvdy5vcGVyYXRvciA9PT0gY29tcCkgJiZcbiAgICAgICAgbHRlZm4odmVyc2lvbiwgbG93LnNlbXZlcikpIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH0gZWxzZSBpZiAobG93Lm9wZXJhdG9yID09PSBlY29tcCAmJiBsdGZuKHZlcnNpb24sIGxvdy5zZW12ZXIpKSB7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRydWVcbn1cblxuZXhwb3J0cy5wcmVyZWxlYXNlID0gcHJlcmVsZWFzZVxuZnVuY3Rpb24gcHJlcmVsZWFzZSAodmVyc2lvbiwgb3B0aW9ucykge1xuICB2YXIgcGFyc2VkID0gcGFyc2UodmVyc2lvbiwgb3B0aW9ucylcbiAgcmV0dXJuIChwYXJzZWQgJiYgcGFyc2VkLnByZXJlbGVhc2UubGVuZ3RoKSA/IHBhcnNlZC5wcmVyZWxlYXNlIDogbnVsbFxufVxuXG5leHBvcnRzLmludGVyc2VjdHMgPSBpbnRlcnNlY3RzXG5mdW5jdGlvbiBpbnRlcnNlY3RzIChyMSwgcjIsIG9wdGlvbnMpIHtcbiAgcjEgPSBuZXcgUmFuZ2UocjEsIG9wdGlvbnMpXG4gIHIyID0gbmV3IFJhbmdlKHIyLCBvcHRpb25zKVxuICByZXR1cm4gcjEuaW50ZXJzZWN0cyhyMilcbn1cblxuZXhwb3J0cy5jb2VyY2UgPSBjb2VyY2VcbmZ1bmN0aW9uIGNvZXJjZSAodmVyc2lvbikge1xuICBpZiAodmVyc2lvbiBpbnN0YW5jZW9mIFNlbVZlcikge1xuICAgIHJldHVybiB2ZXJzaW9uXG4gIH1cblxuICBpZiAodHlwZW9mIHZlcnNpb24gIT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIG51bGxcbiAgfVxuXG4gIHZhciBtYXRjaCA9IHZlcnNpb24ubWF0Y2gocmVbQ09FUkNFXSlcblxuICBpZiAobWF0Y2ggPT0gbnVsbCkge1xuICAgIHJldHVybiBudWxsXG4gIH1cblxuICByZXR1cm4gcGFyc2UobWF0Y2hbMV0gK1xuICAgICcuJyArIChtYXRjaFsyXSB8fCAnMCcpICtcbiAgICAnLicgKyAobWF0Y2hbM10gfHwgJzAnKSlcbn1cbiIsInZhciB0aW1lc3BhbiA9IHJlcXVpcmUoJy4vbGliL3RpbWVzcGFuJyk7XG52YXIgUFNfU1VQUE9SVEVEID0gcmVxdWlyZSgnLi9saWIvcHNTdXBwb3J0ZWQnKTtcbnZhciBqd3MgPSByZXF1aXJlKCdqd3MnKTtcbnZhciBpbmNsdWRlcyA9IHJlcXVpcmUoJ2xvZGFzaC5pbmNsdWRlcycpO1xudmFyIGlzQm9vbGVhbiA9IHJlcXVpcmUoJ2xvZGFzaC5pc2Jvb2xlYW4nKTtcbnZhciBpc0ludGVnZXIgPSByZXF1aXJlKCdsb2Rhc2guaXNpbnRlZ2VyJyk7XG52YXIgaXNOdW1iZXIgPSByZXF1aXJlKCdsb2Rhc2guaXNudW1iZXInKTtcbnZhciBpc1BsYWluT2JqZWN0ID0gcmVxdWlyZSgnbG9kYXNoLmlzcGxhaW5vYmplY3QnKTtcbnZhciBpc1N0cmluZyA9IHJlcXVpcmUoJ2xvZGFzaC5pc3N0cmluZycpO1xudmFyIG9uY2UgPSByZXF1aXJlKCdsb2Rhc2gub25jZScpO1xuXG52YXIgU1VQUE9SVEVEX0FMR1MgPSBbJ1JTMjU2JywgJ1JTMzg0JywgJ1JTNTEyJywgJ0VTMjU2JywgJ0VTMzg0JywgJ0VTNTEyJywgJ0hTMjU2JywgJ0hTMzg0JywgJ0hTNTEyJywgJ25vbmUnXVxuaWYgKFBTX1NVUFBPUlRFRCkge1xuICBTVVBQT1JURURfQUxHUy5zcGxpY2UoMywgMCwgJ1BTMjU2JywgJ1BTMzg0JywgJ1BTNTEyJyk7XG59XG5cbnZhciBzaWduX29wdGlvbnNfc2NoZW1hID0ge1xuICBleHBpcmVzSW46IHsgaXNWYWxpZDogZnVuY3Rpb24odmFsdWUpIHsgcmV0dXJuIGlzSW50ZWdlcih2YWx1ZSkgfHwgKGlzU3RyaW5nKHZhbHVlKSAmJiB2YWx1ZSk7IH0sIG1lc3NhZ2U6ICdcImV4cGlyZXNJblwiIHNob3VsZCBiZSBhIG51bWJlciBvZiBzZWNvbmRzIG9yIHN0cmluZyByZXByZXNlbnRpbmcgYSB0aW1lc3BhbicgfSxcbiAgbm90QmVmb3JlOiB7IGlzVmFsaWQ6IGZ1bmN0aW9uKHZhbHVlKSB7IHJldHVybiBpc0ludGVnZXIodmFsdWUpIHx8IChpc1N0cmluZyh2YWx1ZSkgJiYgdmFsdWUpOyB9LCBtZXNzYWdlOiAnXCJub3RCZWZvcmVcIiBzaG91bGQgYmUgYSBudW1iZXIgb2Ygc2Vjb25kcyBvciBzdHJpbmcgcmVwcmVzZW50aW5nIGEgdGltZXNwYW4nIH0sXG4gIGF1ZGllbmNlOiB7IGlzVmFsaWQ6IGZ1bmN0aW9uKHZhbHVlKSB7IHJldHVybiBpc1N0cmluZyh2YWx1ZSkgfHwgQXJyYXkuaXNBcnJheSh2YWx1ZSk7IH0sIG1lc3NhZ2U6ICdcImF1ZGllbmNlXCIgbXVzdCBiZSBhIHN0cmluZyBvciBhcnJheScgfSxcbiAgYWxnb3JpdGhtOiB7IGlzVmFsaWQ6IGluY2x1ZGVzLmJpbmQobnVsbCwgU1VQUE9SVEVEX0FMR1MpLCBtZXNzYWdlOiAnXCJhbGdvcml0aG1cIiBtdXN0IGJlIGEgdmFsaWQgc3RyaW5nIGVudW0gdmFsdWUnIH0sXG4gIGhlYWRlcjogeyBpc1ZhbGlkOiBpc1BsYWluT2JqZWN0LCBtZXNzYWdlOiAnXCJoZWFkZXJcIiBtdXN0IGJlIGFuIG9iamVjdCcgfSxcbiAgZW5jb2Rpbmc6IHsgaXNWYWxpZDogaXNTdHJpbmcsIG1lc3NhZ2U6ICdcImVuY29kaW5nXCIgbXVzdCBiZSBhIHN0cmluZycgfSxcbiAgaXNzdWVyOiB7IGlzVmFsaWQ6IGlzU3RyaW5nLCBtZXNzYWdlOiAnXCJpc3N1ZXJcIiBtdXN0IGJlIGEgc3RyaW5nJyB9LFxuICBzdWJqZWN0OiB7IGlzVmFsaWQ6IGlzU3RyaW5nLCBtZXNzYWdlOiAnXCJzdWJqZWN0XCIgbXVzdCBiZSBhIHN0cmluZycgfSxcbiAgand0aWQ6IHsgaXNWYWxpZDogaXNTdHJpbmcsIG1lc3NhZ2U6ICdcImp3dGlkXCIgbXVzdCBiZSBhIHN0cmluZycgfSxcbiAgbm9UaW1lc3RhbXA6IHsgaXNWYWxpZDogaXNCb29sZWFuLCBtZXNzYWdlOiAnXCJub1RpbWVzdGFtcFwiIG11c3QgYmUgYSBib29sZWFuJyB9LFxuICBrZXlpZDogeyBpc1ZhbGlkOiBpc1N0cmluZywgbWVzc2FnZTogJ1wia2V5aWRcIiBtdXN0IGJlIGEgc3RyaW5nJyB9LFxuICBtdXRhdGVQYXlsb2FkOiB7IGlzVmFsaWQ6IGlzQm9vbGVhbiwgbWVzc2FnZTogJ1wibXV0YXRlUGF5bG9hZFwiIG11c3QgYmUgYSBib29sZWFuJyB9XG59O1xuXG52YXIgcmVnaXN0ZXJlZF9jbGFpbXNfc2NoZW1hID0ge1xuICBpYXQ6IHsgaXNWYWxpZDogaXNOdW1iZXIsIG1lc3NhZ2U6ICdcImlhdFwiIHNob3VsZCBiZSBhIG51bWJlciBvZiBzZWNvbmRzJyB9LFxuICBleHA6IHsgaXNWYWxpZDogaXNOdW1iZXIsIG1lc3NhZ2U6ICdcImV4cFwiIHNob3VsZCBiZSBhIG51bWJlciBvZiBzZWNvbmRzJyB9LFxuICBuYmY6IHsgaXNWYWxpZDogaXNOdW1iZXIsIG1lc3NhZ2U6ICdcIm5iZlwiIHNob3VsZCBiZSBhIG51bWJlciBvZiBzZWNvbmRzJyB9XG59O1xuXG5mdW5jdGlvbiB2YWxpZGF0ZShzY2hlbWEsIGFsbG93VW5rbm93biwgb2JqZWN0LCBwYXJhbWV0ZXJOYW1lKSB7XG4gIGlmICghaXNQbGFpbk9iamVjdChvYmplY3QpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCBcIicgKyBwYXJhbWV0ZXJOYW1lICsgJ1wiIHRvIGJlIGEgcGxhaW4gb2JqZWN0LicpO1xuICB9XG4gIE9iamVjdC5rZXlzKG9iamVjdClcbiAgICAuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcbiAgICAgIHZhciB2YWxpZGF0b3IgPSBzY2hlbWFba2V5XTtcbiAgICAgIGlmICghdmFsaWRhdG9yKSB7XG4gICAgICAgIGlmICghYWxsb3dVbmtub3duKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdcIicgKyBrZXkgKyAnXCIgaXMgbm90IGFsbG93ZWQgaW4gXCInICsgcGFyYW1ldGVyTmFtZSArICdcIicpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmICghdmFsaWRhdG9yLmlzVmFsaWQob2JqZWN0W2tleV0pKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcih2YWxpZGF0b3IubWVzc2FnZSk7XG4gICAgICB9XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlT3B0aW9ucyhvcHRpb25zKSB7XG4gIHJldHVybiB2YWxpZGF0ZShzaWduX29wdGlvbnNfc2NoZW1hLCBmYWxzZSwgb3B0aW9ucywgJ29wdGlvbnMnKTtcbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVQYXlsb2FkKHBheWxvYWQpIHtcbiAgcmV0dXJuIHZhbGlkYXRlKHJlZ2lzdGVyZWRfY2xhaW1zX3NjaGVtYSwgdHJ1ZSwgcGF5bG9hZCwgJ3BheWxvYWQnKTtcbn1cblxudmFyIG9wdGlvbnNfdG9fcGF5bG9hZCA9IHtcbiAgJ2F1ZGllbmNlJzogJ2F1ZCcsXG4gICdpc3N1ZXInOiAnaXNzJyxcbiAgJ3N1YmplY3QnOiAnc3ViJyxcbiAgJ2p3dGlkJzogJ2p0aSdcbn07XG5cbnZhciBvcHRpb25zX2Zvcl9vYmplY3RzID0gW1xuICAnZXhwaXJlc0luJyxcbiAgJ25vdEJlZm9yZScsXG4gICdub1RpbWVzdGFtcCcsXG4gICdhdWRpZW5jZScsXG4gICdpc3N1ZXInLFxuICAnc3ViamVjdCcsXG4gICdqd3RpZCcsXG5dO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChwYXlsb2FkLCBzZWNyZXRPclByaXZhdGVLZXksIG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNhbGxiYWNrID0gb3B0aW9ucztcbiAgICBvcHRpb25zID0ge307XG4gIH0gZWxzZSB7XG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIH1cblxuICB2YXIgaXNPYmplY3RQYXlsb2FkID0gdHlwZW9mIHBheWxvYWQgPT09ICdvYmplY3QnICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAhQnVmZmVyLmlzQnVmZmVyKHBheWxvYWQpO1xuXG4gIHZhciBoZWFkZXIgPSBPYmplY3QuYXNzaWduKHtcbiAgICBhbGc6IG9wdGlvbnMuYWxnb3JpdGhtIHx8ICdIUzI1NicsXG4gICAgdHlwOiBpc09iamVjdFBheWxvYWQgPyAnSldUJyA6IHVuZGVmaW5lZCxcbiAgICBraWQ6IG9wdGlvbnMua2V5aWRcbiAgfSwgb3B0aW9ucy5oZWFkZXIpO1xuXG4gIGZ1bmN0aW9uIGZhaWx1cmUoZXJyKSB7XG4gICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICByZXR1cm4gY2FsbGJhY2soZXJyKTtcbiAgICB9XG4gICAgdGhyb3cgZXJyO1xuICB9XG5cbiAgaWYgKCFzZWNyZXRPclByaXZhdGVLZXkgJiYgb3B0aW9ucy5hbGdvcml0aG0gIT09ICdub25lJykge1xuICAgIHJldHVybiBmYWlsdXJlKG5ldyBFcnJvcignc2VjcmV0T3JQcml2YXRlS2V5IG11c3QgaGF2ZSBhIHZhbHVlJykpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBwYXlsb2FkID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBmYWlsdXJlKG5ldyBFcnJvcigncGF5bG9hZCBpcyByZXF1aXJlZCcpKTtcbiAgfSBlbHNlIGlmIChpc09iamVjdFBheWxvYWQpIHtcbiAgICB0cnkge1xuICAgICAgdmFsaWRhdGVQYXlsb2FkKHBheWxvYWQpO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHJldHVybiBmYWlsdXJlKGVycm9yKTtcbiAgICB9XG4gICAgaWYgKCFvcHRpb25zLm11dGF0ZVBheWxvYWQpIHtcbiAgICAgIHBheWxvYWQgPSBPYmplY3QuYXNzaWduKHt9LHBheWxvYWQpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgaW52YWxpZF9vcHRpb25zID0gb3B0aW9uc19mb3Jfb2JqZWN0cy5maWx0ZXIoZnVuY3Rpb24gKG9wdCkge1xuICAgICAgcmV0dXJuIHR5cGVvZiBvcHRpb25zW29wdF0gIT09ICd1bmRlZmluZWQnO1xuICAgIH0pO1xuXG4gICAgaWYgKGludmFsaWRfb3B0aW9ucy5sZW5ndGggPiAwKSB7XG4gICAgICByZXR1cm4gZmFpbHVyZShuZXcgRXJyb3IoJ2ludmFsaWQgJyArIGludmFsaWRfb3B0aW9ucy5qb2luKCcsJykgKyAnIG9wdGlvbiBmb3IgJyArICh0eXBlb2YgcGF5bG9hZCApICsgJyBwYXlsb2FkJykpO1xuICAgIH1cbiAgfVxuXG4gIGlmICh0eXBlb2YgcGF5bG9hZC5leHAgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBvcHRpb25zLmV4cGlyZXNJbiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gZmFpbHVyZShuZXcgRXJyb3IoJ0JhZCBcIm9wdGlvbnMuZXhwaXJlc0luXCIgb3B0aW9uIHRoZSBwYXlsb2FkIGFscmVhZHkgaGFzIGFuIFwiZXhwXCIgcHJvcGVydHkuJykpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBwYXlsb2FkLm5iZiAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIG9wdGlvbnMubm90QmVmb3JlICE9PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBmYWlsdXJlKG5ldyBFcnJvcignQmFkIFwib3B0aW9ucy5ub3RCZWZvcmVcIiBvcHRpb24gdGhlIHBheWxvYWQgYWxyZWFkeSBoYXMgYW4gXCJuYmZcIiBwcm9wZXJ0eS4nKSk7XG4gIH1cblxuICB0cnkge1xuICAgIHZhbGlkYXRlT3B0aW9ucyhvcHRpb25zKTtcbiAgfVxuICBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gZmFpbHVyZShlcnJvcik7XG4gIH1cblxuICB2YXIgdGltZXN0YW1wID0gcGF5bG9hZC5pYXQgfHwgTWF0aC5mbG9vcihEYXRlLm5vdygpIC8gMTAwMCk7XG5cbiAgaWYgKG9wdGlvbnMubm9UaW1lc3RhbXApIHtcbiAgICBkZWxldGUgcGF5bG9hZC5pYXQ7XG4gIH0gZWxzZSBpZiAoaXNPYmplY3RQYXlsb2FkKSB7XG4gICAgcGF5bG9hZC5pYXQgPSB0aW1lc3RhbXA7XG4gIH1cblxuICBpZiAodHlwZW9mIG9wdGlvbnMubm90QmVmb3JlICE9PSAndW5kZWZpbmVkJykge1xuICAgIHRyeSB7XG4gICAgICBwYXlsb2FkLm5iZiA9IHRpbWVzcGFuKG9wdGlvbnMubm90QmVmb3JlLCB0aW1lc3RhbXApO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyKSB7XG4gICAgICByZXR1cm4gZmFpbHVyZShlcnIpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHBheWxvYWQubmJmID09PSAndW5kZWZpbmVkJykge1xuICAgICAgcmV0dXJuIGZhaWx1cmUobmV3IEVycm9yKCdcIm5vdEJlZm9yZVwiIHNob3VsZCBiZSBhIG51bWJlciBvZiBzZWNvbmRzIG9yIHN0cmluZyByZXByZXNlbnRpbmcgYSB0aW1lc3BhbiBlZzogXCIxZFwiLCBcIjIwaFwiLCA2MCcpKTtcbiAgICB9XG4gIH1cblxuICBpZiAodHlwZW9mIG9wdGlvbnMuZXhwaXJlc0luICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgcGF5bG9hZCA9PT0gJ29iamVjdCcpIHtcbiAgICB0cnkge1xuICAgICAgcGF5bG9hZC5leHAgPSB0aW1lc3BhbihvcHRpb25zLmV4cGlyZXNJbiwgdGltZXN0YW1wKTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycikge1xuICAgICAgcmV0dXJuIGZhaWx1cmUoZXJyKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBwYXlsb2FkLmV4cCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJldHVybiBmYWlsdXJlKG5ldyBFcnJvcignXCJleHBpcmVzSW5cIiBzaG91bGQgYmUgYSBudW1iZXIgb2Ygc2Vjb25kcyBvciBzdHJpbmcgcmVwcmVzZW50aW5nIGEgdGltZXNwYW4gZWc6IFwiMWRcIiwgXCIyMGhcIiwgNjAnKSk7XG4gICAgfVxuICB9XG5cbiAgT2JqZWN0LmtleXMob3B0aW9uc190b19wYXlsb2FkKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgY2xhaW0gPSBvcHRpb25zX3RvX3BheWxvYWRba2V5XTtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnNba2V5XSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGlmICh0eXBlb2YgcGF5bG9hZFtjbGFpbV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybiBmYWlsdXJlKG5ldyBFcnJvcignQmFkIFwib3B0aW9ucy4nICsga2V5ICsgJ1wiIG9wdGlvbi4gVGhlIHBheWxvYWQgYWxyZWFkeSBoYXMgYW4gXCInICsgY2xhaW0gKyAnXCIgcHJvcGVydHkuJykpO1xuICAgICAgfVxuICAgICAgcGF5bG9hZFtjbGFpbV0gPSBvcHRpb25zW2tleV07XG4gICAgfVxuICB9KTtcblxuICB2YXIgZW5jb2RpbmcgPSBvcHRpb25zLmVuY29kaW5nIHx8ICd1dGY4JztcblxuICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2FsbGJhY2sgPSBjYWxsYmFjayAmJiBvbmNlKGNhbGxiYWNrKTtcblxuICAgIGp3cy5jcmVhdGVTaWduKHtcbiAgICAgIGhlYWRlcjogaGVhZGVyLFxuICAgICAgcHJpdmF0ZUtleTogc2VjcmV0T3JQcml2YXRlS2V5LFxuICAgICAgcGF5bG9hZDogcGF5bG9hZCxcbiAgICAgIGVuY29kaW5nOiBlbmNvZGluZ1xuICAgIH0pLm9uY2UoJ2Vycm9yJywgY2FsbGJhY2spXG4gICAgICAub25jZSgnZG9uZScsIGZ1bmN0aW9uIChzaWduYXR1cmUpIHtcbiAgICAgICAgY2FsbGJhY2sobnVsbCwgc2lnbmF0dXJlKTtcbiAgICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBqd3Muc2lnbih7aGVhZGVyOiBoZWFkZXIsIHBheWxvYWQ6IHBheWxvYWQsIHNlY3JldDogc2VjcmV0T3JQcml2YXRlS2V5LCBlbmNvZGluZzogZW5jb2Rpbmd9KTtcbiAgfVxufTtcbiIsIi8qKlxuICogbG9kYXNoIChDdXN0b20gQnVpbGQpIDxodHRwczovL2xvZGFzaC5jb20vPlxuICogQnVpbGQ6IGBsb2Rhc2ggbW9kdWxhcml6ZSBleHBvcnRzPVwibnBtXCIgLW8gLi9gXG4gKiBDb3B5cmlnaHQgalF1ZXJ5IEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9ycyA8aHR0cHM6Ly9qcXVlcnkub3JnLz5cbiAqIFJlbGVhc2VkIHVuZGVyIE1JVCBsaWNlbnNlIDxodHRwczovL2xvZGFzaC5jb20vbGljZW5zZT5cbiAqIEJhc2VkIG9uIFVuZGVyc2NvcmUuanMgMS44LjMgPGh0dHA6Ly91bmRlcnNjb3JlanMub3JnL0xJQ0VOU0U+XG4gKiBDb3B5cmlnaHQgSmVyZW15IEFzaGtlbmFzLCBEb2N1bWVudENsb3VkIGFuZCBJbnZlc3RpZ2F0aXZlIFJlcG9ydGVycyAmIEVkaXRvcnNcbiAqL1xuXG4vKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbnZhciBJTkZJTklUWSA9IDEgLyAwLFxuICAgIE1BWF9TQUZFX0lOVEVHRVIgPSA5MDA3MTk5MjU0NzQwOTkxLFxuICAgIE1BWF9JTlRFR0VSID0gMS43OTc2OTMxMzQ4NjIzMTU3ZSszMDgsXG4gICAgTkFOID0gMCAvIDA7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBhcmdzVGFnID0gJ1tvYmplY3QgQXJndW1lbnRzXScsXG4gICAgZnVuY1RhZyA9ICdbb2JqZWN0IEZ1bmN0aW9uXScsXG4gICAgZ2VuVGFnID0gJ1tvYmplY3QgR2VuZXJhdG9yRnVuY3Rpb25dJyxcbiAgICBzdHJpbmdUYWcgPSAnW29iamVjdCBTdHJpbmddJyxcbiAgICBzeW1ib2xUYWcgPSAnW29iamVjdCBTeW1ib2xdJztcblxuLyoqIFVzZWQgdG8gbWF0Y2ggbGVhZGluZyBhbmQgdHJhaWxpbmcgd2hpdGVzcGFjZS4gKi9cbnZhciByZVRyaW0gPSAvXlxccyt8XFxzKyQvZztcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IGJhZCBzaWduZWQgaGV4YWRlY2ltYWwgc3RyaW5nIHZhbHVlcy4gKi9cbnZhciByZUlzQmFkSGV4ID0gL15bLStdMHhbMC05YS1mXSskL2k7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBiaW5hcnkgc3RyaW5nIHZhbHVlcy4gKi9cbnZhciByZUlzQmluYXJ5ID0gL14wYlswMV0rJC9pO1xuXG4vKiogVXNlZCB0byBkZXRlY3Qgb2N0YWwgc3RyaW5nIHZhbHVlcy4gKi9cbnZhciByZUlzT2N0YWwgPSAvXjBvWzAtN10rJC9pO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgdW5zaWduZWQgaW50ZWdlciB2YWx1ZXMuICovXG52YXIgcmVJc1VpbnQgPSAvXig/OjB8WzEtOV1cXGQqKSQvO1xuXG4vKiogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgd2l0aG91dCBhIGRlcGVuZGVuY3kgb24gYHJvb3RgLiAqL1xudmFyIGZyZWVQYXJzZUludCA9IHBhcnNlSW50O1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5tYXBgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZVxuICogc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IG1hcHBlZCBhcnJheS5cbiAqL1xuZnVuY3Rpb24gYXJyYXlNYXAoYXJyYXksIGl0ZXJhdGVlKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gYXJyYXkgPyBhcnJheS5sZW5ndGggOiAwLFxuICAgICAgcmVzdWx0ID0gQXJyYXkobGVuZ3RoKTtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHJlc3VsdFtpbmRleF0gPSBpdGVyYXRlZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5maW5kSW5kZXhgIGFuZCBgXy5maW5kTGFzdEluZGV4YCB3aXRob3V0XG4gKiBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHBhcmFtIHtudW1iZXJ9IGZyb21JbmRleCBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VGaW5kSW5kZXgoYXJyYXksIHByZWRpY2F0ZSwgZnJvbUluZGV4LCBmcm9tUmlnaHQpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgIGluZGV4ID0gZnJvbUluZGV4ICsgKGZyb21SaWdodCA/IDEgOiAtMSk7XG5cbiAgd2hpbGUgKChmcm9tUmlnaHQgPyBpbmRleC0tIDogKytpbmRleCA8IGxlbmd0aCkpIHtcbiAgICBpZiAocHJlZGljYXRlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgcmV0dXJuIGluZGV4O1xuICAgIH1cbiAgfVxuICByZXR1cm4gLTE7XG59XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaW5kZXhPZmAgd2l0aG91dCBgZnJvbUluZGV4YCBib3VuZHMgY2hlY2tzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gKiBAcGFyYW0ge251bWJlcn0gZnJvbUluZGV4IFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJbmRleE9mKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4KSB7XG4gIGlmICh2YWx1ZSAhPT0gdmFsdWUpIHtcbiAgICByZXR1cm4gYmFzZUZpbmRJbmRleChhcnJheSwgYmFzZUlzTmFOLCBmcm9tSW5kZXgpO1xuICB9XG4gIHZhciBpbmRleCA9IGZyb21JbmRleCAtIDEsXG4gICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBpZiAoYXJyYXlbaW5kZXhdID09PSB2YWx1ZSkge1xuICAgICAgcmV0dXJuIGluZGV4O1xuICAgIH1cbiAgfVxuICByZXR1cm4gLTE7XG59XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNOYU5gIHdpdGhvdXQgc3VwcG9ydCBmb3IgbnVtYmVyIG9iamVjdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYE5hTmAsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzTmFOKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPT0gdmFsdWU7XG59XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udGltZXNgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kc1xuICogb3IgbWF4IGFycmF5IGxlbmd0aCBjaGVja3MuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgdGltZXMgdG8gaW52b2tlIGBpdGVyYXRlZWAuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiByZXN1bHRzLlxuICovXG5mdW5jdGlvbiBiYXNlVGltZXMobiwgaXRlcmF0ZWUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICByZXN1bHQgPSBBcnJheShuKTtcblxuICB3aGlsZSAoKytpbmRleCA8IG4pIHtcbiAgICByZXN1bHRbaW5kZXhdID0gaXRlcmF0ZWUoaW5kZXgpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udmFsdWVzYCBhbmQgYF8udmFsdWVzSW5gIHdoaWNoIGNyZWF0ZXMgYW5cbiAqIGFycmF5IG9mIGBvYmplY3RgIHByb3BlcnR5IHZhbHVlcyBjb3JyZXNwb25kaW5nIHRvIHRoZSBwcm9wZXJ0eSBuYW1lc1xuICogb2YgYHByb3BzYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtBcnJheX0gcHJvcHMgVGhlIHByb3BlcnR5IG5hbWVzIHRvIGdldCB2YWx1ZXMgZm9yLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgdmFsdWVzLlxuICovXG5mdW5jdGlvbiBiYXNlVmFsdWVzKG9iamVjdCwgcHJvcHMpIHtcbiAgcmV0dXJuIGFycmF5TWFwKHByb3BzLCBmdW5jdGlvbihrZXkpIHtcbiAgICByZXR1cm4gb2JqZWN0W2tleV07XG4gIH0pO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSB1bmFyeSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggaXRzIGFyZ3VtZW50IHRyYW5zZm9ybWVkLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB3cmFwLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gdHJhbnNmb3JtIFRoZSBhcmd1bWVudCB0cmFuc2Zvcm0uXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gb3ZlckFyZyhmdW5jLCB0cmFuc2Zvcm0pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiBmdW5jKHRyYW5zZm9ybShhcmcpKTtcbiAgfTtcbn1cblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAqIG9mIHZhbHVlcy5cbiAqL1xudmFyIG9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHByb3BlcnR5SXNFbnVtZXJhYmxlID0gb2JqZWN0UHJvdG8ucHJvcGVydHlJc0VudW1lcmFibGU7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVLZXlzID0gb3ZlckFyZyhPYmplY3Qua2V5cywgT2JqZWN0KSxcbiAgICBuYXRpdmVNYXggPSBNYXRoLm1heDtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIG9mIHRoZSBhcnJheS1saWtlIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtib29sZWFufSBpbmhlcml0ZWQgU3BlY2lmeSByZXR1cm5pbmcgaW5oZXJpdGVkIHByb3BlcnR5IG5hbWVzLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqL1xuZnVuY3Rpb24gYXJyYXlMaWtlS2V5cyh2YWx1ZSwgaW5oZXJpdGVkKSB7XG4gIC8vIFNhZmFyaSA4LjEgbWFrZXMgYGFyZ3VtZW50cy5jYWxsZWVgIGVudW1lcmFibGUgaW4gc3RyaWN0IG1vZGUuXG4gIC8vIFNhZmFyaSA5IG1ha2VzIGBhcmd1bWVudHMubGVuZ3RoYCBlbnVtZXJhYmxlIGluIHN0cmljdCBtb2RlLlxuICB2YXIgcmVzdWx0ID0gKGlzQXJyYXkodmFsdWUpIHx8IGlzQXJndW1lbnRzKHZhbHVlKSlcbiAgICA/IGJhc2VUaW1lcyh2YWx1ZS5sZW5ndGgsIFN0cmluZylcbiAgICA6IFtdO1xuXG4gIHZhciBsZW5ndGggPSByZXN1bHQubGVuZ3RoLFxuICAgICAgc2tpcEluZGV4ZXMgPSAhIWxlbmd0aDtcblxuICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIHtcbiAgICBpZiAoKGluaGVyaXRlZCB8fCBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBrZXkpKSAmJlxuICAgICAgICAhKHNraXBJbmRleGVzICYmIChrZXkgPT0gJ2xlbmd0aCcgfHwgaXNJbmRleChrZXksIGxlbmd0aCkpKSkge1xuICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5rZXlzYCB3aGljaCBkb2Vzbid0IHRyZWF0IHNwYXJzZSBhcnJheXMgYXMgZGVuc2UuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VLZXlzKG9iamVjdCkge1xuICBpZiAoIWlzUHJvdG90eXBlKG9iamVjdCkpIHtcbiAgICByZXR1cm4gbmF0aXZlS2V5cyhvYmplY3QpO1xuICB9XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgZm9yICh2YXIga2V5IGluIE9iamVjdChvYmplY3QpKSB7XG4gICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpICYmIGtleSAhPSAnY29uc3RydWN0b3InKSB7XG4gICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgYXJyYXktbGlrZSBpbmRleC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcGFyYW0ge251bWJlcn0gW2xlbmd0aD1NQVhfU0FGRV9JTlRFR0VSXSBUaGUgdXBwZXIgYm91bmRzIG9mIGEgdmFsaWQgaW5kZXguXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGluZGV4LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzSW5kZXgodmFsdWUsIGxlbmd0aCkge1xuICBsZW5ndGggPSBsZW5ndGggPT0gbnVsbCA/IE1BWF9TQUZFX0lOVEVHRVIgOiBsZW5ndGg7XG4gIHJldHVybiAhIWxlbmd0aCAmJlxuICAgICh0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicgfHwgcmVJc1VpbnQudGVzdCh2YWx1ZSkpICYmXG4gICAgKHZhbHVlID4gLTEgJiYgdmFsdWUgJSAxID09IDAgJiYgdmFsdWUgPCBsZW5ndGgpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGxpa2VseSBhIHByb3RvdHlwZSBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBwcm90b3R5cGUsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNQcm90b3R5cGUodmFsdWUpIHtcbiAgdmFyIEN0b3IgPSB2YWx1ZSAmJiB2YWx1ZS5jb25zdHJ1Y3RvcixcbiAgICAgIHByb3RvID0gKHR5cGVvZiBDdG9yID09ICdmdW5jdGlvbicgJiYgQ3Rvci5wcm90b3R5cGUpIHx8IG9iamVjdFByb3RvO1xuXG4gIHJldHVybiB2YWx1ZSA9PT0gcHJvdG87XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgaW4gYGNvbGxlY3Rpb25gLiBJZiBgY29sbGVjdGlvbmAgaXMgYSBzdHJpbmcsIGl0J3NcbiAqIGNoZWNrZWQgZm9yIGEgc3Vic3RyaW5nIG9mIGB2YWx1ZWAsIG90aGVyd2lzZVxuICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAqIGlzIHVzZWQgZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLiBJZiBgZnJvbUluZGV4YCBpcyBuZWdhdGl2ZSwgaXQncyB1c2VkIGFzXG4gKiB0aGUgb2Zmc2V0IGZyb20gdGhlIGVuZCBvZiBgY29sbGVjdGlvbmAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fHN0cmluZ30gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpbnNwZWN0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbZnJvbUluZGV4PTBdIFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLnJlZHVjZWAuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmluY2x1ZGVzKFsxLCAyLCAzXSwgMSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pbmNsdWRlcyhbMSwgMiwgM10sIDEsIDIpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmluY2x1ZGVzKHsgJ2EnOiAxLCAnYic6IDIgfSwgMSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pbmNsdWRlcygnYWJjZCcsICdiYycpO1xuICogLy8gPT4gdHJ1ZVxuICovXG5mdW5jdGlvbiBpbmNsdWRlcyhjb2xsZWN0aW9uLCB2YWx1ZSwgZnJvbUluZGV4LCBndWFyZCkge1xuICBjb2xsZWN0aW9uID0gaXNBcnJheUxpa2UoY29sbGVjdGlvbikgPyBjb2xsZWN0aW9uIDogdmFsdWVzKGNvbGxlY3Rpb24pO1xuICBmcm9tSW5kZXggPSAoZnJvbUluZGV4ICYmICFndWFyZCkgPyB0b0ludGVnZXIoZnJvbUluZGV4KSA6IDA7XG5cbiAgdmFyIGxlbmd0aCA9IGNvbGxlY3Rpb24ubGVuZ3RoO1xuICBpZiAoZnJvbUluZGV4IDwgMCkge1xuICAgIGZyb21JbmRleCA9IG5hdGl2ZU1heChsZW5ndGggKyBmcm9tSW5kZXgsIDApO1xuICB9XG4gIHJldHVybiBpc1N0cmluZyhjb2xsZWN0aW9uKVxuICAgID8gKGZyb21JbmRleCA8PSBsZW5ndGggJiYgY29sbGVjdGlvbi5pbmRleE9mKHZhbHVlLCBmcm9tSW5kZXgpID4gLTEpXG4gICAgOiAoISFsZW5ndGggJiYgYmFzZUluZGV4T2YoY29sbGVjdGlvbiwgdmFsdWUsIGZyb21JbmRleCkgPiAtMSk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgbGlrZWx5IGFuIGBhcmd1bWVudHNgIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBgYXJndW1lbnRzYCBvYmplY3QsXG4gKiAgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJndW1lbnRzKGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcmd1bWVudHMoWzEsIDIsIDNdKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJndW1lbnRzKHZhbHVlKSB7XG4gIC8vIFNhZmFyaSA4LjEgbWFrZXMgYGFyZ3VtZW50cy5jYWxsZWVgIGVudW1lcmFibGUgaW4gc3RyaWN0IG1vZGUuXG4gIHJldHVybiBpc0FycmF5TGlrZU9iamVjdCh2YWx1ZSkgJiYgaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgJ2NhbGxlZScpICYmXG4gICAgKCFwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHZhbHVlLCAnY2FsbGVlJykgfHwgb2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT0gYXJnc1RhZyk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhbiBgQXJyYXlgIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJyYXkoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXkoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNBcnJheSgnYWJjJyk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNBcnJheShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGFycmF5LWxpa2UuIEEgdmFsdWUgaXMgY29uc2lkZXJlZCBhcnJheS1saWtlIGlmIGl0J3NcbiAqIG5vdCBhIGZ1bmN0aW9uIGFuZCBoYXMgYSBgdmFsdWUubGVuZ3RoYCB0aGF0J3MgYW4gaW50ZWdlciBncmVhdGVyIHRoYW4gb3JcbiAqIGVxdWFsIHRvIGAwYCBhbmQgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIGBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUmAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYXJyYXktbGlrZSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZShkb2N1bWVudC5ib2R5LmNoaWxkcmVuKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKCdhYmMnKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5TGlrZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiBpc0xlbmd0aCh2YWx1ZS5sZW5ndGgpICYmICFpc0Z1bmN0aW9uKHZhbHVlKTtcbn1cblxuLyoqXG4gKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmlzQXJyYXlMaWtlYCBleGNlcHQgdGhhdCBpdCBhbHNvIGNoZWNrcyBpZiBgdmFsdWVgXG4gKiBpcyBhbiBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYXJyYXktbGlrZSBvYmplY3QsXG4gKiAgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlT2JqZWN0KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZU9iamVjdChkb2N1bWVudC5ib2R5LmNoaWxkcmVuKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlT2JqZWN0KCdhYmMnKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0FycmF5TGlrZU9iamVjdChfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUxpa2VPYmplY3QodmFsdWUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgaXNBcnJheUxpa2UodmFsdWUpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgRnVuY3Rpb25gIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGZ1bmN0aW9uLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNGdW5jdGlvbihfKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzRnVuY3Rpb24oL2FiYy8pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGdW5jdGlvbih2YWx1ZSkge1xuICAvLyBUaGUgdXNlIG9mIGBPYmplY3QjdG9TdHJpbmdgIGF2b2lkcyBpc3N1ZXMgd2l0aCB0aGUgYHR5cGVvZmAgb3BlcmF0b3JcbiAgLy8gaW4gU2FmYXJpIDgtOSB3aGljaCByZXR1cm5zICdvYmplY3QnIGZvciB0eXBlZCBhcnJheSBhbmQgb3RoZXIgY29uc3RydWN0b3JzLlxuICB2YXIgdGFnID0gaXNPYmplY3QodmFsdWUpID8gb2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSkgOiAnJztcbiAgcmV0dXJuIHRhZyA9PSBmdW5jVGFnIHx8IHRhZyA9PSBnZW5UYWc7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBhcnJheS1saWtlIGxlbmd0aC5cbiAqXG4gKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgbG9vc2VseSBiYXNlZCBvblxuICogW2BUb0xlbmd0aGBdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXRvbGVuZ3RoKS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGxlbmd0aCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzTGVuZ3RoKDMpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNMZW5ndGgoTnVtYmVyLk1JTl9WQUxVRSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNMZW5ndGgoSW5maW5pdHkpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzTGVuZ3RoKCczJyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0xlbmd0aCh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdudW1iZXInICYmXG4gICAgdmFsdWUgPiAtMSAmJiB2YWx1ZSAlIDEgPT0gMCAmJiB2YWx1ZSA8PSBNQVhfU0FGRV9JTlRFR0VSO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHRoZVxuICogW2xhbmd1YWdlIHR5cGVdKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1lY21hc2NyaXB0LWxhbmd1YWdlLXR5cGVzKVxuICogb2YgYE9iamVjdGAuIChlLmcuIGFycmF5cywgZnVuY3Rpb25zLCBvYmplY3RzLCByZWdleGVzLCBgbmV3IE51bWJlcigwKWAsIGFuZCBgbmV3IFN0cmluZygnJylgKVxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzT2JqZWN0KHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChfLm5vb3ApO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdCh2YWx1ZSkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgcmV0dXJuICEhdmFsdWUgJiYgKHR5cGUgPT0gJ29iamVjdCcgfHwgdHlwZSA9PSAnZnVuY3Rpb24nKTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZS4gQSB2YWx1ZSBpcyBvYmplY3QtbGlrZSBpZiBpdCdzIG5vdCBgbnVsbGBcbiAqIGFuZCBoYXMgYSBgdHlwZW9mYCByZXN1bHQgb2YgXCJvYmplY3RcIi5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZSh7fSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0TGlrZSh2YWx1ZSkge1xuICByZXR1cm4gISF2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCc7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBTdHJpbmdgIHByaW1pdGl2ZSBvciBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQHNpbmNlIDAuMS4wXG4gKiBAbWVtYmVyT2YgX1xuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzdHJpbmcsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc1N0cmluZygnYWJjJyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc1N0cmluZygxKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycgfHxcbiAgICAoIWlzQXJyYXkodmFsdWUpICYmIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgb2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT0gc3RyaW5nVGFnKTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFN5bWJvbGAgcHJpbWl0aXZlIG9yIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHN5bWJvbCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzU3ltYm9sKFN5bWJvbC5pdGVyYXRvcik7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc1N5bWJvbCgnYWJjJyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N5bWJvbCh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdzeW1ib2wnIHx8XG4gICAgKGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgb2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT0gc3ltYm9sVGFnKTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgZmluaXRlIG51bWJlci5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMTIuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgbnVtYmVyLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnRvRmluaXRlKDMuMik7XG4gKiAvLyA9PiAzLjJcbiAqXG4gKiBfLnRvRmluaXRlKE51bWJlci5NSU5fVkFMVUUpO1xuICogLy8gPT4gNWUtMzI0XG4gKlxuICogXy50b0Zpbml0ZShJbmZpbml0eSk7XG4gKiAvLyA9PiAxLjc5NzY5MzEzNDg2MjMxNTdlKzMwOFxuICpcbiAqIF8udG9GaW5pdGUoJzMuMicpO1xuICogLy8gPT4gMy4yXG4gKi9cbmZ1bmN0aW9uIHRvRmluaXRlKHZhbHVlKSB7XG4gIGlmICghdmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IDAgPyB2YWx1ZSA6IDA7XG4gIH1cbiAgdmFsdWUgPSB0b051bWJlcih2YWx1ZSk7XG4gIGlmICh2YWx1ZSA9PT0gSU5GSU5JVFkgfHwgdmFsdWUgPT09IC1JTkZJTklUWSkge1xuICAgIHZhciBzaWduID0gKHZhbHVlIDwgMCA/IC0xIDogMSk7XG4gICAgcmV0dXJuIHNpZ24gKiBNQVhfSU5URUdFUjtcbiAgfVxuICByZXR1cm4gdmFsdWUgPT09IHZhbHVlID8gdmFsdWUgOiAwO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYW4gaW50ZWdlci5cbiAqXG4gKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgbG9vc2VseSBiYXNlZCBvblxuICogW2BUb0ludGVnZXJgXShodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtdG9pbnRlZ2VyKS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBpbnRlZ2VyLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnRvSW50ZWdlcigzLjIpO1xuICogLy8gPT4gM1xuICpcbiAqIF8udG9JbnRlZ2VyKE51bWJlci5NSU5fVkFMVUUpO1xuICogLy8gPT4gMFxuICpcbiAqIF8udG9JbnRlZ2VyKEluZmluaXR5KTtcbiAqIC8vID0+IDEuNzk3NjkzMTM0ODYyMzE1N2UrMzA4XG4gKlxuICogXy50b0ludGVnZXIoJzMuMicpO1xuICogLy8gPT4gM1xuICovXG5mdW5jdGlvbiB0b0ludGVnZXIodmFsdWUpIHtcbiAgdmFyIHJlc3VsdCA9IHRvRmluaXRlKHZhbHVlKSxcbiAgICAgIHJlbWFpbmRlciA9IHJlc3VsdCAlIDE7XG5cbiAgcmV0dXJuIHJlc3VsdCA9PT0gcmVzdWx0ID8gKHJlbWFpbmRlciA/IHJlc3VsdCAtIHJlbWFpbmRlciA6IHJlc3VsdCkgOiAwO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBudW1iZXIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb2Nlc3MuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBudW1iZXIuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udG9OdW1iZXIoMy4yKTtcbiAqIC8vID0+IDMuMlxuICpcbiAqIF8udG9OdW1iZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gKiAvLyA9PiA1ZS0zMjRcbiAqXG4gKiBfLnRvTnVtYmVyKEluZmluaXR5KTtcbiAqIC8vID0+IEluZmluaXR5XG4gKlxuICogXy50b051bWJlcignMy4yJyk7XG4gKiAvLyA9PiAzLjJcbiAqL1xuZnVuY3Rpb24gdG9OdW1iZXIodmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJykge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICBpZiAoaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgcmV0dXJuIE5BTjtcbiAgfVxuICBpZiAoaXNPYmplY3QodmFsdWUpKSB7XG4gICAgdmFyIG90aGVyID0gdHlwZW9mIHZhbHVlLnZhbHVlT2YgPT0gJ2Z1bmN0aW9uJyA/IHZhbHVlLnZhbHVlT2YoKSA6IHZhbHVlO1xuICAgIHZhbHVlID0gaXNPYmplY3Qob3RoZXIpID8gKG90aGVyICsgJycpIDogb3RoZXI7XG4gIH1cbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gMCA/IHZhbHVlIDogK3ZhbHVlO1xuICB9XG4gIHZhbHVlID0gdmFsdWUucmVwbGFjZShyZVRyaW0sICcnKTtcbiAgdmFyIGlzQmluYXJ5ID0gcmVJc0JpbmFyeS50ZXN0KHZhbHVlKTtcbiAgcmV0dXJuIChpc0JpbmFyeSB8fCByZUlzT2N0YWwudGVzdCh2YWx1ZSkpXG4gICAgPyBmcmVlUGFyc2VJbnQodmFsdWUuc2xpY2UoMiksIGlzQmluYXJ5ID8gMiA6IDgpXG4gICAgOiAocmVJc0JhZEhleC50ZXN0KHZhbHVlKSA/IE5BTiA6ICt2YWx1ZSk7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgb2YgYG9iamVjdGAuXG4gKlxuICogKipOb3RlOioqIE5vbi1vYmplY3QgdmFsdWVzIGFyZSBjb2VyY2VkIHRvIG9iamVjdHMuIFNlZSB0aGVcbiAqIFtFUyBzcGVjXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3Qua2V5cylcbiAqIGZvciBtb3JlIGRldGFpbHMuXG4gKlxuICogQHN0YXRpY1xuICogQHNpbmNlIDAuMS4wXG4gKiBAbWVtYmVyT2YgX1xuICogQGNhdGVnb3J5IE9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqIEBleGFtcGxlXG4gKlxuICogZnVuY3Rpb24gRm9vKCkge1xuICogICB0aGlzLmEgPSAxO1xuICogICB0aGlzLmIgPSAyO1xuICogfVxuICpcbiAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gKlxuICogXy5rZXlzKG5ldyBGb28pO1xuICogLy8gPT4gWydhJywgJ2InXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICpcbiAqIF8ua2V5cygnaGknKTtcbiAqIC8vID0+IFsnMCcsICcxJ11cbiAqL1xuZnVuY3Rpb24ga2V5cyhvYmplY3QpIHtcbiAgcmV0dXJuIGlzQXJyYXlMaWtlKG9iamVjdCkgPyBhcnJheUxpa2VLZXlzKG9iamVjdCkgOiBiYXNlS2V5cyhvYmplY3QpO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0eSB2YWx1ZXMgb2YgYG9iamVjdGAuXG4gKlxuICogKipOb3RlOioqIE5vbi1vYmplY3QgdmFsdWVzIGFyZSBjb2VyY2VkIHRvIG9iamVjdHMuXG4gKlxuICogQHN0YXRpY1xuICogQHNpbmNlIDAuMS4wXG4gKiBAbWVtYmVyT2YgX1xuICogQGNhdGVnb3J5IE9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSB2YWx1ZXMuXG4gKiBAZXhhbXBsZVxuICpcbiAqIGZ1bmN0aW9uIEZvbygpIHtcbiAqICAgdGhpcy5hID0gMTtcbiAqICAgdGhpcy5iID0gMjtcbiAqIH1cbiAqXG4gKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICpcbiAqIF8udmFsdWVzKG5ldyBGb28pO1xuICogLy8gPT4gWzEsIDJdIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gKlxuICogXy52YWx1ZXMoJ2hpJyk7XG4gKiAvLyA9PiBbJ2gnLCAnaSddXG4gKi9cbmZ1bmN0aW9uIHZhbHVlcyhvYmplY3QpIHtcbiAgcmV0dXJuIG9iamVjdCA/IGJhc2VWYWx1ZXMob2JqZWN0LCBrZXlzKG9iamVjdCkpIDogW107XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW5jbHVkZXM7XG4iLCIvKipcbiAqIGxvZGFzaCAzLjAuMyAoQ3VzdG9tIEJ1aWxkKSA8aHR0cHM6Ly9sb2Rhc2guY29tLz5cbiAqIEJ1aWxkOiBgbG9kYXNoIG1vZHVsYXJpemUgZXhwb3J0cz1cIm5wbVwiIC1vIC4vYFxuICogQ29weXJpZ2h0IDIwMTItMjAxNiBUaGUgRG9qbyBGb3VuZGF0aW9uIDxodHRwOi8vZG9qb2ZvdW5kYXRpb24ub3JnLz5cbiAqIEJhc2VkIG9uIFVuZGVyc2NvcmUuanMgMS44LjMgPGh0dHA6Ly91bmRlcnNjb3JlanMub3JnL0xJQ0VOU0U+XG4gKiBDb3B5cmlnaHQgMjAwOS0yMDE2IEplcmVteSBBc2hrZW5hcywgRG9jdW1lbnRDbG91ZCBhbmQgSW52ZXN0aWdhdGl2ZSBSZXBvcnRlcnMgJiBFZGl0b3JzXG4gKiBBdmFpbGFibGUgdW5kZXIgTUlUIGxpY2Vuc2UgPGh0dHBzOi8vbG9kYXNoLmNvbS9saWNlbnNlPlxuICovXG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBib29sVGFnID0gJ1tvYmplY3QgQm9vbGVhbl0nO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKipcbiAqIFVzZWQgdG8gcmVzb2x2ZSB0aGUgW2B0b1N0cmluZ1RhZ2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmcpXG4gKiBvZiB2YWx1ZXMuXG4gKi9cbnZhciBvYmplY3RUb1N0cmluZyA9IG9iamVjdFByb3RvLnRvU3RyaW5nO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBib29sZWFuIHByaW1pdGl2ZSBvciBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGNvcnJlY3RseSBjbGFzc2lmaWVkLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNCb29sZWFuKGZhbHNlKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQm9vbGVhbihudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQm9vbGVhbih2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPT09IHRydWUgfHwgdmFsdWUgPT09IGZhbHNlIHx8XG4gICAgKGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgb2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT0gYm9vbFRhZyk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UuIEEgdmFsdWUgaXMgb2JqZWN0LWxpa2UgaWYgaXQncyBub3QgYG51bGxgXG4gKiBhbmQgaGFzIGEgYHR5cGVvZmAgcmVzdWx0IG9mIFwib2JqZWN0XCIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKG51bGwpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3RMaWtlKHZhbHVlKSB7XG4gIHJldHVybiAhIXZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0Jztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0Jvb2xlYW47XG4iLCIvKipcbiAqIGxvZGFzaCAoQ3VzdG9tIEJ1aWxkKSA8aHR0cHM6Ly9sb2Rhc2guY29tLz5cbiAqIEJ1aWxkOiBgbG9kYXNoIG1vZHVsYXJpemUgZXhwb3J0cz1cIm5wbVwiIC1vIC4vYFxuICogQ29weXJpZ2h0IGpRdWVyeSBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnMgPGh0dHBzOi8vanF1ZXJ5Lm9yZy8+XG4gKiBSZWxlYXNlZCB1bmRlciBNSVQgbGljZW5zZSA8aHR0cHM6Ly9sb2Rhc2guY29tL2xpY2Vuc2U+XG4gKiBCYXNlZCBvbiBVbmRlcnNjb3JlLmpzIDEuOC4zIDxodHRwOi8vdW5kZXJzY29yZWpzLm9yZy9MSUNFTlNFPlxuICogQ29weXJpZ2h0IEplcmVteSBBc2hrZW5hcywgRG9jdW1lbnRDbG91ZCBhbmQgSW52ZXN0aWdhdGl2ZSBSZXBvcnRlcnMgJiBFZGl0b3JzXG4gKi9cblxuLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgSU5GSU5JVFkgPSAxIC8gMCxcbiAgICBNQVhfSU5URUdFUiA9IDEuNzk3NjkzMTM0ODYyMzE1N2UrMzA4LFxuICAgIE5BTiA9IDAgLyAwO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgc3ltYm9sVGFnID0gJ1tvYmplY3QgU3ltYm9sXSc7XG5cbi8qKiBVc2VkIHRvIG1hdGNoIGxlYWRpbmcgYW5kIHRyYWlsaW5nIHdoaXRlc3BhY2UuICovXG52YXIgcmVUcmltID0gL15cXHMrfFxccyskL2c7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBiYWQgc2lnbmVkIGhleGFkZWNpbWFsIHN0cmluZyB2YWx1ZXMuICovXG52YXIgcmVJc0JhZEhleCA9IC9eWy0rXTB4WzAtOWEtZl0rJC9pO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgYmluYXJ5IHN0cmluZyB2YWx1ZXMuICovXG52YXIgcmVJc0JpbmFyeSA9IC9eMGJbMDFdKyQvaTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IG9jdGFsIHN0cmluZyB2YWx1ZXMuICovXG52YXIgcmVJc09jdGFsID0gL14wb1swLTddKyQvaTtcblxuLyoqIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHdpdGhvdXQgYSBkZXBlbmRlbmN5IG9uIGByb290YC4gKi9cbnZhciBmcmVlUGFyc2VJbnQgPSBwYXJzZUludDtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqXG4gKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAqIG9mIHZhbHVlcy5cbiAqL1xudmFyIG9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYW4gaW50ZWdlci5cbiAqXG4gKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgYmFzZWQgb25cbiAqIFtgTnVtYmVyLmlzSW50ZWdlcmBdKGh0dHBzOi8vbWRuLmlvL051bWJlci9pc0ludGVnZXIpLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGludGVnZXIsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0ludGVnZXIoMyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0ludGVnZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNJbnRlZ2VyKEluZmluaXR5KTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0ludGVnZXIoJzMnKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzSW50ZWdlcih2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdudW1iZXInICYmIHZhbHVlID09IHRvSW50ZWdlcih2YWx1ZSk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgdGhlXG4gKiBbbGFuZ3VhZ2UgdHlwZV0oaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLWVjbWFzY3JpcHQtbGFuZ3VhZ2UtdHlwZXMpXG4gKiBvZiBgT2JqZWN0YC4gKGUuZy4gYXJyYXlzLCBmdW5jdGlvbnMsIG9iamVjdHMsIHJlZ2V4ZXMsIGBuZXcgTnVtYmVyKDApYCwgYW5kIGBuZXcgU3RyaW5nKCcnKWApXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3Qoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KF8ubm9vcCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICByZXR1cm4gISF2YWx1ZSAmJiAodHlwZSA9PSAnb2JqZWN0JyB8fCB0eXBlID09ICdmdW5jdGlvbicpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLiBBIHZhbHVlIGlzIG9iamVjdC1saWtlIGlmIGl0J3Mgbm90IGBudWxsYFxuICogYW5kIGhhcyBhIGB0eXBlb2ZgIHJlc3VsdCBvZiBcIm9iamVjdFwiLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKG51bGwpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3RMaWtlKHZhbHVlKSB7XG4gIHJldHVybiAhIXZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0Jztcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFN5bWJvbGAgcHJpbWl0aXZlIG9yIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHN5bWJvbCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzU3ltYm9sKFN5bWJvbC5pdGVyYXRvcik7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc1N5bWJvbCgnYWJjJyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N5bWJvbCh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdzeW1ib2wnIHx8XG4gICAgKGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgb2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT0gc3ltYm9sVGFnKTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgZmluaXRlIG51bWJlci5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMTIuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgbnVtYmVyLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnRvRmluaXRlKDMuMik7XG4gKiAvLyA9PiAzLjJcbiAqXG4gKiBfLnRvRmluaXRlKE51bWJlci5NSU5fVkFMVUUpO1xuICogLy8gPT4gNWUtMzI0XG4gKlxuICogXy50b0Zpbml0ZShJbmZpbml0eSk7XG4gKiAvLyA9PiAxLjc5NzY5MzEzNDg2MjMxNTdlKzMwOFxuICpcbiAqIF8udG9GaW5pdGUoJzMuMicpO1xuICogLy8gPT4gMy4yXG4gKi9cbmZ1bmN0aW9uIHRvRmluaXRlKHZhbHVlKSB7XG4gIGlmICghdmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IDAgPyB2YWx1ZSA6IDA7XG4gIH1cbiAgdmFsdWUgPSB0b051bWJlcih2YWx1ZSk7XG4gIGlmICh2YWx1ZSA9PT0gSU5GSU5JVFkgfHwgdmFsdWUgPT09IC1JTkZJTklUWSkge1xuICAgIHZhciBzaWduID0gKHZhbHVlIDwgMCA/IC0xIDogMSk7XG4gICAgcmV0dXJuIHNpZ24gKiBNQVhfSU5URUdFUjtcbiAgfVxuICByZXR1cm4gdmFsdWUgPT09IHZhbHVlID8gdmFsdWUgOiAwO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYW4gaW50ZWdlci5cbiAqXG4gKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgbG9vc2VseSBiYXNlZCBvblxuICogW2BUb0ludGVnZXJgXShodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtdG9pbnRlZ2VyKS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBpbnRlZ2VyLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnRvSW50ZWdlcigzLjIpO1xuICogLy8gPT4gM1xuICpcbiAqIF8udG9JbnRlZ2VyKE51bWJlci5NSU5fVkFMVUUpO1xuICogLy8gPT4gMFxuICpcbiAqIF8udG9JbnRlZ2VyKEluZmluaXR5KTtcbiAqIC8vID0+IDEuNzk3NjkzMTM0ODYyMzE1N2UrMzA4XG4gKlxuICogXy50b0ludGVnZXIoJzMuMicpO1xuICogLy8gPT4gM1xuICovXG5mdW5jdGlvbiB0b0ludGVnZXIodmFsdWUpIHtcbiAgdmFyIHJlc3VsdCA9IHRvRmluaXRlKHZhbHVlKSxcbiAgICAgIHJlbWFpbmRlciA9IHJlc3VsdCAlIDE7XG5cbiAgcmV0dXJuIHJlc3VsdCA9PT0gcmVzdWx0ID8gKHJlbWFpbmRlciA/IHJlc3VsdCAtIHJlbWFpbmRlciA6IHJlc3VsdCkgOiAwO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBudW1iZXIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb2Nlc3MuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBudW1iZXIuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udG9OdW1iZXIoMy4yKTtcbiAqIC8vID0+IDMuMlxuICpcbiAqIF8udG9OdW1iZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gKiAvLyA9PiA1ZS0zMjRcbiAqXG4gKiBfLnRvTnVtYmVyKEluZmluaXR5KTtcbiAqIC8vID0+IEluZmluaXR5XG4gKlxuICogXy50b051bWJlcignMy4yJyk7XG4gKiAvLyA9PiAzLjJcbiAqL1xuZnVuY3Rpb24gdG9OdW1iZXIodmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJykge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICBpZiAoaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgcmV0dXJuIE5BTjtcbiAgfVxuICBpZiAoaXNPYmplY3QodmFsdWUpKSB7XG4gICAgdmFyIG90aGVyID0gdHlwZW9mIHZhbHVlLnZhbHVlT2YgPT0gJ2Z1bmN0aW9uJyA/IHZhbHVlLnZhbHVlT2YoKSA6IHZhbHVlO1xuICAgIHZhbHVlID0gaXNPYmplY3Qob3RoZXIpID8gKG90aGVyICsgJycpIDogb3RoZXI7XG4gIH1cbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gMCA/IHZhbHVlIDogK3ZhbHVlO1xuICB9XG4gIHZhbHVlID0gdmFsdWUucmVwbGFjZShyZVRyaW0sICcnKTtcbiAgdmFyIGlzQmluYXJ5ID0gcmVJc0JpbmFyeS50ZXN0KHZhbHVlKTtcbiAgcmV0dXJuIChpc0JpbmFyeSB8fCByZUlzT2N0YWwudGVzdCh2YWx1ZSkpXG4gICAgPyBmcmVlUGFyc2VJbnQodmFsdWUuc2xpY2UoMiksIGlzQmluYXJ5ID8gMiA6IDgpXG4gICAgOiAocmVJc0JhZEhleC50ZXN0KHZhbHVlKSA/IE5BTiA6ICt2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNJbnRlZ2VyO1xuIiwiLyoqXG4gKiBsb2Rhc2ggMy4wLjMgKEN1c3RvbSBCdWlsZCkgPGh0dHBzOi8vbG9kYXNoLmNvbS8+XG4gKiBCdWlsZDogYGxvZGFzaCBtb2R1bGFyaXplIGV4cG9ydHM9XCJucG1cIiAtbyAuL2BcbiAqIENvcHlyaWdodCAyMDEyLTIwMTYgVGhlIERvam8gRm91bmRhdGlvbiA8aHR0cDovL2Rvam9mb3VuZGF0aW9uLm9yZy8+XG4gKiBCYXNlZCBvbiBVbmRlcnNjb3JlLmpzIDEuOC4zIDxodHRwOi8vdW5kZXJzY29yZWpzLm9yZy9MSUNFTlNFPlxuICogQ29weXJpZ2h0IDIwMDktMjAxNiBKZXJlbXkgQXNoa2VuYXMsIERvY3VtZW50Q2xvdWQgYW5kIEludmVzdGlnYXRpdmUgUmVwb3J0ZXJzICYgRWRpdG9yc1xuICogQXZhaWxhYmxlIHVuZGVyIE1JVCBsaWNlbnNlIDxodHRwczovL2xvZGFzaC5jb20vbGljZW5zZT5cbiAqL1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgbnVtYmVyVGFnID0gJ1tvYmplY3QgTnVtYmVyXSc7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKlxuICogVXNlZCB0byByZXNvbHZlIHRoZSBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAqIG9mIHZhbHVlcy5cbiAqL1xudmFyIG9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UuIEEgdmFsdWUgaXMgb2JqZWN0LWxpa2UgaWYgaXQncyBub3QgYG51bGxgXG4gKiBhbmQgaGFzIGEgYHR5cGVvZmAgcmVzdWx0IG9mIFwib2JqZWN0XCIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKG51bGwpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3RMaWtlKHZhbHVlKSB7XG4gIHJldHVybiAhIXZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0Jztcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYE51bWJlcmAgcHJpbWl0aXZlIG9yIG9iamVjdC5cbiAqXG4gKiAqKk5vdGU6KiogVG8gZXhjbHVkZSBgSW5maW5pdHlgLCBgLUluZmluaXR5YCwgYW5kIGBOYU5gLCB3aGljaCBhcmUgY2xhc3NpZmllZFxuICogYXMgbnVtYmVycywgdXNlIHRoZSBgXy5pc0Zpbml0ZWAgbWV0aG9kLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBjb3JyZWN0bHkgY2xhc3NpZmllZCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzTnVtYmVyKDMpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNOdW1iZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc051bWJlcihJbmZpbml0eSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc051bWJlcignMycpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNOdW1iZXIodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyB8fFxuICAgIChpc09iamVjdExpa2UodmFsdWUpICYmIG9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpID09IG51bWJlclRhZyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNOdW1iZXI7XG4iLCIvKipcbiAqIGxvZGFzaCAoQ3VzdG9tIEJ1aWxkKSA8aHR0cHM6Ly9sb2Rhc2guY29tLz5cbiAqIEJ1aWxkOiBgbG9kYXNoIG1vZHVsYXJpemUgZXhwb3J0cz1cIm5wbVwiIC1vIC4vYFxuICogQ29weXJpZ2h0IGpRdWVyeSBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnMgPGh0dHBzOi8vanF1ZXJ5Lm9yZy8+XG4gKiBSZWxlYXNlZCB1bmRlciBNSVQgbGljZW5zZSA8aHR0cHM6Ly9sb2Rhc2guY29tL2xpY2Vuc2U+XG4gKiBCYXNlZCBvbiBVbmRlcnNjb3JlLmpzIDEuOC4zIDxodHRwOi8vdW5kZXJzY29yZWpzLm9yZy9MSUNFTlNFPlxuICogQ29weXJpZ2h0IEplcmVteSBBc2hrZW5hcywgRG9jdW1lbnRDbG91ZCBhbmQgSW52ZXN0aWdhdGl2ZSBSZXBvcnRlcnMgJiBFZGl0b3JzXG4gKi9cblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFRhZyA9ICdbb2JqZWN0IE9iamVjdF0nO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgaG9zdCBvYmplY3QgaW4gSUUgPCA5LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgaG9zdCBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNIb3N0T2JqZWN0KHZhbHVlKSB7XG4gIC8vIE1hbnkgaG9zdCBvYmplY3RzIGFyZSBgT2JqZWN0YCBvYmplY3RzIHRoYXQgY2FuIGNvZXJjZSB0byBzdHJpbmdzXG4gIC8vIGRlc3BpdGUgaGF2aW5nIGltcHJvcGVybHkgZGVmaW5lZCBgdG9TdHJpbmdgIG1ldGhvZHMuXG4gIHZhciByZXN1bHQgPSBmYWxzZTtcbiAgaWYgKHZhbHVlICE9IG51bGwgJiYgdHlwZW9mIHZhbHVlLnRvU3RyaW5nICE9ICdmdW5jdGlvbicpIHtcbiAgICB0cnkge1xuICAgICAgcmVzdWx0ID0gISEodmFsdWUgKyAnJyk7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSB1bmFyeSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggaXRzIGFyZ3VtZW50IHRyYW5zZm9ybWVkLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB3cmFwLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gdHJhbnNmb3JtIFRoZSBhcmd1bWVudCB0cmFuc2Zvcm0uXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gb3ZlckFyZyhmdW5jLCB0cmFuc2Zvcm0pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiBmdW5jKHRyYW5zZm9ybShhcmcpKTtcbiAgfTtcbn1cblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIGZ1bmNQcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZSxcbiAgICBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIHJlc29sdmUgdGhlIGRlY29tcGlsZWQgc291cmNlIG9mIGZ1bmN0aW9ucy4gKi9cbnZhciBmdW5jVG9TdHJpbmcgPSBmdW5jUHJvdG8udG9TdHJpbmc7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKiBVc2VkIHRvIGluZmVyIHRoZSBgT2JqZWN0YCBjb25zdHJ1Y3Rvci4gKi9cbnZhciBvYmplY3RDdG9yU3RyaW5nID0gZnVuY1RvU3RyaW5nLmNhbGwoT2JqZWN0KTtcblxuLyoqXG4gKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAqIG9mIHZhbHVlcy5cbiAqL1xudmFyIG9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIGdldFByb3RvdHlwZSA9IG92ZXJBcmcoT2JqZWN0LmdldFByb3RvdHlwZU9mLCBPYmplY3QpO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLiBBIHZhbHVlIGlzIG9iamVjdC1saWtlIGlmIGl0J3Mgbm90IGBudWxsYFxuICogYW5kIGhhcyBhIGB0eXBlb2ZgIHJlc3VsdCBvZiBcIm9iamVjdFwiLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKG51bGwpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3RMaWtlKHZhbHVlKSB7XG4gIHJldHVybiAhIXZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0Jztcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHBsYWluIG9iamVjdCwgdGhhdCBpcywgYW4gb2JqZWN0IGNyZWF0ZWQgYnkgdGhlXG4gKiBgT2JqZWN0YCBjb25zdHJ1Y3RvciBvciBvbmUgd2l0aCBhIGBbW1Byb3RvdHlwZV1dYCBvZiBgbnVsbGAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjguMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBwbGFpbiBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogZnVuY3Rpb24gRm9vKCkge1xuICogICB0aGlzLmEgPSAxO1xuICogfVxuICpcbiAqIF8uaXNQbGFpbk9iamVjdChuZXcgRm9vKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc1BsYWluT2JqZWN0KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNQbGFpbk9iamVjdCh7ICd4JzogMCwgJ3knOiAwIH0pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNQbGFpbk9iamVjdChPYmplY3QuY3JlYXRlKG51bGwpKTtcbiAqIC8vID0+IHRydWVcbiAqL1xuZnVuY3Rpb24gaXNQbGFpbk9iamVjdCh2YWx1ZSkge1xuICBpZiAoIWlzT2JqZWN0TGlrZSh2YWx1ZSkgfHxcbiAgICAgIG9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpICE9IG9iamVjdFRhZyB8fCBpc0hvc3RPYmplY3QodmFsdWUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBwcm90byA9IGdldFByb3RvdHlwZSh2YWx1ZSk7XG4gIGlmIChwcm90byA9PT0gbnVsbCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHZhciBDdG9yID0gaGFzT3duUHJvcGVydHkuY2FsbChwcm90bywgJ2NvbnN0cnVjdG9yJykgJiYgcHJvdG8uY29uc3RydWN0b3I7XG4gIHJldHVybiAodHlwZW9mIEN0b3IgPT0gJ2Z1bmN0aW9uJyAmJlxuICAgIEN0b3IgaW5zdGFuY2VvZiBDdG9yICYmIGZ1bmNUb1N0cmluZy5jYWxsKEN0b3IpID09IG9iamVjdEN0b3JTdHJpbmcpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzUGxhaW5PYmplY3Q7XG4iLCIvKipcbiAqIGxvZGFzaCA0LjAuMSAoQ3VzdG9tIEJ1aWxkKSA8aHR0cHM6Ly9sb2Rhc2guY29tLz5cbiAqIEJ1aWxkOiBgbG9kYXNoIG1vZHVsYXJpemUgZXhwb3J0cz1cIm5wbVwiIC1vIC4vYFxuICogQ29weXJpZ2h0IDIwMTItMjAxNiBUaGUgRG9qbyBGb3VuZGF0aW9uIDxodHRwOi8vZG9qb2ZvdW5kYXRpb24ub3JnLz5cbiAqIEJhc2VkIG9uIFVuZGVyc2NvcmUuanMgMS44LjMgPGh0dHA6Ly91bmRlcnNjb3JlanMub3JnL0xJQ0VOU0U+XG4gKiBDb3B5cmlnaHQgMjAwOS0yMDE2IEplcmVteSBBc2hrZW5hcywgRG9jdW1lbnRDbG91ZCBhbmQgSW52ZXN0aWdhdGl2ZSBSZXBvcnRlcnMgJiBFZGl0b3JzXG4gKiBBdmFpbGFibGUgdW5kZXIgTUlUIGxpY2Vuc2UgPGh0dHBzOi8vbG9kYXNoLmNvbS9saWNlbnNlPlxuICovXG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBzdHJpbmdUYWcgPSAnW29iamVjdCBTdHJpbmddJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqXG4gKiBVc2VkIHRvIHJlc29sdmUgdGhlIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICogb2YgdmFsdWVzLlxuICovXG52YXIgb2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGFuIGBBcnJheWAgb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAdHlwZSBGdW5jdGlvblxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgY29ycmVjdGx5IGNsYXNzaWZpZWQsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FycmF5KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5KGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzQXJyYXkoJ2FiYycpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzQXJyYXkoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZS4gQSB2YWx1ZSBpcyBvYmplY3QtbGlrZSBpZiBpdCdzIG5vdCBgbnVsbGBcbiAqIGFuZCBoYXMgYSBgdHlwZW9mYCByZXN1bHQgb2YgXCJvYmplY3RcIi5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc09iamVjdExpa2Uoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc09iamVjdExpa2UobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdExpa2UodmFsdWUpIHtcbiAgcmV0dXJuICEhdmFsdWUgJiYgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgU3RyaW5nYCBwcmltaXRpdmUgb3Igb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBjb3JyZWN0bHkgY2xhc3NpZmllZCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzU3RyaW5nKCdhYmMnKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzU3RyaW5nKDEpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTdHJpbmcodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJyB8fFxuICAgICghaXNBcnJheSh2YWx1ZSkgJiYgaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBvYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKSA9PSBzdHJpbmdUYWcpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzU3RyaW5nO1xuIiwiLyoqXG4gKiBsb2Rhc2ggKEN1c3RvbSBCdWlsZCkgPGh0dHBzOi8vbG9kYXNoLmNvbS8+XG4gKiBCdWlsZDogYGxvZGFzaCBtb2R1bGFyaXplIGV4cG9ydHM9XCJucG1cIiAtbyAuL2BcbiAqIENvcHlyaWdodCBqUXVlcnkgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzIDxodHRwczovL2pxdWVyeS5vcmcvPlxuICogUmVsZWFzZWQgdW5kZXIgTUlUIGxpY2Vuc2UgPGh0dHBzOi8vbG9kYXNoLmNvbS9saWNlbnNlPlxuICogQmFzZWQgb24gVW5kZXJzY29yZS5qcyAxLjguMyA8aHR0cDovL3VuZGVyc2NvcmVqcy5vcmcvTElDRU5TRT5cbiAqIENvcHlyaWdodCBKZXJlbXkgQXNoa2VuYXMsIERvY3VtZW50Q2xvdWQgYW5kIEludmVzdGlnYXRpdmUgUmVwb3J0ZXJzICYgRWRpdG9yc1xuICovXG5cbi8qKiBVc2VkIGFzIHRoZSBgVHlwZUVycm9yYCBtZXNzYWdlIGZvciBcIkZ1bmN0aW9uc1wiIG1ldGhvZHMuICovXG52YXIgRlVOQ19FUlJPUl9URVhUID0gJ0V4cGVjdGVkIGEgZnVuY3Rpb24nO1xuXG4vKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbnZhciBJTkZJTklUWSA9IDEgLyAwLFxuICAgIE1BWF9JTlRFR0VSID0gMS43OTc2OTMxMzQ4NjIzMTU3ZSszMDgsXG4gICAgTkFOID0gMCAvIDA7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBzeW1ib2xUYWcgPSAnW29iamVjdCBTeW1ib2xdJztcblxuLyoqIFVzZWQgdG8gbWF0Y2ggbGVhZGluZyBhbmQgdHJhaWxpbmcgd2hpdGVzcGFjZS4gKi9cbnZhciByZVRyaW0gPSAvXlxccyt8XFxzKyQvZztcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IGJhZCBzaWduZWQgaGV4YWRlY2ltYWwgc3RyaW5nIHZhbHVlcy4gKi9cbnZhciByZUlzQmFkSGV4ID0gL15bLStdMHhbMC05YS1mXSskL2k7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBiaW5hcnkgc3RyaW5nIHZhbHVlcy4gKi9cbnZhciByZUlzQmluYXJ5ID0gL14wYlswMV0rJC9pO1xuXG4vKiogVXNlZCB0byBkZXRlY3Qgb2N0YWwgc3RyaW5nIHZhbHVlcy4gKi9cbnZhciByZUlzT2N0YWwgPSAvXjBvWzAtN10rJC9pO1xuXG4vKiogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgd2l0aG91dCBhIGRlcGVuZGVuY3kgb24gYHJvb3RgLiAqL1xudmFyIGZyZWVQYXJzZUludCA9IHBhcnNlSW50O1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKipcbiAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICogb2YgdmFsdWVzLlxuICovXG52YXIgb2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuLyoqXG4gKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCwgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgYW5kIGFyZ3VtZW50c1xuICogb2YgdGhlIGNyZWF0ZWQgZnVuY3Rpb24sIHdoaWxlIGl0J3MgY2FsbGVkIGxlc3MgdGhhbiBgbmAgdGltZXMuIFN1YnNlcXVlbnRcbiAqIGNhbGxzIHRvIHRoZSBjcmVhdGVkIGZ1bmN0aW9uIHJldHVybiB0aGUgcmVzdWx0IG9mIHRoZSBsYXN0IGBmdW5jYCBpbnZvY2F0aW9uLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMy4wLjBcbiAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiBjYWxscyBhdCB3aGljaCBgZnVuY2AgaXMgbm8gbG9uZ2VyIGludm9rZWQuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byByZXN0cmljdC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHJlc3RyaWN0ZWQgZnVuY3Rpb24uXG4gKiBAZXhhbXBsZVxuICpcbiAqIGpRdWVyeShlbGVtZW50KS5vbignY2xpY2snLCBfLmJlZm9yZSg1LCBhZGRDb250YWN0VG9MaXN0KSk7XG4gKiAvLyA9PiBBbGxvd3MgYWRkaW5nIHVwIHRvIDQgY29udGFjdHMgdG8gdGhlIGxpc3QuXG4gKi9cbmZ1bmN0aW9uIGJlZm9yZShuLCBmdW5jKSB7XG4gIHZhciByZXN1bHQ7XG4gIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICB9XG4gIG4gPSB0b0ludGVnZXIobik7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICBpZiAoLS1uID4gMCkge1xuICAgICAgcmVzdWx0ID0gZnVuYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgICBpZiAobiA8PSAxKSB7XG4gICAgICBmdW5jID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGlzIHJlc3RyaWN0ZWQgdG8gaW52b2tpbmcgYGZ1bmNgIG9uY2UuIFJlcGVhdCBjYWxsc1xuICogdG8gdGhlIGZ1bmN0aW9uIHJldHVybiB0aGUgdmFsdWUgb2YgdGhlIGZpcnN0IGludm9jYXRpb24uIFRoZSBgZnVuY2AgaXNcbiAqIGludm9rZWQgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgYW5kIGFyZ3VtZW50cyBvZiB0aGUgY3JlYXRlZCBmdW5jdGlvbi5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHJlc3RyaWN0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcmVzdHJpY3RlZCBmdW5jdGlvbi5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIGluaXRpYWxpemUgPSBfLm9uY2UoY3JlYXRlQXBwbGljYXRpb24pO1xuICogaW5pdGlhbGl6ZSgpO1xuICogaW5pdGlhbGl6ZSgpO1xuICogLy8gPT4gYGNyZWF0ZUFwcGxpY2F0aW9uYCBpcyBpbnZva2VkIG9uY2VcbiAqL1xuZnVuY3Rpb24gb25jZShmdW5jKSB7XG4gIHJldHVybiBiZWZvcmUoMiwgZnVuYyk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgdGhlXG4gKiBbbGFuZ3VhZ2UgdHlwZV0oaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLWVjbWFzY3JpcHQtbGFuZ3VhZ2UtdHlwZXMpXG4gKiBvZiBgT2JqZWN0YC4gKGUuZy4gYXJyYXlzLCBmdW5jdGlvbnMsIG9iamVjdHMsIHJlZ2V4ZXMsIGBuZXcgTnVtYmVyKDApYCwgYW5kIGBuZXcgU3RyaW5nKCcnKWApXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3Qoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KF8ubm9vcCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICByZXR1cm4gISF2YWx1ZSAmJiAodHlwZSA9PSAnb2JqZWN0JyB8fCB0eXBlID09ICdmdW5jdGlvbicpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLiBBIHZhbHVlIGlzIG9iamVjdC1saWtlIGlmIGl0J3Mgbm90IGBudWxsYFxuICogYW5kIGhhcyBhIGB0eXBlb2ZgIHJlc3VsdCBvZiBcIm9iamVjdFwiLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKG51bGwpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3RMaWtlKHZhbHVlKSB7XG4gIHJldHVybiAhIXZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0Jztcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFN5bWJvbGAgcHJpbWl0aXZlIG9yIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHN5bWJvbCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzU3ltYm9sKFN5bWJvbC5pdGVyYXRvcik7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc1N5bWJvbCgnYWJjJyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N5bWJvbCh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdzeW1ib2wnIHx8XG4gICAgKGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgb2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT0gc3ltYm9sVGFnKTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgZmluaXRlIG51bWJlci5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMTIuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgbnVtYmVyLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnRvRmluaXRlKDMuMik7XG4gKiAvLyA9PiAzLjJcbiAqXG4gKiBfLnRvRmluaXRlKE51bWJlci5NSU5fVkFMVUUpO1xuICogLy8gPT4gNWUtMzI0XG4gKlxuICogXy50b0Zpbml0ZShJbmZpbml0eSk7XG4gKiAvLyA9PiAxLjc5NzY5MzEzNDg2MjMxNTdlKzMwOFxuICpcbiAqIF8udG9GaW5pdGUoJzMuMicpO1xuICogLy8gPT4gMy4yXG4gKi9cbmZ1bmN0aW9uIHRvRmluaXRlKHZhbHVlKSB7XG4gIGlmICghdmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IDAgPyB2YWx1ZSA6IDA7XG4gIH1cbiAgdmFsdWUgPSB0b051bWJlcih2YWx1ZSk7XG4gIGlmICh2YWx1ZSA9PT0gSU5GSU5JVFkgfHwgdmFsdWUgPT09IC1JTkZJTklUWSkge1xuICAgIHZhciBzaWduID0gKHZhbHVlIDwgMCA/IC0xIDogMSk7XG4gICAgcmV0dXJuIHNpZ24gKiBNQVhfSU5URUdFUjtcbiAgfVxuICByZXR1cm4gdmFsdWUgPT09IHZhbHVlID8gdmFsdWUgOiAwO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYW4gaW50ZWdlci5cbiAqXG4gKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgbG9vc2VseSBiYXNlZCBvblxuICogW2BUb0ludGVnZXJgXShodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtdG9pbnRlZ2VyKS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBpbnRlZ2VyLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnRvSW50ZWdlcigzLjIpO1xuICogLy8gPT4gM1xuICpcbiAqIF8udG9JbnRlZ2VyKE51bWJlci5NSU5fVkFMVUUpO1xuICogLy8gPT4gMFxuICpcbiAqIF8udG9JbnRlZ2VyKEluZmluaXR5KTtcbiAqIC8vID0+IDEuNzk3NjkzMTM0ODYyMzE1N2UrMzA4XG4gKlxuICogXy50b0ludGVnZXIoJzMuMicpO1xuICogLy8gPT4gM1xuICovXG5mdW5jdGlvbiB0b0ludGVnZXIodmFsdWUpIHtcbiAgdmFyIHJlc3VsdCA9IHRvRmluaXRlKHZhbHVlKSxcbiAgICAgIHJlbWFpbmRlciA9IHJlc3VsdCAlIDE7XG5cbiAgcmV0dXJuIHJlc3VsdCA9PT0gcmVzdWx0ID8gKHJlbWFpbmRlciA/IHJlc3VsdCAtIHJlbWFpbmRlciA6IHJlc3VsdCkgOiAwO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBudW1iZXIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb2Nlc3MuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBudW1iZXIuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udG9OdW1iZXIoMy4yKTtcbiAqIC8vID0+IDMuMlxuICpcbiAqIF8udG9OdW1iZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gKiAvLyA9PiA1ZS0zMjRcbiAqXG4gKiBfLnRvTnVtYmVyKEluZmluaXR5KTtcbiAqIC8vID0+IEluZmluaXR5XG4gKlxuICogXy50b051bWJlcignMy4yJyk7XG4gKiAvLyA9PiAzLjJcbiAqL1xuZnVuY3Rpb24gdG9OdW1iZXIodmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJykge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICBpZiAoaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgcmV0dXJuIE5BTjtcbiAgfVxuICBpZiAoaXNPYmplY3QodmFsdWUpKSB7XG4gICAgdmFyIG90aGVyID0gdHlwZW9mIHZhbHVlLnZhbHVlT2YgPT0gJ2Z1bmN0aW9uJyA/IHZhbHVlLnZhbHVlT2YoKSA6IHZhbHVlO1xuICAgIHZhbHVlID0gaXNPYmplY3Qob3RoZXIpID8gKG90aGVyICsgJycpIDogb3RoZXI7XG4gIH1cbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gMCA/IHZhbHVlIDogK3ZhbHVlO1xuICB9XG4gIHZhbHVlID0gdmFsdWUucmVwbGFjZShyZVRyaW0sICcnKTtcbiAgdmFyIGlzQmluYXJ5ID0gcmVJc0JpbmFyeS50ZXN0KHZhbHVlKTtcbiAgcmV0dXJuIChpc0JpbmFyeSB8fCByZUlzT2N0YWwudGVzdCh2YWx1ZSkpXG4gICAgPyBmcmVlUGFyc2VJbnQodmFsdWUuc2xpY2UoMiksIGlzQmluYXJ5ID8gMiA6IDgpXG4gICAgOiAocmVJc0JhZEhleC50ZXN0KHZhbHVlKSA/IE5BTiA6ICt2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gb25jZTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuL2hlbHBlcnMvYmluZCcpO1xudmFyIEF4aW9zID0gcmVxdWlyZSgnLi9jb3JlL0F4aW9zJyk7XG52YXIgbWVyZ2VDb25maWcgPSByZXF1aXJlKCcuL2NvcmUvbWVyZ2VDb25maWcnKTtcbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4vZGVmYXVsdHMnKTtcblxuLyoqXG4gKiBDcmVhdGUgYW4gaW5zdGFuY2Ugb2YgQXhpb3NcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gZGVmYXVsdENvbmZpZyBUaGUgZGVmYXVsdCBjb25maWcgZm9yIHRoZSBpbnN0YW5jZVxuICogQHJldHVybiB7QXhpb3N9IEEgbmV3IGluc3RhbmNlIG9mIEF4aW9zXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUluc3RhbmNlKGRlZmF1bHRDb25maWcpIHtcbiAgdmFyIGNvbnRleHQgPSBuZXcgQXhpb3MoZGVmYXVsdENvbmZpZyk7XG4gIHZhciBpbnN0YW5jZSA9IGJpbmQoQXhpb3MucHJvdG90eXBlLnJlcXVlc3QsIGNvbnRleHQpO1xuXG4gIC8vIENvcHkgYXhpb3MucHJvdG90eXBlIHRvIGluc3RhbmNlXG4gIHV0aWxzLmV4dGVuZChpbnN0YW5jZSwgQXhpb3MucHJvdG90eXBlLCBjb250ZXh0KTtcblxuICAvLyBDb3B5IGNvbnRleHQgdG8gaW5zdGFuY2VcbiAgdXRpbHMuZXh0ZW5kKGluc3RhbmNlLCBjb250ZXh0KTtcblxuICByZXR1cm4gaW5zdGFuY2U7XG59XG5cbi8vIENyZWF0ZSB0aGUgZGVmYXVsdCBpbnN0YW5jZSB0byBiZSBleHBvcnRlZFxudmFyIGF4aW9zID0gY3JlYXRlSW5zdGFuY2UoZGVmYXVsdHMpO1xuXG4vLyBFeHBvc2UgQXhpb3MgY2xhc3MgdG8gYWxsb3cgY2xhc3MgaW5oZXJpdGFuY2VcbmF4aW9zLkF4aW9zID0gQXhpb3M7XG5cbi8vIEZhY3RvcnkgZm9yIGNyZWF0aW5nIG5ldyBpbnN0YW5jZXNcbmF4aW9zLmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShpbnN0YW5jZUNvbmZpZykge1xuICByZXR1cm4gY3JlYXRlSW5zdGFuY2UobWVyZ2VDb25maWcoYXhpb3MuZGVmYXVsdHMsIGluc3RhbmNlQ29uZmlnKSk7XG59O1xuXG4vLyBFeHBvc2UgQ2FuY2VsICYgQ2FuY2VsVG9rZW5cbmF4aW9zLkNhbmNlbCA9IHJlcXVpcmUoJy4vY2FuY2VsL0NhbmNlbCcpO1xuYXhpb3MuQ2FuY2VsVG9rZW4gPSByZXF1aXJlKCcuL2NhbmNlbC9DYW5jZWxUb2tlbicpO1xuYXhpb3MuaXNDYW5jZWwgPSByZXF1aXJlKCcuL2NhbmNlbC9pc0NhbmNlbCcpO1xuXG4vLyBFeHBvc2UgYWxsL3NwcmVhZFxuYXhpb3MuYWxsID0gZnVuY3Rpb24gYWxsKHByb21pc2VzKSB7XG4gIHJldHVybiBQcm9taXNlLmFsbChwcm9taXNlcyk7XG59O1xuYXhpb3Muc3ByZWFkID0gcmVxdWlyZSgnLi9oZWxwZXJzL3NwcmVhZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGF4aW9zO1xuXG4vLyBBbGxvdyB1c2Ugb2YgZGVmYXVsdCBpbXBvcnQgc3ludGF4IGluIFR5cGVTY3JpcHRcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBheGlvcztcbiIsIi8qIVxuICogRGV0ZXJtaW5lIGlmIGFuIG9iamVjdCBpcyBhIEJ1ZmZlclxuICpcbiAqIEBhdXRob3IgICBGZXJvc3MgQWJvdWtoYWRpamVoIDxodHRwczovL2Zlcm9zcy5vcmc+XG4gKiBAbGljZW5zZSAgTUlUXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0J1ZmZlciAob2JqKSB7XG4gIHJldHVybiBvYmogIT0gbnVsbCAmJiBvYmouY29uc3RydWN0b3IgIT0gbnVsbCAmJlxuICAgIHR5cGVvZiBvYmouY29uc3RydWN0b3IuaXNCdWZmZXIgPT09ICdmdW5jdGlvbicgJiYgb2JqLmNvbnN0cnVjdG9yLmlzQnVmZmVyKG9iailcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIGJ1aWxkVVJMID0gcmVxdWlyZSgnLi4vaGVscGVycy9idWlsZFVSTCcpO1xudmFyIEludGVyY2VwdG9yTWFuYWdlciA9IHJlcXVpcmUoJy4vSW50ZXJjZXB0b3JNYW5hZ2VyJyk7XG52YXIgZGlzcGF0Y2hSZXF1ZXN0ID0gcmVxdWlyZSgnLi9kaXNwYXRjaFJlcXVlc3QnKTtcbnZhciBtZXJnZUNvbmZpZyA9IHJlcXVpcmUoJy4vbWVyZ2VDb25maWcnKTtcblxuLyoqXG4gKiBDcmVhdGUgYSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gaW5zdGFuY2VDb25maWcgVGhlIGRlZmF1bHQgY29uZmlnIGZvciB0aGUgaW5zdGFuY2VcbiAqL1xuZnVuY3Rpb24gQXhpb3MoaW5zdGFuY2VDb25maWcpIHtcbiAgdGhpcy5kZWZhdWx0cyA9IGluc3RhbmNlQ29uZmlnO1xuICB0aGlzLmludGVyY2VwdG9ycyA9IHtcbiAgICByZXF1ZXN0OiBuZXcgSW50ZXJjZXB0b3JNYW5hZ2VyKCksXG4gICAgcmVzcG9uc2U6IG5ldyBJbnRlcmNlcHRvck1hbmFnZXIoKVxuICB9O1xufVxuXG4vKipcbiAqIERpc3BhdGNoIGEgcmVxdWVzdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZyBzcGVjaWZpYyBmb3IgdGhpcyByZXF1ZXN0IChtZXJnZWQgd2l0aCB0aGlzLmRlZmF1bHRzKVxuICovXG5BeGlvcy5wcm90b3R5cGUucmVxdWVzdCA9IGZ1bmN0aW9uIHJlcXVlc3QoY29uZmlnKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAvLyBBbGxvdyBmb3IgYXhpb3MoJ2V4YW1wbGUvdXJsJ1ssIGNvbmZpZ10pIGEgbGEgZmV0Y2ggQVBJXG4gIGlmICh0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJykge1xuICAgIGNvbmZpZyA9IGFyZ3VtZW50c1sxXSB8fCB7fTtcbiAgICBjb25maWcudXJsID0gYXJndW1lbnRzWzBdO1xuICB9IGVsc2Uge1xuICAgIGNvbmZpZyA9IGNvbmZpZyB8fCB7fTtcbiAgfVxuXG4gIGNvbmZpZyA9IG1lcmdlQ29uZmlnKHRoaXMuZGVmYXVsdHMsIGNvbmZpZyk7XG4gIGNvbmZpZy5tZXRob2QgPSBjb25maWcubWV0aG9kID8gY29uZmlnLm1ldGhvZC50b0xvd2VyQ2FzZSgpIDogJ2dldCc7XG5cbiAgLy8gSG9vayB1cCBpbnRlcmNlcHRvcnMgbWlkZGxld2FyZVxuICB2YXIgY2hhaW4gPSBbZGlzcGF0Y2hSZXF1ZXN0LCB1bmRlZmluZWRdO1xuICB2YXIgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZShjb25maWcpO1xuXG4gIHRoaXMuaW50ZXJjZXB0b3JzLnJlcXVlc3QuZm9yRWFjaChmdW5jdGlvbiB1bnNoaWZ0UmVxdWVzdEludGVyY2VwdG9ycyhpbnRlcmNlcHRvcikge1xuICAgIGNoYWluLnVuc2hpZnQoaW50ZXJjZXB0b3IuZnVsZmlsbGVkLCBpbnRlcmNlcHRvci5yZWplY3RlZCk7XG4gIH0pO1xuXG4gIHRoaXMuaW50ZXJjZXB0b3JzLnJlc3BvbnNlLmZvckVhY2goZnVuY3Rpb24gcHVzaFJlc3BvbnNlSW50ZXJjZXB0b3JzKGludGVyY2VwdG9yKSB7XG4gICAgY2hhaW4ucHVzaChpbnRlcmNlcHRvci5mdWxmaWxsZWQsIGludGVyY2VwdG9yLnJlamVjdGVkKTtcbiAgfSk7XG5cbiAgd2hpbGUgKGNoYWluLmxlbmd0aCkge1xuICAgIHByb21pc2UgPSBwcm9taXNlLnRoZW4oY2hhaW4uc2hpZnQoKSwgY2hhaW4uc2hpZnQoKSk7XG4gIH1cblxuICByZXR1cm4gcHJvbWlzZTtcbn07XG5cbkF4aW9zLnByb3RvdHlwZS5nZXRVcmkgPSBmdW5jdGlvbiBnZXRVcmkoY29uZmlnKSB7XG4gIGNvbmZpZyA9IG1lcmdlQ29uZmlnKHRoaXMuZGVmYXVsdHMsIGNvbmZpZyk7XG4gIHJldHVybiBidWlsZFVSTChjb25maWcudXJsLCBjb25maWcucGFyYW1zLCBjb25maWcucGFyYW1zU2VyaWFsaXplcikucmVwbGFjZSgvXlxcPy8sICcnKTtcbn07XG5cbi8vIFByb3ZpZGUgYWxpYXNlcyBmb3Igc3VwcG9ydGVkIHJlcXVlc3QgbWV0aG9kc1xudXRpbHMuZm9yRWFjaChbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdvcHRpb25zJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2ROb0RhdGEobWV0aG9kKSB7XG4gIC8qZXNsaW50IGZ1bmMtbmFtZXM6MCovXG4gIEF4aW9zLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24odXJsLCBjb25maWcpIHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KHV0aWxzLm1lcmdlKGNvbmZpZyB8fCB7fSwge1xuICAgICAgbWV0aG9kOiBtZXRob2QsXG4gICAgICB1cmw6IHVybFxuICAgIH0pKTtcbiAgfTtcbn0pO1xuXG51dGlscy5mb3JFYWNoKFsncG9zdCcsICdwdXQnLCAncGF0Y2gnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZFdpdGhEYXRhKG1ldGhvZCkge1xuICAvKmVzbGludCBmdW5jLW5hbWVzOjAqL1xuICBBeGlvcy5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKHVybCwgZGF0YSwgY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdCh1dGlscy5tZXJnZShjb25maWcgfHwge30sIHtcbiAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgdXJsOiB1cmwsXG4gICAgICBkYXRhOiBkYXRhXG4gICAgfSkpO1xuICB9O1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gQXhpb3M7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuZnVuY3Rpb24gSW50ZXJjZXB0b3JNYW5hZ2VyKCkge1xuICB0aGlzLmhhbmRsZXJzID0gW107XG59XG5cbi8qKlxuICogQWRkIGEgbmV3IGludGVyY2VwdG9yIHRvIHRoZSBzdGFja1xuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bGZpbGxlZCBUaGUgZnVuY3Rpb24gdG8gaGFuZGxlIGB0aGVuYCBmb3IgYSBgUHJvbWlzZWBcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlamVjdGVkIFRoZSBmdW5jdGlvbiB0byBoYW5kbGUgYHJlamVjdGAgZm9yIGEgYFByb21pc2VgXG4gKlxuICogQHJldHVybiB7TnVtYmVyfSBBbiBJRCB1c2VkIHRvIHJlbW92ZSBpbnRlcmNlcHRvciBsYXRlclxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLnVzZSA9IGZ1bmN0aW9uIHVzZShmdWxmaWxsZWQsIHJlamVjdGVkKSB7XG4gIHRoaXMuaGFuZGxlcnMucHVzaCh7XG4gICAgZnVsZmlsbGVkOiBmdWxmaWxsZWQsXG4gICAgcmVqZWN0ZWQ6IHJlamVjdGVkXG4gIH0pO1xuICByZXR1cm4gdGhpcy5oYW5kbGVycy5sZW5ndGggLSAxO1xufTtcblxuLyoqXG4gKiBSZW1vdmUgYW4gaW50ZXJjZXB0b3IgZnJvbSB0aGUgc3RhY2tcbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gaWQgVGhlIElEIHRoYXQgd2FzIHJldHVybmVkIGJ5IGB1c2VgXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUuZWplY3QgPSBmdW5jdGlvbiBlamVjdChpZCkge1xuICBpZiAodGhpcy5oYW5kbGVyc1tpZF0pIHtcbiAgICB0aGlzLmhhbmRsZXJzW2lkXSA9IG51bGw7XG4gIH1cbn07XG5cbi8qKlxuICogSXRlcmF0ZSBvdmVyIGFsbCB0aGUgcmVnaXN0ZXJlZCBpbnRlcmNlcHRvcnNcbiAqXG4gKiBUaGlzIG1ldGhvZCBpcyBwYXJ0aWN1bGFybHkgdXNlZnVsIGZvciBza2lwcGluZyBvdmVyIGFueVxuICogaW50ZXJjZXB0b3JzIHRoYXQgbWF5IGhhdmUgYmVjb21lIGBudWxsYCBjYWxsaW5nIGBlamVjdGAuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHRvIGNhbGwgZm9yIGVhY2ggaW50ZXJjZXB0b3JcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24gZm9yRWFjaChmbikge1xuICB1dGlscy5mb3JFYWNoKHRoaXMuaGFuZGxlcnMsIGZ1bmN0aW9uIGZvckVhY2hIYW5kbGVyKGgpIHtcbiAgICBpZiAoaCAhPT0gbnVsbCkge1xuICAgICAgZm4oaCk7XG4gICAgfVxuICB9KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gSW50ZXJjZXB0b3JNYW5hZ2VyO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgdHJhbnNmb3JtRGF0YSA9IHJlcXVpcmUoJy4vdHJhbnNmb3JtRGF0YScpO1xudmFyIGlzQ2FuY2VsID0gcmVxdWlyZSgnLi4vY2FuY2VsL2lzQ2FuY2VsJyk7XG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuLi9kZWZhdWx0cycpO1xudmFyIGlzQWJzb2x1dGVVUkwgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTCcpO1xudmFyIGNvbWJpbmVVUkxzID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2NvbWJpbmVVUkxzJyk7XG5cbi8qKlxuICogVGhyb3dzIGEgYENhbmNlbGAgaWYgY2FuY2VsbGF0aW9uIGhhcyBiZWVuIHJlcXVlc3RlZC5cbiAqL1xuZnVuY3Rpb24gdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpIHtcbiAgaWYgKGNvbmZpZy5jYW5jZWxUb2tlbikge1xuICAgIGNvbmZpZy5jYW5jZWxUb2tlbi50aHJvd0lmUmVxdWVzdGVkKCk7XG4gIH1cbn1cblxuLyoqXG4gKiBEaXNwYXRjaCBhIHJlcXVlc3QgdG8gdGhlIHNlcnZlciB1c2luZyB0aGUgY29uZmlndXJlZCBhZGFwdGVyLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZyB0aGF0IGlzIHRvIGJlIHVzZWQgZm9yIHRoZSByZXF1ZXN0XG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gVGhlIFByb21pc2UgdG8gYmUgZnVsZmlsbGVkXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZGlzcGF0Y2hSZXF1ZXN0KGNvbmZpZykge1xuICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgLy8gU3VwcG9ydCBiYXNlVVJMIGNvbmZpZ1xuICBpZiAoY29uZmlnLmJhc2VVUkwgJiYgIWlzQWJzb2x1dGVVUkwoY29uZmlnLnVybCkpIHtcbiAgICBjb25maWcudXJsID0gY29tYmluZVVSTHMoY29uZmlnLmJhc2VVUkwsIGNvbmZpZy51cmwpO1xuICB9XG5cbiAgLy8gRW5zdXJlIGhlYWRlcnMgZXhpc3RcbiAgY29uZmlnLmhlYWRlcnMgPSBjb25maWcuaGVhZGVycyB8fCB7fTtcblxuICAvLyBUcmFuc2Zvcm0gcmVxdWVzdCBkYXRhXG4gIGNvbmZpZy5kYXRhID0gdHJhbnNmb3JtRGF0YShcbiAgICBjb25maWcuZGF0YSxcbiAgICBjb25maWcuaGVhZGVycyxcbiAgICBjb25maWcudHJhbnNmb3JtUmVxdWVzdFxuICApO1xuXG4gIC8vIEZsYXR0ZW4gaGVhZGVyc1xuICBjb25maWcuaGVhZGVycyA9IHV0aWxzLm1lcmdlKFxuICAgIGNvbmZpZy5oZWFkZXJzLmNvbW1vbiB8fCB7fSxcbiAgICBjb25maWcuaGVhZGVyc1tjb25maWcubWV0aG9kXSB8fCB7fSxcbiAgICBjb25maWcuaGVhZGVycyB8fCB7fVxuICApO1xuXG4gIHV0aWxzLmZvckVhY2goXG4gICAgWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnLCAncG9zdCcsICdwdXQnLCAncGF0Y2gnLCAnY29tbW9uJ10sXG4gICAgZnVuY3Rpb24gY2xlYW5IZWFkZXJDb25maWcobWV0aG9kKSB7XG4gICAgICBkZWxldGUgY29uZmlnLmhlYWRlcnNbbWV0aG9kXTtcbiAgICB9XG4gICk7XG5cbiAgdmFyIGFkYXB0ZXIgPSBjb25maWcuYWRhcHRlciB8fCBkZWZhdWx0cy5hZGFwdGVyO1xuXG4gIHJldHVybiBhZGFwdGVyKGNvbmZpZykudGhlbihmdW5jdGlvbiBvbkFkYXB0ZXJSZXNvbHV0aW9uKHJlc3BvbnNlKSB7XG4gICAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gICAgLy8gVHJhbnNmb3JtIHJlc3BvbnNlIGRhdGFcbiAgICByZXNwb25zZS5kYXRhID0gdHJhbnNmb3JtRGF0YShcbiAgICAgIHJlc3BvbnNlLmRhdGEsXG4gICAgICByZXNwb25zZS5oZWFkZXJzLFxuICAgICAgY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlXG4gICAgKTtcblxuICAgIHJldHVybiByZXNwb25zZTtcbiAgfSwgZnVuY3Rpb24gb25BZGFwdGVyUmVqZWN0aW9uKHJlYXNvbikge1xuICAgIGlmICghaXNDYW5jZWwocmVhc29uKSkge1xuICAgICAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gICAgICAvLyBUcmFuc2Zvcm0gcmVzcG9uc2UgZGF0YVxuICAgICAgaWYgKHJlYXNvbiAmJiByZWFzb24ucmVzcG9uc2UpIHtcbiAgICAgICAgcmVhc29uLnJlc3BvbnNlLmRhdGEgPSB0cmFuc2Zvcm1EYXRhKFxuICAgICAgICAgIHJlYXNvbi5yZXNwb25zZS5kYXRhLFxuICAgICAgICAgIHJlYXNvbi5yZXNwb25zZS5oZWFkZXJzLFxuICAgICAgICAgIGNvbmZpZy50cmFuc2Zvcm1SZXNwb25zZVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChyZWFzb24pO1xuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuLyoqXG4gKiBUcmFuc2Zvcm0gdGhlIGRhdGEgZm9yIGEgcmVxdWVzdCBvciBhIHJlc3BvbnNlXG4gKlxuICogQHBhcmFtIHtPYmplY3R8U3RyaW5nfSBkYXRhIFRoZSBkYXRhIHRvIGJlIHRyYW5zZm9ybWVkXG4gKiBAcGFyYW0ge0FycmF5fSBoZWFkZXJzIFRoZSBoZWFkZXJzIGZvciB0aGUgcmVxdWVzdCBvciByZXNwb25zZVxuICogQHBhcmFtIHtBcnJheXxGdW5jdGlvbn0gZm5zIEEgc2luZ2xlIGZ1bmN0aW9uIG9yIEFycmF5IG9mIGZ1bmN0aW9uc1xuICogQHJldHVybnMgeyp9IFRoZSByZXN1bHRpbmcgdHJhbnNmb3JtZWQgZGF0YVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHRyYW5zZm9ybURhdGEoZGF0YSwgaGVhZGVycywgZm5zKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICB1dGlscy5mb3JFYWNoKGZucywgZnVuY3Rpb24gdHJhbnNmb3JtKGZuKSB7XG4gICAgZGF0YSA9IGZuKGRhdGEsIGhlYWRlcnMpO1xuICB9KTtcblxuICByZXR1cm4gZGF0YTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbm9ybWFsaXplSGVhZGVyTmFtZShoZWFkZXJzLCBub3JtYWxpemVkTmFtZSkge1xuICB1dGlscy5mb3JFYWNoKGhlYWRlcnMsIGZ1bmN0aW9uIHByb2Nlc3NIZWFkZXIodmFsdWUsIG5hbWUpIHtcbiAgICBpZiAobmFtZSAhPT0gbm9ybWFsaXplZE5hbWUgJiYgbmFtZS50b1VwcGVyQ2FzZSgpID09PSBub3JtYWxpemVkTmFtZS50b1VwcGVyQ2FzZSgpKSB7XG4gICAgICBoZWFkZXJzW25vcm1hbGl6ZWROYW1lXSA9IHZhbHVlO1xuICAgICAgZGVsZXRlIGhlYWRlcnNbbmFtZV07XG4gICAgfVxuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBjcmVhdGVFcnJvciA9IHJlcXVpcmUoJy4vY3JlYXRlRXJyb3InKTtcblxuLyoqXG4gKiBSZXNvbHZlIG9yIHJlamVjdCBhIFByb21pc2UgYmFzZWQgb24gcmVzcG9uc2Ugc3RhdHVzLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlc29sdmUgQSBmdW5jdGlvbiB0aGF0IHJlc29sdmVzIHRoZSBwcm9taXNlLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVqZWN0IEEgZnVuY3Rpb24gdGhhdCByZWplY3RzIHRoZSBwcm9taXNlLlxuICogQHBhcmFtIHtvYmplY3R9IHJlc3BvbnNlIFRoZSByZXNwb25zZS5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCByZXNwb25zZSkge1xuICB2YXIgdmFsaWRhdGVTdGF0dXMgPSByZXNwb25zZS5jb25maWcudmFsaWRhdGVTdGF0dXM7XG4gIGlmICghdmFsaWRhdGVTdGF0dXMgfHwgdmFsaWRhdGVTdGF0dXMocmVzcG9uc2Uuc3RhdHVzKSkge1xuICAgIHJlc29sdmUocmVzcG9uc2UpO1xuICB9IGVsc2Uge1xuICAgIHJlamVjdChjcmVhdGVFcnJvcihcbiAgICAgICdSZXF1ZXN0IGZhaWxlZCB3aXRoIHN0YXR1cyBjb2RlICcgKyByZXNwb25zZS5zdGF0dXMsXG4gICAgICByZXNwb25zZS5jb25maWcsXG4gICAgICBudWxsLFxuICAgICAgcmVzcG9uc2UucmVxdWVzdCxcbiAgICAgIHJlc3BvbnNlXG4gICAgKSk7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogVXBkYXRlIGFuIEVycm9yIHdpdGggdGhlIHNwZWNpZmllZCBjb25maWcsIGVycm9yIGNvZGUsIGFuZCByZXNwb25zZS5cbiAqXG4gKiBAcGFyYW0ge0Vycm9yfSBlcnJvciBUaGUgZXJyb3IgdG8gdXBkYXRlLlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnLlxuICogQHBhcmFtIHtzdHJpbmd9IFtjb2RlXSBUaGUgZXJyb3IgY29kZSAoZm9yIGV4YW1wbGUsICdFQ09OTkFCT1JURUQnKS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVxdWVzdF0gVGhlIHJlcXVlc3QuXG4gKiBAcGFyYW0ge09iamVjdH0gW3Jlc3BvbnNlXSBUaGUgcmVzcG9uc2UuXG4gKiBAcmV0dXJucyB7RXJyb3J9IFRoZSBlcnJvci5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBlbmhhbmNlRXJyb3IoZXJyb3IsIGNvbmZpZywgY29kZSwgcmVxdWVzdCwgcmVzcG9uc2UpIHtcbiAgZXJyb3IuY29uZmlnID0gY29uZmlnO1xuICBpZiAoY29kZSkge1xuICAgIGVycm9yLmNvZGUgPSBjb2RlO1xuICB9XG5cbiAgZXJyb3IucmVxdWVzdCA9IHJlcXVlc3Q7XG4gIGVycm9yLnJlc3BvbnNlID0gcmVzcG9uc2U7XG4gIGVycm9yLmlzQXhpb3NFcnJvciA9IHRydWU7XG5cbiAgZXJyb3IudG9KU09OID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC8vIFN0YW5kYXJkXG4gICAgICBtZXNzYWdlOiB0aGlzLm1lc3NhZ2UsXG4gICAgICBuYW1lOiB0aGlzLm5hbWUsXG4gICAgICAvLyBNaWNyb3NvZnRcbiAgICAgIGRlc2NyaXB0aW9uOiB0aGlzLmRlc2NyaXB0aW9uLFxuICAgICAgbnVtYmVyOiB0aGlzLm51bWJlcixcbiAgICAgIC8vIE1vemlsbGFcbiAgICAgIGZpbGVOYW1lOiB0aGlzLmZpbGVOYW1lLFxuICAgICAgbGluZU51bWJlcjogdGhpcy5saW5lTnVtYmVyLFxuICAgICAgY29sdW1uTnVtYmVyOiB0aGlzLmNvbHVtbk51bWJlcixcbiAgICAgIHN0YWNrOiB0aGlzLnN0YWNrLFxuICAgICAgLy8gQXhpb3NcbiAgICAgIGNvbmZpZzogdGhpcy5jb25maWcsXG4gICAgICBjb2RlOiB0aGlzLmNvZGVcbiAgICB9O1xuICB9O1xuICByZXR1cm4gZXJyb3I7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbi8vIEhlYWRlcnMgd2hvc2UgZHVwbGljYXRlcyBhcmUgaWdub3JlZCBieSBub2RlXG4vLyBjLmYuIGh0dHBzOi8vbm9kZWpzLm9yZy9hcGkvaHR0cC5odG1sI2h0dHBfbWVzc2FnZV9oZWFkZXJzXG52YXIgaWdub3JlRHVwbGljYXRlT2YgPSBbXG4gICdhZ2UnLCAnYXV0aG9yaXphdGlvbicsICdjb250ZW50LWxlbmd0aCcsICdjb250ZW50LXR5cGUnLCAnZXRhZycsXG4gICdleHBpcmVzJywgJ2Zyb20nLCAnaG9zdCcsICdpZi1tb2RpZmllZC1zaW5jZScsICdpZi11bm1vZGlmaWVkLXNpbmNlJyxcbiAgJ2xhc3QtbW9kaWZpZWQnLCAnbG9jYXRpb24nLCAnbWF4LWZvcndhcmRzJywgJ3Byb3h5LWF1dGhvcml6YXRpb24nLFxuICAncmVmZXJlcicsICdyZXRyeS1hZnRlcicsICd1c2VyLWFnZW50J1xuXTtcblxuLyoqXG4gKiBQYXJzZSBoZWFkZXJzIGludG8gYW4gb2JqZWN0XG4gKlxuICogYGBgXG4gKiBEYXRlOiBXZWQsIDI3IEF1ZyAyMDE0IDA4OjU4OjQ5IEdNVFxuICogQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uXG4gKiBDb25uZWN0aW9uOiBrZWVwLWFsaXZlXG4gKiBUcmFuc2Zlci1FbmNvZGluZzogY2h1bmtlZFxuICogYGBgXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGhlYWRlcnMgSGVhZGVycyBuZWVkaW5nIHRvIGJlIHBhcnNlZFxuICogQHJldHVybnMge09iamVjdH0gSGVhZGVycyBwYXJzZWQgaW50byBhbiBvYmplY3RcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBwYXJzZUhlYWRlcnMoaGVhZGVycykge1xuICB2YXIgcGFyc2VkID0ge307XG4gIHZhciBrZXk7XG4gIHZhciB2YWw7XG4gIHZhciBpO1xuXG4gIGlmICghaGVhZGVycykgeyByZXR1cm4gcGFyc2VkOyB9XG5cbiAgdXRpbHMuZm9yRWFjaChoZWFkZXJzLnNwbGl0KCdcXG4nKSwgZnVuY3Rpb24gcGFyc2VyKGxpbmUpIHtcbiAgICBpID0gbGluZS5pbmRleE9mKCc6Jyk7XG4gICAga2V5ID0gdXRpbHMudHJpbShsaW5lLnN1YnN0cigwLCBpKSkudG9Mb3dlckNhc2UoKTtcbiAgICB2YWwgPSB1dGlscy50cmltKGxpbmUuc3Vic3RyKGkgKyAxKSk7XG5cbiAgICBpZiAoa2V5KSB7XG4gICAgICBpZiAocGFyc2VkW2tleV0gJiYgaWdub3JlRHVwbGljYXRlT2YuaW5kZXhPZihrZXkpID49IDApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKGtleSA9PT0gJ3NldC1jb29raWUnKSB7XG4gICAgICAgIHBhcnNlZFtrZXldID0gKHBhcnNlZFtrZXldID8gcGFyc2VkW2tleV0gOiBbXSkuY29uY2F0KFt2YWxdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcnNlZFtrZXldID0gcGFyc2VkW2tleV0gPyBwYXJzZWRba2V5XSArICcsICcgKyB2YWwgOiB2YWw7XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gcGFyc2VkO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IChcbiAgdXRpbHMuaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSA/XG5cbiAgLy8gU3RhbmRhcmQgYnJvd3NlciBlbnZzIGhhdmUgZnVsbCBzdXBwb3J0IG9mIHRoZSBBUElzIG5lZWRlZCB0byB0ZXN0XG4gIC8vIHdoZXRoZXIgdGhlIHJlcXVlc3QgVVJMIGlzIG9mIHRoZSBzYW1lIG9yaWdpbiBhcyBjdXJyZW50IGxvY2F0aW9uLlxuICAgIChmdW5jdGlvbiBzdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgICB2YXIgbXNpZSA9IC8obXNpZXx0cmlkZW50KS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG4gICAgICB2YXIgdXJsUGFyc2luZ05vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgICB2YXIgb3JpZ2luVVJMO1xuXG4gICAgICAvKipcbiAgICAqIFBhcnNlIGEgVVJMIHRvIGRpc2NvdmVyIGl0J3MgY29tcG9uZW50c1xuICAgICpcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSB1cmwgVGhlIFVSTCB0byBiZSBwYXJzZWRcbiAgICAqIEByZXR1cm5zIHtPYmplY3R9XG4gICAgKi9cbiAgICAgIGZ1bmN0aW9uIHJlc29sdmVVUkwodXJsKSB7XG4gICAgICAgIHZhciBocmVmID0gdXJsO1xuXG4gICAgICAgIGlmIChtc2llKSB7XG4gICAgICAgIC8vIElFIG5lZWRzIGF0dHJpYnV0ZSBzZXQgdHdpY2UgdG8gbm9ybWFsaXplIHByb3BlcnRpZXNcbiAgICAgICAgICB1cmxQYXJzaW5nTm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBocmVmKTtcbiAgICAgICAgICBocmVmID0gdXJsUGFyc2luZ05vZGUuaHJlZjtcbiAgICAgICAgfVxuXG4gICAgICAgIHVybFBhcnNpbmdOb2RlLnNldEF0dHJpYnV0ZSgnaHJlZicsIGhyZWYpO1xuXG4gICAgICAgIC8vIHVybFBhcnNpbmdOb2RlIHByb3ZpZGVzIHRoZSBVcmxVdGlscyBpbnRlcmZhY2UgLSBodHRwOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jdXJsdXRpbHNcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBocmVmOiB1cmxQYXJzaW5nTm9kZS5ocmVmLFxuICAgICAgICAgIHByb3RvY29sOiB1cmxQYXJzaW5nTm9kZS5wcm90b2NvbCA/IHVybFBhcnNpbmdOb2RlLnByb3RvY29sLnJlcGxhY2UoLzokLywgJycpIDogJycsXG4gICAgICAgICAgaG9zdDogdXJsUGFyc2luZ05vZGUuaG9zdCxcbiAgICAgICAgICBzZWFyY2g6IHVybFBhcnNpbmdOb2RlLnNlYXJjaCA/IHVybFBhcnNpbmdOb2RlLnNlYXJjaC5yZXBsYWNlKC9eXFw/LywgJycpIDogJycsXG4gICAgICAgICAgaGFzaDogdXJsUGFyc2luZ05vZGUuaGFzaCA/IHVybFBhcnNpbmdOb2RlLmhhc2gucmVwbGFjZSgvXiMvLCAnJykgOiAnJyxcbiAgICAgICAgICBob3N0bmFtZTogdXJsUGFyc2luZ05vZGUuaG9zdG5hbWUsXG4gICAgICAgICAgcG9ydDogdXJsUGFyc2luZ05vZGUucG9ydCxcbiAgICAgICAgICBwYXRobmFtZTogKHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nKSA/XG4gICAgICAgICAgICB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZSA6XG4gICAgICAgICAgICAnLycgKyB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBvcmlnaW5VUkwgPSByZXNvbHZlVVJMKHdpbmRvdy5sb2NhdGlvbi5ocmVmKTtcblxuICAgICAgLyoqXG4gICAgKiBEZXRlcm1pbmUgaWYgYSBVUkwgc2hhcmVzIHRoZSBzYW1lIG9yaWdpbiBhcyB0aGUgY3VycmVudCBsb2NhdGlvblxuICAgICpcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSByZXF1ZXN0VVJMIFRoZSBVUkwgdG8gdGVzdFxuICAgICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4sIG90aGVyd2lzZSBmYWxzZVxuICAgICovXG4gICAgICByZXR1cm4gZnVuY3Rpb24gaXNVUkxTYW1lT3JpZ2luKHJlcXVlc3RVUkwpIHtcbiAgICAgICAgdmFyIHBhcnNlZCA9ICh1dGlscy5pc1N0cmluZyhyZXF1ZXN0VVJMKSkgPyByZXNvbHZlVVJMKHJlcXVlc3RVUkwpIDogcmVxdWVzdFVSTDtcbiAgICAgICAgcmV0dXJuIChwYXJzZWQucHJvdG9jb2wgPT09IG9yaWdpblVSTC5wcm90b2NvbCAmJlxuICAgICAgICAgICAgcGFyc2VkLmhvc3QgPT09IG9yaWdpblVSTC5ob3N0KTtcbiAgICAgIH07XG4gICAgfSkoKSA6XG5cbiAgLy8gTm9uIHN0YW5kYXJkIGJyb3dzZXIgZW52cyAod2ViIHdvcmtlcnMsIHJlYWN0LW5hdGl2ZSkgbGFjayBuZWVkZWQgc3VwcG9ydC5cbiAgICAoZnVuY3Rpb24gbm9uU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIGlzVVJMU2FtZU9yaWdpbigpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9O1xuICAgIH0pKClcbik7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAoXG4gIHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkgP1xuXG4gIC8vIFN0YW5kYXJkIGJyb3dzZXIgZW52cyBzdXBwb3J0IGRvY3VtZW50LmNvb2tpZVxuICAgIChmdW5jdGlvbiBzdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB3cml0ZTogZnVuY3Rpb24gd3JpdGUobmFtZSwgdmFsdWUsIGV4cGlyZXMsIHBhdGgsIGRvbWFpbiwgc2VjdXJlKSB7XG4gICAgICAgICAgdmFyIGNvb2tpZSA9IFtdO1xuICAgICAgICAgIGNvb2tpZS5wdXNoKG5hbWUgKyAnPScgKyBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpKTtcblxuICAgICAgICAgIGlmICh1dGlscy5pc051bWJlcihleHBpcmVzKSkge1xuICAgICAgICAgICAgY29va2llLnB1c2goJ2V4cGlyZXM9JyArIG5ldyBEYXRlKGV4cGlyZXMpLnRvR01UU3RyaW5nKCkpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh1dGlscy5pc1N0cmluZyhwYXRoKSkge1xuICAgICAgICAgICAgY29va2llLnB1c2goJ3BhdGg9JyArIHBhdGgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh1dGlscy5pc1N0cmluZyhkb21haW4pKSB7XG4gICAgICAgICAgICBjb29raWUucHVzaCgnZG9tYWluPScgKyBkb21haW4pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChzZWN1cmUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIGNvb2tpZS5wdXNoKCdzZWN1cmUnKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBkb2N1bWVudC5jb29raWUgPSBjb29raWUuam9pbignOyAnKTtcbiAgICAgICAgfSxcblxuICAgICAgICByZWFkOiBmdW5jdGlvbiByZWFkKG5hbWUpIHtcbiAgICAgICAgICB2YXIgbWF0Y2ggPSBkb2N1bWVudC5jb29raWUubWF0Y2gobmV3IFJlZ0V4cCgnKF58O1xcXFxzKikoJyArIG5hbWUgKyAnKT0oW147XSopJykpO1xuICAgICAgICAgIHJldHVybiAobWF0Y2ggPyBkZWNvZGVVUklDb21wb25lbnQobWF0Y2hbM10pIDogbnVsbCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUobmFtZSkge1xuICAgICAgICAgIHRoaXMud3JpdGUobmFtZSwgJycsIERhdGUubm93KCkgLSA4NjQwMDAwMCk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSkoKSA6XG5cbiAgLy8gTm9uIHN0YW5kYXJkIGJyb3dzZXIgZW52ICh3ZWIgd29ya2VycywgcmVhY3QtbmF0aXZlKSBsYWNrIG5lZWRlZCBzdXBwb3J0LlxuICAgIChmdW5jdGlvbiBub25TdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB3cml0ZTogZnVuY3Rpb24gd3JpdGUoKSB7fSxcbiAgICAgICAgcmVhZDogZnVuY3Rpb24gcmVhZCgpIHsgcmV0dXJuIG51bGw7IH0sXG4gICAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge31cbiAgICAgIH07XG4gICAgfSkoKVxuKTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHNwZWNpZmllZCBVUkwgaXMgYWJzb2x1dGVcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBVUkwgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHNwZWNpZmllZCBVUkwgaXMgYWJzb2x1dGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQWJzb2x1dGVVUkwodXJsKSB7XG4gIC8vIEEgVVJMIGlzIGNvbnNpZGVyZWQgYWJzb2x1dGUgaWYgaXQgYmVnaW5zIHdpdGggXCI8c2NoZW1lPjovL1wiIG9yIFwiLy9cIiAocHJvdG9jb2wtcmVsYXRpdmUgVVJMKS5cbiAgLy8gUkZDIDM5ODYgZGVmaW5lcyBzY2hlbWUgbmFtZSBhcyBhIHNlcXVlbmNlIG9mIGNoYXJhY3RlcnMgYmVnaW5uaW5nIHdpdGggYSBsZXR0ZXIgYW5kIGZvbGxvd2VkXG4gIC8vIGJ5IGFueSBjb21iaW5hdGlvbiBvZiBsZXR0ZXJzLCBkaWdpdHMsIHBsdXMsIHBlcmlvZCwgb3IgaHlwaGVuLlxuICByZXR1cm4gL14oW2Etel1bYS16XFxkXFwrXFwtXFwuXSo6KT9cXC9cXC8vaS50ZXN0KHVybCk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgVVJMIGJ5IGNvbWJpbmluZyB0aGUgc3BlY2lmaWVkIFVSTHNcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVVSTCBUaGUgYmFzZSBVUkxcbiAqIEBwYXJhbSB7c3RyaW5nfSByZWxhdGl2ZVVSTCBUaGUgcmVsYXRpdmUgVVJMXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgY29tYmluZWQgVVJMXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY29tYmluZVVSTHMoYmFzZVVSTCwgcmVsYXRpdmVVUkwpIHtcbiAgcmV0dXJuIHJlbGF0aXZlVVJMXG4gICAgPyBiYXNlVVJMLnJlcGxhY2UoL1xcLyskLywgJycpICsgJy8nICsgcmVsYXRpdmVVUkwucmVwbGFjZSgvXlxcLysvLCAnJylcbiAgICA6IGJhc2VVUkw7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQ2FuY2VsID0gcmVxdWlyZSgnLi9DYW5jZWwnKTtcblxuLyoqXG4gKiBBIGBDYW5jZWxUb2tlbmAgaXMgYW4gb2JqZWN0IHRoYXQgY2FuIGJlIHVzZWQgdG8gcmVxdWVzdCBjYW5jZWxsYXRpb24gb2YgYW4gb3BlcmF0aW9uLlxuICpcbiAqIEBjbGFzc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gZXhlY3V0b3IgVGhlIGV4ZWN1dG9yIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBDYW5jZWxUb2tlbihleGVjdXRvcikge1xuICBpZiAodHlwZW9mIGV4ZWN1dG9yICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZXhlY3V0b3IgbXVzdCBiZSBhIGZ1bmN0aW9uLicpO1xuICB9XG5cbiAgdmFyIHJlc29sdmVQcm9taXNlO1xuICB0aGlzLnByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiBwcm9taXNlRXhlY3V0b3IocmVzb2x2ZSkge1xuICAgIHJlc29sdmVQcm9taXNlID0gcmVzb2x2ZTtcbiAgfSk7XG5cbiAgdmFyIHRva2VuID0gdGhpcztcbiAgZXhlY3V0b3IoZnVuY3Rpb24gY2FuY2VsKG1lc3NhZ2UpIHtcbiAgICBpZiAodG9rZW4ucmVhc29uKSB7XG4gICAgICAvLyBDYW5jZWxsYXRpb24gaGFzIGFscmVhZHkgYmVlbiByZXF1ZXN0ZWRcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0b2tlbi5yZWFzb24gPSBuZXcgQ2FuY2VsKG1lc3NhZ2UpO1xuICAgIHJlc29sdmVQcm9taXNlKHRva2VuLnJlYXNvbik7XG4gIH0pO1xufVxuXG4vKipcbiAqIFRocm93cyBhIGBDYW5jZWxgIGlmIGNhbmNlbGxhdGlvbiBoYXMgYmVlbiByZXF1ZXN0ZWQuXG4gKi9cbkNhbmNlbFRva2VuLnByb3RvdHlwZS50aHJvd0lmUmVxdWVzdGVkID0gZnVuY3Rpb24gdGhyb3dJZlJlcXVlc3RlZCgpIHtcbiAgaWYgKHRoaXMucmVhc29uKSB7XG4gICAgdGhyb3cgdGhpcy5yZWFzb247XG4gIH1cbn07XG5cbi8qKlxuICogUmV0dXJucyBhbiBvYmplY3QgdGhhdCBjb250YWlucyBhIG5ldyBgQ2FuY2VsVG9rZW5gIGFuZCBhIGZ1bmN0aW9uIHRoYXQsIHdoZW4gY2FsbGVkLFxuICogY2FuY2VscyB0aGUgYENhbmNlbFRva2VuYC5cbiAqL1xuQ2FuY2VsVG9rZW4uc291cmNlID0gZnVuY3Rpb24gc291cmNlKCkge1xuICB2YXIgY2FuY2VsO1xuICB2YXIgdG9rZW4gPSBuZXcgQ2FuY2VsVG9rZW4oZnVuY3Rpb24gZXhlY3V0b3IoYykge1xuICAgIGNhbmNlbCA9IGM7XG4gIH0pO1xuICByZXR1cm4ge1xuICAgIHRva2VuOiB0b2tlbixcbiAgICBjYW5jZWw6IGNhbmNlbFxuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBDYW5jZWxUb2tlbjtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBTeW50YWN0aWMgc3VnYXIgZm9yIGludm9raW5nIGEgZnVuY3Rpb24gYW5kIGV4cGFuZGluZyBhbiBhcnJheSBmb3IgYXJndW1lbnRzLlxuICpcbiAqIENvbW1vbiB1c2UgY2FzZSB3b3VsZCBiZSB0byB1c2UgYEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseWAuXG4gKlxuICogIGBgYGpzXG4gKiAgZnVuY3Rpb24gZih4LCB5LCB6KSB7fVxuICogIHZhciBhcmdzID0gWzEsIDIsIDNdO1xuICogIGYuYXBwbHkobnVsbCwgYXJncyk7XG4gKiAgYGBgXG4gKlxuICogV2l0aCBgc3ByZWFkYCB0aGlzIGV4YW1wbGUgY2FuIGJlIHJlLXdyaXR0ZW4uXG4gKlxuICogIGBgYGpzXG4gKiAgc3ByZWFkKGZ1bmN0aW9uKHgsIHksIHopIHt9KShbMSwgMiwgM10pO1xuICogIGBgYFxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc3ByZWFkKGNhbGxiYWNrKSB7XG4gIHJldHVybiBmdW5jdGlvbiB3cmFwKGFycikge1xuICAgIHJldHVybiBjYWxsYmFjay5hcHBseShudWxsLCBhcnIpO1xuICB9O1xufTtcbiIsImV4cG9ydCBjb25zdCBjaGFuZ2VQYWdlPXBhZ2U9PntcclxuICAgIGRvY3VtZW50LmxvY2F0aW9uLmhyZWY9YCR7cGFnZX0uaHRtbGA7XHJcbn1cclxuXHJcbndpbmRvdy5vbmxvYWQgPSAoKSA9PntcclxuICAgIGNvbnN0IHBhdGggPSB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWU7XHJcbiAgICBpZihwYXRoICE9PSBcIi9pbmRleC5odG1sXCIgJiYgcGF0aCAhPT1cIi9cIilcclxuICAgIHtcclxuICAgICAgICBjb25zdCByZXRyaWV2ZURhdGEgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndXNlckRhdGEnKTtcclxuICAgICAgICByZXRyaWV2ZURhdGEgPT0gdW5kZWZpbmVkID8gY2hhbmdlUGFnZShcImluZGV4XCIpIDogbnVsbDtcclxuICAgIH1cclxufSIsImltcG9ydCB7IGNoYW5nZVBhZ2UgfSBmcm9tICcuL2NoYW5nZVBhZ2UuanMnO1xyXG5mdW5jdGlvbiBsb2dvdXQgKCl7XHJcbiAgICBjb25zdCBsb2dvdXQgPSAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJMb2dvdXRCdXR0b25cIik7XHJcbiAgICBpZiAobG9nb3V0KVxyXG4gICAge1xyXG4gICAgICAgIGxvZ291dC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChlKSA9PntcclxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShcInVzZXJEYXRhXCIpO1xyXG4gICAgICAgICAgICBjaGFuZ2VQYWdlKFwiaW5kZXhcIik7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxubG9nb3V0KCk7IiwiaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJztcclxuXHJcbmNvbnN0IHVybCA9IFwiaHR0cHM6Ly9jb3JzLWFueXdoZXJlLmhlcm9rdWFwcC5jb20vXCI7XHJcblxyXG5leHBvcnQgY29uc3QgaW5zdGFuY2UgPSBheGlvcy5jcmVhdGUoe1xyXG4gICAgYmFzZVVSTDogdXJsKydodHRwczovL2FwaS10ZXJtaW5hcnouaGVyb2t1YXBwLmNvbS9hcGknLFxyXG4gICAgdGltZW91dDogMTUwMFxyXG59KSIsImltcG9ydCB7IGluc3RhbmNlIH0gZnJvbSBcIi4vYXhpb3NJbnN0YXRuY2VcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBWYWxpZGF0ZVVzZXIobG9naW4sIHBhc3N3b3JkLCBwYXRoKXtcclxuICAgIHRyeXtcclxuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBpbnN0YW5jZS5wb3N0KHBhdGgse1xyXG4gICAgICAgICAgICBsb2dpbixcclxuICAgICAgICAgICAgcGFzc3dvcmRcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBkYXRhOiByZXN1bHQuZGF0YSwgXHJcbiAgICAgICAgICAgIHN0YXR1czogcmVzdWx0LnN0YXR1c1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZXJyKXtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBHZXRDdXJyZW50VXNlcih0b2tlbil7XHJcbiAgICB0cnl7XHJcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgaW5zdGFuY2UuZ2V0KCcuL3VzZXJzL21lJyx7XHJcbiAgICAgICAgICAgIGhlYWRlcnM6e1xyXG4gICAgICAgICAgICAgICAgXCJ4LWF1dGgtdG9rZW5cIjogdG9rZW5cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZXJyKXtcclxuICAgICAgICByZXR1cm4gZXJyO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgY2hhbmdlUGFnZSB9IGZyb20gJy4vY2hhbmdlUGFnZS5qcyc7XHJcbmltcG9ydCBqd3QgZnJvbSAnanNvbndlYnRva2VuJztcclxuaW1wb3J0IHtWYWxpZGF0ZVVzZXJ9IGZyb20gJy4uL0FQSUNvbW11bmljYXRpb24vVXNlcnMnO1xyXG5cclxuZXhwb3J0IGNvbnN0IGxvZyA9ICh2YWwpID0+IGNvbnNvbGUubG9nKHZhbCk7XHJcblxyXG4vLyBleHBvcnQgbGV0IHRva2VuO1xyXG4vLyBleHBvcnQgbGV0IHVzZXJJZDtcclxuXHJcblxyXG4vL0xvZ293YW5pZVxyXG5cclxuZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJsb2dCdXR0b25cIikuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBhc3luYyAoZSkgPT57XHJcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICBjb25zdCBsb2dpbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibG9nTG9naW5cIikudmFsdWU7XHJcbiAgICBjb25zdCBwYXNzd29yZCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibG9nUGFzc3dvcmRcIikudmFsdWU7XHJcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBWYWxpZGF0ZVVzZXIobG9naW4sIHBhc3N3b3JkLCAnLi9hdXRoJyk7XHJcbiAgICBpZihyZXN1bHQgPT09IGZhbHNlKSAvLyBCxYLEmWRueSBsb2dpbiBsdWIgaGFzxYJvLCBhIHJhY3plaiBwbyBwcm9zdHUgesWCYXBhbnkgY2F0Y2ggXHJcbiAgICB7XHJcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJsb2dGYWlsdXJlXCIpLmlubmVySFRNTCA9IFwiTmllcHJhd2lkxYJvd3kgbG9naW4gbHViIGhhc8WCb1wiO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgICAvLyBPcGlzIGLFgsSZZHVcclxuICAgIH1cclxuICAgIGlmKHJlc3VsdC5zdGF0dXMgPT09IDIwMClcclxuICAgIHtcclxuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImxvZ0ZhaWx1cmVcIikuaW5uZXJIVE1MID0gXCJcIjtcclxuICAgICAgICBcclxuICAgICAgICAvLyB0b2tlbiA9IHJlc3VsdC5kYXRhO1xyXG4gICAgICAgIC8vIHVzZXJJZCA9IGp3dC5kZWNvZGUocmVzdWx0LmRhdGEpLl9pZDtcclxuICAgICAgICBjb25zdCBkYXRhID0ge1xyXG4gICAgICAgICAgICB0b2tlbjogcmVzdWx0LmRhdGEsIFxyXG4gICAgICAgICAgICB1c2VySWQ6IGp3dC5kZWNvZGUocmVzdWx0LmRhdGEpLl9pZFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCd1c2VyRGF0YScsIEpTT04uc3RyaW5naWZ5KGRhdGEpKTtcclxuXHJcbiAgICAgICAgLy9wcnplbmllxZsgZG8gc3Ryb255IHogd3lkYXJ6ZW5pYW1pIFxyXG4gICAgICAgIC8vbmllIGR6aWHFgmEgcMOza2kgbmllIG1hbXkgd2VicGFja2EgeiBicmFuY2hhIGZ1bmtjam9uYWxub3NjaVxyXG4gICAgICAgIGNoYW5nZVBhZ2UoXCJuZXdcIik7XHJcbiAgICB9XHJcbn0pXHJcblxyXG4vL1JlamVzdHJhY2phXHJcblxyXG5kb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInJlZ0J1dHRvblwiKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGFzeW5jIChlKT0+e1xyXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgY29uc3QgbG9naW4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInJlZ0xvZ2luXCIpLnZhbHVlO1xyXG4gICAgY29uc3QgcGFzc3dvcmQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInJlZ1Bhc3N3b3JkXCIpLnZhbHVlO1xyXG4gICAgY29uc3QgY29uZmlybVBhc3N3b3JkID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJyZWdDb25maXJtUGFzc3dvcmRcIikudmFsdWU7XHJcbiAgICBsZXQgcmVnRmFpbHVyZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicmVnRmFpbHVyZVwiKTtcclxuICAgIGlmKHBhc3N3b3JkICE9PSBjb25maXJtUGFzc3dvcmQpXHJcbiAgICB7XHJcbiAgICAgICAgLy9XcGlzYW5lIGhhc8WCYSByw7PFvG5pxIUgc2nEmSBcclxuICAgICAgICByZWdGYWlsdXJlLmlubmVySFRNTCA9IFwiV3Bpc2FuZSBoYXPFgmEgcsOzxbxuacSFIHNpxJkgXCI7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgY29uc3QgcmVzdWx0ICA9IGF3YWl0IFZhbGlkYXRlVXNlcihsb2dpbiwgcGFzc3dvcmQsICcuL3VzZXJzJyk7XHJcbiAgICBpZihyZXN1bHQgPT09IGZhbHNlKVxyXG4gICAge1xyXG4gICAgICAgIHJlZ0ZhaWx1cmUuaW5uZXJIVE1MID0gXCJVxbx5dGtvd25payB6b3N0YcWCIGp1xbwgemFyZWplc3Rvd2FueVwiO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGVsc2UgaWYocmVzdWx0LnN0YXR1cyA9PSAyMDApXHJcbiAgICB7XHJcbiAgICAgICAgcmVnRmFpbHVyZS5pbm5lckhUTUwgPSBcIlwiO1xyXG4gICAgICAgIHVzZXJJZCA9IHJlc3VsdC5kYXRhLl9pZDtcclxuICAgICAgICAvL1phcmVqZXN0cm9hbm8gcG9wcmF3bmllXHJcbiAgICAgICAgY2hhbmdlUGFnZShcIm5ld1wiKTtcclxuICAgIH1cclxuICAgIGxvZyhyZXN1bHQpO1xyXG5cclxufSk7XHJcblxyXG4iXSwic291cmNlUm9vdCI6IiJ9