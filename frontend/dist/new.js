!function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=49)}([function(t,e){var n,r,i=t.exports={};function o(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function s(t){if(n===setTimeout)return setTimeout(t,0);if((n===o||!n)&&setTimeout)return n=setTimeout,setTimeout(t,0);try{return n(t,0)}catch(e){try{return n.call(null,t,0)}catch(e){return n.call(this,t,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:o}catch(t){n=o}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(t){r=a}}();var u,f=[],l=!1,h=-1;function c(){l&&u&&(l=!1,u.length?f=u.concat(f):h=-1,f.length&&d())}function d(){if(!l){var t=s(c);l=!0;for(var e=f.length;e;){for(u=f,f=[];++h<e;)u&&u[h].run();h=-1,e=f.length}u=null,l=!1,function(t){if(r===clearTimeout)return clearTimeout(t);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(t);try{r(t)}catch(e){try{return r.call(null,t)}catch(e){return r.call(this,t)}}}(t)}}function p(t,e){this.fun=t,this.array=e}function _(){}i.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];f.push(new p(t,e)),1!==f.length||l||s(d)},p.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=_,i.addListener=_,i.once=_,i.off=_,i.removeListener=_,i.removeAllListeners=_,i.emit=_,i.prependListener=_,i.prependOnceListener=_,i.listeners=function(t){return[]},i.binding=function(t){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(t){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},function(t,e){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e){"function"==typeof Object.create?t.exports=function(t,e){t.super_=e,t.prototype=Object.create(e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}})}:t.exports=function(t,e){t.super_=e;var n=function(){};n.prototype=e.prototype,t.prototype=new n,t.prototype.constructor=t}},function(t,e,n){"use strict";var r=n(6),i=Object.keys||function(t){var e=[];for(var n in t)e.push(n);return e};t.exports=h;var o=n(5);o.inherits=n(2);var a=n(13),s=n(11);o.inherits(h,a);for(var u=i(s.prototype),f=0;f<u.length;f++){var l=u[f];h.prototype[l]||(h.prototype[l]=s.prototype[l])}function h(t){if(!(this instanceof h))return new h(t);a.call(this,t),s.call(this,t),t&&!1===t.readable&&(this.readable=!1),t&&!1===t.writable&&(this.writable=!1),this.allowHalfOpen=!0,t&&!1===t.allowHalfOpen&&(this.allowHalfOpen=!1),this.once("end",c)}function c(){this.allowHalfOpen||this._writableState.ended||r.nextTick(d,this)}function d(t){t.end()}Object.defineProperty(h.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),Object.defineProperty(h.prototype,"destroyed",{get:function(){return void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed&&this._writableState.destroyed)},set:function(t){void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed=t,this._writableState.destroyed=t)}}),h.prototype._destroy=function(t,e){this.push(null),this.end(),r.nextTick(e,t)}},function(t,e,n){"use strict";(function(t){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
var r=n(23),i=n(24),o=n(12);function a(){return u.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function s(t,e){if(a()<e)throw new RangeError("Invalid typed array length");return u.TYPED_ARRAY_SUPPORT?(t=new Uint8Array(e)).__proto__=u.prototype:(null===t&&(t=new u(e)),t.length=e),t}function u(t,e,n){if(!(u.TYPED_ARRAY_SUPPORT||this instanceof u))return new u(t,e,n);if("number"==typeof t){if("string"==typeof e)throw new Error("If encoding is specified then the first argument must be a string");return h(this,t)}return f(this,t,e,n)}function f(t,e,n,r){if("number"==typeof e)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&e instanceof ArrayBuffer?function(t,e,n,r){if(e.byteLength,n<0||e.byteLength<n)throw new RangeError("'offset' is out of bounds");if(e.byteLength<n+(r||0))throw new RangeError("'length' is out of bounds");e=void 0===n&&void 0===r?new Uint8Array(e):void 0===r?new Uint8Array(e,n):new Uint8Array(e,n,r);u.TYPED_ARRAY_SUPPORT?(t=e).__proto__=u.prototype:t=c(t,e);return t}(t,e,n,r):"string"==typeof e?function(t,e,n){"string"==typeof n&&""!==n||(n="utf8");if(!u.isEncoding(n))throw new TypeError('"encoding" must be a valid string encoding');var r=0|p(e,n),i=(t=s(t,r)).write(e,n);i!==r&&(t=t.slice(0,i));return t}(t,e,n):function(t,e){if(u.isBuffer(e)){var n=0|d(e.length);return 0===(t=s(t,n)).length?t:(e.copy(t,0,0,n),t)}if(e){if("undefined"!=typeof ArrayBuffer&&e.buffer instanceof ArrayBuffer||"length"in e)return"number"!=typeof e.length||(r=e.length)!=r?s(t,0):c(t,e);if("Buffer"===e.type&&o(e.data))return c(t,e.data)}var r;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(t,e)}function l(t){if("number"!=typeof t)throw new TypeError('"size" argument must be a number');if(t<0)throw new RangeError('"size" argument must not be negative')}function h(t,e){if(l(e),t=s(t,e<0?0:0|d(e)),!u.TYPED_ARRAY_SUPPORT)for(var n=0;n<e;++n)t[n]=0;return t}function c(t,e){var n=e.length<0?0:0|d(e.length);t=s(t,n);for(var r=0;r<n;r+=1)t[r]=255&e[r];return t}function d(t){if(t>=a())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+a().toString(16)+" bytes");return 0|t}function p(t,e){if(u.isBuffer(t))return t.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(t)||t instanceof ArrayBuffer))return t.byteLength;"string"!=typeof t&&(t=""+t);var n=t.length;if(0===n)return 0;for(var r=!1;;)switch(e){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":case void 0:return Z(t).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return C(t).length;default:if(r)return Z(t).length;e=(""+e).toLowerCase(),r=!0}}function _(t,e,n){var r=!1;if((void 0===e||e<0)&&(e=0),e>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if((n>>>=0)<=(e>>>=0))return"";for(t||(t="utf8");;)switch(t){case"hex":return O(this,e,n);case"utf8":case"utf-8":return T(this,e,n);case"ascii":return A(this,e,n);case"latin1":case"binary":return L(this,e,n);case"base64":return x(this,e,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return I(this,e,n);default:if(r)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),r=!0}}function g(t,e,n){var r=t[e];t[e]=t[n],t[n]=r}function b(t,e,n,r,i){if(0===t.length)return-1;if("string"==typeof n?(r=n,n=0):n>2147483647?n=2147483647:n<-2147483648&&(n=-2147483648),n=+n,isNaN(n)&&(n=i?0:t.length-1),n<0&&(n=t.length+n),n>=t.length){if(i)return-1;n=t.length-1}else if(n<0){if(!i)return-1;n=0}if("string"==typeof e&&(e=u.from(e,r)),u.isBuffer(e))return 0===e.length?-1:w(t,e,n,r,i);if("number"==typeof e)return e&=255,u.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?i?Uint8Array.prototype.indexOf.call(t,e,n):Uint8Array.prototype.lastIndexOf.call(t,e,n):w(t,[e],n,r,i);throw new TypeError("val must be string, number or Buffer")}function w(t,e,n,r,i){var o,a=1,s=t.length,u=e.length;if(void 0!==r&&("ucs2"===(r=String(r).toLowerCase())||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(t.length<2||e.length<2)return-1;a=2,s/=2,u/=2,n/=2}function f(t,e){return 1===a?t[e]:t.readUInt16BE(e*a)}if(i){var l=-1;for(o=n;o<s;o++)if(f(t,o)===f(e,-1===l?0:o-l)){if(-1===l&&(l=o),o-l+1===u)return l*a}else-1!==l&&(o-=o-l),l=-1}else for(n+u>s&&(n=s-u),o=n;o>=0;o--){for(var h=!0,c=0;c<u;c++)if(f(t,o+c)!==f(e,c)){h=!1;break}if(h)return o}return-1}function y(t,e,n,r){n=Number(n)||0;var i=t.length-n;r?(r=Number(r))>i&&(r=i):r=i;var o=e.length;if(o%2!=0)throw new TypeError("Invalid hex string");r>o/2&&(r=o/2);for(var a=0;a<r;++a){var s=parseInt(e.substr(2*a,2),16);if(isNaN(s))return a;t[n+a]=s}return a}function m(t,e,n,r){return q(Z(e,t.length-n),t,n,r)}function v(t,e,n,r){return q(function(t){for(var e=[],n=0;n<t.length;++n)e.push(255&t.charCodeAt(n));return e}(e),t,n,r)}function E(t,e,n,r){return v(t,e,n,r)}function k(t,e,n,r){return q(C(e),t,n,r)}function S(t,e,n,r){return q(function(t,e){for(var n,r,i,o=[],a=0;a<t.length&&!((e-=2)<0);++a)n=t.charCodeAt(a),r=n>>8,i=n%256,o.push(i),o.push(r);return o}(e,t.length-n),t,n,r)}function x(t,e,n){return 0===e&&n===t.length?r.fromByteArray(t):r.fromByteArray(t.slice(e,n))}function T(t,e,n){n=Math.min(t.length,n);for(var r=[],i=e;i<n;){var o,a,s,u,f=t[i],l=null,h=f>239?4:f>223?3:f>191?2:1;if(i+h<=n)switch(h){case 1:f<128&&(l=f);break;case 2:128==(192&(o=t[i+1]))&&(u=(31&f)<<6|63&o)>127&&(l=u);break;case 3:o=t[i+1],a=t[i+2],128==(192&o)&&128==(192&a)&&(u=(15&f)<<12|(63&o)<<6|63&a)>2047&&(u<55296||u>57343)&&(l=u);break;case 4:o=t[i+1],a=t[i+2],s=t[i+3],128==(192&o)&&128==(192&a)&&128==(192&s)&&(u=(15&f)<<18|(63&o)<<12|(63&a)<<6|63&s)>65535&&u<1114112&&(l=u)}null===l?(l=65533,h=1):l>65535&&(l-=65536,r.push(l>>>10&1023|55296),l=56320|1023&l),r.push(l),i+=h}return function(t){var e=t.length;if(e<=R)return String.fromCharCode.apply(String,t);var n="",r=0;for(;r<e;)n+=String.fromCharCode.apply(String,t.slice(r,r+=R));return n}(r)}e.Buffer=u,e.SlowBuffer=function(t){+t!=t&&(t=0);return u.alloc(+t)},e.INSPECT_MAX_BYTES=50,u.TYPED_ARRAY_SUPPORT=void 0!==t.TYPED_ARRAY_SUPPORT?t.TYPED_ARRAY_SUPPORT:function(){try{var t=new Uint8Array(1);return t.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===t.foo()&&"function"==typeof t.subarray&&0===t.subarray(1,1).byteLength}catch(t){return!1}}(),e.kMaxLength=a(),u.poolSize=8192,u._augment=function(t){return t.__proto__=u.prototype,t},u.from=function(t,e,n){return f(null,t,e,n)},u.TYPED_ARRAY_SUPPORT&&(u.prototype.__proto__=Uint8Array.prototype,u.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&u[Symbol.species]===u&&Object.defineProperty(u,Symbol.species,{value:null,configurable:!0})),u.alloc=function(t,e,n){return function(t,e,n,r){return l(e),e<=0?s(t,e):void 0!==n?"string"==typeof r?s(t,e).fill(n,r):s(t,e).fill(n):s(t,e)}(null,t,e,n)},u.allocUnsafe=function(t){return h(null,t)},u.allocUnsafeSlow=function(t){return h(null,t)},u.isBuffer=function(t){return!(null==t||!t._isBuffer)},u.compare=function(t,e){if(!u.isBuffer(t)||!u.isBuffer(e))throw new TypeError("Arguments must be Buffers");if(t===e)return 0;for(var n=t.length,r=e.length,i=0,o=Math.min(n,r);i<o;++i)if(t[i]!==e[i]){n=t[i],r=e[i];break}return n<r?-1:r<n?1:0},u.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},u.concat=function(t,e){if(!o(t))throw new TypeError('"list" argument must be an Array of Buffers');if(0===t.length)return u.alloc(0);var n;if(void 0===e)for(e=0,n=0;n<t.length;++n)e+=t[n].length;var r=u.allocUnsafe(e),i=0;for(n=0;n<t.length;++n){var a=t[n];if(!u.isBuffer(a))throw new TypeError('"list" argument must be an Array of Buffers');a.copy(r,i),i+=a.length}return r},u.byteLength=p,u.prototype._isBuffer=!0,u.prototype.swap16=function(){var t=this.length;if(t%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var e=0;e<t;e+=2)g(this,e,e+1);return this},u.prototype.swap32=function(){var t=this.length;if(t%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var e=0;e<t;e+=4)g(this,e,e+3),g(this,e+1,e+2);return this},u.prototype.swap64=function(){var t=this.length;if(t%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var e=0;e<t;e+=8)g(this,e,e+7),g(this,e+1,e+6),g(this,e+2,e+5),g(this,e+3,e+4);return this},u.prototype.toString=function(){var t=0|this.length;return 0===t?"":0===arguments.length?T(this,0,t):_.apply(this,arguments)},u.prototype.equals=function(t){if(!u.isBuffer(t))throw new TypeError("Argument must be a Buffer");return this===t||0===u.compare(this,t)},u.prototype.inspect=function(){var t="",n=e.INSPECT_MAX_BYTES;return this.length>0&&(t=this.toString("hex",0,n).match(/.{2}/g).join(" "),this.length>n&&(t+=" ... ")),"<Buffer "+t+">"},u.prototype.compare=function(t,e,n,r,i){if(!u.isBuffer(t))throw new TypeError("Argument must be a Buffer");if(void 0===e&&(e=0),void 0===n&&(n=t?t.length:0),void 0===r&&(r=0),void 0===i&&(i=this.length),e<0||n>t.length||r<0||i>this.length)throw new RangeError("out of range index");if(r>=i&&e>=n)return 0;if(r>=i)return-1;if(e>=n)return 1;if(this===t)return 0;for(var o=(i>>>=0)-(r>>>=0),a=(n>>>=0)-(e>>>=0),s=Math.min(o,a),f=this.slice(r,i),l=t.slice(e,n),h=0;h<s;++h)if(f[h]!==l[h]){o=f[h],a=l[h];break}return o<a?-1:a<o?1:0},u.prototype.includes=function(t,e,n){return-1!==this.indexOf(t,e,n)},u.prototype.indexOf=function(t,e,n){return b(this,t,e,n,!0)},u.prototype.lastIndexOf=function(t,e,n){return b(this,t,e,n,!1)},u.prototype.write=function(t,e,n,r){if(void 0===e)r="utf8",n=this.length,e=0;else if(void 0===n&&"string"==typeof e)r=e,n=this.length,e=0;else{if(!isFinite(e))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");e|=0,isFinite(n)?(n|=0,void 0===r&&(r="utf8")):(r=n,n=void 0)}var i=this.length-e;if((void 0===n||n>i)&&(n=i),t.length>0&&(n<0||e<0)||e>this.length)throw new RangeError("Attempt to write outside buffer bounds");r||(r="utf8");for(var o=!1;;)switch(r){case"hex":return y(this,t,e,n);case"utf8":case"utf-8":return m(this,t,e,n);case"ascii":return v(this,t,e,n);case"latin1":case"binary":return E(this,t,e,n);case"base64":return k(this,t,e,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return S(this,t,e,n);default:if(o)throw new TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),o=!0}},u.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var R=4096;function A(t,e,n){var r="";n=Math.min(t.length,n);for(var i=e;i<n;++i)r+=String.fromCharCode(127&t[i]);return r}function L(t,e,n){var r="";n=Math.min(t.length,n);for(var i=e;i<n;++i)r+=String.fromCharCode(t[i]);return r}function O(t,e,n){var r=t.length;(!e||e<0)&&(e=0),(!n||n<0||n>r)&&(n=r);for(var i="",o=e;o<n;++o)i+=j(t[o]);return i}function I(t,e,n){for(var r=t.slice(e,n),i="",o=0;o<r.length;o+=2)i+=String.fromCharCode(r[o]+256*r[o+1]);return i}function N(t,e,n){if(t%1!=0||t<0)throw new RangeError("offset is not uint");if(t+e>n)throw new RangeError("Trying to access beyond buffer length")}function z(t,e,n,r,i,o){if(!u.isBuffer(t))throw new TypeError('"buffer" argument must be a Buffer instance');if(e>i||e<o)throw new RangeError('"value" argument is out of bounds');if(n+r>t.length)throw new RangeError("Index out of range")}function B(t,e,n,r){e<0&&(e=65535+e+1);for(var i=0,o=Math.min(t.length-n,2);i<o;++i)t[n+i]=(e&255<<8*(r?i:1-i))>>>8*(r?i:1-i)}function M(t,e,n,r){e<0&&(e=4294967295+e+1);for(var i=0,o=Math.min(t.length-n,4);i<o;++i)t[n+i]=e>>>8*(r?i:3-i)&255}function P(t,e,n,r,i,o){if(n+r>t.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function U(t,e,n,r,o){return o||P(t,0,n,4),i.write(t,e,n,r,23,4),n+4}function D(t,e,n,r,o){return o||P(t,0,n,8),i.write(t,e,n,r,52,8),n+8}u.prototype.slice=function(t,e){var n,r=this.length;if((t=~~t)<0?(t+=r)<0&&(t=0):t>r&&(t=r),(e=void 0===e?r:~~e)<0?(e+=r)<0&&(e=0):e>r&&(e=r),e<t&&(e=t),u.TYPED_ARRAY_SUPPORT)(n=this.subarray(t,e)).__proto__=u.prototype;else{var i=e-t;n=new u(i,void 0);for(var o=0;o<i;++o)n[o]=this[o+t]}return n},u.prototype.readUIntLE=function(t,e,n){t|=0,e|=0,n||N(t,e,this.length);for(var r=this[t],i=1,o=0;++o<e&&(i*=256);)r+=this[t+o]*i;return r},u.prototype.readUIntBE=function(t,e,n){t|=0,e|=0,n||N(t,e,this.length);for(var r=this[t+--e],i=1;e>0&&(i*=256);)r+=this[t+--e]*i;return r},u.prototype.readUInt8=function(t,e){return e||N(t,1,this.length),this[t]},u.prototype.readUInt16LE=function(t,e){return e||N(t,2,this.length),this[t]|this[t+1]<<8},u.prototype.readUInt16BE=function(t,e){return e||N(t,2,this.length),this[t]<<8|this[t+1]},u.prototype.readUInt32LE=function(t,e){return e||N(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},u.prototype.readUInt32BE=function(t,e){return e||N(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},u.prototype.readIntLE=function(t,e,n){t|=0,e|=0,n||N(t,e,this.length);for(var r=this[t],i=1,o=0;++o<e&&(i*=256);)r+=this[t+o]*i;return r>=(i*=128)&&(r-=Math.pow(2,8*e)),r},u.prototype.readIntBE=function(t,e,n){t|=0,e|=0,n||N(t,e,this.length);for(var r=e,i=1,o=this[t+--r];r>0&&(i*=256);)o+=this[t+--r]*i;return o>=(i*=128)&&(o-=Math.pow(2,8*e)),o},u.prototype.readInt8=function(t,e){return e||N(t,1,this.length),128&this[t]?-1*(255-this[t]+1):this[t]},u.prototype.readInt16LE=function(t,e){e||N(t,2,this.length);var n=this[t]|this[t+1]<<8;return 32768&n?4294901760|n:n},u.prototype.readInt16BE=function(t,e){e||N(t,2,this.length);var n=this[t+1]|this[t]<<8;return 32768&n?4294901760|n:n},u.prototype.readInt32LE=function(t,e){return e||N(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},u.prototype.readInt32BE=function(t,e){return e||N(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},u.prototype.readFloatLE=function(t,e){return e||N(t,4,this.length),i.read(this,t,!0,23,4)},u.prototype.readFloatBE=function(t,e){return e||N(t,4,this.length),i.read(this,t,!1,23,4)},u.prototype.readDoubleLE=function(t,e){return e||N(t,8,this.length),i.read(this,t,!0,52,8)},u.prototype.readDoubleBE=function(t,e){return e||N(t,8,this.length),i.read(this,t,!1,52,8)},u.prototype.writeUIntLE=function(t,e,n,r){(t=+t,e|=0,n|=0,r)||z(this,t,e,n,Math.pow(2,8*n)-1,0);var i=1,o=0;for(this[e]=255&t;++o<n&&(i*=256);)this[e+o]=t/i&255;return e+n},u.prototype.writeUIntBE=function(t,e,n,r){(t=+t,e|=0,n|=0,r)||z(this,t,e,n,Math.pow(2,8*n)-1,0);var i=n-1,o=1;for(this[e+i]=255&t;--i>=0&&(o*=256);)this[e+i]=t/o&255;return e+n},u.prototype.writeUInt8=function(t,e,n){return t=+t,e|=0,n||z(this,t,e,1,255,0),u.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),this[e]=255&t,e+1},u.prototype.writeUInt16LE=function(t,e,n){return t=+t,e|=0,n||z(this,t,e,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):B(this,t,e,!0),e+2},u.prototype.writeUInt16BE=function(t,e,n){return t=+t,e|=0,n||z(this,t,e,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):B(this,t,e,!1),e+2},u.prototype.writeUInt32LE=function(t,e,n){return t=+t,e|=0,n||z(this,t,e,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[e+3]=t>>>24,this[e+2]=t>>>16,this[e+1]=t>>>8,this[e]=255&t):M(this,t,e,!0),e+4},u.prototype.writeUInt32BE=function(t,e,n){return t=+t,e|=0,n||z(this,t,e,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):M(this,t,e,!1),e+4},u.prototype.writeIntLE=function(t,e,n,r){if(t=+t,e|=0,!r){var i=Math.pow(2,8*n-1);z(this,t,e,n,i-1,-i)}var o=0,a=1,s=0;for(this[e]=255&t;++o<n&&(a*=256);)t<0&&0===s&&0!==this[e+o-1]&&(s=1),this[e+o]=(t/a>>0)-s&255;return e+n},u.prototype.writeIntBE=function(t,e,n,r){if(t=+t,e|=0,!r){var i=Math.pow(2,8*n-1);z(this,t,e,n,i-1,-i)}var o=n-1,a=1,s=0;for(this[e+o]=255&t;--o>=0&&(a*=256);)t<0&&0===s&&0!==this[e+o+1]&&(s=1),this[e+o]=(t/a>>0)-s&255;return e+n},u.prototype.writeInt8=function(t,e,n){return t=+t,e|=0,n||z(this,t,e,1,127,-128),u.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),t<0&&(t=255+t+1),this[e]=255&t,e+1},u.prototype.writeInt16LE=function(t,e,n){return t=+t,e|=0,n||z(this,t,e,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):B(this,t,e,!0),e+2},u.prototype.writeInt16BE=function(t,e,n){return t=+t,e|=0,n||z(this,t,e,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):B(this,t,e,!1),e+2},u.prototype.writeInt32LE=function(t,e,n){return t=+t,e|=0,n||z(this,t,e,4,2147483647,-2147483648),u.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8,this[e+2]=t>>>16,this[e+3]=t>>>24):M(this,t,e,!0),e+4},u.prototype.writeInt32BE=function(t,e,n){return t=+t,e|=0,n||z(this,t,e,4,2147483647,-2147483648),t<0&&(t=4294967295+t+1),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):M(this,t,e,!1),e+4},u.prototype.writeFloatLE=function(t,e,n){return U(this,t,e,!0,n)},u.prototype.writeFloatBE=function(t,e,n){return U(this,t,e,!1,n)},u.prototype.writeDoubleLE=function(t,e,n){return D(this,t,e,!0,n)},u.prototype.writeDoubleBE=function(t,e,n){return D(this,t,e,!1,n)},u.prototype.copy=function(t,e,n,r){if(n||(n=0),r||0===r||(r=this.length),e>=t.length&&(e=t.length),e||(e=0),r>0&&r<n&&(r=n),r===n)return 0;if(0===t.length||0===this.length)return 0;if(e<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("sourceStart out of bounds");if(r<0)throw new RangeError("sourceEnd out of bounds");r>this.length&&(r=this.length),t.length-e<r-n&&(r=t.length-e+n);var i,o=r-n;if(this===t&&n<e&&e<r)for(i=o-1;i>=0;--i)t[i+e]=this[i+n];else if(o<1e3||!u.TYPED_ARRAY_SUPPORT)for(i=0;i<o;++i)t[i+e]=this[i+n];else Uint8Array.prototype.set.call(t,this.subarray(n,n+o),e);return o},u.prototype.fill=function(t,e,n,r){if("string"==typeof t){if("string"==typeof e?(r=e,e=0,n=this.length):"string"==typeof n&&(r=n,n=this.length),1===t.length){var i=t.charCodeAt(0);i<256&&(t=i)}if(void 0!==r&&"string"!=typeof r)throw new TypeError("encoding must be a string");if("string"==typeof r&&!u.isEncoding(r))throw new TypeError("Unknown encoding: "+r)}else"number"==typeof t&&(t&=255);if(e<0||this.length<e||this.length<n)throw new RangeError("Out of range index");if(n<=e)return this;var o;if(e>>>=0,n=void 0===n?this.length:n>>>0,t||(t=0),"number"==typeof t)for(o=e;o<n;++o)this[o]=t;else{var a=u.isBuffer(t)?t:Z(new u(t,r).toString()),s=a.length;for(o=0;o<n-e;++o)this[o+e]=a[o%s]}return this};var F=/[^+\/0-9A-Za-z-_]/g;function j(t){return t<16?"0"+t.toString(16):t.toString(16)}function Z(t,e){var n;e=e||1/0;for(var r=t.length,i=null,o=[],a=0;a<r;++a){if((n=t.charCodeAt(a))>55295&&n<57344){if(!i){if(n>56319){(e-=3)>-1&&o.push(239,191,189);continue}if(a+1===r){(e-=3)>-1&&o.push(239,191,189);continue}i=n;continue}if(n<56320){(e-=3)>-1&&o.push(239,191,189),i=n;continue}n=65536+(i-55296<<10|n-56320)}else i&&(e-=3)>-1&&o.push(239,191,189);if(i=null,n<128){if((e-=1)<0)break;o.push(n)}else if(n<2048){if((e-=2)<0)break;o.push(n>>6|192,63&n|128)}else if(n<65536){if((e-=3)<0)break;o.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((e-=4)<0)break;o.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return o}function C(t){return r.toByteArray(function(t){if((t=function(t){return t.trim?t.trim():t.replace(/^\s+|\s+$/g,"")}(t).replace(F,"")).length<2)return"";for(;t.length%4!=0;)t+="=";return t}(t))}function q(t,e,n,r){for(var i=0;i<r&&!(i+n>=e.length||i>=t.length);++i)e[i+n]=t[i];return i}}).call(this,n(1))},function(t,e,n){(function(t){function n(t){return Object.prototype.toString.call(t)}e.isArray=function(t){return Array.isArray?Array.isArray(t):"[object Array]"===n(t)},e.isBoolean=function(t){return"boolean"==typeof t},e.isNull=function(t){return null===t},e.isNullOrUndefined=function(t){return null==t},e.isNumber=function(t){return"number"==typeof t},e.isString=function(t){return"string"==typeof t},e.isSymbol=function(t){return"symbol"==typeof t},e.isUndefined=function(t){return void 0===t},e.isRegExp=function(t){return"[object RegExp]"===n(t)},e.isObject=function(t){return"object"==typeof t&&null!==t},e.isDate=function(t){return"[object Date]"===n(t)},e.isError=function(t){return"[object Error]"===n(t)||t instanceof Error},e.isFunction=function(t){return"function"==typeof t},e.isPrimitive=function(t){return null===t||"boolean"==typeof t||"number"==typeof t||"string"==typeof t||"symbol"==typeof t||void 0===t},e.isBuffer=t.isBuffer}).call(this,n(4).Buffer)},function(t,e,n){"use strict";(function(e){void 0===e||!e.version||0===e.version.indexOf("v0.")||0===e.version.indexOf("v1.")&&0!==e.version.indexOf("v1.8.")?t.exports={nextTick:function(t,n,r,i){if("function"!=typeof t)throw new TypeError('"callback" argument must be a function');var o,a,s=arguments.length;switch(s){case 0:case 1:return e.nextTick(t);case 2:return e.nextTick((function(){t.call(null,n)}));case 3:return e.nextTick((function(){t.call(null,n,r)}));case 4:return e.nextTick((function(){t.call(null,n,r,i)}));default:for(o=new Array(s-1),a=0;a<o.length;)o[a++]=arguments[a];return e.nextTick((function(){t.apply(null,o)}))}}}:t.exports=e}).call(this,n(0))},function(t,e,n){var r=n(4),i=r.Buffer;function o(t,e){for(var n in t)e[n]=t[n]}function a(t,e,n){return i(t,e,n)}i.from&&i.alloc&&i.allocUnsafe&&i.allocUnsafeSlow?t.exports=r:(o(r,e),e.Buffer=a),o(i,a),a.from=function(t,e,n){if("number"==typeof t)throw new TypeError("Argument must not be a number");return i(t,e,n)},a.alloc=function(t,e,n){if("number"!=typeof t)throw new TypeError("Argument must be a number");var r=i(t);return void 0!==e?"string"==typeof n?r.fill(e,n):r.fill(e):r.fill(0),r},a.allocUnsafe=function(t){if("number"!=typeof t)throw new TypeError("Argument must be a number");return i(t)},a.allocUnsafeSlow=function(t){if("number"!=typeof t)throw new TypeError("Argument must be a number");return r.SlowBuffer(t)}},function(t,e,n){"use strict";var r="undefined"!=typeof Uint8Array&&"undefined"!=typeof Uint16Array&&"undefined"!=typeof Int32Array;function i(t,e){return Object.prototype.hasOwnProperty.call(t,e)}e.assign=function(t){for(var e=Array.prototype.slice.call(arguments,1);e.length;){var n=e.shift();if(n){if("object"!=typeof n)throw new TypeError(n+"must be non-object");for(var r in n)i(n,r)&&(t[r]=n[r])}}return t},e.shrinkBuf=function(t,e){return t.length===e?t:t.subarray?t.subarray(0,e):(t.length=e,t)};var o={arraySet:function(t,e,n,r,i){if(e.subarray&&t.subarray)t.set(e.subarray(n,n+r),i);else for(var o=0;o<r;o++)t[i+o]=e[n+o]},flattenChunks:function(t){var e,n,r,i,o,a;for(r=0,e=0,n=t.length;e<n;e++)r+=t[e].length;for(a=new Uint8Array(r),i=0,e=0,n=t.length;e<n;e++)o=t[e],a.set(o,i),i+=o.length;return a}},a={arraySet:function(t,e,n,r,i){for(var o=0;o<r;o++)t[i+o]=e[n+o]},flattenChunks:function(t){return[].concat.apply([],t)}};e.setTyped=function(t){t?(e.Buf8=Uint8Array,e.Buf16=Uint16Array,e.Buf32=Int32Array,e.assign(e,o)):(e.Buf8=Array,e.Buf16=Array,e.Buf32=Array,e.assign(e,a))},e.setTyped(r)},function(t,e,n){"use strict";var r,i="object"==typeof Reflect?Reflect:null,o=i&&"function"==typeof i.apply?i.apply:function(t,e,n){return Function.prototype.apply.call(t,e,n)};r=i&&"function"==typeof i.ownKeys?i.ownKeys:Object.getOwnPropertySymbols?function(t){return Object.getOwnPropertyNames(t).concat(Object.getOwnPropertySymbols(t))}:function(t){return Object.getOwnPropertyNames(t)};var a=Number.isNaN||function(t){return t!=t};function s(){s.init.call(this)}t.exports=s,s.EventEmitter=s,s.prototype._events=void 0,s.prototype._eventsCount=0,s.prototype._maxListeners=void 0;var u=10;function f(t){return void 0===t._maxListeners?s.defaultMaxListeners:t._maxListeners}function l(t,e,n,r){var i,o,a,s;if("function"!=typeof n)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof n);if(void 0===(o=t._events)?(o=t._events=Object.create(null),t._eventsCount=0):(void 0!==o.newListener&&(t.emit("newListener",e,n.listener?n.listener:n),o=t._events),a=o[e]),void 0===a)a=o[e]=n,++t._eventsCount;else if("function"==typeof a?a=o[e]=r?[n,a]:[a,n]:r?a.unshift(n):a.push(n),(i=f(t))>0&&a.length>i&&!a.warned){a.warned=!0;var u=new Error("Possible EventEmitter memory leak detected. "+a.length+" "+String(e)+" listeners added. Use emitter.setMaxListeners() to increase limit");u.name="MaxListenersExceededWarning",u.emitter=t,u.type=e,u.count=a.length,s=u,console&&console.warn&&console.warn(s)}return t}function h(){for(var t=[],e=0;e<arguments.length;e++)t.push(arguments[e]);this.fired||(this.target.removeListener(this.type,this.wrapFn),this.fired=!0,o(this.listener,this.target,t))}function c(t,e,n){var r={fired:!1,wrapFn:void 0,target:t,type:e,listener:n},i=h.bind(r);return i.listener=n,r.wrapFn=i,i}function d(t,e,n){var r=t._events;if(void 0===r)return[];var i=r[e];return void 0===i?[]:"function"==typeof i?n?[i.listener||i]:[i]:n?function(t){for(var e=new Array(t.length),n=0;n<e.length;++n)e[n]=t[n].listener||t[n];return e}(i):_(i,i.length)}function p(t){var e=this._events;if(void 0!==e){var n=e[t];if("function"==typeof n)return 1;if(void 0!==n)return n.length}return 0}function _(t,e){for(var n=new Array(e),r=0;r<e;++r)n[r]=t[r];return n}Object.defineProperty(s,"defaultMaxListeners",{enumerable:!0,get:function(){return u},set:function(t){if("number"!=typeof t||t<0||a(t))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+t+".");u=t}}),s.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},s.prototype.setMaxListeners=function(t){if("number"!=typeof t||t<0||a(t))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+t+".");return this._maxListeners=t,this},s.prototype.getMaxListeners=function(){return f(this)},s.prototype.emit=function(t){for(var e=[],n=1;n<arguments.length;n++)e.push(arguments[n]);var r="error"===t,i=this._events;if(void 0!==i)r=r&&void 0===i.error;else if(!r)return!1;if(r){var a;if(e.length>0&&(a=e[0]),a instanceof Error)throw a;var s=new Error("Unhandled error."+(a?" ("+a.message+")":""));throw s.context=a,s}var u=i[t];if(void 0===u)return!1;if("function"==typeof u)o(u,this,e);else{var f=u.length,l=_(u,f);for(n=0;n<f;++n)o(l[n],this,e)}return!0},s.prototype.addListener=function(t,e){return l(this,t,e,!1)},s.prototype.on=s.prototype.addListener,s.prototype.prependListener=function(t,e){return l(this,t,e,!0)},s.prototype.once=function(t,e){if("function"!=typeof e)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof e);return this.on(t,c(this,t,e)),this},s.prototype.prependOnceListener=function(t,e){if("function"!=typeof e)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof e);return this.prependListener(t,c(this,t,e)),this},s.prototype.removeListener=function(t,e){var n,r,i,o,a;if("function"!=typeof e)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof e);if(void 0===(r=this._events))return this;if(void 0===(n=r[t]))return this;if(n===e||n.listener===e)0==--this._eventsCount?this._events=Object.create(null):(delete r[t],r.removeListener&&this.emit("removeListener",t,n.listener||e));else if("function"!=typeof n){for(i=-1,o=n.length-1;o>=0;o--)if(n[o]===e||n[o].listener===e){a=n[o].listener,i=o;break}if(i<0)return this;0===i?n.shift():function(t,e){for(;e+1<t.length;e++)t[e]=t[e+1];t.pop()}(n,i),1===n.length&&(r[t]=n[0]),void 0!==r.removeListener&&this.emit("removeListener",t,a||e)}return this},s.prototype.off=s.prototype.removeListener,s.prototype.removeAllListeners=function(t){var e,n,r;if(void 0===(n=this._events))return this;if(void 0===n.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==n[t]&&(0==--this._eventsCount?this._events=Object.create(null):delete n[t]),this;if(0===arguments.length){var i,o=Object.keys(n);for(r=0;r<o.length;++r)"removeListener"!==(i=o[r])&&this.removeAllListeners(i);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(e=n[t]))this.removeListener(t,e);else if(void 0!==e)for(r=e.length-1;r>=0;r--)this.removeListener(t,e[r]);return this},s.prototype.listeners=function(t){return d(this,t,!0)},s.prototype.rawListeners=function(t){return d(this,t,!1)},s.listenerCount=function(t,e){return"function"==typeof t.listenerCount?t.listenerCount(e):p.call(t,e)},s.prototype.listenerCount=p,s.prototype.eventNames=function(){return this._eventsCount>0?r(this._events):[]}},function(t,e,n){(e=t.exports=n(13)).Stream=e,e.Readable=e,e.Writable=n(11),e.Duplex=n(3),e.Transform=n(17),e.PassThrough=n(32)},function(t,e,n){"use strict";(function(e,r,i){var o=n(6);function a(t){var e=this;this.next=null,this.entry=null,this.finish=function(){!function(t,e,n){var r=t.entry;t.entry=null;for(;r;){var i=r.callback;e.pendingcb--,i(n),r=r.next}e.corkedRequestsFree?e.corkedRequestsFree.next=t:e.corkedRequestsFree=t}(e,t)}}t.exports=w;var s,u=!e.browser&&["v0.10","v0.9."].indexOf(e.version.slice(0,5))>-1?r:o.nextTick;w.WritableState=b;var f=n(5);f.inherits=n(2);var l={deprecate:n(31)},h=n(14),c=n(7).Buffer,d=i.Uint8Array||function(){};var p,_=n(15);function g(){}function b(t,e){s=s||n(3),t=t||{};var r=e instanceof s;this.objectMode=!!t.objectMode,r&&(this.objectMode=this.objectMode||!!t.writableObjectMode);var i=t.highWaterMark,f=t.writableHighWaterMark,l=this.objectMode?16:16384;this.highWaterMark=i||0===i?i:r&&(f||0===f)?f:l,this.highWaterMark=Math.floor(this.highWaterMark),this.finalCalled=!1,this.needDrain=!1,this.ending=!1,this.ended=!1,this.finished=!1,this.destroyed=!1;var h=!1===t.decodeStrings;this.decodeStrings=!h,this.defaultEncoding=t.defaultEncoding||"utf8",this.length=0,this.writing=!1,this.corked=0,this.sync=!0,this.bufferProcessing=!1,this.onwrite=function(t){!function(t,e){var n=t._writableState,r=n.sync,i=n.writecb;if(function(t){t.writing=!1,t.writecb=null,t.length-=t.writelen,t.writelen=0}(n),e)!function(t,e,n,r,i){--e.pendingcb,n?(o.nextTick(i,r),o.nextTick(S,t,e),t._writableState.errorEmitted=!0,t.emit("error",r)):(i(r),t._writableState.errorEmitted=!0,t.emit("error",r),S(t,e))}(t,n,r,e,i);else{var a=E(n);a||n.corked||n.bufferProcessing||!n.bufferedRequest||v(t,n),r?u(m,t,n,a,i):m(t,n,a,i)}}(e,t)},this.writecb=null,this.writelen=0,this.bufferedRequest=null,this.lastBufferedRequest=null,this.pendingcb=0,this.prefinished=!1,this.errorEmitted=!1,this.bufferedRequestCount=0,this.corkedRequestsFree=new a(this)}function w(t){if(s=s||n(3),!(p.call(w,this)||this instanceof s))return new w(t);this._writableState=new b(t,this),this.writable=!0,t&&("function"==typeof t.write&&(this._write=t.write),"function"==typeof t.writev&&(this._writev=t.writev),"function"==typeof t.destroy&&(this._destroy=t.destroy),"function"==typeof t.final&&(this._final=t.final)),h.call(this)}function y(t,e,n,r,i,o,a){e.writelen=r,e.writecb=a,e.writing=!0,e.sync=!0,n?t._writev(i,e.onwrite):t._write(i,o,e.onwrite),e.sync=!1}function m(t,e,n,r){n||function(t,e){0===e.length&&e.needDrain&&(e.needDrain=!1,t.emit("drain"))}(t,e),e.pendingcb--,r(),S(t,e)}function v(t,e){e.bufferProcessing=!0;var n=e.bufferedRequest;if(t._writev&&n&&n.next){var r=e.bufferedRequestCount,i=new Array(r),o=e.corkedRequestsFree;o.entry=n;for(var s=0,u=!0;n;)i[s]=n,n.isBuf||(u=!1),n=n.next,s+=1;i.allBuffers=u,y(t,e,!0,e.length,i,"",o.finish),e.pendingcb++,e.lastBufferedRequest=null,o.next?(e.corkedRequestsFree=o.next,o.next=null):e.corkedRequestsFree=new a(e),e.bufferedRequestCount=0}else{for(;n;){var f=n.chunk,l=n.encoding,h=n.callback;if(y(t,e,!1,e.objectMode?1:f.length,f,l,h),n=n.next,e.bufferedRequestCount--,e.writing)break}null===n&&(e.lastBufferedRequest=null)}e.bufferedRequest=n,e.bufferProcessing=!1}function E(t){return t.ending&&0===t.length&&null===t.bufferedRequest&&!t.finished&&!t.writing}function k(t,e){t._final((function(n){e.pendingcb--,n&&t.emit("error",n),e.prefinished=!0,t.emit("prefinish"),S(t,e)}))}function S(t,e){var n=E(e);return n&&(!function(t,e){e.prefinished||e.finalCalled||("function"==typeof t._final?(e.pendingcb++,e.finalCalled=!0,o.nextTick(k,t,e)):(e.prefinished=!0,t.emit("prefinish")))}(t,e),0===e.pendingcb&&(e.finished=!0,t.emit("finish"))),n}f.inherits(w,h),b.prototype.getBuffer=function(){for(var t=this.bufferedRequest,e=[];t;)e.push(t),t=t.next;return e},function(){try{Object.defineProperty(b.prototype,"buffer",{get:l.deprecate((function(){return this.getBuffer()}),"_writableState.buffer is deprecated. Use _writableState.getBuffer instead.","DEP0003")})}catch(t){}}(),"function"==typeof Symbol&&Symbol.hasInstance&&"function"==typeof Function.prototype[Symbol.hasInstance]?(p=Function.prototype[Symbol.hasInstance],Object.defineProperty(w,Symbol.hasInstance,{value:function(t){return!!p.call(this,t)||this===w&&(t&&t._writableState instanceof b)}})):p=function(t){return t instanceof this},w.prototype.pipe=function(){this.emit("error",new Error("Cannot pipe, not readable"))},w.prototype.write=function(t,e,n){var r,i=this._writableState,a=!1,s=!i.objectMode&&(r=t,c.isBuffer(r)||r instanceof d);return s&&!c.isBuffer(t)&&(t=function(t){return c.from(t)}(t)),"function"==typeof e&&(n=e,e=null),s?e="buffer":e||(e=i.defaultEncoding),"function"!=typeof n&&(n=g),i.ended?function(t,e){var n=new Error("write after end");t.emit("error",n),o.nextTick(e,n)}(this,n):(s||function(t,e,n,r){var i=!0,a=!1;return null===n?a=new TypeError("May not write null values to stream"):"string"==typeof n||void 0===n||e.objectMode||(a=new TypeError("Invalid non-string/buffer chunk")),a&&(t.emit("error",a),o.nextTick(r,a),i=!1),i}(this,i,t,n))&&(i.pendingcb++,a=function(t,e,n,r,i,o){if(!n){var a=function(t,e,n){t.objectMode||!1===t.decodeStrings||"string"!=typeof e||(e=c.from(e,n));return e}(e,r,i);r!==a&&(n=!0,i="buffer",r=a)}var s=e.objectMode?1:r.length;e.length+=s;var u=e.length<e.highWaterMark;u||(e.needDrain=!0);if(e.writing||e.corked){var f=e.lastBufferedRequest;e.lastBufferedRequest={chunk:r,encoding:i,isBuf:n,callback:o,next:null},f?f.next=e.lastBufferedRequest:e.bufferedRequest=e.lastBufferedRequest,e.bufferedRequestCount+=1}else y(t,e,!1,s,r,i,o);return u}(this,i,s,t,e,n)),a},w.prototype.cork=function(){this._writableState.corked++},w.prototype.uncork=function(){var t=this._writableState;t.corked&&(t.corked--,t.writing||t.corked||t.finished||t.bufferProcessing||!t.bufferedRequest||v(this,t))},w.prototype.setDefaultEncoding=function(t){if("string"==typeof t&&(t=t.toLowerCase()),!(["hex","utf8","utf-8","ascii","binary","base64","ucs2","ucs-2","utf16le","utf-16le","raw"].indexOf((t+"").toLowerCase())>-1))throw new TypeError("Unknown encoding: "+t);return this._writableState.defaultEncoding=t,this},Object.defineProperty(w.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),w.prototype._write=function(t,e,n){n(new Error("_write() is not implemented"))},w.prototype._writev=null,w.prototype.end=function(t,e,n){var r=this._writableState;"function"==typeof t?(n=t,t=null,e=null):"function"==typeof e&&(n=e,e=null),null!=t&&this.write(t,e),r.corked&&(r.corked=1,this.uncork()),r.ending||r.finished||function(t,e,n){e.ending=!0,S(t,e),n&&(e.finished?o.nextTick(n):t.once("finish",n));e.ended=!0,t.writable=!1}(this,r,n)},Object.defineProperty(w.prototype,"destroyed",{get:function(){return void 0!==this._writableState&&this._writableState.destroyed},set:function(t){this._writableState&&(this._writableState.destroyed=t)}}),w.prototype.destroy=_.destroy,w.prototype._undestroy=_.undestroy,w.prototype._destroy=function(t,e){this.end(),e(t)}}).call(this,n(0),n(29).setImmediate,n(1))},function(t,e){var n={}.toString;t.exports=Array.isArray||function(t){return"[object Array]"==n.call(t)}},function(t,e,n){"use strict";(function(e,r){var i=n(6);t.exports=y;var o,a=n(12);y.ReadableState=w;n(9).EventEmitter;var s=function(t,e){return t.listeners(e).length},u=n(14),f=n(7).Buffer,l=e.Uint8Array||function(){};var h=n(5);h.inherits=n(2);var c=n(26),d=void 0;d=c&&c.debuglog?c.debuglog("stream"):function(){};var p,_=n(27),g=n(15);h.inherits(y,u);var b=["error","close","destroy","pause","resume"];function w(t,e){t=t||{};var r=e instanceof(o=o||n(3));this.objectMode=!!t.objectMode,r&&(this.objectMode=this.objectMode||!!t.readableObjectMode);var i=t.highWaterMark,a=t.readableHighWaterMark,s=this.objectMode?16:16384;this.highWaterMark=i||0===i?i:r&&(a||0===a)?a:s,this.highWaterMark=Math.floor(this.highWaterMark),this.buffer=new _,this.length=0,this.pipes=null,this.pipesCount=0,this.flowing=null,this.ended=!1,this.endEmitted=!1,this.reading=!1,this.sync=!0,this.needReadable=!1,this.emittedReadable=!1,this.readableListening=!1,this.resumeScheduled=!1,this.destroyed=!1,this.defaultEncoding=t.defaultEncoding||"utf8",this.awaitDrain=0,this.readingMore=!1,this.decoder=null,this.encoding=null,t.encoding&&(p||(p=n(16).StringDecoder),this.decoder=new p(t.encoding),this.encoding=t.encoding)}function y(t){if(o=o||n(3),!(this instanceof y))return new y(t);this._readableState=new w(t,this),this.readable=!0,t&&("function"==typeof t.read&&(this._read=t.read),"function"==typeof t.destroy&&(this._destroy=t.destroy)),u.call(this)}function m(t,e,n,r,i){var o,a=t._readableState;null===e?(a.reading=!1,function(t,e){if(e.ended)return;if(e.decoder){var n=e.decoder.end();n&&n.length&&(e.buffer.push(n),e.length+=e.objectMode?1:n.length)}e.ended=!0,S(t)}(t,a)):(i||(o=function(t,e){var n;r=e,f.isBuffer(r)||r instanceof l||"string"==typeof e||void 0===e||t.objectMode||(n=new TypeError("Invalid non-string/buffer chunk"));var r;return n}(a,e)),o?t.emit("error",o):a.objectMode||e&&e.length>0?("string"==typeof e||a.objectMode||Object.getPrototypeOf(e)===f.prototype||(e=function(t){return f.from(t)}(e)),r?a.endEmitted?t.emit("error",new Error("stream.unshift() after end event")):v(t,a,e,!0):a.ended?t.emit("error",new Error("stream.push() after EOF")):(a.reading=!1,a.decoder&&!n?(e=a.decoder.write(e),a.objectMode||0!==e.length?v(t,a,e,!1):T(t,a)):v(t,a,e,!1))):r||(a.reading=!1));return function(t){return!t.ended&&(t.needReadable||t.length<t.highWaterMark||0===t.length)}(a)}function v(t,e,n,r){e.flowing&&0===e.length&&!e.sync?(t.emit("data",n),t.read(0)):(e.length+=e.objectMode?1:n.length,r?e.buffer.unshift(n):e.buffer.push(n),e.needReadable&&S(t)),T(t,e)}Object.defineProperty(y.prototype,"destroyed",{get:function(){return void 0!==this._readableState&&this._readableState.destroyed},set:function(t){this._readableState&&(this._readableState.destroyed=t)}}),y.prototype.destroy=g.destroy,y.prototype._undestroy=g.undestroy,y.prototype._destroy=function(t,e){this.push(null),e(t)},y.prototype.push=function(t,e){var n,r=this._readableState;return r.objectMode?n=!0:"string"==typeof t&&((e=e||r.defaultEncoding)!==r.encoding&&(t=f.from(t,e),e=""),n=!0),m(this,t,e,!1,n)},y.prototype.unshift=function(t){return m(this,t,null,!0,!1)},y.prototype.isPaused=function(){return!1===this._readableState.flowing},y.prototype.setEncoding=function(t){return p||(p=n(16).StringDecoder),this._readableState.decoder=new p(t),this._readableState.encoding=t,this};var E=8388608;function k(t,e){return t<=0||0===e.length&&e.ended?0:e.objectMode?1:t!=t?e.flowing&&e.length?e.buffer.head.data.length:e.length:(t>e.highWaterMark&&(e.highWaterMark=function(t){return t>=E?t=E:(t--,t|=t>>>1,t|=t>>>2,t|=t>>>4,t|=t>>>8,t|=t>>>16,t++),t}(t)),t<=e.length?t:e.ended?e.length:(e.needReadable=!0,0))}function S(t){var e=t._readableState;e.needReadable=!1,e.emittedReadable||(d("emitReadable",e.flowing),e.emittedReadable=!0,e.sync?i.nextTick(x,t):x(t))}function x(t){d("emit readable"),t.emit("readable"),O(t)}function T(t,e){e.readingMore||(e.readingMore=!0,i.nextTick(R,t,e))}function R(t,e){for(var n=e.length;!e.reading&&!e.flowing&&!e.ended&&e.length<e.highWaterMark&&(d("maybeReadMore read 0"),t.read(0),n!==e.length);)n=e.length;e.readingMore=!1}function A(t){d("readable nexttick read 0"),t.read(0)}function L(t,e){e.reading||(d("resume read 0"),t.read(0)),e.resumeScheduled=!1,e.awaitDrain=0,t.emit("resume"),O(t),e.flowing&&!e.reading&&t.read(0)}function O(t){var e=t._readableState;for(d("flow",e.flowing);e.flowing&&null!==t.read(););}function I(t,e){return 0===e.length?null:(e.objectMode?n=e.buffer.shift():!t||t>=e.length?(n=e.decoder?e.buffer.join(""):1===e.buffer.length?e.buffer.head.data:e.buffer.concat(e.length),e.buffer.clear()):n=function(t,e,n){var r;t<e.head.data.length?(r=e.head.data.slice(0,t),e.head.data=e.head.data.slice(t)):r=t===e.head.data.length?e.shift():n?function(t,e){var n=e.head,r=1,i=n.data;t-=i.length;for(;n=n.next;){var o=n.data,a=t>o.length?o.length:t;if(a===o.length?i+=o:i+=o.slice(0,t),0===(t-=a)){a===o.length?(++r,n.next?e.head=n.next:e.head=e.tail=null):(e.head=n,n.data=o.slice(a));break}++r}return e.length-=r,i}(t,e):function(t,e){var n=f.allocUnsafe(t),r=e.head,i=1;r.data.copy(n),t-=r.data.length;for(;r=r.next;){var o=r.data,a=t>o.length?o.length:t;if(o.copy(n,n.length-t,0,a),0===(t-=a)){a===o.length?(++i,r.next?e.head=r.next:e.head=e.tail=null):(e.head=r,r.data=o.slice(a));break}++i}return e.length-=i,n}(t,e);return r}(t,e.buffer,e.decoder),n);var n}function N(t){var e=t._readableState;if(e.length>0)throw new Error('"endReadable()" called on non-empty stream');e.endEmitted||(e.ended=!0,i.nextTick(z,e,t))}function z(t,e){t.endEmitted||0!==t.length||(t.endEmitted=!0,e.readable=!1,e.emit("end"))}function B(t,e){for(var n=0,r=t.length;n<r;n++)if(t[n]===e)return n;return-1}y.prototype.read=function(t){d("read",t),t=parseInt(t,10);var e=this._readableState,n=t;if(0!==t&&(e.emittedReadable=!1),0===t&&e.needReadable&&(e.length>=e.highWaterMark||e.ended))return d("read: emitReadable",e.length,e.ended),0===e.length&&e.ended?N(this):S(this),null;if(0===(t=k(t,e))&&e.ended)return 0===e.length&&N(this),null;var r,i=e.needReadable;return d("need readable",i),(0===e.length||e.length-t<e.highWaterMark)&&d("length less than watermark",i=!0),e.ended||e.reading?d("reading or ended",i=!1):i&&(d("do read"),e.reading=!0,e.sync=!0,0===e.length&&(e.needReadable=!0),this._read(e.highWaterMark),e.sync=!1,e.reading||(t=k(n,e))),null===(r=t>0?I(t,e):null)?(e.needReadable=!0,t=0):e.length-=t,0===e.length&&(e.ended||(e.needReadable=!0),n!==t&&e.ended&&N(this)),null!==r&&this.emit("data",r),r},y.prototype._read=function(t){this.emit("error",new Error("_read() is not implemented"))},y.prototype.pipe=function(t,e){var n=this,o=this._readableState;switch(o.pipesCount){case 0:o.pipes=t;break;case 1:o.pipes=[o.pipes,t];break;default:o.pipes.push(t)}o.pipesCount+=1,d("pipe count=%d opts=%j",o.pipesCount,e);var u=(!e||!1!==e.end)&&t!==r.stdout&&t!==r.stderr?l:y;function f(e,r){d("onunpipe"),e===n&&r&&!1===r.hasUnpiped&&(r.hasUnpiped=!0,d("cleanup"),t.removeListener("close",b),t.removeListener("finish",w),t.removeListener("drain",h),t.removeListener("error",g),t.removeListener("unpipe",f),n.removeListener("end",l),n.removeListener("end",y),n.removeListener("data",_),c=!0,!o.awaitDrain||t._writableState&&!t._writableState.needDrain||h())}function l(){d("onend"),t.end()}o.endEmitted?i.nextTick(u):n.once("end",u),t.on("unpipe",f);var h=function(t){return function(){var e=t._readableState;d("pipeOnDrain",e.awaitDrain),e.awaitDrain&&e.awaitDrain--,0===e.awaitDrain&&s(t,"data")&&(e.flowing=!0,O(t))}}(n);t.on("drain",h);var c=!1;var p=!1;function _(e){d("ondata"),p=!1,!1!==t.write(e)||p||((1===o.pipesCount&&o.pipes===t||o.pipesCount>1&&-1!==B(o.pipes,t))&&!c&&(d("false write response, pause",n._readableState.awaitDrain),n._readableState.awaitDrain++,p=!0),n.pause())}function g(e){d("onerror",e),y(),t.removeListener("error",g),0===s(t,"error")&&t.emit("error",e)}function b(){t.removeListener("finish",w),y()}function w(){d("onfinish"),t.removeListener("close",b),y()}function y(){d("unpipe"),n.unpipe(t)}return n.on("data",_),function(t,e,n){if("function"==typeof t.prependListener)return t.prependListener(e,n);t._events&&t._events[e]?a(t._events[e])?t._events[e].unshift(n):t._events[e]=[n,t._events[e]]:t.on(e,n)}(t,"error",g),t.once("close",b),t.once("finish",w),t.emit("pipe",n),o.flowing||(d("pipe resume"),n.resume()),t},y.prototype.unpipe=function(t){var e=this._readableState,n={hasUnpiped:!1};if(0===e.pipesCount)return this;if(1===e.pipesCount)return t&&t!==e.pipes?this:(t||(t=e.pipes),e.pipes=null,e.pipesCount=0,e.flowing=!1,t&&t.emit("unpipe",this,n),this);if(!t){var r=e.pipes,i=e.pipesCount;e.pipes=null,e.pipesCount=0,e.flowing=!1;for(var o=0;o<i;o++)r[o].emit("unpipe",this,n);return this}var a=B(e.pipes,t);return-1===a?this:(e.pipes.splice(a,1),e.pipesCount-=1,1===e.pipesCount&&(e.pipes=e.pipes[0]),t.emit("unpipe",this,n),this)},y.prototype.on=function(t,e){var n=u.prototype.on.call(this,t,e);if("data"===t)!1!==this._readableState.flowing&&this.resume();else if("readable"===t){var r=this._readableState;r.endEmitted||r.readableListening||(r.readableListening=r.needReadable=!0,r.emittedReadable=!1,r.reading?r.length&&S(this):i.nextTick(A,this))}return n},y.prototype.addListener=y.prototype.on,y.prototype.resume=function(){var t=this._readableState;return t.flowing||(d("resume"),t.flowing=!0,function(t,e){e.resumeScheduled||(e.resumeScheduled=!0,i.nextTick(L,t,e))}(this,t)),this},y.prototype.pause=function(){return d("call pause flowing=%j",this._readableState.flowing),!1!==this._readableState.flowing&&(d("pause"),this._readableState.flowing=!1,this.emit("pause")),this},y.prototype.wrap=function(t){var e=this,n=this._readableState,r=!1;for(var i in t.on("end",(function(){if(d("wrapped end"),n.decoder&&!n.ended){var t=n.decoder.end();t&&t.length&&e.push(t)}e.push(null)})),t.on("data",(function(i){(d("wrapped data"),n.decoder&&(i=n.decoder.write(i)),n.objectMode&&null==i)||(n.objectMode||i&&i.length)&&(e.push(i)||(r=!0,t.pause()))})),t)void 0===this[i]&&"function"==typeof t[i]&&(this[i]=function(e){return function(){return t[e].apply(t,arguments)}}(i));for(var o=0;o<b.length;o++)t.on(b[o],this.emit.bind(this,b[o]));return this._read=function(e){d("wrapped _read",e),r&&(r=!1,t.resume())},this},Object.defineProperty(y.prototype,"readableHighWaterMark",{enumerable:!1,get:function(){return this._readableState.highWaterMark}}),y._fromList=I}).call(this,n(1),n(0))},function(t,e,n){t.exports=n(9).EventEmitter},function(t,e,n){"use strict";var r=n(6);function i(t,e){t.emit("error",e)}t.exports={destroy:function(t,e){var n=this,o=this._readableState&&this._readableState.destroyed,a=this._writableState&&this._writableState.destroyed;return o||a?(e?e(t):!t||this._writableState&&this._writableState.errorEmitted||r.nextTick(i,this,t),this):(this._readableState&&(this._readableState.destroyed=!0),this._writableState&&(this._writableState.destroyed=!0),this._destroy(t||null,(function(t){!e&&t?(r.nextTick(i,n,t),n._writableState&&(n._writableState.errorEmitted=!0)):e&&e(t)})),this)},undestroy:function(){this._readableState&&(this._readableState.destroyed=!1,this._readableState.reading=!1,this._readableState.ended=!1,this._readableState.endEmitted=!1),this._writableState&&(this._writableState.destroyed=!1,this._writableState.ended=!1,this._writableState.ending=!1,this._writableState.finished=!1,this._writableState.errorEmitted=!1)}}},function(t,e,n){"use strict";var r=n(7).Buffer,i=r.isEncoding||function(t){switch((t=""+t)&&t.toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":case"raw":return!0;default:return!1}};function o(t){var e;switch(this.encoding=function(t){var e=function(t){if(!t)return"utf8";for(var e;;)switch(t){case"utf8":case"utf-8":return"utf8";case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return"utf16le";case"latin1":case"binary":return"latin1";case"base64":case"ascii":case"hex":return t;default:if(e)return;t=(""+t).toLowerCase(),e=!0}}(t);if("string"!=typeof e&&(r.isEncoding===i||!i(t)))throw new Error("Unknown encoding: "+t);return e||t}(t),this.encoding){case"utf16le":this.text=u,this.end=f,e=4;break;case"utf8":this.fillLast=s,e=4;break;case"base64":this.text=l,this.end=h,e=3;break;default:return this.write=c,void(this.end=d)}this.lastNeed=0,this.lastTotal=0,this.lastChar=r.allocUnsafe(e)}function a(t){return t<=127?0:t>>5==6?2:t>>4==14?3:t>>3==30?4:t>>6==2?-1:-2}function s(t){var e=this.lastTotal-this.lastNeed,n=function(t,e,n){if(128!=(192&e[0]))return t.lastNeed=0,"�";if(t.lastNeed>1&&e.length>1){if(128!=(192&e[1]))return t.lastNeed=1,"�";if(t.lastNeed>2&&e.length>2&&128!=(192&e[2]))return t.lastNeed=2,"�"}}(this,t);return void 0!==n?n:this.lastNeed<=t.length?(t.copy(this.lastChar,e,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal)):(t.copy(this.lastChar,e,0,t.length),void(this.lastNeed-=t.length))}function u(t,e){if((t.length-e)%2==0){var n=t.toString("utf16le",e);if(n){var r=n.charCodeAt(n.length-1);if(r>=55296&&r<=56319)return this.lastNeed=2,this.lastTotal=4,this.lastChar[0]=t[t.length-2],this.lastChar[1]=t[t.length-1],n.slice(0,-1)}return n}return this.lastNeed=1,this.lastTotal=2,this.lastChar[0]=t[t.length-1],t.toString("utf16le",e,t.length-1)}function f(t){var e=t&&t.length?this.write(t):"";if(this.lastNeed){var n=this.lastTotal-this.lastNeed;return e+this.lastChar.toString("utf16le",0,n)}return e}function l(t,e){var n=(t.length-e)%3;return 0===n?t.toString("base64",e):(this.lastNeed=3-n,this.lastTotal=3,1===n?this.lastChar[0]=t[t.length-1]:(this.lastChar[0]=t[t.length-2],this.lastChar[1]=t[t.length-1]),t.toString("base64",e,t.length-n))}function h(t){var e=t&&t.length?this.write(t):"";return this.lastNeed?e+this.lastChar.toString("base64",0,3-this.lastNeed):e}function c(t){return t.toString(this.encoding)}function d(t){return t&&t.length?this.write(t):""}e.StringDecoder=o,o.prototype.write=function(t){if(0===t.length)return"";var e,n;if(this.lastNeed){if(void 0===(e=this.fillLast(t)))return"";n=this.lastNeed,this.lastNeed=0}else n=0;return n<t.length?e?e+this.text(t,n):this.text(t,n):e||""},o.prototype.end=function(t){var e=t&&t.length?this.write(t):"";return this.lastNeed?e+"�":e},o.prototype.text=function(t,e){var n=function(t,e,n){var r=e.length-1;if(r<n)return 0;var i=a(e[r]);if(i>=0)return i>0&&(t.lastNeed=i-1),i;if(--r<n||-2===i)return 0;if((i=a(e[r]))>=0)return i>0&&(t.lastNeed=i-2),i;if(--r<n||-2===i)return 0;if((i=a(e[r]))>=0)return i>0&&(2===i?i=0:t.lastNeed=i-3),i;return 0}(this,t,e);if(!this.lastNeed)return t.toString("utf8",e);this.lastTotal=n;var r=t.length-(n-this.lastNeed);return t.copy(this.lastChar,0,r),t.toString("utf8",e,r)},o.prototype.fillLast=function(t){if(this.lastNeed<=t.length)return t.copy(this.lastChar,this.lastTotal-this.lastNeed,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal);t.copy(this.lastChar,this.lastTotal-this.lastNeed,0,t.length),this.lastNeed-=t.length}},function(t,e,n){"use strict";t.exports=a;var r=n(3),i=n(5);function o(t,e){var n=this._transformState;n.transforming=!1;var r=n.writecb;if(!r)return this.emit("error",new Error("write callback called multiple times"));n.writechunk=null,n.writecb=null,null!=e&&this.push(e),r(t);var i=this._readableState;i.reading=!1,(i.needReadable||i.length<i.highWaterMark)&&this._read(i.highWaterMark)}function a(t){if(!(this instanceof a))return new a(t);r.call(this,t),this._transformState={afterTransform:o.bind(this),needTransform:!1,transforming:!1,writecb:null,writechunk:null,writeencoding:null},this._readableState.needReadable=!0,this._readableState.sync=!1,t&&("function"==typeof t.transform&&(this._transform=t.transform),"function"==typeof t.flush&&(this._flush=t.flush)),this.on("prefinish",s)}function s(){var t=this;"function"==typeof this._flush?this._flush((function(e,n){u(t,e,n)})):u(this,null,null)}function u(t,e,n){if(e)return t.emit("error",e);if(null!=n&&t.push(n),t._writableState.length)throw new Error("Calling transform done when ws.length != 0");if(t._transformState.transforming)throw new Error("Calling transform done when still transforming");return t.push(null)}i.inherits=n(2),i.inherits(a,r),a.prototype.push=function(t,e){return this._transformState.needTransform=!1,r.prototype.push.call(this,t,e)},a.prototype._transform=function(t,e,n){throw new Error("_transform() is not implemented")},a.prototype._write=function(t,e,n){var r=this._transformState;if(r.writecb=n,r.writechunk=t,r.writeencoding=e,!r.transforming){var i=this._readableState;(r.needTransform||i.needReadable||i.length<i.highWaterMark)&&this._read(i.highWaterMark)}},a.prototype._read=function(t){var e=this._transformState;null!==e.writechunk&&e.writecb&&!e.transforming?(e.transforming=!0,this._transform(e.writechunk,e.writeencoding,e.afterTransform)):e.needTransform=!0},a.prototype._destroy=function(t,e){var n=this;r.prototype._destroy.call(this,t,(function(t){e(t),n.emit("close")}))}},function(t,e,n){"use strict";(function(e){var r=n(38);
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */function i(t,e){if(t===e)return 0;for(var n=t.length,r=e.length,i=0,o=Math.min(n,r);i<o;++i)if(t[i]!==e[i]){n=t[i],r=e[i];break}return n<r?-1:r<n?1:0}function o(t){return e.Buffer&&"function"==typeof e.Buffer.isBuffer?e.Buffer.isBuffer(t):!(null==t||!t._isBuffer)}var a=n(19),s=Object.prototype.hasOwnProperty,u=Array.prototype.slice,f="foo"===function(){}.name;function l(t){return Object.prototype.toString.call(t)}function h(t){return!o(t)&&("function"==typeof e.ArrayBuffer&&("function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(t):!!t&&(t instanceof DataView||!!(t.buffer&&t.buffer instanceof ArrayBuffer))))}var c=t.exports=w,d=/\s*function\s+([^\(\s]*)\s*/;function p(t){if(a.isFunction(t)){if(f)return t.name;var e=t.toString().match(d);return e&&e[1]}}function _(t,e){return"string"==typeof t?t.length<e?t:t.slice(0,e):t}function g(t){if(f||!a.isFunction(t))return a.inspect(t);var e=p(t);return"[Function"+(e?": "+e:"")+"]"}function b(t,e,n,r,i){throw new c.AssertionError({message:n,actual:t,expected:e,operator:r,stackStartFunction:i})}function w(t,e){t||b(t,!0,e,"==",c.ok)}function y(t,e,n,r){if(t===e)return!0;if(o(t)&&o(e))return 0===i(t,e);if(a.isDate(t)&&a.isDate(e))return t.getTime()===e.getTime();if(a.isRegExp(t)&&a.isRegExp(e))return t.source===e.source&&t.global===e.global&&t.multiline===e.multiline&&t.lastIndex===e.lastIndex&&t.ignoreCase===e.ignoreCase;if(null!==t&&"object"==typeof t||null!==e&&"object"==typeof e){if(h(t)&&h(e)&&l(t)===l(e)&&!(t instanceof Float32Array||t instanceof Float64Array))return 0===i(new Uint8Array(t.buffer),new Uint8Array(e.buffer));if(o(t)!==o(e))return!1;var s=(r=r||{actual:[],expected:[]}).actual.indexOf(t);return-1!==s&&s===r.expected.indexOf(e)||(r.actual.push(t),r.expected.push(e),function(t,e,n,r){if(null==t||null==e)return!1;if(a.isPrimitive(t)||a.isPrimitive(e))return t===e;if(n&&Object.getPrototypeOf(t)!==Object.getPrototypeOf(e))return!1;var i=m(t),o=m(e);if(i&&!o||!i&&o)return!1;if(i)return t=u.call(t),e=u.call(e),y(t,e,n);var s,f,l=k(t),h=k(e);if(l.length!==h.length)return!1;for(l.sort(),h.sort(),f=l.length-1;f>=0;f--)if(l[f]!==h[f])return!1;for(f=l.length-1;f>=0;f--)if(s=l[f],!y(t[s],e[s],n,r))return!1;return!0}(t,e,n,r))}return n?t===e:t==e}function m(t){return"[object Arguments]"==Object.prototype.toString.call(t)}function v(t,e){if(!t||!e)return!1;if("[object RegExp]"==Object.prototype.toString.call(e))return e.test(t);try{if(t instanceof e)return!0}catch(t){}return!Error.isPrototypeOf(e)&&!0===e.call({},t)}function E(t,e,n,r){var i;if("function"!=typeof e)throw new TypeError('"block" argument must be a function');"string"==typeof n&&(r=n,n=null),i=function(t){var e;try{t()}catch(t){e=t}return e}(e),r=(n&&n.name?" ("+n.name+").":".")+(r?" "+r:"."),t&&!i&&b(i,n,"Missing expected exception"+r);var o="string"==typeof r,s=!t&&i&&!n;if((!t&&a.isError(i)&&o&&v(i,n)||s)&&b(i,n,"Got unwanted exception"+r),t&&i&&n&&!v(i,n)||!t&&i)throw i}c.AssertionError=function(t){this.name="AssertionError",this.actual=t.actual,this.expected=t.expected,this.operator=t.operator,t.message?(this.message=t.message,this.generatedMessage=!1):(this.message=function(t){return _(g(t.actual),128)+" "+t.operator+" "+_(g(t.expected),128)}(this),this.generatedMessage=!0);var e=t.stackStartFunction||b;if(Error.captureStackTrace)Error.captureStackTrace(this,e);else{var n=new Error;if(n.stack){var r=n.stack,i=p(e),o=r.indexOf("\n"+i);if(o>=0){var a=r.indexOf("\n",o+1);r=r.substring(a+1)}this.stack=r}}},a.inherits(c.AssertionError,Error),c.fail=b,c.ok=w,c.equal=function(t,e,n){t!=e&&b(t,e,n,"==",c.equal)},c.notEqual=function(t,e,n){t==e&&b(t,e,n,"!=",c.notEqual)},c.deepEqual=function(t,e,n){y(t,e,!1)||b(t,e,n,"deepEqual",c.deepEqual)},c.deepStrictEqual=function(t,e,n){y(t,e,!0)||b(t,e,n,"deepStrictEqual",c.deepStrictEqual)},c.notDeepEqual=function(t,e,n){y(t,e,!1)&&b(t,e,n,"notDeepEqual",c.notDeepEqual)},c.notDeepStrictEqual=function t(e,n,r){y(e,n,!0)&&b(e,n,r,"notDeepStrictEqual",t)},c.strictEqual=function(t,e,n){t!==e&&b(t,e,n,"===",c.strictEqual)},c.notStrictEqual=function(t,e,n){t===e&&b(t,e,n,"!==",c.notStrictEqual)},c.throws=function(t,e,n){E(!0,t,e,n)},c.doesNotThrow=function(t,e,n){E(!1,t,e,n)},c.ifError=function(t){if(t)throw t},c.strict=r((function t(e,n){e||b(e,!0,n,"==",t)}),c,{equal:c.strictEqual,deepEqual:c.deepStrictEqual,notEqual:c.notStrictEqual,notDeepEqual:c.notDeepStrictEqual}),c.strict.strict=c.strict;var k=Object.keys||function(t){var e=[];for(var n in t)s.call(t,n)&&e.push(n);return e}}).call(this,n(1))},function(t,e,n){(function(t){var r=Object.getOwnPropertyDescriptors||function(t){for(var e=Object.keys(t),n={},r=0;r<e.length;r++)n[e[r]]=Object.getOwnPropertyDescriptor(t,e[r]);return n},i=/%[sdj%]/g;e.format=function(t){if(!b(t)){for(var e=[],n=0;n<arguments.length;n++)e.push(s(arguments[n]));return e.join(" ")}n=1;for(var r=arguments,o=r.length,a=String(t).replace(i,(function(t){if("%%"===t)return"%";if(n>=o)return t;switch(t){case"%s":return String(r[n++]);case"%d":return Number(r[n++]);case"%j":try{return JSON.stringify(r[n++])}catch(t){return"[Circular]"}default:return t}})),u=r[n];n<o;u=r[++n])_(u)||!m(u)?a+=" "+u:a+=" "+s(u);return a},e.deprecate=function(n,r){if(void 0!==t&&!0===t.noDeprecation)return n;if(void 0===t)return function(){return e.deprecate(n,r).apply(this,arguments)};var i=!1;return function(){if(!i){if(t.throwDeprecation)throw new Error(r);t.traceDeprecation?console.trace(r):console.error(r),i=!0}return n.apply(this,arguments)}};var o,a={};function s(t,n){var r={seen:[],stylize:f};return arguments.length>=3&&(r.depth=arguments[2]),arguments.length>=4&&(r.colors=arguments[3]),p(n)?r.showHidden=n:n&&e._extend(r,n),w(r.showHidden)&&(r.showHidden=!1),w(r.depth)&&(r.depth=2),w(r.colors)&&(r.colors=!1),w(r.customInspect)&&(r.customInspect=!0),r.colors&&(r.stylize=u),l(r,t,r.depth)}function u(t,e){var n=s.styles[e];return n?"["+s.colors[n][0]+"m"+t+"["+s.colors[n][1]+"m":t}function f(t,e){return t}function l(t,n,r){if(t.customInspect&&n&&k(n.inspect)&&n.inspect!==e.inspect&&(!n.constructor||n.constructor.prototype!==n)){var i=n.inspect(r,t);return b(i)||(i=l(t,i,r)),i}var o=function(t,e){if(w(e))return t.stylize("undefined","undefined");if(b(e)){var n="'"+JSON.stringify(e).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return t.stylize(n,"string")}if(g(e))return t.stylize(""+e,"number");if(p(e))return t.stylize(""+e,"boolean");if(_(e))return t.stylize("null","null")}(t,n);if(o)return o;var a=Object.keys(n),s=function(t){var e={};return t.forEach((function(t,n){e[t]=!0})),e}(a);if(t.showHidden&&(a=Object.getOwnPropertyNames(n)),E(n)&&(a.indexOf("message")>=0||a.indexOf("description")>=0))return h(n);if(0===a.length){if(k(n)){var u=n.name?": "+n.name:"";return t.stylize("[Function"+u+"]","special")}if(y(n))return t.stylize(RegExp.prototype.toString.call(n),"regexp");if(v(n))return t.stylize(Date.prototype.toString.call(n),"date");if(E(n))return h(n)}var f,m="",S=!1,x=["{","}"];(d(n)&&(S=!0,x=["[","]"]),k(n))&&(m=" [Function"+(n.name?": "+n.name:"")+"]");return y(n)&&(m=" "+RegExp.prototype.toString.call(n)),v(n)&&(m=" "+Date.prototype.toUTCString.call(n)),E(n)&&(m=" "+h(n)),0!==a.length||S&&0!=n.length?r<0?y(n)?t.stylize(RegExp.prototype.toString.call(n),"regexp"):t.stylize("[Object]","special"):(t.seen.push(n),f=S?function(t,e,n,r,i){for(var o=[],a=0,s=e.length;a<s;++a)A(e,String(a))?o.push(c(t,e,n,r,String(a),!0)):o.push("");return i.forEach((function(i){i.match(/^\d+$/)||o.push(c(t,e,n,r,i,!0))})),o}(t,n,r,s,a):a.map((function(e){return c(t,n,r,s,e,S)})),t.seen.pop(),function(t,e,n){if(t.reduce((function(t,e){return 0,e.indexOf("\n")>=0&&0,t+e.replace(/\u001b\[\d\d?m/g,"").length+1}),0)>60)return n[0]+(""===e?"":e+"\n ")+" "+t.join(",\n  ")+" "+n[1];return n[0]+e+" "+t.join(", ")+" "+n[1]}(f,m,x)):x[0]+m+x[1]}function h(t){return"["+Error.prototype.toString.call(t)+"]"}function c(t,e,n,r,i,o){var a,s,u;if((u=Object.getOwnPropertyDescriptor(e,i)||{value:e[i]}).get?s=u.set?t.stylize("[Getter/Setter]","special"):t.stylize("[Getter]","special"):u.set&&(s=t.stylize("[Setter]","special")),A(r,i)||(a="["+i+"]"),s||(t.seen.indexOf(u.value)<0?(s=_(n)?l(t,u.value,null):l(t,u.value,n-1)).indexOf("\n")>-1&&(s=o?s.split("\n").map((function(t){return"  "+t})).join("\n").substr(2):"\n"+s.split("\n").map((function(t){return"   "+t})).join("\n")):s=t.stylize("[Circular]","special")),w(a)){if(o&&i.match(/^\d+$/))return s;(a=JSON.stringify(""+i)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(a=a.substr(1,a.length-2),a=t.stylize(a,"name")):(a=a.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),a=t.stylize(a,"string"))}return a+": "+s}function d(t){return Array.isArray(t)}function p(t){return"boolean"==typeof t}function _(t){return null===t}function g(t){return"number"==typeof t}function b(t){return"string"==typeof t}function w(t){return void 0===t}function y(t){return m(t)&&"[object RegExp]"===S(t)}function m(t){return"object"==typeof t&&null!==t}function v(t){return m(t)&&"[object Date]"===S(t)}function E(t){return m(t)&&("[object Error]"===S(t)||t instanceof Error)}function k(t){return"function"==typeof t}function S(t){return Object.prototype.toString.call(t)}function x(t){return t<10?"0"+t.toString(10):t.toString(10)}e.debuglog=function(n){if(w(o)&&(o=t.env.NODE_DEBUG||""),n=n.toUpperCase(),!a[n])if(new RegExp("\\b"+n+"\\b","i").test(o)){var r=t.pid;a[n]=function(){var t=e.format.apply(e,arguments);console.error("%s %d: %s",n,r,t)}}else a[n]=function(){};return a[n]},e.inspect=s,s.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},s.styles={special:"cyan",number:"yellow",boolean:"yellow",undefined:"grey",null:"bold",string:"green",date:"magenta",regexp:"red"},e.isArray=d,e.isBoolean=p,e.isNull=_,e.isNullOrUndefined=function(t){return null==t},e.isNumber=g,e.isString=b,e.isSymbol=function(t){return"symbol"==typeof t},e.isUndefined=w,e.isRegExp=y,e.isObject=m,e.isDate=v,e.isError=E,e.isFunction=k,e.isPrimitive=function(t){return null===t||"boolean"==typeof t||"number"==typeof t||"string"==typeof t||"symbol"==typeof t||void 0===t},e.isBuffer=n(39);var T=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];function R(){var t=new Date,e=[x(t.getHours()),x(t.getMinutes()),x(t.getSeconds())].join(":");return[t.getDate(),T[t.getMonth()],e].join(" ")}function A(t,e){return Object.prototype.hasOwnProperty.call(t,e)}e.log=function(){console.log("%s - %s",R(),e.format.apply(e,arguments))},e.inherits=n(2),e._extend=function(t,e){if(!e||!m(e))return t;for(var n=Object.keys(e),r=n.length;r--;)t[n[r]]=e[n[r]];return t};var L="undefined"!=typeof Symbol?Symbol("util.promisify.custom"):void 0;function O(t,e){if(!t){var n=new Error("Promise was rejected with a falsy value");n.reason=t,t=n}return e(t)}e.promisify=function(t){if("function"!=typeof t)throw new TypeError('The "original" argument must be of type Function');if(L&&t[L]){var e;if("function"!=typeof(e=t[L]))throw new TypeError('The "util.promisify.custom" argument must be of type Function');return Object.defineProperty(e,L,{value:e,enumerable:!1,writable:!1,configurable:!0}),e}function e(){for(var e,n,r=new Promise((function(t,r){e=t,n=r})),i=[],o=0;o<arguments.length;o++)i.push(arguments[o]);i.push((function(t,r){t?n(t):e(r)}));try{t.apply(this,i)}catch(t){n(t)}return r}return Object.setPrototypeOf(e,Object.getPrototypeOf(t)),L&&Object.defineProperty(e,L,{value:e,enumerable:!1,writable:!1,configurable:!0}),Object.defineProperties(e,r(t))},e.promisify.custom=L,e.callbackify=function(e){if("function"!=typeof e)throw new TypeError('The "original" argument must be of type Function');function n(){for(var n=[],r=0;r<arguments.length;r++)n.push(arguments[r]);var i=n.pop();if("function"!=typeof i)throw new TypeError("The last argument must be of type Function");var o=this,a=function(){return i.apply(o,arguments)};e.apply(this,n).then((function(e){t.nextTick(a,null,e)}),(function(e){t.nextTick(O,e,a)}))}return Object.setPrototypeOf(n,Object.getPrototypeOf(e)),Object.defineProperties(n,r(e)),n}}).call(this,n(0))},function(t,e,n){"use strict";t.exports=function(t,e,n,r){for(var i=65535&t|0,o=t>>>16&65535|0,a=0;0!==n;){n-=a=n>2e3?2e3:n;do{o=o+(i=i+e[r++]|0)|0}while(--a);i%=65521,o%=65521}return i|o<<16|0}},function(t,e,n){"use strict";var r=function(){for(var t,e=[],n=0;n<256;n++){t=n;for(var r=0;r<8;r++)t=1&t?3988292384^t>>>1:t>>>1;e[n]=t}return e}();t.exports=function(t,e,n,i){var o=r,a=i+n;t^=-1;for(var s=i;s<a;s++)t=t>>>8^o[255&(t^e[s])];return-1^t}},function(t,e,n){"use strict";(function(t){var r=n(4).Buffer,i=n(25).Transform,o=n(37),a=n(19),s=n(18).ok,u=n(4).kMaxLength,f="Cannot create final Buffer. It would be larger than 0x"+u.toString(16)+" bytes";o.Z_MIN_WINDOWBITS=8,o.Z_MAX_WINDOWBITS=15,o.Z_DEFAULT_WINDOWBITS=15,o.Z_MIN_CHUNK=64,o.Z_MAX_CHUNK=1/0,o.Z_DEFAULT_CHUNK=16384,o.Z_MIN_MEMLEVEL=1,o.Z_MAX_MEMLEVEL=9,o.Z_DEFAULT_MEMLEVEL=8,o.Z_MIN_LEVEL=-1,o.Z_MAX_LEVEL=9,o.Z_DEFAULT_LEVEL=o.Z_DEFAULT_COMPRESSION;for(var l=Object.keys(o),h=0;h<l.length;h++){var c=l[h];c.match(/^Z/)&&Object.defineProperty(e,c,{enumerable:!0,value:o[c],writable:!1})}for(var d={Z_OK:o.Z_OK,Z_STREAM_END:o.Z_STREAM_END,Z_NEED_DICT:o.Z_NEED_DICT,Z_ERRNO:o.Z_ERRNO,Z_STREAM_ERROR:o.Z_STREAM_ERROR,Z_DATA_ERROR:o.Z_DATA_ERROR,Z_MEM_ERROR:o.Z_MEM_ERROR,Z_BUF_ERROR:o.Z_BUF_ERROR,Z_VERSION_ERROR:o.Z_VERSION_ERROR},p=Object.keys(d),_=0;_<p.length;_++){var g=p[_];d[d[g]]=g}function b(t,e,n){var i=[],o=0;function a(){for(var e;null!==(e=t.read());)i.push(e),o+=e.length;t.once("readable",a)}function s(){var e,a=null;o>=u?a=new RangeError(f):e=r.concat(i,o),i=[],t.close(),n(a,e)}t.on("error",(function(e){t.removeListener("end",s),t.removeListener("readable",a),n(e)})),t.on("end",s),t.end(e),a()}function w(t,e){if("string"==typeof e&&(e=r.from(e)),!r.isBuffer(e))throw new TypeError("Not a string or buffer");var n=t._finishFlushFlag;return t._processChunk(e,n)}function y(t){if(!(this instanceof y))return new y(t);R.call(this,t,o.DEFLATE)}function m(t){if(!(this instanceof m))return new m(t);R.call(this,t,o.INFLATE)}function v(t){if(!(this instanceof v))return new v(t);R.call(this,t,o.GZIP)}function E(t){if(!(this instanceof E))return new E(t);R.call(this,t,o.GUNZIP)}function k(t){if(!(this instanceof k))return new k(t);R.call(this,t,o.DEFLATERAW)}function S(t){if(!(this instanceof S))return new S(t);R.call(this,t,o.INFLATERAW)}function x(t){if(!(this instanceof x))return new x(t);R.call(this,t,o.UNZIP)}function T(t){return t===o.Z_NO_FLUSH||t===o.Z_PARTIAL_FLUSH||t===o.Z_SYNC_FLUSH||t===o.Z_FULL_FLUSH||t===o.Z_FINISH||t===o.Z_BLOCK}function R(t,n){var a=this;if(this._opts=t=t||{},this._chunkSize=t.chunkSize||e.Z_DEFAULT_CHUNK,i.call(this,t),t.flush&&!T(t.flush))throw new Error("Invalid flush flag: "+t.flush);if(t.finishFlush&&!T(t.finishFlush))throw new Error("Invalid flush flag: "+t.finishFlush);if(this._flushFlag=t.flush||o.Z_NO_FLUSH,this._finishFlushFlag=void 0!==t.finishFlush?t.finishFlush:o.Z_FINISH,t.chunkSize&&(t.chunkSize<e.Z_MIN_CHUNK||t.chunkSize>e.Z_MAX_CHUNK))throw new Error("Invalid chunk size: "+t.chunkSize);if(t.windowBits&&(t.windowBits<e.Z_MIN_WINDOWBITS||t.windowBits>e.Z_MAX_WINDOWBITS))throw new Error("Invalid windowBits: "+t.windowBits);if(t.level&&(t.level<e.Z_MIN_LEVEL||t.level>e.Z_MAX_LEVEL))throw new Error("Invalid compression level: "+t.level);if(t.memLevel&&(t.memLevel<e.Z_MIN_MEMLEVEL||t.memLevel>e.Z_MAX_MEMLEVEL))throw new Error("Invalid memLevel: "+t.memLevel);if(t.strategy&&t.strategy!=e.Z_FILTERED&&t.strategy!=e.Z_HUFFMAN_ONLY&&t.strategy!=e.Z_RLE&&t.strategy!=e.Z_FIXED&&t.strategy!=e.Z_DEFAULT_STRATEGY)throw new Error("Invalid strategy: "+t.strategy);if(t.dictionary&&!r.isBuffer(t.dictionary))throw new Error("Invalid dictionary: it should be a Buffer instance");this._handle=new o.Zlib(n);var s=this;this._hadError=!1,this._handle.onerror=function(t,n){A(s),s._hadError=!0;var r=new Error(t);r.errno=n,r.code=e.codes[n],s.emit("error",r)};var u=e.Z_DEFAULT_COMPRESSION;"number"==typeof t.level&&(u=t.level);var f=e.Z_DEFAULT_STRATEGY;"number"==typeof t.strategy&&(f=t.strategy),this._handle.init(t.windowBits||e.Z_DEFAULT_WINDOWBITS,u,t.memLevel||e.Z_DEFAULT_MEMLEVEL,f,t.dictionary),this._buffer=r.allocUnsafe(this._chunkSize),this._offset=0,this._level=u,this._strategy=f,this.once("end",this.close),Object.defineProperty(this,"_closed",{get:function(){return!a._handle},configurable:!0,enumerable:!0})}function A(e,n){n&&t.nextTick(n),e._handle&&(e._handle.close(),e._handle=null)}function L(t){t.emit("close")}Object.defineProperty(e,"codes",{enumerable:!0,value:Object.freeze(d),writable:!1}),e.Deflate=y,e.Inflate=m,e.Gzip=v,e.Gunzip=E,e.DeflateRaw=k,e.InflateRaw=S,e.Unzip=x,e.createDeflate=function(t){return new y(t)},e.createInflate=function(t){return new m(t)},e.createDeflateRaw=function(t){return new k(t)},e.createInflateRaw=function(t){return new S(t)},e.createGzip=function(t){return new v(t)},e.createGunzip=function(t){return new E(t)},e.createUnzip=function(t){return new x(t)},e.deflate=function(t,e,n){return"function"==typeof e&&(n=e,e={}),b(new y(e),t,n)},e.deflateSync=function(t,e){return w(new y(e),t)},e.gzip=function(t,e,n){return"function"==typeof e&&(n=e,e={}),b(new v(e),t,n)},e.gzipSync=function(t,e){return w(new v(e),t)},e.deflateRaw=function(t,e,n){return"function"==typeof e&&(n=e,e={}),b(new k(e),t,n)},e.deflateRawSync=function(t,e){return w(new k(e),t)},e.unzip=function(t,e,n){return"function"==typeof e&&(n=e,e={}),b(new x(e),t,n)},e.unzipSync=function(t,e){return w(new x(e),t)},e.inflate=function(t,e,n){return"function"==typeof e&&(n=e,e={}),b(new m(e),t,n)},e.inflateSync=function(t,e){return w(new m(e),t)},e.gunzip=function(t,e,n){return"function"==typeof e&&(n=e,e={}),b(new E(e),t,n)},e.gunzipSync=function(t,e){return w(new E(e),t)},e.inflateRaw=function(t,e,n){return"function"==typeof e&&(n=e,e={}),b(new S(e),t,n)},e.inflateRawSync=function(t,e){return w(new S(e),t)},a.inherits(R,i),R.prototype.params=function(n,r,i){if(n<e.Z_MIN_LEVEL||n>e.Z_MAX_LEVEL)throw new RangeError("Invalid compression level: "+n);if(r!=e.Z_FILTERED&&r!=e.Z_HUFFMAN_ONLY&&r!=e.Z_RLE&&r!=e.Z_FIXED&&r!=e.Z_DEFAULT_STRATEGY)throw new TypeError("Invalid strategy: "+r);if(this._level!==n||this._strategy!==r){var a=this;this.flush(o.Z_SYNC_FLUSH,(function(){s(a._handle,"zlib binding closed"),a._handle.params(n,r),a._hadError||(a._level=n,a._strategy=r,i&&i())}))}else t.nextTick(i)},R.prototype.reset=function(){return s(this._handle,"zlib binding closed"),this._handle.reset()},R.prototype._flush=function(t){this._transform(r.alloc(0),"",t)},R.prototype.flush=function(e,n){var i=this,a=this._writableState;("function"==typeof e||void 0===e&&!n)&&(n=e,e=o.Z_FULL_FLUSH),a.ended?n&&t.nextTick(n):a.ending?n&&this.once("end",n):a.needDrain?n&&this.once("drain",(function(){return i.flush(e,n)})):(this._flushFlag=e,this.write(r.alloc(0),"",n))},R.prototype.close=function(e){A(this,e),t.nextTick(L,this)},R.prototype._transform=function(t,e,n){var i,a=this._writableState,s=(a.ending||a.ended)&&(!t||a.length===t.length);return null===t||r.isBuffer(t)?this._handle?(s?i=this._finishFlushFlag:(i=this._flushFlag,t.length>=a.length&&(this._flushFlag=this._opts.flush||o.Z_NO_FLUSH)),void this._processChunk(t,i,n)):n(new Error("zlib binding closed")):n(new Error("invalid input"))},R.prototype._processChunk=function(t,e,n){var i=t&&t.length,o=this._chunkSize-this._offset,a=0,l=this,h="function"==typeof n;if(!h){var c,d=[],p=0;this.on("error",(function(t){c=t})),s(this._handle,"zlib binding closed");do{var _=this._handle.writeSync(e,t,a,i,this._buffer,this._offset,o)}while(!this._hadError&&w(_[0],_[1]));if(this._hadError)throw c;if(p>=u)throw A(this),new RangeError(f);var g=r.concat(d,p);return A(this),g}s(this._handle,"zlib binding closed");var b=this._handle.write(e,t,a,i,this._buffer,this._offset,o);function w(u,f){if(this&&(this.buffer=null,this.callback=null),!l._hadError){var c=o-f;if(s(c>=0,"have should not go down"),c>0){var _=l._buffer.slice(l._offset,l._offset+c);l._offset+=c,h?l.push(_):(d.push(_),p+=_.length)}if((0===f||l._offset>=l._chunkSize)&&(o=l._chunkSize,l._offset=0,l._buffer=r.allocUnsafe(l._chunkSize)),0===f){if(a+=i-u,i=u,!h)return!0;var g=l._handle.write(e,t,a,i,l._buffer,l._offset,l._chunkSize);return g.callback=w,void(g.buffer=t)}if(!h)return!1;n()}}b.buffer=t,b.callback=w},a.inherits(y,R),a.inherits(m,R),a.inherits(v,R),a.inherits(E,R),a.inherits(k,R),a.inherits(S,R),a.inherits(x,R)}).call(this,n(0))},function(t,e,n){"use strict";e.byteLength=function(t){var e=f(t),n=e[0],r=e[1];return 3*(n+r)/4-r},e.toByteArray=function(t){var e,n,r=f(t),a=r[0],s=r[1],u=new o(function(t,e,n){return 3*(e+n)/4-n}(0,a,s)),l=0,h=s>0?a-4:a;for(n=0;n<h;n+=4)e=i[t.charCodeAt(n)]<<18|i[t.charCodeAt(n+1)]<<12|i[t.charCodeAt(n+2)]<<6|i[t.charCodeAt(n+3)],u[l++]=e>>16&255,u[l++]=e>>8&255,u[l++]=255&e;2===s&&(e=i[t.charCodeAt(n)]<<2|i[t.charCodeAt(n+1)]>>4,u[l++]=255&e);1===s&&(e=i[t.charCodeAt(n)]<<10|i[t.charCodeAt(n+1)]<<4|i[t.charCodeAt(n+2)]>>2,u[l++]=e>>8&255,u[l++]=255&e);return u},e.fromByteArray=function(t){for(var e,n=t.length,i=n%3,o=[],a=0,s=n-i;a<s;a+=16383)o.push(l(t,a,a+16383>s?s:a+16383));1===i?(e=t[n-1],o.push(r[e>>2]+r[e<<4&63]+"==")):2===i&&(e=(t[n-2]<<8)+t[n-1],o.push(r[e>>10]+r[e>>4&63]+r[e<<2&63]+"="));return o.join("")};for(var r=[],i=[],o="undefined"!=typeof Uint8Array?Uint8Array:Array,a="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",s=0,u=a.length;s<u;++s)r[s]=a[s],i[a.charCodeAt(s)]=s;function f(t){var e=t.length;if(e%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var n=t.indexOf("=");return-1===n&&(n=e),[n,n===e?0:4-n%4]}function l(t,e,n){for(var i,o,a=[],s=e;s<n;s+=3)i=(t[s]<<16&16711680)+(t[s+1]<<8&65280)+(255&t[s+2]),a.push(r[(o=i)>>18&63]+r[o>>12&63]+r[o>>6&63]+r[63&o]);return a.join("")}i["-".charCodeAt(0)]=62,i["_".charCodeAt(0)]=63},function(t,e){e.read=function(t,e,n,r,i){var o,a,s=8*i-r-1,u=(1<<s)-1,f=u>>1,l=-7,h=n?i-1:0,c=n?-1:1,d=t[e+h];for(h+=c,o=d&(1<<-l)-1,d>>=-l,l+=s;l>0;o=256*o+t[e+h],h+=c,l-=8);for(a=o&(1<<-l)-1,o>>=-l,l+=r;l>0;a=256*a+t[e+h],h+=c,l-=8);if(0===o)o=1-f;else{if(o===u)return a?NaN:1/0*(d?-1:1);a+=Math.pow(2,r),o-=f}return(d?-1:1)*a*Math.pow(2,o-r)},e.write=function(t,e,n,r,i,o){var a,s,u,f=8*o-i-1,l=(1<<f)-1,h=l>>1,c=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,d=r?0:o-1,p=r?1:-1,_=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(s=isNaN(e)?1:0,a=l):(a=Math.floor(Math.log(e)/Math.LN2),e*(u=Math.pow(2,-a))<1&&(a--,u*=2),(e+=a+h>=1?c/u:c*Math.pow(2,1-h))*u>=2&&(a++,u/=2),a+h>=l?(s=0,a=l):a+h>=1?(s=(e*u-1)*Math.pow(2,i),a+=h):(s=e*Math.pow(2,h-1)*Math.pow(2,i),a=0));i>=8;t[n+d]=255&s,d+=p,s/=256,i-=8);for(a=a<<i|s,f+=i;f>0;t[n+d]=255&a,d+=p,a/=256,f-=8);t[n+d-p]|=128*_}},function(t,e,n){t.exports=i;var r=n(9).EventEmitter;function i(){r.call(this)}n(2)(i,r),i.Readable=n(10),i.Writable=n(33),i.Duplex=n(34),i.Transform=n(35),i.PassThrough=n(36),i.Stream=i,i.prototype.pipe=function(t,e){var n=this;function i(e){t.writable&&!1===t.write(e)&&n.pause&&n.pause()}function o(){n.readable&&n.resume&&n.resume()}n.on("data",i),t.on("drain",o),t._isStdio||e&&!1===e.end||(n.on("end",s),n.on("close",u));var a=!1;function s(){a||(a=!0,t.end())}function u(){a||(a=!0,"function"==typeof t.destroy&&t.destroy())}function f(t){if(l(),0===r.listenerCount(this,"error"))throw t}function l(){n.removeListener("data",i),t.removeListener("drain",o),n.removeListener("end",s),n.removeListener("close",u),n.removeListener("error",f),t.removeListener("error",f),n.removeListener("end",l),n.removeListener("close",l),t.removeListener("close",l)}return n.on("error",f),t.on("error",f),n.on("end",l),n.on("close",l),t.on("close",l),t.emit("pipe",n),t}},function(t,e){},function(t,e,n){"use strict";var r=n(7).Buffer,i=n(28);t.exports=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.head=null,this.tail=null,this.length=0}return t.prototype.push=function(t){var e={data:t,next:null};this.length>0?this.tail.next=e:this.head=e,this.tail=e,++this.length},t.prototype.unshift=function(t){var e={data:t,next:this.head};0===this.length&&(this.tail=e),this.head=e,++this.length},t.prototype.shift=function(){if(0!==this.length){var t=this.head.data;return 1===this.length?this.head=this.tail=null:this.head=this.head.next,--this.length,t}},t.prototype.clear=function(){this.head=this.tail=null,this.length=0},t.prototype.join=function(t){if(0===this.length)return"";for(var e=this.head,n=""+e.data;e=e.next;)n+=t+e.data;return n},t.prototype.concat=function(t){if(0===this.length)return r.alloc(0);if(1===this.length)return this.head.data;for(var e,n,i,o=r.allocUnsafe(t>>>0),a=this.head,s=0;a;)e=a.data,n=o,i=s,e.copy(n,i),s+=a.data.length,a=a.next;return o},t}(),i&&i.inspect&&i.inspect.custom&&(t.exports.prototype[i.inspect.custom]=function(){var t=i.inspect({length:this.length});return this.constructor.name+" "+t})},function(t,e){},function(t,e,n){(function(t){var r=void 0!==t&&t||"undefined"!=typeof self&&self||window,i=Function.prototype.apply;function o(t,e){this._id=t,this._clearFn=e}e.setTimeout=function(){return new o(i.call(setTimeout,r,arguments),clearTimeout)},e.setInterval=function(){return new o(i.call(setInterval,r,arguments),clearInterval)},e.clearTimeout=e.clearInterval=function(t){t&&t.close()},o.prototype.unref=o.prototype.ref=function(){},o.prototype.close=function(){this._clearFn.call(r,this._id)},e.enroll=function(t,e){clearTimeout(t._idleTimeoutId),t._idleTimeout=e},e.unenroll=function(t){clearTimeout(t._idleTimeoutId),t._idleTimeout=-1},e._unrefActive=e.active=function(t){clearTimeout(t._idleTimeoutId);var e=t._idleTimeout;e>=0&&(t._idleTimeoutId=setTimeout((function(){t._onTimeout&&t._onTimeout()}),e))},n(30),e.setImmediate="undefined"!=typeof self&&self.setImmediate||void 0!==t&&t.setImmediate||this&&this.setImmediate,e.clearImmediate="undefined"!=typeof self&&self.clearImmediate||void 0!==t&&t.clearImmediate||this&&this.clearImmediate}).call(this,n(1))},function(t,e,n){(function(t,e){!function(t,n){"use strict";if(!t.setImmediate){var r,i,o,a,s,u=1,f={},l=!1,h=t.document,c=Object.getPrototypeOf&&Object.getPrototypeOf(t);c=c&&c.setTimeout?c:t,"[object process]"==={}.toString.call(t.process)?r=function(t){e.nextTick((function(){p(t)}))}:!function(){if(t.postMessage&&!t.importScripts){var e=!0,n=t.onmessage;return t.onmessage=function(){e=!1},t.postMessage("","*"),t.onmessage=n,e}}()?t.MessageChannel?((o=new MessageChannel).port1.onmessage=function(t){p(t.data)},r=function(t){o.port2.postMessage(t)}):h&&"onreadystatechange"in h.createElement("script")?(i=h.documentElement,r=function(t){var e=h.createElement("script");e.onreadystatechange=function(){p(t),e.onreadystatechange=null,i.removeChild(e),e=null},i.appendChild(e)}):r=function(t){setTimeout(p,0,t)}:(a="setImmediate$"+Math.random()+"$",s=function(e){e.source===t&&"string"==typeof e.data&&0===e.data.indexOf(a)&&p(+e.data.slice(a.length))},t.addEventListener?t.addEventListener("message",s,!1):t.attachEvent("onmessage",s),r=function(e){t.postMessage(a+e,"*")}),c.setImmediate=function(t){"function"!=typeof t&&(t=new Function(""+t));for(var e=new Array(arguments.length-1),n=0;n<e.length;n++)e[n]=arguments[n+1];var i={callback:t,args:e};return f[u]=i,r(u),u++},c.clearImmediate=d}function d(t){delete f[t]}function p(t){if(l)setTimeout(p,0,t);else{var e=f[t];if(e){l=!0;try{!function(t){var e=t.callback,r=t.args;switch(r.length){case 0:e();break;case 1:e(r[0]);break;case 2:e(r[0],r[1]);break;case 3:e(r[0],r[1],r[2]);break;default:e.apply(n,r)}}(e)}finally{d(t),l=!1}}}}}("undefined"==typeof self?void 0===t?this:t:self)}).call(this,n(1),n(0))},function(t,e,n){(function(e){function n(t){try{if(!e.localStorage)return!1}catch(t){return!1}var n=e.localStorage[t];return null!=n&&"true"===String(n).toLowerCase()}t.exports=function(t,e){if(n("noDeprecation"))return t;var r=!1;return function(){if(!r){if(n("throwDeprecation"))throw new Error(e);n("traceDeprecation")?console.trace(e):console.warn(e),r=!0}return t.apply(this,arguments)}}}).call(this,n(1))},function(t,e,n){"use strict";t.exports=o;var r=n(17),i=n(5);function o(t){if(!(this instanceof o))return new o(t);r.call(this,t)}i.inherits=n(2),i.inherits(o,r),o.prototype._transform=function(t,e,n){n(null,t)}},function(t,e,n){t.exports=n(11)},function(t,e,n){t.exports=n(3)},function(t,e,n){t.exports=n(10).Transform},function(t,e,n){t.exports=n(10).PassThrough},function(t,e,n){"use strict";(function(t,r){var i=n(18),o=n(40),a=n(41),s=n(44),u=n(47);for(var f in u)e[f]=u[f];e.NONE=0,e.DEFLATE=1,e.INFLATE=2,e.GZIP=3,e.GUNZIP=4,e.DEFLATERAW=5,e.INFLATERAW=6,e.UNZIP=7;function l(t){if("number"!=typeof t||t<e.DEFLATE||t>e.UNZIP)throw new TypeError("Bad argument");this.dictionary=null,this.err=0,this.flush=0,this.init_done=!1,this.level=0,this.memLevel=0,this.mode=t,this.strategy=0,this.windowBits=0,this.write_in_progress=!1,this.pending_close=!1,this.gzip_id_bytes_read=0}l.prototype.close=function(){this.write_in_progress?this.pending_close=!0:(this.pending_close=!1,i(this.init_done,"close before init"),i(this.mode<=e.UNZIP),this.mode===e.DEFLATE||this.mode===e.GZIP||this.mode===e.DEFLATERAW?a.deflateEnd(this.strm):this.mode!==e.INFLATE&&this.mode!==e.GUNZIP&&this.mode!==e.INFLATERAW&&this.mode!==e.UNZIP||s.inflateEnd(this.strm),this.mode=e.NONE,this.dictionary=null)},l.prototype.write=function(t,e,n,r,i,o,a){return this._write(!0,t,e,n,r,i,o,a)},l.prototype.writeSync=function(t,e,n,r,i,o,a){return this._write(!1,t,e,n,r,i,o,a)},l.prototype._write=function(n,o,a,s,u,f,l,h){if(i.equal(arguments.length,8),i(this.init_done,"write before init"),i(this.mode!==e.NONE,"already finalized"),i.equal(!1,this.write_in_progress,"write already in progress"),i.equal(!1,this.pending_close,"close is pending"),this.write_in_progress=!0,i.equal(!1,void 0===o,"must provide flush value"),this.write_in_progress=!0,o!==e.Z_NO_FLUSH&&o!==e.Z_PARTIAL_FLUSH&&o!==e.Z_SYNC_FLUSH&&o!==e.Z_FULL_FLUSH&&o!==e.Z_FINISH&&o!==e.Z_BLOCK)throw new Error("Invalid flush value");if(null==a&&(a=t.alloc(0),u=0,s=0),this.strm.avail_in=u,this.strm.input=a,this.strm.next_in=s,this.strm.avail_out=h,this.strm.output=f,this.strm.next_out=l,this.flush=o,!n)return this._process(),this._checkError()?this._afterSync():void 0;var c=this;return r.nextTick((function(){c._process(),c._after()})),this},l.prototype._afterSync=function(){var t=this.strm.avail_out,e=this.strm.avail_in;return this.write_in_progress=!1,[e,t]},l.prototype._process=function(){var t=null;switch(this.mode){case e.DEFLATE:case e.GZIP:case e.DEFLATERAW:this.err=a.deflate(this.strm,this.flush);break;case e.UNZIP:switch(this.strm.avail_in>0&&(t=this.strm.next_in),this.gzip_id_bytes_read){case 0:if(null===t)break;if(31!==this.strm.input[t]){this.mode=e.INFLATE;break}if(this.gzip_id_bytes_read=1,t++,1===this.strm.avail_in)break;case 1:if(null===t)break;139===this.strm.input[t]?(this.gzip_id_bytes_read=2,this.mode=e.GUNZIP):this.mode=e.INFLATE;break;default:throw new Error("invalid number of gzip magic number bytes read")}case e.INFLATE:case e.GUNZIP:case e.INFLATERAW:for(this.err=s.inflate(this.strm,this.flush),this.err===e.Z_NEED_DICT&&this.dictionary&&(this.err=s.inflateSetDictionary(this.strm,this.dictionary),this.err===e.Z_OK?this.err=s.inflate(this.strm,this.flush):this.err===e.Z_DATA_ERROR&&(this.err=e.Z_NEED_DICT));this.strm.avail_in>0&&this.mode===e.GUNZIP&&this.err===e.Z_STREAM_END&&0!==this.strm.next_in[0];)this.reset(),this.err=s.inflate(this.strm,this.flush);break;default:throw new Error("Unknown mode "+this.mode)}},l.prototype._checkError=function(){switch(this.err){case e.Z_OK:case e.Z_BUF_ERROR:if(0!==this.strm.avail_out&&this.flush===e.Z_FINISH)return this._error("unexpected end of file"),!1;break;case e.Z_STREAM_END:break;case e.Z_NEED_DICT:return null==this.dictionary?this._error("Missing dictionary"):this._error("Bad dictionary"),!1;default:return this._error("Zlib error"),!1}return!0},l.prototype._after=function(){if(this._checkError()){var t=this.strm.avail_out,e=this.strm.avail_in;this.write_in_progress=!1,this.callback(e,t),this.pending_close&&this.close()}},l.prototype._error=function(t){this.strm.msg&&(t=this.strm.msg),this.onerror(t,this.err),this.write_in_progress=!1,this.pending_close&&this.close()},l.prototype.init=function(t,n,r,o,a){i(4===arguments.length||5===arguments.length,"init(windowBits, level, memLevel, strategy, [dictionary])"),i(t>=8&&t<=15,"invalid windowBits"),i(n>=-1&&n<=9,"invalid compression level"),i(r>=1&&r<=9,"invalid memlevel"),i(o===e.Z_FILTERED||o===e.Z_HUFFMAN_ONLY||o===e.Z_RLE||o===e.Z_FIXED||o===e.Z_DEFAULT_STRATEGY,"invalid strategy"),this._init(n,t,r,o,a),this._setDictionary()},l.prototype.params=function(){throw new Error("deflateParams Not supported")},l.prototype.reset=function(){this._reset(),this._setDictionary()},l.prototype._init=function(t,n,r,i,u){switch(this.level=t,this.windowBits=n,this.memLevel=r,this.strategy=i,this.flush=e.Z_NO_FLUSH,this.err=e.Z_OK,this.mode!==e.GZIP&&this.mode!==e.GUNZIP||(this.windowBits+=16),this.mode===e.UNZIP&&(this.windowBits+=32),this.mode!==e.DEFLATERAW&&this.mode!==e.INFLATERAW||(this.windowBits=-1*this.windowBits),this.strm=new o,this.mode){case e.DEFLATE:case e.GZIP:case e.DEFLATERAW:this.err=a.deflateInit2(this.strm,this.level,e.Z_DEFLATED,this.windowBits,this.memLevel,this.strategy);break;case e.INFLATE:case e.GUNZIP:case e.INFLATERAW:case e.UNZIP:this.err=s.inflateInit2(this.strm,this.windowBits);break;default:throw new Error("Unknown mode "+this.mode)}this.err!==e.Z_OK&&this._error("Init error"),this.dictionary=u,this.write_in_progress=!1,this.init_done=!0},l.prototype._setDictionary=function(){if(null!=this.dictionary){switch(this.err=e.Z_OK,this.mode){case e.DEFLATE:case e.DEFLATERAW:this.err=a.deflateSetDictionary(this.strm,this.dictionary)}this.err!==e.Z_OK&&this._error("Failed to set dictionary")}},l.prototype._reset=function(){switch(this.err=e.Z_OK,this.mode){case e.DEFLATE:case e.DEFLATERAW:case e.GZIP:this.err=a.deflateReset(this.strm);break;case e.INFLATE:case e.INFLATERAW:case e.GUNZIP:this.err=s.inflateReset(this.strm)}this.err!==e.Z_OK&&this._error("Failed to reset stream")},e.Zlib=l}).call(this,n(4).Buffer,n(0))},function(t,e,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,i=Object.prototype.hasOwnProperty,o=Object.prototype.propertyIsEnumerable;function a(t){if(null==t)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(t)}t.exports=function(){try{if(!Object.assign)return!1;var t=new String("abc");if(t[5]="de","5"===Object.getOwnPropertyNames(t)[0])return!1;for(var e={},n=0;n<10;n++)e["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(e).map((function(t){return e[t]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(t){r[t]=t})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(t){return!1}}()?Object.assign:function(t,e){for(var n,s,u=a(t),f=1;f<arguments.length;f++){for(var l in n=Object(arguments[f]))i.call(n,l)&&(u[l]=n[l]);if(r){s=r(n);for(var h=0;h<s.length;h++)o.call(n,s[h])&&(u[s[h]]=n[s[h]])}}return u}},function(t,e){t.exports=function(t){return t&&"object"==typeof t&&"function"==typeof t.copy&&"function"==typeof t.fill&&"function"==typeof t.readUInt8}},function(t,e,n){"use strict";t.exports=function(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0}},function(t,e,n){"use strict";var r,i=n(8),o=n(42),a=n(20),s=n(21),u=n(43),f=0,l=1,h=3,c=4,d=5,p=0,_=1,g=-2,b=-3,w=-5,y=-1,m=1,v=2,E=3,k=4,S=0,x=2,T=8,R=9,A=15,L=8,O=286,I=30,N=19,z=2*O+1,B=15,M=3,P=258,U=P+M+1,D=32,F=42,j=69,Z=73,C=91,q=103,W=113,Y=666,H=1,G=2,K=3,V=4,X=3;function J(t,e){return t.msg=u[e],e}function $(t){return(t<<1)-(t>4?9:0)}function Q(t){for(var e=t.length;--e>=0;)t[e]=0}function tt(t){var e=t.state,n=e.pending;n>t.avail_out&&(n=t.avail_out),0!==n&&(i.arraySet(t.output,e.pending_buf,e.pending_out,n,t.next_out),t.next_out+=n,e.pending_out+=n,t.total_out+=n,t.avail_out-=n,e.pending-=n,0===e.pending&&(e.pending_out=0))}function et(t,e){o._tr_flush_block(t,t.block_start>=0?t.block_start:-1,t.strstart-t.block_start,e),t.block_start=t.strstart,tt(t.strm)}function nt(t,e){t.pending_buf[t.pending++]=e}function rt(t,e){t.pending_buf[t.pending++]=e>>>8&255,t.pending_buf[t.pending++]=255&e}function it(t,e){var n,r,i=t.max_chain_length,o=t.strstart,a=t.prev_length,s=t.nice_match,u=t.strstart>t.w_size-U?t.strstart-(t.w_size-U):0,f=t.window,l=t.w_mask,h=t.prev,c=t.strstart+P,d=f[o+a-1],p=f[o+a];t.prev_length>=t.good_match&&(i>>=2),s>t.lookahead&&(s=t.lookahead);do{if(f[(n=e)+a]===p&&f[n+a-1]===d&&f[n]===f[o]&&f[++n]===f[o+1]){o+=2,n++;do{}while(f[++o]===f[++n]&&f[++o]===f[++n]&&f[++o]===f[++n]&&f[++o]===f[++n]&&f[++o]===f[++n]&&f[++o]===f[++n]&&f[++o]===f[++n]&&f[++o]===f[++n]&&o<c);if(r=P-(c-o),o=c-P,r>a){if(t.match_start=e,a=r,r>=s)break;d=f[o+a-1],p=f[o+a]}}}while((e=h[e&l])>u&&0!=--i);return a<=t.lookahead?a:t.lookahead}function ot(t){var e,n,r,o,u,f,l,h,c,d,p=t.w_size;do{if(o=t.window_size-t.lookahead-t.strstart,t.strstart>=p+(p-U)){i.arraySet(t.window,t.window,p,p,0),t.match_start-=p,t.strstart-=p,t.block_start-=p,e=n=t.hash_size;do{r=t.head[--e],t.head[e]=r>=p?r-p:0}while(--n);e=n=p;do{r=t.prev[--e],t.prev[e]=r>=p?r-p:0}while(--n);o+=p}if(0===t.strm.avail_in)break;if(f=t.strm,l=t.window,h=t.strstart+t.lookahead,c=o,d=void 0,(d=f.avail_in)>c&&(d=c),n=0===d?0:(f.avail_in-=d,i.arraySet(l,f.input,f.next_in,d,h),1===f.state.wrap?f.adler=a(f.adler,l,d,h):2===f.state.wrap&&(f.adler=s(f.adler,l,d,h)),f.next_in+=d,f.total_in+=d,d),t.lookahead+=n,t.lookahead+t.insert>=M)for(u=t.strstart-t.insert,t.ins_h=t.window[u],t.ins_h=(t.ins_h<<t.hash_shift^t.window[u+1])&t.hash_mask;t.insert&&(t.ins_h=(t.ins_h<<t.hash_shift^t.window[u+M-1])&t.hash_mask,t.prev[u&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=u,u++,t.insert--,!(t.lookahead+t.insert<M)););}while(t.lookahead<U&&0!==t.strm.avail_in)}function at(t,e){for(var n,r;;){if(t.lookahead<U){if(ot(t),t.lookahead<U&&e===f)return H;if(0===t.lookahead)break}if(n=0,t.lookahead>=M&&(t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+M-1])&t.hash_mask,n=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart),0!==n&&t.strstart-n<=t.w_size-U&&(t.match_length=it(t,n)),t.match_length>=M)if(r=o._tr_tally(t,t.strstart-t.match_start,t.match_length-M),t.lookahead-=t.match_length,t.match_length<=t.max_lazy_match&&t.lookahead>=M){t.match_length--;do{t.strstart++,t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+M-1])&t.hash_mask,n=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart}while(0!=--t.match_length);t.strstart++}else t.strstart+=t.match_length,t.match_length=0,t.ins_h=t.window[t.strstart],t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+1])&t.hash_mask;else r=o._tr_tally(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++;if(r&&(et(t,!1),0===t.strm.avail_out))return H}return t.insert=t.strstart<M-1?t.strstart:M-1,e===c?(et(t,!0),0===t.strm.avail_out?K:V):t.last_lit&&(et(t,!1),0===t.strm.avail_out)?H:G}function st(t,e){for(var n,r,i;;){if(t.lookahead<U){if(ot(t),t.lookahead<U&&e===f)return H;if(0===t.lookahead)break}if(n=0,t.lookahead>=M&&(t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+M-1])&t.hash_mask,n=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart),t.prev_length=t.match_length,t.prev_match=t.match_start,t.match_length=M-1,0!==n&&t.prev_length<t.max_lazy_match&&t.strstart-n<=t.w_size-U&&(t.match_length=it(t,n),t.match_length<=5&&(t.strategy===m||t.match_length===M&&t.strstart-t.match_start>4096)&&(t.match_length=M-1)),t.prev_length>=M&&t.match_length<=t.prev_length){i=t.strstart+t.lookahead-M,r=o._tr_tally(t,t.strstart-1-t.prev_match,t.prev_length-M),t.lookahead-=t.prev_length-1,t.prev_length-=2;do{++t.strstart<=i&&(t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+M-1])&t.hash_mask,n=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart)}while(0!=--t.prev_length);if(t.match_available=0,t.match_length=M-1,t.strstart++,r&&(et(t,!1),0===t.strm.avail_out))return H}else if(t.match_available){if((r=o._tr_tally(t,0,t.window[t.strstart-1]))&&et(t,!1),t.strstart++,t.lookahead--,0===t.strm.avail_out)return H}else t.match_available=1,t.strstart++,t.lookahead--}return t.match_available&&(r=o._tr_tally(t,0,t.window[t.strstart-1]),t.match_available=0),t.insert=t.strstart<M-1?t.strstart:M-1,e===c?(et(t,!0),0===t.strm.avail_out?K:V):t.last_lit&&(et(t,!1),0===t.strm.avail_out)?H:G}function ut(t,e,n,r,i){this.good_length=t,this.max_lazy=e,this.nice_length=n,this.max_chain=r,this.func=i}function ft(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=T,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new i.Buf16(2*z),this.dyn_dtree=new i.Buf16(2*(2*I+1)),this.bl_tree=new i.Buf16(2*(2*N+1)),Q(this.dyn_ltree),Q(this.dyn_dtree),Q(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new i.Buf16(B+1),this.heap=new i.Buf16(2*O+1),Q(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new i.Buf16(2*O+1),Q(this.depth),this.l_buf=0,this.lit_bufsize=0,this.last_lit=0,this.d_buf=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0}function lt(t){var e;return t&&t.state?(t.total_in=t.total_out=0,t.data_type=x,(e=t.state).pending=0,e.pending_out=0,e.wrap<0&&(e.wrap=-e.wrap),e.status=e.wrap?F:W,t.adler=2===e.wrap?0:1,e.last_flush=f,o._tr_init(e),p):J(t,g)}function ht(t){var e,n=lt(t);return n===p&&((e=t.state).window_size=2*e.w_size,Q(e.head),e.max_lazy_match=r[e.level].max_lazy,e.good_match=r[e.level].good_length,e.nice_match=r[e.level].nice_length,e.max_chain_length=r[e.level].max_chain,e.strstart=0,e.block_start=0,e.lookahead=0,e.insert=0,e.match_length=e.prev_length=M-1,e.match_available=0,e.ins_h=0),n}function ct(t,e,n,r,o,a){if(!t)return g;var s=1;if(e===y&&(e=6),r<0?(s=0,r=-r):r>15&&(s=2,r-=16),o<1||o>R||n!==T||r<8||r>15||e<0||e>9||a<0||a>k)return J(t,g);8===r&&(r=9);var u=new ft;return t.state=u,u.strm=t,u.wrap=s,u.gzhead=null,u.w_bits=r,u.w_size=1<<u.w_bits,u.w_mask=u.w_size-1,u.hash_bits=o+7,u.hash_size=1<<u.hash_bits,u.hash_mask=u.hash_size-1,u.hash_shift=~~((u.hash_bits+M-1)/M),u.window=new i.Buf8(2*u.w_size),u.head=new i.Buf16(u.hash_size),u.prev=new i.Buf16(u.w_size),u.lit_bufsize=1<<o+6,u.pending_buf_size=4*u.lit_bufsize,u.pending_buf=new i.Buf8(u.pending_buf_size),u.d_buf=1*u.lit_bufsize,u.l_buf=3*u.lit_bufsize,u.level=e,u.strategy=a,u.method=n,ht(t)}r=[new ut(0,0,0,0,(function(t,e){var n=65535;for(n>t.pending_buf_size-5&&(n=t.pending_buf_size-5);;){if(t.lookahead<=1){if(ot(t),0===t.lookahead&&e===f)return H;if(0===t.lookahead)break}t.strstart+=t.lookahead,t.lookahead=0;var r=t.block_start+n;if((0===t.strstart||t.strstart>=r)&&(t.lookahead=t.strstart-r,t.strstart=r,et(t,!1),0===t.strm.avail_out))return H;if(t.strstart-t.block_start>=t.w_size-U&&(et(t,!1),0===t.strm.avail_out))return H}return t.insert=0,e===c?(et(t,!0),0===t.strm.avail_out?K:V):(t.strstart>t.block_start&&(et(t,!1),t.strm.avail_out),H)})),new ut(4,4,8,4,at),new ut(4,5,16,8,at),new ut(4,6,32,32,at),new ut(4,4,16,16,st),new ut(8,16,32,32,st),new ut(8,16,128,128,st),new ut(8,32,128,256,st),new ut(32,128,258,1024,st),new ut(32,258,258,4096,st)],e.deflateInit=function(t,e){return ct(t,e,T,A,L,S)},e.deflateInit2=ct,e.deflateReset=ht,e.deflateResetKeep=lt,e.deflateSetHeader=function(t,e){return t&&t.state?2!==t.state.wrap?g:(t.state.gzhead=e,p):g},e.deflate=function(t,e){var n,i,a,u;if(!t||!t.state||e>d||e<0)return t?J(t,g):g;if(i=t.state,!t.output||!t.input&&0!==t.avail_in||i.status===Y&&e!==c)return J(t,0===t.avail_out?w:g);if(i.strm=t,n=i.last_flush,i.last_flush=e,i.status===F)if(2===i.wrap)t.adler=0,nt(i,31),nt(i,139),nt(i,8),i.gzhead?(nt(i,(i.gzhead.text?1:0)+(i.gzhead.hcrc?2:0)+(i.gzhead.extra?4:0)+(i.gzhead.name?8:0)+(i.gzhead.comment?16:0)),nt(i,255&i.gzhead.time),nt(i,i.gzhead.time>>8&255),nt(i,i.gzhead.time>>16&255),nt(i,i.gzhead.time>>24&255),nt(i,9===i.level?2:i.strategy>=v||i.level<2?4:0),nt(i,255&i.gzhead.os),i.gzhead.extra&&i.gzhead.extra.length&&(nt(i,255&i.gzhead.extra.length),nt(i,i.gzhead.extra.length>>8&255)),i.gzhead.hcrc&&(t.adler=s(t.adler,i.pending_buf,i.pending,0)),i.gzindex=0,i.status=j):(nt(i,0),nt(i,0),nt(i,0),nt(i,0),nt(i,0),nt(i,9===i.level?2:i.strategy>=v||i.level<2?4:0),nt(i,X),i.status=W);else{var b=T+(i.w_bits-8<<4)<<8;b|=(i.strategy>=v||i.level<2?0:i.level<6?1:6===i.level?2:3)<<6,0!==i.strstart&&(b|=D),b+=31-b%31,i.status=W,rt(i,b),0!==i.strstart&&(rt(i,t.adler>>>16),rt(i,65535&t.adler)),t.adler=1}if(i.status===j)if(i.gzhead.extra){for(a=i.pending;i.gzindex<(65535&i.gzhead.extra.length)&&(i.pending!==i.pending_buf_size||(i.gzhead.hcrc&&i.pending>a&&(t.adler=s(t.adler,i.pending_buf,i.pending-a,a)),tt(t),a=i.pending,i.pending!==i.pending_buf_size));)nt(i,255&i.gzhead.extra[i.gzindex]),i.gzindex++;i.gzhead.hcrc&&i.pending>a&&(t.adler=s(t.adler,i.pending_buf,i.pending-a,a)),i.gzindex===i.gzhead.extra.length&&(i.gzindex=0,i.status=Z)}else i.status=Z;if(i.status===Z)if(i.gzhead.name){a=i.pending;do{if(i.pending===i.pending_buf_size&&(i.gzhead.hcrc&&i.pending>a&&(t.adler=s(t.adler,i.pending_buf,i.pending-a,a)),tt(t),a=i.pending,i.pending===i.pending_buf_size)){u=1;break}u=i.gzindex<i.gzhead.name.length?255&i.gzhead.name.charCodeAt(i.gzindex++):0,nt(i,u)}while(0!==u);i.gzhead.hcrc&&i.pending>a&&(t.adler=s(t.adler,i.pending_buf,i.pending-a,a)),0===u&&(i.gzindex=0,i.status=C)}else i.status=C;if(i.status===C)if(i.gzhead.comment){a=i.pending;do{if(i.pending===i.pending_buf_size&&(i.gzhead.hcrc&&i.pending>a&&(t.adler=s(t.adler,i.pending_buf,i.pending-a,a)),tt(t),a=i.pending,i.pending===i.pending_buf_size)){u=1;break}u=i.gzindex<i.gzhead.comment.length?255&i.gzhead.comment.charCodeAt(i.gzindex++):0,nt(i,u)}while(0!==u);i.gzhead.hcrc&&i.pending>a&&(t.adler=s(t.adler,i.pending_buf,i.pending-a,a)),0===u&&(i.status=q)}else i.status=q;if(i.status===q&&(i.gzhead.hcrc?(i.pending+2>i.pending_buf_size&&tt(t),i.pending+2<=i.pending_buf_size&&(nt(i,255&t.adler),nt(i,t.adler>>8&255),t.adler=0,i.status=W)):i.status=W),0!==i.pending){if(tt(t),0===t.avail_out)return i.last_flush=-1,p}else if(0===t.avail_in&&$(e)<=$(n)&&e!==c)return J(t,w);if(i.status===Y&&0!==t.avail_in)return J(t,w);if(0!==t.avail_in||0!==i.lookahead||e!==f&&i.status!==Y){var y=i.strategy===v?function(t,e){for(var n;;){if(0===t.lookahead&&(ot(t),0===t.lookahead)){if(e===f)return H;break}if(t.match_length=0,n=o._tr_tally(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++,n&&(et(t,!1),0===t.strm.avail_out))return H}return t.insert=0,e===c?(et(t,!0),0===t.strm.avail_out?K:V):t.last_lit&&(et(t,!1),0===t.strm.avail_out)?H:G}(i,e):i.strategy===E?function(t,e){for(var n,r,i,a,s=t.window;;){if(t.lookahead<=P){if(ot(t),t.lookahead<=P&&e===f)return H;if(0===t.lookahead)break}if(t.match_length=0,t.lookahead>=M&&t.strstart>0&&(r=s[i=t.strstart-1])===s[++i]&&r===s[++i]&&r===s[++i]){a=t.strstart+P;do{}while(r===s[++i]&&r===s[++i]&&r===s[++i]&&r===s[++i]&&r===s[++i]&&r===s[++i]&&r===s[++i]&&r===s[++i]&&i<a);t.match_length=P-(a-i),t.match_length>t.lookahead&&(t.match_length=t.lookahead)}if(t.match_length>=M?(n=o._tr_tally(t,1,t.match_length-M),t.lookahead-=t.match_length,t.strstart+=t.match_length,t.match_length=0):(n=o._tr_tally(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++),n&&(et(t,!1),0===t.strm.avail_out))return H}return t.insert=0,e===c?(et(t,!0),0===t.strm.avail_out?K:V):t.last_lit&&(et(t,!1),0===t.strm.avail_out)?H:G}(i,e):r[i.level].func(i,e);if(y!==K&&y!==V||(i.status=Y),y===H||y===K)return 0===t.avail_out&&(i.last_flush=-1),p;if(y===G&&(e===l?o._tr_align(i):e!==d&&(o._tr_stored_block(i,0,0,!1),e===h&&(Q(i.head),0===i.lookahead&&(i.strstart=0,i.block_start=0,i.insert=0))),tt(t),0===t.avail_out))return i.last_flush=-1,p}return e!==c?p:i.wrap<=0?_:(2===i.wrap?(nt(i,255&t.adler),nt(i,t.adler>>8&255),nt(i,t.adler>>16&255),nt(i,t.adler>>24&255),nt(i,255&t.total_in),nt(i,t.total_in>>8&255),nt(i,t.total_in>>16&255),nt(i,t.total_in>>24&255)):(rt(i,t.adler>>>16),rt(i,65535&t.adler)),tt(t),i.wrap>0&&(i.wrap=-i.wrap),0!==i.pending?p:_)},e.deflateEnd=function(t){var e;return t&&t.state?(e=t.state.status)!==F&&e!==j&&e!==Z&&e!==C&&e!==q&&e!==W&&e!==Y?J(t,g):(t.state=null,e===W?J(t,b):p):g},e.deflateSetDictionary=function(t,e){var n,r,o,s,u,f,l,h,c=e.length;if(!t||!t.state)return g;if(2===(s=(n=t.state).wrap)||1===s&&n.status!==F||n.lookahead)return g;for(1===s&&(t.adler=a(t.adler,e,c,0)),n.wrap=0,c>=n.w_size&&(0===s&&(Q(n.head),n.strstart=0,n.block_start=0,n.insert=0),h=new i.Buf8(n.w_size),i.arraySet(h,e,c-n.w_size,n.w_size,0),e=h,c=n.w_size),u=t.avail_in,f=t.next_in,l=t.input,t.avail_in=c,t.next_in=0,t.input=e,ot(n);n.lookahead>=M;){r=n.strstart,o=n.lookahead-(M-1);do{n.ins_h=(n.ins_h<<n.hash_shift^n.window[r+M-1])&n.hash_mask,n.prev[r&n.w_mask]=n.head[n.ins_h],n.head[n.ins_h]=r,r++}while(--o);n.strstart=r,n.lookahead=M-1,ot(n)}return n.strstart+=n.lookahead,n.block_start=n.strstart,n.insert=n.lookahead,n.lookahead=0,n.match_length=n.prev_length=M-1,n.match_available=0,t.next_in=f,t.input=l,t.avail_in=u,n.wrap=s,p},e.deflateInfo="pako deflate (from Nodeca project)"},function(t,e,n){"use strict";var r=n(8),i=4,o=0,a=1,s=2;function u(t){for(var e=t.length;--e>=0;)t[e]=0}var f=0,l=1,h=2,c=29,d=256,p=d+1+c,_=30,g=19,b=2*p+1,w=15,y=16,m=7,v=256,E=16,k=17,S=18,x=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0],T=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],R=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7],A=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],L=new Array(2*(p+2));u(L);var O=new Array(2*_);u(O);var I=new Array(512);u(I);var N=new Array(256);u(N);var z=new Array(c);u(z);var B,M,P,U=new Array(_);function D(t,e,n,r,i){this.static_tree=t,this.extra_bits=e,this.extra_base=n,this.elems=r,this.max_length=i,this.has_stree=t&&t.length}function F(t,e){this.dyn_tree=t,this.max_code=0,this.stat_desc=e}function j(t){return t<256?I[t]:I[256+(t>>>7)]}function Z(t,e){t.pending_buf[t.pending++]=255&e,t.pending_buf[t.pending++]=e>>>8&255}function C(t,e,n){t.bi_valid>y-n?(t.bi_buf|=e<<t.bi_valid&65535,Z(t,t.bi_buf),t.bi_buf=e>>y-t.bi_valid,t.bi_valid+=n-y):(t.bi_buf|=e<<t.bi_valid&65535,t.bi_valid+=n)}function q(t,e,n){C(t,n[2*e],n[2*e+1])}function W(t,e){var n=0;do{n|=1&t,t>>>=1,n<<=1}while(--e>0);return n>>>1}function Y(t,e,n){var r,i,o=new Array(w+1),a=0;for(r=1;r<=w;r++)o[r]=a=a+n[r-1]<<1;for(i=0;i<=e;i++){var s=t[2*i+1];0!==s&&(t[2*i]=W(o[s]++,s))}}function H(t){var e;for(e=0;e<p;e++)t.dyn_ltree[2*e]=0;for(e=0;e<_;e++)t.dyn_dtree[2*e]=0;for(e=0;e<g;e++)t.bl_tree[2*e]=0;t.dyn_ltree[2*v]=1,t.opt_len=t.static_len=0,t.last_lit=t.matches=0}function G(t){t.bi_valid>8?Z(t,t.bi_buf):t.bi_valid>0&&(t.pending_buf[t.pending++]=t.bi_buf),t.bi_buf=0,t.bi_valid=0}function K(t,e,n,r){var i=2*e,o=2*n;return t[i]<t[o]||t[i]===t[o]&&r[e]<=r[n]}function V(t,e,n){for(var r=t.heap[n],i=n<<1;i<=t.heap_len&&(i<t.heap_len&&K(e,t.heap[i+1],t.heap[i],t.depth)&&i++,!K(e,r,t.heap[i],t.depth));)t.heap[n]=t.heap[i],n=i,i<<=1;t.heap[n]=r}function X(t,e,n){var r,i,o,a,s=0;if(0!==t.last_lit)do{r=t.pending_buf[t.d_buf+2*s]<<8|t.pending_buf[t.d_buf+2*s+1],i=t.pending_buf[t.l_buf+s],s++,0===r?q(t,i,e):(q(t,(o=N[i])+d+1,e),0!==(a=x[o])&&C(t,i-=z[o],a),q(t,o=j(--r),n),0!==(a=T[o])&&C(t,r-=U[o],a))}while(s<t.last_lit);q(t,v,e)}function J(t,e){var n,r,i,o=e.dyn_tree,a=e.stat_desc.static_tree,s=e.stat_desc.has_stree,u=e.stat_desc.elems,f=-1;for(t.heap_len=0,t.heap_max=b,n=0;n<u;n++)0!==o[2*n]?(t.heap[++t.heap_len]=f=n,t.depth[n]=0):o[2*n+1]=0;for(;t.heap_len<2;)o[2*(i=t.heap[++t.heap_len]=f<2?++f:0)]=1,t.depth[i]=0,t.opt_len--,s&&(t.static_len-=a[2*i+1]);for(e.max_code=f,n=t.heap_len>>1;n>=1;n--)V(t,o,n);i=u;do{n=t.heap[1],t.heap[1]=t.heap[t.heap_len--],V(t,o,1),r=t.heap[1],t.heap[--t.heap_max]=n,t.heap[--t.heap_max]=r,o[2*i]=o[2*n]+o[2*r],t.depth[i]=(t.depth[n]>=t.depth[r]?t.depth[n]:t.depth[r])+1,o[2*n+1]=o[2*r+1]=i,t.heap[1]=i++,V(t,o,1)}while(t.heap_len>=2);t.heap[--t.heap_max]=t.heap[1],function(t,e){var n,r,i,o,a,s,u=e.dyn_tree,f=e.max_code,l=e.stat_desc.static_tree,h=e.stat_desc.has_stree,c=e.stat_desc.extra_bits,d=e.stat_desc.extra_base,p=e.stat_desc.max_length,_=0;for(o=0;o<=w;o++)t.bl_count[o]=0;for(u[2*t.heap[t.heap_max]+1]=0,n=t.heap_max+1;n<b;n++)(o=u[2*u[2*(r=t.heap[n])+1]+1]+1)>p&&(o=p,_++),u[2*r+1]=o,r>f||(t.bl_count[o]++,a=0,r>=d&&(a=c[r-d]),s=u[2*r],t.opt_len+=s*(o+a),h&&(t.static_len+=s*(l[2*r+1]+a)));if(0!==_){do{for(o=p-1;0===t.bl_count[o];)o--;t.bl_count[o]--,t.bl_count[o+1]+=2,t.bl_count[p]--,_-=2}while(_>0);for(o=p;0!==o;o--)for(r=t.bl_count[o];0!==r;)(i=t.heap[--n])>f||(u[2*i+1]!==o&&(t.opt_len+=(o-u[2*i+1])*u[2*i],u[2*i+1]=o),r--)}}(t,e),Y(o,f,t.bl_count)}function $(t,e,n){var r,i,o=-1,a=e[1],s=0,u=7,f=4;for(0===a&&(u=138,f=3),e[2*(n+1)+1]=65535,r=0;r<=n;r++)i=a,a=e[2*(r+1)+1],++s<u&&i===a||(s<f?t.bl_tree[2*i]+=s:0!==i?(i!==o&&t.bl_tree[2*i]++,t.bl_tree[2*E]++):s<=10?t.bl_tree[2*k]++:t.bl_tree[2*S]++,s=0,o=i,0===a?(u=138,f=3):i===a?(u=6,f=3):(u=7,f=4))}function Q(t,e,n){var r,i,o=-1,a=e[1],s=0,u=7,f=4;for(0===a&&(u=138,f=3),r=0;r<=n;r++)if(i=a,a=e[2*(r+1)+1],!(++s<u&&i===a)){if(s<f)do{q(t,i,t.bl_tree)}while(0!=--s);else 0!==i?(i!==o&&(q(t,i,t.bl_tree),s--),q(t,E,t.bl_tree),C(t,s-3,2)):s<=10?(q(t,k,t.bl_tree),C(t,s-3,3)):(q(t,S,t.bl_tree),C(t,s-11,7));s=0,o=i,0===a?(u=138,f=3):i===a?(u=6,f=3):(u=7,f=4)}}u(U);var tt=!1;function et(t,e,n,i){C(t,(f<<1)+(i?1:0),3),function(t,e,n,i){G(t),i&&(Z(t,n),Z(t,~n)),r.arraySet(t.pending_buf,t.window,e,n,t.pending),t.pending+=n}(t,e,n,!0)}e._tr_init=function(t){tt||(!function(){var t,e,n,r,i,o=new Array(w+1);for(n=0,r=0;r<c-1;r++)for(z[r]=n,t=0;t<1<<x[r];t++)N[n++]=r;for(N[n-1]=r,i=0,r=0;r<16;r++)for(U[r]=i,t=0;t<1<<T[r];t++)I[i++]=r;for(i>>=7;r<_;r++)for(U[r]=i<<7,t=0;t<1<<T[r]-7;t++)I[256+i++]=r;for(e=0;e<=w;e++)o[e]=0;for(t=0;t<=143;)L[2*t+1]=8,t++,o[8]++;for(;t<=255;)L[2*t+1]=9,t++,o[9]++;for(;t<=279;)L[2*t+1]=7,t++,o[7]++;for(;t<=287;)L[2*t+1]=8,t++,o[8]++;for(Y(L,p+1,o),t=0;t<_;t++)O[2*t+1]=5,O[2*t]=W(t,5);B=new D(L,x,d+1,p,w),M=new D(O,T,0,_,w),P=new D(new Array(0),R,0,g,m)}(),tt=!0),t.l_desc=new F(t.dyn_ltree,B),t.d_desc=new F(t.dyn_dtree,M),t.bl_desc=new F(t.bl_tree,P),t.bi_buf=0,t.bi_valid=0,H(t)},e._tr_stored_block=et,e._tr_flush_block=function(t,e,n,r){var u,f,c=0;t.level>0?(t.strm.data_type===s&&(t.strm.data_type=function(t){var e,n=4093624447;for(e=0;e<=31;e++,n>>>=1)if(1&n&&0!==t.dyn_ltree[2*e])return o;if(0!==t.dyn_ltree[18]||0!==t.dyn_ltree[20]||0!==t.dyn_ltree[26])return a;for(e=32;e<d;e++)if(0!==t.dyn_ltree[2*e])return a;return o}(t)),J(t,t.l_desc),J(t,t.d_desc),c=function(t){var e;for($(t,t.dyn_ltree,t.l_desc.max_code),$(t,t.dyn_dtree,t.d_desc.max_code),J(t,t.bl_desc),e=g-1;e>=3&&0===t.bl_tree[2*A[e]+1];e--);return t.opt_len+=3*(e+1)+5+5+4,e}(t),u=t.opt_len+3+7>>>3,(f=t.static_len+3+7>>>3)<=u&&(u=f)):u=f=n+5,n+4<=u&&-1!==e?et(t,e,n,r):t.strategy===i||f===u?(C(t,(l<<1)+(r?1:0),3),X(t,L,O)):(C(t,(h<<1)+(r?1:0),3),function(t,e,n,r){var i;for(C(t,e-257,5),C(t,n-1,5),C(t,r-4,4),i=0;i<r;i++)C(t,t.bl_tree[2*A[i]+1],3);Q(t,t.dyn_ltree,e-1),Q(t,t.dyn_dtree,n-1)}(t,t.l_desc.max_code+1,t.d_desc.max_code+1,c+1),X(t,t.dyn_ltree,t.dyn_dtree)),H(t),r&&G(t)},e._tr_tally=function(t,e,n){return t.pending_buf[t.d_buf+2*t.last_lit]=e>>>8&255,t.pending_buf[t.d_buf+2*t.last_lit+1]=255&e,t.pending_buf[t.l_buf+t.last_lit]=255&n,t.last_lit++,0===e?t.dyn_ltree[2*n]++:(t.matches++,e--,t.dyn_ltree[2*(N[n]+d+1)]++,t.dyn_dtree[2*j(e)]++),t.last_lit===t.lit_bufsize-1},e._tr_align=function(t){C(t,l<<1,3),q(t,v,L),function(t){16===t.bi_valid?(Z(t,t.bi_buf),t.bi_buf=0,t.bi_valid=0):t.bi_valid>=8&&(t.pending_buf[t.pending++]=255&t.bi_buf,t.bi_buf>>=8,t.bi_valid-=8)}(t)}},function(t,e,n){"use strict";t.exports={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"}},function(t,e,n){"use strict";var r=n(8),i=n(20),o=n(21),a=n(45),s=n(46),u=0,f=1,l=2,h=4,c=5,d=6,p=0,_=1,g=2,b=-2,w=-3,y=-4,m=-5,v=8,E=1,k=2,S=3,x=4,T=5,R=6,A=7,L=8,O=9,I=10,N=11,z=12,B=13,M=14,P=15,U=16,D=17,F=18,j=19,Z=20,C=21,q=22,W=23,Y=24,H=25,G=26,K=27,V=28,X=29,J=30,$=31,Q=32,tt=852,et=592,nt=15;function rt(t){return(t>>>24&255)+(t>>>8&65280)+((65280&t)<<8)+((255&t)<<24)}function it(){this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new r.Buf16(320),this.work=new r.Buf16(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}function ot(t){var e;return t&&t.state?(e=t.state,t.total_in=t.total_out=e.total=0,t.msg="",e.wrap&&(t.adler=1&e.wrap),e.mode=E,e.last=0,e.havedict=0,e.dmax=32768,e.head=null,e.hold=0,e.bits=0,e.lencode=e.lendyn=new r.Buf32(tt),e.distcode=e.distdyn=new r.Buf32(et),e.sane=1,e.back=-1,p):b}function at(t){var e;return t&&t.state?((e=t.state).wsize=0,e.whave=0,e.wnext=0,ot(t)):b}function st(t,e){var n,r;return t&&t.state?(r=t.state,e<0?(n=0,e=-e):(n=1+(e>>4),e<48&&(e&=15)),e&&(e<8||e>15)?b:(null!==r.window&&r.wbits!==e&&(r.window=null),r.wrap=n,r.wbits=e,at(t))):b}function ut(t,e){var n,r;return t?(r=new it,t.state=r,r.window=null,(n=st(t,e))!==p&&(t.state=null),n):b}var ft,lt,ht=!0;function ct(t){if(ht){var e;for(ft=new r.Buf32(512),lt=new r.Buf32(32),e=0;e<144;)t.lens[e++]=8;for(;e<256;)t.lens[e++]=9;for(;e<280;)t.lens[e++]=7;for(;e<288;)t.lens[e++]=8;for(s(f,t.lens,0,288,ft,0,t.work,{bits:9}),e=0;e<32;)t.lens[e++]=5;s(l,t.lens,0,32,lt,0,t.work,{bits:5}),ht=!1}t.lencode=ft,t.lenbits=9,t.distcode=lt,t.distbits=5}function dt(t,e,n,i){var o,a=t.state;return null===a.window&&(a.wsize=1<<a.wbits,a.wnext=0,a.whave=0,a.window=new r.Buf8(a.wsize)),i>=a.wsize?(r.arraySet(a.window,e,n-a.wsize,a.wsize,0),a.wnext=0,a.whave=a.wsize):((o=a.wsize-a.wnext)>i&&(o=i),r.arraySet(a.window,e,n-i,o,a.wnext),(i-=o)?(r.arraySet(a.window,e,n-i,i,0),a.wnext=i,a.whave=a.wsize):(a.wnext+=o,a.wnext===a.wsize&&(a.wnext=0),a.whave<a.wsize&&(a.whave+=o))),0}e.inflateReset=at,e.inflateReset2=st,e.inflateResetKeep=ot,e.inflateInit=function(t){return ut(t,nt)},e.inflateInit2=ut,e.inflate=function(t,e){var n,tt,et,nt,it,ot,at,st,ut,ft,lt,ht,pt,_t,gt,bt,wt,yt,mt,vt,Et,kt,St,xt,Tt=0,Rt=new r.Buf8(4),At=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];if(!t||!t.state||!t.output||!t.input&&0!==t.avail_in)return b;(n=t.state).mode===z&&(n.mode=B),it=t.next_out,et=t.output,at=t.avail_out,nt=t.next_in,tt=t.input,ot=t.avail_in,st=n.hold,ut=n.bits,ft=ot,lt=at,kt=p;t:for(;;)switch(n.mode){case E:if(0===n.wrap){n.mode=B;break}for(;ut<16;){if(0===ot)break t;ot--,st+=tt[nt++]<<ut,ut+=8}if(2&n.wrap&&35615===st){n.check=0,Rt[0]=255&st,Rt[1]=st>>>8&255,n.check=o(n.check,Rt,2,0),st=0,ut=0,n.mode=k;break}if(n.flags=0,n.head&&(n.head.done=!1),!(1&n.wrap)||(((255&st)<<8)+(st>>8))%31){t.msg="incorrect header check",n.mode=J;break}if((15&st)!==v){t.msg="unknown compression method",n.mode=J;break}if(ut-=4,Et=8+(15&(st>>>=4)),0===n.wbits)n.wbits=Et;else if(Et>n.wbits){t.msg="invalid window size",n.mode=J;break}n.dmax=1<<Et,t.adler=n.check=1,n.mode=512&st?I:z,st=0,ut=0;break;case k:for(;ut<16;){if(0===ot)break t;ot--,st+=tt[nt++]<<ut,ut+=8}if(n.flags=st,(255&n.flags)!==v){t.msg="unknown compression method",n.mode=J;break}if(57344&n.flags){t.msg="unknown header flags set",n.mode=J;break}n.head&&(n.head.text=st>>8&1),512&n.flags&&(Rt[0]=255&st,Rt[1]=st>>>8&255,n.check=o(n.check,Rt,2,0)),st=0,ut=0,n.mode=S;case S:for(;ut<32;){if(0===ot)break t;ot--,st+=tt[nt++]<<ut,ut+=8}n.head&&(n.head.time=st),512&n.flags&&(Rt[0]=255&st,Rt[1]=st>>>8&255,Rt[2]=st>>>16&255,Rt[3]=st>>>24&255,n.check=o(n.check,Rt,4,0)),st=0,ut=0,n.mode=x;case x:for(;ut<16;){if(0===ot)break t;ot--,st+=tt[nt++]<<ut,ut+=8}n.head&&(n.head.xflags=255&st,n.head.os=st>>8),512&n.flags&&(Rt[0]=255&st,Rt[1]=st>>>8&255,n.check=o(n.check,Rt,2,0)),st=0,ut=0,n.mode=T;case T:if(1024&n.flags){for(;ut<16;){if(0===ot)break t;ot--,st+=tt[nt++]<<ut,ut+=8}n.length=st,n.head&&(n.head.extra_len=st),512&n.flags&&(Rt[0]=255&st,Rt[1]=st>>>8&255,n.check=o(n.check,Rt,2,0)),st=0,ut=0}else n.head&&(n.head.extra=null);n.mode=R;case R:if(1024&n.flags&&((ht=n.length)>ot&&(ht=ot),ht&&(n.head&&(Et=n.head.extra_len-n.length,n.head.extra||(n.head.extra=new Array(n.head.extra_len)),r.arraySet(n.head.extra,tt,nt,ht,Et)),512&n.flags&&(n.check=o(n.check,tt,ht,nt)),ot-=ht,nt+=ht,n.length-=ht),n.length))break t;n.length=0,n.mode=A;case A:if(2048&n.flags){if(0===ot)break t;ht=0;do{Et=tt[nt+ht++],n.head&&Et&&n.length<65536&&(n.head.name+=String.fromCharCode(Et))}while(Et&&ht<ot);if(512&n.flags&&(n.check=o(n.check,tt,ht,nt)),ot-=ht,nt+=ht,Et)break t}else n.head&&(n.head.name=null);n.length=0,n.mode=L;case L:if(4096&n.flags){if(0===ot)break t;ht=0;do{Et=tt[nt+ht++],n.head&&Et&&n.length<65536&&(n.head.comment+=String.fromCharCode(Et))}while(Et&&ht<ot);if(512&n.flags&&(n.check=o(n.check,tt,ht,nt)),ot-=ht,nt+=ht,Et)break t}else n.head&&(n.head.comment=null);n.mode=O;case O:if(512&n.flags){for(;ut<16;){if(0===ot)break t;ot--,st+=tt[nt++]<<ut,ut+=8}if(st!==(65535&n.check)){t.msg="header crc mismatch",n.mode=J;break}st=0,ut=0}n.head&&(n.head.hcrc=n.flags>>9&1,n.head.done=!0),t.adler=n.check=0,n.mode=z;break;case I:for(;ut<32;){if(0===ot)break t;ot--,st+=tt[nt++]<<ut,ut+=8}t.adler=n.check=rt(st),st=0,ut=0,n.mode=N;case N:if(0===n.havedict)return t.next_out=it,t.avail_out=at,t.next_in=nt,t.avail_in=ot,n.hold=st,n.bits=ut,g;t.adler=n.check=1,n.mode=z;case z:if(e===c||e===d)break t;case B:if(n.last){st>>>=7&ut,ut-=7&ut,n.mode=K;break}for(;ut<3;){if(0===ot)break t;ot--,st+=tt[nt++]<<ut,ut+=8}switch(n.last=1&st,ut-=1,3&(st>>>=1)){case 0:n.mode=M;break;case 1:if(ct(n),n.mode=Z,e===d){st>>>=2,ut-=2;break t}break;case 2:n.mode=D;break;case 3:t.msg="invalid block type",n.mode=J}st>>>=2,ut-=2;break;case M:for(st>>>=7&ut,ut-=7&ut;ut<32;){if(0===ot)break t;ot--,st+=tt[nt++]<<ut,ut+=8}if((65535&st)!=(st>>>16^65535)){t.msg="invalid stored block lengths",n.mode=J;break}if(n.length=65535&st,st=0,ut=0,n.mode=P,e===d)break t;case P:n.mode=U;case U:if(ht=n.length){if(ht>ot&&(ht=ot),ht>at&&(ht=at),0===ht)break t;r.arraySet(et,tt,nt,ht,it),ot-=ht,nt+=ht,at-=ht,it+=ht,n.length-=ht;break}n.mode=z;break;case D:for(;ut<14;){if(0===ot)break t;ot--,st+=tt[nt++]<<ut,ut+=8}if(n.nlen=257+(31&st),st>>>=5,ut-=5,n.ndist=1+(31&st),st>>>=5,ut-=5,n.ncode=4+(15&st),st>>>=4,ut-=4,n.nlen>286||n.ndist>30){t.msg="too many length or distance symbols",n.mode=J;break}n.have=0,n.mode=F;case F:for(;n.have<n.ncode;){for(;ut<3;){if(0===ot)break t;ot--,st+=tt[nt++]<<ut,ut+=8}n.lens[At[n.have++]]=7&st,st>>>=3,ut-=3}for(;n.have<19;)n.lens[At[n.have++]]=0;if(n.lencode=n.lendyn,n.lenbits=7,St={bits:n.lenbits},kt=s(u,n.lens,0,19,n.lencode,0,n.work,St),n.lenbits=St.bits,kt){t.msg="invalid code lengths set",n.mode=J;break}n.have=0,n.mode=j;case j:for(;n.have<n.nlen+n.ndist;){for(;bt=(Tt=n.lencode[st&(1<<n.lenbits)-1])>>>16&255,wt=65535&Tt,!((gt=Tt>>>24)<=ut);){if(0===ot)break t;ot--,st+=tt[nt++]<<ut,ut+=8}if(wt<16)st>>>=gt,ut-=gt,n.lens[n.have++]=wt;else{if(16===wt){for(xt=gt+2;ut<xt;){if(0===ot)break t;ot--,st+=tt[nt++]<<ut,ut+=8}if(st>>>=gt,ut-=gt,0===n.have){t.msg="invalid bit length repeat",n.mode=J;break}Et=n.lens[n.have-1],ht=3+(3&st),st>>>=2,ut-=2}else if(17===wt){for(xt=gt+3;ut<xt;){if(0===ot)break t;ot--,st+=tt[nt++]<<ut,ut+=8}ut-=gt,Et=0,ht=3+(7&(st>>>=gt)),st>>>=3,ut-=3}else{for(xt=gt+7;ut<xt;){if(0===ot)break t;ot--,st+=tt[nt++]<<ut,ut+=8}ut-=gt,Et=0,ht=11+(127&(st>>>=gt)),st>>>=7,ut-=7}if(n.have+ht>n.nlen+n.ndist){t.msg="invalid bit length repeat",n.mode=J;break}for(;ht--;)n.lens[n.have++]=Et}}if(n.mode===J)break;if(0===n.lens[256]){t.msg="invalid code -- missing end-of-block",n.mode=J;break}if(n.lenbits=9,St={bits:n.lenbits},kt=s(f,n.lens,0,n.nlen,n.lencode,0,n.work,St),n.lenbits=St.bits,kt){t.msg="invalid literal/lengths set",n.mode=J;break}if(n.distbits=6,n.distcode=n.distdyn,St={bits:n.distbits},kt=s(l,n.lens,n.nlen,n.ndist,n.distcode,0,n.work,St),n.distbits=St.bits,kt){t.msg="invalid distances set",n.mode=J;break}if(n.mode=Z,e===d)break t;case Z:n.mode=C;case C:if(ot>=6&&at>=258){t.next_out=it,t.avail_out=at,t.next_in=nt,t.avail_in=ot,n.hold=st,n.bits=ut,a(t,lt),it=t.next_out,et=t.output,at=t.avail_out,nt=t.next_in,tt=t.input,ot=t.avail_in,st=n.hold,ut=n.bits,n.mode===z&&(n.back=-1);break}for(n.back=0;bt=(Tt=n.lencode[st&(1<<n.lenbits)-1])>>>16&255,wt=65535&Tt,!((gt=Tt>>>24)<=ut);){if(0===ot)break t;ot--,st+=tt[nt++]<<ut,ut+=8}if(bt&&0==(240&bt)){for(yt=gt,mt=bt,vt=wt;bt=(Tt=n.lencode[vt+((st&(1<<yt+mt)-1)>>yt)])>>>16&255,wt=65535&Tt,!(yt+(gt=Tt>>>24)<=ut);){if(0===ot)break t;ot--,st+=tt[nt++]<<ut,ut+=8}st>>>=yt,ut-=yt,n.back+=yt}if(st>>>=gt,ut-=gt,n.back+=gt,n.length=wt,0===bt){n.mode=G;break}if(32&bt){n.back=-1,n.mode=z;break}if(64&bt){t.msg="invalid literal/length code",n.mode=J;break}n.extra=15&bt,n.mode=q;case q:if(n.extra){for(xt=n.extra;ut<xt;){if(0===ot)break t;ot--,st+=tt[nt++]<<ut,ut+=8}n.length+=st&(1<<n.extra)-1,st>>>=n.extra,ut-=n.extra,n.back+=n.extra}n.was=n.length,n.mode=W;case W:for(;bt=(Tt=n.distcode[st&(1<<n.distbits)-1])>>>16&255,wt=65535&Tt,!((gt=Tt>>>24)<=ut);){if(0===ot)break t;ot--,st+=tt[nt++]<<ut,ut+=8}if(0==(240&bt)){for(yt=gt,mt=bt,vt=wt;bt=(Tt=n.distcode[vt+((st&(1<<yt+mt)-1)>>yt)])>>>16&255,wt=65535&Tt,!(yt+(gt=Tt>>>24)<=ut);){if(0===ot)break t;ot--,st+=tt[nt++]<<ut,ut+=8}st>>>=yt,ut-=yt,n.back+=yt}if(st>>>=gt,ut-=gt,n.back+=gt,64&bt){t.msg="invalid distance code",n.mode=J;break}n.offset=wt,n.extra=15&bt,n.mode=Y;case Y:if(n.extra){for(xt=n.extra;ut<xt;){if(0===ot)break t;ot--,st+=tt[nt++]<<ut,ut+=8}n.offset+=st&(1<<n.extra)-1,st>>>=n.extra,ut-=n.extra,n.back+=n.extra}if(n.offset>n.dmax){t.msg="invalid distance too far back",n.mode=J;break}n.mode=H;case H:if(0===at)break t;if(ht=lt-at,n.offset>ht){if((ht=n.offset-ht)>n.whave&&n.sane){t.msg="invalid distance too far back",n.mode=J;break}ht>n.wnext?(ht-=n.wnext,pt=n.wsize-ht):pt=n.wnext-ht,ht>n.length&&(ht=n.length),_t=n.window}else _t=et,pt=it-n.offset,ht=n.length;ht>at&&(ht=at),at-=ht,n.length-=ht;do{et[it++]=_t[pt++]}while(--ht);0===n.length&&(n.mode=C);break;case G:if(0===at)break t;et[it++]=n.length,at--,n.mode=C;break;case K:if(n.wrap){for(;ut<32;){if(0===ot)break t;ot--,st|=tt[nt++]<<ut,ut+=8}if(lt-=at,t.total_out+=lt,n.total+=lt,lt&&(t.adler=n.check=n.flags?o(n.check,et,lt,it-lt):i(n.check,et,lt,it-lt)),lt=at,(n.flags?st:rt(st))!==n.check){t.msg="incorrect data check",n.mode=J;break}st=0,ut=0}n.mode=V;case V:if(n.wrap&&n.flags){for(;ut<32;){if(0===ot)break t;ot--,st+=tt[nt++]<<ut,ut+=8}if(st!==(4294967295&n.total)){t.msg="incorrect length check",n.mode=J;break}st=0,ut=0}n.mode=X;case X:kt=_;break t;case J:kt=w;break t;case $:return y;case Q:default:return b}return t.next_out=it,t.avail_out=at,t.next_in=nt,t.avail_in=ot,n.hold=st,n.bits=ut,(n.wsize||lt!==t.avail_out&&n.mode<J&&(n.mode<K||e!==h))&&dt(t,t.output,t.next_out,lt-t.avail_out)?(n.mode=$,y):(ft-=t.avail_in,lt-=t.avail_out,t.total_in+=ft,t.total_out+=lt,n.total+=lt,n.wrap&&lt&&(t.adler=n.check=n.flags?o(n.check,et,lt,t.next_out-lt):i(n.check,et,lt,t.next_out-lt)),t.data_type=n.bits+(n.last?64:0)+(n.mode===z?128:0)+(n.mode===Z||n.mode===P?256:0),(0===ft&&0===lt||e===h)&&kt===p&&(kt=m),kt)},e.inflateEnd=function(t){if(!t||!t.state)return b;var e=t.state;return e.window&&(e.window=null),t.state=null,p},e.inflateGetHeader=function(t,e){var n;return t&&t.state?0==(2&(n=t.state).wrap)?b:(n.head=e,e.done=!1,p):b},e.inflateSetDictionary=function(t,e){var n,r=e.length;return t&&t.state?0!==(n=t.state).wrap&&n.mode!==N?b:n.mode===N&&i(1,e,r,0)!==n.check?w:dt(t,e,r,r)?(n.mode=$,y):(n.havedict=1,p):b},e.inflateInfo="pako inflate (from Nodeca project)"},function(t,e,n){"use strict";t.exports=function(t,e){var n,r,i,o,a,s,u,f,l,h,c,d,p,_,g,b,w,y,m,v,E,k,S,x,T;n=t.state,r=t.next_in,x=t.input,i=r+(t.avail_in-5),o=t.next_out,T=t.output,a=o-(e-t.avail_out),s=o+(t.avail_out-257),u=n.dmax,f=n.wsize,l=n.whave,h=n.wnext,c=n.window,d=n.hold,p=n.bits,_=n.lencode,g=n.distcode,b=(1<<n.lenbits)-1,w=(1<<n.distbits)-1;t:do{p<15&&(d+=x[r++]<<p,p+=8,d+=x[r++]<<p,p+=8),y=_[d&b];e:for(;;){if(d>>>=m=y>>>24,p-=m,0===(m=y>>>16&255))T[o++]=65535&y;else{if(!(16&m)){if(0==(64&m)){y=_[(65535&y)+(d&(1<<m)-1)];continue e}if(32&m){n.mode=12;break t}t.msg="invalid literal/length code",n.mode=30;break t}v=65535&y,(m&=15)&&(p<m&&(d+=x[r++]<<p,p+=8),v+=d&(1<<m)-1,d>>>=m,p-=m),p<15&&(d+=x[r++]<<p,p+=8,d+=x[r++]<<p,p+=8),y=g[d&w];n:for(;;){if(d>>>=m=y>>>24,p-=m,!(16&(m=y>>>16&255))){if(0==(64&m)){y=g[(65535&y)+(d&(1<<m)-1)];continue n}t.msg="invalid distance code",n.mode=30;break t}if(E=65535&y,p<(m&=15)&&(d+=x[r++]<<p,(p+=8)<m&&(d+=x[r++]<<p,p+=8)),(E+=d&(1<<m)-1)>u){t.msg="invalid distance too far back",n.mode=30;break t}if(d>>>=m,p-=m,E>(m=o-a)){if((m=E-m)>l&&n.sane){t.msg="invalid distance too far back",n.mode=30;break t}if(k=0,S=c,0===h){if(k+=f-m,m<v){v-=m;do{T[o++]=c[k++]}while(--m);k=o-E,S=T}}else if(h<m){if(k+=f+h-m,(m-=h)<v){v-=m;do{T[o++]=c[k++]}while(--m);if(k=0,h<v){v-=m=h;do{T[o++]=c[k++]}while(--m);k=o-E,S=T}}}else if(k+=h-m,m<v){v-=m;do{T[o++]=c[k++]}while(--m);k=o-E,S=T}for(;v>2;)T[o++]=S[k++],T[o++]=S[k++],T[o++]=S[k++],v-=3;v&&(T[o++]=S[k++],v>1&&(T[o++]=S[k++]))}else{k=o-E;do{T[o++]=T[k++],T[o++]=T[k++],T[o++]=T[k++],v-=3}while(v>2);v&&(T[o++]=T[k++],v>1&&(T[o++]=T[k++]))}break}}break}}while(r<i&&o<s);r-=v=p>>3,d&=(1<<(p-=v<<3))-1,t.next_in=r,t.next_out=o,t.avail_in=r<i?i-r+5:5-(r-i),t.avail_out=o<s?s-o+257:257-(o-s),n.hold=d,n.bits=p}},function(t,e,n){"use strict";var r=n(8),i=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],o=[16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78],a=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0],s=[16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64];t.exports=function(t,e,n,u,f,l,h,c){var d,p,_,g,b,w,y,m,v,E=c.bits,k=0,S=0,x=0,T=0,R=0,A=0,L=0,O=0,I=0,N=0,z=null,B=0,M=new r.Buf16(16),P=new r.Buf16(16),U=null,D=0;for(k=0;k<=15;k++)M[k]=0;for(S=0;S<u;S++)M[e[n+S]]++;for(R=E,T=15;T>=1&&0===M[T];T--);if(R>T&&(R=T),0===T)return f[l++]=20971520,f[l++]=20971520,c.bits=1,0;for(x=1;x<T&&0===M[x];x++);for(R<x&&(R=x),O=1,k=1;k<=15;k++)if(O<<=1,(O-=M[k])<0)return-1;if(O>0&&(0===t||1!==T))return-1;for(P[1]=0,k=1;k<15;k++)P[k+1]=P[k]+M[k];for(S=0;S<u;S++)0!==e[n+S]&&(h[P[e[n+S]]++]=S);if(0===t?(z=U=h,w=19):1===t?(z=i,B-=257,U=o,D-=257,w=256):(z=a,U=s,w=-1),N=0,S=0,k=x,b=l,A=R,L=0,_=-1,g=(I=1<<R)-1,1===t&&I>852||2===t&&I>592)return 1;for(;;){y=k-L,h[S]<w?(m=0,v=h[S]):h[S]>w?(m=U[D+h[S]],v=z[B+h[S]]):(m=96,v=0),d=1<<k-L,x=p=1<<A;do{f[b+(N>>L)+(p-=d)]=y<<24|m<<16|v|0}while(0!==p);for(d=1<<k-1;N&d;)d>>=1;if(0!==d?(N&=d-1,N+=d):N=0,S++,0==--M[k]){if(k===T)break;k=e[n+h[S]]}if(k>R&&(N&g)!==_){for(0===L&&(L=R),b+=x,O=1<<(A=k-L);A+L<T&&!((O-=M[A+L])<=0);)A++,O<<=1;if(I+=1<<A,1===t&&I>852||2===t&&I>592)return 1;f[_=N&g]=R<<24|A<<16|b-l|0}}return 0!==N&&(f[b+N]=k-L<<24|64<<16|0),c.bits=R,0}},function(t,e,n){"use strict";t.exports={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8}},function(t,e,n){},function(t,e,n){"use strict";n.r(e);n(22);class r{constructor(t,e,n,r){this.title=t,this.date1=e,this.date2=n,this.description=r}}new r("tytul1","beginning1","end1","description1"),new r("tytul2","beginning2","end2","description2"),new r("tytul3","beginning3","end3","description3"),new r("tytul4","beginning4","end4","description4"),new r("tytul5","beginning5","end5","description5"),new r("do dodania1","beginning1","end1","description1"),new r("do dodania2","beginning2","end2","description2");n(48);document.getElementById("dodaj").addEventListener("click",t=>{const e=document.getElementById("newTitle").value,n=document.getElementById("newStart").value,i=document.getElementById("newStop").value,o=document.getElementById("newDecscription").value;let a=new r(e,n,i,o);return console.log(a),a})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy93ZWJwYWNrL2J1aWxkaW4vZ2xvYmFsLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvaW5oZXJpdHMvaW5oZXJpdHNfYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvX3N0cmVhbV9kdXBsZXguanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9idWZmZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLXV0aWwtaXMvbGliL3V0aWwuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9wcm9jZXNzLW5leHRpY2stYXJncy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3NhZmUtYnVmZmVyL2luZGV4LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvcGFrby9saWIvdXRpbHMvY29tbW9uLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvZXZlbnRzL2V2ZW50cy5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9yZWFkYWJsZS1icm93c2VyLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9fc3RyZWFtX3dyaXRhYmxlLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvaXNhcnJheS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvX3N0cmVhbV9yZWFkYWJsZS5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvaW50ZXJuYWwvc3RyZWFtcy9zdHJlYW0tYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvaW50ZXJuYWwvc3RyZWFtcy9kZXN0cm95LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvc3RyaW5nX2RlY29kZXIvbGliL3N0cmluZ19kZWNvZGVyLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9fc3RyZWFtX3RyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2Fzc2VydC9hc3NlcnQuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy91dGlsL3V0aWwuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9wYWtvL2xpYi96bGliL2FkbGVyMzIuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9wYWtvL2xpYi96bGliL2NyYzMyLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS16bGliL2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2Jhc2U2NC1qcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2llZWU3NTQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9zdHJlYW0tYnJvd3NlcmlmeS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvaW50ZXJuYWwvc3RyZWFtcy9CdWZmZXJMaXN0LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvdGltZXJzLWJyb3dzZXJpZnkvbWFpbi5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3NldGltbWVkaWF0ZS9zZXRJbW1lZGlhdGUuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy91dGlsLWRlcHJlY2F0ZS9icm93c2VyLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9fc3RyZWFtX3Bhc3N0aHJvdWdoLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL3dyaXRhYmxlLWJyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vZHVwbGV4LWJyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vdHJhbnNmb3JtLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL3Bhc3N0aHJvdWdoLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS16bGliL2xpYi9iaW5kaW5nLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvb2JqZWN0LWFzc2lnbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3V0aWwvc3VwcG9ydC9pc0J1ZmZlckJyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9wYWtvL2xpYi96bGliL3pzdHJlYW0uanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9wYWtvL2xpYi96bGliL2RlZmxhdGUuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9wYWtvL2xpYi96bGliL3RyZWVzLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvcGFrby9saWIvemxpYi9tZXNzYWdlcy5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3Bha28vbGliL3psaWIvaW5mbGF0ZS5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3Bha28vbGliL3psaWIvaW5mZmFzdC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3Bha28vbGliL3psaWIvaW5mdHJlZXMuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9wYWtvL2xpYi96bGliL2NvbnN0YW50cy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvZnVuY3Rpb25hbGl0aWVzLmpzIiwid2VicGFjazovLy8uL3NyYy9qcy9uZXcuanMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJjYWNoZWRTZXRUaW1lb3V0IiwiY2FjaGVkQ2xlYXJUaW1lb3V0IiwicHJvY2VzcyIsImRlZmF1bHRTZXRUaW1vdXQiLCJFcnJvciIsImRlZmF1bHRDbGVhclRpbWVvdXQiLCJydW5UaW1lb3V0IiwiZnVuIiwic2V0VGltZW91dCIsImUiLCJ0aGlzIiwiY2xlYXJUaW1lb3V0IiwiY3VycmVudFF1ZXVlIiwicXVldWUiLCJkcmFpbmluZyIsInF1ZXVlSW5kZXgiLCJjbGVhblVwTmV4dFRpY2siLCJsZW5ndGgiLCJjb25jYXQiLCJkcmFpblF1ZXVlIiwidGltZW91dCIsImxlbiIsInJ1biIsIm1hcmtlciIsInJ1bkNsZWFyVGltZW91dCIsIkl0ZW0iLCJhcnJheSIsIm5vb3AiLCJuZXh0VGljayIsImFyZ3MiLCJBcnJheSIsImFyZ3VtZW50cyIsInB1c2giLCJhcHBseSIsInRpdGxlIiwiYnJvd3NlciIsImVudiIsImFyZ3YiLCJ2ZXJzaW9uIiwidmVyc2lvbnMiLCJvbiIsImFkZExpc3RlbmVyIiwib25jZSIsIm9mZiIsInJlbW92ZUxpc3RlbmVyIiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwiZW1pdCIsInByZXBlbmRMaXN0ZW5lciIsInByZXBlbmRPbmNlTGlzdGVuZXIiLCJsaXN0ZW5lcnMiLCJiaW5kaW5nIiwiY3dkIiwiY2hkaXIiLCJkaXIiLCJ1bWFzayIsImciLCJGdW5jdGlvbiIsIndpbmRvdyIsImN0b3IiLCJzdXBlckN0b3IiLCJzdXBlcl8iLCJjb25zdHJ1Y3RvciIsIndyaXRhYmxlIiwiY29uZmlndXJhYmxlIiwiVGVtcEN0b3IiLCJwbmEiLCJvYmplY3RLZXlzIiwia2V5cyIsIm9iaiIsIkR1cGxleCIsInV0aWwiLCJpbmhlcml0cyIsIlJlYWRhYmxlIiwiV3JpdGFibGUiLCJ2IiwibWV0aG9kIiwib3B0aW9ucyIsInJlYWRhYmxlIiwiYWxsb3dIYWxmT3BlbiIsIm9uZW5kIiwiX3dyaXRhYmxlU3RhdGUiLCJlbmRlZCIsIm9uRW5kTlQiLCJzZWxmIiwiZW5kIiwiaGlnaFdhdGVyTWFyayIsInVuZGVmaW5lZCIsIl9yZWFkYWJsZVN0YXRlIiwiZGVzdHJveWVkIiwic2V0IiwiX2Rlc3Ryb3kiLCJlcnIiLCJjYiIsImJhc2U2NCIsImllZWU3NTQiLCJpc0FycmF5Iiwia01heExlbmd0aCIsIkJ1ZmZlciIsIlRZUEVEX0FSUkFZX1NVUFBPUlQiLCJjcmVhdGVCdWZmZXIiLCJ0aGF0IiwiUmFuZ2VFcnJvciIsIlVpbnQ4QXJyYXkiLCJfX3Byb3RvX18iLCJhcmciLCJlbmNvZGluZ09yT2Zmc2V0IiwiYWxsb2NVbnNhZmUiLCJmcm9tIiwiVHlwZUVycm9yIiwiQXJyYXlCdWZmZXIiLCJieXRlT2Zmc2V0IiwiYnl0ZUxlbmd0aCIsImZyb21BcnJheUxpa2UiLCJmcm9tQXJyYXlCdWZmZXIiLCJzdHJpbmciLCJlbmNvZGluZyIsImlzRW5jb2RpbmciLCJhY3R1YWwiLCJ3cml0ZSIsInNsaWNlIiwiZnJvbVN0cmluZyIsImlzQnVmZmVyIiwiY2hlY2tlZCIsImNvcHkiLCJidWZmZXIiLCJ2YWwiLCJ0eXBlIiwiZGF0YSIsImZyb21PYmplY3QiLCJhc3NlcnRTaXplIiwic2l6ZSIsInRvU3RyaW5nIiwiaXNWaWV3IiwibG93ZXJlZENhc2UiLCJ1dGY4VG9CeXRlcyIsImJhc2U2NFRvQnl0ZXMiLCJ0b0xvd2VyQ2FzZSIsInNsb3dUb1N0cmluZyIsInN0YXJ0IiwiaGV4U2xpY2UiLCJ1dGY4U2xpY2UiLCJhc2NpaVNsaWNlIiwibGF0aW4xU2xpY2UiLCJiYXNlNjRTbGljZSIsInV0ZjE2bGVTbGljZSIsInN3YXAiLCJiIiwiYmlkaXJlY3Rpb25hbEluZGV4T2YiLCJpc05hTiIsImFycmF5SW5kZXhPZiIsImluZGV4T2YiLCJsYXN0SW5kZXhPZiIsImFyciIsImluZGV4U2l6ZSIsImFyckxlbmd0aCIsInZhbExlbmd0aCIsIlN0cmluZyIsInJlYWQiLCJidWYiLCJyZWFkVUludDE2QkUiLCJmb3VuZEluZGV4IiwiZm91bmQiLCJqIiwiaGV4V3JpdGUiLCJvZmZzZXQiLCJOdW1iZXIiLCJyZW1haW5pbmciLCJzdHJMZW4iLCJwYXJzZWQiLCJwYXJzZUludCIsInN1YnN0ciIsInV0ZjhXcml0ZSIsImJsaXRCdWZmZXIiLCJhc2NpaVdyaXRlIiwic3RyIiwiYnl0ZUFycmF5IiwiY2hhckNvZGVBdCIsImFzY2lpVG9CeXRlcyIsImxhdGluMVdyaXRlIiwiYmFzZTY0V3JpdGUiLCJ1Y3MyV3JpdGUiLCJ1bml0cyIsImhpIiwibG8iLCJ1dGYxNmxlVG9CeXRlcyIsImZyb21CeXRlQXJyYXkiLCJNYXRoIiwibWluIiwicmVzIiwic2Vjb25kQnl0ZSIsInRoaXJkQnl0ZSIsImZvdXJ0aEJ5dGUiLCJ0ZW1wQ29kZVBvaW50IiwiZmlyc3RCeXRlIiwiY29kZVBvaW50IiwiYnl0ZXNQZXJTZXF1ZW5jZSIsImNvZGVQb2ludHMiLCJNQVhfQVJHVU1FTlRTX0xFTkdUSCIsImZyb21DaGFyQ29kZSIsImRlY29kZUNvZGVQb2ludHNBcnJheSIsIlNsb3dCdWZmZXIiLCJhbGxvYyIsIklOU1BFQ1RfTUFYX0JZVEVTIiwiZ2xvYmFsIiwiZm9vIiwic3ViYXJyYXkiLCJ0eXBlZEFycmF5U3VwcG9ydCIsInBvb2xTaXplIiwiX2F1Z21lbnQiLCJzcGVjaWVzIiwiZmlsbCIsImFsbG9jVW5zYWZlU2xvdyIsIl9pc0J1ZmZlciIsImNvbXBhcmUiLCJhIiwieCIsInkiLCJsaXN0IiwicG9zIiwic3dhcDE2Iiwic3dhcDMyIiwic3dhcDY0IiwiZXF1YWxzIiwiaW5zcGVjdCIsIm1heCIsIm1hdGNoIiwiam9pbiIsInRhcmdldCIsInRoaXNTdGFydCIsInRoaXNFbmQiLCJ0aGlzQ29weSIsInRhcmdldENvcHkiLCJpbmNsdWRlcyIsImlzRmluaXRlIiwidG9KU09OIiwiX2FyciIsInJldCIsIm91dCIsInRvSGV4IiwiYnl0ZXMiLCJjaGVja09mZnNldCIsImV4dCIsImNoZWNrSW50Iiwib2JqZWN0V3JpdGVVSW50MTYiLCJsaXR0bGVFbmRpYW4iLCJvYmplY3RXcml0ZVVJbnQzMiIsImNoZWNrSUVFRTc1NCIsIndyaXRlRmxvYXQiLCJub0Fzc2VydCIsIndyaXRlRG91YmxlIiwibmV3QnVmIiwic2xpY2VMZW4iLCJyZWFkVUludExFIiwibXVsIiwicmVhZFVJbnRCRSIsInJlYWRVSW50OCIsInJlYWRVSW50MTZMRSIsInJlYWRVSW50MzJMRSIsInJlYWRVSW50MzJCRSIsInJlYWRJbnRMRSIsInBvdyIsInJlYWRJbnRCRSIsInJlYWRJbnQ4IiwicmVhZEludDE2TEUiLCJyZWFkSW50MTZCRSIsInJlYWRJbnQzMkxFIiwicmVhZEludDMyQkUiLCJyZWFkRmxvYXRMRSIsInJlYWRGbG9hdEJFIiwicmVhZERvdWJsZUxFIiwicmVhZERvdWJsZUJFIiwid3JpdGVVSW50TEUiLCJ3cml0ZVVJbnRCRSIsIndyaXRlVUludDgiLCJmbG9vciIsIndyaXRlVUludDE2TEUiLCJ3cml0ZVVJbnQxNkJFIiwid3JpdGVVSW50MzJMRSIsIndyaXRlVUludDMyQkUiLCJ3cml0ZUludExFIiwibGltaXQiLCJzdWIiLCJ3cml0ZUludEJFIiwid3JpdGVJbnQ4Iiwid3JpdGVJbnQxNkxFIiwid3JpdGVJbnQxNkJFIiwid3JpdGVJbnQzMkxFIiwid3JpdGVJbnQzMkJFIiwid3JpdGVGbG9hdExFIiwid3JpdGVGbG9hdEJFIiwid3JpdGVEb3VibGVMRSIsIndyaXRlRG91YmxlQkUiLCJ0YXJnZXRTdGFydCIsImNvZGUiLCJJTlZBTElEX0JBU0U2NF9SRSIsIkluZmluaXR5IiwibGVhZFN1cnJvZ2F0ZSIsInRvQnl0ZUFycmF5IiwidHJpbSIsInJlcGxhY2UiLCJzdHJpbmd0cmltIiwiYmFzZTY0Y2xlYW4iLCJzcmMiLCJkc3QiLCJvYmplY3RUb1N0cmluZyIsImlzQm9vbGVhbiIsImlzTnVsbCIsImlzTnVsbE9yVW5kZWZpbmVkIiwiaXNOdW1iZXIiLCJpc1N0cmluZyIsImlzU3ltYm9sIiwiaXNVbmRlZmluZWQiLCJpc1JlZ0V4cCIsInJlIiwiaXNPYmplY3QiLCJpc0RhdGUiLCJpc0Vycm9yIiwiaXNGdW5jdGlvbiIsImlzUHJpbWl0aXZlIiwiZm4iLCJhcmcxIiwiYXJnMiIsImFyZzMiLCJjb3B5UHJvcHMiLCJTYWZlQnVmZmVyIiwiVFlQRURfT0siLCJVaW50MTZBcnJheSIsIkludDMyQXJyYXkiLCJfaGFzIiwiYXNzaWduIiwic291cmNlcyIsInNvdXJjZSIsInNoaWZ0Iiwic2hyaW5rQnVmIiwiZm5UeXBlZCIsImFycmF5U2V0IiwiZGVzdCIsInNyY19vZmZzIiwiZGVzdF9vZmZzIiwiZmxhdHRlbkNodW5rcyIsImNodW5rcyIsImNodW5rIiwicmVzdWx0IiwiZm5VbnR5cGVkIiwic2V0VHlwZWQiLCJCdWY4IiwiQnVmMTYiLCJCdWYzMiIsIlJlZmxlY3RPd25LZXlzIiwiUiIsIlJlZmxlY3QiLCJSZWZsZWN0QXBwbHkiLCJyZWNlaXZlciIsIm93bktleXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiTnVtYmVySXNOYU4iLCJFdmVudEVtaXR0ZXIiLCJpbml0IiwiX2V2ZW50cyIsIl9ldmVudHNDb3VudCIsIl9tYXhMaXN0ZW5lcnMiLCJkZWZhdWx0TWF4TGlzdGVuZXJzIiwiJGdldE1heExpc3RlbmVycyIsIl9hZGRMaXN0ZW5lciIsImxpc3RlbmVyIiwicHJlcGVuZCIsImV2ZW50cyIsImV4aXN0aW5nIiwid2FybmluZyIsIm5ld0xpc3RlbmVyIiwidW5zaGlmdCIsIndhcm5lZCIsInciLCJlbWl0dGVyIiwiY291bnQiLCJjb25zb2xlIiwid2FybiIsIm9uY2VXcmFwcGVyIiwiZmlyZWQiLCJ3cmFwRm4iLCJfb25jZVdyYXAiLCJzdGF0ZSIsIndyYXBwZWQiLCJfbGlzdGVuZXJzIiwidW53cmFwIiwiZXZsaXN0ZW5lciIsInVud3JhcExpc3RlbmVycyIsImFycmF5Q2xvbmUiLCJsaXN0ZW5lckNvdW50IiwiZ2V0UHJvdG90eXBlT2YiLCJzZXRNYXhMaXN0ZW5lcnMiLCJnZXRNYXhMaXN0ZW5lcnMiLCJkb0Vycm9yIiwiZXJyb3IiLCJlciIsIm1lc3NhZ2UiLCJjb250ZXh0IiwiaGFuZGxlciIsInBvc2l0aW9uIiwib3JpZ2luYWxMaXN0ZW5lciIsImluZGV4IiwicG9wIiwic3BsaWNlT25lIiwicmF3TGlzdGVuZXJzIiwiZXZlbnROYW1lcyIsIlN0cmVhbSIsIlRyYW5zZm9ybSIsIlBhc3NUaHJvdWdoIiwiQ29ya2VkUmVxdWVzdCIsIl90aGlzIiwibmV4dCIsImVudHJ5IiwiZmluaXNoIiwiY29ya1JlcSIsImNhbGxiYWNrIiwicGVuZGluZ2NiIiwiY29ya2VkUmVxdWVzdHNGcmVlIiwib25Db3JrZWRGaW5pc2giLCJhc3luY1dyaXRlIiwic2V0SW1tZWRpYXRlIiwiV3JpdGFibGVTdGF0ZSIsImludGVybmFsVXRpbCIsImRlcHJlY2F0ZSIsIk91clVpbnQ4QXJyYXkiLCJyZWFsSGFzSW5zdGFuY2UiLCJkZXN0cm95SW1wbCIsIm5vcCIsInN0cmVhbSIsImlzRHVwbGV4Iiwib2JqZWN0TW9kZSIsIndyaXRhYmxlT2JqZWN0TW9kZSIsImh3bSIsIndyaXRhYmxlSHdtIiwid3JpdGFibGVIaWdoV2F0ZXJNYXJrIiwiZGVmYXVsdEh3bSIsImZpbmFsQ2FsbGVkIiwibmVlZERyYWluIiwiZW5kaW5nIiwiZmluaXNoZWQiLCJub0RlY29kZSIsImRlY29kZVN0cmluZ3MiLCJkZWZhdWx0RW5jb2RpbmciLCJ3cml0aW5nIiwiY29ya2VkIiwic3luYyIsImJ1ZmZlclByb2Nlc3NpbmciLCJvbndyaXRlIiwid3JpdGVjYiIsIndyaXRlbGVuIiwib253cml0ZVN0YXRlVXBkYXRlIiwiZmluaXNoTWF5YmUiLCJlcnJvckVtaXR0ZWQiLCJvbndyaXRlRXJyb3IiLCJuZWVkRmluaXNoIiwiYnVmZmVyZWRSZXF1ZXN0IiwiY2xlYXJCdWZmZXIiLCJhZnRlcldyaXRlIiwibGFzdEJ1ZmZlcmVkUmVxdWVzdCIsInByZWZpbmlzaGVkIiwiYnVmZmVyZWRSZXF1ZXN0Q291bnQiLCJfd3JpdGUiLCJ3cml0ZXYiLCJfd3JpdGV2IiwiZGVzdHJveSIsImZpbmFsIiwiX2ZpbmFsIiwiZG9Xcml0ZSIsIm9ud3JpdGVEcmFpbiIsImhvbGRlciIsImFsbEJ1ZmZlcnMiLCJpc0J1ZiIsImNhbGxGaW5hbCIsIm5lZWQiLCJwcmVmaW5pc2giLCJnZXRCdWZmZXIiLCJjdXJyZW50IiwiXyIsImhhc0luc3RhbmNlIiwicGlwZSIsIl91aW50OEFycmF5VG9CdWZmZXIiLCJ3cml0ZUFmdGVyRW5kIiwidmFsaWQiLCJ2YWxpZENodW5rIiwibmV3Q2h1bmsiLCJkZWNvZGVDaHVuayIsImxhc3QiLCJ3cml0ZU9yQnVmZmVyIiwiY29yayIsInVuY29yayIsInNldERlZmF1bHRFbmNvZGluZyIsImVuZFdyaXRhYmxlIiwiX3VuZGVzdHJveSIsInVuZGVzdHJveSIsIlJlYWRhYmxlU3RhdGUiLCJFRWxpc3RlbmVyQ291bnQiLCJkZWJ1Z1V0aWwiLCJkZWJ1ZyIsImRlYnVnbG9nIiwiU3RyaW5nRGVjb2RlciIsIkJ1ZmZlckxpc3QiLCJrUHJveHlFdmVudHMiLCJyZWFkYWJsZU9iamVjdE1vZGUiLCJyZWFkYWJsZUh3bSIsInJlYWRhYmxlSGlnaFdhdGVyTWFyayIsInBpcGVzIiwicGlwZXNDb3VudCIsImZsb3dpbmciLCJlbmRFbWl0dGVkIiwicmVhZGluZyIsIm5lZWRSZWFkYWJsZSIsImVtaXR0ZWRSZWFkYWJsZSIsInJlYWRhYmxlTGlzdGVuaW5nIiwicmVzdW1lU2NoZWR1bGVkIiwiYXdhaXREcmFpbiIsInJlYWRpbmdNb3JlIiwiZGVjb2RlciIsIl9yZWFkIiwicmVhZGFibGVBZGRDaHVuayIsImFkZFRvRnJvbnQiLCJza2lwQ2h1bmtDaGVjayIsImVtaXRSZWFkYWJsZSIsIm9uRW9mQ2h1bmsiLCJjaHVua0ludmFsaWQiLCJhZGRDaHVuayIsIm1heWJlUmVhZE1vcmUiLCJuZWVkTW9yZURhdGEiLCJpc1BhdXNlZCIsInNldEVuY29kaW5nIiwiZW5jIiwiTUFYX0hXTSIsImhvd011Y2hUb1JlYWQiLCJoZWFkIiwiY29tcHV0ZU5ld0hpZ2hXYXRlck1hcmsiLCJlbWl0UmVhZGFibGVfIiwiZmxvdyIsIm1heWJlUmVhZE1vcmVfIiwiblJlYWRpbmdOZXh0VGljayIsInJlc3VtZV8iLCJmcm9tTGlzdCIsImNsZWFyIiwiaGFzU3RyaW5ncyIsIm5iIiwidGFpbCIsImNvcHlGcm9tQnVmZmVyU3RyaW5nIiwiY29weUZyb21CdWZmZXIiLCJmcm9tTGlzdFBhcnRpYWwiLCJlbmRSZWFkYWJsZSIsImVuZFJlYWRhYmxlTlQiLCJ4cyIsIm5PcmlnIiwiZG9SZWFkIiwicGlwZU9wdHMiLCJlbmRGbiIsInN0ZG91dCIsInN0ZGVyciIsInVucGlwZSIsIm9udW5waXBlIiwidW5waXBlSW5mbyIsImhhc1VucGlwZWQiLCJvbmNsb3NlIiwib25maW5pc2giLCJvbmRyYWluIiwib25lcnJvciIsIm9uZGF0YSIsImNsZWFuZWRVcCIsInBpcGVPbkRyYWluIiwiaW5jcmVhc2VkQXdhaXREcmFpbiIsInBhdXNlIiwiZXZlbnQiLCJyZXN1bWUiLCJkZXN0cyIsInNwbGljZSIsImV2Iiwid3JhcCIsInBhdXNlZCIsIl9mcm9tTGlzdCIsImVtaXRFcnJvck5UIiwicmVhZGFibGVEZXN0cm95ZWQiLCJ3cml0YWJsZURlc3Ryb3llZCIsIm5lbmMiLCJyZXRyaWVkIiwiX25vcm1hbGl6ZUVuY29kaW5nIiwibm9ybWFsaXplRW5jb2RpbmciLCJ0ZXh0IiwidXRmMTZUZXh0IiwidXRmMTZFbmQiLCJmaWxsTGFzdCIsInV0ZjhGaWxsTGFzdCIsImJhc2U2NFRleHQiLCJiYXNlNjRFbmQiLCJzaW1wbGVXcml0ZSIsInNpbXBsZUVuZCIsImxhc3ROZWVkIiwibGFzdFRvdGFsIiwibGFzdENoYXIiLCJ1dGY4Q2hlY2tCeXRlIiwiYnl0ZSIsInV0ZjhDaGVja0V4dHJhQnl0ZXMiLCJ0b3RhbCIsInV0ZjhDaGVja0luY29tcGxldGUiLCJhZnRlclRyYW5zZm9ybSIsInRzIiwiX3RyYW5zZm9ybVN0YXRlIiwidHJhbnNmb3JtaW5nIiwid3JpdGVjaHVuayIsInJzIiwibmVlZFRyYW5zZm9ybSIsIndyaXRlZW5jb2RpbmciLCJ0cmFuc2Zvcm0iLCJfdHJhbnNmb3JtIiwiZmx1c2giLCJfZmx1c2giLCJkb25lIiwiX3RoaXMyIiwiZXJyMiIsIm9iamVjdEFzc2lnbiIsImhhc093biIsInBTbGljZSIsImZ1bmN0aW9uc0hhdmVOYW1lcyIsInBUb1N0cmluZyIsImFycmJ1ZiIsIkRhdGFWaWV3IiwiYXNzZXJ0Iiwib2siLCJyZWdleCIsImdldE5hbWUiLCJmdW5jIiwidHJ1bmNhdGUiLCJzb21ldGhpbmciLCJyYXduYW1lIiwiZmFpbCIsImV4cGVjdGVkIiwib3BlcmF0b3IiLCJzdGFja1N0YXJ0RnVuY3Rpb24iLCJBc3NlcnRpb25FcnJvciIsIl9kZWVwRXF1YWwiLCJzdHJpY3QiLCJtZW1vcyIsImdldFRpbWUiLCJtdWx0aWxpbmUiLCJsYXN0SW5kZXgiLCJpZ25vcmVDYXNlIiwiRmxvYXQzMkFycmF5IiwiRmxvYXQ2NEFycmF5IiwiYWN0dWFsSW5kZXgiLCJhY3R1YWxWaXNpdGVkT2JqZWN0cyIsImFJc0FyZ3MiLCJpc0FyZ3VtZW50cyIsImJJc0FyZ3MiLCJrYSIsImtiIiwic29ydCIsIm9iakVxdWl2IiwiZXhwZWN0ZWRFeGNlcHRpb24iLCJ0ZXN0IiwiaXNQcm90b3R5cGVPZiIsIl90aHJvd3MiLCJzaG91bGRUaHJvdyIsImJsb2NrIiwiX3RyeUJsb2NrIiwidXNlclByb3ZpZGVkTWVzc2FnZSIsImlzVW5leHBlY3RlZEV4Y2VwdGlvbiIsImdlbmVyYXRlZE1lc3NhZ2UiLCJnZXRNZXNzYWdlIiwiY2FwdHVyZVN0YWNrVHJhY2UiLCJzdGFjayIsImZuX25hbWUiLCJpZHgiLCJuZXh0X2xpbmUiLCJzdWJzdHJpbmciLCJlcXVhbCIsIm5vdEVxdWFsIiwiZGVlcEVxdWFsIiwiZGVlcFN0cmljdEVxdWFsIiwibm90RGVlcEVxdWFsIiwibm90RGVlcFN0cmljdEVxdWFsIiwic3RyaWN0RXF1YWwiLCJub3RTdHJpY3RFcXVhbCIsInRocm93cyIsImRvZXNOb3RUaHJvdyIsImlmRXJyb3IiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIiwiZGVzY3JpcHRvcnMiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJmb3JtYXRSZWdFeHAiLCJmb3JtYXQiLCJmIiwib2JqZWN0cyIsIkpTT04iLCJzdHJpbmdpZnkiLCJtc2ciLCJub0RlcHJlY2F0aW9uIiwidGhyb3dEZXByZWNhdGlvbiIsInRyYWNlRGVwcmVjYXRpb24iLCJ0cmFjZSIsImRlYnVnRW52aXJvbiIsImRlYnVncyIsIm9wdHMiLCJjdHgiLCJzZWVuIiwic3R5bGl6ZSIsInN0eWxpemVOb0NvbG9yIiwiZGVwdGgiLCJjb2xvcnMiLCJzaG93SGlkZGVuIiwiX2V4dGVuZCIsImN1c3RvbUluc3BlY3QiLCJzdHlsaXplV2l0aENvbG9yIiwiZm9ybWF0VmFsdWUiLCJzdHlsZVR5cGUiLCJzdHlsZSIsInN0eWxlcyIsInJlY3Vyc2VUaW1lcyIsInByaW1pdGl2ZSIsInNpbXBsZSIsImZvcm1hdFByaW1pdGl2ZSIsInZpc2libGVLZXlzIiwiaGFzaCIsImZvckVhY2giLCJhcnJheVRvSGFzaCIsImZvcm1hdEVycm9yIiwiUmVnRXhwIiwiRGF0ZSIsIm91dHB1dCIsImJhc2UiLCJicmFjZXMiLCJ0b1VUQ1N0cmluZyIsImZvcm1hdFByb3BlcnR5IiwiZm9ybWF0QXJyYXkiLCJtYXAiLCJyZWR1Y2UiLCJwcmV2IiwiY3VyIiwibnVtTGluZXNFc3QiLCJyZWR1Y2VUb1NpbmdsZVN0cmluZyIsImRlc2MiLCJzcGxpdCIsImxpbmUiLCJhciIsInBhZCIsIk5PREVfREVCVUciLCJ0b1VwcGVyQ2FzZSIsInBpZCIsIm1vbnRocyIsInRpbWVzdGFtcCIsInRpbWUiLCJnZXRIb3VycyIsImdldE1pbnV0ZXMiLCJnZXRTZWNvbmRzIiwiZ2V0RGF0ZSIsImdldE1vbnRoIiwicHJvcCIsImxvZyIsIm9yaWdpbiIsImFkZCIsImtDdXN0b21Qcm9taXNpZmllZFN5bWJvbCIsImNhbGxiYWNraWZ5T25SZWplY3RlZCIsInJlYXNvbiIsIm5ld1JlYXNvbiIsInByb21pc2lmeSIsIm9yaWdpbmFsIiwicHJvbWlzZVJlc29sdmUiLCJwcm9taXNlUmVqZWN0IiwicHJvbWlzZSIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0Iiwic2V0UHJvdG90eXBlT2YiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiY3VzdG9tIiwiY2FsbGJhY2tpZnkiLCJjYWxsYmFja2lmaWVkIiwibWF5YmVDYiIsInRoZW4iLCJyZWoiLCJhZGxlciIsInMxIiwiczIiLCJjcmNUYWJsZSIsInRhYmxlIiwiayIsIm1ha2VUYWJsZSIsImNyYyIsImtSYW5nZUVycm9yTWVzc2FnZSIsIlpfTUlOX1dJTkRPV0JJVFMiLCJaX01BWF9XSU5ET1dCSVRTIiwiWl9ERUZBVUxUX1dJTkRPV0JJVFMiLCJaX01JTl9DSFVOSyIsIlpfTUFYX0NIVU5LIiwiWl9ERUZBVUxUX0NIVU5LIiwiWl9NSU5fTUVNTEVWRUwiLCJaX01BWF9NRU1MRVZFTCIsIlpfREVGQVVMVF9NRU1MRVZFTCIsIlpfTUlOX0xFVkVMIiwiWl9NQVhfTEVWRUwiLCJaX0RFRkFVTFRfTEVWRUwiLCJaX0RFRkFVTFRfQ09NUFJFU1NJT04iLCJia2V5cyIsImJrIiwiYmtleSIsImNvZGVzIiwiWl9PSyIsIlpfU1RSRUFNX0VORCIsIlpfTkVFRF9ESUNUIiwiWl9FUlJOTyIsIlpfU1RSRUFNX0VSUk9SIiwiWl9EQVRBX0VSUk9SIiwiWl9NRU1fRVJST1IiLCJaX0JVRl9FUlJPUiIsIlpfVkVSU0lPTl9FUlJPUiIsImNrZXlzIiwiY2siLCJja2V5IiwiemxpYkJ1ZmZlciIsImVuZ2luZSIsImJ1ZmZlcnMiLCJucmVhZCIsIm9uRW5kIiwiY2xvc2UiLCJ6bGliQnVmZmVyU3luYyIsImZsdXNoRmxhZyIsIl9maW5pc2hGbHVzaEZsYWciLCJfcHJvY2Vzc0NodW5rIiwiRGVmbGF0ZSIsIlpsaWIiLCJERUZMQVRFIiwiSW5mbGF0ZSIsIklORkxBVEUiLCJHemlwIiwiR1pJUCIsIkd1bnppcCIsIkdVTlpJUCIsIkRlZmxhdGVSYXciLCJERUZMQVRFUkFXIiwiSW5mbGF0ZVJhdyIsIklORkxBVEVSQVciLCJVbnppcCIsIlVOWklQIiwiaXNWYWxpZEZsdXNoRmxhZyIsImZsYWciLCJaX05PX0ZMVVNIIiwiWl9QQVJUSUFMX0ZMVVNIIiwiWl9TWU5DX0ZMVVNIIiwiWl9GVUxMX0ZMVVNIIiwiWl9GSU5JU0giLCJaX0JMT0NLIiwiX29wdHMiLCJfY2h1bmtTaXplIiwiY2h1bmtTaXplIiwiZmluaXNoRmx1c2giLCJfZmx1c2hGbGFnIiwid2luZG93Qml0cyIsImxldmVsIiwibWVtTGV2ZWwiLCJzdHJhdGVneSIsIlpfRklMVEVSRUQiLCJaX0hVRkZNQU5fT05MWSIsIlpfUkxFIiwiWl9GSVhFRCIsIlpfREVGQVVMVF9TVFJBVEVHWSIsImRpY3Rpb25hcnkiLCJfaGFuZGxlIiwiX2hhZEVycm9yIiwiZXJybm8iLCJfY2xvc2UiLCJfYnVmZmVyIiwiX29mZnNldCIsIl9sZXZlbCIsIl9zdHJhdGVneSIsImVtaXRDbG9zZU5UIiwiZnJlZXplIiwiY3JlYXRlRGVmbGF0ZSIsImNyZWF0ZUluZmxhdGUiLCJjcmVhdGVEZWZsYXRlUmF3IiwiY3JlYXRlSW5mbGF0ZVJhdyIsImNyZWF0ZUd6aXAiLCJjcmVhdGVHdW56aXAiLCJjcmVhdGVVbnppcCIsImRlZmxhdGUiLCJkZWZsYXRlU3luYyIsImd6aXAiLCJnemlwU3luYyIsImRlZmxhdGVSYXciLCJkZWZsYXRlUmF3U3luYyIsInVuemlwIiwidW56aXBTeW5jIiwiaW5mbGF0ZSIsImluZmxhdGVTeW5jIiwiZ3VuemlwIiwiZ3VuemlwU3luYyIsImluZmxhdGVSYXciLCJpbmZsYXRlUmF3U3luYyIsInBhcmFtcyIsInJlc2V0Iiwia2luZCIsIndzIiwiYXZhaWxJbkJlZm9yZSIsImF2YWlsT3V0QmVmb3JlIiwiaW5PZmYiLCJhc3luYyIsIndyaXRlU3luYyIsInJlcSIsImF2YWlsSW5BZnRlciIsImF2YWlsT3V0QWZ0ZXIiLCJoYXZlIiwibmV3UmVxIiwiYjY0IiwibGVucyIsImdldExlbnMiLCJ2YWxpZExlbiIsInBsYWNlSG9sZGVyc0xlbiIsInRtcCIsIkFyciIsIl9ieXRlTGVuZ3RoIiwiY3VyQnl0ZSIsInJldkxvb2t1cCIsInVpbnQ4IiwiZXh0cmFCeXRlcyIsInBhcnRzIiwibGVuMiIsImVuY29kZUNodW5rIiwibG9va3VwIiwibnVtIiwiaXNMRSIsIm1MZW4iLCJuQnl0ZXMiLCJlTGVuIiwiZU1heCIsImVCaWFzIiwibkJpdHMiLCJOYU4iLCJydCIsImFicyIsIkxOMiIsIkVFIiwiX2lzU3RkaW8iLCJkaWRPbkVuZCIsImNsZWFudXAiLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiX2NsYXNzQ2FsbENoZWNrIiwiVGltZW91dCIsImlkIiwiY2xlYXJGbiIsIl9pZCIsIl9jbGVhckZuIiwic2NvcGUiLCJzZXRJbnRlcnZhbCIsImNsZWFySW50ZXJ2YWwiLCJ1bnJlZiIsInJlZiIsImVucm9sbCIsIml0ZW0iLCJtc2VjcyIsIl9pZGxlVGltZW91dElkIiwiX2lkbGVUaW1lb3V0IiwidW5lbnJvbGwiLCJfdW5yZWZBY3RpdmUiLCJhY3RpdmUiLCJfb25UaW1lb3V0IiwiY2xlYXJJbW1lZGlhdGUiLCJyZWdpc3RlckltbWVkaWF0ZSIsImh0bWwiLCJjaGFubmVsIiwibWVzc2FnZVByZWZpeCIsIm9uR2xvYmFsTWVzc2FnZSIsIm5leHRIYW5kbGUiLCJ0YXNrc0J5SGFuZGxlIiwiY3VycmVudGx5UnVubmluZ0FUYXNrIiwiZG9jIiwiZG9jdW1lbnQiLCJhdHRhY2hUbyIsImhhbmRsZSIsInJ1bklmUHJlc2VudCIsInBvc3RNZXNzYWdlIiwiaW1wb3J0U2NyaXB0cyIsInBvc3RNZXNzYWdlSXNBc3luY2hyb25vdXMiLCJvbGRPbk1lc3NhZ2UiLCJvbm1lc3NhZ2UiLCJjYW5Vc2VQb3N0TWVzc2FnZSIsIk1lc3NhZ2VDaGFubmVsIiwicG9ydDEiLCJwb3J0MiIsImNyZWF0ZUVsZW1lbnQiLCJkb2N1bWVudEVsZW1lbnQiLCJzY3JpcHQiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZW1vdmVDaGlsZCIsImFwcGVuZENoaWxkIiwicmFuZG9tIiwiYWRkRXZlbnRMaXN0ZW5lciIsImF0dGFjaEV2ZW50IiwidGFzayIsImNvbmZpZyIsImxvY2FsU3RvcmFnZSIsIlpzdHJlYW0iLCJ6bGliX2RlZmxhdGUiLCJ6bGliX2luZmxhdGUiLCJjb25zdGFudHMiLCJOT05FIiwiaW5pdF9kb25lIiwid3JpdGVfaW5fcHJvZ3Jlc3MiLCJwZW5kaW5nX2Nsb3NlIiwiZ3ppcF9pZF9ieXRlc19yZWFkIiwiZGVmbGF0ZUVuZCIsInN0cm0iLCJpbmZsYXRlRW5kIiwiaW5wdXQiLCJpbl9vZmYiLCJpbl9sZW4iLCJvdXRfb2ZmIiwib3V0X2xlbiIsImF2YWlsX2luIiwibmV4dF9pbiIsImF2YWlsX291dCIsIm5leHRfb3V0IiwiX3Byb2Nlc3MiLCJfY2hlY2tFcnJvciIsIl9hZnRlclN5bmMiLCJfYWZ0ZXIiLCJuZXh0X2V4cGVjdGVkX2hlYWRlcl9ieXRlIiwiaW5mbGF0ZVNldERpY3Rpb25hcnkiLCJfZXJyb3IiLCJfaW5pdCIsIl9zZXREaWN0aW9uYXJ5IiwiX3Jlc2V0IiwiZGVmbGF0ZUluaXQyIiwiWl9ERUZMQVRFRCIsImluZmxhdGVJbml0MiIsImRlZmxhdGVTZXREaWN0aW9uYXJ5IiwiZGVmbGF0ZVJlc2V0IiwiaW5mbGF0ZVJlc2V0IiwicHJvcElzRW51bWVyYWJsZSIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwidG9PYmplY3QiLCJ0ZXN0MSIsInRlc3QyIiwidGVzdDMiLCJsZXR0ZXIiLCJzaG91bGRVc2VOYXRpdmUiLCJzeW1ib2xzIiwidG8iLCJ0b3RhbF9pbiIsInRvdGFsX291dCIsImRhdGFfdHlwZSIsImNvbmZpZ3VyYXRpb25fdGFibGUiLCJ1dGlscyIsInRyZWVzIiwiYWRsZXIzMiIsImNyYzMyIiwiWl9VTktOT1dOIiwiTUFYX01FTV9MRVZFTCIsIk1BWF9XQklUUyIsIkRFRl9NRU1fTEVWRUwiLCJMX0NPREVTIiwiTElURVJBTFMiLCJEX0NPREVTIiwiQkxfQ09ERVMiLCJIRUFQX1NJWkUiLCJNQVhfQklUUyIsIk1JTl9NQVRDSCIsIk1BWF9NQVRDSCIsIk1JTl9MT09LQUhFQUQiLCJQUkVTRVRfRElDVCIsIklOSVRfU1RBVEUiLCJFWFRSQV9TVEFURSIsIk5BTUVfU1RBVEUiLCJDT01NRU5UX1NUQVRFIiwiSENSQ19TVEFURSIsIkJVU1lfU1RBVEUiLCJGSU5JU0hfU1RBVEUiLCJCU19ORUVEX01PUkUiLCJCU19CTE9DS19ET05FIiwiQlNfRklOSVNIX1NUQVJURUQiLCJCU19GSU5JU0hfRE9ORSIsIk9TX0NPREUiLCJlcnJvckNvZGUiLCJyYW5rIiwiemVybyIsImZsdXNoX3BlbmRpbmciLCJwZW5kaW5nIiwicGVuZGluZ19idWYiLCJwZW5kaW5nX291dCIsImZsdXNoX2Jsb2NrX29ubHkiLCJfdHJfZmx1c2hfYmxvY2siLCJibG9ja19zdGFydCIsInN0cnN0YXJ0IiwicHV0X2J5dGUiLCJwdXRTaG9ydE1TQiIsImxvbmdlc3RfbWF0Y2giLCJjdXJfbWF0Y2giLCJjaGFpbl9sZW5ndGgiLCJtYXhfY2hhaW5fbGVuZ3RoIiwic2NhbiIsImJlc3RfbGVuIiwicHJldl9sZW5ndGgiLCJuaWNlX21hdGNoIiwid19zaXplIiwiX3dpbiIsIndtYXNrIiwid19tYXNrIiwic3RyZW5kIiwic2Nhbl9lbmQxIiwic2Nhbl9lbmQiLCJnb29kX21hdGNoIiwibG9va2FoZWFkIiwibWF0Y2hfc3RhcnQiLCJmaWxsX3dpbmRvdyIsIm1vcmUiLCJfd19zaXplIiwid2luZG93X3NpemUiLCJoYXNoX3NpemUiLCJpbnNlcnQiLCJpbnNfaCIsImhhc2hfc2hpZnQiLCJoYXNoX21hc2siLCJkZWZsYXRlX2Zhc3QiLCJoYXNoX2hlYWQiLCJiZmx1c2giLCJtYXRjaF9sZW5ndGgiLCJfdHJfdGFsbHkiLCJtYXhfbGF6eV9tYXRjaCIsImxhc3RfbGl0IiwiZGVmbGF0ZV9zbG93IiwibWF4X2luc2VydCIsInByZXZfbWF0Y2giLCJtYXRjaF9hdmFpbGFibGUiLCJDb25maWciLCJnb29kX2xlbmd0aCIsIm1heF9sYXp5IiwibmljZV9sZW5ndGgiLCJtYXhfY2hhaW4iLCJEZWZsYXRlU3RhdGUiLCJzdGF0dXMiLCJwZW5kaW5nX2J1Zl9zaXplIiwiZ3poZWFkIiwiZ3ppbmRleCIsImxhc3RfZmx1c2giLCJ3X2JpdHMiLCJoYXNoX2JpdHMiLCJkeW5fbHRyZWUiLCJkeW5fZHRyZWUiLCJibF90cmVlIiwibF9kZXNjIiwiZF9kZXNjIiwiYmxfZGVzYyIsImJsX2NvdW50IiwiaGVhcCIsImhlYXBfbGVuIiwiaGVhcF9tYXgiLCJsX2J1ZiIsImxpdF9idWZzaXplIiwiZF9idWYiLCJvcHRfbGVuIiwic3RhdGljX2xlbiIsIm1hdGNoZXMiLCJiaV9idWYiLCJiaV92YWxpZCIsImRlZmxhdGVSZXNldEtlZXAiLCJfdHJfaW5pdCIsIm1heF9ibG9ja19zaXplIiwibWF4X3N0YXJ0IiwiZGVmbGF0ZUluaXQiLCJkZWZsYXRlU2V0SGVhZGVyIiwib2xkX2ZsdXNoIiwiYmVnIiwiaGNyYyIsImV4dHJhIiwiY29tbWVudCIsIm9zIiwiaGVhZGVyIiwiYnN0YXRlIiwiZGVmbGF0ZV9odWZmIiwiZGVmbGF0ZV9ybGUiLCJfdHJfYWxpZ24iLCJfdHJfc3RvcmVkX2Jsb2NrIiwiYXZhaWwiLCJ0bXBEaWN0IiwiZGljdExlbmd0aCIsImRlZmxhdGVJbmZvIiwiWl9CSU5BUlkiLCJaX1RFWFQiLCJTVE9SRURfQkxPQ0siLCJTVEFUSUNfVFJFRVMiLCJEWU5fVFJFRVMiLCJMRU5HVEhfQ09ERVMiLCJCdWZfc2l6ZSIsIk1BWF9CTF9CSVRTIiwiRU5EX0JMT0NLIiwiUkVQXzNfNiIsIlJFUFpfM18xMCIsIlJFUFpfMTFfMTM4IiwiZXh0cmFfbGJpdHMiLCJleHRyYV9kYml0cyIsImV4dHJhX2JsYml0cyIsImJsX29yZGVyIiwic3RhdGljX2x0cmVlIiwic3RhdGljX2R0cmVlIiwiX2Rpc3RfY29kZSIsIl9sZW5ndGhfY29kZSIsImJhc2VfbGVuZ3RoIiwic3RhdGljX2xfZGVzYyIsInN0YXRpY19kX2Rlc2MiLCJzdGF0aWNfYmxfZGVzYyIsImJhc2VfZGlzdCIsIlN0YXRpY1RyZWVEZXNjIiwic3RhdGljX3RyZWUiLCJleHRyYV9iaXRzIiwiZXh0cmFfYmFzZSIsImVsZW1zIiwibWF4X2xlbmd0aCIsImhhc19zdHJlZSIsIlRyZWVEZXNjIiwiZHluX3RyZWUiLCJzdGF0X2Rlc2MiLCJtYXhfY29kZSIsImRfY29kZSIsImRpc3QiLCJwdXRfc2hvcnQiLCJzZW5kX2JpdHMiLCJzZW5kX2NvZGUiLCJ0cmVlIiwiYmlfcmV2ZXJzZSIsImdlbl9jb2RlcyIsImJpdHMiLCJuZXh0X2NvZGUiLCJpbml0X2Jsb2NrIiwiYmlfd2luZHVwIiwic21hbGxlciIsIl9uMiIsIl9tMiIsInBxZG93bmhlYXAiLCJjb21wcmVzc19ibG9jayIsImx0cmVlIiwiZHRyZWUiLCJsYyIsImx4IiwiYnVpbGRfdHJlZSIsIm5vZGUiLCJzdHJlZSIsImgiLCJ4Yml0cyIsIm92ZXJmbG93IiwiZ2VuX2JpdGxlbiIsInNjYW5fdHJlZSIsImN1cmxlbiIsInByZXZsZW4iLCJuZXh0bGVuIiwibWF4X2NvdW50IiwibWluX2NvdW50Iiwic2VuZF90cmVlIiwic3RhdGljX2luaXRfZG9uZSIsInN0b3JlZF9sZW4iLCJjb3B5X2Jsb2NrIiwidHJfc3RhdGljX2luaXQiLCJvcHRfbGVuYiIsInN0YXRpY19sZW5iIiwibWF4X2JsaW5kZXgiLCJibGFja19tYXNrIiwiZGV0ZWN0X2RhdGFfdHlwZSIsImJ1aWxkX2JsX3RyZWUiLCJsY29kZXMiLCJkY29kZXMiLCJibGNvZGVzIiwic2VuZF9hbGxfdHJlZXMiLCJiaV9mbHVzaCIsIjIiLCIxIiwiMCIsImluZmxhdGVfZmFzdCIsImluZmxhdGVfdGFibGUiLCJDT0RFUyIsIkxFTlMiLCJESVNUUyIsIlpfVFJFRVMiLCJIRUFEIiwiRkxBR1MiLCJUSU1FIiwiT1MiLCJFWExFTiIsIkVYVFJBIiwiTkFNRSIsIkNPTU1FTlQiLCJIQ1JDIiwiRElDVElEIiwiRElDVCIsIlRZUEUiLCJUWVBFRE8iLCJTVE9SRUQiLCJDT1BZXyIsIkNPUFkiLCJUQUJMRSIsIkxFTkxFTlMiLCJDT0RFTEVOUyIsIkxFTl8iLCJMRU4iLCJMRU5FWFQiLCJESVNUIiwiRElTVEVYVCIsIk1BVENIIiwiTElUIiwiQ0hFQ0siLCJMRU5HVEgiLCJET05FIiwiQkFEIiwiTUVNIiwiU1lOQyIsIkVOT1VHSF9MRU5TIiwiRU5PVUdIX0RJU1RTIiwiREVGX1dCSVRTIiwienN3YXAzMiIsInEiLCJJbmZsYXRlU3RhdGUiLCJoYXZlZGljdCIsImZsYWdzIiwiZG1heCIsImNoZWNrIiwid2JpdHMiLCJ3c2l6ZSIsIndoYXZlIiwid25leHQiLCJob2xkIiwibGVuY29kZSIsImRpc3Rjb2RlIiwibGVuYml0cyIsImRpc3RiaXRzIiwibmNvZGUiLCJubGVuIiwibmRpc3QiLCJ3b3JrIiwibGVuZHluIiwiZGlzdGR5biIsInNhbmUiLCJiYWNrIiwid2FzIiwiaW5mbGF0ZVJlc2V0S2VlcCIsImluZmxhdGVSZXNldDIiLCJsZW5maXgiLCJkaXN0Zml4IiwidmlyZ2luIiwiZml4ZWR0YWJsZXMiLCJzeW0iLCJ1cGRhdGV3aW5kb3ciLCJpbmZsYXRlSW5pdCIsInB1dCIsImxlZnQiLCJfaW4iLCJfb3V0IiwiZnJvbV9zb3VyY2UiLCJoZXJlX2JpdHMiLCJoZXJlX29wIiwiaGVyZV92YWwiLCJsYXN0X2JpdHMiLCJsYXN0X29wIiwibGFzdF92YWwiLCJoZXJlIiwiaGJ1ZiIsIm9yZGVyIiwiaW5mX2xlYXZlIiwieGZsYWdzIiwiZXh0cmFfbGVuIiwiaW5mbGF0ZUdldEhlYWRlciIsImluZmxhdGVJbmZvIiwic193aW5kb3ciLCJsY29kZSIsImRjb2RlIiwibG1hc2siLCJkbWFzayIsIm9wIiwidG9wIiwiZG9sZW4iLCJkb2Rpc3QiLCJsYmFzZSIsImxleHQiLCJkYmFzZSIsImRleHQiLCJsZW5zX2luZGV4IiwidGFibGVfaW5kZXgiLCJpbmNyIiwibG93IiwibWFzayIsInJvb3QiLCJjdXJyIiwiZHJvcCIsInVzZWQiLCJodWZmIiwiYmFzZV9pbmRleCIsIk1BWEJJVFMiLCJvZmZzIiwiZXh0cmFfaW5kZXgiLCJaX05PX0NPTVBSRVNTSU9OIiwiWl9CRVNUX1NQRUVEIiwiWl9CRVNUX0NPTVBSRVNTSU9OIiwiRXZlbnQiLCJkYXRlMSIsImRhdGUyIiwiZGVzY3JpcHRpb24iLCJnZXRFbGVtZW50QnlJZCIsIm5ld1RpdGxlIiwibmV3U3RhcnQiLCJuZXdTdG9wIiwibmV3RGVzY3JpcHRpb24iLCJuZXdFdmVudCJdLCJtYXBwaW5ncyI6ImFBQ0UsSUFBSUEsRUFBbUIsR0FHdkIsU0FBU0MsRUFBb0JDLEdBRzVCLEdBQUdGLEVBQWlCRSxHQUNuQixPQUFPRixFQUFpQkUsR0FBVUMsUUFHbkMsSUFBSUMsRUFBU0osRUFBaUJFLEdBQVksQ0FDekNHLEVBQUdILEVBQ0hJLEdBQUcsRUFDSEgsUUFBUyxJQVVWLE9BTkFJLEVBQVFMLEdBQVVNLEtBQUtKLEVBQU9ELFFBQVNDLEVBQVFBLEVBQU9ELFFBQVNGLEdBRy9ERyxFQUFPRSxHQUFJLEVBR0pGLEVBQU9ELFFBS2ZGLEVBQW9CUSxFQUFJRixFQUd4Qk4sRUFBb0JTLEVBQUlWLEVBR3hCQyxFQUFvQlUsRUFBSSxTQUFTUixFQUFTUyxFQUFNQyxHQUMzQ1osRUFBb0JhLEVBQUVYLEVBQVNTLElBQ2xDRyxPQUFPQyxlQUFlYixFQUFTUyxFQUFNLENBQUVLLFlB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Z0JBQzFDLElBQUlBLEVBQU0sU0FBVSxhQUFjLE9BQVEsZ0JBQzFDLElBQUlBLEVBQU0sU0FBVSxhQUFjLE9BQVEsZ0JBQzFDLElBQUlBLEVBQU0sU0FBVSxhQUFjLE9BQVEsZ0JBR3JCLElBQUlBLEVBQU0sY0FBZSxhQUFjLE9BQVEsZ0JBQy9DLElBQUlBLEVBQU0sY0FBZSxhQUFjLE9BQVEsZ0IsTUNOMUR2YSxTQUFTMmEsZUFBZSxTQUNoQ3ZaLGlCQUFpQixRQVhMdDlCLElBQ2QsTUFBTTgyQyxFQUFXNWEsU0FBUzJhLGVBQWUsWUFBWXI0QyxNQUMvQ3U0QyxFQUFXN2EsU0FBUzJhLGVBQWUsWUFBWXI0QyxNQUMvQ3c0QyxFQUFVOWEsU0FBUzJhLGVBQWUsV0FBV3I0QyxNQUM3Q3k0QyxFQUFpQi9hLFNBQVMyYSxlQUFlLG1CQUFtQnI0QyxNQUNsRSxJQUFJMDRDLEVBQVcsSUFBSSxFQUFzQkosRUFBVUMsRUFBVUMsRUFBU0MsR0FFdEUsT0FEQWxnQyxRQUFReVgsSUFBSTBvQixHQUNMQSIsImZpbGUiOiJuZXcuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gNDkpO1xuIiwiLy8gc2hpbSBmb3IgdXNpbmcgcHJvY2VzcyBpbiBicm93c2VyXHJcbnZhciBwcm9jZXNzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcclxuXHJcbi8vIGNhY2hlZCBmcm9tIHdoYXRldmVyIGdsb2JhbCBpcyBwcmVzZW50IHNvIHRoYXQgdGVzdCBydW5uZXJzIHRoYXQgc3R1YiBpdFxyXG4vLyBkb24ndCBicmVhayB0aGluZ3MuICBCdXQgd2UgbmVlZCB0byB3cmFwIGl0IGluIGEgdHJ5IGNhdGNoIGluIGNhc2UgaXQgaXNcclxuLy8gd3JhcHBlZCBpbiBzdHJpY3QgbW9kZSBjb2RlIHdoaWNoIGRvZXNuJ3QgZGVmaW5lIGFueSBnbG9iYWxzLiAgSXQncyBpbnNpZGUgYVxyXG4vLyBmdW5jdGlvbiBiZWNhdXNlIHRyeS9jYXRjaGVzIGRlb3B0aW1pemUgaW4gY2VydGFpbiBlbmdpbmVzLlxyXG5cclxudmFyIGNhY2hlZFNldFRpbWVvdXQ7XHJcbnZhciBjYWNoZWRDbGVhclRpbWVvdXQ7XHJcblxyXG5mdW5jdGlvbiBkZWZhdWx0U2V0VGltb3V0KCkge1xyXG4gICAgdGhyb3cgbmV3IEVycm9yKCdzZXRUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XHJcbn1cclxuZnVuY3Rpb24gZGVmYXVsdENsZWFyVGltZW91dCAoKSB7XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NsZWFyVGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xyXG59XHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIGlmICh0eXBlb2Ygc2V0VGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcclxuICAgICAgICB9XHJcbiAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XHJcbiAgICB9XHJcbiAgICB0cnkge1xyXG4gICAgICAgIGlmICh0eXBlb2YgY2xlYXJUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xyXG4gICAgICAgIH1cclxuICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xyXG4gICAgfVxyXG59ICgpKVxyXG5mdW5jdGlvbiBydW5UaW1lb3V0KGZ1bikge1xyXG4gICAgaWYgKGNhY2hlZFNldFRpbWVvdXQgPT09IHNldFRpbWVvdXQpIHtcclxuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcclxuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xyXG4gICAgfVxyXG4gICAgLy8gaWYgc2V0VGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcclxuICAgIGlmICgoY2FjaGVkU2V0VGltZW91dCA9PT0gZGVmYXVsdFNldFRpbW91dCB8fCAhY2FjaGVkU2V0VGltZW91dCkgJiYgc2V0VGltZW91dCkge1xyXG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xyXG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XHJcbiAgICB9XHJcbiAgICB0cnkge1xyXG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcclxuICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dChmdW4sIDApO1xyXG4gICAgfSBjYXRjaChlKXtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcclxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbChudWxsLCBmdW4sIDApO1xyXG4gICAgICAgIH0gY2F0Y2goZSl7XHJcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yXHJcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwodGhpcywgZnVuLCAwKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxufVxyXG5mdW5jdGlvbiBydW5DbGVhclRpbWVvdXQobWFya2VyKSB7XHJcbiAgICBpZiAoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBjbGVhclRpbWVvdXQpIHtcclxuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcclxuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XHJcbiAgICB9XHJcbiAgICAvLyBpZiBjbGVhclRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXHJcbiAgICBpZiAoKGNhY2hlZENsZWFyVGltZW91dCA9PT0gZGVmYXVsdENsZWFyVGltZW91dCB8fCAhY2FjaGVkQ2xlYXJUaW1lb3V0KSAmJiBjbGVhclRpbWVvdXQpIHtcclxuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XHJcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xyXG4gICAgfVxyXG4gICAgdHJ5IHtcclxuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXHJcbiAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dChtYXJrZXIpO1xyXG4gICAgfSBjYXRjaCAoZSl7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0ICB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxyXG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwobnVsbCwgbWFya2VyKTtcclxuICAgICAgICB9IGNhdGNoIChlKXtcclxuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3IuXHJcbiAgICAgICAgICAgIC8vIFNvbWUgdmVyc2lvbnMgb2YgSS5FLiBoYXZlIGRpZmZlcmVudCBydWxlcyBmb3IgY2xlYXJUaW1lb3V0IHZzIHNldFRpbWVvdXRcclxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKHRoaXMsIG1hcmtlcik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcblxyXG59XHJcbnZhciBxdWV1ZSA9IFtdO1xyXG52YXIgZHJhaW5pbmcgPSBmYWxzZTtcclxudmFyIGN1cnJlbnRRdWV1ZTtcclxudmFyIHF1ZXVlSW5kZXggPSAtMTtcclxuXHJcbmZ1bmN0aW9uIGNsZWFuVXBOZXh0VGljaygpIHtcclxuICAgIGlmICghZHJhaW5pbmcgfHwgIWN1cnJlbnRRdWV1ZSkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGRyYWluaW5nID0gZmFsc2U7XHJcbiAgICBpZiAoY3VycmVudFF1ZXVlLmxlbmd0aCkge1xyXG4gICAgICAgIHF1ZXVlID0gY3VycmVudFF1ZXVlLmNvbmNhdChxdWV1ZSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcclxuICAgIH1cclxuICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcclxuICAgICAgICBkcmFpblF1ZXVlKCk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRyYWluUXVldWUoKSB7XHJcbiAgICBpZiAoZHJhaW5pbmcpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICB2YXIgdGltZW91dCA9IHJ1blRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtcclxuICAgIGRyYWluaW5nID0gdHJ1ZTtcclxuXHJcbiAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xyXG4gICAgd2hpbGUobGVuKSB7XHJcbiAgICAgICAgY3VycmVudFF1ZXVlID0gcXVldWU7XHJcbiAgICAgICAgcXVldWUgPSBbXTtcclxuICAgICAgICB3aGlsZSAoKytxdWV1ZUluZGV4IDwgbGVuKSB7XHJcbiAgICAgICAgICAgIGlmIChjdXJyZW50UXVldWUpIHtcclxuICAgICAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XHJcbiAgICAgICAgbGVuID0gcXVldWUubGVuZ3RoO1xyXG4gICAgfVxyXG4gICAgY3VycmVudFF1ZXVlID0gbnVsbDtcclxuICAgIGRyYWluaW5nID0gZmFsc2U7XHJcbiAgICBydW5DbGVhclRpbWVvdXQodGltZW91dCk7XHJcbn1cclxuXHJcbnByb2Nlc3MubmV4dFRpY2sgPSBmdW5jdGlvbiAoZnVuKSB7XHJcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XHJcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcclxuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpO1xyXG4gICAgaWYgKHF1ZXVlLmxlbmd0aCA9PT0gMSAmJiAhZHJhaW5pbmcpIHtcclxuICAgICAgICBydW5UaW1lb3V0KGRyYWluUXVldWUpO1xyXG4gICAgfVxyXG59O1xyXG5cclxuLy8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0c1xyXG5mdW5jdGlvbiBJdGVtKGZ1biwgYXJyYXkpIHtcclxuICAgIHRoaXMuZnVuID0gZnVuO1xyXG4gICAgdGhpcy5hcnJheSA9IGFycmF5O1xyXG59XHJcbkl0ZW0ucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHRoaXMuZnVuLmFwcGx5KG51bGwsIHRoaXMuYXJyYXkpO1xyXG59O1xyXG5wcm9jZXNzLnRpdGxlID0gJ2Jyb3dzZXInO1xyXG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xyXG5wcm9jZXNzLmVudiA9IHt9O1xyXG5wcm9jZXNzLmFyZ3YgPSBbXTtcclxucHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXHJcbnByb2Nlc3MudmVyc2lvbnMgPSB7fTtcclxuXHJcbmZ1bmN0aW9uIG5vb3AoKSB7fVxyXG5cclxucHJvY2Vzcy5vbiA9IG5vb3A7XHJcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xyXG5wcm9jZXNzLm9uY2UgPSBub29wO1xyXG5wcm9jZXNzLm9mZiA9IG5vb3A7XHJcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xyXG5wcm9jZXNzLnJlbW92ZUFsbExpc3RlbmVycyA9IG5vb3A7XHJcbnByb2Nlc3MuZW1pdCA9IG5vb3A7XHJcbnByb2Nlc3MucHJlcGVuZExpc3RlbmVyID0gbm9vcDtcclxucHJvY2Vzcy5wcmVwZW5kT25jZUxpc3RlbmVyID0gbm9vcDtcclxuXHJcbnByb2Nlc3MubGlzdGVuZXJzID0gZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIFtdIH1cclxuXHJcbnByb2Nlc3MuYmluZGluZyA9IGZ1bmN0aW9uIChuYW1lKSB7XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XHJcbn07XHJcblxyXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xyXG5wcm9jZXNzLmNoZGlyID0gZnVuY3Rpb24gKGRpcikge1xyXG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWQnKTtcclxufTtcclxucHJvY2Vzcy51bWFzayA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gMDsgfTtcclxuIiwidmFyIGc7XHJcblxyXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxyXG5nID0gKGZ1bmN0aW9uKCkge1xyXG5cdHJldHVybiB0aGlzO1xyXG59KSgpO1xyXG5cclxudHJ5IHtcclxuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcclxuXHRnID0gZyB8fCBuZXcgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xyXG59IGNhdGNoIChlKSB7XHJcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcclxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcclxufVxyXG5cclxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxyXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xyXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGc7XHJcbiIsImlmICh0eXBlb2YgT2JqZWN0LmNyZWF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gIC8vIGltcGxlbWVudGF0aW9uIGZyb20gc3RhbmRhcmQgbm9kZS5qcyAndXRpbCcgbW9kdWxlXHJcbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpbmhlcml0cyhjdG9yLCBzdXBlckN0b3IpIHtcclxuICAgIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yXHJcbiAgICBjdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDdG9yLnByb3RvdHlwZSwge1xyXG4gICAgICBjb25zdHJ1Y3Rvcjoge1xyXG4gICAgICAgIHZhbHVlOiBjdG9yLFxyXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxyXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9O1xyXG59IGVsc2Uge1xyXG4gIC8vIG9sZCBzY2hvb2wgc2hpbSBmb3Igb2xkIGJyb3dzZXJzXHJcbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpbmhlcml0cyhjdG9yLCBzdXBlckN0b3IpIHtcclxuICAgIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yXHJcbiAgICB2YXIgVGVtcEN0b3IgPSBmdW5jdGlvbiAoKSB7fVxyXG4gICAgVGVtcEN0b3IucHJvdG90eXBlID0gc3VwZXJDdG9yLnByb3RvdHlwZVxyXG4gICAgY3Rvci5wcm90b3R5cGUgPSBuZXcgVGVtcEN0b3IoKVxyXG4gICAgY3Rvci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBjdG9yXHJcbiAgfVxyXG59XHJcbiIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxyXG4vL1xyXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxyXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXHJcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xyXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXHJcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcclxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXHJcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxyXG4vL1xyXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxyXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cclxuLy9cclxuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xyXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXHJcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cclxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXHJcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxyXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXHJcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXHJcblxyXG4vLyBhIGR1cGxleCBzdHJlYW0gaXMganVzdCBhIHN0cmVhbSB0aGF0IGlzIGJvdGggcmVhZGFibGUgYW5kIHdyaXRhYmxlLlxyXG4vLyBTaW5jZSBKUyBkb2Vzbid0IGhhdmUgbXVsdGlwbGUgcHJvdG90eXBhbCBpbmhlcml0YW5jZSwgdGhpcyBjbGFzc1xyXG4vLyBwcm90b3R5cGFsbHkgaW5oZXJpdHMgZnJvbSBSZWFkYWJsZSwgYW5kIHRoZW4gcGFyYXNpdGljYWxseSBmcm9tXHJcbi8vIFdyaXRhYmxlLlxyXG5cclxuJ3VzZSBzdHJpY3QnO1xyXG5cclxuLyo8cmVwbGFjZW1lbnQ+Ki9cclxuXHJcbnZhciBwbmEgPSByZXF1aXJlKCdwcm9jZXNzLW5leHRpY2stYXJncycpO1xyXG4vKjwvcmVwbGFjZW1lbnQ+Ki9cclxuXHJcbi8qPHJlcGxhY2VtZW50PiovXHJcbnZhciBvYmplY3RLZXlzID0gT2JqZWN0LmtleXMgfHwgZnVuY3Rpb24gKG9iaikge1xyXG4gIHZhciBrZXlzID0gW107XHJcbiAgZm9yICh2YXIga2V5IGluIG9iaikge1xyXG4gICAga2V5cy5wdXNoKGtleSk7XHJcbiAgfXJldHVybiBrZXlzO1xyXG59O1xyXG4vKjwvcmVwbGFjZW1lbnQ+Ki9cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gRHVwbGV4O1xyXG5cclxuLyo8cmVwbGFjZW1lbnQ+Ki9cclxudmFyIHV0aWwgPSByZXF1aXJlKCdjb3JlLXV0aWwtaXMnKTtcclxudXRpbC5pbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XHJcbi8qPC9yZXBsYWNlbWVudD4qL1xyXG5cclxudmFyIFJlYWRhYmxlID0gcmVxdWlyZSgnLi9fc3RyZWFtX3JlYWRhYmxlJyk7XHJcbnZhciBXcml0YWJsZSA9IHJlcXVpcmUoJy4vX3N0cmVhbV93cml0YWJsZScpO1xyXG5cclxudXRpbC5pbmhlcml0cyhEdXBsZXgsIFJlYWRhYmxlKTtcclxuXHJcbntcclxuICAvLyBhdm9pZCBzY29wZSBjcmVlcCwgdGhlIGtleXMgYXJyYXkgY2FuIHRoZW4gYmUgY29sbGVjdGVkXHJcbiAgdmFyIGtleXMgPSBvYmplY3RLZXlzKFdyaXRhYmxlLnByb3RvdHlwZSk7XHJcbiAgZm9yICh2YXIgdiA9IDA7IHYgPCBrZXlzLmxlbmd0aDsgdisrKSB7XHJcbiAgICB2YXIgbWV0aG9kID0ga2V5c1t2XTtcclxuICAgIGlmICghRHVwbGV4LnByb3RvdHlwZVttZXRob2RdKSBEdXBsZXgucHJvdG90eXBlW21ldGhvZF0gPSBXcml0YWJsZS5wcm90b3R5cGVbbWV0aG9kXTtcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIER1cGxleChvcHRpb25zKSB7XHJcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIER1cGxleCkpIHJldHVybiBuZXcgRHVwbGV4KG9wdGlvbnMpO1xyXG5cclxuICBSZWFkYWJsZS5jYWxsKHRoaXMsIG9wdGlvbnMpO1xyXG4gIFdyaXRhYmxlLmNhbGwodGhpcywgb3B0aW9ucyk7XHJcblxyXG4gIGlmIChvcHRpb25zICYmIG9wdGlvbnMucmVhZGFibGUgPT09IGZhbHNlKSB0aGlzLnJlYWRhYmxlID0gZmFsc2U7XHJcblxyXG4gIGlmIChvcHRpb25zICYmIG9wdGlvbnMud3JpdGFibGUgPT09IGZhbHNlKSB0aGlzLndyaXRhYmxlID0gZmFsc2U7XHJcblxyXG4gIHRoaXMuYWxsb3dIYWxmT3BlbiA9IHRydWU7XHJcbiAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5hbGxvd0hhbGZPcGVuID09PSBmYWxzZSkgdGhpcy5hbGxvd0hhbGZPcGVuID0gZmFsc2U7XHJcblxyXG4gIHRoaXMub25jZSgnZW5kJywgb25lbmQpO1xyXG59XHJcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoRHVwbGV4LnByb3RvdHlwZSwgJ3dyaXRhYmxlSGlnaFdhdGVyTWFyaycsIHtcclxuICAvLyBtYWtpbmcgaXQgZXhwbGljaXQgdGhpcyBwcm9wZXJ0eSBpcyBub3QgZW51bWVyYWJsZVxyXG4gIC8vIGJlY2F1c2Ugb3RoZXJ3aXNlIHNvbWUgcHJvdG90eXBlIG1hbmlwdWxhdGlvbiBpblxyXG4gIC8vIHVzZXJsYW5kIHdpbGwgZmFpbFxyXG4gIGVudW1lcmFibGU6IGZhbHNlLFxyXG4gIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX3dyaXRhYmxlU3RhdGUuaGlnaFdhdGVyTWFyaztcclxuICB9XHJcbn0pO1xyXG5cclxuLy8gdGhlIG5vLWhhbGYtb3BlbiBlbmZvcmNlclxyXG5mdW5jdGlvbiBvbmVuZCgpIHtcclxuICAvLyBpZiB3ZSBhbGxvdyBoYWxmLW9wZW4gc3RhdGUsIG9yIGlmIHRoZSB3cml0YWJsZSBzaWRlIGVuZGVkLFxyXG4gIC8vIHRoZW4gd2UncmUgb2suXHJcbiAgaWYgKHRoaXMuYWxsb3dIYWxmT3BlbiB8fCB0aGlzLl93cml0YWJsZVN0YXRlLmVuZGVkKSByZXR1cm47XHJcblxyXG4gIC8vIG5vIG1vcmUgZGF0YSBjYW4gYmUgd3JpdHRlbi5cclxuICAvLyBCdXQgYWxsb3cgbW9yZSB3cml0ZXMgdG8gaGFwcGVuIGluIHRoaXMgdGljay5cclxuICBwbmEubmV4dFRpY2sob25FbmROVCwgdGhpcyk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIG9uRW5kTlQoc2VsZikge1xyXG4gIHNlbGYuZW5kKCk7XHJcbn1cclxuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShEdXBsZXgucHJvdG90eXBlLCAnZGVzdHJveWVkJywge1xyXG4gIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgaWYgKHRoaXMuX3JlYWRhYmxlU3RhdGUgPT09IHVuZGVmaW5lZCB8fCB0aGlzLl93cml0YWJsZVN0YXRlID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkICYmIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkO1xyXG4gIH0sXHJcbiAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgIC8vIHdlIGlnbm9yZSB0aGUgdmFsdWUgaWYgdGhlIHN0cmVhbVxyXG4gICAgLy8gaGFzIG5vdCBiZWVuIGluaXRpYWxpemVkIHlldFxyXG4gICAgaWYgKHRoaXMuX3JlYWRhYmxlU3RhdGUgPT09IHVuZGVmaW5lZCB8fCB0aGlzLl93cml0YWJsZVN0YXRlID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIGJhY2t3YXJkIGNvbXBhdGliaWxpdHksIHRoZSB1c2VyIGlzIGV4cGxpY2l0bHlcclxuICAgIC8vIG1hbmFnaW5nIGRlc3Ryb3llZFxyXG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQgPSB2YWx1ZTtcclxuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkID0gdmFsdWU7XHJcbiAgfVxyXG59KTtcclxuXHJcbkR1cGxleC5wcm90b3R5cGUuX2Rlc3Ryb3kgPSBmdW5jdGlvbiAoZXJyLCBjYikge1xyXG4gIHRoaXMucHVzaChudWxsKTtcclxuICB0aGlzLmVuZCgpO1xyXG5cclxuICBwbmEubmV4dFRpY2soY2IsIGVycik7XHJcbn07IiwiLyohXHJcbiAqIFRoZSBidWZmZXIgbW9kdWxlIGZyb20gbm9kZS5qcywgZm9yIHRoZSBicm93c2VyLlxyXG4gKlxyXG4gKiBAYXV0aG9yICAgRmVyb3NzIEFib3VraGFkaWplaCA8ZmVyb3NzQGZlcm9zcy5vcmc+IDxodHRwOi8vZmVyb3NzLm9yZz5cclxuICogQGxpY2Vuc2UgIE1JVFxyXG4gKi9cclxuLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gKi9cclxuXHJcbid1c2Ugc3RyaWN0J1xyXG5cclxudmFyIGJhc2U2NCA9IHJlcXVpcmUoJ2Jhc2U2NC1qcycpXHJcbnZhciBpZWVlNzU0ID0gcmVxdWlyZSgnaWVlZTc1NCcpXHJcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnaXNhcnJheScpXHJcblxyXG5leHBvcnRzLkJ1ZmZlciA9IEJ1ZmZlclxyXG5leHBvcnRzLlNsb3dCdWZmZXIgPSBTbG93QnVmZmVyXHJcbmV4cG9ydHMuSU5TUEVDVF9NQVhfQllURVMgPSA1MFxyXG5cclxuLyoqXHJcbiAqIElmIGBCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVGA6XHJcbiAqICAgPT09IHRydWUgICAgVXNlIFVpbnQ4QXJyYXkgaW1wbGVtZW50YXRpb24gKGZhc3Rlc3QpXHJcbiAqICAgPT09IGZhbHNlICAgVXNlIE9iamVjdCBpbXBsZW1lbnRhdGlvbiAobW9zdCBjb21wYXRpYmxlLCBldmVuIElFNilcclxuICpcclxuICogQnJvd3NlcnMgdGhhdCBzdXBwb3J0IHR5cGVkIGFycmF5cyBhcmUgSUUgMTArLCBGaXJlZm94IDQrLCBDaHJvbWUgNyssIFNhZmFyaSA1LjErLFxyXG4gKiBPcGVyYSAxMS42KywgaU9TIDQuMisuXHJcbiAqXHJcbiAqIER1ZSB0byB2YXJpb3VzIGJyb3dzZXIgYnVncywgc29tZXRpbWVzIHRoZSBPYmplY3QgaW1wbGVtZW50YXRpb24gd2lsbCBiZSB1c2VkIGV2ZW5cclxuICogd2hlbiB0aGUgYnJvd3NlciBzdXBwb3J0cyB0eXBlZCBhcnJheXMuXHJcbiAqXHJcbiAqIE5vdGU6XHJcbiAqXHJcbiAqICAgLSBGaXJlZm94IDQtMjkgbGFja3Mgc3VwcG9ydCBmb3IgYWRkaW5nIG5ldyBwcm9wZXJ0aWVzIHRvIGBVaW50OEFycmF5YCBpbnN0YW5jZXMsXHJcbiAqICAgICBTZWU6IGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTY5NTQzOC5cclxuICpcclxuICogICAtIENocm9tZSA5LTEwIGlzIG1pc3NpbmcgdGhlIGBUeXBlZEFycmF5LnByb3RvdHlwZS5zdWJhcnJheWAgZnVuY3Rpb24uXHJcbiAqXHJcbiAqICAgLSBJRTEwIGhhcyBhIGJyb2tlbiBgVHlwZWRBcnJheS5wcm90b3R5cGUuc3ViYXJyYXlgIGZ1bmN0aW9uIHdoaWNoIHJldHVybnMgYXJyYXlzIG9mXHJcbiAqICAgICBpbmNvcnJlY3QgbGVuZ3RoIGluIHNvbWUgc2l0dWF0aW9ucy5cclxuXHJcbiAqIFdlIGRldGVjdCB0aGVzZSBidWdneSBicm93c2VycyBhbmQgc2V0IGBCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVGAgdG8gYGZhbHNlYCBzbyB0aGV5XHJcbiAqIGdldCB0aGUgT2JqZWN0IGltcGxlbWVudGF0aW9uLCB3aGljaCBpcyBzbG93ZXIgYnV0IGJlaGF2ZXMgY29ycmVjdGx5LlxyXG4gKi9cclxuQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgPSBnbG9iYWwuVFlQRURfQVJSQVlfU1VQUE9SVCAhPT0gdW5kZWZpbmVkXHJcbiAgPyBnbG9iYWwuVFlQRURfQVJSQVlfU1VQUE9SVFxyXG4gIDogdHlwZWRBcnJheVN1cHBvcnQoKVxyXG5cclxuLypcclxuICogRXhwb3J0IGtNYXhMZW5ndGggYWZ0ZXIgdHlwZWQgYXJyYXkgc3VwcG9ydCBpcyBkZXRlcm1pbmVkLlxyXG4gKi9cclxuZXhwb3J0cy5rTWF4TGVuZ3RoID0ga01heExlbmd0aCgpXHJcblxyXG5mdW5jdGlvbiB0eXBlZEFycmF5U3VwcG9ydCAoKSB7XHJcbiAgdHJ5IHtcclxuICAgIHZhciBhcnIgPSBuZXcgVWludDhBcnJheSgxKVxyXG4gICAgYXJyLl9fcHJvdG9fXyA9IHtfX3Byb3RvX186IFVpbnQ4QXJyYXkucHJvdG90eXBlLCBmb286IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDQyIH19XHJcbiAgICByZXR1cm4gYXJyLmZvbygpID09PSA0MiAmJiAvLyB0eXBlZCBhcnJheSBpbnN0YW5jZXMgY2FuIGJlIGF1Z21lbnRlZFxyXG4gICAgICAgIHR5cGVvZiBhcnIuc3ViYXJyYXkgPT09ICdmdW5jdGlvbicgJiYgLy8gY2hyb21lIDktMTAgbGFjayBgc3ViYXJyYXlgXHJcbiAgICAgICAgYXJyLnN1YmFycmF5KDEsIDEpLmJ5dGVMZW5ndGggPT09IDAgLy8gaWUxMCBoYXMgYnJva2VuIGBzdWJhcnJheWBcclxuICB9IGNhdGNoIChlKSB7XHJcbiAgICByZXR1cm4gZmFsc2VcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGtNYXhMZW5ndGggKCkge1xyXG4gIHJldHVybiBCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVFxyXG4gICAgPyAweDdmZmZmZmZmXHJcbiAgICA6IDB4M2ZmZmZmZmZcclxufVxyXG5cclxuZnVuY3Rpb24gY3JlYXRlQnVmZmVyICh0aGF0LCBsZW5ndGgpIHtcclxuICBpZiAoa01heExlbmd0aCgpIDwgbGVuZ3RoKSB7XHJcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW52YWxpZCB0eXBlZCBhcnJheSBsZW5ndGgnKVxyXG4gIH1cclxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcclxuICAgIC8vIFJldHVybiBhbiBhdWdtZW50ZWQgYFVpbnQ4QXJyYXlgIGluc3RhbmNlLCBmb3IgYmVzdCBwZXJmb3JtYW5jZVxyXG4gICAgdGhhdCA9IG5ldyBVaW50OEFycmF5KGxlbmd0aClcclxuICAgIHRoYXQuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxyXG4gIH0gZWxzZSB7XHJcbiAgICAvLyBGYWxsYmFjazogUmV0dXJuIGFuIG9iamVjdCBpbnN0YW5jZSBvZiB0aGUgQnVmZmVyIGNsYXNzXHJcbiAgICBpZiAodGhhdCA9PT0gbnVsbCkge1xyXG4gICAgICB0aGF0ID0gbmV3IEJ1ZmZlcihsZW5ndGgpXHJcbiAgICB9XHJcbiAgICB0aGF0Lmxlbmd0aCA9IGxlbmd0aFxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHRoYXRcclxufVxyXG5cclxuLyoqXHJcbiAqIFRoZSBCdWZmZXIgY29uc3RydWN0b3IgcmV0dXJucyBpbnN0YW5jZXMgb2YgYFVpbnQ4QXJyYXlgIHRoYXQgaGF2ZSB0aGVpclxyXG4gKiBwcm90b3R5cGUgY2hhbmdlZCB0byBgQnVmZmVyLnByb3RvdHlwZWAuIEZ1cnRoZXJtb3JlLCBgQnVmZmVyYCBpcyBhIHN1YmNsYXNzIG9mXHJcbiAqIGBVaW50OEFycmF5YCwgc28gdGhlIHJldHVybmVkIGluc3RhbmNlcyB3aWxsIGhhdmUgYWxsIHRoZSBub2RlIGBCdWZmZXJgIG1ldGhvZHNcclxuICogYW5kIHRoZSBgVWludDhBcnJheWAgbWV0aG9kcy4gU3F1YXJlIGJyYWNrZXQgbm90YXRpb24gd29ya3MgYXMgZXhwZWN0ZWQgLS0gaXRcclxuICogcmV0dXJucyBhIHNpbmdsZSBvY3RldC5cclxuICpcclxuICogVGhlIGBVaW50OEFycmF5YCBwcm90b3R5cGUgcmVtYWlucyB1bm1vZGlmaWVkLlxyXG4gKi9cclxuXHJcbmZ1bmN0aW9uIEJ1ZmZlciAoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcclxuICBpZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUICYmICEodGhpcyBpbnN0YW5jZW9mIEJ1ZmZlcikpIHtcclxuICAgIHJldHVybiBuZXcgQnVmZmVyKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxyXG4gIH1cclxuXHJcbiAgLy8gQ29tbW9uIGNhc2UuXHJcbiAgaWYgKHR5cGVvZiBhcmcgPT09ICdudW1iZXInKSB7XHJcbiAgICBpZiAodHlwZW9mIGVuY29kaW5nT3JPZmZzZXQgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihcclxuICAgICAgICAnSWYgZW5jb2RpbmcgaXMgc3BlY2lmaWVkIHRoZW4gdGhlIGZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmcnXHJcbiAgICAgIClcclxuICAgIH1cclxuICAgIHJldHVybiBhbGxvY1Vuc2FmZSh0aGlzLCBhcmcpXHJcbiAgfVxyXG4gIHJldHVybiBmcm9tKHRoaXMsIGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxyXG59XHJcblxyXG5CdWZmZXIucG9vbFNpemUgPSA4MTkyIC8vIG5vdCB1c2VkIGJ5IHRoaXMgaW1wbGVtZW50YXRpb25cclxuXHJcbi8vIFRPRE86IExlZ2FjeSwgbm90IG5lZWRlZCBhbnltb3JlLiBSZW1vdmUgaW4gbmV4dCBtYWpvciB2ZXJzaW9uLlxyXG5CdWZmZXIuX2F1Z21lbnQgPSBmdW5jdGlvbiAoYXJyKSB7XHJcbiAgYXJyLl9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcclxuICByZXR1cm4gYXJyXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGZyb20gKHRoYXQsIHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcclxuICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xyXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJ2YWx1ZVwiIGFyZ3VtZW50IG11c3Qgbm90IGJlIGEgbnVtYmVyJylcclxuICB9XHJcblxyXG4gIGlmICh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmIHZhbHVlIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHtcclxuICAgIHJldHVybiBmcm9tQXJyYXlCdWZmZXIodGhhdCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcclxuICB9XHJcblxyXG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XHJcbiAgICByZXR1cm4gZnJvbVN0cmluZyh0aGF0LCB2YWx1ZSwgZW5jb2RpbmdPck9mZnNldClcclxuICB9XHJcblxyXG4gIHJldHVybiBmcm9tT2JqZWN0KHRoYXQsIHZhbHVlKVxyXG59XHJcblxyXG4vKipcclxuICogRnVuY3Rpb25hbGx5IGVxdWl2YWxlbnQgdG8gQnVmZmVyKGFyZywgZW5jb2RpbmcpIGJ1dCB0aHJvd3MgYSBUeXBlRXJyb3JcclxuICogaWYgdmFsdWUgaXMgYSBudW1iZXIuXHJcbiAqIEJ1ZmZlci5mcm9tKHN0clssIGVuY29kaW5nXSlcclxuICogQnVmZmVyLmZyb20oYXJyYXkpXHJcbiAqIEJ1ZmZlci5mcm9tKGJ1ZmZlcilcclxuICogQnVmZmVyLmZyb20oYXJyYXlCdWZmZXJbLCBieXRlT2Zmc2V0WywgbGVuZ3RoXV0pXHJcbiAqKi9cclxuQnVmZmVyLmZyb20gPSBmdW5jdGlvbiAodmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xyXG4gIHJldHVybiBmcm9tKG51bGwsIHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXHJcbn1cclxuXHJcbmlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xyXG4gIEJ1ZmZlci5wcm90b3R5cGUuX19wcm90b19fID0gVWludDhBcnJheS5wcm90b3R5cGVcclxuICBCdWZmZXIuX19wcm90b19fID0gVWludDhBcnJheVxyXG4gIGlmICh0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wuc3BlY2llcyAmJlxyXG4gICAgICBCdWZmZXJbU3ltYm9sLnNwZWNpZXNdID09PSBCdWZmZXIpIHtcclxuICAgIC8vIEZpeCBzdWJhcnJheSgpIGluIEVTMjAxNi4gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlci9wdWxsLzk3XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQnVmZmVyLCBTeW1ib2wuc3BlY2llcywge1xyXG4gICAgICB2YWx1ZTogbnVsbCxcclxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KVxyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gYXNzZXJ0U2l6ZSAoc2l6ZSkge1xyXG4gIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicpIHtcclxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wic2l6ZVwiIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXInKVxyXG4gIH0gZWxzZSBpZiAoc2l6ZSA8IDApIHtcclxuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcInNpemVcIiBhcmd1bWVudCBtdXN0IG5vdCBiZSBuZWdhdGl2ZScpXHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBhbGxvYyAodGhhdCwgc2l6ZSwgZmlsbCwgZW5jb2RpbmcpIHtcclxuICBhc3NlcnRTaXplKHNpemUpXHJcbiAgaWYgKHNpemUgPD0gMCkge1xyXG4gICAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplKVxyXG4gIH1cclxuICBpZiAoZmlsbCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAvLyBPbmx5IHBheSBhdHRlbnRpb24gdG8gZW5jb2RpbmcgaWYgaXQncyBhIHN0cmluZy4gVGhpc1xyXG4gICAgLy8gcHJldmVudHMgYWNjaWRlbnRhbGx5IHNlbmRpbmcgaW4gYSBudW1iZXIgdGhhdCB3b3VsZFxyXG4gICAgLy8gYmUgaW50ZXJwcmV0dGVkIGFzIGEgc3RhcnQgb2Zmc2V0LlxyXG4gICAgcmV0dXJuIHR5cGVvZiBlbmNvZGluZyA9PT0gJ3N0cmluZydcclxuICAgICAgPyBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSkuZmlsbChmaWxsLCBlbmNvZGluZylcclxuICAgICAgOiBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSkuZmlsbChmaWxsKVxyXG4gIH1cclxuICByZXR1cm4gY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUpXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDcmVhdGVzIGEgbmV3IGZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuXHJcbiAqIGFsbG9jKHNpemVbLCBmaWxsWywgZW5jb2RpbmddXSlcclxuICoqL1xyXG5CdWZmZXIuYWxsb2MgPSBmdW5jdGlvbiAoc2l6ZSwgZmlsbCwgZW5jb2RpbmcpIHtcclxuICByZXR1cm4gYWxsb2MobnVsbCwgc2l6ZSwgZmlsbCwgZW5jb2RpbmcpXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGFsbG9jVW5zYWZlICh0aGF0LCBzaXplKSB7XHJcbiAgYXNzZXJ0U2l6ZShzaXplKVxyXG4gIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSA8IDAgPyAwIDogY2hlY2tlZChzaXplKSB8IDApXHJcbiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzaXplOyArK2kpIHtcclxuICAgICAgdGhhdFtpXSA9IDBcclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIHRoYXRcclxufVxyXG5cclxuLyoqXHJcbiAqIEVxdWl2YWxlbnQgdG8gQnVmZmVyKG51bSksIGJ5IGRlZmF1bHQgY3JlYXRlcyBhIG5vbi16ZXJvLWZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuXHJcbiAqICovXHJcbkJ1ZmZlci5hbGxvY1Vuc2FmZSA9IGZ1bmN0aW9uIChzaXplKSB7XHJcbiAgcmV0dXJuIGFsbG9jVW5zYWZlKG51bGwsIHNpemUpXHJcbn1cclxuLyoqXHJcbiAqIEVxdWl2YWxlbnQgdG8gU2xvd0J1ZmZlcihudW0pLCBieSBkZWZhdWx0IGNyZWF0ZXMgYSBub24temVyby1maWxsZWQgQnVmZmVyIGluc3RhbmNlLlxyXG4gKi9cclxuQnVmZmVyLmFsbG9jVW5zYWZlU2xvdyA9IGZ1bmN0aW9uIChzaXplKSB7XHJcbiAgcmV0dXJuIGFsbG9jVW5zYWZlKG51bGwsIHNpemUpXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGZyb21TdHJpbmcgKHRoYXQsIHN0cmluZywgZW5jb2RpbmcpIHtcclxuICBpZiAodHlwZW9mIGVuY29kaW5nICE9PSAnc3RyaW5nJyB8fCBlbmNvZGluZyA9PT0gJycpIHtcclxuICAgIGVuY29kaW5nID0gJ3V0ZjgnXHJcbiAgfVxyXG5cclxuICBpZiAoIUJ1ZmZlci5pc0VuY29kaW5nKGVuY29kaW5nKSkge1xyXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJlbmNvZGluZ1wiIG11c3QgYmUgYSB2YWxpZCBzdHJpbmcgZW5jb2RpbmcnKVxyXG4gIH1cclxuXHJcbiAgdmFyIGxlbmd0aCA9IGJ5dGVMZW5ndGgoc3RyaW5nLCBlbmNvZGluZykgfCAwXHJcbiAgdGhhdCA9IGNyZWF0ZUJ1ZmZlcih0aGF0LCBsZW5ndGgpXHJcblxyXG4gIHZhciBhY3R1YWwgPSB0aGF0LndyaXRlKHN0cmluZywgZW5jb2RpbmcpXHJcblxyXG4gIGlmIChhY3R1YWwgIT09IGxlbmd0aCkge1xyXG4gICAgLy8gV3JpdGluZyBhIGhleCBzdHJpbmcsIGZvciBleGFtcGxlLCB0aGF0IGNvbnRhaW5zIGludmFsaWQgY2hhcmFjdGVycyB3aWxsXHJcbiAgICAvLyBjYXVzZSBldmVyeXRoaW5nIGFmdGVyIHRoZSBmaXJzdCBpbnZhbGlkIGNoYXJhY3RlciB0byBiZSBpZ25vcmVkLiAoZS5nLlxyXG4gICAgLy8gJ2FieHhjZCcgd2lsbCBiZSB0cmVhdGVkIGFzICdhYicpXHJcbiAgICB0aGF0ID0gdGhhdC5zbGljZSgwLCBhY3R1YWwpXHJcbiAgfVxyXG5cclxuICByZXR1cm4gdGhhdFxyXG59XHJcblxyXG5mdW5jdGlvbiBmcm9tQXJyYXlMaWtlICh0aGF0LCBhcnJheSkge1xyXG4gIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGggPCAwID8gMCA6IGNoZWNrZWQoYXJyYXkubGVuZ3RoKSB8IDBcclxuICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIGxlbmd0aClcclxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSArPSAxKSB7XHJcbiAgICB0aGF0W2ldID0gYXJyYXlbaV0gJiAyNTVcclxuICB9XHJcbiAgcmV0dXJuIHRoYXRcclxufVxyXG5cclxuZnVuY3Rpb24gZnJvbUFycmF5QnVmZmVyICh0aGF0LCBhcnJheSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XHJcbiAgYXJyYXkuYnl0ZUxlbmd0aCAvLyB0aGlzIHRocm93cyBpZiBgYXJyYXlgIGlzIG5vdCBhIHZhbGlkIEFycmF5QnVmZmVyXHJcblxyXG4gIGlmIChieXRlT2Zmc2V0IDwgMCB8fCBhcnJheS5ieXRlTGVuZ3RoIDwgYnl0ZU9mZnNldCkge1xyXG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1xcJ29mZnNldFxcJyBpcyBvdXQgb2YgYm91bmRzJylcclxuICB9XHJcblxyXG4gIGlmIChhcnJheS5ieXRlTGVuZ3RoIDwgYnl0ZU9mZnNldCArIChsZW5ndGggfHwgMCkpIHtcclxuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcXCdsZW5ndGhcXCcgaXMgb3V0IG9mIGJvdW5kcycpXHJcbiAgfVxyXG5cclxuICBpZiAoYnl0ZU9mZnNldCA9PT0gdW5kZWZpbmVkICYmIGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICBhcnJheSA9IG5ldyBVaW50OEFycmF5KGFycmF5KVxyXG4gIH0gZWxzZSBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQpIHtcclxuICAgIGFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXksIGJ5dGVPZmZzZXQpXHJcbiAgfSBlbHNlIHtcclxuICAgIGFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXksIGJ5dGVPZmZzZXQsIGxlbmd0aClcclxuICB9XHJcblxyXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xyXG4gICAgLy8gUmV0dXJuIGFuIGF1Z21lbnRlZCBgVWludDhBcnJheWAgaW5zdGFuY2UsIGZvciBiZXN0IHBlcmZvcm1hbmNlXHJcbiAgICB0aGF0ID0gYXJyYXlcclxuICAgIHRoYXQuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxyXG4gIH0gZWxzZSB7XHJcbiAgICAvLyBGYWxsYmFjazogUmV0dXJuIGFuIG9iamVjdCBpbnN0YW5jZSBvZiB0aGUgQnVmZmVyIGNsYXNzXHJcbiAgICB0aGF0ID0gZnJvbUFycmF5TGlrZSh0aGF0LCBhcnJheSlcclxuICB9XHJcbiAgcmV0dXJuIHRoYXRcclxufVxyXG5cclxuZnVuY3Rpb24gZnJvbU9iamVjdCAodGhhdCwgb2JqKSB7XHJcbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihvYmopKSB7XHJcbiAgICB2YXIgbGVuID0gY2hlY2tlZChvYmoubGVuZ3RoKSB8IDBcclxuICAgIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgbGVuKVxyXG5cclxuICAgIGlmICh0aGF0Lmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICByZXR1cm4gdGhhdFxyXG4gICAgfVxyXG5cclxuICAgIG9iai5jb3B5KHRoYXQsIDAsIDAsIGxlbilcclxuICAgIHJldHVybiB0aGF0XHJcbiAgfVxyXG5cclxuICBpZiAob2JqKSB7XHJcbiAgICBpZiAoKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiZcclxuICAgICAgICBvYmouYnVmZmVyIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHx8ICdsZW5ndGgnIGluIG9iaikge1xyXG4gICAgICBpZiAodHlwZW9mIG9iai5sZW5ndGggIT09ICdudW1iZXInIHx8IGlzbmFuKG9iai5sZW5ndGgpKSB7XHJcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcih0aGF0LCAwKVxyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBmcm9tQXJyYXlMaWtlKHRoYXQsIG9iailcclxuICAgIH1cclxuXHJcbiAgICBpZiAob2JqLnR5cGUgPT09ICdCdWZmZXInICYmIGlzQXJyYXkob2JqLmRhdGEpKSB7XHJcbiAgICAgIHJldHVybiBmcm9tQXJyYXlMaWtlKHRoYXQsIG9iai5kYXRhKVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcignRmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZywgQnVmZmVyLCBBcnJheUJ1ZmZlciwgQXJyYXksIG9yIGFycmF5LWxpa2Ugb2JqZWN0LicpXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNoZWNrZWQgKGxlbmd0aCkge1xyXG4gIC8vIE5vdGU6IGNhbm5vdCB1c2UgYGxlbmd0aCA8IGtNYXhMZW5ndGgoKWAgaGVyZSBiZWNhdXNlIHRoYXQgZmFpbHMgd2hlblxyXG4gIC8vIGxlbmd0aCBpcyBOYU4gKHdoaWNoIGlzIG90aGVyd2lzZSBjb2VyY2VkIHRvIHplcm8uKVxyXG4gIGlmIChsZW5ndGggPj0ga01heExlbmd0aCgpKSB7XHJcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQXR0ZW1wdCB0byBhbGxvY2F0ZSBCdWZmZXIgbGFyZ2VyIHRoYW4gbWF4aW11bSAnICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICdzaXplOiAweCcgKyBrTWF4TGVuZ3RoKCkudG9TdHJpbmcoMTYpICsgJyBieXRlcycpXHJcbiAgfVxyXG4gIHJldHVybiBsZW5ndGggfCAwXHJcbn1cclxuXHJcbmZ1bmN0aW9uIFNsb3dCdWZmZXIgKGxlbmd0aCkge1xyXG4gIGlmICgrbGVuZ3RoICE9IGxlbmd0aCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGVxZXFlcVxyXG4gICAgbGVuZ3RoID0gMFxyXG4gIH1cclxuICByZXR1cm4gQnVmZmVyLmFsbG9jKCtsZW5ndGgpXHJcbn1cclxuXHJcbkJ1ZmZlci5pc0J1ZmZlciA9IGZ1bmN0aW9uIGlzQnVmZmVyIChiKSB7XHJcbiAgcmV0dXJuICEhKGIgIT0gbnVsbCAmJiBiLl9pc0J1ZmZlcilcclxufVxyXG5cclxuQnVmZmVyLmNvbXBhcmUgPSBmdW5jdGlvbiBjb21wYXJlIChhLCBiKSB7XHJcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYSkgfHwgIUJ1ZmZlci5pc0J1ZmZlcihiKSkge1xyXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnRzIG11c3QgYmUgQnVmZmVycycpXHJcbiAgfVxyXG5cclxuICBpZiAoYSA9PT0gYikgcmV0dXJuIDBcclxuXHJcbiAgdmFyIHggPSBhLmxlbmd0aFxyXG4gIHZhciB5ID0gYi5sZW5ndGhcclxuXHJcbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IE1hdGgubWluKHgsIHkpOyBpIDwgbGVuOyArK2kpIHtcclxuICAgIGlmIChhW2ldICE9PSBiW2ldKSB7XHJcbiAgICAgIHggPSBhW2ldXHJcbiAgICAgIHkgPSBiW2ldXHJcbiAgICAgIGJyZWFrXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBpZiAoeCA8IHkpIHJldHVybiAtMVxyXG4gIGlmICh5IDwgeCkgcmV0dXJuIDFcclxuICByZXR1cm4gMFxyXG59XHJcblxyXG5CdWZmZXIuaXNFbmNvZGluZyA9IGZ1bmN0aW9uIGlzRW5jb2RpbmcgKGVuY29kaW5nKSB7XHJcbiAgc3dpdGNoIChTdHJpbmcoZW5jb2RpbmcpLnRvTG93ZXJDYXNlKCkpIHtcclxuICAgIGNhc2UgJ2hleCc6XHJcbiAgICBjYXNlICd1dGY4JzpcclxuICAgIGNhc2UgJ3V0Zi04JzpcclxuICAgIGNhc2UgJ2FzY2lpJzpcclxuICAgIGNhc2UgJ2xhdGluMSc6XHJcbiAgICBjYXNlICdiaW5hcnknOlxyXG4gICAgY2FzZSAnYmFzZTY0JzpcclxuICAgIGNhc2UgJ3VjczInOlxyXG4gICAgY2FzZSAndWNzLTInOlxyXG4gICAgY2FzZSAndXRmMTZsZSc6XHJcbiAgICBjYXNlICd1dGYtMTZsZSc6XHJcbiAgICAgIHJldHVybiB0cnVlXHJcbiAgICBkZWZhdWx0OlxyXG4gICAgICByZXR1cm4gZmFsc2VcclxuICB9XHJcbn1cclxuXHJcbkJ1ZmZlci5jb25jYXQgPSBmdW5jdGlvbiBjb25jYXQgKGxpc3QsIGxlbmd0aCkge1xyXG4gIGlmICghaXNBcnJheShsaXN0KSkge1xyXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJsaXN0XCIgYXJndW1lbnQgbXVzdCBiZSBhbiBBcnJheSBvZiBCdWZmZXJzJylcclxuICB9XHJcblxyXG4gIGlmIChsaXN0Lmxlbmd0aCA9PT0gMCkge1xyXG4gICAgcmV0dXJuIEJ1ZmZlci5hbGxvYygwKVxyXG4gIH1cclxuXHJcbiAgdmFyIGlcclxuICBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQpIHtcclxuICAgIGxlbmd0aCA9IDBcclxuICAgIGZvciAoaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgKytpKSB7XHJcbiAgICAgIGxlbmd0aCArPSBsaXN0W2ldLmxlbmd0aFxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgdmFyIGJ1ZmZlciA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShsZW5ndGgpXHJcbiAgdmFyIHBvcyA9IDBcclxuICBmb3IgKGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7ICsraSkge1xyXG4gICAgdmFyIGJ1ZiA9IGxpc3RbaV1cclxuICAgIGlmICghQnVmZmVyLmlzQnVmZmVyKGJ1ZikpIHtcclxuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJsaXN0XCIgYXJndW1lbnQgbXVzdCBiZSBhbiBBcnJheSBvZiBCdWZmZXJzJylcclxuICAgIH1cclxuICAgIGJ1Zi5jb3B5KGJ1ZmZlciwgcG9zKVxyXG4gICAgcG9zICs9IGJ1Zi5sZW5ndGhcclxuICB9XHJcbiAgcmV0dXJuIGJ1ZmZlclxyXG59XHJcblxyXG5mdW5jdGlvbiBieXRlTGVuZ3RoIChzdHJpbmcsIGVuY29kaW5nKSB7XHJcbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihzdHJpbmcpKSB7XHJcbiAgICByZXR1cm4gc3RyaW5nLmxlbmd0aFxyXG4gIH1cclxuICBpZiAodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgQXJyYXlCdWZmZXIuaXNWaWV3ID09PSAnZnVuY3Rpb24nICYmXHJcbiAgICAgIChBcnJheUJ1ZmZlci5pc1ZpZXcoc3RyaW5nKSB8fCBzdHJpbmcgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikpIHtcclxuICAgIHJldHVybiBzdHJpbmcuYnl0ZUxlbmd0aFxyXG4gIH1cclxuICBpZiAodHlwZW9mIHN0cmluZyAhPT0gJ3N0cmluZycpIHtcclxuICAgIHN0cmluZyA9ICcnICsgc3RyaW5nXHJcbiAgfVxyXG5cclxuICB2YXIgbGVuID0gc3RyaW5nLmxlbmd0aFxyXG4gIGlmIChsZW4gPT09IDApIHJldHVybiAwXHJcblxyXG4gIC8vIFVzZSBhIGZvciBsb29wIHRvIGF2b2lkIHJlY3Vyc2lvblxyXG4gIHZhciBsb3dlcmVkQ2FzZSA9IGZhbHNlXHJcbiAgZm9yICg7Oykge1xyXG4gICAgc3dpdGNoIChlbmNvZGluZykge1xyXG4gICAgICBjYXNlICdhc2NpaSc6XHJcbiAgICAgIGNhc2UgJ2xhdGluMSc6XHJcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XHJcbiAgICAgICAgcmV0dXJuIGxlblxyXG4gICAgICBjYXNlICd1dGY4JzpcclxuICAgICAgY2FzZSAndXRmLTgnOlxyXG4gICAgICBjYXNlIHVuZGVmaW5lZDpcclxuICAgICAgICByZXR1cm4gdXRmOFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGhcclxuICAgICAgY2FzZSAndWNzMic6XHJcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcclxuICAgICAgY2FzZSAndXRmMTZsZSc6XHJcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcclxuICAgICAgICByZXR1cm4gbGVuICogMlxyXG4gICAgICBjYXNlICdoZXgnOlxyXG4gICAgICAgIHJldHVybiBsZW4gPj4+IDFcclxuICAgICAgY2FzZSAnYmFzZTY0JzpcclxuICAgICAgICByZXR1cm4gYmFzZTY0VG9CeXRlcyhzdHJpbmcpLmxlbmd0aFxyXG4gICAgICBkZWZhdWx0OlxyXG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgcmV0dXJuIHV0ZjhUb0J5dGVzKHN0cmluZykubGVuZ3RoIC8vIGFzc3VtZSB1dGY4XHJcbiAgICAgICAgZW5jb2RpbmcgPSAoJycgKyBlbmNvZGluZykudG9Mb3dlckNhc2UoKVxyXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG5CdWZmZXIuYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGhcclxuXHJcbmZ1bmN0aW9uIHNsb3dUb1N0cmluZyAoZW5jb2RpbmcsIHN0YXJ0LCBlbmQpIHtcclxuICB2YXIgbG93ZXJlZENhc2UgPSBmYWxzZVxyXG5cclxuICAvLyBObyBuZWVkIHRvIHZlcmlmeSB0aGF0IFwidGhpcy5sZW5ndGggPD0gTUFYX1VJTlQzMlwiIHNpbmNlIGl0J3MgYSByZWFkLW9ubHlcclxuICAvLyBwcm9wZXJ0eSBvZiBhIHR5cGVkIGFycmF5LlxyXG5cclxuICAvLyBUaGlzIGJlaGF2ZXMgbmVpdGhlciBsaWtlIFN0cmluZyBub3IgVWludDhBcnJheSBpbiB0aGF0IHdlIHNldCBzdGFydC9lbmRcclxuICAvLyB0byB0aGVpciB1cHBlci9sb3dlciBib3VuZHMgaWYgdGhlIHZhbHVlIHBhc3NlZCBpcyBvdXQgb2YgcmFuZ2UuXHJcbiAgLy8gdW5kZWZpbmVkIGlzIGhhbmRsZWQgc3BlY2lhbGx5IGFzIHBlciBFQ01BLTI2MiA2dGggRWRpdGlvbixcclxuICAvLyBTZWN0aW9uIDEzLjMuMy43IFJ1bnRpbWUgU2VtYW50aWNzOiBLZXllZEJpbmRpbmdJbml0aWFsaXphdGlvbi5cclxuICBpZiAoc3RhcnQgPT09IHVuZGVmaW5lZCB8fCBzdGFydCA8IDApIHtcclxuICAgIHN0YXJ0ID0gMFxyXG4gIH1cclxuICAvLyBSZXR1cm4gZWFybHkgaWYgc3RhcnQgPiB0aGlzLmxlbmd0aC4gRG9uZSBoZXJlIHRvIHByZXZlbnQgcG90ZW50aWFsIHVpbnQzMlxyXG4gIC8vIGNvZXJjaW9uIGZhaWwgYmVsb3cuXHJcbiAgaWYgKHN0YXJ0ID4gdGhpcy5sZW5ndGgpIHtcclxuICAgIHJldHVybiAnJ1xyXG4gIH1cclxuXHJcbiAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkIHx8IGVuZCA+IHRoaXMubGVuZ3RoKSB7XHJcbiAgICBlbmQgPSB0aGlzLmxlbmd0aFxyXG4gIH1cclxuXHJcbiAgaWYgKGVuZCA8PSAwKSB7XHJcbiAgICByZXR1cm4gJydcclxuICB9XHJcblxyXG4gIC8vIEZvcmNlIGNvZXJzaW9uIHRvIHVpbnQzMi4gVGhpcyB3aWxsIGFsc28gY29lcmNlIGZhbHNleS9OYU4gdmFsdWVzIHRvIDAuXHJcbiAgZW5kID4+Pj0gMFxyXG4gIHN0YXJ0ID4+Pj0gMFxyXG5cclxuICBpZiAoZW5kIDw9IHN0YXJ0KSB7XHJcbiAgICByZXR1cm4gJydcclxuICB9XHJcblxyXG4gIGlmICghZW5jb2RpbmcpIGVuY29kaW5nID0gJ3V0ZjgnXHJcblxyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XHJcbiAgICAgIGNhc2UgJ2hleCc6XHJcbiAgICAgICAgcmV0dXJuIGhleFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXHJcblxyXG4gICAgICBjYXNlICd1dGY4JzpcclxuICAgICAgY2FzZSAndXRmLTgnOlxyXG4gICAgICAgIHJldHVybiB1dGY4U2xpY2UodGhpcywgc3RhcnQsIGVuZClcclxuXHJcbiAgICAgIGNhc2UgJ2FzY2lpJzpcclxuICAgICAgICByZXR1cm4gYXNjaWlTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxyXG5cclxuICAgICAgY2FzZSAnbGF0aW4xJzpcclxuICAgICAgY2FzZSAnYmluYXJ5JzpcclxuICAgICAgICByZXR1cm4gbGF0aW4xU2xpY2UodGhpcywgc3RhcnQsIGVuZClcclxuXHJcbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XHJcbiAgICAgICAgcmV0dXJuIGJhc2U2NFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXHJcblxyXG4gICAgICBjYXNlICd1Y3MyJzpcclxuICAgICAgY2FzZSAndWNzLTInOlxyXG4gICAgICBjYXNlICd1dGYxNmxlJzpcclxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxyXG4gICAgICAgIHJldHVybiB1dGYxNmxlU2xpY2UodGhpcywgc3RhcnQsIGVuZClcclxuXHJcbiAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXHJcbiAgICAgICAgZW5jb2RpbmcgPSAoZW5jb2RpbmcgKyAnJykudG9Mb3dlckNhc2UoKVxyXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuLy8gVGhlIHByb3BlcnR5IGlzIHVzZWQgYnkgYEJ1ZmZlci5pc0J1ZmZlcmAgYW5kIGBpcy1idWZmZXJgIChpbiBTYWZhcmkgNS03KSB0byBkZXRlY3RcclxuLy8gQnVmZmVyIGluc3RhbmNlcy5cclxuQnVmZmVyLnByb3RvdHlwZS5faXNCdWZmZXIgPSB0cnVlXHJcblxyXG5mdW5jdGlvbiBzd2FwIChiLCBuLCBtKSB7XHJcbiAgdmFyIGkgPSBiW25dXHJcbiAgYltuXSA9IGJbbV1cclxuICBiW21dID0gaVxyXG59XHJcblxyXG5CdWZmZXIucHJvdG90eXBlLnN3YXAxNiA9IGZ1bmN0aW9uIHN3YXAxNiAoKSB7XHJcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXHJcbiAgaWYgKGxlbiAlIDIgIT09IDApIHtcclxuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgMTYtYml0cycpXHJcbiAgfVxyXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDIpIHtcclxuICAgIHN3YXAodGhpcywgaSwgaSArIDEpXHJcbiAgfVxyXG4gIHJldHVybiB0aGlzXHJcbn1cclxuXHJcbkJ1ZmZlci5wcm90b3R5cGUuc3dhcDMyID0gZnVuY3Rpb24gc3dhcDMyICgpIHtcclxuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcclxuICBpZiAobGVuICUgNCAhPT0gMCkge1xyXG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0J1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiAzMi1iaXRzJylcclxuICB9XHJcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gNCkge1xyXG4gICAgc3dhcCh0aGlzLCBpLCBpICsgMylcclxuICAgIHN3YXAodGhpcywgaSArIDEsIGkgKyAyKVxyXG4gIH1cclxuICByZXR1cm4gdGhpc1xyXG59XHJcblxyXG5CdWZmZXIucHJvdG90eXBlLnN3YXA2NCA9IGZ1bmN0aW9uIHN3YXA2NCAoKSB7XHJcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXHJcbiAgaWYgKGxlbiAlIDggIT09IDApIHtcclxuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgNjQtYml0cycpXHJcbiAgfVxyXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDgpIHtcclxuICAgIHN3YXAodGhpcywgaSwgaSArIDcpXHJcbiAgICBzd2FwKHRoaXMsIGkgKyAxLCBpICsgNilcclxuICAgIHN3YXAodGhpcywgaSArIDIsIGkgKyA1KVxyXG4gICAgc3dhcCh0aGlzLCBpICsgMywgaSArIDQpXHJcbiAgfVxyXG4gIHJldHVybiB0aGlzXHJcbn1cclxuXHJcbkJ1ZmZlci5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyAoKSB7XHJcbiAgdmFyIGxlbmd0aCA9IHRoaXMubGVuZ3RoIHwgMFxyXG4gIGlmIChsZW5ndGggPT09IDApIHJldHVybiAnJ1xyXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSByZXR1cm4gdXRmOFNsaWNlKHRoaXMsIDAsIGxlbmd0aClcclxuICByZXR1cm4gc2xvd1RvU3RyaW5nLmFwcGx5KHRoaXMsIGFyZ3VtZW50cylcclxufVxyXG5cclxuQnVmZmVyLnByb3RvdHlwZS5lcXVhbHMgPSBmdW5jdGlvbiBlcXVhbHMgKGIpIHtcclxuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihiKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlcicpXHJcbiAgaWYgKHRoaXMgPT09IGIpIHJldHVybiB0cnVlXHJcbiAgcmV0dXJuIEJ1ZmZlci5jb21wYXJlKHRoaXMsIGIpID09PSAwXHJcbn1cclxuXHJcbkJ1ZmZlci5wcm90b3R5cGUuaW5zcGVjdCA9IGZ1bmN0aW9uIGluc3BlY3QgKCkge1xyXG4gIHZhciBzdHIgPSAnJ1xyXG4gIHZhciBtYXggPSBleHBvcnRzLklOU1BFQ1RfTUFYX0JZVEVTXHJcbiAgaWYgKHRoaXMubGVuZ3RoID4gMCkge1xyXG4gICAgc3RyID0gdGhpcy50b1N0cmluZygnaGV4JywgMCwgbWF4KS5tYXRjaCgvLnsyfS9nKS5qb2luKCcgJylcclxuICAgIGlmICh0aGlzLmxlbmd0aCA+IG1heCkgc3RyICs9ICcgLi4uICdcclxuICB9XHJcbiAgcmV0dXJuICc8QnVmZmVyICcgKyBzdHIgKyAnPidcclxufVxyXG5cclxuQnVmZmVyLnByb3RvdHlwZS5jb21wYXJlID0gZnVuY3Rpb24gY29tcGFyZSAodGFyZ2V0LCBzdGFydCwgZW5kLCB0aGlzU3RhcnQsIHRoaXNFbmQpIHtcclxuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcih0YXJnZXQpKSB7XHJcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyJylcclxuICB9XHJcblxyXG4gIGlmIChzdGFydCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICBzdGFydCA9IDBcclxuICB9XHJcbiAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICBlbmQgPSB0YXJnZXQgPyB0YXJnZXQubGVuZ3RoIDogMFxyXG4gIH1cclxuICBpZiAodGhpc1N0YXJ0ID09PSB1bmRlZmluZWQpIHtcclxuICAgIHRoaXNTdGFydCA9IDBcclxuICB9XHJcbiAgaWYgKHRoaXNFbmQgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgdGhpc0VuZCA9IHRoaXMubGVuZ3RoXHJcbiAgfVxyXG5cclxuICBpZiAoc3RhcnQgPCAwIHx8IGVuZCA+IHRhcmdldC5sZW5ndGggfHwgdGhpc1N0YXJ0IDwgMCB8fCB0aGlzRW5kID4gdGhpcy5sZW5ndGgpIHtcclxuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdvdXQgb2YgcmFuZ2UgaW5kZXgnKVxyXG4gIH1cclxuXHJcbiAgaWYgKHRoaXNTdGFydCA+PSB0aGlzRW5kICYmIHN0YXJ0ID49IGVuZCkge1xyXG4gICAgcmV0dXJuIDBcclxuICB9XHJcbiAgaWYgKHRoaXNTdGFydCA+PSB0aGlzRW5kKSB7XHJcbiAgICByZXR1cm4gLTFcclxuICB9XHJcbiAgaWYgKHN0YXJ0ID49IGVuZCkge1xyXG4gICAgcmV0dXJuIDFcclxuICB9XHJcblxyXG4gIHN0YXJ0ID4+Pj0gMFxyXG4gIGVuZCA+Pj49IDBcclxuICB0aGlzU3RhcnQgPj4+PSAwXHJcbiAgdGhpc0VuZCA+Pj49IDBcclxuXHJcbiAgaWYgKHRoaXMgPT09IHRhcmdldCkgcmV0dXJuIDBcclxuXHJcbiAgdmFyIHggPSB0aGlzRW5kIC0gdGhpc1N0YXJ0XHJcbiAgdmFyIHkgPSBlbmQgLSBzdGFydFxyXG4gIHZhciBsZW4gPSBNYXRoLm1pbih4LCB5KVxyXG5cclxuICB2YXIgdGhpc0NvcHkgPSB0aGlzLnNsaWNlKHRoaXNTdGFydCwgdGhpc0VuZClcclxuICB2YXIgdGFyZ2V0Q29weSA9IHRhcmdldC5zbGljZShzdGFydCwgZW5kKVxyXG5cclxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKSB7XHJcbiAgICBpZiAodGhpc0NvcHlbaV0gIT09IHRhcmdldENvcHlbaV0pIHtcclxuICAgICAgeCA9IHRoaXNDb3B5W2ldXHJcbiAgICAgIHkgPSB0YXJnZXRDb3B5W2ldXHJcbiAgICAgIGJyZWFrXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBpZiAoeCA8IHkpIHJldHVybiAtMVxyXG4gIGlmICh5IDwgeCkgcmV0dXJuIDFcclxuICByZXR1cm4gMFxyXG59XHJcblxyXG4vLyBGaW5kcyBlaXRoZXIgdGhlIGZpcnN0IGluZGV4IG9mIGB2YWxgIGluIGBidWZmZXJgIGF0IG9mZnNldCA+PSBgYnl0ZU9mZnNldGAsXHJcbi8vIE9SIHRoZSBsYXN0IGluZGV4IG9mIGB2YWxgIGluIGBidWZmZXJgIGF0IG9mZnNldCA8PSBgYnl0ZU9mZnNldGAuXHJcbi8vXHJcbi8vIEFyZ3VtZW50czpcclxuLy8gLSBidWZmZXIgLSBhIEJ1ZmZlciB0byBzZWFyY2hcclxuLy8gLSB2YWwgLSBhIHN0cmluZywgQnVmZmVyLCBvciBudW1iZXJcclxuLy8gLSBieXRlT2Zmc2V0IC0gYW4gaW5kZXggaW50byBgYnVmZmVyYDsgd2lsbCBiZSBjbGFtcGVkIHRvIGFuIGludDMyXHJcbi8vIC0gZW5jb2RpbmcgLSBhbiBvcHRpb25hbCBlbmNvZGluZywgcmVsZXZhbnQgaXMgdmFsIGlzIGEgc3RyaW5nXHJcbi8vIC0gZGlyIC0gdHJ1ZSBmb3IgaW5kZXhPZiwgZmFsc2UgZm9yIGxhc3RJbmRleE9mXHJcbmZ1bmN0aW9uIGJpZGlyZWN0aW9uYWxJbmRleE9mIChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcikge1xyXG4gIC8vIEVtcHR5IGJ1ZmZlciBtZWFucyBubyBtYXRjaFxyXG4gIGlmIChidWZmZXIubGVuZ3RoID09PSAwKSByZXR1cm4gLTFcclxuXHJcbiAgLy8gTm9ybWFsaXplIGJ5dGVPZmZzZXRcclxuICBpZiAodHlwZW9mIGJ5dGVPZmZzZXQgPT09ICdzdHJpbmcnKSB7XHJcbiAgICBlbmNvZGluZyA9IGJ5dGVPZmZzZXRcclxuICAgIGJ5dGVPZmZzZXQgPSAwXHJcbiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0ID4gMHg3ZmZmZmZmZikge1xyXG4gICAgYnl0ZU9mZnNldCA9IDB4N2ZmZmZmZmZcclxuICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPCAtMHg4MDAwMDAwMCkge1xyXG4gICAgYnl0ZU9mZnNldCA9IC0weDgwMDAwMDAwXHJcbiAgfVxyXG4gIGJ5dGVPZmZzZXQgPSArYnl0ZU9mZnNldCAgLy8gQ29lcmNlIHRvIE51bWJlci5cclxuICBpZiAoaXNOYU4oYnl0ZU9mZnNldCkpIHtcclxuICAgIC8vIGJ5dGVPZmZzZXQ6IGl0IGl0J3MgdW5kZWZpbmVkLCBudWxsLCBOYU4sIFwiZm9vXCIsIGV0Yywgc2VhcmNoIHdob2xlIGJ1ZmZlclxyXG4gICAgYnl0ZU9mZnNldCA9IGRpciA/IDAgOiAoYnVmZmVyLmxlbmd0aCAtIDEpXHJcbiAgfVxyXG5cclxuICAvLyBOb3JtYWxpemUgYnl0ZU9mZnNldDogbmVnYXRpdmUgb2Zmc2V0cyBzdGFydCBmcm9tIHRoZSBlbmQgb2YgdGhlIGJ1ZmZlclxyXG4gIGlmIChieXRlT2Zmc2V0IDwgMCkgYnl0ZU9mZnNldCA9IGJ1ZmZlci5sZW5ndGggKyBieXRlT2Zmc2V0XHJcbiAgaWYgKGJ5dGVPZmZzZXQgPj0gYnVmZmVyLmxlbmd0aCkge1xyXG4gICAgaWYgKGRpcikgcmV0dXJuIC0xXHJcbiAgICBlbHNlIGJ5dGVPZmZzZXQgPSBidWZmZXIubGVuZ3RoIC0gMVxyXG4gIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA8IDApIHtcclxuICAgIGlmIChkaXIpIGJ5dGVPZmZzZXQgPSAwXHJcbiAgICBlbHNlIHJldHVybiAtMVxyXG4gIH1cclxuXHJcbiAgLy8gTm9ybWFsaXplIHZhbFxyXG4gIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xyXG4gICAgdmFsID0gQnVmZmVyLmZyb20odmFsLCBlbmNvZGluZylcclxuICB9XHJcblxyXG4gIC8vIEZpbmFsbHksIHNlYXJjaCBlaXRoZXIgaW5kZXhPZiAoaWYgZGlyIGlzIHRydWUpIG9yIGxhc3RJbmRleE9mXHJcbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcih2YWwpKSB7XHJcbiAgICAvLyBTcGVjaWFsIGNhc2U6IGxvb2tpbmcgZm9yIGVtcHR5IHN0cmluZy9idWZmZXIgYWx3YXlzIGZhaWxzXHJcbiAgICBpZiAodmFsLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICByZXR1cm4gLTFcclxuICAgIH1cclxuICAgIHJldHVybiBhcnJheUluZGV4T2YoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpXHJcbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xyXG4gICAgdmFsID0gdmFsICYgMHhGRiAvLyBTZWFyY2ggZm9yIGEgYnl0ZSB2YWx1ZSBbMC0yNTVdXHJcbiAgICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgJiZcclxuICAgICAgICB0eXBlb2YgVWludDhBcnJheS5wcm90b3R5cGUuaW5kZXhPZiA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICBpZiAoZGlyKSB7XHJcbiAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXkucHJvdG90eXBlLmluZGV4T2YuY2FsbChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldClcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICByZXR1cm4gVWludDhBcnJheS5wcm90b3R5cGUubGFzdEluZGV4T2YuY2FsbChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldClcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGFycmF5SW5kZXhPZihidWZmZXIsIFsgdmFsIF0sIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpXHJcbiAgfVxyXG5cclxuICB0aHJvdyBuZXcgVHlwZUVycm9yKCd2YWwgbXVzdCBiZSBzdHJpbmcsIG51bWJlciBvciBCdWZmZXInKVxyXG59XHJcblxyXG5mdW5jdGlvbiBhcnJheUluZGV4T2YgKGFyciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKSB7XHJcbiAgdmFyIGluZGV4U2l6ZSA9IDFcclxuICB2YXIgYXJyTGVuZ3RoID0gYXJyLmxlbmd0aFxyXG4gIHZhciB2YWxMZW5ndGggPSB2YWwubGVuZ3RoXHJcblxyXG4gIGlmIChlbmNvZGluZyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICBlbmNvZGluZyA9IFN0cmluZyhlbmNvZGluZykudG9Mb3dlckNhc2UoKVxyXG4gICAgaWYgKGVuY29kaW5nID09PSAndWNzMicgfHwgZW5jb2RpbmcgPT09ICd1Y3MtMicgfHxcclxuICAgICAgICBlbmNvZGluZyA9PT0gJ3V0ZjE2bGUnIHx8IGVuY29kaW5nID09PSAndXRmLTE2bGUnKSB7XHJcbiAgICAgIGlmIChhcnIubGVuZ3RoIDwgMiB8fCB2YWwubGVuZ3RoIDwgMikge1xyXG4gICAgICAgIHJldHVybiAtMVxyXG4gICAgICB9XHJcbiAgICAgIGluZGV4U2l6ZSA9IDJcclxuICAgICAgYXJyTGVuZ3RoIC89IDJcclxuICAgICAgdmFsTGVuZ3RoIC89IDJcclxuICAgICAgYnl0ZU9mZnNldCAvPSAyXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiByZWFkIChidWYsIGkpIHtcclxuICAgIGlmIChpbmRleFNpemUgPT09IDEpIHtcclxuICAgICAgcmV0dXJuIGJ1ZltpXVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmV0dXJuIGJ1Zi5yZWFkVUludDE2QkUoaSAqIGluZGV4U2l6ZSlcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHZhciBpXHJcbiAgaWYgKGRpcikge1xyXG4gICAgdmFyIGZvdW5kSW5kZXggPSAtMVxyXG4gICAgZm9yIChpID0gYnl0ZU9mZnNldDsgaSA8IGFyckxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIGlmIChyZWFkKGFyciwgaSkgPT09IHJlYWQodmFsLCBmb3VuZEluZGV4ID09PSAtMSA/IDAgOiBpIC0gZm91bmRJbmRleCkpIHtcclxuICAgICAgICBpZiAoZm91bmRJbmRleCA9PT0gLTEpIGZvdW5kSW5kZXggPSBpXHJcbiAgICAgICAgaWYgKGkgLSBmb3VuZEluZGV4ICsgMSA9PT0gdmFsTGVuZ3RoKSByZXR1cm4gZm91bmRJbmRleCAqIGluZGV4U2l6ZVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGlmIChmb3VuZEluZGV4ICE9PSAtMSkgaSAtPSBpIC0gZm91bmRJbmRleFxyXG4gICAgICAgIGZvdW5kSW5kZXggPSAtMVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfSBlbHNlIHtcclxuICAgIGlmIChieXRlT2Zmc2V0ICsgdmFsTGVuZ3RoID4gYXJyTGVuZ3RoKSBieXRlT2Zmc2V0ID0gYXJyTGVuZ3RoIC0gdmFsTGVuZ3RoXHJcbiAgICBmb3IgKGkgPSBieXRlT2Zmc2V0OyBpID49IDA7IGktLSkge1xyXG4gICAgICB2YXIgZm91bmQgPSB0cnVlXHJcbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdmFsTGVuZ3RoOyBqKyspIHtcclxuICAgICAgICBpZiAocmVhZChhcnIsIGkgKyBqKSAhPT0gcmVhZCh2YWwsIGopKSB7XHJcbiAgICAgICAgICBmb3VuZCA9IGZhbHNlXHJcbiAgICAgICAgICBicmVha1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBpZiAoZm91bmQpIHJldHVybiBpXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZXR1cm4gLTFcclxufVxyXG5cclxuQnVmZmVyLnByb3RvdHlwZS5pbmNsdWRlcyA9IGZ1bmN0aW9uIGluY2x1ZGVzICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7XHJcbiAgcmV0dXJuIHRoaXMuaW5kZXhPZih2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSAhPT0gLTFcclxufVxyXG5cclxuQnVmZmVyLnByb3RvdHlwZS5pbmRleE9mID0gZnVuY3Rpb24gaW5kZXhPZiAodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykge1xyXG4gIHJldHVybiBiaWRpcmVjdGlvbmFsSW5kZXhPZih0aGlzLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCB0cnVlKVxyXG59XHJcblxyXG5CdWZmZXIucHJvdG90eXBlLmxhc3RJbmRleE9mID0gZnVuY3Rpb24gbGFzdEluZGV4T2YgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHtcclxuICByZXR1cm4gYmlkaXJlY3Rpb25hbEluZGV4T2YodGhpcywgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZmFsc2UpXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGhleFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcclxuICBvZmZzZXQgPSBOdW1iZXIob2Zmc2V0KSB8fCAwXHJcbiAgdmFyIHJlbWFpbmluZyA9IGJ1Zi5sZW5ndGggLSBvZmZzZXRcclxuICBpZiAoIWxlbmd0aCkge1xyXG4gICAgbGVuZ3RoID0gcmVtYWluaW5nXHJcbiAgfSBlbHNlIHtcclxuICAgIGxlbmd0aCA9IE51bWJlcihsZW5ndGgpXHJcbiAgICBpZiAobGVuZ3RoID4gcmVtYWluaW5nKSB7XHJcbiAgICAgIGxlbmd0aCA9IHJlbWFpbmluZ1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gbXVzdCBiZSBhbiBldmVuIG51bWJlciBvZiBkaWdpdHNcclxuICB2YXIgc3RyTGVuID0gc3RyaW5nLmxlbmd0aFxyXG4gIGlmIChzdHJMZW4gJSAyICE9PSAwKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIGhleCBzdHJpbmcnKVxyXG5cclxuICBpZiAobGVuZ3RoID4gc3RyTGVuIC8gMikge1xyXG4gICAgbGVuZ3RoID0gc3RyTGVuIC8gMlxyXG4gIH1cclxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XHJcbiAgICB2YXIgcGFyc2VkID0gcGFyc2VJbnQoc3RyaW5nLnN1YnN0cihpICogMiwgMiksIDE2KVxyXG4gICAgaWYgKGlzTmFOKHBhcnNlZCkpIHJldHVybiBpXHJcbiAgICBidWZbb2Zmc2V0ICsgaV0gPSBwYXJzZWRcclxuICB9XHJcbiAgcmV0dXJuIGlcclxufVxyXG5cclxuZnVuY3Rpb24gdXRmOFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcclxuICByZXR1cm4gYmxpdEJ1ZmZlcih1dGY4VG9CeXRlcyhzdHJpbmcsIGJ1Zi5sZW5ndGggLSBvZmZzZXQpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxyXG59XHJcblxyXG5mdW5jdGlvbiBhc2NpaVdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcclxuICByZXR1cm4gYmxpdEJ1ZmZlcihhc2NpaVRvQnl0ZXMoc3RyaW5nKSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcclxufVxyXG5cclxuZnVuY3Rpb24gbGF0aW4xV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xyXG4gIHJldHVybiBhc2NpaVdyaXRlKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcclxufVxyXG5cclxuZnVuY3Rpb24gYmFzZTY0V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xyXG4gIHJldHVybiBibGl0QnVmZmVyKGJhc2U2NFRvQnl0ZXMoc3RyaW5nKSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcclxufVxyXG5cclxuZnVuY3Rpb24gdWNzMldyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcclxuICByZXR1cm4gYmxpdEJ1ZmZlcih1dGYxNmxlVG9CeXRlcyhzdHJpbmcsIGJ1Zi5sZW5ndGggLSBvZmZzZXQpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxyXG59XHJcblxyXG5CdWZmZXIucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gd3JpdGUgKHN0cmluZywgb2Zmc2V0LCBsZW5ndGgsIGVuY29kaW5nKSB7XHJcbiAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZylcclxuICBpZiAob2Zmc2V0ID09PSB1bmRlZmluZWQpIHtcclxuICAgIGVuY29kaW5nID0gJ3V0ZjgnXHJcbiAgICBsZW5ndGggPSB0aGlzLmxlbmd0aFxyXG4gICAgb2Zmc2V0ID0gMFxyXG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcsIGVuY29kaW5nKVxyXG4gIH0gZWxzZSBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQgJiYgdHlwZW9mIG9mZnNldCA9PT0gJ3N0cmluZycpIHtcclxuICAgIGVuY29kaW5nID0gb2Zmc2V0XHJcbiAgICBsZW5ndGggPSB0aGlzLmxlbmd0aFxyXG4gICAgb2Zmc2V0ID0gMFxyXG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcsIG9mZnNldFssIGxlbmd0aF1bLCBlbmNvZGluZ10pXHJcbiAgfSBlbHNlIGlmIChpc0Zpbml0ZShvZmZzZXQpKSB7XHJcbiAgICBvZmZzZXQgPSBvZmZzZXQgfCAwXHJcbiAgICBpZiAoaXNGaW5pdGUobGVuZ3RoKSkge1xyXG4gICAgICBsZW5ndGggPSBsZW5ndGggfCAwXHJcbiAgICAgIGlmIChlbmNvZGluZyA9PT0gdW5kZWZpbmVkKSBlbmNvZGluZyA9ICd1dGY4J1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgZW5jb2RpbmcgPSBsZW5ndGhcclxuICAgICAgbGVuZ3RoID0gdW5kZWZpbmVkXHJcbiAgICB9XHJcbiAgLy8gbGVnYWN5IHdyaXRlKHN0cmluZywgZW5jb2RpbmcsIG9mZnNldCwgbGVuZ3RoKSAtIHJlbW92ZSBpbiB2MC4xM1xyXG4gIH0gZWxzZSB7XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoXHJcbiAgICAgICdCdWZmZXIud3JpdGUoc3RyaW5nLCBlbmNvZGluZywgb2Zmc2V0WywgbGVuZ3RoXSkgaXMgbm8gbG9uZ2VyIHN1cHBvcnRlZCdcclxuICAgIClcclxuICB9XHJcblxyXG4gIHZhciByZW1haW5pbmcgPSB0aGlzLmxlbmd0aCAtIG9mZnNldFxyXG4gIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCB8fCBsZW5ndGggPiByZW1haW5pbmcpIGxlbmd0aCA9IHJlbWFpbmluZ1xyXG5cclxuICBpZiAoKHN0cmluZy5sZW5ndGggPiAwICYmIChsZW5ndGggPCAwIHx8IG9mZnNldCA8IDApKSB8fCBvZmZzZXQgPiB0aGlzLmxlbmd0aCkge1xyXG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0F0dGVtcHQgdG8gd3JpdGUgb3V0c2lkZSBidWZmZXIgYm91bmRzJylcclxuICB9XHJcblxyXG4gIGlmICghZW5jb2RpbmcpIGVuY29kaW5nID0gJ3V0ZjgnXHJcblxyXG4gIHZhciBsb3dlcmVkQ2FzZSA9IGZhbHNlXHJcbiAgZm9yICg7Oykge1xyXG4gICAgc3dpdGNoIChlbmNvZGluZykge1xyXG4gICAgICBjYXNlICdoZXgnOlxyXG4gICAgICAgIHJldHVybiBoZXhXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxyXG5cclxuICAgICAgY2FzZSAndXRmOCc6XHJcbiAgICAgIGNhc2UgJ3V0Zi04JzpcclxuICAgICAgICByZXR1cm4gdXRmOFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXHJcblxyXG4gICAgICBjYXNlICdhc2NpaSc6XHJcbiAgICAgICAgcmV0dXJuIGFzY2lpV3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcclxuXHJcbiAgICAgIGNhc2UgJ2xhdGluMSc6XHJcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XHJcbiAgICAgICAgcmV0dXJuIGxhdGluMVdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXHJcblxyXG4gICAgICBjYXNlICdiYXNlNjQnOlxyXG4gICAgICAgIC8vIFdhcm5pbmc6IG1heExlbmd0aCBub3QgdGFrZW4gaW50byBhY2NvdW50IGluIGJhc2U2NFdyaXRlXHJcbiAgICAgICAgcmV0dXJuIGJhc2U2NFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXHJcblxyXG4gICAgICBjYXNlICd1Y3MyJzpcclxuICAgICAgY2FzZSAndWNzLTInOlxyXG4gICAgICBjYXNlICd1dGYxNmxlJzpcclxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxyXG4gICAgICAgIHJldHVybiB1Y3MyV3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcclxuXHJcbiAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXHJcbiAgICAgICAgZW5jb2RpbmcgPSAoJycgKyBlbmNvZGluZykudG9Mb3dlckNhc2UoKVxyXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuQnVmZmVyLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04gKCkge1xyXG4gIHJldHVybiB7XHJcbiAgICB0eXBlOiAnQnVmZmVyJyxcclxuICAgIGRhdGE6IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHRoaXMuX2FyciB8fCB0aGlzLCAwKVxyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gYmFzZTY0U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xyXG4gIGlmIChzdGFydCA9PT0gMCAmJiBlbmQgPT09IGJ1Zi5sZW5ndGgpIHtcclxuICAgIHJldHVybiBiYXNlNjQuZnJvbUJ5dGVBcnJheShidWYpXHJcbiAgfSBlbHNlIHtcclxuICAgIHJldHVybiBiYXNlNjQuZnJvbUJ5dGVBcnJheShidWYuc2xpY2Uoc3RhcnQsIGVuZCkpXHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiB1dGY4U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xyXG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcclxuICB2YXIgcmVzID0gW11cclxuXHJcbiAgdmFyIGkgPSBzdGFydFxyXG4gIHdoaWxlIChpIDwgZW5kKSB7XHJcbiAgICB2YXIgZmlyc3RCeXRlID0gYnVmW2ldXHJcbiAgICB2YXIgY29kZVBvaW50ID0gbnVsbFxyXG4gICAgdmFyIGJ5dGVzUGVyU2VxdWVuY2UgPSAoZmlyc3RCeXRlID4gMHhFRikgPyA0XHJcbiAgICAgIDogKGZpcnN0Qnl0ZSA+IDB4REYpID8gM1xyXG4gICAgICA6IChmaXJzdEJ5dGUgPiAweEJGKSA/IDJcclxuICAgICAgOiAxXHJcblxyXG4gICAgaWYgKGkgKyBieXRlc1BlclNlcXVlbmNlIDw9IGVuZCkge1xyXG4gICAgICB2YXIgc2Vjb25kQnl0ZSwgdGhpcmRCeXRlLCBmb3VydGhCeXRlLCB0ZW1wQ29kZVBvaW50XHJcblxyXG4gICAgICBzd2l0Y2ggKGJ5dGVzUGVyU2VxdWVuY2UpIHtcclxuICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICBpZiAoZmlyc3RCeXRlIDwgMHg4MCkge1xyXG4gICAgICAgICAgICBjb2RlUG9pbnQgPSBmaXJzdEJ5dGVcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgc2Vjb25kQnl0ZSA9IGJ1ZltpICsgMV1cclxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XHJcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHgxRikgPDwgMHg2IHwgKHNlY29uZEJ5dGUgJiAweDNGKVxyXG4gICAgICAgICAgICBpZiAodGVtcENvZGVQb2ludCA+IDB4N0YpIHtcclxuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgY2FzZSAzOlxyXG4gICAgICAgICAgc2Vjb25kQnl0ZSA9IGJ1ZltpICsgMV1cclxuICAgICAgICAgIHRoaXJkQnl0ZSA9IGJ1ZltpICsgMl1cclxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwICYmICh0aGlyZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCkge1xyXG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4RikgPDwgMHhDIHwgKHNlY29uZEJ5dGUgJiAweDNGKSA8PCAweDYgfCAodGhpcmRCeXRlICYgMHgzRilcclxuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweDdGRiAmJiAodGVtcENvZGVQb2ludCA8IDB4RDgwMCB8fCB0ZW1wQ29kZVBvaW50ID4gMHhERkZGKSkge1xyXG4gICAgICAgICAgICAgIGNvZGVQb2ludCA9IHRlbXBDb2RlUG9pbnRcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgYnJlYWtcclxuICAgICAgICBjYXNlIDQ6XHJcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxyXG4gICAgICAgICAgdGhpcmRCeXRlID0gYnVmW2kgKyAyXVxyXG4gICAgICAgICAgZm91cnRoQnl0ZSA9IGJ1ZltpICsgM11cclxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwICYmICh0aGlyZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAoZm91cnRoQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XHJcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHhGKSA8PCAweDEyIHwgKHNlY29uZEJ5dGUgJiAweDNGKSA8PCAweEMgfCAodGhpcmRCeXRlICYgMHgzRikgPDwgMHg2IHwgKGZvdXJ0aEJ5dGUgJiAweDNGKVxyXG4gICAgICAgICAgICBpZiAodGVtcENvZGVQb2ludCA+IDB4RkZGRiAmJiB0ZW1wQ29kZVBvaW50IDwgMHgxMTAwMDApIHtcclxuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGlmIChjb2RlUG9pbnQgPT09IG51bGwpIHtcclxuICAgICAgLy8gd2UgZGlkIG5vdCBnZW5lcmF0ZSBhIHZhbGlkIGNvZGVQb2ludCBzbyBpbnNlcnQgYVxyXG4gICAgICAvLyByZXBsYWNlbWVudCBjaGFyIChVK0ZGRkQpIGFuZCBhZHZhbmNlIG9ubHkgMSBieXRlXHJcbiAgICAgIGNvZGVQb2ludCA9IDB4RkZGRFxyXG4gICAgICBieXRlc1BlclNlcXVlbmNlID0gMVxyXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPiAweEZGRkYpIHtcclxuICAgICAgLy8gZW5jb2RlIHRvIHV0ZjE2IChzdXJyb2dhdGUgcGFpciBkYW5jZSlcclxuICAgICAgY29kZVBvaW50IC09IDB4MTAwMDBcclxuICAgICAgcmVzLnB1c2goY29kZVBvaW50ID4+PiAxMCAmIDB4M0ZGIHwgMHhEODAwKVxyXG4gICAgICBjb2RlUG9pbnQgPSAweERDMDAgfCBjb2RlUG9pbnQgJiAweDNGRlxyXG4gICAgfVxyXG5cclxuICAgIHJlcy5wdXNoKGNvZGVQb2ludClcclxuICAgIGkgKz0gYnl0ZXNQZXJTZXF1ZW5jZVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIGRlY29kZUNvZGVQb2ludHNBcnJheShyZXMpXHJcbn1cclxuXHJcbi8vIEJhc2VkIG9uIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzIyNzQ3MjcyLzY4MDc0MiwgdGhlIGJyb3dzZXIgd2l0aFxyXG4vLyB0aGUgbG93ZXN0IGxpbWl0IGlzIENocm9tZSwgd2l0aCAweDEwMDAwIGFyZ3MuXHJcbi8vIFdlIGdvIDEgbWFnbml0dWRlIGxlc3MsIGZvciBzYWZldHlcclxudmFyIE1BWF9BUkdVTUVOVFNfTEVOR1RIID0gMHgxMDAwXHJcblxyXG5mdW5jdGlvbiBkZWNvZGVDb2RlUG9pbnRzQXJyYXkgKGNvZGVQb2ludHMpIHtcclxuICB2YXIgbGVuID0gY29kZVBvaW50cy5sZW5ndGhcclxuICBpZiAobGVuIDw9IE1BWF9BUkdVTUVOVFNfTEVOR1RIKSB7XHJcbiAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsIGNvZGVQb2ludHMpIC8vIGF2b2lkIGV4dHJhIHNsaWNlKClcclxuICB9XHJcblxyXG4gIC8vIERlY29kZSBpbiBjaHVua3MgdG8gYXZvaWQgXCJjYWxsIHN0YWNrIHNpemUgZXhjZWVkZWRcIi5cclxuICB2YXIgcmVzID0gJydcclxuICB2YXIgaSA9IDBcclxuICB3aGlsZSAoaSA8IGxlbikge1xyXG4gICAgcmVzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoXHJcbiAgICAgIFN0cmluZyxcclxuICAgICAgY29kZVBvaW50cy5zbGljZShpLCBpICs9IE1BWF9BUkdVTUVOVFNfTEVOR1RIKVxyXG4gICAgKVxyXG4gIH1cclxuICByZXR1cm4gcmVzXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGFzY2lpU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xyXG4gIHZhciByZXQgPSAnJ1xyXG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcclxuXHJcbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcclxuICAgIHJldCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ1ZltpXSAmIDB4N0YpXHJcbiAgfVxyXG4gIHJldHVybiByZXRcclxufVxyXG5cclxuZnVuY3Rpb24gbGF0aW4xU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xyXG4gIHZhciByZXQgPSAnJ1xyXG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcclxuXHJcbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcclxuICAgIHJldCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ1ZltpXSlcclxuICB9XHJcbiAgcmV0dXJuIHJldFxyXG59XHJcblxyXG5mdW5jdGlvbiBoZXhTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XHJcbiAgdmFyIGxlbiA9IGJ1Zi5sZW5ndGhcclxuXHJcbiAgaWYgKCFzdGFydCB8fCBzdGFydCA8IDApIHN0YXJ0ID0gMFxyXG4gIGlmICghZW5kIHx8IGVuZCA8IDAgfHwgZW5kID4gbGVuKSBlbmQgPSBsZW5cclxuXHJcbiAgdmFyIG91dCA9ICcnXHJcbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcclxuICAgIG91dCArPSB0b0hleChidWZbaV0pXHJcbiAgfVxyXG4gIHJldHVybiBvdXRcclxufVxyXG5cclxuZnVuY3Rpb24gdXRmMTZsZVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcclxuICB2YXIgYnl0ZXMgPSBidWYuc2xpY2Uoc3RhcnQsIGVuZClcclxuICB2YXIgcmVzID0gJydcclxuICBmb3IgKHZhciBpID0gMDsgaSA8IGJ5dGVzLmxlbmd0aDsgaSArPSAyKSB7XHJcbiAgICByZXMgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShieXRlc1tpXSArIGJ5dGVzW2kgKyAxXSAqIDI1NilcclxuICB9XHJcbiAgcmV0dXJuIHJlc1xyXG59XHJcblxyXG5CdWZmZXIucHJvdG90eXBlLnNsaWNlID0gZnVuY3Rpb24gc2xpY2UgKHN0YXJ0LCBlbmQpIHtcclxuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcclxuICBzdGFydCA9IH5+c3RhcnRcclxuICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IH5+ZW5kXHJcblxyXG4gIGlmIChzdGFydCA8IDApIHtcclxuICAgIHN0YXJ0ICs9IGxlblxyXG4gICAgaWYgKHN0YXJ0IDwgMCkgc3RhcnQgPSAwXHJcbiAgfSBlbHNlIGlmIChzdGFydCA+IGxlbikge1xyXG4gICAgc3RhcnQgPSBsZW5cclxuICB9XHJcblxyXG4gIGlmIChlbmQgPCAwKSB7XHJcbiAgICBlbmQgKz0gbGVuXHJcbiAgICBpZiAoZW5kIDwgMCkgZW5kID0gMFxyXG4gIH0gZWxzZSBpZiAoZW5kID4gbGVuKSB7XHJcbiAgICBlbmQgPSBsZW5cclxuICB9XHJcblxyXG4gIGlmIChlbmQgPCBzdGFydCkgZW5kID0gc3RhcnRcclxuXHJcbiAgdmFyIG5ld0J1ZlxyXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xyXG4gICAgbmV3QnVmID0gdGhpcy5zdWJhcnJheShzdGFydCwgZW5kKVxyXG4gICAgbmV3QnVmLl9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcclxuICB9IGVsc2Uge1xyXG4gICAgdmFyIHNsaWNlTGVuID0gZW5kIC0gc3RhcnRcclxuICAgIG5ld0J1ZiA9IG5ldyBCdWZmZXIoc2xpY2VMZW4sIHVuZGVmaW5lZClcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2xpY2VMZW47ICsraSkge1xyXG4gICAgICBuZXdCdWZbaV0gPSB0aGlzW2kgKyBzdGFydF1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJldHVybiBuZXdCdWZcclxufVxyXG5cclxuLypcclxuICogTmVlZCB0byBtYWtlIHN1cmUgdGhhdCBidWZmZXIgaXNuJ3QgdHJ5aW5nIHRvIHdyaXRlIG91dCBvZiBib3VuZHMuXHJcbiAqL1xyXG5mdW5jdGlvbiBjaGVja09mZnNldCAob2Zmc2V0LCBleHQsIGxlbmd0aCkge1xyXG4gIGlmICgob2Zmc2V0ICUgMSkgIT09IDAgfHwgb2Zmc2V0IDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ29mZnNldCBpcyBub3QgdWludCcpXHJcbiAgaWYgKG9mZnNldCArIGV4dCA+IGxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RyeWluZyB0byBhY2Nlc3MgYmV5b25kIGJ1ZmZlciBsZW5ndGgnKVxyXG59XHJcblxyXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50TEUgPSBmdW5jdGlvbiByZWFkVUludExFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XHJcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxyXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxyXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXHJcblxyXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldF1cclxuICB2YXIgbXVsID0gMVxyXG4gIHZhciBpID0gMFxyXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XHJcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyBpXSAqIG11bFxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHZhbFxyXG59XHJcblxyXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50QkUgPSBmdW5jdGlvbiByZWFkVUludEJFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XHJcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxyXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxyXG4gIGlmICghbm9Bc3NlcnQpIHtcclxuICAgIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXHJcbiAgfVxyXG5cclxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAtLWJ5dGVMZW5ndGhdXHJcbiAgdmFyIG11bCA9IDFcclxuICB3aGlsZSAoYnl0ZUxlbmd0aCA+IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcclxuICAgIHZhbCArPSB0aGlzW29mZnNldCArIC0tYnl0ZUxlbmd0aF0gKiBtdWxcclxuICB9XHJcblxyXG4gIHJldHVybiB2YWxcclxufVxyXG5cclxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDggPSBmdW5jdGlvbiByZWFkVUludDggKG9mZnNldCwgbm9Bc3NlcnQpIHtcclxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDEsIHRoaXMubGVuZ3RoKVxyXG4gIHJldHVybiB0aGlzW29mZnNldF1cclxufVxyXG5cclxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDE2TEUgPSBmdW5jdGlvbiByZWFkVUludDE2TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcclxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxyXG4gIHJldHVybiB0aGlzW29mZnNldF0gfCAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KVxyXG59XHJcblxyXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MTZCRSA9IGZ1bmN0aW9uIHJlYWRVSW50MTZCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xyXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXHJcbiAgcmV0dXJuICh0aGlzW29mZnNldF0gPDwgOCkgfCB0aGlzW29mZnNldCArIDFdXHJcbn1cclxuXHJcbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQzMkxFID0gZnVuY3Rpb24gcmVhZFVJbnQzMkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XHJcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcclxuXHJcbiAgcmV0dXJuICgodGhpc1tvZmZzZXRdKSB8XHJcbiAgICAgICh0aGlzW29mZnNldCArIDFdIDw8IDgpIHxcclxuICAgICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgMTYpKSArXHJcbiAgICAgICh0aGlzW29mZnNldCArIDNdICogMHgxMDAwMDAwKVxyXG59XHJcblxyXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MzJCRSA9IGZ1bmN0aW9uIHJlYWRVSW50MzJCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xyXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXHJcblxyXG4gIHJldHVybiAodGhpc1tvZmZzZXRdICogMHgxMDAwMDAwKSArXHJcbiAgICAoKHRoaXNbb2Zmc2V0ICsgMV0gPDwgMTYpIHxcclxuICAgICh0aGlzW29mZnNldCArIDJdIDw8IDgpIHxcclxuICAgIHRoaXNbb2Zmc2V0ICsgM10pXHJcbn1cclxuXHJcbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludExFID0gZnVuY3Rpb24gcmVhZEludExFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XHJcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxyXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxyXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXHJcblxyXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldF1cclxuICB2YXIgbXVsID0gMVxyXG4gIHZhciBpID0gMFxyXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XHJcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyBpXSAqIG11bFxyXG4gIH1cclxuICBtdWwgKj0gMHg4MFxyXG5cclxuICBpZiAodmFsID49IG11bCkgdmFsIC09IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKVxyXG5cclxuICByZXR1cm4gdmFsXHJcbn1cclxuXHJcbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludEJFID0gZnVuY3Rpb24gcmVhZEludEJFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XHJcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxyXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxyXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXHJcblxyXG4gIHZhciBpID0gYnl0ZUxlbmd0aFxyXG4gIHZhciBtdWwgPSAxXHJcbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0ICsgLS1pXVxyXG4gIHdoaWxlIChpID4gMCAmJiAobXVsICo9IDB4MTAwKSkge1xyXG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgLS1pXSAqIG11bFxyXG4gIH1cclxuICBtdWwgKj0gMHg4MFxyXG5cclxuICBpZiAodmFsID49IG11bCkgdmFsIC09IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKVxyXG5cclxuICByZXR1cm4gdmFsXHJcbn1cclxuXHJcbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDggPSBmdW5jdGlvbiByZWFkSW50OCAob2Zmc2V0LCBub0Fzc2VydCkge1xyXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMSwgdGhpcy5sZW5ndGgpXHJcbiAgaWYgKCEodGhpc1tvZmZzZXRdICYgMHg4MCkpIHJldHVybiAodGhpc1tvZmZzZXRdKVxyXG4gIHJldHVybiAoKDB4ZmYgLSB0aGlzW29mZnNldF0gKyAxKSAqIC0xKVxyXG59XHJcblxyXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQxNkxFID0gZnVuY3Rpb24gcmVhZEludDE2TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcclxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxyXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldF0gfCAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KVxyXG4gIHJldHVybiAodmFsICYgMHg4MDAwKSA/IHZhbCB8IDB4RkZGRjAwMDAgOiB2YWxcclxufVxyXG5cclxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MTZCRSA9IGZ1bmN0aW9uIHJlYWRJbnQxNkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XHJcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcclxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAxXSB8ICh0aGlzW29mZnNldF0gPDwgOClcclxuICByZXR1cm4gKHZhbCAmIDB4ODAwMCkgPyB2YWwgfCAweEZGRkYwMDAwIDogdmFsXHJcbn1cclxuXHJcbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDMyTEUgPSBmdW5jdGlvbiByZWFkSW50MzJMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xyXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXHJcblxyXG4gIHJldHVybiAodGhpc1tvZmZzZXRdKSB8XHJcbiAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KSB8XHJcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCAxNikgfFxyXG4gICAgKHRoaXNbb2Zmc2V0ICsgM10gPDwgMjQpXHJcbn1cclxuXHJcbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDMyQkUgPSBmdW5jdGlvbiByZWFkSW50MzJCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xyXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXHJcblxyXG4gIHJldHVybiAodGhpc1tvZmZzZXRdIDw8IDI0KSB8XHJcbiAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCAxNikgfFxyXG4gICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgOCkgfFxyXG4gICAgKHRoaXNbb2Zmc2V0ICsgM10pXHJcbn1cclxuXHJcbkJ1ZmZlci5wcm90b3R5cGUucmVhZEZsb2F0TEUgPSBmdW5jdGlvbiByZWFkRmxvYXRMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xyXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXHJcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIHRydWUsIDIzLCA0KVxyXG59XHJcblxyXG5CdWZmZXIucHJvdG90eXBlLnJlYWRGbG9hdEJFID0gZnVuY3Rpb24gcmVhZEZsb2F0QkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcclxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxyXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCBmYWxzZSwgMjMsIDQpXHJcbn1cclxuXHJcbkJ1ZmZlci5wcm90b3R5cGUucmVhZERvdWJsZUxFID0gZnVuY3Rpb24gcmVhZERvdWJsZUxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XHJcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA4LCB0aGlzLmxlbmd0aClcclxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgdHJ1ZSwgNTIsIDgpXHJcbn1cclxuXHJcbkJ1ZmZlci5wcm90b3R5cGUucmVhZERvdWJsZUJFID0gZnVuY3Rpb24gcmVhZERvdWJsZUJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XHJcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA4LCB0aGlzLmxlbmd0aClcclxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgZmFsc2UsIDUyLCA4KVxyXG59XHJcblxyXG5mdW5jdGlvbiBjaGVja0ludCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBleHQsIG1heCwgbWluKSB7XHJcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYnVmKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJidWZmZXJcIiBhcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyIGluc3RhbmNlJylcclxuICBpZiAodmFsdWUgPiBtYXggfHwgdmFsdWUgPCBtaW4pIHRocm93IG5ldyBSYW5nZUVycm9yKCdcInZhbHVlXCIgYXJndW1lbnQgaXMgb3V0IG9mIGJvdW5kcycpXHJcbiAgaWYgKG9mZnNldCArIGV4dCA+IGJ1Zi5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxyXG59XHJcblxyXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludExFID0gZnVuY3Rpb24gd3JpdGVVSW50TEUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XHJcbiAgdmFsdWUgPSArdmFsdWVcclxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXHJcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXHJcbiAgaWYgKCFub0Fzc2VydCkge1xyXG4gICAgdmFyIG1heEJ5dGVzID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpIC0gMVxyXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbWF4Qnl0ZXMsIDApXHJcbiAgfVxyXG5cclxuICB2YXIgbXVsID0gMVxyXG4gIHZhciBpID0gMFxyXG4gIHRoaXNbb2Zmc2V0XSA9IHZhbHVlICYgMHhGRlxyXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XHJcbiAgICB0aGlzW29mZnNldCArIGldID0gKHZhbHVlIC8gbXVsKSAmIDB4RkZcclxuICB9XHJcblxyXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXHJcbn1cclxuXHJcbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50QkUgPSBmdW5jdGlvbiB3cml0ZVVJbnRCRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcclxuICB2YWx1ZSA9ICt2YWx1ZVxyXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcclxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcclxuICBpZiAoIW5vQXNzZXJ0KSB7XHJcbiAgICB2YXIgbWF4Qnl0ZXMgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCkgLSAxXHJcbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBtYXhCeXRlcywgMClcclxuICB9XHJcblxyXG4gIHZhciBpID0gYnl0ZUxlbmd0aCAtIDFcclxuICB2YXIgbXVsID0gMVxyXG4gIHRoaXNbb2Zmc2V0ICsgaV0gPSB2YWx1ZSAmIDB4RkZcclxuICB3aGlsZSAoLS1pID49IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcclxuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAodmFsdWUgLyBtdWwpICYgMHhGRlxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcclxufVxyXG5cclxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQ4ID0gZnVuY3Rpb24gd3JpdGVVSW50OCAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcclxuICB2YWx1ZSA9ICt2YWx1ZVxyXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcclxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAxLCAweGZmLCAwKVxyXG4gIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHZhbHVlID0gTWF0aC5mbG9vcih2YWx1ZSlcclxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxyXG4gIHJldHVybiBvZmZzZXQgKyAxXHJcbn1cclxuXHJcbmZ1bmN0aW9uIG9iamVjdFdyaXRlVUludDE2IChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbikge1xyXG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZmZmICsgdmFsdWUgKyAxXHJcbiAgZm9yICh2YXIgaSA9IDAsIGogPSBNYXRoLm1pbihidWYubGVuZ3RoIC0gb2Zmc2V0LCAyKTsgaSA8IGo7ICsraSkge1xyXG4gICAgYnVmW29mZnNldCArIGldID0gKHZhbHVlICYgKDB4ZmYgPDwgKDggKiAobGl0dGxlRW5kaWFuID8gaSA6IDEgLSBpKSkpKSA+Pj5cclxuICAgICAgKGxpdHRsZUVuZGlhbiA/IGkgOiAxIC0gaSkgKiA4XHJcbiAgfVxyXG59XHJcblxyXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDE2TEUgPSBmdW5jdGlvbiB3cml0ZVVJbnQxNkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xyXG4gIHZhbHVlID0gK3ZhbHVlXHJcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxyXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4ZmZmZiwgMClcclxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcclxuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXHJcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxyXG4gIH0gZWxzZSB7XHJcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlKVxyXG4gIH1cclxuICByZXR1cm4gb2Zmc2V0ICsgMlxyXG59XHJcblxyXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDE2QkUgPSBmdW5jdGlvbiB3cml0ZVVJbnQxNkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xyXG4gIHZhbHVlID0gK3ZhbHVlXHJcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxyXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4ZmZmZiwgMClcclxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcclxuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gOClcclxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgJiAweGZmKVxyXG4gIH0gZWxzZSB7XHJcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcclxuICB9XHJcbiAgcmV0dXJuIG9mZnNldCArIDJcclxufVxyXG5cclxuZnVuY3Rpb24gb2JqZWN0V3JpdGVVSW50MzIgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuKSB7XHJcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmZmZmZmICsgdmFsdWUgKyAxXHJcbiAgZm9yICh2YXIgaSA9IDAsIGogPSBNYXRoLm1pbihidWYubGVuZ3RoIC0gb2Zmc2V0LCA0KTsgaSA8IGo7ICsraSkge1xyXG4gICAgYnVmW29mZnNldCArIGldID0gKHZhbHVlID4+PiAobGl0dGxlRW5kaWFuID8gaSA6IDMgLSBpKSAqIDgpICYgMHhmZlxyXG4gIH1cclxufVxyXG5cclxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQzMkxFID0gZnVuY3Rpb24gd3JpdGVVSW50MzJMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcclxuICB2YWx1ZSA9ICt2YWx1ZVxyXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcclxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweGZmZmZmZmZmLCAwKVxyXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xyXG4gICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSA+Pj4gMjQpXHJcbiAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiAxNilcclxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXHJcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxyXG4gIH0gZWxzZSB7XHJcbiAgICBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlKVxyXG4gIH1cclxuICByZXR1cm4gb2Zmc2V0ICsgNFxyXG59XHJcblxyXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDMyQkUgPSBmdW5jdGlvbiB3cml0ZVVJbnQzMkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xyXG4gIHZhbHVlID0gK3ZhbHVlXHJcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxyXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4ZmZmZmZmZmYsIDApXHJcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XHJcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDI0KVxyXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gMTYpXHJcbiAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiA4KVxyXG4gICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSAmIDB4ZmYpXHJcbiAgfSBlbHNlIHtcclxuICAgIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlKVxyXG4gIH1cclxuICByZXR1cm4gb2Zmc2V0ICsgNFxyXG59XHJcblxyXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50TEUgPSBmdW5jdGlvbiB3cml0ZUludExFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xyXG4gIHZhbHVlID0gK3ZhbHVlXHJcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxyXG4gIGlmICghbm9Bc3NlcnQpIHtcclxuICAgIHZhciBsaW1pdCA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoIC0gMSlcclxuXHJcbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBsaW1pdCAtIDEsIC1saW1pdClcclxuICB9XHJcblxyXG4gIHZhciBpID0gMFxyXG4gIHZhciBtdWwgPSAxXHJcbiAgdmFyIHN1YiA9IDBcclxuICB0aGlzW29mZnNldF0gPSB2YWx1ZSAmIDB4RkZcclxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xyXG4gICAgaWYgKHZhbHVlIDwgMCAmJiBzdWIgPT09IDAgJiYgdGhpc1tvZmZzZXQgKyBpIC0gMV0gIT09IDApIHtcclxuICAgICAgc3ViID0gMVxyXG4gICAgfVxyXG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICgodmFsdWUgLyBtdWwpID4+IDApIC0gc3ViICYgMHhGRlxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcclxufVxyXG5cclxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludEJFID0gZnVuY3Rpb24gd3JpdGVJbnRCRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcclxuICB2YWx1ZSA9ICt2YWx1ZVxyXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcclxuICBpZiAoIW5vQXNzZXJ0KSB7XHJcbiAgICB2YXIgbGltaXQgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCAtIDEpXHJcblxyXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbGltaXQgLSAxLCAtbGltaXQpXHJcbiAgfVxyXG5cclxuICB2YXIgaSA9IGJ5dGVMZW5ndGggLSAxXHJcbiAgdmFyIG11bCA9IDFcclxuICB2YXIgc3ViID0gMFxyXG4gIHRoaXNbb2Zmc2V0ICsgaV0gPSB2YWx1ZSAmIDB4RkZcclxuICB3aGlsZSAoLS1pID49IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcclxuICAgIGlmICh2YWx1ZSA8IDAgJiYgc3ViID09PSAwICYmIHRoaXNbb2Zmc2V0ICsgaSArIDFdICE9PSAwKSB7XHJcbiAgICAgIHN1YiA9IDFcclxuICAgIH1cclxuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAoKHZhbHVlIC8gbXVsKSA+PiAwKSAtIHN1YiAmIDB4RkZcclxuICB9XHJcblxyXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXHJcbn1cclxuXHJcbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQ4ID0gZnVuY3Rpb24gd3JpdGVJbnQ4ICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xyXG4gIHZhbHVlID0gK3ZhbHVlXHJcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxyXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDEsIDB4N2YsIC0weDgwKVxyXG4gIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHZhbHVlID0gTWF0aC5mbG9vcih2YWx1ZSlcclxuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmYgKyB2YWx1ZSArIDFcclxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxyXG4gIHJldHVybiBvZmZzZXQgKyAxXHJcbn1cclxuXHJcbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQxNkxFID0gZnVuY3Rpb24gd3JpdGVJbnQxNkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xyXG4gIHZhbHVlID0gK3ZhbHVlXHJcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxyXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4N2ZmZiwgLTB4ODAwMClcclxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcclxuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXHJcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxyXG4gIH0gZWxzZSB7XHJcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlKVxyXG4gIH1cclxuICByZXR1cm4gb2Zmc2V0ICsgMlxyXG59XHJcblxyXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MTZCRSA9IGZ1bmN0aW9uIHdyaXRlSW50MTZCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcclxuICB2YWx1ZSA9ICt2YWx1ZVxyXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcclxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweDdmZmYsIC0weDgwMDApXHJcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XHJcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDgpXHJcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlICYgMHhmZilcclxuICB9IGVsc2Uge1xyXG4gICAgb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXHJcbiAgfVxyXG4gIHJldHVybiBvZmZzZXQgKyAyXHJcbn1cclxuXHJcbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQzMkxFID0gZnVuY3Rpb24gd3JpdGVJbnQzMkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xyXG4gIHZhbHVlID0gK3ZhbHVlXHJcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxyXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4N2ZmZmZmZmYsIC0weDgwMDAwMDAwKVxyXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xyXG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcclxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXHJcbiAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiAxNilcclxuICAgIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgPj4+IDI0KVxyXG4gIH0gZWxzZSB7XHJcbiAgICBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlKVxyXG4gIH1cclxuICByZXR1cm4gb2Zmc2V0ICsgNFxyXG59XHJcblxyXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MzJCRSA9IGZ1bmN0aW9uIHdyaXRlSW50MzJCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcclxuICB2YWx1ZSA9ICt2YWx1ZVxyXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcclxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweDdmZmZmZmZmLCAtMHg4MDAwMDAwMClcclxuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmZmZmZmZmYgKyB2YWx1ZSArIDFcclxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcclxuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gMjQpXHJcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiAxNilcclxuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDgpXHJcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlICYgMHhmZilcclxuICB9IGVsc2Uge1xyXG4gICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXHJcbiAgfVxyXG4gIHJldHVybiBvZmZzZXQgKyA0XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNoZWNrSUVFRTc1NCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBleHQsIG1heCwgbWluKSB7XHJcbiAgaWYgKG9mZnNldCArIGV4dCA+IGJ1Zi5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxyXG4gIGlmIChvZmZzZXQgPCAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJylcclxufVxyXG5cclxuZnVuY3Rpb24gd3JpdGVGbG9hdCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XHJcbiAgaWYgKCFub0Fzc2VydCkge1xyXG4gICAgY2hlY2tJRUVFNzU0KGJ1ZiwgdmFsdWUsIG9mZnNldCwgNCwgMy40MDI4MjM0NjYzODUyODg2ZSszOCwgLTMuNDAyODIzNDY2Mzg1Mjg4NmUrMzgpXHJcbiAgfVxyXG4gIGllZWU3NTQud3JpdGUoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIDIzLCA0KVxyXG4gIHJldHVybiBvZmZzZXQgKyA0XHJcbn1cclxuXHJcbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVGbG9hdExFID0gZnVuY3Rpb24gd3JpdGVGbG9hdExFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xyXG4gIHJldHVybiB3cml0ZUZsb2F0KHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KVxyXG59XHJcblxyXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRmxvYXRCRSA9IGZ1bmN0aW9uIHdyaXRlRmxvYXRCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcclxuICByZXR1cm4gd3JpdGVGbG9hdCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSwgbm9Bc3NlcnQpXHJcbn1cclxuXHJcbmZ1bmN0aW9uIHdyaXRlRG91YmxlIChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpIHtcclxuICBpZiAoIW5vQXNzZXJ0KSB7XHJcbiAgICBjaGVja0lFRUU3NTQoYnVmLCB2YWx1ZSwgb2Zmc2V0LCA4LCAxLjc5NzY5MzEzNDg2MjMxNTdFKzMwOCwgLTEuNzk3NjkzMTM0ODYyMzE1N0UrMzA4KVxyXG4gIH1cclxuICBpZWVlNzU0LndyaXRlKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCA1MiwgOClcclxuICByZXR1cm4gb2Zmc2V0ICsgOFxyXG59XHJcblxyXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRG91YmxlTEUgPSBmdW5jdGlvbiB3cml0ZURvdWJsZUxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xyXG4gIHJldHVybiB3cml0ZURvdWJsZSh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydClcclxufVxyXG5cclxuQnVmZmVyLnByb3RvdHlwZS53cml0ZURvdWJsZUJFID0gZnVuY3Rpb24gd3JpdGVEb3VibGVCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcclxuICByZXR1cm4gd3JpdGVEb3VibGUodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KVxyXG59XHJcblxyXG4vLyBjb3B5KHRhcmdldEJ1ZmZlciwgdGFyZ2V0U3RhcnQ9MCwgc291cmNlU3RhcnQ9MCwgc291cmNlRW5kPWJ1ZmZlci5sZW5ndGgpXHJcbkJ1ZmZlci5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uIGNvcHkgKHRhcmdldCwgdGFyZ2V0U3RhcnQsIHN0YXJ0LCBlbmQpIHtcclxuICBpZiAoIXN0YXJ0KSBzdGFydCA9IDBcclxuICBpZiAoIWVuZCAmJiBlbmQgIT09IDApIGVuZCA9IHRoaXMubGVuZ3RoXHJcbiAgaWYgKHRhcmdldFN0YXJ0ID49IHRhcmdldC5sZW5ndGgpIHRhcmdldFN0YXJ0ID0gdGFyZ2V0Lmxlbmd0aFxyXG4gIGlmICghdGFyZ2V0U3RhcnQpIHRhcmdldFN0YXJ0ID0gMFxyXG4gIGlmIChlbmQgPiAwICYmIGVuZCA8IHN0YXJ0KSBlbmQgPSBzdGFydFxyXG5cclxuICAvLyBDb3B5IDAgYnl0ZXM7IHdlJ3JlIGRvbmVcclxuICBpZiAoZW5kID09PSBzdGFydCkgcmV0dXJuIDBcclxuICBpZiAodGFyZ2V0Lmxlbmd0aCA9PT0gMCB8fCB0aGlzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIDBcclxuXHJcbiAgLy8gRmF0YWwgZXJyb3IgY29uZGl0aW9uc1xyXG4gIGlmICh0YXJnZXRTdGFydCA8IDApIHtcclxuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCd0YXJnZXRTdGFydCBvdXQgb2YgYm91bmRzJylcclxuICB9XHJcbiAgaWYgKHN0YXJ0IDwgMCB8fCBzdGFydCA+PSB0aGlzLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3NvdXJjZVN0YXJ0IG91dCBvZiBib3VuZHMnKVxyXG4gIGlmIChlbmQgPCAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignc291cmNlRW5kIG91dCBvZiBib3VuZHMnKVxyXG5cclxuICAvLyBBcmUgd2Ugb29iP1xyXG4gIGlmIChlbmQgPiB0aGlzLmxlbmd0aCkgZW5kID0gdGhpcy5sZW5ndGhcclxuICBpZiAodGFyZ2V0Lmxlbmd0aCAtIHRhcmdldFN0YXJ0IDwgZW5kIC0gc3RhcnQpIHtcclxuICAgIGVuZCA9IHRhcmdldC5sZW5ndGggLSB0YXJnZXRTdGFydCArIHN0YXJ0XHJcbiAgfVxyXG5cclxuICB2YXIgbGVuID0gZW5kIC0gc3RhcnRcclxuICB2YXIgaVxyXG5cclxuICBpZiAodGhpcyA9PT0gdGFyZ2V0ICYmIHN0YXJ0IDwgdGFyZ2V0U3RhcnQgJiYgdGFyZ2V0U3RhcnQgPCBlbmQpIHtcclxuICAgIC8vIGRlc2NlbmRpbmcgY29weSBmcm9tIGVuZFxyXG4gICAgZm9yIChpID0gbGVuIC0gMTsgaSA+PSAwOyAtLWkpIHtcclxuICAgICAgdGFyZ2V0W2kgKyB0YXJnZXRTdGFydF0gPSB0aGlzW2kgKyBzdGFydF1cclxuICAgIH1cclxuICB9IGVsc2UgaWYgKGxlbiA8IDEwMDAgfHwgIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XHJcbiAgICAvLyBhc2NlbmRpbmcgY29weSBmcm9tIHN0YXJ0XHJcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcclxuICAgICAgdGFyZ2V0W2kgKyB0YXJnZXRTdGFydF0gPSB0aGlzW2kgKyBzdGFydF1cclxuICAgIH1cclxuICB9IGVsc2Uge1xyXG4gICAgVWludDhBcnJheS5wcm90b3R5cGUuc2V0LmNhbGwoXHJcbiAgICAgIHRhcmdldCxcclxuICAgICAgdGhpcy5zdWJhcnJheShzdGFydCwgc3RhcnQgKyBsZW4pLFxyXG4gICAgICB0YXJnZXRTdGFydFxyXG4gICAgKVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIGxlblxyXG59XHJcblxyXG4vLyBVc2FnZTpcclxuLy8gICAgYnVmZmVyLmZpbGwobnVtYmVyWywgb2Zmc2V0WywgZW5kXV0pXHJcbi8vICAgIGJ1ZmZlci5maWxsKGJ1ZmZlclssIG9mZnNldFssIGVuZF1dKVxyXG4vLyAgICBidWZmZXIuZmlsbChzdHJpbmdbLCBvZmZzZXRbLCBlbmRdXVssIGVuY29kaW5nXSlcclxuQnVmZmVyLnByb3RvdHlwZS5maWxsID0gZnVuY3Rpb24gZmlsbCAodmFsLCBzdGFydCwgZW5kLCBlbmNvZGluZykge1xyXG4gIC8vIEhhbmRsZSBzdHJpbmcgY2FzZXM6XHJcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XHJcbiAgICBpZiAodHlwZW9mIHN0YXJ0ID09PSAnc3RyaW5nJykge1xyXG4gICAgICBlbmNvZGluZyA9IHN0YXJ0XHJcbiAgICAgIHN0YXJ0ID0gMFxyXG4gICAgICBlbmQgPSB0aGlzLmxlbmd0aFxyXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZW5kID09PSAnc3RyaW5nJykge1xyXG4gICAgICBlbmNvZGluZyA9IGVuZFxyXG4gICAgICBlbmQgPSB0aGlzLmxlbmd0aFxyXG4gICAgfVxyXG4gICAgaWYgKHZhbC5sZW5ndGggPT09IDEpIHtcclxuICAgICAgdmFyIGNvZGUgPSB2YWwuY2hhckNvZGVBdCgwKVxyXG4gICAgICBpZiAoY29kZSA8IDI1Nikge1xyXG4gICAgICAgIHZhbCA9IGNvZGVcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKGVuY29kaW5nICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIGVuY29kaW5nICE9PSAnc3RyaW5nJykge1xyXG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdlbmNvZGluZyBtdXN0IGJlIGEgc3RyaW5nJylcclxuICAgIH1cclxuICAgIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnICYmICFCdWZmZXIuaXNFbmNvZGluZyhlbmNvZGluZykpIHtcclxuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxyXG4gICAgfVxyXG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcclxuICAgIHZhbCA9IHZhbCAmIDI1NVxyXG4gIH1cclxuXHJcbiAgLy8gSW52YWxpZCByYW5nZXMgYXJlIG5vdCBzZXQgdG8gYSBkZWZhdWx0LCBzbyBjYW4gcmFuZ2UgY2hlY2sgZWFybHkuXHJcbiAgaWYgKHN0YXJ0IDwgMCB8fCB0aGlzLmxlbmd0aCA8IHN0YXJ0IHx8IHRoaXMubGVuZ3RoIDwgZW5kKSB7XHJcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignT3V0IG9mIHJhbmdlIGluZGV4JylcclxuICB9XHJcblxyXG4gIGlmIChlbmQgPD0gc3RhcnQpIHtcclxuICAgIHJldHVybiB0aGlzXHJcbiAgfVxyXG5cclxuICBzdGFydCA9IHN0YXJ0ID4+PiAwXHJcbiAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyB0aGlzLmxlbmd0aCA6IGVuZCA+Pj4gMFxyXG5cclxuICBpZiAoIXZhbCkgdmFsID0gMFxyXG5cclxuICB2YXIgaVxyXG4gIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xyXG4gICAgZm9yIChpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xyXG4gICAgICB0aGlzW2ldID0gdmFsXHJcbiAgICB9XHJcbiAgfSBlbHNlIHtcclxuICAgIHZhciBieXRlcyA9IEJ1ZmZlci5pc0J1ZmZlcih2YWwpXHJcbiAgICAgID8gdmFsXHJcbiAgICAgIDogdXRmOFRvQnl0ZXMobmV3IEJ1ZmZlcih2YWwsIGVuY29kaW5nKS50b1N0cmluZygpKVxyXG4gICAgdmFyIGxlbiA9IGJ5dGVzLmxlbmd0aFxyXG4gICAgZm9yIChpID0gMDsgaSA8IGVuZCAtIHN0YXJ0OyArK2kpIHtcclxuICAgICAgdGhpc1tpICsgc3RhcnRdID0gYnl0ZXNbaSAlIGxlbl1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJldHVybiB0aGlzXHJcbn1cclxuXHJcbi8vIEhFTFBFUiBGVU5DVElPTlNcclxuLy8gPT09PT09PT09PT09PT09PVxyXG5cclxudmFyIElOVkFMSURfQkFTRTY0X1JFID0gL1teK1xcLzAtOUEtWmEtei1fXS9nXHJcblxyXG5mdW5jdGlvbiBiYXNlNjRjbGVhbiAoc3RyKSB7XHJcbiAgLy8gTm9kZSBzdHJpcHMgb3V0IGludmFsaWQgY2hhcmFjdGVycyBsaWtlIFxcbiBhbmQgXFx0IGZyb20gdGhlIHN0cmluZywgYmFzZTY0LWpzIGRvZXMgbm90XHJcbiAgc3RyID0gc3RyaW5ndHJpbShzdHIpLnJlcGxhY2UoSU5WQUxJRF9CQVNFNjRfUkUsICcnKVxyXG4gIC8vIE5vZGUgY29udmVydHMgc3RyaW5ncyB3aXRoIGxlbmd0aCA8IDIgdG8gJydcclxuICBpZiAoc3RyLmxlbmd0aCA8IDIpIHJldHVybiAnJ1xyXG4gIC8vIE5vZGUgYWxsb3dzIGZvciBub24tcGFkZGVkIGJhc2U2NCBzdHJpbmdzIChtaXNzaW5nIHRyYWlsaW5nID09PSksIGJhc2U2NC1qcyBkb2VzIG5vdFxyXG4gIHdoaWxlIChzdHIubGVuZ3RoICUgNCAhPT0gMCkge1xyXG4gICAgc3RyID0gc3RyICsgJz0nXHJcbiAgfVxyXG4gIHJldHVybiBzdHJcclxufVxyXG5cclxuZnVuY3Rpb24gc3RyaW5ndHJpbSAoc3RyKSB7XHJcbiAgaWYgKHN0ci50cmltKSByZXR1cm4gc3RyLnRyaW0oKVxyXG4gIHJldHVybiBzdHIucmVwbGFjZSgvXlxccyt8XFxzKyQvZywgJycpXHJcbn1cclxuXHJcbmZ1bmN0aW9uIHRvSGV4IChuKSB7XHJcbiAgaWYgKG4gPCAxNikgcmV0dXJuICcwJyArIG4udG9TdHJpbmcoMTYpXHJcbiAgcmV0dXJuIG4udG9TdHJpbmcoMTYpXHJcbn1cclxuXHJcbmZ1bmN0aW9uIHV0ZjhUb0J5dGVzIChzdHJpbmcsIHVuaXRzKSB7XHJcbiAgdW5pdHMgPSB1bml0cyB8fCBJbmZpbml0eVxyXG4gIHZhciBjb2RlUG9pbnRcclxuICB2YXIgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aFxyXG4gIHZhciBsZWFkU3Vycm9nYXRlID0gbnVsbFxyXG4gIHZhciBieXRlcyA9IFtdXHJcblxyXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcclxuICAgIGNvZGVQb2ludCA9IHN0cmluZy5jaGFyQ29kZUF0KGkpXHJcblxyXG4gICAgLy8gaXMgc3Vycm9nYXRlIGNvbXBvbmVudFxyXG4gICAgaWYgKGNvZGVQb2ludCA+IDB4RDdGRiAmJiBjb2RlUG9pbnQgPCAweEUwMDApIHtcclxuICAgICAgLy8gbGFzdCBjaGFyIHdhcyBhIGxlYWRcclxuICAgICAgaWYgKCFsZWFkU3Vycm9nYXRlKSB7XHJcbiAgICAgICAgLy8gbm8gbGVhZCB5ZXRcclxuICAgICAgICBpZiAoY29kZVBvaW50ID4gMHhEQkZGKSB7XHJcbiAgICAgICAgICAvLyB1bmV4cGVjdGVkIHRyYWlsXHJcbiAgICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcclxuICAgICAgICAgIGNvbnRpbnVlXHJcbiAgICAgICAgfSBlbHNlIGlmIChpICsgMSA9PT0gbGVuZ3RoKSB7XHJcbiAgICAgICAgICAvLyB1bnBhaXJlZCBsZWFkXHJcbiAgICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcclxuICAgICAgICAgIGNvbnRpbnVlXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyB2YWxpZCBsZWFkXHJcbiAgICAgICAgbGVhZFN1cnJvZ2F0ZSA9IGNvZGVQb2ludFxyXG5cclxuICAgICAgICBjb250aW51ZVxyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyAyIGxlYWRzIGluIGEgcm93XHJcbiAgICAgIGlmIChjb2RlUG9pbnQgPCAweERDMDApIHtcclxuICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcclxuICAgICAgICBsZWFkU3Vycm9nYXRlID0gY29kZVBvaW50XHJcbiAgICAgICAgY29udGludWVcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gdmFsaWQgc3Vycm9nYXRlIHBhaXJcclxuICAgICAgY29kZVBvaW50ID0gKGxlYWRTdXJyb2dhdGUgLSAweEQ4MDAgPDwgMTAgfCBjb2RlUG9pbnQgLSAweERDMDApICsgMHgxMDAwMFxyXG4gICAgfSBlbHNlIGlmIChsZWFkU3Vycm9nYXRlKSB7XHJcbiAgICAgIC8vIHZhbGlkIGJtcCBjaGFyLCBidXQgbGFzdCBjaGFyIHdhcyBhIGxlYWRcclxuICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXHJcbiAgICB9XHJcblxyXG4gICAgbGVhZFN1cnJvZ2F0ZSA9IG51bGxcclxuXHJcbiAgICAvLyBlbmNvZGUgdXRmOFxyXG4gICAgaWYgKGNvZGVQb2ludCA8IDB4ODApIHtcclxuICAgICAgaWYgKCh1bml0cyAtPSAxKSA8IDApIGJyZWFrXHJcbiAgICAgIGJ5dGVzLnB1c2goY29kZVBvaW50KVxyXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDgwMCkge1xyXG4gICAgICBpZiAoKHVuaXRzIC09IDIpIDwgMCkgYnJlYWtcclxuICAgICAgYnl0ZXMucHVzaChcclxuICAgICAgICBjb2RlUG9pbnQgPj4gMHg2IHwgMHhDMCxcclxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxyXG4gICAgICApXHJcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA8IDB4MTAwMDApIHtcclxuICAgICAgaWYgKCh1bml0cyAtPSAzKSA8IDApIGJyZWFrXHJcbiAgICAgIGJ5dGVzLnB1c2goXHJcbiAgICAgICAgY29kZVBvaW50ID4+IDB4QyB8IDB4RTAsXHJcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiAmIDB4M0YgfCAweDgwLFxyXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXHJcbiAgICAgIClcclxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHgxMTAwMDApIHtcclxuICAgICAgaWYgKCh1bml0cyAtPSA0KSA8IDApIGJyZWFrXHJcbiAgICAgIGJ5dGVzLnB1c2goXHJcbiAgICAgICAgY29kZVBvaW50ID4+IDB4MTIgfCAweEYwLFxyXG4gICAgICAgIGNvZGVQb2ludCA+PiAweEMgJiAweDNGIHwgMHg4MCxcclxuICAgICAgICBjb2RlUG9pbnQgPj4gMHg2ICYgMHgzRiB8IDB4ODAsXHJcbiAgICAgICAgY29kZVBvaW50ICYgMHgzRiB8IDB4ODBcclxuICAgICAgKVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGNvZGUgcG9pbnQnKVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIGJ5dGVzXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGFzY2lpVG9CeXRlcyAoc3RyKSB7XHJcbiAgdmFyIGJ5dGVBcnJheSA9IFtdXHJcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyArK2kpIHtcclxuICAgIC8vIE5vZGUncyBjb2RlIHNlZW1zIHRvIGJlIGRvaW5nIHRoaXMgYW5kIG5vdCAmIDB4N0YuLlxyXG4gICAgYnl0ZUFycmF5LnB1c2goc3RyLmNoYXJDb2RlQXQoaSkgJiAweEZGKVxyXG4gIH1cclxuICByZXR1cm4gYnl0ZUFycmF5XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHV0ZjE2bGVUb0J5dGVzIChzdHIsIHVuaXRzKSB7XHJcbiAgdmFyIGMsIGhpLCBsb1xyXG4gIHZhciBieXRlQXJyYXkgPSBbXVxyXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgKytpKSB7XHJcbiAgICBpZiAoKHVuaXRzIC09IDIpIDwgMCkgYnJlYWtcclxuXHJcbiAgICBjID0gc3RyLmNoYXJDb2RlQXQoaSlcclxuICAgIGhpID0gYyA+PiA4XHJcbiAgICBsbyA9IGMgJSAyNTZcclxuICAgIGJ5dGVBcnJheS5wdXNoKGxvKVxyXG4gICAgYnl0ZUFycmF5LnB1c2goaGkpXHJcbiAgfVxyXG5cclxuICByZXR1cm4gYnl0ZUFycmF5XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGJhc2U2NFRvQnl0ZXMgKHN0cikge1xyXG4gIHJldHVybiBiYXNlNjQudG9CeXRlQXJyYXkoYmFzZTY0Y2xlYW4oc3RyKSlcclxufVxyXG5cclxuZnVuY3Rpb24gYmxpdEJ1ZmZlciAoc3JjLCBkc3QsIG9mZnNldCwgbGVuZ3RoKSB7XHJcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xyXG4gICAgaWYgKChpICsgb2Zmc2V0ID49IGRzdC5sZW5ndGgpIHx8IChpID49IHNyYy5sZW5ndGgpKSBicmVha1xyXG4gICAgZHN0W2kgKyBvZmZzZXRdID0gc3JjW2ldXHJcbiAgfVxyXG4gIHJldHVybiBpXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGlzbmFuICh2YWwpIHtcclxuICByZXR1cm4gdmFsICE9PSB2YWwgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zZWxmLWNvbXBhcmVcclxufVxyXG4iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cclxuLy9cclxuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcclxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxyXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcclxuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxyXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XHJcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxyXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcclxuLy9cclxuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcclxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXHJcbi8vXHJcbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1NcclxuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxyXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXHJcbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxyXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1JcclxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxyXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxyXG5cclxuLy8gTk9URTogVGhlc2UgdHlwZSBjaGVja2luZyBmdW5jdGlvbnMgaW50ZW50aW9uYWxseSBkb24ndCB1c2UgYGluc3RhbmNlb2ZgXHJcbi8vIGJlY2F1c2UgaXQgaXMgZnJhZ2lsZSBhbmQgY2FuIGJlIGVhc2lseSBmYWtlZCB3aXRoIGBPYmplY3QuY3JlYXRlKClgLlxyXG5cclxuZnVuY3Rpb24gaXNBcnJheShhcmcpIHtcclxuICBpZiAoQXJyYXkuaXNBcnJheSkge1xyXG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkoYXJnKTtcclxuICB9XHJcbiAgcmV0dXJuIG9iamVjdFRvU3RyaW5nKGFyZykgPT09ICdbb2JqZWN0IEFycmF5XSc7XHJcbn1cclxuZXhwb3J0cy5pc0FycmF5ID0gaXNBcnJheTtcclxuXHJcbmZ1bmN0aW9uIGlzQm9vbGVhbihhcmcpIHtcclxuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ2Jvb2xlYW4nO1xyXG59XHJcbmV4cG9ydHMuaXNCb29sZWFuID0gaXNCb29sZWFuO1xyXG5cclxuZnVuY3Rpb24gaXNOdWxsKGFyZykge1xyXG4gIHJldHVybiBhcmcgPT09IG51bGw7XHJcbn1cclxuZXhwb3J0cy5pc051bGwgPSBpc051bGw7XHJcblxyXG5mdW5jdGlvbiBpc051bGxPclVuZGVmaW5lZChhcmcpIHtcclxuICByZXR1cm4gYXJnID09IG51bGw7XHJcbn1cclxuZXhwb3J0cy5pc051bGxPclVuZGVmaW5lZCA9IGlzTnVsbE9yVW5kZWZpbmVkO1xyXG5cclxuZnVuY3Rpb24gaXNOdW1iZXIoYXJnKSB7XHJcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdudW1iZXInO1xyXG59XHJcbmV4cG9ydHMuaXNOdW1iZXIgPSBpc051bWJlcjtcclxuXHJcbmZ1bmN0aW9uIGlzU3RyaW5nKGFyZykge1xyXG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnc3RyaW5nJztcclxufVxyXG5leHBvcnRzLmlzU3RyaW5nID0gaXNTdHJpbmc7XHJcblxyXG5mdW5jdGlvbiBpc1N5bWJvbChhcmcpIHtcclxuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ3N5bWJvbCc7XHJcbn1cclxuZXhwb3J0cy5pc1N5bWJvbCA9IGlzU3ltYm9sO1xyXG5cclxuZnVuY3Rpb24gaXNVbmRlZmluZWQoYXJnKSB7XHJcbiAgcmV0dXJuIGFyZyA9PT0gdm9pZCAwO1xyXG59XHJcbmV4cG9ydHMuaXNVbmRlZmluZWQgPSBpc1VuZGVmaW5lZDtcclxuXHJcbmZ1bmN0aW9uIGlzUmVnRXhwKHJlKSB7XHJcbiAgcmV0dXJuIG9iamVjdFRvU3RyaW5nKHJlKSA9PT0gJ1tvYmplY3QgUmVnRXhwXSc7XHJcbn1cclxuZXhwb3J0cy5pc1JlZ0V4cCA9IGlzUmVnRXhwO1xyXG5cclxuZnVuY3Rpb24gaXNPYmplY3QoYXJnKSB7XHJcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdvYmplY3QnICYmIGFyZyAhPT0gbnVsbDtcclxufVxyXG5leHBvcnRzLmlzT2JqZWN0ID0gaXNPYmplY3Q7XHJcblxyXG5mdW5jdGlvbiBpc0RhdGUoZCkge1xyXG4gIHJldHVybiBvYmplY3RUb1N0cmluZyhkKSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xyXG59XHJcbmV4cG9ydHMuaXNEYXRlID0gaXNEYXRlO1xyXG5cclxuZnVuY3Rpb24gaXNFcnJvcihlKSB7XHJcbiAgcmV0dXJuIChvYmplY3RUb1N0cmluZyhlKSA9PT0gJ1tvYmplY3QgRXJyb3JdJyB8fCBlIGluc3RhbmNlb2YgRXJyb3IpO1xyXG59XHJcbmV4cG9ydHMuaXNFcnJvciA9IGlzRXJyb3I7XHJcblxyXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKGFyZykge1xyXG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnZnVuY3Rpb24nO1xyXG59XHJcbmV4cG9ydHMuaXNGdW5jdGlvbiA9IGlzRnVuY3Rpb247XHJcblxyXG5mdW5jdGlvbiBpc1ByaW1pdGl2ZShhcmcpIHtcclxuICByZXR1cm4gYXJnID09PSBudWxsIHx8XHJcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdib29sZWFuJyB8fFxyXG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnbnVtYmVyJyB8fFxyXG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnc3RyaW5nJyB8fFxyXG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnc3ltYm9sJyB8fCAgLy8gRVM2IHN5bWJvbFxyXG4gICAgICAgICB0eXBlb2YgYXJnID09PSAndW5kZWZpbmVkJztcclxufVxyXG5leHBvcnRzLmlzUHJpbWl0aXZlID0gaXNQcmltaXRpdmU7XHJcblxyXG5leHBvcnRzLmlzQnVmZmVyID0gQnVmZmVyLmlzQnVmZmVyO1xyXG5cclxuZnVuY3Rpb24gb2JqZWN0VG9TdHJpbmcobykge1xyXG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobyk7XHJcbn1cclxuIiwiJ3VzZSBzdHJpY3QnO1xyXG5cclxuaWYgKHR5cGVvZiBwcm9jZXNzID09PSAndW5kZWZpbmVkJyB8fFxyXG4gICAgIXByb2Nlc3MudmVyc2lvbiB8fFxyXG4gICAgcHJvY2Vzcy52ZXJzaW9uLmluZGV4T2YoJ3YwLicpID09PSAwIHx8XHJcbiAgICBwcm9jZXNzLnZlcnNpb24uaW5kZXhPZigndjEuJykgPT09IDAgJiYgcHJvY2Vzcy52ZXJzaW9uLmluZGV4T2YoJ3YxLjguJykgIT09IDApIHtcclxuICBtb2R1bGUuZXhwb3J0cyA9IHsgbmV4dFRpY2s6IG5leHRUaWNrIH07XHJcbn0gZWxzZSB7XHJcbiAgbW9kdWxlLmV4cG9ydHMgPSBwcm9jZXNzXHJcbn1cclxuXHJcbmZ1bmN0aW9uIG5leHRUaWNrKGZuLCBhcmcxLCBhcmcyLCBhcmczKSB7XHJcbiAgaWYgKHR5cGVvZiBmbiAhPT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJjYWxsYmFja1wiIGFyZ3VtZW50IG11c3QgYmUgYSBmdW5jdGlvbicpO1xyXG4gIH1cclxuICB2YXIgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcclxuICB2YXIgYXJncywgaTtcclxuICBzd2l0Y2ggKGxlbikge1xyXG4gIGNhc2UgMDpcclxuICBjYXNlIDE6XHJcbiAgICByZXR1cm4gcHJvY2Vzcy5uZXh0VGljayhmbik7XHJcbiAgY2FzZSAyOlxyXG4gICAgcmV0dXJuIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24gYWZ0ZXJUaWNrT25lKCkge1xyXG4gICAgICBmbi5jYWxsKG51bGwsIGFyZzEpO1xyXG4gICAgfSk7XHJcbiAgY2FzZSAzOlxyXG4gICAgcmV0dXJuIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24gYWZ0ZXJUaWNrVHdvKCkge1xyXG4gICAgICBmbi5jYWxsKG51bGwsIGFyZzEsIGFyZzIpO1xyXG4gICAgfSk7XHJcbiAgY2FzZSA0OlxyXG4gICAgcmV0dXJuIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24gYWZ0ZXJUaWNrVGhyZWUoKSB7XHJcbiAgICAgIGZuLmNhbGwobnVsbCwgYXJnMSwgYXJnMiwgYXJnMyk7XHJcbiAgICB9KTtcclxuICBkZWZhdWx0OlxyXG4gICAgYXJncyA9IG5ldyBBcnJheShsZW4gLSAxKTtcclxuICAgIGkgPSAwO1xyXG4gICAgd2hpbGUgKGkgPCBhcmdzLmxlbmd0aCkge1xyXG4gICAgICBhcmdzW2krK10gPSBhcmd1bWVudHNbaV07XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbiBhZnRlclRpY2soKSB7XHJcbiAgICAgIGZuLmFwcGx5KG51bGwsIGFyZ3MpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcblxyXG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBub2RlL25vLWRlcHJlY2F0ZWQtYXBpICovXHJcbnZhciBidWZmZXIgPSByZXF1aXJlKCdidWZmZXInKVxyXG52YXIgQnVmZmVyID0gYnVmZmVyLkJ1ZmZlclxyXG5cclxuLy8gYWx0ZXJuYXRpdmUgdG8gdXNpbmcgT2JqZWN0LmtleXMgZm9yIG9sZCBicm93c2Vyc1xyXG5mdW5jdGlvbiBjb3B5UHJvcHMgKHNyYywgZHN0KSB7XHJcbiAgZm9yICh2YXIga2V5IGluIHNyYykge1xyXG4gICAgZHN0W2tleV0gPSBzcmNba2V5XVxyXG4gIH1cclxufVxyXG5pZiAoQnVmZmVyLmZyb20gJiYgQnVmZmVyLmFsbG9jICYmIEJ1ZmZlci5hbGxvY1Vuc2FmZSAmJiBCdWZmZXIuYWxsb2NVbnNhZmVTbG93KSB7XHJcbiAgbW9kdWxlLmV4cG9ydHMgPSBidWZmZXJcclxufSBlbHNlIHtcclxuICAvLyBDb3B5IHByb3BlcnRpZXMgZnJvbSByZXF1aXJlKCdidWZmZXInKVxyXG4gIGNvcHlQcm9wcyhidWZmZXIsIGV4cG9ydHMpXHJcbiAgZXhwb3J0cy5CdWZmZXIgPSBTYWZlQnVmZmVyXHJcbn1cclxuXHJcbmZ1bmN0aW9uIFNhZmVCdWZmZXIgKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XHJcbiAgcmV0dXJuIEJ1ZmZlcihhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcclxufVxyXG5cclxuLy8gQ29weSBzdGF0aWMgbWV0aG9kcyBmcm9tIEJ1ZmZlclxyXG5jb3B5UHJvcHMoQnVmZmVyLCBTYWZlQnVmZmVyKVxyXG5cclxuU2FmZUJ1ZmZlci5mcm9tID0gZnVuY3Rpb24gKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XHJcbiAgaWYgKHR5cGVvZiBhcmcgPT09ICdudW1iZXInKSB7XHJcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IG5vdCBiZSBhIG51bWJlcicpXHJcbiAgfVxyXG4gIHJldHVybiBCdWZmZXIoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXHJcbn1cclxuXHJcblNhZmVCdWZmZXIuYWxsb2MgPSBmdW5jdGlvbiAoc2l6ZSwgZmlsbCwgZW5jb2RpbmcpIHtcclxuICBpZiAodHlwZW9mIHNpemUgIT09ICdudW1iZXInKSB7XHJcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgbnVtYmVyJylcclxuICB9XHJcbiAgdmFyIGJ1ZiA9IEJ1ZmZlcihzaXplKVxyXG4gIGlmIChmaWxsICE9PSB1bmRlZmluZWQpIHtcclxuICAgIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgIGJ1Zi5maWxsKGZpbGwsIGVuY29kaW5nKVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgYnVmLmZpbGwoZmlsbClcclxuICAgIH1cclxuICB9IGVsc2Uge1xyXG4gICAgYnVmLmZpbGwoMClcclxuICB9XHJcbiAgcmV0dXJuIGJ1ZlxyXG59XHJcblxyXG5TYWZlQnVmZmVyLmFsbG9jVW5zYWZlID0gZnVuY3Rpb24gKHNpemUpIHtcclxuICBpZiAodHlwZW9mIHNpemUgIT09ICdudW1iZXInKSB7XHJcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgbnVtYmVyJylcclxuICB9XHJcbiAgcmV0dXJuIEJ1ZmZlcihzaXplKVxyXG59XHJcblxyXG5TYWZlQnVmZmVyLmFsbG9jVW5zYWZlU2xvdyA9IGZ1bmN0aW9uIChzaXplKSB7XHJcbiAgaWYgKHR5cGVvZiBzaXplICE9PSAnbnVtYmVyJykge1xyXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIG51bWJlcicpXHJcbiAgfVxyXG4gIHJldHVybiBidWZmZXIuU2xvd0J1ZmZlcihzaXplKVxyXG59XHJcbiIsIid1c2Ugc3RyaWN0JztcclxuXHJcblxyXG52YXIgVFlQRURfT0sgPSAgKHR5cGVvZiBVaW50OEFycmF5ICE9PSAndW5kZWZpbmVkJykgJiZcclxuICAgICAgICAgICAgICAgICh0eXBlb2YgVWludDE2QXJyYXkgIT09ICd1bmRlZmluZWQnKSAmJlxyXG4gICAgICAgICAgICAgICAgKHR5cGVvZiBJbnQzMkFycmF5ICE9PSAndW5kZWZpbmVkJyk7XHJcblxyXG5mdW5jdGlvbiBfaGFzKG9iaiwga2V5KSB7XHJcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSk7XHJcbn1cclxuXHJcbmV4cG9ydHMuYXNzaWduID0gZnVuY3Rpb24gKG9iaiAvKmZyb20xLCBmcm9tMiwgZnJvbTMsIC4uLiovKSB7XHJcbiAgdmFyIHNvdXJjZXMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xyXG4gIHdoaWxlIChzb3VyY2VzLmxlbmd0aCkge1xyXG4gICAgdmFyIHNvdXJjZSA9IHNvdXJjZXMuc2hpZnQoKTtcclxuICAgIGlmICghc291cmNlKSB7IGNvbnRpbnVlOyB9XHJcblxyXG4gICAgaWYgKHR5cGVvZiBzb3VyY2UgIT09ICdvYmplY3QnKSB7XHJcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3Ioc291cmNlICsgJ211c3QgYmUgbm9uLW9iamVjdCcpO1xyXG4gICAgfVxyXG5cclxuICAgIGZvciAodmFyIHAgaW4gc291cmNlKSB7XHJcbiAgICAgIGlmIChfaGFzKHNvdXJjZSwgcCkpIHtcclxuICAgICAgICBvYmpbcF0gPSBzb3VyY2VbcF07XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJldHVybiBvYmo7XHJcbn07XHJcblxyXG5cclxuLy8gcmVkdWNlIGJ1ZmZlciBzaXplLCBhdm9pZGluZyBtZW0gY29weVxyXG5leHBvcnRzLnNocmlua0J1ZiA9IGZ1bmN0aW9uIChidWYsIHNpemUpIHtcclxuICBpZiAoYnVmLmxlbmd0aCA9PT0gc2l6ZSkgeyByZXR1cm4gYnVmOyB9XHJcbiAgaWYgKGJ1Zi5zdWJhcnJheSkgeyByZXR1cm4gYnVmLnN1YmFycmF5KDAsIHNpemUpOyB9XHJcbiAgYnVmLmxlbmd0aCA9IHNpemU7XHJcbiAgcmV0dXJuIGJ1ZjtcclxufTtcclxuXHJcblxyXG52YXIgZm5UeXBlZCA9IHtcclxuICBhcnJheVNldDogZnVuY3Rpb24gKGRlc3QsIHNyYywgc3JjX29mZnMsIGxlbiwgZGVzdF9vZmZzKSB7XHJcbiAgICBpZiAoc3JjLnN1YmFycmF5ICYmIGRlc3Quc3ViYXJyYXkpIHtcclxuICAgICAgZGVzdC5zZXQoc3JjLnN1YmFycmF5KHNyY19vZmZzLCBzcmNfb2ZmcyArIGxlbiksIGRlc3Rfb2Zmcyk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIC8vIEZhbGxiYWNrIHRvIG9yZGluYXJ5IGFycmF5XHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgIGRlc3RbZGVzdF9vZmZzICsgaV0gPSBzcmNbc3JjX29mZnMgKyBpXTtcclxuICAgIH1cclxuICB9LFxyXG4gIC8vIEpvaW4gYXJyYXkgb2YgY2h1bmtzIHRvIHNpbmdsZSBhcnJheS5cclxuICBmbGF0dGVuQ2h1bmtzOiBmdW5jdGlvbiAoY2h1bmtzKSB7XHJcbiAgICB2YXIgaSwgbCwgbGVuLCBwb3MsIGNodW5rLCByZXN1bHQ7XHJcblxyXG4gICAgLy8gY2FsY3VsYXRlIGRhdGEgbGVuZ3RoXHJcbiAgICBsZW4gPSAwO1xyXG4gICAgZm9yIChpID0gMCwgbCA9IGNodW5rcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcclxuICAgICAgbGVuICs9IGNodW5rc1tpXS5sZW5ndGg7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gam9pbiBjaHVua3NcclxuICAgIHJlc3VsdCA9IG5ldyBVaW50OEFycmF5KGxlbik7XHJcbiAgICBwb3MgPSAwO1xyXG4gICAgZm9yIChpID0gMCwgbCA9IGNodW5rcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcclxuICAgICAgY2h1bmsgPSBjaHVua3NbaV07XHJcbiAgICAgIHJlc3VsdC5zZXQoY2h1bmssIHBvcyk7XHJcbiAgICAgIHBvcyArPSBjaHVuay5sZW5ndGg7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcbn07XHJcblxyXG52YXIgZm5VbnR5cGVkID0ge1xyXG4gIGFycmF5U2V0OiBmdW5jdGlvbiAoZGVzdCwgc3JjLCBzcmNfb2ZmcywgbGVuLCBkZXN0X29mZnMpIHtcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgZGVzdFtkZXN0X29mZnMgKyBpXSA9IHNyY1tzcmNfb2ZmcyArIGldO1xyXG4gICAgfVxyXG4gIH0sXHJcbiAgLy8gSm9pbiBhcnJheSBvZiBjaHVua3MgdG8gc2luZ2xlIGFycmF5LlxyXG4gIGZsYXR0ZW5DaHVua3M6IGZ1bmN0aW9uIChjaHVua3MpIHtcclxuICAgIHJldHVybiBbXS5jb25jYXQuYXBwbHkoW10sIGNodW5rcyk7XHJcbiAgfVxyXG59O1xyXG5cclxuXHJcbi8vIEVuYWJsZS9EaXNhYmxlIHR5cGVkIGFycmF5cyB1c2UsIGZvciB0ZXN0aW5nXHJcbi8vXHJcbmV4cG9ydHMuc2V0VHlwZWQgPSBmdW5jdGlvbiAob24pIHtcclxuICBpZiAob24pIHtcclxuICAgIGV4cG9ydHMuQnVmOCAgPSBVaW50OEFycmF5O1xyXG4gICAgZXhwb3J0cy5CdWYxNiA9IFVpbnQxNkFycmF5O1xyXG4gICAgZXhwb3J0cy5CdWYzMiA9IEludDMyQXJyYXk7XHJcbiAgICBleHBvcnRzLmFzc2lnbihleHBvcnRzLCBmblR5cGVkKTtcclxuICB9IGVsc2Uge1xyXG4gICAgZXhwb3J0cy5CdWY4ICA9IEFycmF5O1xyXG4gICAgZXhwb3J0cy5CdWYxNiA9IEFycmF5O1xyXG4gICAgZXhwb3J0cy5CdWYzMiA9IEFycmF5O1xyXG4gICAgZXhwb3J0cy5hc3NpZ24oZXhwb3J0cywgZm5VbnR5cGVkKTtcclxuICB9XHJcbn07XHJcblxyXG5leHBvcnRzLnNldFR5cGVkKFRZUEVEX09LKTtcclxuIiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXHJcbi8vXHJcbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXHJcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcclxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXHJcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcclxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxyXG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcclxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XHJcbi8vXHJcbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXHJcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxyXG4vL1xyXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXHJcbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0ZcclxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxyXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcclxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXHJcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcclxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cclxuXHJcbid1c2Ugc3RyaWN0JztcclxuXHJcbnZhciBSID0gdHlwZW9mIFJlZmxlY3QgPT09ICdvYmplY3QnID8gUmVmbGVjdCA6IG51bGxcclxudmFyIFJlZmxlY3RBcHBseSA9IFIgJiYgdHlwZW9mIFIuYXBwbHkgPT09ICdmdW5jdGlvbidcclxuICA/IFIuYXBwbHlcclxuICA6IGZ1bmN0aW9uIFJlZmxlY3RBcHBseSh0YXJnZXQsIHJlY2VpdmVyLCBhcmdzKSB7XHJcbiAgICByZXR1cm4gRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5LmNhbGwodGFyZ2V0LCByZWNlaXZlciwgYXJncyk7XHJcbiAgfVxyXG5cclxudmFyIFJlZmxlY3RPd25LZXlzXHJcbmlmIChSICYmIHR5cGVvZiBSLm93bktleXMgPT09ICdmdW5jdGlvbicpIHtcclxuICBSZWZsZWN0T3duS2V5cyA9IFIub3duS2V5c1xyXG59IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcclxuICBSZWZsZWN0T3duS2V5cyA9IGZ1bmN0aW9uIFJlZmxlY3RPd25LZXlzKHRhcmdldCkge1xyXG4gICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRhcmdldClcclxuICAgICAgLmNvbmNhdChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHRhcmdldCkpO1xyXG4gIH07XHJcbn0gZWxzZSB7XHJcbiAgUmVmbGVjdE93bktleXMgPSBmdW5jdGlvbiBSZWZsZWN0T3duS2V5cyh0YXJnZXQpIHtcclxuICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0YXJnZXQpO1xyXG4gIH07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIFByb2Nlc3NFbWl0V2FybmluZyh3YXJuaW5nKSB7XHJcbiAgaWYgKGNvbnNvbGUgJiYgY29uc29sZS53YXJuKSBjb25zb2xlLndhcm4od2FybmluZyk7XHJcbn1cclxuXHJcbnZhciBOdW1iZXJJc05hTiA9IE51bWJlci5pc05hTiB8fCBmdW5jdGlvbiBOdW1iZXJJc05hTih2YWx1ZSkge1xyXG4gIHJldHVybiB2YWx1ZSAhPT0gdmFsdWU7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIEV2ZW50RW1pdHRlcigpIHtcclxuICBFdmVudEVtaXR0ZXIuaW5pdC5jYWxsKHRoaXMpO1xyXG59XHJcbm1vZHVsZS5leHBvcnRzID0gRXZlbnRFbWl0dGVyO1xyXG5cclxuLy8gQmFja3dhcmRzLWNvbXBhdCB3aXRoIG5vZGUgMC4xMC54XHJcbkV2ZW50RW1pdHRlci5FdmVudEVtaXR0ZXIgPSBFdmVudEVtaXR0ZXI7XHJcblxyXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLl9ldmVudHMgPSB1bmRlZmluZWQ7XHJcbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuX2V2ZW50c0NvdW50ID0gMDtcclxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fbWF4TGlzdGVuZXJzID0gdW5kZWZpbmVkO1xyXG5cclxuLy8gQnkgZGVmYXVsdCBFdmVudEVtaXR0ZXJzIHdpbGwgcHJpbnQgYSB3YXJuaW5nIGlmIG1vcmUgdGhhbiAxMCBsaXN0ZW5lcnMgYXJlXHJcbi8vIGFkZGVkIHRvIGl0LiBUaGlzIGlzIGEgdXNlZnVsIGRlZmF1bHQgd2hpY2ggaGVscHMgZmluZGluZyBtZW1vcnkgbGVha3MuXHJcbnZhciBkZWZhdWx0TWF4TGlzdGVuZXJzID0gMTA7XHJcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoRXZlbnRFbWl0dGVyLCAnZGVmYXVsdE1heExpc3RlbmVycycsIHtcclxuICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gIGdldDogZnVuY3Rpb24oKSB7XHJcbiAgICByZXR1cm4gZGVmYXVsdE1heExpc3RlbmVycztcclxuICB9LFxyXG4gIHNldDogZnVuY3Rpb24oYXJnKSB7XHJcbiAgICBpZiAodHlwZW9mIGFyZyAhPT0gJ251bWJlcicgfHwgYXJnIDwgMCB8fCBOdW1iZXJJc05hTihhcmcpKSB7XHJcbiAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdUaGUgdmFsdWUgb2YgXCJkZWZhdWx0TWF4TGlzdGVuZXJzXCIgaXMgb3V0IG9mIHJhbmdlLiBJdCBtdXN0IGJlIGEgbm9uLW5lZ2F0aXZlIG51bWJlci4gUmVjZWl2ZWQgJyArIGFyZyArICcuJyk7XHJcbiAgICB9XHJcbiAgICBkZWZhdWx0TWF4TGlzdGVuZXJzID0gYXJnO1xyXG4gIH1cclxufSk7XHJcblxyXG5FdmVudEVtaXR0ZXIuaW5pdCA9IGZ1bmN0aW9uKCkge1xyXG5cclxuICBpZiAodGhpcy5fZXZlbnRzID09PSB1bmRlZmluZWQgfHxcclxuICAgICAgdGhpcy5fZXZlbnRzID09PSBPYmplY3QuZ2V0UHJvdG90eXBlT2YodGhpcykuX2V2ZW50cykge1xyXG4gICAgdGhpcy5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcclxuICAgIHRoaXMuX2V2ZW50c0NvdW50ID0gMDtcclxuICB9XHJcblxyXG4gIHRoaXMuX21heExpc3RlbmVycyA9IHRoaXMuX21heExpc3RlbmVycyB8fCB1bmRlZmluZWQ7XHJcbn07XHJcblxyXG4vLyBPYnZpb3VzbHkgbm90IGFsbCBFbWl0dGVycyBzaG91bGQgYmUgbGltaXRlZCB0byAxMC4gVGhpcyBmdW5jdGlvbiBhbGxvd3NcclxuLy8gdGhhdCB0byBiZSBpbmNyZWFzZWQuIFNldCB0byB6ZXJvIGZvciB1bmxpbWl0ZWQuXHJcbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuc2V0TWF4TGlzdGVuZXJzID0gZnVuY3Rpb24gc2V0TWF4TGlzdGVuZXJzKG4pIHtcclxuICBpZiAodHlwZW9mIG4gIT09ICdudW1iZXInIHx8IG4gPCAwIHx8IE51bWJlcklzTmFOKG4pKSB7XHJcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVGhlIHZhbHVlIG9mIFwiblwiIGlzIG91dCBvZiByYW5nZS4gSXQgbXVzdCBiZSBhIG5vbi1uZWdhdGl2ZSBudW1iZXIuIFJlY2VpdmVkICcgKyBuICsgJy4nKTtcclxuICB9XHJcbiAgdGhpcy5fbWF4TGlzdGVuZXJzID0gbjtcclxuICByZXR1cm4gdGhpcztcclxufTtcclxuXHJcbmZ1bmN0aW9uICRnZXRNYXhMaXN0ZW5lcnModGhhdCkge1xyXG4gIGlmICh0aGF0Ll9tYXhMaXN0ZW5lcnMgPT09IHVuZGVmaW5lZClcclxuICAgIHJldHVybiBFdmVudEVtaXR0ZXIuZGVmYXVsdE1heExpc3RlbmVycztcclxuICByZXR1cm4gdGhhdC5fbWF4TGlzdGVuZXJzO1xyXG59XHJcblxyXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmdldE1heExpc3RlbmVycyA9IGZ1bmN0aW9uIGdldE1heExpc3RlbmVycygpIHtcclxuICByZXR1cm4gJGdldE1heExpc3RlbmVycyh0aGlzKTtcclxufTtcclxuXHJcbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZW1pdCA9IGZ1bmN0aW9uIGVtaXQodHlwZSkge1xyXG4gIHZhciBhcmdzID0gW107XHJcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIGFyZ3MucHVzaChhcmd1bWVudHNbaV0pO1xyXG4gIHZhciBkb0Vycm9yID0gKHR5cGUgPT09ICdlcnJvcicpO1xyXG5cclxuICB2YXIgZXZlbnRzID0gdGhpcy5fZXZlbnRzO1xyXG4gIGlmIChldmVudHMgIT09IHVuZGVmaW5lZClcclxuICAgIGRvRXJyb3IgPSAoZG9FcnJvciAmJiBldmVudHMuZXJyb3IgPT09IHVuZGVmaW5lZCk7XHJcbiAgZWxzZSBpZiAoIWRvRXJyb3IpXHJcbiAgICByZXR1cm4gZmFsc2U7XHJcblxyXG4gIC8vIElmIHRoZXJlIGlzIG5vICdlcnJvcicgZXZlbnQgbGlzdGVuZXIgdGhlbiB0aHJvdy5cclxuICBpZiAoZG9FcnJvcikge1xyXG4gICAgdmFyIGVyO1xyXG4gICAgaWYgKGFyZ3MubGVuZ3RoID4gMClcclxuICAgICAgZXIgPSBhcmdzWzBdO1xyXG4gICAgaWYgKGVyIGluc3RhbmNlb2YgRXJyb3IpIHtcclxuICAgICAgLy8gTm90ZTogVGhlIGNvbW1lbnRzIG9uIHRoZSBgdGhyb3dgIGxpbmVzIGFyZSBpbnRlbnRpb25hbCwgdGhleSBzaG93XHJcbiAgICAgIC8vIHVwIGluIE5vZGUncyBvdXRwdXQgaWYgdGhpcyByZXN1bHRzIGluIGFuIHVuaGFuZGxlZCBleGNlcHRpb24uXHJcbiAgICAgIHRocm93IGVyOyAvLyBVbmhhbmRsZWQgJ2Vycm9yJyBldmVudFxyXG4gICAgfVxyXG4gICAgLy8gQXQgbGVhc3QgZ2l2ZSBzb21lIGtpbmQgb2YgY29udGV4dCB0byB0aGUgdXNlclxyXG4gICAgdmFyIGVyciA9IG5ldyBFcnJvcignVW5oYW5kbGVkIGVycm9yLicgKyAoZXIgPyAnICgnICsgZXIubWVzc2FnZSArICcpJyA6ICcnKSk7XHJcbiAgICBlcnIuY29udGV4dCA9IGVyO1xyXG4gICAgdGhyb3cgZXJyOyAvLyBVbmhhbmRsZWQgJ2Vycm9yJyBldmVudFxyXG4gIH1cclxuXHJcbiAgdmFyIGhhbmRsZXIgPSBldmVudHNbdHlwZV07XHJcblxyXG4gIGlmIChoYW5kbGVyID09PSB1bmRlZmluZWQpXHJcbiAgICByZXR1cm4gZmFsc2U7XHJcblxyXG4gIGlmICh0eXBlb2YgaGFuZGxlciA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgUmVmbGVjdEFwcGx5KGhhbmRsZXIsIHRoaXMsIGFyZ3MpO1xyXG4gIH0gZWxzZSB7XHJcbiAgICB2YXIgbGVuID0gaGFuZGxlci5sZW5ndGg7XHJcbiAgICB2YXIgbGlzdGVuZXJzID0gYXJyYXlDbG9uZShoYW5kbGVyLCBsZW4pO1xyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSlcclxuICAgICAgUmVmbGVjdEFwcGx5KGxpc3RlbmVyc1tpXSwgdGhpcywgYXJncyk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gdHJ1ZTtcclxufTtcclxuXHJcbmZ1bmN0aW9uIF9hZGRMaXN0ZW5lcih0YXJnZXQsIHR5cGUsIGxpc3RlbmVyLCBwcmVwZW5kKSB7XHJcbiAgdmFyIG07XHJcbiAgdmFyIGV2ZW50cztcclxuICB2YXIgZXhpc3Rpbmc7XHJcblxyXG4gIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09ICdmdW5jdGlvbicpIHtcclxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBcImxpc3RlbmVyXCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIEZ1bmN0aW9uLiBSZWNlaXZlZCB0eXBlICcgKyB0eXBlb2YgbGlzdGVuZXIpO1xyXG4gIH1cclxuXHJcbiAgZXZlbnRzID0gdGFyZ2V0Ll9ldmVudHM7XHJcbiAgaWYgKGV2ZW50cyA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICBldmVudHMgPSB0YXJnZXQuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XHJcbiAgICB0YXJnZXQuX2V2ZW50c0NvdW50ID0gMDtcclxuICB9IGVsc2Uge1xyXG4gICAgLy8gVG8gYXZvaWQgcmVjdXJzaW9uIGluIHRoZSBjYXNlIHRoYXQgdHlwZSA9PT0gXCJuZXdMaXN0ZW5lclwiISBCZWZvcmVcclxuICAgIC8vIGFkZGluZyBpdCB0byB0aGUgbGlzdGVuZXJzLCBmaXJzdCBlbWl0IFwibmV3TGlzdGVuZXJcIi5cclxuICAgIGlmIChldmVudHMubmV3TGlzdGVuZXIgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICB0YXJnZXQuZW1pdCgnbmV3TGlzdGVuZXInLCB0eXBlLFxyXG4gICAgICAgICAgICAgICAgICBsaXN0ZW5lci5saXN0ZW5lciA/IGxpc3RlbmVyLmxpc3RlbmVyIDogbGlzdGVuZXIpO1xyXG5cclxuICAgICAgLy8gUmUtYXNzaWduIGBldmVudHNgIGJlY2F1c2UgYSBuZXdMaXN0ZW5lciBoYW5kbGVyIGNvdWxkIGhhdmUgY2F1c2VkIHRoZVxyXG4gICAgICAvLyB0aGlzLl9ldmVudHMgdG8gYmUgYXNzaWduZWQgdG8gYSBuZXcgb2JqZWN0XHJcbiAgICAgIGV2ZW50cyA9IHRhcmdldC5fZXZlbnRzO1xyXG4gICAgfVxyXG4gICAgZXhpc3RpbmcgPSBldmVudHNbdHlwZV07XHJcbiAgfVxyXG5cclxuICBpZiAoZXhpc3RpbmcgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgLy8gT3B0aW1pemUgdGhlIGNhc2Ugb2Ygb25lIGxpc3RlbmVyLiBEb24ndCBuZWVkIHRoZSBleHRyYSBhcnJheSBvYmplY3QuXHJcbiAgICBleGlzdGluZyA9IGV2ZW50c1t0eXBlXSA9IGxpc3RlbmVyO1xyXG4gICAgKyt0YXJnZXQuX2V2ZW50c0NvdW50O1xyXG4gIH0gZWxzZSB7XHJcbiAgICBpZiAodHlwZW9mIGV4aXN0aW5nID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgIC8vIEFkZGluZyB0aGUgc2Vjb25kIGVsZW1lbnQsIG5lZWQgdG8gY2hhbmdlIHRvIGFycmF5LlxyXG4gICAgICBleGlzdGluZyA9IGV2ZW50c1t0eXBlXSA9XHJcbiAgICAgICAgcHJlcGVuZCA/IFtsaXN0ZW5lciwgZXhpc3RpbmddIDogW2V4aXN0aW5nLCBsaXN0ZW5lcl07XHJcbiAgICAgIC8vIElmIHdlJ3ZlIGFscmVhZHkgZ290IGFuIGFycmF5LCBqdXN0IGFwcGVuZC5cclxuICAgIH0gZWxzZSBpZiAocHJlcGVuZCkge1xyXG4gICAgICBleGlzdGluZy51bnNoaWZ0KGxpc3RlbmVyKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGV4aXN0aW5nLnB1c2gobGlzdGVuZXIpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIENoZWNrIGZvciBsaXN0ZW5lciBsZWFrXHJcbiAgICBtID0gJGdldE1heExpc3RlbmVycyh0YXJnZXQpO1xyXG4gICAgaWYgKG0gPiAwICYmIGV4aXN0aW5nLmxlbmd0aCA+IG0gJiYgIWV4aXN0aW5nLndhcm5lZCkge1xyXG4gICAgICBleGlzdGluZy53YXJuZWQgPSB0cnVlO1xyXG4gICAgICAvLyBObyBlcnJvciBjb2RlIGZvciB0aGlzIHNpbmNlIGl0IGlzIGEgV2FybmluZ1xyXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVzdHJpY3RlZC1zeW50YXhcclxuICAgICAgdmFyIHcgPSBuZXcgRXJyb3IoJ1Bvc3NpYmxlIEV2ZW50RW1pdHRlciBtZW1vcnkgbGVhayBkZXRlY3RlZC4gJyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZXhpc3RpbmcubGVuZ3RoICsgJyAnICsgU3RyaW5nKHR5cGUpICsgJyBsaXN0ZW5lcnMgJyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgJ2FkZGVkLiBVc2UgZW1pdHRlci5zZXRNYXhMaXN0ZW5lcnMoKSB0byAnICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAnaW5jcmVhc2UgbGltaXQnKTtcclxuICAgICAgdy5uYW1lID0gJ01heExpc3RlbmVyc0V4Y2VlZGVkV2FybmluZyc7XHJcbiAgICAgIHcuZW1pdHRlciA9IHRhcmdldDtcclxuICAgICAgdy50eXBlID0gdHlwZTtcclxuICAgICAgdy5jb3VudCA9IGV4aXN0aW5nLmxlbmd0aDtcclxuICAgICAgUHJvY2Vzc0VtaXRXYXJuaW5nKHcpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHRhcmdldDtcclxufVxyXG5cclxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5hZGRMaXN0ZW5lciA9IGZ1bmN0aW9uIGFkZExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKSB7XHJcbiAgcmV0dXJuIF9hZGRMaXN0ZW5lcih0aGlzLCB0eXBlLCBsaXN0ZW5lciwgZmFsc2UpO1xyXG59O1xyXG5cclxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbiA9IEV2ZW50RW1pdHRlci5wcm90b3R5cGUuYWRkTGlzdGVuZXI7XHJcblxyXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnByZXBlbmRMaXN0ZW5lciA9XHJcbiAgICBmdW5jdGlvbiBwcmVwZW5kTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcclxuICAgICAgcmV0dXJuIF9hZGRMaXN0ZW5lcih0aGlzLCB0eXBlLCBsaXN0ZW5lciwgdHJ1ZSk7XHJcbiAgICB9O1xyXG5cclxuZnVuY3Rpb24gb25jZVdyYXBwZXIoKSB7XHJcbiAgdmFyIGFyZ3MgPSBbXTtcclxuICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgYXJncy5wdXNoKGFyZ3VtZW50c1tpXSk7XHJcbiAgaWYgKCF0aGlzLmZpcmVkKSB7XHJcbiAgICB0aGlzLnRhcmdldC5yZW1vdmVMaXN0ZW5lcih0aGlzLnR5cGUsIHRoaXMud3JhcEZuKTtcclxuICAgIHRoaXMuZmlyZWQgPSB0cnVlO1xyXG4gICAgUmVmbGVjdEFwcGx5KHRoaXMubGlzdGVuZXIsIHRoaXMudGFyZ2V0LCBhcmdzKTtcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIF9vbmNlV3JhcCh0YXJnZXQsIHR5cGUsIGxpc3RlbmVyKSB7XHJcbiAgdmFyIHN0YXRlID0geyBmaXJlZDogZmFsc2UsIHdyYXBGbjogdW5kZWZpbmVkLCB0YXJnZXQ6IHRhcmdldCwgdHlwZTogdHlwZSwgbGlzdGVuZXI6IGxpc3RlbmVyIH07XHJcbiAgdmFyIHdyYXBwZWQgPSBvbmNlV3JhcHBlci5iaW5kKHN0YXRlKTtcclxuICB3cmFwcGVkLmxpc3RlbmVyID0gbGlzdGVuZXI7XHJcbiAgc3RhdGUud3JhcEZuID0gd3JhcHBlZDtcclxuICByZXR1cm4gd3JhcHBlZDtcclxufVxyXG5cclxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbmNlID0gZnVuY3Rpb24gb25jZSh0eXBlLCBsaXN0ZW5lcikge1xyXG4gIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09ICdmdW5jdGlvbicpIHtcclxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBcImxpc3RlbmVyXCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIEZ1bmN0aW9uLiBSZWNlaXZlZCB0eXBlICcgKyB0eXBlb2YgbGlzdGVuZXIpO1xyXG4gIH1cclxuICB0aGlzLm9uKHR5cGUsIF9vbmNlV3JhcCh0aGlzLCB0eXBlLCBsaXN0ZW5lcikpO1xyXG4gIHJldHVybiB0aGlzO1xyXG59O1xyXG5cclxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5wcmVwZW5kT25jZUxpc3RlbmVyID1cclxuICAgIGZ1bmN0aW9uIHByZXBlbmRPbmNlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcclxuICAgICAgaWYgKHR5cGVvZiBsaXN0ZW5lciAhPT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBcImxpc3RlbmVyXCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIEZ1bmN0aW9uLiBSZWNlaXZlZCB0eXBlICcgKyB0eXBlb2YgbGlzdGVuZXIpO1xyXG4gICAgICB9XHJcbiAgICAgIHRoaXMucHJlcGVuZExpc3RlbmVyKHR5cGUsIF9vbmNlV3JhcCh0aGlzLCB0eXBlLCBsaXN0ZW5lcikpO1xyXG4gICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcblxyXG4vLyBFbWl0cyBhICdyZW1vdmVMaXN0ZW5lcicgZXZlbnQgaWYgYW5kIG9ubHkgaWYgdGhlIGxpc3RlbmVyIHdhcyByZW1vdmVkLlxyXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyID1cclxuICAgIGZ1bmN0aW9uIHJlbW92ZUxpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKSB7XHJcbiAgICAgIHZhciBsaXN0LCBldmVudHMsIHBvc2l0aW9uLCBpLCBvcmlnaW5hbExpc3RlbmVyO1xyXG5cclxuICAgICAgaWYgKHR5cGVvZiBsaXN0ZW5lciAhPT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBcImxpc3RlbmVyXCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIEZ1bmN0aW9uLiBSZWNlaXZlZCB0eXBlICcgKyB0eXBlb2YgbGlzdGVuZXIpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBldmVudHMgPSB0aGlzLl9ldmVudHM7XHJcbiAgICAgIGlmIChldmVudHMgPT09IHVuZGVmaW5lZClcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuXHJcbiAgICAgIGxpc3QgPSBldmVudHNbdHlwZV07XHJcbiAgICAgIGlmIChsaXN0ID09PSB1bmRlZmluZWQpXHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcblxyXG4gICAgICBpZiAobGlzdCA9PT0gbGlzdGVuZXIgfHwgbGlzdC5saXN0ZW5lciA9PT0gbGlzdGVuZXIpIHtcclxuICAgICAgICBpZiAoLS10aGlzLl9ldmVudHNDb3VudCA9PT0gMClcclxuICAgICAgICAgIHRoaXMuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICBkZWxldGUgZXZlbnRzW3R5cGVdO1xyXG4gICAgICAgICAgaWYgKGV2ZW50cy5yZW1vdmVMaXN0ZW5lcilcclxuICAgICAgICAgICAgdGhpcy5lbWl0KCdyZW1vdmVMaXN0ZW5lcicsIHR5cGUsIGxpc3QubGlzdGVuZXIgfHwgbGlzdGVuZXIpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgbGlzdCAhPT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgIHBvc2l0aW9uID0gLTE7XHJcblxyXG4gICAgICAgIGZvciAoaSA9IGxpc3QubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcclxuICAgICAgICAgIGlmIChsaXN0W2ldID09PSBsaXN0ZW5lciB8fCBsaXN0W2ldLmxpc3RlbmVyID09PSBsaXN0ZW5lcikge1xyXG4gICAgICAgICAgICBvcmlnaW5hbExpc3RlbmVyID0gbGlzdFtpXS5saXN0ZW5lcjtcclxuICAgICAgICAgICAgcG9zaXRpb24gPSBpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChwb3NpdGlvbiA8IDApXHJcbiAgICAgICAgICByZXR1cm4gdGhpcztcclxuXHJcbiAgICAgICAgaWYgKHBvc2l0aW9uID09PSAwKVxyXG4gICAgICAgICAgbGlzdC5zaGlmdCgpO1xyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgc3BsaWNlT25lKGxpc3QsIHBvc2l0aW9uKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChsaXN0Lmxlbmd0aCA9PT0gMSlcclxuICAgICAgICAgIGV2ZW50c1t0eXBlXSA9IGxpc3RbMF07XHJcblxyXG4gICAgICAgIGlmIChldmVudHMucmVtb3ZlTGlzdGVuZXIgIT09IHVuZGVmaW5lZClcclxuICAgICAgICAgIHRoaXMuZW1pdCgncmVtb3ZlTGlzdGVuZXInLCB0eXBlLCBvcmlnaW5hbExpc3RlbmVyIHx8IGxpc3RlbmVyKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG5cclxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vZmYgPSBFdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyO1xyXG5cclxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVBbGxMaXN0ZW5lcnMgPVxyXG4gICAgZnVuY3Rpb24gcmVtb3ZlQWxsTGlzdGVuZXJzKHR5cGUpIHtcclxuICAgICAgdmFyIGxpc3RlbmVycywgZXZlbnRzLCBpO1xyXG5cclxuICAgICAgZXZlbnRzID0gdGhpcy5fZXZlbnRzO1xyXG4gICAgICBpZiAoZXZlbnRzID09PSB1bmRlZmluZWQpXHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcblxyXG4gICAgICAvLyBub3QgbGlzdGVuaW5nIGZvciByZW1vdmVMaXN0ZW5lciwgbm8gbmVlZCB0byBlbWl0XHJcbiAgICAgIGlmIChldmVudHMucmVtb3ZlTGlzdGVuZXIgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xyXG4gICAgICAgICAgdGhpcy5fZXZlbnRzQ291bnQgPSAwO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoZXZlbnRzW3R5cGVdICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgIGlmICgtLXRoaXMuX2V2ZW50c0NvdW50ID09PSAwKVxyXG4gICAgICAgICAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xyXG4gICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICBkZWxldGUgZXZlbnRzW3R5cGVdO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gZW1pdCByZW1vdmVMaXN0ZW5lciBmb3IgYWxsIGxpc3RlbmVycyBvbiBhbGwgZXZlbnRzXHJcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhldmVudHMpO1xyXG4gICAgICAgIHZhciBrZXk7XHJcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICAgIGtleSA9IGtleXNbaV07XHJcbiAgICAgICAgICBpZiAoa2V5ID09PSAncmVtb3ZlTGlzdGVuZXInKSBjb250aW51ZTtcclxuICAgICAgICAgIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKGtleSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKCdyZW1vdmVMaXN0ZW5lcicpO1xyXG4gICAgICAgIHRoaXMuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XHJcbiAgICAgICAgdGhpcy5fZXZlbnRzQ291bnQgPSAwO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBsaXN0ZW5lcnMgPSBldmVudHNbdHlwZV07XHJcblxyXG4gICAgICBpZiAodHlwZW9mIGxpc3RlbmVycyA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXJzKTtcclxuICAgICAgfSBlbHNlIGlmIChsaXN0ZW5lcnMgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIC8vIExJRk8gb3JkZXJcclxuICAgICAgICBmb3IgKGkgPSBsaXN0ZW5lcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcclxuICAgICAgICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXJzW2ldKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuXHJcbmZ1bmN0aW9uIF9saXN0ZW5lcnModGFyZ2V0LCB0eXBlLCB1bndyYXApIHtcclxuICB2YXIgZXZlbnRzID0gdGFyZ2V0Ll9ldmVudHM7XHJcblxyXG4gIGlmIChldmVudHMgPT09IHVuZGVmaW5lZClcclxuICAgIHJldHVybiBbXTtcclxuXHJcbiAgdmFyIGV2bGlzdGVuZXIgPSBldmVudHNbdHlwZV07XHJcbiAgaWYgKGV2bGlzdGVuZXIgPT09IHVuZGVmaW5lZClcclxuICAgIHJldHVybiBbXTtcclxuXHJcbiAgaWYgKHR5cGVvZiBldmxpc3RlbmVyID09PSAnZnVuY3Rpb24nKVxyXG4gICAgcmV0dXJuIHVud3JhcCA/IFtldmxpc3RlbmVyLmxpc3RlbmVyIHx8IGV2bGlzdGVuZXJdIDogW2V2bGlzdGVuZXJdO1xyXG5cclxuICByZXR1cm4gdW53cmFwID9cclxuICAgIHVud3JhcExpc3RlbmVycyhldmxpc3RlbmVyKSA6IGFycmF5Q2xvbmUoZXZsaXN0ZW5lciwgZXZsaXN0ZW5lci5sZW5ndGgpO1xyXG59XHJcblxyXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmxpc3RlbmVycyA9IGZ1bmN0aW9uIGxpc3RlbmVycyh0eXBlKSB7XHJcbiAgcmV0dXJuIF9saXN0ZW5lcnModGhpcywgdHlwZSwgdHJ1ZSk7XHJcbn07XHJcblxyXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJhd0xpc3RlbmVycyA9IGZ1bmN0aW9uIHJhd0xpc3RlbmVycyh0eXBlKSB7XHJcbiAgcmV0dXJuIF9saXN0ZW5lcnModGhpcywgdHlwZSwgZmFsc2UpO1xyXG59O1xyXG5cclxuRXZlbnRFbWl0dGVyLmxpc3RlbmVyQ291bnQgPSBmdW5jdGlvbihlbWl0dGVyLCB0eXBlKSB7XHJcbiAgaWYgKHR5cGVvZiBlbWl0dGVyLmxpc3RlbmVyQ291bnQgPT09ICdmdW5jdGlvbicpIHtcclxuICAgIHJldHVybiBlbWl0dGVyLmxpc3RlbmVyQ291bnQodHlwZSk7XHJcbiAgfSBlbHNlIHtcclxuICAgIHJldHVybiBsaXN0ZW5lckNvdW50LmNhbGwoZW1pdHRlciwgdHlwZSk7XHJcbiAgfVxyXG59O1xyXG5cclxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lckNvdW50ID0gbGlzdGVuZXJDb3VudDtcclxuZnVuY3Rpb24gbGlzdGVuZXJDb3VudCh0eXBlKSB7XHJcbiAgdmFyIGV2ZW50cyA9IHRoaXMuX2V2ZW50cztcclxuXHJcbiAgaWYgKGV2ZW50cyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICB2YXIgZXZsaXN0ZW5lciA9IGV2ZW50c1t0eXBlXTtcclxuXHJcbiAgICBpZiAodHlwZW9mIGV2bGlzdGVuZXIgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgcmV0dXJuIDE7XHJcbiAgICB9IGVsc2UgaWYgKGV2bGlzdGVuZXIgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICByZXR1cm4gZXZsaXN0ZW5lci5sZW5ndGg7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZXR1cm4gMDtcclxufVxyXG5cclxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5ldmVudE5hbWVzID0gZnVuY3Rpb24gZXZlbnROYW1lcygpIHtcclxuICByZXR1cm4gdGhpcy5fZXZlbnRzQ291bnQgPiAwID8gUmVmbGVjdE93bktleXModGhpcy5fZXZlbnRzKSA6IFtdO1xyXG59O1xyXG5cclxuZnVuY3Rpb24gYXJyYXlDbG9uZShhcnIsIG4pIHtcclxuICB2YXIgY29weSA9IG5ldyBBcnJheShuKTtcclxuICBmb3IgKHZhciBpID0gMDsgaSA8IG47ICsraSlcclxuICAgIGNvcHlbaV0gPSBhcnJbaV07XHJcbiAgcmV0dXJuIGNvcHk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNwbGljZU9uZShsaXN0LCBpbmRleCkge1xyXG4gIGZvciAoOyBpbmRleCArIDEgPCBsaXN0Lmxlbmd0aDsgaW5kZXgrKylcclxuICAgIGxpc3RbaW5kZXhdID0gbGlzdFtpbmRleCArIDFdO1xyXG4gIGxpc3QucG9wKCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHVud3JhcExpc3RlbmVycyhhcnIpIHtcclxuICB2YXIgcmV0ID0gbmV3IEFycmF5KGFyci5sZW5ndGgpO1xyXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcmV0Lmxlbmd0aDsgKytpKSB7XHJcbiAgICByZXRbaV0gPSBhcnJbaV0ubGlzdGVuZXIgfHwgYXJyW2ldO1xyXG4gIH1cclxuICByZXR1cm4gcmV0O1xyXG59XHJcbiIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbGliL19zdHJlYW1fcmVhZGFibGUuanMnKTtcclxuZXhwb3J0cy5TdHJlYW0gPSBleHBvcnRzO1xyXG5leHBvcnRzLlJlYWRhYmxlID0gZXhwb3J0cztcclxuZXhwb3J0cy5Xcml0YWJsZSA9IHJlcXVpcmUoJy4vbGliL19zdHJlYW1fd3JpdGFibGUuanMnKTtcclxuZXhwb3J0cy5EdXBsZXggPSByZXF1aXJlKCcuL2xpYi9fc3RyZWFtX2R1cGxleC5qcycpO1xyXG5leHBvcnRzLlRyYW5zZm9ybSA9IHJlcXVpcmUoJy4vbGliL19zdHJlYW1fdHJhbnNmb3JtLmpzJyk7XHJcbmV4cG9ydHMuUGFzc1Rocm91Z2ggPSByZXF1aXJlKCcuL2xpYi9fc3RyZWFtX3Bhc3N0aHJvdWdoLmpzJyk7XHJcbiIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxyXG4vL1xyXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxyXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXHJcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xyXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXHJcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcclxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXHJcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxyXG4vL1xyXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxyXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cclxuLy9cclxuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xyXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXHJcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cclxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXHJcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxyXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXHJcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXHJcblxyXG4vLyBBIGJpdCBzaW1wbGVyIHRoYW4gcmVhZGFibGUgc3RyZWFtcy5cclxuLy8gSW1wbGVtZW50IGFuIGFzeW5jIC5fd3JpdGUoY2h1bmssIGVuY29kaW5nLCBjYiksIGFuZCBpdCdsbCBoYW5kbGUgYWxsXHJcbi8vIHRoZSBkcmFpbiBldmVudCBlbWlzc2lvbiBhbmQgYnVmZmVyaW5nLlxyXG5cclxuJ3VzZSBzdHJpY3QnO1xyXG5cclxuLyo8cmVwbGFjZW1lbnQ+Ki9cclxuXHJcbnZhciBwbmEgPSByZXF1aXJlKCdwcm9jZXNzLW5leHRpY2stYXJncycpO1xyXG4vKjwvcmVwbGFjZW1lbnQ+Ki9cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gV3JpdGFibGU7XHJcblxyXG4vKiA8cmVwbGFjZW1lbnQ+ICovXHJcbmZ1bmN0aW9uIFdyaXRlUmVxKGNodW5rLCBlbmNvZGluZywgY2IpIHtcclxuICB0aGlzLmNodW5rID0gY2h1bms7XHJcbiAgdGhpcy5lbmNvZGluZyA9IGVuY29kaW5nO1xyXG4gIHRoaXMuY2FsbGJhY2sgPSBjYjtcclxuICB0aGlzLm5leHQgPSBudWxsO1xyXG59XHJcblxyXG4vLyBJdCBzZWVtcyBhIGxpbmtlZCBsaXN0IGJ1dCBpdCBpcyBub3RcclxuLy8gdGhlcmUgd2lsbCBiZSBvbmx5IDIgb2YgdGhlc2UgZm9yIGVhY2ggc3RyZWFtXHJcbmZ1bmN0aW9uIENvcmtlZFJlcXVlc3Qoc3RhdGUpIHtcclxuICB2YXIgX3RoaXMgPSB0aGlzO1xyXG5cclxuICB0aGlzLm5leHQgPSBudWxsO1xyXG4gIHRoaXMuZW50cnkgPSBudWxsO1xyXG4gIHRoaXMuZmluaXNoID0gZnVuY3Rpb24gKCkge1xyXG4gICAgb25Db3JrZWRGaW5pc2goX3RoaXMsIHN0YXRlKTtcclxuICB9O1xyXG59XHJcbi8qIDwvcmVwbGFjZW1lbnQ+ICovXHJcblxyXG4vKjxyZXBsYWNlbWVudD4qL1xyXG52YXIgYXN5bmNXcml0ZSA9ICFwcm9jZXNzLmJyb3dzZXIgJiYgWyd2MC4xMCcsICd2MC45LiddLmluZGV4T2YocHJvY2Vzcy52ZXJzaW9uLnNsaWNlKDAsIDUpKSA+IC0xID8gc2V0SW1tZWRpYXRlIDogcG5hLm5leHRUaWNrO1xyXG4vKjwvcmVwbGFjZW1lbnQ+Ki9cclxuXHJcbi8qPHJlcGxhY2VtZW50PiovXHJcbnZhciBEdXBsZXg7XHJcbi8qPC9yZXBsYWNlbWVudD4qL1xyXG5cclxuV3JpdGFibGUuV3JpdGFibGVTdGF0ZSA9IFdyaXRhYmxlU3RhdGU7XHJcblxyXG4vKjxyZXBsYWNlbWVudD4qL1xyXG52YXIgdXRpbCA9IHJlcXVpcmUoJ2NvcmUtdXRpbC1pcycpO1xyXG51dGlsLmluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcclxuLyo8L3JlcGxhY2VtZW50PiovXHJcblxyXG4vKjxyZXBsYWNlbWVudD4qL1xyXG52YXIgaW50ZXJuYWxVdGlsID0ge1xyXG4gIGRlcHJlY2F0ZTogcmVxdWlyZSgndXRpbC1kZXByZWNhdGUnKVxyXG59O1xyXG4vKjwvcmVwbGFjZW1lbnQ+Ki9cclxuXHJcbi8qPHJlcGxhY2VtZW50PiovXHJcbnZhciBTdHJlYW0gPSByZXF1aXJlKCcuL2ludGVybmFsL3N0cmVhbXMvc3RyZWFtJyk7XHJcbi8qPC9yZXBsYWNlbWVudD4qL1xyXG5cclxuLyo8cmVwbGFjZW1lbnQ+Ki9cclxuXHJcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlcjtcclxudmFyIE91clVpbnQ4QXJyYXkgPSBnbG9iYWwuVWludDhBcnJheSB8fCBmdW5jdGlvbiAoKSB7fTtcclxuZnVuY3Rpb24gX3VpbnQ4QXJyYXlUb0J1ZmZlcihjaHVuaykge1xyXG4gIHJldHVybiBCdWZmZXIuZnJvbShjaHVuayk7XHJcbn1cclxuZnVuY3Rpb24gX2lzVWludDhBcnJheShvYmopIHtcclxuICByZXR1cm4gQnVmZmVyLmlzQnVmZmVyKG9iaikgfHwgb2JqIGluc3RhbmNlb2YgT3VyVWludDhBcnJheTtcclxufVxyXG5cclxuLyo8L3JlcGxhY2VtZW50PiovXHJcblxyXG52YXIgZGVzdHJveUltcGwgPSByZXF1aXJlKCcuL2ludGVybmFsL3N0cmVhbXMvZGVzdHJveScpO1xyXG5cclxudXRpbC5pbmhlcml0cyhXcml0YWJsZSwgU3RyZWFtKTtcclxuXHJcbmZ1bmN0aW9uIG5vcCgpIHt9XHJcblxyXG5mdW5jdGlvbiBXcml0YWJsZVN0YXRlKG9wdGlvbnMsIHN0cmVhbSkge1xyXG4gIER1cGxleCA9IER1cGxleCB8fCByZXF1aXJlKCcuL19zdHJlYW1fZHVwbGV4Jyk7XHJcblxyXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xyXG5cclxuICAvLyBEdXBsZXggc3RyZWFtcyBhcmUgYm90aCByZWFkYWJsZSBhbmQgd3JpdGFibGUsIGJ1dCBzaGFyZVxyXG4gIC8vIHRoZSBzYW1lIG9wdGlvbnMgb2JqZWN0LlxyXG4gIC8vIEhvd2V2ZXIsIHNvbWUgY2FzZXMgcmVxdWlyZSBzZXR0aW5nIG9wdGlvbnMgdG8gZGlmZmVyZW50XHJcbiAgLy8gdmFsdWVzIGZvciB0aGUgcmVhZGFibGUgYW5kIHRoZSB3cml0YWJsZSBzaWRlcyBvZiB0aGUgZHVwbGV4IHN0cmVhbS5cclxuICAvLyBUaGVzZSBvcHRpb25zIGNhbiBiZSBwcm92aWRlZCBzZXBhcmF0ZWx5IGFzIHJlYWRhYmxlWFhYIGFuZCB3cml0YWJsZVhYWC5cclxuICB2YXIgaXNEdXBsZXggPSBzdHJlYW0gaW5zdGFuY2VvZiBEdXBsZXg7XHJcblxyXG4gIC8vIG9iamVjdCBzdHJlYW0gZmxhZyB0byBpbmRpY2F0ZSB3aGV0aGVyIG9yIG5vdCB0aGlzIHN0cmVhbVxyXG4gIC8vIGNvbnRhaW5zIGJ1ZmZlcnMgb3Igb2JqZWN0cy5cclxuICB0aGlzLm9iamVjdE1vZGUgPSAhIW9wdGlvbnMub2JqZWN0TW9kZTtcclxuXHJcbiAgaWYgKGlzRHVwbGV4KSB0aGlzLm9iamVjdE1vZGUgPSB0aGlzLm9iamVjdE1vZGUgfHwgISFvcHRpb25zLndyaXRhYmxlT2JqZWN0TW9kZTtcclxuXHJcbiAgLy8gdGhlIHBvaW50IGF0IHdoaWNoIHdyaXRlKCkgc3RhcnRzIHJldHVybmluZyBmYWxzZVxyXG4gIC8vIE5vdGU6IDAgaXMgYSB2YWxpZCB2YWx1ZSwgbWVhbnMgdGhhdCB3ZSBhbHdheXMgcmV0dXJuIGZhbHNlIGlmXHJcbiAgLy8gdGhlIGVudGlyZSBidWZmZXIgaXMgbm90IGZsdXNoZWQgaW1tZWRpYXRlbHkgb24gd3JpdGUoKVxyXG4gIHZhciBod20gPSBvcHRpb25zLmhpZ2hXYXRlck1hcms7XHJcbiAgdmFyIHdyaXRhYmxlSHdtID0gb3B0aW9ucy53cml0YWJsZUhpZ2hXYXRlck1hcms7XHJcbiAgdmFyIGRlZmF1bHRId20gPSB0aGlzLm9iamVjdE1vZGUgPyAxNiA6IDE2ICogMTAyNDtcclxuXHJcbiAgaWYgKGh3bSB8fCBod20gPT09IDApIHRoaXMuaGlnaFdhdGVyTWFyayA9IGh3bTtlbHNlIGlmIChpc0R1cGxleCAmJiAod3JpdGFibGVId20gfHwgd3JpdGFibGVId20gPT09IDApKSB0aGlzLmhpZ2hXYXRlck1hcmsgPSB3cml0YWJsZUh3bTtlbHNlIHRoaXMuaGlnaFdhdGVyTWFyayA9IGRlZmF1bHRId207XHJcblxyXG4gIC8vIGNhc3QgdG8gaW50cy5cclxuICB0aGlzLmhpZ2hXYXRlck1hcmsgPSBNYXRoLmZsb29yKHRoaXMuaGlnaFdhdGVyTWFyayk7XHJcblxyXG4gIC8vIGlmIF9maW5hbCBoYXMgYmVlbiBjYWxsZWRcclxuICB0aGlzLmZpbmFsQ2FsbGVkID0gZmFsc2U7XHJcblxyXG4gIC8vIGRyYWluIGV2ZW50IGZsYWcuXHJcbiAgdGhpcy5uZWVkRHJhaW4gPSBmYWxzZTtcclxuICAvLyBhdCB0aGUgc3RhcnQgb2YgY2FsbGluZyBlbmQoKVxyXG4gIHRoaXMuZW5kaW5nID0gZmFsc2U7XHJcbiAgLy8gd2hlbiBlbmQoKSBoYXMgYmVlbiBjYWxsZWQsIGFuZCByZXR1cm5lZFxyXG4gIHRoaXMuZW5kZWQgPSBmYWxzZTtcclxuICAvLyB3aGVuICdmaW5pc2gnIGlzIGVtaXR0ZWRcclxuICB0aGlzLmZpbmlzaGVkID0gZmFsc2U7XHJcblxyXG4gIC8vIGhhcyBpdCBiZWVuIGRlc3Ryb3llZFxyXG4gIHRoaXMuZGVzdHJveWVkID0gZmFsc2U7XHJcblxyXG4gIC8vIHNob3VsZCB3ZSBkZWNvZGUgc3RyaW5ncyBpbnRvIGJ1ZmZlcnMgYmVmb3JlIHBhc3NpbmcgdG8gX3dyaXRlP1xyXG4gIC8vIHRoaXMgaXMgaGVyZSBzbyB0aGF0IHNvbWUgbm9kZS1jb3JlIHN0cmVhbXMgY2FuIG9wdGltaXplIHN0cmluZ1xyXG4gIC8vIGhhbmRsaW5nIGF0IGEgbG93ZXIgbGV2ZWwuXHJcbiAgdmFyIG5vRGVjb2RlID0gb3B0aW9ucy5kZWNvZGVTdHJpbmdzID09PSBmYWxzZTtcclxuICB0aGlzLmRlY29kZVN0cmluZ3MgPSAhbm9EZWNvZGU7XHJcblxyXG4gIC8vIENyeXB0byBpcyBraW5kIG9mIG9sZCBhbmQgY3J1c3R5LiAgSGlzdG9yaWNhbGx5LCBpdHMgZGVmYXVsdCBzdHJpbmdcclxuICAvLyBlbmNvZGluZyBpcyAnYmluYXJ5JyBzbyB3ZSBoYXZlIHRvIG1ha2UgdGhpcyBjb25maWd1cmFibGUuXHJcbiAgLy8gRXZlcnl0aGluZyBlbHNlIGluIHRoZSB1bml2ZXJzZSB1c2VzICd1dGY4JywgdGhvdWdoLlxyXG4gIHRoaXMuZGVmYXVsdEVuY29kaW5nID0gb3B0aW9ucy5kZWZhdWx0RW5jb2RpbmcgfHwgJ3V0ZjgnO1xyXG5cclxuICAvLyBub3QgYW4gYWN0dWFsIGJ1ZmZlciB3ZSBrZWVwIHRyYWNrIG9mLCBidXQgYSBtZWFzdXJlbWVudFxyXG4gIC8vIG9mIGhvdyBtdWNoIHdlJ3JlIHdhaXRpbmcgdG8gZ2V0IHB1c2hlZCB0byBzb21lIHVuZGVybHlpbmdcclxuICAvLyBzb2NrZXQgb3IgZmlsZS5cclxuICB0aGlzLmxlbmd0aCA9IDA7XHJcblxyXG4gIC8vIGEgZmxhZyB0byBzZWUgd2hlbiB3ZSdyZSBpbiB0aGUgbWlkZGxlIG9mIGEgd3JpdGUuXHJcbiAgdGhpcy53cml0aW5nID0gZmFsc2U7XHJcblxyXG4gIC8vIHdoZW4gdHJ1ZSBhbGwgd3JpdGVzIHdpbGwgYmUgYnVmZmVyZWQgdW50aWwgLnVuY29yaygpIGNhbGxcclxuICB0aGlzLmNvcmtlZCA9IDA7XHJcblxyXG4gIC8vIGEgZmxhZyB0byBiZSBhYmxlIHRvIHRlbGwgaWYgdGhlIG9ud3JpdGUgY2IgaXMgY2FsbGVkIGltbWVkaWF0ZWx5LFxyXG4gIC8vIG9yIG9uIGEgbGF0ZXIgdGljay4gIFdlIHNldCB0aGlzIHRvIHRydWUgYXQgZmlyc3QsIGJlY2F1c2UgYW55XHJcbiAgLy8gYWN0aW9ucyB0aGF0IHNob3VsZG4ndCBoYXBwZW4gdW50aWwgXCJsYXRlclwiIHNob3VsZCBnZW5lcmFsbHkgYWxzb1xyXG4gIC8vIG5vdCBoYXBwZW4gYmVmb3JlIHRoZSBmaXJzdCB3cml0ZSBjYWxsLlxyXG4gIHRoaXMuc3luYyA9IHRydWU7XHJcblxyXG4gIC8vIGEgZmxhZyB0byBrbm93IGlmIHdlJ3JlIHByb2Nlc3NpbmcgcHJldmlvdXNseSBidWZmZXJlZCBpdGVtcywgd2hpY2hcclxuICAvLyBtYXkgY2FsbCB0aGUgX3dyaXRlKCkgY2FsbGJhY2sgaW4gdGhlIHNhbWUgdGljaywgc28gdGhhdCB3ZSBkb24ndFxyXG4gIC8vIGVuZCB1cCBpbiBhbiBvdmVybGFwcGVkIG9ud3JpdGUgc2l0dWF0aW9uLlxyXG4gIHRoaXMuYnVmZmVyUHJvY2Vzc2luZyA9IGZhbHNlO1xyXG5cclxuICAvLyB0aGUgY2FsbGJhY2sgdGhhdCdzIHBhc3NlZCB0byBfd3JpdGUoY2h1bmssY2IpXHJcbiAgdGhpcy5vbndyaXRlID0gZnVuY3Rpb24gKGVyKSB7XHJcbiAgICBvbndyaXRlKHN0cmVhbSwgZXIpO1xyXG4gIH07XHJcblxyXG4gIC8vIHRoZSBjYWxsYmFjayB0aGF0IHRoZSB1c2VyIHN1cHBsaWVzIHRvIHdyaXRlKGNodW5rLGVuY29kaW5nLGNiKVxyXG4gIHRoaXMud3JpdGVjYiA9IG51bGw7XHJcblxyXG4gIC8vIHRoZSBhbW91bnQgdGhhdCBpcyBiZWluZyB3cml0dGVuIHdoZW4gX3dyaXRlIGlzIGNhbGxlZC5cclxuICB0aGlzLndyaXRlbGVuID0gMDtcclxuXHJcbiAgdGhpcy5idWZmZXJlZFJlcXVlc3QgPSBudWxsO1xyXG4gIHRoaXMubGFzdEJ1ZmZlcmVkUmVxdWVzdCA9IG51bGw7XHJcblxyXG4gIC8vIG51bWJlciBvZiBwZW5kaW5nIHVzZXItc3VwcGxpZWQgd3JpdGUgY2FsbGJhY2tzXHJcbiAgLy8gdGhpcyBtdXN0IGJlIDAgYmVmb3JlICdmaW5pc2gnIGNhbiBiZSBlbWl0dGVkXHJcbiAgdGhpcy5wZW5kaW5nY2IgPSAwO1xyXG5cclxuICAvLyBlbWl0IHByZWZpbmlzaCBpZiB0aGUgb25seSB0aGluZyB3ZSdyZSB3YWl0aW5nIGZvciBpcyBfd3JpdGUgY2JzXHJcbiAgLy8gVGhpcyBpcyByZWxldmFudCBmb3Igc3luY2hyb25vdXMgVHJhbnNmb3JtIHN0cmVhbXNcclxuICB0aGlzLnByZWZpbmlzaGVkID0gZmFsc2U7XHJcblxyXG4gIC8vIFRydWUgaWYgdGhlIGVycm9yIHdhcyBhbHJlYWR5IGVtaXR0ZWQgYW5kIHNob3VsZCBub3QgYmUgdGhyb3duIGFnYWluXHJcbiAgdGhpcy5lcnJvckVtaXR0ZWQgPSBmYWxzZTtcclxuXHJcbiAgLy8gY291bnQgYnVmZmVyZWQgcmVxdWVzdHNcclxuICB0aGlzLmJ1ZmZlcmVkUmVxdWVzdENvdW50ID0gMDtcclxuXHJcbiAgLy8gYWxsb2NhdGUgdGhlIGZpcnN0IENvcmtlZFJlcXVlc3QsIHRoZXJlIGlzIGFsd2F5c1xyXG4gIC8vIG9uZSBhbGxvY2F0ZWQgYW5kIGZyZWUgdG8gdXNlLCBhbmQgd2UgbWFpbnRhaW4gYXQgbW9zdCB0d29cclxuICB0aGlzLmNvcmtlZFJlcXVlc3RzRnJlZSA9IG5ldyBDb3JrZWRSZXF1ZXN0KHRoaXMpO1xyXG59XHJcblxyXG5Xcml0YWJsZVN0YXRlLnByb3RvdHlwZS5nZXRCdWZmZXIgPSBmdW5jdGlvbiBnZXRCdWZmZXIoKSB7XHJcbiAgdmFyIGN1cnJlbnQgPSB0aGlzLmJ1ZmZlcmVkUmVxdWVzdDtcclxuICB2YXIgb3V0ID0gW107XHJcbiAgd2hpbGUgKGN1cnJlbnQpIHtcclxuICAgIG91dC5wdXNoKGN1cnJlbnQpO1xyXG4gICAgY3VycmVudCA9IGN1cnJlbnQubmV4dDtcclxuICB9XHJcbiAgcmV0dXJuIG91dDtcclxufTtcclxuXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgdHJ5IHtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShXcml0YWJsZVN0YXRlLnByb3RvdHlwZSwgJ2J1ZmZlcicsIHtcclxuICAgICAgZ2V0OiBpbnRlcm5hbFV0aWwuZGVwcmVjYXRlKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5nZXRCdWZmZXIoKTtcclxuICAgICAgfSwgJ193cml0YWJsZVN0YXRlLmJ1ZmZlciBpcyBkZXByZWNhdGVkLiBVc2UgX3dyaXRhYmxlU3RhdGUuZ2V0QnVmZmVyICcgKyAnaW5zdGVhZC4nLCAnREVQMDAwMycpXHJcbiAgICB9KTtcclxuICB9IGNhdGNoIChfKSB7fVxyXG59KSgpO1xyXG5cclxuLy8gVGVzdCBfd3JpdGFibGVTdGF0ZSBmb3IgaW5oZXJpdGFuY2UgdG8gYWNjb3VudCBmb3IgRHVwbGV4IHN0cmVhbXMsXHJcbi8vIHdob3NlIHByb3RvdHlwZSBjaGFpbiBvbmx5IHBvaW50cyB0byBSZWFkYWJsZS5cclxudmFyIHJlYWxIYXNJbnN0YW5jZTtcclxuaWYgKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgU3ltYm9sLmhhc0luc3RhbmNlICYmIHR5cGVvZiBGdW5jdGlvbi5wcm90b3R5cGVbU3ltYm9sLmhhc0luc3RhbmNlXSA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gIHJlYWxIYXNJbnN0YW5jZSA9IEZ1bmN0aW9uLnByb3RvdHlwZVtTeW1ib2wuaGFzSW5zdGFuY2VdO1xyXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShXcml0YWJsZSwgU3ltYm9sLmhhc0luc3RhbmNlLCB7XHJcbiAgICB2YWx1ZTogZnVuY3Rpb24gKG9iamVjdCkge1xyXG4gICAgICBpZiAocmVhbEhhc0luc3RhbmNlLmNhbGwodGhpcywgb2JqZWN0KSkgcmV0dXJuIHRydWU7XHJcbiAgICAgIGlmICh0aGlzICE9PSBXcml0YWJsZSkgcmV0dXJuIGZhbHNlO1xyXG5cclxuICAgICAgcmV0dXJuIG9iamVjdCAmJiBvYmplY3QuX3dyaXRhYmxlU3RhdGUgaW5zdGFuY2VvZiBXcml0YWJsZVN0YXRlO1xyXG4gICAgfVxyXG4gIH0pO1xyXG59IGVsc2Uge1xyXG4gIHJlYWxIYXNJbnN0YW5jZSA9IGZ1bmN0aW9uIChvYmplY3QpIHtcclxuICAgIHJldHVybiBvYmplY3QgaW5zdGFuY2VvZiB0aGlzO1xyXG4gIH07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIFdyaXRhYmxlKG9wdGlvbnMpIHtcclxuICBEdXBsZXggPSBEdXBsZXggfHwgcmVxdWlyZSgnLi9fc3RyZWFtX2R1cGxleCcpO1xyXG5cclxuICAvLyBXcml0YWJsZSBjdG9yIGlzIGFwcGxpZWQgdG8gRHVwbGV4ZXMsIHRvby5cclxuICAvLyBgcmVhbEhhc0luc3RhbmNlYCBpcyBuZWNlc3NhcnkgYmVjYXVzZSB1c2luZyBwbGFpbiBgaW5zdGFuY2VvZmBcclxuICAvLyB3b3VsZCByZXR1cm4gZmFsc2UsIGFzIG5vIGBfd3JpdGFibGVTdGF0ZWAgcHJvcGVydHkgaXMgYXR0YWNoZWQuXHJcblxyXG4gIC8vIFRyeWluZyB0byB1c2UgdGhlIGN1c3RvbSBgaW5zdGFuY2VvZmAgZm9yIFdyaXRhYmxlIGhlcmUgd2lsbCBhbHNvIGJyZWFrIHRoZVxyXG4gIC8vIE5vZGUuanMgTGF6eVRyYW5zZm9ybSBpbXBsZW1lbnRhdGlvbiwgd2hpY2ggaGFzIGEgbm9uLXRyaXZpYWwgZ2V0dGVyIGZvclxyXG4gIC8vIGBfd3JpdGFibGVTdGF0ZWAgdGhhdCB3b3VsZCBsZWFkIHRvIGluZmluaXRlIHJlY3Vyc2lvbi5cclxuICBpZiAoIXJlYWxIYXNJbnN0YW5jZS5jYWxsKFdyaXRhYmxlLCB0aGlzKSAmJiAhKHRoaXMgaW5zdGFuY2VvZiBEdXBsZXgpKSB7XHJcbiAgICByZXR1cm4gbmV3IFdyaXRhYmxlKG9wdGlvbnMpO1xyXG4gIH1cclxuXHJcbiAgdGhpcy5fd3JpdGFibGVTdGF0ZSA9IG5ldyBXcml0YWJsZVN0YXRlKG9wdGlvbnMsIHRoaXMpO1xyXG5cclxuICAvLyBsZWdhY3kuXHJcbiAgdGhpcy53cml0YWJsZSA9IHRydWU7XHJcblxyXG4gIGlmIChvcHRpb25zKSB7XHJcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMud3JpdGUgPT09ICdmdW5jdGlvbicpIHRoaXMuX3dyaXRlID0gb3B0aW9ucy53cml0ZTtcclxuXHJcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMud3JpdGV2ID09PSAnZnVuY3Rpb24nKSB0aGlzLl93cml0ZXYgPSBvcHRpb25zLndyaXRldjtcclxuXHJcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMuZGVzdHJveSA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fZGVzdHJveSA9IG9wdGlvbnMuZGVzdHJveTtcclxuXHJcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMuZmluYWwgPT09ICdmdW5jdGlvbicpIHRoaXMuX2ZpbmFsID0gb3B0aW9ucy5maW5hbDtcclxuICB9XHJcblxyXG4gIFN0cmVhbS5jYWxsKHRoaXMpO1xyXG59XHJcblxyXG4vLyBPdGhlcndpc2UgcGVvcGxlIGNhbiBwaXBlIFdyaXRhYmxlIHN0cmVhbXMsIHdoaWNoIGlzIGp1c3Qgd3JvbmcuXHJcbldyaXRhYmxlLnByb3RvdHlwZS5waXBlID0gZnVuY3Rpb24gKCkge1xyXG4gIHRoaXMuZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IoJ0Nhbm5vdCBwaXBlLCBub3QgcmVhZGFibGUnKSk7XHJcbn07XHJcblxyXG5mdW5jdGlvbiB3cml0ZUFmdGVyRW5kKHN0cmVhbSwgY2IpIHtcclxuICB2YXIgZXIgPSBuZXcgRXJyb3IoJ3dyaXRlIGFmdGVyIGVuZCcpO1xyXG4gIC8vIFRPRE86IGRlZmVyIGVycm9yIGV2ZW50cyBjb25zaXN0ZW50bHkgZXZlcnl3aGVyZSwgbm90IGp1c3QgdGhlIGNiXHJcbiAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXIpO1xyXG4gIHBuYS5uZXh0VGljayhjYiwgZXIpO1xyXG59XHJcblxyXG4vLyBDaGVja3MgdGhhdCBhIHVzZXItc3VwcGxpZWQgY2h1bmsgaXMgdmFsaWQsIGVzcGVjaWFsbHkgZm9yIHRoZSBwYXJ0aWN1bGFyXHJcbi8vIG1vZGUgdGhlIHN0cmVhbSBpcyBpbi4gQ3VycmVudGx5IHRoaXMgbWVhbnMgdGhhdCBgbnVsbGAgaXMgbmV2ZXIgYWNjZXB0ZWRcclxuLy8gYW5kIHVuZGVmaW5lZC9ub24tc3RyaW5nIHZhbHVlcyBhcmUgb25seSBhbGxvd2VkIGluIG9iamVjdCBtb2RlLlxyXG5mdW5jdGlvbiB2YWxpZENodW5rKHN0cmVhbSwgc3RhdGUsIGNodW5rLCBjYikge1xyXG4gIHZhciB2YWxpZCA9IHRydWU7XHJcbiAgdmFyIGVyID0gZmFsc2U7XHJcblxyXG4gIGlmIChjaHVuayA9PT0gbnVsbCkge1xyXG4gICAgZXIgPSBuZXcgVHlwZUVycm9yKCdNYXkgbm90IHdyaXRlIG51bGwgdmFsdWVzIHRvIHN0cmVhbScpO1xyXG4gIH0gZWxzZSBpZiAodHlwZW9mIGNodW5rICE9PSAnc3RyaW5nJyAmJiBjaHVuayAhPT0gdW5kZWZpbmVkICYmICFzdGF0ZS5vYmplY3RNb2RlKSB7XHJcbiAgICBlciA9IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgbm9uLXN0cmluZy9idWZmZXIgY2h1bmsnKTtcclxuICB9XHJcbiAgaWYgKGVyKSB7XHJcbiAgICBzdHJlYW0uZW1pdCgnZXJyb3InLCBlcik7XHJcbiAgICBwbmEubmV4dFRpY2soY2IsIGVyKTtcclxuICAgIHZhbGlkID0gZmFsc2U7XHJcbiAgfVxyXG4gIHJldHVybiB2YWxpZDtcclxufVxyXG5cclxuV3JpdGFibGUucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZywgY2IpIHtcclxuICB2YXIgc3RhdGUgPSB0aGlzLl93cml0YWJsZVN0YXRlO1xyXG4gIHZhciByZXQgPSBmYWxzZTtcclxuICB2YXIgaXNCdWYgPSAhc3RhdGUub2JqZWN0TW9kZSAmJiBfaXNVaW50OEFycmF5KGNodW5rKTtcclxuXHJcbiAgaWYgKGlzQnVmICYmICFCdWZmZXIuaXNCdWZmZXIoY2h1bmspKSB7XHJcbiAgICBjaHVuayA9IF91aW50OEFycmF5VG9CdWZmZXIoY2h1bmspO1xyXG4gIH1cclxuXHJcbiAgaWYgKHR5cGVvZiBlbmNvZGluZyA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgY2IgPSBlbmNvZGluZztcclxuICAgIGVuY29kaW5nID0gbnVsbDtcclxuICB9XHJcblxyXG4gIGlmIChpc0J1ZikgZW5jb2RpbmcgPSAnYnVmZmVyJztlbHNlIGlmICghZW5jb2RpbmcpIGVuY29kaW5nID0gc3RhdGUuZGVmYXVsdEVuY29kaW5nO1xyXG5cclxuICBpZiAodHlwZW9mIGNiICE9PSAnZnVuY3Rpb24nKSBjYiA9IG5vcDtcclxuXHJcbiAgaWYgKHN0YXRlLmVuZGVkKSB3cml0ZUFmdGVyRW5kKHRoaXMsIGNiKTtlbHNlIGlmIChpc0J1ZiB8fCB2YWxpZENodW5rKHRoaXMsIHN0YXRlLCBjaHVuaywgY2IpKSB7XHJcbiAgICBzdGF0ZS5wZW5kaW5nY2IrKztcclxuICAgIHJldCA9IHdyaXRlT3JCdWZmZXIodGhpcywgc3RhdGUsIGlzQnVmLCBjaHVuaywgZW5jb2RpbmcsIGNiKTtcclxuICB9XHJcblxyXG4gIHJldHVybiByZXQ7XHJcbn07XHJcblxyXG5Xcml0YWJsZS5wcm90b3R5cGUuY29yayA9IGZ1bmN0aW9uICgpIHtcclxuICB2YXIgc3RhdGUgPSB0aGlzLl93cml0YWJsZVN0YXRlO1xyXG5cclxuICBzdGF0ZS5jb3JrZWQrKztcclxufTtcclxuXHJcbldyaXRhYmxlLnByb3RvdHlwZS51bmNvcmsgPSBmdW5jdGlvbiAoKSB7XHJcbiAgdmFyIHN0YXRlID0gdGhpcy5fd3JpdGFibGVTdGF0ZTtcclxuXHJcbiAgaWYgKHN0YXRlLmNvcmtlZCkge1xyXG4gICAgc3RhdGUuY29ya2VkLS07XHJcblxyXG4gICAgaWYgKCFzdGF0ZS53cml0aW5nICYmICFzdGF0ZS5jb3JrZWQgJiYgIXN0YXRlLmZpbmlzaGVkICYmICFzdGF0ZS5idWZmZXJQcm9jZXNzaW5nICYmIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdCkgY2xlYXJCdWZmZXIodGhpcywgc3RhdGUpO1xyXG4gIH1cclxufTtcclxuXHJcbldyaXRhYmxlLnByb3RvdHlwZS5zZXREZWZhdWx0RW5jb2RpbmcgPSBmdW5jdGlvbiBzZXREZWZhdWx0RW5jb2RpbmcoZW5jb2RpbmcpIHtcclxuICAvLyBub2RlOjpQYXJzZUVuY29kaW5nKCkgcmVxdWlyZXMgbG93ZXIgY2FzZS5cclxuICBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJykgZW5jb2RpbmcgPSBlbmNvZGluZy50b0xvd2VyQ2FzZSgpO1xyXG4gIGlmICghKFsnaGV4JywgJ3V0ZjgnLCAndXRmLTgnLCAnYXNjaWknLCAnYmluYXJ5JywgJ2Jhc2U2NCcsICd1Y3MyJywgJ3Vjcy0yJywgJ3V0ZjE2bGUnLCAndXRmLTE2bGUnLCAncmF3J10uaW5kZXhPZigoZW5jb2RpbmcgKyAnJykudG9Mb3dlckNhc2UoKSkgPiAtMSkpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZyk7XHJcbiAgdGhpcy5fd3JpdGFibGVTdGF0ZS5kZWZhdWx0RW5jb2RpbmcgPSBlbmNvZGluZztcclxuICByZXR1cm4gdGhpcztcclxufTtcclxuXHJcbmZ1bmN0aW9uIGRlY29kZUNodW5rKHN0YXRlLCBjaHVuaywgZW5jb2RpbmcpIHtcclxuICBpZiAoIXN0YXRlLm9iamVjdE1vZGUgJiYgc3RhdGUuZGVjb2RlU3RyaW5ncyAhPT0gZmFsc2UgJiYgdHlwZW9mIGNodW5rID09PSAnc3RyaW5nJykge1xyXG4gICAgY2h1bmsgPSBCdWZmZXIuZnJvbShjaHVuaywgZW5jb2RpbmcpO1xyXG4gIH1cclxuICByZXR1cm4gY2h1bms7XHJcbn1cclxuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShXcml0YWJsZS5wcm90b3R5cGUsICd3cml0YWJsZUhpZ2hXYXRlck1hcmsnLCB7XHJcbiAgLy8gbWFraW5nIGl0IGV4cGxpY2l0IHRoaXMgcHJvcGVydHkgaXMgbm90IGVudW1lcmFibGVcclxuICAvLyBiZWNhdXNlIG90aGVyd2lzZSBzb21lIHByb3RvdHlwZSBtYW5pcHVsYXRpb24gaW5cclxuICAvLyB1c2VybGFuZCB3aWxsIGZhaWxcclxuICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgIHJldHVybiB0aGlzLl93cml0YWJsZVN0YXRlLmhpZ2hXYXRlck1hcms7XHJcbiAgfVxyXG59KTtcclxuXHJcbi8vIGlmIHdlJ3JlIGFscmVhZHkgd3JpdGluZyBzb21ldGhpbmcsIHRoZW4ganVzdCBwdXQgdGhpc1xyXG4vLyBpbiB0aGUgcXVldWUsIGFuZCB3YWl0IG91ciB0dXJuLiAgT3RoZXJ3aXNlLCBjYWxsIF93cml0ZVxyXG4vLyBJZiB3ZSByZXR1cm4gZmFsc2UsIHRoZW4gd2UgbmVlZCBhIGRyYWluIGV2ZW50LCBzbyBzZXQgdGhhdCBmbGFnLlxyXG5mdW5jdGlvbiB3cml0ZU9yQnVmZmVyKHN0cmVhbSwgc3RhdGUsIGlzQnVmLCBjaHVuaywgZW5jb2RpbmcsIGNiKSB7XHJcbiAgaWYgKCFpc0J1Zikge1xyXG4gICAgdmFyIG5ld0NodW5rID0gZGVjb2RlQ2h1bmsoc3RhdGUsIGNodW5rLCBlbmNvZGluZyk7XHJcbiAgICBpZiAoY2h1bmsgIT09IG5ld0NodW5rKSB7XHJcbiAgICAgIGlzQnVmID0gdHJ1ZTtcclxuICAgICAgZW5jb2RpbmcgPSAnYnVmZmVyJztcclxuICAgICAgY2h1bmsgPSBuZXdDaHVuaztcclxuICAgIH1cclxuICB9XHJcbiAgdmFyIGxlbiA9IHN0YXRlLm9iamVjdE1vZGUgPyAxIDogY2h1bmsubGVuZ3RoO1xyXG5cclxuICBzdGF0ZS5sZW5ndGggKz0gbGVuO1xyXG5cclxuICB2YXIgcmV0ID0gc3RhdGUubGVuZ3RoIDwgc3RhdGUuaGlnaFdhdGVyTWFyaztcclxuICAvLyB3ZSBtdXN0IGVuc3VyZSB0aGF0IHByZXZpb3VzIG5lZWREcmFpbiB3aWxsIG5vdCBiZSByZXNldCB0byBmYWxzZS5cclxuICBpZiAoIXJldCkgc3RhdGUubmVlZERyYWluID0gdHJ1ZTtcclxuXHJcbiAgaWYgKHN0YXRlLndyaXRpbmcgfHwgc3RhdGUuY29ya2VkKSB7XHJcbiAgICB2YXIgbGFzdCA9IHN0YXRlLmxhc3RCdWZmZXJlZFJlcXVlc3Q7XHJcbiAgICBzdGF0ZS5sYXN0QnVmZmVyZWRSZXF1ZXN0ID0ge1xyXG4gICAgICBjaHVuazogY2h1bmssXHJcbiAgICAgIGVuY29kaW5nOiBlbmNvZGluZyxcclxuICAgICAgaXNCdWY6IGlzQnVmLFxyXG4gICAgICBjYWxsYmFjazogY2IsXHJcbiAgICAgIG5leHQ6IG51bGxcclxuICAgIH07XHJcbiAgICBpZiAobGFzdCkge1xyXG4gICAgICBsYXN0Lm5leHQgPSBzdGF0ZS5sYXN0QnVmZmVyZWRSZXF1ZXN0O1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0ID0gc3RhdGUubGFzdEJ1ZmZlcmVkUmVxdWVzdDtcclxuICAgIH1cclxuICAgIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdENvdW50ICs9IDE7XHJcbiAgfSBlbHNlIHtcclxuICAgIGRvV3JpdGUoc3RyZWFtLCBzdGF0ZSwgZmFsc2UsIGxlbiwgY2h1bmssIGVuY29kaW5nLCBjYik7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gcmV0O1xyXG59XHJcblxyXG5mdW5jdGlvbiBkb1dyaXRlKHN0cmVhbSwgc3RhdGUsIHdyaXRldiwgbGVuLCBjaHVuaywgZW5jb2RpbmcsIGNiKSB7XHJcbiAgc3RhdGUud3JpdGVsZW4gPSBsZW47XHJcbiAgc3RhdGUud3JpdGVjYiA9IGNiO1xyXG4gIHN0YXRlLndyaXRpbmcgPSB0cnVlO1xyXG4gIHN0YXRlLnN5bmMgPSB0cnVlO1xyXG4gIGlmICh3cml0ZXYpIHN0cmVhbS5fd3JpdGV2KGNodW5rLCBzdGF0ZS5vbndyaXRlKTtlbHNlIHN0cmVhbS5fd3JpdGUoY2h1bmssIGVuY29kaW5nLCBzdGF0ZS5vbndyaXRlKTtcclxuICBzdGF0ZS5zeW5jID0gZmFsc2U7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIG9ud3JpdGVFcnJvcihzdHJlYW0sIHN0YXRlLCBzeW5jLCBlciwgY2IpIHtcclxuICAtLXN0YXRlLnBlbmRpbmdjYjtcclxuXHJcbiAgaWYgKHN5bmMpIHtcclxuICAgIC8vIGRlZmVyIHRoZSBjYWxsYmFjayBpZiB3ZSBhcmUgYmVpbmcgY2FsbGVkIHN5bmNocm9ub3VzbHlcclxuICAgIC8vIHRvIGF2b2lkIHBpbGluZyB1cCB0aGluZ3Mgb24gdGhlIHN0YWNrXHJcbiAgICBwbmEubmV4dFRpY2soY2IsIGVyKTtcclxuICAgIC8vIHRoaXMgY2FuIGVtaXQgZmluaXNoLCBhbmQgaXQgd2lsbCBhbHdheXMgaGFwcGVuXHJcbiAgICAvLyBhZnRlciBlcnJvclxyXG4gICAgcG5hLm5leHRUaWNrKGZpbmlzaE1heWJlLCBzdHJlYW0sIHN0YXRlKTtcclxuICAgIHN0cmVhbS5fd3JpdGFibGVTdGF0ZS5lcnJvckVtaXR0ZWQgPSB0cnVlO1xyXG4gICAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXIpO1xyXG4gIH0gZWxzZSB7XHJcbiAgICAvLyB0aGUgY2FsbGVyIGV4cGVjdCB0aGlzIHRvIGhhcHBlbiBiZWZvcmUgaWZcclxuICAgIC8vIGl0IGlzIGFzeW5jXHJcbiAgICBjYihlcik7XHJcbiAgICBzdHJlYW0uX3dyaXRhYmxlU3RhdGUuZXJyb3JFbWl0dGVkID0gdHJ1ZTtcclxuICAgIHN0cmVhbS5lbWl0KCdlcnJvcicsIGVyKTtcclxuICAgIC8vIHRoaXMgY2FuIGVtaXQgZmluaXNoLCBidXQgZmluaXNoIG11c3RcclxuICAgIC8vIGFsd2F5cyBmb2xsb3cgZXJyb3JcclxuICAgIGZpbmlzaE1heWJlKHN0cmVhbSwgc3RhdGUpO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gb253cml0ZVN0YXRlVXBkYXRlKHN0YXRlKSB7XHJcbiAgc3RhdGUud3JpdGluZyA9IGZhbHNlO1xyXG4gIHN0YXRlLndyaXRlY2IgPSBudWxsO1xyXG4gIHN0YXRlLmxlbmd0aCAtPSBzdGF0ZS53cml0ZWxlbjtcclxuICBzdGF0ZS53cml0ZWxlbiA9IDA7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIG9ud3JpdGUoc3RyZWFtLCBlcikge1xyXG4gIHZhciBzdGF0ZSA9IHN0cmVhbS5fd3JpdGFibGVTdGF0ZTtcclxuICB2YXIgc3luYyA9IHN0YXRlLnN5bmM7XHJcbiAgdmFyIGNiID0gc3RhdGUud3JpdGVjYjtcclxuXHJcbiAgb253cml0ZVN0YXRlVXBkYXRlKHN0YXRlKTtcclxuXHJcbiAgaWYgKGVyKSBvbndyaXRlRXJyb3Ioc3RyZWFtLCBzdGF0ZSwgc3luYywgZXIsIGNiKTtlbHNlIHtcclxuICAgIC8vIENoZWNrIGlmIHdlJ3JlIGFjdHVhbGx5IHJlYWR5IHRvIGZpbmlzaCwgYnV0IGRvbid0IGVtaXQgeWV0XHJcbiAgICB2YXIgZmluaXNoZWQgPSBuZWVkRmluaXNoKHN0YXRlKTtcclxuXHJcbiAgICBpZiAoIWZpbmlzaGVkICYmICFzdGF0ZS5jb3JrZWQgJiYgIXN0YXRlLmJ1ZmZlclByb2Nlc3NpbmcgJiYgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0KSB7XHJcbiAgICAgIGNsZWFyQnVmZmVyKHN0cmVhbSwgc3RhdGUpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChzeW5jKSB7XHJcbiAgICAgIC8qPHJlcGxhY2VtZW50PiovXHJcbiAgICAgIGFzeW5jV3JpdGUoYWZ0ZXJXcml0ZSwgc3RyZWFtLCBzdGF0ZSwgZmluaXNoZWQsIGNiKTtcclxuICAgICAgLyo8L3JlcGxhY2VtZW50PiovXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBhZnRlcldyaXRlKHN0cmVhbSwgc3RhdGUsIGZpbmlzaGVkLCBjYik7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBhZnRlcldyaXRlKHN0cmVhbSwgc3RhdGUsIGZpbmlzaGVkLCBjYikge1xyXG4gIGlmICghZmluaXNoZWQpIG9ud3JpdGVEcmFpbihzdHJlYW0sIHN0YXRlKTtcclxuICBzdGF0ZS5wZW5kaW5nY2ItLTtcclxuICBjYigpO1xyXG4gIGZpbmlzaE1heWJlKHN0cmVhbSwgc3RhdGUpO1xyXG59XHJcblxyXG4vLyBNdXN0IGZvcmNlIGNhbGxiYWNrIHRvIGJlIGNhbGxlZCBvbiBuZXh0VGljaywgc28gdGhhdCB3ZSBkb24ndFxyXG4vLyBlbWl0ICdkcmFpbicgYmVmb3JlIHRoZSB3cml0ZSgpIGNvbnN1bWVyIGdldHMgdGhlICdmYWxzZScgcmV0dXJuXHJcbi8vIHZhbHVlLCBhbmQgaGFzIGEgY2hhbmNlIHRvIGF0dGFjaCBhICdkcmFpbicgbGlzdGVuZXIuXHJcbmZ1bmN0aW9uIG9ud3JpdGVEcmFpbihzdHJlYW0sIHN0YXRlKSB7XHJcbiAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCAmJiBzdGF0ZS5uZWVkRHJhaW4pIHtcclxuICAgIHN0YXRlLm5lZWREcmFpbiA9IGZhbHNlO1xyXG4gICAgc3RyZWFtLmVtaXQoJ2RyYWluJyk7XHJcbiAgfVxyXG59XHJcblxyXG4vLyBpZiB0aGVyZSdzIHNvbWV0aGluZyBpbiB0aGUgYnVmZmVyIHdhaXRpbmcsIHRoZW4gcHJvY2VzcyBpdFxyXG5mdW5jdGlvbiBjbGVhckJ1ZmZlcihzdHJlYW0sIHN0YXRlKSB7XHJcbiAgc3RhdGUuYnVmZmVyUHJvY2Vzc2luZyA9IHRydWU7XHJcbiAgdmFyIGVudHJ5ID0gc3RhdGUuYnVmZmVyZWRSZXF1ZXN0O1xyXG5cclxuICBpZiAoc3RyZWFtLl93cml0ZXYgJiYgZW50cnkgJiYgZW50cnkubmV4dCkge1xyXG4gICAgLy8gRmFzdCBjYXNlLCB3cml0ZSBldmVyeXRoaW5nIHVzaW5nIF93cml0ZXYoKVxyXG4gICAgdmFyIGwgPSBzdGF0ZS5idWZmZXJlZFJlcXVlc3RDb3VudDtcclxuICAgIHZhciBidWZmZXIgPSBuZXcgQXJyYXkobCk7XHJcbiAgICB2YXIgaG9sZGVyID0gc3RhdGUuY29ya2VkUmVxdWVzdHNGcmVlO1xyXG4gICAgaG9sZGVyLmVudHJ5ID0gZW50cnk7XHJcblxyXG4gICAgdmFyIGNvdW50ID0gMDtcclxuICAgIHZhciBhbGxCdWZmZXJzID0gdHJ1ZTtcclxuICAgIHdoaWxlIChlbnRyeSkge1xyXG4gICAgICBidWZmZXJbY291bnRdID0gZW50cnk7XHJcbiAgICAgIGlmICghZW50cnkuaXNCdWYpIGFsbEJ1ZmZlcnMgPSBmYWxzZTtcclxuICAgICAgZW50cnkgPSBlbnRyeS5uZXh0O1xyXG4gICAgICBjb3VudCArPSAxO1xyXG4gICAgfVxyXG4gICAgYnVmZmVyLmFsbEJ1ZmZlcnMgPSBhbGxCdWZmZXJzO1xyXG5cclxuICAgIGRvV3JpdGUoc3RyZWFtLCBzdGF0ZSwgdHJ1ZSwgc3RhdGUubGVuZ3RoLCBidWZmZXIsICcnLCBob2xkZXIuZmluaXNoKTtcclxuXHJcbiAgICAvLyBkb1dyaXRlIGlzIGFsbW9zdCBhbHdheXMgYXN5bmMsIGRlZmVyIHRoZXNlIHRvIHNhdmUgYSBiaXQgb2YgdGltZVxyXG4gICAgLy8gYXMgdGhlIGhvdCBwYXRoIGVuZHMgd2l0aCBkb1dyaXRlXHJcbiAgICBzdGF0ZS5wZW5kaW5nY2IrKztcclxuICAgIHN0YXRlLmxhc3RCdWZmZXJlZFJlcXVlc3QgPSBudWxsO1xyXG4gICAgaWYgKGhvbGRlci5uZXh0KSB7XHJcbiAgICAgIHN0YXRlLmNvcmtlZFJlcXVlc3RzRnJlZSA9IGhvbGRlci5uZXh0O1xyXG4gICAgICBob2xkZXIubmV4dCA9IG51bGw7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBzdGF0ZS5jb3JrZWRSZXF1ZXN0c0ZyZWUgPSBuZXcgQ29ya2VkUmVxdWVzdChzdGF0ZSk7XHJcbiAgICB9XHJcbiAgICBzdGF0ZS5idWZmZXJlZFJlcXVlc3RDb3VudCA9IDA7XHJcbiAgfSBlbHNlIHtcclxuICAgIC8vIFNsb3cgY2FzZSwgd3JpdGUgY2h1bmtzIG9uZS1ieS1vbmVcclxuICAgIHdoaWxlIChlbnRyeSkge1xyXG4gICAgICB2YXIgY2h1bmsgPSBlbnRyeS5jaHVuaztcclxuICAgICAgdmFyIGVuY29kaW5nID0gZW50cnkuZW5jb2Rpbmc7XHJcbiAgICAgIHZhciBjYiA9IGVudHJ5LmNhbGxiYWNrO1xyXG4gICAgICB2YXIgbGVuID0gc3RhdGUub2JqZWN0TW9kZSA/IDEgOiBjaHVuay5sZW5ndGg7XHJcblxyXG4gICAgICBkb1dyaXRlKHN0cmVhbSwgc3RhdGUsIGZhbHNlLCBsZW4sIGNodW5rLCBlbmNvZGluZywgY2IpO1xyXG4gICAgICBlbnRyeSA9IGVudHJ5Lm5leHQ7XHJcbiAgICAgIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdENvdW50LS07XHJcbiAgICAgIC8vIGlmIHdlIGRpZG4ndCBjYWxsIHRoZSBvbndyaXRlIGltbWVkaWF0ZWx5LCB0aGVuXHJcbiAgICAgIC8vIGl0IG1lYW5zIHRoYXQgd2UgbmVlZCB0byB3YWl0IHVudGlsIGl0IGRvZXMuXHJcbiAgICAgIC8vIGFsc28sIHRoYXQgbWVhbnMgdGhhdCB0aGUgY2h1bmsgYW5kIGNiIGFyZSBjdXJyZW50bHlcclxuICAgICAgLy8gYmVpbmcgcHJvY2Vzc2VkLCBzbyBtb3ZlIHRoZSBidWZmZXIgY291bnRlciBwYXN0IHRoZW0uXHJcbiAgICAgIGlmIChzdGF0ZS53cml0aW5nKSB7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpZiAoZW50cnkgPT09IG51bGwpIHN0YXRlLmxhc3RCdWZmZXJlZFJlcXVlc3QgPSBudWxsO1xyXG4gIH1cclxuXHJcbiAgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0ID0gZW50cnk7XHJcbiAgc3RhdGUuYnVmZmVyUHJvY2Vzc2luZyA9IGZhbHNlO1xyXG59XHJcblxyXG5Xcml0YWJsZS5wcm90b3R5cGUuX3dyaXRlID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZywgY2IpIHtcclxuICBjYihuZXcgRXJyb3IoJ193cml0ZSgpIGlzIG5vdCBpbXBsZW1lbnRlZCcpKTtcclxufTtcclxuXHJcbldyaXRhYmxlLnByb3RvdHlwZS5fd3JpdGV2ID0gbnVsbDtcclxuXHJcbldyaXRhYmxlLnByb3RvdHlwZS5lbmQgPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nLCBjYikge1xyXG4gIHZhciBzdGF0ZSA9IHRoaXMuX3dyaXRhYmxlU3RhdGU7XHJcblxyXG4gIGlmICh0eXBlb2YgY2h1bmsgPT09ICdmdW5jdGlvbicpIHtcclxuICAgIGNiID0gY2h1bms7XHJcbiAgICBjaHVuayA9IG51bGw7XHJcbiAgICBlbmNvZGluZyA9IG51bGw7XHJcbiAgfSBlbHNlIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdmdW5jdGlvbicpIHtcclxuICAgIGNiID0gZW5jb2Rpbmc7XHJcbiAgICBlbmNvZGluZyA9IG51bGw7XHJcbiAgfVxyXG5cclxuICBpZiAoY2h1bmsgIT09IG51bGwgJiYgY2h1bmsgIT09IHVuZGVmaW5lZCkgdGhpcy53cml0ZShjaHVuaywgZW5jb2RpbmcpO1xyXG5cclxuICAvLyAuZW5kKCkgZnVsbHkgdW5jb3Jrc1xyXG4gIGlmIChzdGF0ZS5jb3JrZWQpIHtcclxuICAgIHN0YXRlLmNvcmtlZCA9IDE7XHJcbiAgICB0aGlzLnVuY29yaygpO1xyXG4gIH1cclxuXHJcbiAgLy8gaWdub3JlIHVubmVjZXNzYXJ5IGVuZCgpIGNhbGxzLlxyXG4gIGlmICghc3RhdGUuZW5kaW5nICYmICFzdGF0ZS5maW5pc2hlZCkgZW5kV3JpdGFibGUodGhpcywgc3RhdGUsIGNiKTtcclxufTtcclxuXHJcbmZ1bmN0aW9uIG5lZWRGaW5pc2goc3RhdGUpIHtcclxuICByZXR1cm4gc3RhdGUuZW5kaW5nICYmIHN0YXRlLmxlbmd0aCA9PT0gMCAmJiBzdGF0ZS5idWZmZXJlZFJlcXVlc3QgPT09IG51bGwgJiYgIXN0YXRlLmZpbmlzaGVkICYmICFzdGF0ZS53cml0aW5nO1xyXG59XHJcbmZ1bmN0aW9uIGNhbGxGaW5hbChzdHJlYW0sIHN0YXRlKSB7XHJcbiAgc3RyZWFtLl9maW5hbChmdW5jdGlvbiAoZXJyKSB7XHJcbiAgICBzdGF0ZS5wZW5kaW5nY2ItLTtcclxuICAgIGlmIChlcnIpIHtcclxuICAgICAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXJyKTtcclxuICAgIH1cclxuICAgIHN0YXRlLnByZWZpbmlzaGVkID0gdHJ1ZTtcclxuICAgIHN0cmVhbS5lbWl0KCdwcmVmaW5pc2gnKTtcclxuICAgIGZpbmlzaE1heWJlKHN0cmVhbSwgc3RhdGUpO1xyXG4gIH0pO1xyXG59XHJcbmZ1bmN0aW9uIHByZWZpbmlzaChzdHJlYW0sIHN0YXRlKSB7XHJcbiAgaWYgKCFzdGF0ZS5wcmVmaW5pc2hlZCAmJiAhc3RhdGUuZmluYWxDYWxsZWQpIHtcclxuICAgIGlmICh0eXBlb2Ygc3RyZWFtLl9maW5hbCA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICBzdGF0ZS5wZW5kaW5nY2IrKztcclxuICAgICAgc3RhdGUuZmluYWxDYWxsZWQgPSB0cnVlO1xyXG4gICAgICBwbmEubmV4dFRpY2soY2FsbEZpbmFsLCBzdHJlYW0sIHN0YXRlKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHN0YXRlLnByZWZpbmlzaGVkID0gdHJ1ZTtcclxuICAgICAgc3RyZWFtLmVtaXQoJ3ByZWZpbmlzaCcpO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gZmluaXNoTWF5YmUoc3RyZWFtLCBzdGF0ZSkge1xyXG4gIHZhciBuZWVkID0gbmVlZEZpbmlzaChzdGF0ZSk7XHJcbiAgaWYgKG5lZWQpIHtcclxuICAgIHByZWZpbmlzaChzdHJlYW0sIHN0YXRlKTtcclxuICAgIGlmIChzdGF0ZS5wZW5kaW5nY2IgPT09IDApIHtcclxuICAgICAgc3RhdGUuZmluaXNoZWQgPSB0cnVlO1xyXG4gICAgICBzdHJlYW0uZW1pdCgnZmluaXNoJyk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiBuZWVkO1xyXG59XHJcblxyXG5mdW5jdGlvbiBlbmRXcml0YWJsZShzdHJlYW0sIHN0YXRlLCBjYikge1xyXG4gIHN0YXRlLmVuZGluZyA9IHRydWU7XHJcbiAgZmluaXNoTWF5YmUoc3RyZWFtLCBzdGF0ZSk7XHJcbiAgaWYgKGNiKSB7XHJcbiAgICBpZiAoc3RhdGUuZmluaXNoZWQpIHBuYS5uZXh0VGljayhjYik7ZWxzZSBzdHJlYW0ub25jZSgnZmluaXNoJywgY2IpO1xyXG4gIH1cclxuICBzdGF0ZS5lbmRlZCA9IHRydWU7XHJcbiAgc3RyZWFtLndyaXRhYmxlID0gZmFsc2U7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIG9uQ29ya2VkRmluaXNoKGNvcmtSZXEsIHN0YXRlLCBlcnIpIHtcclxuICB2YXIgZW50cnkgPSBjb3JrUmVxLmVudHJ5O1xyXG4gIGNvcmtSZXEuZW50cnkgPSBudWxsO1xyXG4gIHdoaWxlIChlbnRyeSkge1xyXG4gICAgdmFyIGNiID0gZW50cnkuY2FsbGJhY2s7XHJcbiAgICBzdGF0ZS5wZW5kaW5nY2ItLTtcclxuICAgIGNiKGVycik7XHJcbiAgICBlbnRyeSA9IGVudHJ5Lm5leHQ7XHJcbiAgfVxyXG4gIGlmIChzdGF0ZS5jb3JrZWRSZXF1ZXN0c0ZyZWUpIHtcclxuICAgIHN0YXRlLmNvcmtlZFJlcXVlc3RzRnJlZS5uZXh0ID0gY29ya1JlcTtcclxuICB9IGVsc2Uge1xyXG4gICAgc3RhdGUuY29ya2VkUmVxdWVzdHNGcmVlID0gY29ya1JlcTtcclxuICB9XHJcbn1cclxuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShXcml0YWJsZS5wcm90b3R5cGUsICdkZXN0cm95ZWQnLCB7XHJcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICBpZiAodGhpcy5fd3JpdGFibGVTdGF0ZSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIHJldHVybiB0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZDtcclxuICB9LFxyXG4gIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAvLyB3ZSBpZ25vcmUgdGhlIHZhbHVlIGlmIHRoZSBzdHJlYW1cclxuICAgIC8vIGhhcyBub3QgYmVlbiBpbml0aWFsaXplZCB5ZXRcclxuICAgIGlmICghdGhpcy5fd3JpdGFibGVTdGF0ZSkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgLy8gYmFja3dhcmQgY29tcGF0aWJpbGl0eSwgdGhlIHVzZXIgaXMgZXhwbGljaXRseVxyXG4gICAgLy8gbWFuYWdpbmcgZGVzdHJveWVkXHJcbiAgICB0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZCA9IHZhbHVlO1xyXG4gIH1cclxufSk7XHJcblxyXG5Xcml0YWJsZS5wcm90b3R5cGUuZGVzdHJveSA9IGRlc3Ryb3lJbXBsLmRlc3Ryb3k7XHJcbldyaXRhYmxlLnByb3RvdHlwZS5fdW5kZXN0cm95ID0gZGVzdHJveUltcGwudW5kZXN0cm95O1xyXG5Xcml0YWJsZS5wcm90b3R5cGUuX2Rlc3Ryb3kgPSBmdW5jdGlvbiAoZXJyLCBjYikge1xyXG4gIHRoaXMuZW5kKCk7XHJcbiAgY2IoZXJyKTtcclxufTsiLCJ2YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoYXJyKSB7XHJcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwoYXJyKSA9PSAnW29iamVjdCBBcnJheV0nO1xyXG59O1xyXG4iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cclxuLy9cclxuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcclxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxyXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcclxuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxyXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XHJcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxyXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcclxuLy9cclxuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcclxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXHJcbi8vXHJcbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1NcclxuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxyXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXHJcbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxyXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1JcclxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxyXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxyXG5cclxuJ3VzZSBzdHJpY3QnO1xyXG5cclxuLyo8cmVwbGFjZW1lbnQ+Ki9cclxuXHJcbnZhciBwbmEgPSByZXF1aXJlKCdwcm9jZXNzLW5leHRpY2stYXJncycpO1xyXG4vKjwvcmVwbGFjZW1lbnQ+Ki9cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gUmVhZGFibGU7XHJcblxyXG4vKjxyZXBsYWNlbWVudD4qL1xyXG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJ2lzYXJyYXknKTtcclxuLyo8L3JlcGxhY2VtZW50PiovXHJcblxyXG4vKjxyZXBsYWNlbWVudD4qL1xyXG52YXIgRHVwbGV4O1xyXG4vKjwvcmVwbGFjZW1lbnQ+Ki9cclxuXHJcblJlYWRhYmxlLlJlYWRhYmxlU3RhdGUgPSBSZWFkYWJsZVN0YXRlO1xyXG5cclxuLyo8cmVwbGFjZW1lbnQ+Ki9cclxudmFyIEVFID0gcmVxdWlyZSgnZXZlbnRzJykuRXZlbnRFbWl0dGVyO1xyXG5cclxudmFyIEVFbGlzdGVuZXJDb3VudCA9IGZ1bmN0aW9uIChlbWl0dGVyLCB0eXBlKSB7XHJcbiAgcmV0dXJuIGVtaXR0ZXIubGlzdGVuZXJzKHR5cGUpLmxlbmd0aDtcclxufTtcclxuLyo8L3JlcGxhY2VtZW50PiovXHJcblxyXG4vKjxyZXBsYWNlbWVudD4qL1xyXG52YXIgU3RyZWFtID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9zdHJlYW1zL3N0cmVhbScpO1xyXG4vKjwvcmVwbGFjZW1lbnQ+Ki9cclxuXHJcbi8qPHJlcGxhY2VtZW50PiovXHJcblxyXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXI7XHJcbnZhciBPdXJVaW50OEFycmF5ID0gZ2xvYmFsLlVpbnQ4QXJyYXkgfHwgZnVuY3Rpb24gKCkge307XHJcbmZ1bmN0aW9uIF91aW50OEFycmF5VG9CdWZmZXIoY2h1bmspIHtcclxuICByZXR1cm4gQnVmZmVyLmZyb20oY2h1bmspO1xyXG59XHJcbmZ1bmN0aW9uIF9pc1VpbnQ4QXJyYXkob2JqKSB7XHJcbiAgcmV0dXJuIEJ1ZmZlci5pc0J1ZmZlcihvYmopIHx8IG9iaiBpbnN0YW5jZW9mIE91clVpbnQ4QXJyYXk7XHJcbn1cclxuXHJcbi8qPC9yZXBsYWNlbWVudD4qL1xyXG5cclxuLyo8cmVwbGFjZW1lbnQ+Ki9cclxudmFyIHV0aWwgPSByZXF1aXJlKCdjb3JlLXV0aWwtaXMnKTtcclxudXRpbC5pbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XHJcbi8qPC9yZXBsYWNlbWVudD4qL1xyXG5cclxuLyo8cmVwbGFjZW1lbnQ+Ki9cclxudmFyIGRlYnVnVXRpbCA9IHJlcXVpcmUoJ3V0aWwnKTtcclxudmFyIGRlYnVnID0gdm9pZCAwO1xyXG5pZiAoZGVidWdVdGlsICYmIGRlYnVnVXRpbC5kZWJ1Z2xvZykge1xyXG4gIGRlYnVnID0gZGVidWdVdGlsLmRlYnVnbG9nKCdzdHJlYW0nKTtcclxufSBlbHNlIHtcclxuICBkZWJ1ZyA9IGZ1bmN0aW9uICgpIHt9O1xyXG59XHJcbi8qPC9yZXBsYWNlbWVudD4qL1xyXG5cclxudmFyIEJ1ZmZlckxpc3QgPSByZXF1aXJlKCcuL2ludGVybmFsL3N0cmVhbXMvQnVmZmVyTGlzdCcpO1xyXG52YXIgZGVzdHJveUltcGwgPSByZXF1aXJlKCcuL2ludGVybmFsL3N0cmVhbXMvZGVzdHJveScpO1xyXG52YXIgU3RyaW5nRGVjb2RlcjtcclxuXHJcbnV0aWwuaW5oZXJpdHMoUmVhZGFibGUsIFN0cmVhbSk7XHJcblxyXG52YXIga1Byb3h5RXZlbnRzID0gWydlcnJvcicsICdjbG9zZScsICdkZXN0cm95JywgJ3BhdXNlJywgJ3Jlc3VtZSddO1xyXG5cclxuZnVuY3Rpb24gcHJlcGVuZExpc3RlbmVyKGVtaXR0ZXIsIGV2ZW50LCBmbikge1xyXG4gIC8vIFNhZGx5IHRoaXMgaXMgbm90IGNhY2hlYWJsZSBhcyBzb21lIGxpYnJhcmllcyBidW5kbGUgdGhlaXIgb3duXHJcbiAgLy8gZXZlbnQgZW1pdHRlciBpbXBsZW1lbnRhdGlvbiB3aXRoIHRoZW0uXHJcbiAgaWYgKHR5cGVvZiBlbWl0dGVyLnByZXBlbmRMaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJykgcmV0dXJuIGVtaXR0ZXIucHJlcGVuZExpc3RlbmVyKGV2ZW50LCBmbik7XHJcblxyXG4gIC8vIFRoaXMgaXMgYSBoYWNrIHRvIG1ha2Ugc3VyZSB0aGF0IG91ciBlcnJvciBoYW5kbGVyIGlzIGF0dGFjaGVkIGJlZm9yZSBhbnlcclxuICAvLyB1c2VybGFuZCBvbmVzLiAgTkVWRVIgRE8gVEhJUy4gVGhpcyBpcyBoZXJlIG9ubHkgYmVjYXVzZSB0aGlzIGNvZGUgbmVlZHNcclxuICAvLyB0byBjb250aW51ZSB0byB3b3JrIHdpdGggb2xkZXIgdmVyc2lvbnMgb2YgTm9kZS5qcyB0aGF0IGRvIG5vdCBpbmNsdWRlXHJcbiAgLy8gdGhlIHByZXBlbmRMaXN0ZW5lcigpIG1ldGhvZC4gVGhlIGdvYWwgaXMgdG8gZXZlbnR1YWxseSByZW1vdmUgdGhpcyBoYWNrLlxyXG4gIGlmICghZW1pdHRlci5fZXZlbnRzIHx8ICFlbWl0dGVyLl9ldmVudHNbZXZlbnRdKSBlbWl0dGVyLm9uKGV2ZW50LCBmbik7ZWxzZSBpZiAoaXNBcnJheShlbWl0dGVyLl9ldmVudHNbZXZlbnRdKSkgZW1pdHRlci5fZXZlbnRzW2V2ZW50XS51bnNoaWZ0KGZuKTtlbHNlIGVtaXR0ZXIuX2V2ZW50c1tldmVudF0gPSBbZm4sIGVtaXR0ZXIuX2V2ZW50c1tldmVudF1dO1xyXG59XHJcblxyXG5mdW5jdGlvbiBSZWFkYWJsZVN0YXRlKG9wdGlvbnMsIHN0cmVhbSkge1xyXG4gIER1cGxleCA9IER1cGxleCB8fCByZXF1aXJlKCcuL19zdHJlYW1fZHVwbGV4Jyk7XHJcblxyXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xyXG5cclxuICAvLyBEdXBsZXggc3RyZWFtcyBhcmUgYm90aCByZWFkYWJsZSBhbmQgd3JpdGFibGUsIGJ1dCBzaGFyZVxyXG4gIC8vIHRoZSBzYW1lIG9wdGlvbnMgb2JqZWN0LlxyXG4gIC8vIEhvd2V2ZXIsIHNvbWUgY2FzZXMgcmVxdWlyZSBzZXR0aW5nIG9wdGlvbnMgdG8gZGlmZmVyZW50XHJcbiAgLy8gdmFsdWVzIGZvciB0aGUgcmVhZGFibGUgYW5kIHRoZSB3cml0YWJsZSBzaWRlcyBvZiB0aGUgZHVwbGV4IHN0cmVhbS5cclxuICAvLyBUaGVzZSBvcHRpb25zIGNhbiBiZSBwcm92aWRlZCBzZXBhcmF0ZWx5IGFzIHJlYWRhYmxlWFhYIGFuZCB3cml0YWJsZVhYWC5cclxuICB2YXIgaXNEdXBsZXggPSBzdHJlYW0gaW5zdGFuY2VvZiBEdXBsZXg7XHJcblxyXG4gIC8vIG9iamVjdCBzdHJlYW0gZmxhZy4gVXNlZCB0byBtYWtlIHJlYWQobikgaWdub3JlIG4gYW5kIHRvXHJcbiAgLy8gbWFrZSBhbGwgdGhlIGJ1ZmZlciBtZXJnaW5nIGFuZCBsZW5ndGggY2hlY2tzIGdvIGF3YXlcclxuICB0aGlzLm9iamVjdE1vZGUgPSAhIW9wdGlvbnMub2JqZWN0TW9kZTtcclxuXHJcbiAgaWYgKGlzRHVwbGV4KSB0aGlzLm9iamVjdE1vZGUgPSB0aGlzLm9iamVjdE1vZGUgfHwgISFvcHRpb25zLnJlYWRhYmxlT2JqZWN0TW9kZTtcclxuXHJcbiAgLy8gdGhlIHBvaW50IGF0IHdoaWNoIGl0IHN0b3BzIGNhbGxpbmcgX3JlYWQoKSB0byBmaWxsIHRoZSBidWZmZXJcclxuICAvLyBOb3RlOiAwIGlzIGEgdmFsaWQgdmFsdWUsIG1lYW5zIFwiZG9uJ3QgY2FsbCBfcmVhZCBwcmVlbXB0aXZlbHkgZXZlclwiXHJcbiAgdmFyIGh3bSA9IG9wdGlvbnMuaGlnaFdhdGVyTWFyaztcclxuICB2YXIgcmVhZGFibGVId20gPSBvcHRpb25zLnJlYWRhYmxlSGlnaFdhdGVyTWFyaztcclxuICB2YXIgZGVmYXVsdEh3bSA9IHRoaXMub2JqZWN0TW9kZSA/IDE2IDogMTYgKiAxMDI0O1xyXG5cclxuICBpZiAoaHdtIHx8IGh3bSA9PT0gMCkgdGhpcy5oaWdoV2F0ZXJNYXJrID0gaHdtO2Vsc2UgaWYgKGlzRHVwbGV4ICYmIChyZWFkYWJsZUh3bSB8fCByZWFkYWJsZUh3bSA9PT0gMCkpIHRoaXMuaGlnaFdhdGVyTWFyayA9IHJlYWRhYmxlSHdtO2Vsc2UgdGhpcy5oaWdoV2F0ZXJNYXJrID0gZGVmYXVsdEh3bTtcclxuXHJcbiAgLy8gY2FzdCB0byBpbnRzLlxyXG4gIHRoaXMuaGlnaFdhdGVyTWFyayA9IE1hdGguZmxvb3IodGhpcy5oaWdoV2F0ZXJNYXJrKTtcclxuXHJcbiAgLy8gQSBsaW5rZWQgbGlzdCBpcyB1c2VkIHRvIHN0b3JlIGRhdGEgY2h1bmtzIGluc3RlYWQgb2YgYW4gYXJyYXkgYmVjYXVzZSB0aGVcclxuICAvLyBsaW5rZWQgbGlzdCBjYW4gcmVtb3ZlIGVsZW1lbnRzIGZyb20gdGhlIGJlZ2lubmluZyBmYXN0ZXIgdGhhblxyXG4gIC8vIGFycmF5LnNoaWZ0KClcclxuICB0aGlzLmJ1ZmZlciA9IG5ldyBCdWZmZXJMaXN0KCk7XHJcbiAgdGhpcy5sZW5ndGggPSAwO1xyXG4gIHRoaXMucGlwZXMgPSBudWxsO1xyXG4gIHRoaXMucGlwZXNDb3VudCA9IDA7XHJcbiAgdGhpcy5mbG93aW5nID0gbnVsbDtcclxuICB0aGlzLmVuZGVkID0gZmFsc2U7XHJcbiAgdGhpcy5lbmRFbWl0dGVkID0gZmFsc2U7XHJcbiAgdGhpcy5yZWFkaW5nID0gZmFsc2U7XHJcblxyXG4gIC8vIGEgZmxhZyB0byBiZSBhYmxlIHRvIHRlbGwgaWYgdGhlIGV2ZW50ICdyZWFkYWJsZScvJ2RhdGEnIGlzIGVtaXR0ZWRcclxuICAvLyBpbW1lZGlhdGVseSwgb3Igb24gYSBsYXRlciB0aWNrLiAgV2Ugc2V0IHRoaXMgdG8gdHJ1ZSBhdCBmaXJzdCwgYmVjYXVzZVxyXG4gIC8vIGFueSBhY3Rpb25zIHRoYXQgc2hvdWxkbid0IGhhcHBlbiB1bnRpbCBcImxhdGVyXCIgc2hvdWxkIGdlbmVyYWxseSBhbHNvXHJcbiAgLy8gbm90IGhhcHBlbiBiZWZvcmUgdGhlIGZpcnN0IHJlYWQgY2FsbC5cclxuICB0aGlzLnN5bmMgPSB0cnVlO1xyXG5cclxuICAvLyB3aGVuZXZlciB3ZSByZXR1cm4gbnVsbCwgdGhlbiB3ZSBzZXQgYSBmbGFnIHRvIHNheVxyXG4gIC8vIHRoYXQgd2UncmUgYXdhaXRpbmcgYSAncmVhZGFibGUnIGV2ZW50IGVtaXNzaW9uLlxyXG4gIHRoaXMubmVlZFJlYWRhYmxlID0gZmFsc2U7XHJcbiAgdGhpcy5lbWl0dGVkUmVhZGFibGUgPSBmYWxzZTtcclxuICB0aGlzLnJlYWRhYmxlTGlzdGVuaW5nID0gZmFsc2U7XHJcbiAgdGhpcy5yZXN1bWVTY2hlZHVsZWQgPSBmYWxzZTtcclxuXHJcbiAgLy8gaGFzIGl0IGJlZW4gZGVzdHJveWVkXHJcbiAgdGhpcy5kZXN0cm95ZWQgPSBmYWxzZTtcclxuXHJcbiAgLy8gQ3J5cHRvIGlzIGtpbmQgb2Ygb2xkIGFuZCBjcnVzdHkuICBIaXN0b3JpY2FsbHksIGl0cyBkZWZhdWx0IHN0cmluZ1xyXG4gIC8vIGVuY29kaW5nIGlzICdiaW5hcnknIHNvIHdlIGhhdmUgdG8gbWFrZSB0aGlzIGNvbmZpZ3VyYWJsZS5cclxuICAvLyBFdmVyeXRoaW5nIGVsc2UgaW4gdGhlIHVuaXZlcnNlIHVzZXMgJ3V0ZjgnLCB0aG91Z2guXHJcbiAgdGhpcy5kZWZhdWx0RW5jb2RpbmcgPSBvcHRpb25zLmRlZmF1bHRFbmNvZGluZyB8fCAndXRmOCc7XHJcblxyXG4gIC8vIHRoZSBudW1iZXIgb2Ygd3JpdGVycyB0aGF0IGFyZSBhd2FpdGluZyBhIGRyYWluIGV2ZW50IGluIC5waXBlKClzXHJcbiAgdGhpcy5hd2FpdERyYWluID0gMDtcclxuXHJcbiAgLy8gaWYgdHJ1ZSwgYSBtYXliZVJlYWRNb3JlIGhhcyBiZWVuIHNjaGVkdWxlZFxyXG4gIHRoaXMucmVhZGluZ01vcmUgPSBmYWxzZTtcclxuXHJcbiAgdGhpcy5kZWNvZGVyID0gbnVsbDtcclxuICB0aGlzLmVuY29kaW5nID0gbnVsbDtcclxuICBpZiAob3B0aW9ucy5lbmNvZGluZykge1xyXG4gICAgaWYgKCFTdHJpbmdEZWNvZGVyKSBTdHJpbmdEZWNvZGVyID0gcmVxdWlyZSgnc3RyaW5nX2RlY29kZXIvJykuU3RyaW5nRGVjb2RlcjtcclxuICAgIHRoaXMuZGVjb2RlciA9IG5ldyBTdHJpbmdEZWNvZGVyKG9wdGlvbnMuZW5jb2RpbmcpO1xyXG4gICAgdGhpcy5lbmNvZGluZyA9IG9wdGlvbnMuZW5jb2Rpbmc7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBSZWFkYWJsZShvcHRpb25zKSB7XHJcbiAgRHVwbGV4ID0gRHVwbGV4IHx8IHJlcXVpcmUoJy4vX3N0cmVhbV9kdXBsZXgnKTtcclxuXHJcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFJlYWRhYmxlKSkgcmV0dXJuIG5ldyBSZWFkYWJsZShvcHRpb25zKTtcclxuXHJcbiAgdGhpcy5fcmVhZGFibGVTdGF0ZSA9IG5ldyBSZWFkYWJsZVN0YXRlKG9wdGlvbnMsIHRoaXMpO1xyXG5cclxuICAvLyBsZWdhY3lcclxuICB0aGlzLnJlYWRhYmxlID0gdHJ1ZTtcclxuXHJcbiAgaWYgKG9wdGlvbnMpIHtcclxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5yZWFkID09PSAnZnVuY3Rpb24nKSB0aGlzLl9yZWFkID0gb3B0aW9ucy5yZWFkO1xyXG5cclxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5kZXN0cm95ID09PSAnZnVuY3Rpb24nKSB0aGlzLl9kZXN0cm95ID0gb3B0aW9ucy5kZXN0cm95O1xyXG4gIH1cclxuXHJcbiAgU3RyZWFtLmNhbGwodGhpcyk7XHJcbn1cclxuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZWFkYWJsZS5wcm90b3R5cGUsICdkZXN0cm95ZWQnLCB7XHJcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICBpZiAodGhpcy5fcmVhZGFibGVTdGF0ZSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIHJldHVybiB0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZDtcclxuICB9LFxyXG4gIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAvLyB3ZSBpZ25vcmUgdGhlIHZhbHVlIGlmIHRoZSBzdHJlYW1cclxuICAgIC8vIGhhcyBub3QgYmVlbiBpbml0aWFsaXplZCB5ZXRcclxuICAgIGlmICghdGhpcy5fcmVhZGFibGVTdGF0ZSkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgLy8gYmFja3dhcmQgY29tcGF0aWJpbGl0eSwgdGhlIHVzZXIgaXMgZXhwbGljaXRseVxyXG4gICAgLy8gbWFuYWdpbmcgZGVzdHJveWVkXHJcbiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZCA9IHZhbHVlO1xyXG4gIH1cclxufSk7XHJcblxyXG5SZWFkYWJsZS5wcm90b3R5cGUuZGVzdHJveSA9IGRlc3Ryb3lJbXBsLmRlc3Ryb3k7XHJcblJlYWRhYmxlLnByb3RvdHlwZS5fdW5kZXN0cm95ID0gZGVzdHJveUltcGwudW5kZXN0cm95O1xyXG5SZWFkYWJsZS5wcm90b3R5cGUuX2Rlc3Ryb3kgPSBmdW5jdGlvbiAoZXJyLCBjYikge1xyXG4gIHRoaXMucHVzaChudWxsKTtcclxuICBjYihlcnIpO1xyXG59O1xyXG5cclxuLy8gTWFudWFsbHkgc2hvdmUgc29tZXRoaW5nIGludG8gdGhlIHJlYWQoKSBidWZmZXIuXHJcbi8vIFRoaXMgcmV0dXJucyB0cnVlIGlmIHRoZSBoaWdoV2F0ZXJNYXJrIGhhcyBub3QgYmVlbiBoaXQgeWV0LFxyXG4vLyBzaW1pbGFyIHRvIGhvdyBXcml0YWJsZS53cml0ZSgpIHJldHVybnMgdHJ1ZSBpZiB5b3Ugc2hvdWxkXHJcbi8vIHdyaXRlKCkgc29tZSBtb3JlLlxyXG5SZWFkYWJsZS5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcpIHtcclxuICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xyXG4gIHZhciBza2lwQ2h1bmtDaGVjaztcclxuXHJcbiAgaWYgKCFzdGF0ZS5vYmplY3RNb2RlKSB7XHJcbiAgICBpZiAodHlwZW9mIGNodW5rID09PSAnc3RyaW5nJykge1xyXG4gICAgICBlbmNvZGluZyA9IGVuY29kaW5nIHx8IHN0YXRlLmRlZmF1bHRFbmNvZGluZztcclxuICAgICAgaWYgKGVuY29kaW5nICE9PSBzdGF0ZS5lbmNvZGluZykge1xyXG4gICAgICAgIGNodW5rID0gQnVmZmVyLmZyb20oY2h1bmssIGVuY29kaW5nKTtcclxuICAgICAgICBlbmNvZGluZyA9ICcnO1xyXG4gICAgICB9XHJcbiAgICAgIHNraXBDaHVua0NoZWNrID0gdHJ1ZTtcclxuICAgIH1cclxuICB9IGVsc2Uge1xyXG4gICAgc2tpcENodW5rQ2hlY2sgPSB0cnVlO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHJlYWRhYmxlQWRkQ2h1bmsodGhpcywgY2h1bmssIGVuY29kaW5nLCBmYWxzZSwgc2tpcENodW5rQ2hlY2spO1xyXG59O1xyXG5cclxuLy8gVW5zaGlmdCBzaG91bGQgKmFsd2F5cyogYmUgc29tZXRoaW5nIGRpcmVjdGx5IG91dCBvZiByZWFkKClcclxuUmVhZGFibGUucHJvdG90eXBlLnVuc2hpZnQgPSBmdW5jdGlvbiAoY2h1bmspIHtcclxuICByZXR1cm4gcmVhZGFibGVBZGRDaHVuayh0aGlzLCBjaHVuaywgbnVsbCwgdHJ1ZSwgZmFsc2UpO1xyXG59O1xyXG5cclxuZnVuY3Rpb24gcmVhZGFibGVBZGRDaHVuayhzdHJlYW0sIGNodW5rLCBlbmNvZGluZywgYWRkVG9Gcm9udCwgc2tpcENodW5rQ2hlY2spIHtcclxuICB2YXIgc3RhdGUgPSBzdHJlYW0uX3JlYWRhYmxlU3RhdGU7XHJcbiAgaWYgKGNodW5rID09PSBudWxsKSB7XHJcbiAgICBzdGF0ZS5yZWFkaW5nID0gZmFsc2U7XHJcbiAgICBvbkVvZkNodW5rKHN0cmVhbSwgc3RhdGUpO1xyXG4gIH0gZWxzZSB7XHJcbiAgICB2YXIgZXI7XHJcbiAgICBpZiAoIXNraXBDaHVua0NoZWNrKSBlciA9IGNodW5rSW52YWxpZChzdGF0ZSwgY2h1bmspO1xyXG4gICAgaWYgKGVyKSB7XHJcbiAgICAgIHN0cmVhbS5lbWl0KCdlcnJvcicsIGVyKTtcclxuICAgIH0gZWxzZSBpZiAoc3RhdGUub2JqZWN0TW9kZSB8fCBjaHVuayAmJiBjaHVuay5sZW5ndGggPiAwKSB7XHJcbiAgICAgIGlmICh0eXBlb2YgY2h1bmsgIT09ICdzdHJpbmcnICYmICFzdGF0ZS5vYmplY3RNb2RlICYmIE9iamVjdC5nZXRQcm90b3R5cGVPZihjaHVuaykgIT09IEJ1ZmZlci5wcm90b3R5cGUpIHtcclxuICAgICAgICBjaHVuayA9IF91aW50OEFycmF5VG9CdWZmZXIoY2h1bmspO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoYWRkVG9Gcm9udCkge1xyXG4gICAgICAgIGlmIChzdGF0ZS5lbmRFbWl0dGVkKSBzdHJlYW0uZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IoJ3N0cmVhbS51bnNoaWZ0KCkgYWZ0ZXIgZW5kIGV2ZW50JykpO2Vsc2UgYWRkQ2h1bmsoc3RyZWFtLCBzdGF0ZSwgY2h1bmssIHRydWUpO1xyXG4gICAgICB9IGVsc2UgaWYgKHN0YXRlLmVuZGVkKSB7XHJcbiAgICAgICAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgbmV3IEVycm9yKCdzdHJlYW0ucHVzaCgpIGFmdGVyIEVPRicpKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBzdGF0ZS5yZWFkaW5nID0gZmFsc2U7XHJcbiAgICAgICAgaWYgKHN0YXRlLmRlY29kZXIgJiYgIWVuY29kaW5nKSB7XHJcbiAgICAgICAgICBjaHVuayA9IHN0YXRlLmRlY29kZXIud3JpdGUoY2h1bmspO1xyXG4gICAgICAgICAgaWYgKHN0YXRlLm9iamVjdE1vZGUgfHwgY2h1bmsubGVuZ3RoICE9PSAwKSBhZGRDaHVuayhzdHJlYW0sIHN0YXRlLCBjaHVuaywgZmFsc2UpO2Vsc2UgbWF5YmVSZWFkTW9yZShzdHJlYW0sIHN0YXRlKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgYWRkQ2h1bmsoc3RyZWFtLCBzdGF0ZSwgY2h1bmssIGZhbHNlKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSBpZiAoIWFkZFRvRnJvbnQpIHtcclxuICAgICAgc3RhdGUucmVhZGluZyA9IGZhbHNlO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIG5lZWRNb3JlRGF0YShzdGF0ZSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGFkZENodW5rKHN0cmVhbSwgc3RhdGUsIGNodW5rLCBhZGRUb0Zyb250KSB7XHJcbiAgaWYgKHN0YXRlLmZsb3dpbmcgJiYgc3RhdGUubGVuZ3RoID09PSAwICYmICFzdGF0ZS5zeW5jKSB7XHJcbiAgICBzdHJlYW0uZW1pdCgnZGF0YScsIGNodW5rKTtcclxuICAgIHN0cmVhbS5yZWFkKDApO1xyXG4gIH0gZWxzZSB7XHJcbiAgICAvLyB1cGRhdGUgdGhlIGJ1ZmZlciBpbmZvLlxyXG4gICAgc3RhdGUubGVuZ3RoICs9IHN0YXRlLm9iamVjdE1vZGUgPyAxIDogY2h1bmsubGVuZ3RoO1xyXG4gICAgaWYgKGFkZFRvRnJvbnQpIHN0YXRlLmJ1ZmZlci51bnNoaWZ0KGNodW5rKTtlbHNlIHN0YXRlLmJ1ZmZlci5wdXNoKGNodW5rKTtcclxuXHJcbiAgICBpZiAoc3RhdGUubmVlZFJlYWRhYmxlKSBlbWl0UmVhZGFibGUoc3RyZWFtKTtcclxuICB9XHJcbiAgbWF5YmVSZWFkTW9yZShzdHJlYW0sIHN0YXRlKTtcclxufVxyXG5cclxuZnVuY3Rpb24gY2h1bmtJbnZhbGlkKHN0YXRlLCBjaHVuaykge1xyXG4gIHZhciBlcjtcclxuICBpZiAoIV9pc1VpbnQ4QXJyYXkoY2h1bmspICYmIHR5cGVvZiBjaHVuayAhPT0gJ3N0cmluZycgJiYgY2h1bmsgIT09IHVuZGVmaW5lZCAmJiAhc3RhdGUub2JqZWN0TW9kZSkge1xyXG4gICAgZXIgPSBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIG5vbi1zdHJpbmcvYnVmZmVyIGNodW5rJyk7XHJcbiAgfVxyXG4gIHJldHVybiBlcjtcclxufVxyXG5cclxuLy8gaWYgaXQncyBwYXN0IHRoZSBoaWdoIHdhdGVyIG1hcmssIHdlIGNhbiBwdXNoIGluIHNvbWUgbW9yZS5cclxuLy8gQWxzbywgaWYgd2UgaGF2ZSBubyBkYXRhIHlldCwgd2UgY2FuIHN0YW5kIHNvbWVcclxuLy8gbW9yZSBieXRlcy4gIFRoaXMgaXMgdG8gd29yayBhcm91bmQgY2FzZXMgd2hlcmUgaHdtPTAsXHJcbi8vIHN1Y2ggYXMgdGhlIHJlcGwuICBBbHNvLCBpZiB0aGUgcHVzaCgpIHRyaWdnZXJlZCBhXHJcbi8vIHJlYWRhYmxlIGV2ZW50LCBhbmQgdGhlIHVzZXIgY2FsbGVkIHJlYWQobGFyZ2VOdW1iZXIpIHN1Y2ggdGhhdFxyXG4vLyBuZWVkUmVhZGFibGUgd2FzIHNldCwgdGhlbiB3ZSBvdWdodCB0byBwdXNoIG1vcmUsIHNvIHRoYXQgYW5vdGhlclxyXG4vLyAncmVhZGFibGUnIGV2ZW50IHdpbGwgYmUgdHJpZ2dlcmVkLlxyXG5mdW5jdGlvbiBuZWVkTW9yZURhdGEoc3RhdGUpIHtcclxuICByZXR1cm4gIXN0YXRlLmVuZGVkICYmIChzdGF0ZS5uZWVkUmVhZGFibGUgfHwgc3RhdGUubGVuZ3RoIDwgc3RhdGUuaGlnaFdhdGVyTWFyayB8fCBzdGF0ZS5sZW5ndGggPT09IDApO1xyXG59XHJcblxyXG5SZWFkYWJsZS5wcm90b3R5cGUuaXNQYXVzZWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgcmV0dXJuIHRoaXMuX3JlYWRhYmxlU3RhdGUuZmxvd2luZyA9PT0gZmFsc2U7XHJcbn07XHJcblxyXG4vLyBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eS5cclxuUmVhZGFibGUucHJvdG90eXBlLnNldEVuY29kaW5nID0gZnVuY3Rpb24gKGVuYykge1xyXG4gIGlmICghU3RyaW5nRGVjb2RlcikgU3RyaW5nRGVjb2RlciA9IHJlcXVpcmUoJ3N0cmluZ19kZWNvZGVyLycpLlN0cmluZ0RlY29kZXI7XHJcbiAgdGhpcy5fcmVhZGFibGVTdGF0ZS5kZWNvZGVyID0gbmV3IFN0cmluZ0RlY29kZXIoZW5jKTtcclxuICB0aGlzLl9yZWFkYWJsZVN0YXRlLmVuY29kaW5nID0gZW5jO1xyXG4gIHJldHVybiB0aGlzO1xyXG59O1xyXG5cclxuLy8gRG9uJ3QgcmFpc2UgdGhlIGh3bSA+IDhNQlxyXG52YXIgTUFYX0hXTSA9IDB4ODAwMDAwO1xyXG5mdW5jdGlvbiBjb21wdXRlTmV3SGlnaFdhdGVyTWFyayhuKSB7XHJcbiAgaWYgKG4gPj0gTUFYX0hXTSkge1xyXG4gICAgbiA9IE1BWF9IV007XHJcbiAgfSBlbHNlIHtcclxuICAgIC8vIEdldCB0aGUgbmV4dCBoaWdoZXN0IHBvd2VyIG9mIDIgdG8gcHJldmVudCBpbmNyZWFzaW5nIGh3bSBleGNlc3NpdmVseSBpblxyXG4gICAgLy8gdGlueSBhbW91bnRzXHJcbiAgICBuLS07XHJcbiAgICBuIHw9IG4gPj4+IDE7XHJcbiAgICBuIHw9IG4gPj4+IDI7XHJcbiAgICBuIHw9IG4gPj4+IDQ7XHJcbiAgICBuIHw9IG4gPj4+IDg7XHJcbiAgICBuIHw9IG4gPj4+IDE2O1xyXG4gICAgbisrO1xyXG4gIH1cclxuICByZXR1cm4gbjtcclxufVxyXG5cclxuLy8gVGhpcyBmdW5jdGlvbiBpcyBkZXNpZ25lZCB0byBiZSBpbmxpbmFibGUsIHNvIHBsZWFzZSB0YWtlIGNhcmUgd2hlbiBtYWtpbmdcclxuLy8gY2hhbmdlcyB0byB0aGUgZnVuY3Rpb24gYm9keS5cclxuZnVuY3Rpb24gaG93TXVjaFRvUmVhZChuLCBzdGF0ZSkge1xyXG4gIGlmIChuIDw9IDAgfHwgc3RhdGUubGVuZ3RoID09PSAwICYmIHN0YXRlLmVuZGVkKSByZXR1cm4gMDtcclxuICBpZiAoc3RhdGUub2JqZWN0TW9kZSkgcmV0dXJuIDE7XHJcbiAgaWYgKG4gIT09IG4pIHtcclxuICAgIC8vIE9ubHkgZmxvdyBvbmUgYnVmZmVyIGF0IGEgdGltZVxyXG4gICAgaWYgKHN0YXRlLmZsb3dpbmcgJiYgc3RhdGUubGVuZ3RoKSByZXR1cm4gc3RhdGUuYnVmZmVyLmhlYWQuZGF0YS5sZW5ndGg7ZWxzZSByZXR1cm4gc3RhdGUubGVuZ3RoO1xyXG4gIH1cclxuICAvLyBJZiB3ZSdyZSBhc2tpbmcgZm9yIG1vcmUgdGhhbiB0aGUgY3VycmVudCBod20sIHRoZW4gcmFpc2UgdGhlIGh3bS5cclxuICBpZiAobiA+IHN0YXRlLmhpZ2hXYXRlck1hcmspIHN0YXRlLmhpZ2hXYXRlck1hcmsgPSBjb21wdXRlTmV3SGlnaFdhdGVyTWFyayhuKTtcclxuICBpZiAobiA8PSBzdGF0ZS5sZW5ndGgpIHJldHVybiBuO1xyXG4gIC8vIERvbid0IGhhdmUgZW5vdWdoXHJcbiAgaWYgKCFzdGF0ZS5lbmRlZCkge1xyXG4gICAgc3RhdGUubmVlZFJlYWRhYmxlID0gdHJ1ZTtcclxuICAgIHJldHVybiAwO1xyXG4gIH1cclxuICByZXR1cm4gc3RhdGUubGVuZ3RoO1xyXG59XHJcblxyXG4vLyB5b3UgY2FuIG92ZXJyaWRlIGVpdGhlciB0aGlzIG1ldGhvZCwgb3IgdGhlIGFzeW5jIF9yZWFkKG4pIGJlbG93LlxyXG5SZWFkYWJsZS5wcm90b3R5cGUucmVhZCA9IGZ1bmN0aW9uIChuKSB7XHJcbiAgZGVidWcoJ3JlYWQnLCBuKTtcclxuICBuID0gcGFyc2VJbnQobiwgMTApO1xyXG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XHJcbiAgdmFyIG5PcmlnID0gbjtcclxuXHJcbiAgaWYgKG4gIT09IDApIHN0YXRlLmVtaXR0ZWRSZWFkYWJsZSA9IGZhbHNlO1xyXG5cclxuICAvLyBpZiB3ZSdyZSBkb2luZyByZWFkKDApIHRvIHRyaWdnZXIgYSByZWFkYWJsZSBldmVudCwgYnV0IHdlXHJcbiAgLy8gYWxyZWFkeSBoYXZlIGEgYnVuY2ggb2YgZGF0YSBpbiB0aGUgYnVmZmVyLCB0aGVuIGp1c3QgdHJpZ2dlclxyXG4gIC8vIHRoZSAncmVhZGFibGUnIGV2ZW50IGFuZCBtb3ZlIG9uLlxyXG4gIGlmIChuID09PSAwICYmIHN0YXRlLm5lZWRSZWFkYWJsZSAmJiAoc3RhdGUubGVuZ3RoID49IHN0YXRlLmhpZ2hXYXRlck1hcmsgfHwgc3RhdGUuZW5kZWQpKSB7XHJcbiAgICBkZWJ1ZygncmVhZDogZW1pdFJlYWRhYmxlJywgc3RhdGUubGVuZ3RoLCBzdGF0ZS5lbmRlZCk7XHJcbiAgICBpZiAoc3RhdGUubGVuZ3RoID09PSAwICYmIHN0YXRlLmVuZGVkKSBlbmRSZWFkYWJsZSh0aGlzKTtlbHNlIGVtaXRSZWFkYWJsZSh0aGlzKTtcclxuICAgIHJldHVybiBudWxsO1xyXG4gIH1cclxuXHJcbiAgbiA9IGhvd011Y2hUb1JlYWQobiwgc3RhdGUpO1xyXG5cclxuICAvLyBpZiB3ZSd2ZSBlbmRlZCwgYW5kIHdlJ3JlIG5vdyBjbGVhciwgdGhlbiBmaW5pc2ggaXQgdXAuXHJcbiAgaWYgKG4gPT09IDAgJiYgc3RhdGUuZW5kZWQpIHtcclxuICAgIGlmIChzdGF0ZS5sZW5ndGggPT09IDApIGVuZFJlYWRhYmxlKHRoaXMpO1xyXG4gICAgcmV0dXJuIG51bGw7XHJcbiAgfVxyXG5cclxuICAvLyBBbGwgdGhlIGFjdHVhbCBjaHVuayBnZW5lcmF0aW9uIGxvZ2ljIG5lZWRzIHRvIGJlXHJcbiAgLy8gKmJlbG93KiB0aGUgY2FsbCB0byBfcmVhZC4gIFRoZSByZWFzb24gaXMgdGhhdCBpbiBjZXJ0YWluXHJcbiAgLy8gc3ludGhldGljIHN0cmVhbSBjYXNlcywgc3VjaCBhcyBwYXNzdGhyb3VnaCBzdHJlYW1zLCBfcmVhZFxyXG4gIC8vIG1heSBiZSBhIGNvbXBsZXRlbHkgc3luY2hyb25vdXMgb3BlcmF0aW9uIHdoaWNoIG1heSBjaGFuZ2VcclxuICAvLyB0aGUgc3RhdGUgb2YgdGhlIHJlYWQgYnVmZmVyLCBwcm92aWRpbmcgZW5vdWdoIGRhdGEgd2hlblxyXG4gIC8vIGJlZm9yZSB0aGVyZSB3YXMgKm5vdCogZW5vdWdoLlxyXG4gIC8vXHJcbiAgLy8gU28sIHRoZSBzdGVwcyBhcmU6XHJcbiAgLy8gMS4gRmlndXJlIG91dCB3aGF0IHRoZSBzdGF0ZSBvZiB0aGluZ3Mgd2lsbCBiZSBhZnRlciB3ZSBkb1xyXG4gIC8vIGEgcmVhZCBmcm9tIHRoZSBidWZmZXIuXHJcbiAgLy9cclxuICAvLyAyLiBJZiB0aGF0IHJlc3VsdGluZyBzdGF0ZSB3aWxsIHRyaWdnZXIgYSBfcmVhZCwgdGhlbiBjYWxsIF9yZWFkLlxyXG4gIC8vIE5vdGUgdGhhdCB0aGlzIG1heSBiZSBhc3luY2hyb25vdXMsIG9yIHN5bmNocm9ub3VzLiAgWWVzLCBpdCBpc1xyXG4gIC8vIGRlZXBseSB1Z2x5IHRvIHdyaXRlIEFQSXMgdGhpcyB3YXksIGJ1dCB0aGF0IHN0aWxsIGRvZXNuJ3QgbWVhblxyXG4gIC8vIHRoYXQgdGhlIFJlYWRhYmxlIGNsYXNzIHNob3VsZCBiZWhhdmUgaW1wcm9wZXJseSwgYXMgc3RyZWFtcyBhcmVcclxuICAvLyBkZXNpZ25lZCB0byBiZSBzeW5jL2FzeW5jIGFnbm9zdGljLlxyXG4gIC8vIFRha2Ugbm90ZSBpZiB0aGUgX3JlYWQgY2FsbCBpcyBzeW5jIG9yIGFzeW5jIChpZSwgaWYgdGhlIHJlYWQgY2FsbFxyXG4gIC8vIGhhcyByZXR1cm5lZCB5ZXQpLCBzbyB0aGF0IHdlIGtub3cgd2hldGhlciBvciBub3QgaXQncyBzYWZlIHRvIGVtaXRcclxuICAvLyAncmVhZGFibGUnIGV0Yy5cclxuICAvL1xyXG4gIC8vIDMuIEFjdHVhbGx5IHB1bGwgdGhlIHJlcXVlc3RlZCBjaHVua3Mgb3V0IG9mIHRoZSBidWZmZXIgYW5kIHJldHVybi5cclxuXHJcbiAgLy8gaWYgd2UgbmVlZCBhIHJlYWRhYmxlIGV2ZW50LCB0aGVuIHdlIG5lZWQgdG8gZG8gc29tZSByZWFkaW5nLlxyXG4gIHZhciBkb1JlYWQgPSBzdGF0ZS5uZWVkUmVhZGFibGU7XHJcbiAgZGVidWcoJ25lZWQgcmVhZGFibGUnLCBkb1JlYWQpO1xyXG5cclxuICAvLyBpZiB3ZSBjdXJyZW50bHkgaGF2ZSBsZXNzIHRoYW4gdGhlIGhpZ2hXYXRlck1hcmssIHRoZW4gYWxzbyByZWFkIHNvbWVcclxuICBpZiAoc3RhdGUubGVuZ3RoID09PSAwIHx8IHN0YXRlLmxlbmd0aCAtIG4gPCBzdGF0ZS5oaWdoV2F0ZXJNYXJrKSB7XHJcbiAgICBkb1JlYWQgPSB0cnVlO1xyXG4gICAgZGVidWcoJ2xlbmd0aCBsZXNzIHRoYW4gd2F0ZXJtYXJrJywgZG9SZWFkKTtcclxuICB9XHJcblxyXG4gIC8vIGhvd2V2ZXIsIGlmIHdlJ3ZlIGVuZGVkLCB0aGVuIHRoZXJlJ3Mgbm8gcG9pbnQsIGFuZCBpZiB3ZSdyZSBhbHJlYWR5XHJcbiAgLy8gcmVhZGluZywgdGhlbiBpdCdzIHVubmVjZXNzYXJ5LlxyXG4gIGlmIChzdGF0ZS5lbmRlZCB8fCBzdGF0ZS5yZWFkaW5nKSB7XHJcbiAgICBkb1JlYWQgPSBmYWxzZTtcclxuICAgIGRlYnVnKCdyZWFkaW5nIG9yIGVuZGVkJywgZG9SZWFkKTtcclxuICB9IGVsc2UgaWYgKGRvUmVhZCkge1xyXG4gICAgZGVidWcoJ2RvIHJlYWQnKTtcclxuICAgIHN0YXRlLnJlYWRpbmcgPSB0cnVlO1xyXG4gICAgc3RhdGUuc3luYyA9IHRydWU7XHJcbiAgICAvLyBpZiB0aGUgbGVuZ3RoIGlzIGN1cnJlbnRseSB6ZXJvLCB0aGVuIHdlICpuZWVkKiBhIHJlYWRhYmxlIGV2ZW50LlxyXG4gICAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCkgc3RhdGUubmVlZFJlYWRhYmxlID0gdHJ1ZTtcclxuICAgIC8vIGNhbGwgaW50ZXJuYWwgcmVhZCBtZXRob2RcclxuICAgIHRoaXMuX3JlYWQoc3RhdGUuaGlnaFdhdGVyTWFyayk7XHJcbiAgICBzdGF0ZS5zeW5jID0gZmFsc2U7XHJcbiAgICAvLyBJZiBfcmVhZCBwdXNoZWQgZGF0YSBzeW5jaHJvbm91c2x5LCB0aGVuIGByZWFkaW5nYCB3aWxsIGJlIGZhbHNlLFxyXG4gICAgLy8gYW5kIHdlIG5lZWQgdG8gcmUtZXZhbHVhdGUgaG93IG11Y2ggZGF0YSB3ZSBjYW4gcmV0dXJuIHRvIHRoZSB1c2VyLlxyXG4gICAgaWYgKCFzdGF0ZS5yZWFkaW5nKSBuID0gaG93TXVjaFRvUmVhZChuT3JpZywgc3RhdGUpO1xyXG4gIH1cclxuXHJcbiAgdmFyIHJldDtcclxuICBpZiAobiA+IDApIHJldCA9IGZyb21MaXN0KG4sIHN0YXRlKTtlbHNlIHJldCA9IG51bGw7XHJcblxyXG4gIGlmIChyZXQgPT09IG51bGwpIHtcclxuICAgIHN0YXRlLm5lZWRSZWFkYWJsZSA9IHRydWU7XHJcbiAgICBuID0gMDtcclxuICB9IGVsc2Uge1xyXG4gICAgc3RhdGUubGVuZ3RoIC09IG47XHJcbiAgfVxyXG5cclxuICBpZiAoc3RhdGUubGVuZ3RoID09PSAwKSB7XHJcbiAgICAvLyBJZiB3ZSBoYXZlIG5vdGhpbmcgaW4gdGhlIGJ1ZmZlciwgdGhlbiB3ZSB3YW50IHRvIGtub3dcclxuICAgIC8vIGFzIHNvb24gYXMgd2UgKmRvKiBnZXQgc29tZXRoaW5nIGludG8gdGhlIGJ1ZmZlci5cclxuICAgIGlmICghc3RhdGUuZW5kZWQpIHN0YXRlLm5lZWRSZWFkYWJsZSA9IHRydWU7XHJcblxyXG4gICAgLy8gSWYgd2UgdHJpZWQgdG8gcmVhZCgpIHBhc3QgdGhlIEVPRiwgdGhlbiBlbWl0IGVuZCBvbiB0aGUgbmV4dCB0aWNrLlxyXG4gICAgaWYgKG5PcmlnICE9PSBuICYmIHN0YXRlLmVuZGVkKSBlbmRSZWFkYWJsZSh0aGlzKTtcclxuICB9XHJcblxyXG4gIGlmIChyZXQgIT09IG51bGwpIHRoaXMuZW1pdCgnZGF0YScsIHJldCk7XHJcblxyXG4gIHJldHVybiByZXQ7XHJcbn07XHJcblxyXG5mdW5jdGlvbiBvbkVvZkNodW5rKHN0cmVhbSwgc3RhdGUpIHtcclxuICBpZiAoc3RhdGUuZW5kZWQpIHJldHVybjtcclxuICBpZiAoc3RhdGUuZGVjb2Rlcikge1xyXG4gICAgdmFyIGNodW5rID0gc3RhdGUuZGVjb2Rlci5lbmQoKTtcclxuICAgIGlmIChjaHVuayAmJiBjaHVuay5sZW5ndGgpIHtcclxuICAgICAgc3RhdGUuYnVmZmVyLnB1c2goY2h1bmspO1xyXG4gICAgICBzdGF0ZS5sZW5ndGggKz0gc3RhdGUub2JqZWN0TW9kZSA/IDEgOiBjaHVuay5sZW5ndGg7XHJcbiAgICB9XHJcbiAgfVxyXG4gIHN0YXRlLmVuZGVkID0gdHJ1ZTtcclxuXHJcbiAgLy8gZW1pdCAncmVhZGFibGUnIG5vdyB0byBtYWtlIHN1cmUgaXQgZ2V0cyBwaWNrZWQgdXAuXHJcbiAgZW1pdFJlYWRhYmxlKHN0cmVhbSk7XHJcbn1cclxuXHJcbi8vIERvbid0IGVtaXQgcmVhZGFibGUgcmlnaHQgYXdheSBpbiBzeW5jIG1vZGUsIGJlY2F1c2UgdGhpcyBjYW4gdHJpZ2dlclxyXG4vLyBhbm90aGVyIHJlYWQoKSBjYWxsID0+IHN0YWNrIG92ZXJmbG93LiAgVGhpcyB3YXksIGl0IG1pZ2h0IHRyaWdnZXJcclxuLy8gYSBuZXh0VGljayByZWN1cnNpb24gd2FybmluZywgYnV0IHRoYXQncyBub3Qgc28gYmFkLlxyXG5mdW5jdGlvbiBlbWl0UmVhZGFibGUoc3RyZWFtKSB7XHJcbiAgdmFyIHN0YXRlID0gc3RyZWFtLl9yZWFkYWJsZVN0YXRlO1xyXG4gIHN0YXRlLm5lZWRSZWFkYWJsZSA9IGZhbHNlO1xyXG4gIGlmICghc3RhdGUuZW1pdHRlZFJlYWRhYmxlKSB7XHJcbiAgICBkZWJ1ZygnZW1pdFJlYWRhYmxlJywgc3RhdGUuZmxvd2luZyk7XHJcbiAgICBzdGF0ZS5lbWl0dGVkUmVhZGFibGUgPSB0cnVlO1xyXG4gICAgaWYgKHN0YXRlLnN5bmMpIHBuYS5uZXh0VGljayhlbWl0UmVhZGFibGVfLCBzdHJlYW0pO2Vsc2UgZW1pdFJlYWRhYmxlXyhzdHJlYW0pO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gZW1pdFJlYWRhYmxlXyhzdHJlYW0pIHtcclxuICBkZWJ1ZygnZW1pdCByZWFkYWJsZScpO1xyXG4gIHN0cmVhbS5lbWl0KCdyZWFkYWJsZScpO1xyXG4gIGZsb3coc3RyZWFtKTtcclxufVxyXG5cclxuLy8gYXQgdGhpcyBwb2ludCwgdGhlIHVzZXIgaGFzIHByZXN1bWFibHkgc2VlbiB0aGUgJ3JlYWRhYmxlJyBldmVudCxcclxuLy8gYW5kIGNhbGxlZCByZWFkKCkgdG8gY29uc3VtZSBzb21lIGRhdGEuICB0aGF0IG1heSBoYXZlIHRyaWdnZXJlZFxyXG4vLyBpbiB0dXJuIGFub3RoZXIgX3JlYWQobikgY2FsbCwgaW4gd2hpY2ggY2FzZSByZWFkaW5nID0gdHJ1ZSBpZlxyXG4vLyBpdCdzIGluIHByb2dyZXNzLlxyXG4vLyBIb3dldmVyLCBpZiB3ZSdyZSBub3QgZW5kZWQsIG9yIHJlYWRpbmcsIGFuZCB0aGUgbGVuZ3RoIDwgaHdtLFxyXG4vLyB0aGVuIGdvIGFoZWFkIGFuZCB0cnkgdG8gcmVhZCBzb21lIG1vcmUgcHJlZW1wdGl2ZWx5LlxyXG5mdW5jdGlvbiBtYXliZVJlYWRNb3JlKHN0cmVhbSwgc3RhdGUpIHtcclxuICBpZiAoIXN0YXRlLnJlYWRpbmdNb3JlKSB7XHJcbiAgICBzdGF0ZS5yZWFkaW5nTW9yZSA9IHRydWU7XHJcbiAgICBwbmEubmV4dFRpY2sobWF5YmVSZWFkTW9yZV8sIHN0cmVhbSwgc3RhdGUpO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gbWF5YmVSZWFkTW9yZV8oc3RyZWFtLCBzdGF0ZSkge1xyXG4gIHZhciBsZW4gPSBzdGF0ZS5sZW5ndGg7XHJcbiAgd2hpbGUgKCFzdGF0ZS5yZWFkaW5nICYmICFzdGF0ZS5mbG93aW5nICYmICFzdGF0ZS5lbmRlZCAmJiBzdGF0ZS5sZW5ndGggPCBzdGF0ZS5oaWdoV2F0ZXJNYXJrKSB7XHJcbiAgICBkZWJ1ZygnbWF5YmVSZWFkTW9yZSByZWFkIDAnKTtcclxuICAgIHN0cmVhbS5yZWFkKDApO1xyXG4gICAgaWYgKGxlbiA9PT0gc3RhdGUubGVuZ3RoKVxyXG4gICAgICAvLyBkaWRuJ3QgZ2V0IGFueSBkYXRhLCBzdG9wIHNwaW5uaW5nLlxyXG4gICAgICBicmVhaztlbHNlIGxlbiA9IHN0YXRlLmxlbmd0aDtcclxuICB9XHJcbiAgc3RhdGUucmVhZGluZ01vcmUgPSBmYWxzZTtcclxufVxyXG5cclxuLy8gYWJzdHJhY3QgbWV0aG9kLiAgdG8gYmUgb3ZlcnJpZGRlbiBpbiBzcGVjaWZpYyBpbXBsZW1lbnRhdGlvbiBjbGFzc2VzLlxyXG4vLyBjYWxsIGNiKGVyLCBkYXRhKSB3aGVyZSBkYXRhIGlzIDw9IG4gaW4gbGVuZ3RoLlxyXG4vLyBmb3IgdmlydHVhbCAobm9uLXN0cmluZywgbm9uLWJ1ZmZlcikgc3RyZWFtcywgXCJsZW5ndGhcIiBpcyBzb21ld2hhdFxyXG4vLyBhcmJpdHJhcnksIGFuZCBwZXJoYXBzIG5vdCB2ZXJ5IG1lYW5pbmdmdWwuXHJcblJlYWRhYmxlLnByb3RvdHlwZS5fcmVhZCA9IGZ1bmN0aW9uIChuKSB7XHJcbiAgdGhpcy5lbWl0KCdlcnJvcicsIG5ldyBFcnJvcignX3JlYWQoKSBpcyBub3QgaW1wbGVtZW50ZWQnKSk7XHJcbn07XHJcblxyXG5SZWFkYWJsZS5wcm90b3R5cGUucGlwZSA9IGZ1bmN0aW9uIChkZXN0LCBwaXBlT3B0cykge1xyXG4gIHZhciBzcmMgPSB0aGlzO1xyXG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XHJcblxyXG4gIHN3aXRjaCAoc3RhdGUucGlwZXNDb3VudCkge1xyXG4gICAgY2FzZSAwOlxyXG4gICAgICBzdGF0ZS5waXBlcyA9IGRlc3Q7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgY2FzZSAxOlxyXG4gICAgICBzdGF0ZS5waXBlcyA9IFtzdGF0ZS5waXBlcywgZGVzdF07XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgZGVmYXVsdDpcclxuICAgICAgc3RhdGUucGlwZXMucHVzaChkZXN0KTtcclxuICAgICAgYnJlYWs7XHJcbiAgfVxyXG4gIHN0YXRlLnBpcGVzQ291bnQgKz0gMTtcclxuICBkZWJ1ZygncGlwZSBjb3VudD0lZCBvcHRzPSVqJywgc3RhdGUucGlwZXNDb3VudCwgcGlwZU9wdHMpO1xyXG5cclxuICB2YXIgZG9FbmQgPSAoIXBpcGVPcHRzIHx8IHBpcGVPcHRzLmVuZCAhPT0gZmFsc2UpICYmIGRlc3QgIT09IHByb2Nlc3Muc3Rkb3V0ICYmIGRlc3QgIT09IHByb2Nlc3Muc3RkZXJyO1xyXG5cclxuICB2YXIgZW5kRm4gPSBkb0VuZCA/IG9uZW5kIDogdW5waXBlO1xyXG4gIGlmIChzdGF0ZS5lbmRFbWl0dGVkKSBwbmEubmV4dFRpY2soZW5kRm4pO2Vsc2Ugc3JjLm9uY2UoJ2VuZCcsIGVuZEZuKTtcclxuXHJcbiAgZGVzdC5vbigndW5waXBlJywgb251bnBpcGUpO1xyXG4gIGZ1bmN0aW9uIG9udW5waXBlKHJlYWRhYmxlLCB1bnBpcGVJbmZvKSB7XHJcbiAgICBkZWJ1Zygnb251bnBpcGUnKTtcclxuICAgIGlmIChyZWFkYWJsZSA9PT0gc3JjKSB7XHJcbiAgICAgIGlmICh1bnBpcGVJbmZvICYmIHVucGlwZUluZm8uaGFzVW5waXBlZCA9PT0gZmFsc2UpIHtcclxuICAgICAgICB1bnBpcGVJbmZvLmhhc1VucGlwZWQgPSB0cnVlO1xyXG4gICAgICAgIGNsZWFudXAoKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gb25lbmQoKSB7XHJcbiAgICBkZWJ1Zygnb25lbmQnKTtcclxuICAgIGRlc3QuZW5kKCk7XHJcbiAgfVxyXG5cclxuICAvLyB3aGVuIHRoZSBkZXN0IGRyYWlucywgaXQgcmVkdWNlcyB0aGUgYXdhaXREcmFpbiBjb3VudGVyXHJcbiAgLy8gb24gdGhlIHNvdXJjZS4gIFRoaXMgd291bGQgYmUgbW9yZSBlbGVnYW50IHdpdGggYSAub25jZSgpXHJcbiAgLy8gaGFuZGxlciBpbiBmbG93KCksIGJ1dCBhZGRpbmcgYW5kIHJlbW92aW5nIHJlcGVhdGVkbHkgaXNcclxuICAvLyB0b28gc2xvdy5cclxuICB2YXIgb25kcmFpbiA9IHBpcGVPbkRyYWluKHNyYyk7XHJcbiAgZGVzdC5vbignZHJhaW4nLCBvbmRyYWluKTtcclxuXHJcbiAgdmFyIGNsZWFuZWRVcCA9IGZhbHNlO1xyXG4gIGZ1bmN0aW9uIGNsZWFudXAoKSB7XHJcbiAgICBkZWJ1ZygnY2xlYW51cCcpO1xyXG4gICAgLy8gY2xlYW51cCBldmVudCBoYW5kbGVycyBvbmNlIHRoZSBwaXBlIGlzIGJyb2tlblxyXG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignY2xvc2UnLCBvbmNsb3NlKTtcclxuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2ZpbmlzaCcsIG9uZmluaXNoKTtcclxuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2RyYWluJywgb25kcmFpbik7XHJcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIG9uZXJyb3IpO1xyXG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcigndW5waXBlJywgb251bnBpcGUpO1xyXG4gICAgc3JjLnJlbW92ZUxpc3RlbmVyKCdlbmQnLCBvbmVuZCk7XHJcbiAgICBzcmMucmVtb3ZlTGlzdGVuZXIoJ2VuZCcsIHVucGlwZSk7XHJcbiAgICBzcmMucmVtb3ZlTGlzdGVuZXIoJ2RhdGEnLCBvbmRhdGEpO1xyXG5cclxuICAgIGNsZWFuZWRVcCA9IHRydWU7XHJcblxyXG4gICAgLy8gaWYgdGhlIHJlYWRlciBpcyB3YWl0aW5nIGZvciBhIGRyYWluIGV2ZW50IGZyb20gdGhpc1xyXG4gICAgLy8gc3BlY2lmaWMgd3JpdGVyLCB0aGVuIGl0IHdvdWxkIGNhdXNlIGl0IHRvIG5ldmVyIHN0YXJ0XHJcbiAgICAvLyBmbG93aW5nIGFnYWluLlxyXG4gICAgLy8gU28sIGlmIHRoaXMgaXMgYXdhaXRpbmcgYSBkcmFpbiwgdGhlbiB3ZSBqdXN0IGNhbGwgaXQgbm93LlxyXG4gICAgLy8gSWYgd2UgZG9uJ3Qga25vdywgdGhlbiBhc3N1bWUgdGhhdCB3ZSBhcmUgd2FpdGluZyBmb3Igb25lLlxyXG4gICAgaWYgKHN0YXRlLmF3YWl0RHJhaW4gJiYgKCFkZXN0Ll93cml0YWJsZVN0YXRlIHx8IGRlc3QuX3dyaXRhYmxlU3RhdGUubmVlZERyYWluKSkgb25kcmFpbigpO1xyXG4gIH1cclxuXHJcbiAgLy8gSWYgdGhlIHVzZXIgcHVzaGVzIG1vcmUgZGF0YSB3aGlsZSB3ZSdyZSB3cml0aW5nIHRvIGRlc3QgdGhlbiB3ZSdsbCBlbmQgdXBcclxuICAvLyBpbiBvbmRhdGEgYWdhaW4uIEhvd2V2ZXIsIHdlIG9ubHkgd2FudCB0byBpbmNyZWFzZSBhd2FpdERyYWluIG9uY2UgYmVjYXVzZVxyXG4gIC8vIGRlc3Qgd2lsbCBvbmx5IGVtaXQgb25lICdkcmFpbicgZXZlbnQgZm9yIHRoZSBtdWx0aXBsZSB3cml0ZXMuXHJcbiAgLy8gPT4gSW50cm9kdWNlIGEgZ3VhcmQgb24gaW5jcmVhc2luZyBhd2FpdERyYWluLlxyXG4gIHZhciBpbmNyZWFzZWRBd2FpdERyYWluID0gZmFsc2U7XHJcbiAgc3JjLm9uKCdkYXRhJywgb25kYXRhKTtcclxuICBmdW5jdGlvbiBvbmRhdGEoY2h1bmspIHtcclxuICAgIGRlYnVnKCdvbmRhdGEnKTtcclxuICAgIGluY3JlYXNlZEF3YWl0RHJhaW4gPSBmYWxzZTtcclxuICAgIHZhciByZXQgPSBkZXN0LndyaXRlKGNodW5rKTtcclxuICAgIGlmIChmYWxzZSA9PT0gcmV0ICYmICFpbmNyZWFzZWRBd2FpdERyYWluKSB7XHJcbiAgICAgIC8vIElmIHRoZSB1c2VyIHVucGlwZWQgZHVyaW5nIGBkZXN0LndyaXRlKClgLCBpdCBpcyBwb3NzaWJsZVxyXG4gICAgICAvLyB0byBnZXQgc3R1Y2sgaW4gYSBwZXJtYW5lbnRseSBwYXVzZWQgc3RhdGUgaWYgdGhhdCB3cml0ZVxyXG4gICAgICAvLyBhbHNvIHJldHVybmVkIGZhbHNlLlxyXG4gICAgICAvLyA9PiBDaGVjayB3aGV0aGVyIGBkZXN0YCBpcyBzdGlsbCBhIHBpcGluZyBkZXN0aW5hdGlvbi5cclxuICAgICAgaWYgKChzdGF0ZS5waXBlc0NvdW50ID09PSAxICYmIHN0YXRlLnBpcGVzID09PSBkZXN0IHx8IHN0YXRlLnBpcGVzQ291bnQgPiAxICYmIGluZGV4T2Yoc3RhdGUucGlwZXMsIGRlc3QpICE9PSAtMSkgJiYgIWNsZWFuZWRVcCkge1xyXG4gICAgICAgIGRlYnVnKCdmYWxzZSB3cml0ZSByZXNwb25zZSwgcGF1c2UnLCBzcmMuX3JlYWRhYmxlU3RhdGUuYXdhaXREcmFpbik7XHJcbiAgICAgICAgc3JjLl9yZWFkYWJsZVN0YXRlLmF3YWl0RHJhaW4rKztcclxuICAgICAgICBpbmNyZWFzZWRBd2FpdERyYWluID0gdHJ1ZTtcclxuICAgICAgfVxyXG4gICAgICBzcmMucGF1c2UoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIGlmIHRoZSBkZXN0IGhhcyBhbiBlcnJvciwgdGhlbiBzdG9wIHBpcGluZyBpbnRvIGl0LlxyXG4gIC8vIGhvd2V2ZXIsIGRvbid0IHN1cHByZXNzIHRoZSB0aHJvd2luZyBiZWhhdmlvciBmb3IgdGhpcy5cclxuICBmdW5jdGlvbiBvbmVycm9yKGVyKSB7XHJcbiAgICBkZWJ1Zygnb25lcnJvcicsIGVyKTtcclxuICAgIHVucGlwZSgpO1xyXG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignZXJyb3InLCBvbmVycm9yKTtcclxuICAgIGlmIChFRWxpc3RlbmVyQ291bnQoZGVzdCwgJ2Vycm9yJykgPT09IDApIGRlc3QuZW1pdCgnZXJyb3InLCBlcik7XHJcbiAgfVxyXG5cclxuICAvLyBNYWtlIHN1cmUgb3VyIGVycm9yIGhhbmRsZXIgaXMgYXR0YWNoZWQgYmVmb3JlIHVzZXJsYW5kIG9uZXMuXHJcbiAgcHJlcGVuZExpc3RlbmVyKGRlc3QsICdlcnJvcicsIG9uZXJyb3IpO1xyXG5cclxuICAvLyBCb3RoIGNsb3NlIGFuZCBmaW5pc2ggc2hvdWxkIHRyaWdnZXIgdW5waXBlLCBidXQgb25seSBvbmNlLlxyXG4gIGZ1bmN0aW9uIG9uY2xvc2UoKSB7XHJcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdmaW5pc2gnLCBvbmZpbmlzaCk7XHJcbiAgICB1bnBpcGUoKTtcclxuICB9XHJcbiAgZGVzdC5vbmNlKCdjbG9zZScsIG9uY2xvc2UpO1xyXG4gIGZ1bmN0aW9uIG9uZmluaXNoKCkge1xyXG4gICAgZGVidWcoJ29uZmluaXNoJyk7XHJcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdjbG9zZScsIG9uY2xvc2UpO1xyXG4gICAgdW5waXBlKCk7XHJcbiAgfVxyXG4gIGRlc3Qub25jZSgnZmluaXNoJywgb25maW5pc2gpO1xyXG5cclxuICBmdW5jdGlvbiB1bnBpcGUoKSB7XHJcbiAgICBkZWJ1ZygndW5waXBlJyk7XHJcbiAgICBzcmMudW5waXBlKGRlc3QpO1xyXG4gIH1cclxuXHJcbiAgLy8gdGVsbCB0aGUgZGVzdCB0aGF0IGl0J3MgYmVpbmcgcGlwZWQgdG9cclxuICBkZXN0LmVtaXQoJ3BpcGUnLCBzcmMpO1xyXG5cclxuICAvLyBzdGFydCB0aGUgZmxvdyBpZiBpdCBoYXNuJ3QgYmVlbiBzdGFydGVkIGFscmVhZHkuXHJcbiAgaWYgKCFzdGF0ZS5mbG93aW5nKSB7XHJcbiAgICBkZWJ1ZygncGlwZSByZXN1bWUnKTtcclxuICAgIHNyYy5yZXN1bWUoKTtcclxuICB9XHJcblxyXG4gIHJldHVybiBkZXN0O1xyXG59O1xyXG5cclxuZnVuY3Rpb24gcGlwZU9uRHJhaW4oc3JjKSB7XHJcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBzdGF0ZSA9IHNyYy5fcmVhZGFibGVTdGF0ZTtcclxuICAgIGRlYnVnKCdwaXBlT25EcmFpbicsIHN0YXRlLmF3YWl0RHJhaW4pO1xyXG4gICAgaWYgKHN0YXRlLmF3YWl0RHJhaW4pIHN0YXRlLmF3YWl0RHJhaW4tLTtcclxuICAgIGlmIChzdGF0ZS5hd2FpdERyYWluID09PSAwICYmIEVFbGlzdGVuZXJDb3VudChzcmMsICdkYXRhJykpIHtcclxuICAgICAgc3RhdGUuZmxvd2luZyA9IHRydWU7XHJcbiAgICAgIGZsb3coc3JjKTtcclxuICAgIH1cclxuICB9O1xyXG59XHJcblxyXG5SZWFkYWJsZS5wcm90b3R5cGUudW5waXBlID0gZnVuY3Rpb24gKGRlc3QpIHtcclxuICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xyXG4gIHZhciB1bnBpcGVJbmZvID0geyBoYXNVbnBpcGVkOiBmYWxzZSB9O1xyXG5cclxuICAvLyBpZiB3ZSdyZSBub3QgcGlwaW5nIGFueXdoZXJlLCB0aGVuIGRvIG5vdGhpbmcuXHJcbiAgaWYgKHN0YXRlLnBpcGVzQ291bnQgPT09IDApIHJldHVybiB0aGlzO1xyXG5cclxuICAvLyBqdXN0IG9uZSBkZXN0aW5hdGlvbi4gIG1vc3QgY29tbW9uIGNhc2UuXHJcbiAgaWYgKHN0YXRlLnBpcGVzQ291bnQgPT09IDEpIHtcclxuICAgIC8vIHBhc3NlZCBpbiBvbmUsIGJ1dCBpdCdzIG5vdCB0aGUgcmlnaHQgb25lLlxyXG4gICAgaWYgKGRlc3QgJiYgZGVzdCAhPT0gc3RhdGUucGlwZXMpIHJldHVybiB0aGlzO1xyXG5cclxuICAgIGlmICghZGVzdCkgZGVzdCA9IHN0YXRlLnBpcGVzO1xyXG5cclxuICAgIC8vIGdvdCBhIG1hdGNoLlxyXG4gICAgc3RhdGUucGlwZXMgPSBudWxsO1xyXG4gICAgc3RhdGUucGlwZXNDb3VudCA9IDA7XHJcbiAgICBzdGF0ZS5mbG93aW5nID0gZmFsc2U7XHJcbiAgICBpZiAoZGVzdCkgZGVzdC5lbWl0KCd1bnBpcGUnLCB0aGlzLCB1bnBpcGVJbmZvKTtcclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuXHJcbiAgLy8gc2xvdyBjYXNlLiBtdWx0aXBsZSBwaXBlIGRlc3RpbmF0aW9ucy5cclxuXHJcbiAgaWYgKCFkZXN0KSB7XHJcbiAgICAvLyByZW1vdmUgYWxsLlxyXG4gICAgdmFyIGRlc3RzID0gc3RhdGUucGlwZXM7XHJcbiAgICB2YXIgbGVuID0gc3RhdGUucGlwZXNDb3VudDtcclxuICAgIHN0YXRlLnBpcGVzID0gbnVsbDtcclxuICAgIHN0YXRlLnBpcGVzQ291bnQgPSAwO1xyXG4gICAgc3RhdGUuZmxvd2luZyA9IGZhbHNlO1xyXG5cclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgZGVzdHNbaV0uZW1pdCgndW5waXBlJywgdGhpcywgdW5waXBlSW5mbyk7XHJcbiAgICB9cmV0dXJuIHRoaXM7XHJcbiAgfVxyXG5cclxuICAvLyB0cnkgdG8gZmluZCB0aGUgcmlnaHQgb25lLlxyXG4gIHZhciBpbmRleCA9IGluZGV4T2Yoc3RhdGUucGlwZXMsIGRlc3QpO1xyXG4gIGlmIChpbmRleCA9PT0gLTEpIHJldHVybiB0aGlzO1xyXG5cclxuICBzdGF0ZS5waXBlcy5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gIHN0YXRlLnBpcGVzQ291bnQgLT0gMTtcclxuICBpZiAoc3RhdGUucGlwZXNDb3VudCA9PT0gMSkgc3RhdGUucGlwZXMgPSBzdGF0ZS5waXBlc1swXTtcclxuXHJcbiAgZGVzdC5lbWl0KCd1bnBpcGUnLCB0aGlzLCB1bnBpcGVJbmZvKTtcclxuXHJcbiAgcmV0dXJuIHRoaXM7XHJcbn07XHJcblxyXG4vLyBzZXQgdXAgZGF0YSBldmVudHMgaWYgdGhleSBhcmUgYXNrZWQgZm9yXHJcbi8vIEVuc3VyZSByZWFkYWJsZSBsaXN0ZW5lcnMgZXZlbnR1YWxseSBnZXQgc29tZXRoaW5nXHJcblJlYWRhYmxlLnByb3RvdHlwZS5vbiA9IGZ1bmN0aW9uIChldiwgZm4pIHtcclxuICB2YXIgcmVzID0gU3RyZWFtLnByb3RvdHlwZS5vbi5jYWxsKHRoaXMsIGV2LCBmbik7XHJcblxyXG4gIGlmIChldiA9PT0gJ2RhdGEnKSB7XHJcbiAgICAvLyBTdGFydCBmbG93aW5nIG9uIG5leHQgdGljayBpZiBzdHJlYW0gaXNuJ3QgZXhwbGljaXRseSBwYXVzZWRcclxuICAgIGlmICh0aGlzLl9yZWFkYWJsZVN0YXRlLmZsb3dpbmcgIT09IGZhbHNlKSB0aGlzLnJlc3VtZSgpO1xyXG4gIH0gZWxzZSBpZiAoZXYgPT09ICdyZWFkYWJsZScpIHtcclxuICAgIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XHJcbiAgICBpZiAoIXN0YXRlLmVuZEVtaXR0ZWQgJiYgIXN0YXRlLnJlYWRhYmxlTGlzdGVuaW5nKSB7XHJcbiAgICAgIHN0YXRlLnJlYWRhYmxlTGlzdGVuaW5nID0gc3RhdGUubmVlZFJlYWRhYmxlID0gdHJ1ZTtcclxuICAgICAgc3RhdGUuZW1pdHRlZFJlYWRhYmxlID0gZmFsc2U7XHJcbiAgICAgIGlmICghc3RhdGUucmVhZGluZykge1xyXG4gICAgICAgIHBuYS5uZXh0VGljayhuUmVhZGluZ05leHRUaWNrLCB0aGlzKTtcclxuICAgICAgfSBlbHNlIGlmIChzdGF0ZS5sZW5ndGgpIHtcclxuICAgICAgICBlbWl0UmVhZGFibGUodGhpcyk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJldHVybiByZXM7XHJcbn07XHJcblJlYWRhYmxlLnByb3RvdHlwZS5hZGRMaXN0ZW5lciA9IFJlYWRhYmxlLnByb3RvdHlwZS5vbjtcclxuXHJcbmZ1bmN0aW9uIG5SZWFkaW5nTmV4dFRpY2soc2VsZikge1xyXG4gIGRlYnVnKCdyZWFkYWJsZSBuZXh0dGljayByZWFkIDAnKTtcclxuICBzZWxmLnJlYWQoMCk7XHJcbn1cclxuXHJcbi8vIHBhdXNlKCkgYW5kIHJlc3VtZSgpIGFyZSByZW1uYW50cyBvZiB0aGUgbGVnYWN5IHJlYWRhYmxlIHN0cmVhbSBBUElcclxuLy8gSWYgdGhlIHVzZXIgdXNlcyB0aGVtLCB0aGVuIHN3aXRjaCBpbnRvIG9sZCBtb2RlLlxyXG5SZWFkYWJsZS5wcm90b3R5cGUucmVzdW1lID0gZnVuY3Rpb24gKCkge1xyXG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XHJcbiAgaWYgKCFzdGF0ZS5mbG93aW5nKSB7XHJcbiAgICBkZWJ1ZygncmVzdW1lJyk7XHJcbiAgICBzdGF0ZS5mbG93aW5nID0gdHJ1ZTtcclxuICAgIHJlc3VtZSh0aGlzLCBzdGF0ZSk7XHJcbiAgfVxyXG4gIHJldHVybiB0aGlzO1xyXG59O1xyXG5cclxuZnVuY3Rpb24gcmVzdW1lKHN0cmVhbSwgc3RhdGUpIHtcclxuICBpZiAoIXN0YXRlLnJlc3VtZVNjaGVkdWxlZCkge1xyXG4gICAgc3RhdGUucmVzdW1lU2NoZWR1bGVkID0gdHJ1ZTtcclxuICAgIHBuYS5uZXh0VGljayhyZXN1bWVfLCBzdHJlYW0sIHN0YXRlKTtcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJlc3VtZV8oc3RyZWFtLCBzdGF0ZSkge1xyXG4gIGlmICghc3RhdGUucmVhZGluZykge1xyXG4gICAgZGVidWcoJ3Jlc3VtZSByZWFkIDAnKTtcclxuICAgIHN0cmVhbS5yZWFkKDApO1xyXG4gIH1cclxuXHJcbiAgc3RhdGUucmVzdW1lU2NoZWR1bGVkID0gZmFsc2U7XHJcbiAgc3RhdGUuYXdhaXREcmFpbiA9IDA7XHJcbiAgc3RyZWFtLmVtaXQoJ3Jlc3VtZScpO1xyXG4gIGZsb3coc3RyZWFtKTtcclxuICBpZiAoc3RhdGUuZmxvd2luZyAmJiAhc3RhdGUucmVhZGluZykgc3RyZWFtLnJlYWQoMCk7XHJcbn1cclxuXHJcblJlYWRhYmxlLnByb3RvdHlwZS5wYXVzZSA9IGZ1bmN0aW9uICgpIHtcclxuICBkZWJ1ZygnY2FsbCBwYXVzZSBmbG93aW5nPSVqJywgdGhpcy5fcmVhZGFibGVTdGF0ZS5mbG93aW5nKTtcclxuICBpZiAoZmFsc2UgIT09IHRoaXMuX3JlYWRhYmxlU3RhdGUuZmxvd2luZykge1xyXG4gICAgZGVidWcoJ3BhdXNlJyk7XHJcbiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLmZsb3dpbmcgPSBmYWxzZTtcclxuICAgIHRoaXMuZW1pdCgncGF1c2UnKTtcclxuICB9XHJcbiAgcmV0dXJuIHRoaXM7XHJcbn07XHJcblxyXG5mdW5jdGlvbiBmbG93KHN0cmVhbSkge1xyXG4gIHZhciBzdGF0ZSA9IHN0cmVhbS5fcmVhZGFibGVTdGF0ZTtcclxuICBkZWJ1ZygnZmxvdycsIHN0YXRlLmZsb3dpbmcpO1xyXG4gIHdoaWxlIChzdGF0ZS5mbG93aW5nICYmIHN0cmVhbS5yZWFkKCkgIT09IG51bGwpIHt9XHJcbn1cclxuXHJcbi8vIHdyYXAgYW4gb2xkLXN0eWxlIHN0cmVhbSBhcyB0aGUgYXN5bmMgZGF0YSBzb3VyY2UuXHJcbi8vIFRoaXMgaXMgKm5vdCogcGFydCBvZiB0aGUgcmVhZGFibGUgc3RyZWFtIGludGVyZmFjZS5cclxuLy8gSXQgaXMgYW4gdWdseSB1bmZvcnR1bmF0ZSBtZXNzIG9mIGhpc3RvcnkuXHJcblJlYWRhYmxlLnByb3RvdHlwZS53cmFwID0gZnVuY3Rpb24gKHN0cmVhbSkge1xyXG4gIHZhciBfdGhpcyA9IHRoaXM7XHJcblxyXG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XHJcbiAgdmFyIHBhdXNlZCA9IGZhbHNlO1xyXG5cclxuICBzdHJlYW0ub24oJ2VuZCcsIGZ1bmN0aW9uICgpIHtcclxuICAgIGRlYnVnKCd3cmFwcGVkIGVuZCcpO1xyXG4gICAgaWYgKHN0YXRlLmRlY29kZXIgJiYgIXN0YXRlLmVuZGVkKSB7XHJcbiAgICAgIHZhciBjaHVuayA9IHN0YXRlLmRlY29kZXIuZW5kKCk7XHJcbiAgICAgIGlmIChjaHVuayAmJiBjaHVuay5sZW5ndGgpIF90aGlzLnB1c2goY2h1bmspO1xyXG4gICAgfVxyXG5cclxuICAgIF90aGlzLnB1c2gobnVsbCk7XHJcbiAgfSk7XHJcblxyXG4gIHN0cmVhbS5vbignZGF0YScsIGZ1bmN0aW9uIChjaHVuaykge1xyXG4gICAgZGVidWcoJ3dyYXBwZWQgZGF0YScpO1xyXG4gICAgaWYgKHN0YXRlLmRlY29kZXIpIGNodW5rID0gc3RhdGUuZGVjb2Rlci53cml0ZShjaHVuayk7XHJcblxyXG4gICAgLy8gZG9uJ3Qgc2tpcCBvdmVyIGZhbHN5IHZhbHVlcyBpbiBvYmplY3RNb2RlXHJcbiAgICBpZiAoc3RhdGUub2JqZWN0TW9kZSAmJiAoY2h1bmsgPT09IG51bGwgfHwgY2h1bmsgPT09IHVuZGVmaW5lZCkpIHJldHVybjtlbHNlIGlmICghc3RhdGUub2JqZWN0TW9kZSAmJiAoIWNodW5rIHx8ICFjaHVuay5sZW5ndGgpKSByZXR1cm47XHJcblxyXG4gICAgdmFyIHJldCA9IF90aGlzLnB1c2goY2h1bmspO1xyXG4gICAgaWYgKCFyZXQpIHtcclxuICAgICAgcGF1c2VkID0gdHJ1ZTtcclxuICAgICAgc3RyZWFtLnBhdXNlKCk7XHJcbiAgICB9XHJcbiAgfSk7XHJcblxyXG4gIC8vIHByb3h5IGFsbCB0aGUgb3RoZXIgbWV0aG9kcy5cclxuICAvLyBpbXBvcnRhbnQgd2hlbiB3cmFwcGluZyBmaWx0ZXJzIGFuZCBkdXBsZXhlcy5cclxuICBmb3IgKHZhciBpIGluIHN0cmVhbSkge1xyXG4gICAgaWYgKHRoaXNbaV0gPT09IHVuZGVmaW5lZCAmJiB0eXBlb2Ygc3RyZWFtW2ldID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgIHRoaXNbaV0gPSBmdW5jdGlvbiAobWV0aG9kKSB7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgIHJldHVybiBzdHJlYW1bbWV0aG9kXS5hcHBseShzdHJlYW0sIGFyZ3VtZW50cyk7XHJcbiAgICAgICAgfTtcclxuICAgICAgfShpKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIHByb3h5IGNlcnRhaW4gaW1wb3J0YW50IGV2ZW50cy5cclxuICBmb3IgKHZhciBuID0gMDsgbiA8IGtQcm94eUV2ZW50cy5sZW5ndGg7IG4rKykge1xyXG4gICAgc3RyZWFtLm9uKGtQcm94eUV2ZW50c1tuXSwgdGhpcy5lbWl0LmJpbmQodGhpcywga1Byb3h5RXZlbnRzW25dKSk7XHJcbiAgfVxyXG5cclxuICAvLyB3aGVuIHdlIHRyeSB0byBjb25zdW1lIHNvbWUgbW9yZSBieXRlcywgc2ltcGx5IHVucGF1c2UgdGhlXHJcbiAgLy8gdW5kZXJseWluZyBzdHJlYW0uXHJcbiAgdGhpcy5fcmVhZCA9IGZ1bmN0aW9uIChuKSB7XHJcbiAgICBkZWJ1Zygnd3JhcHBlZCBfcmVhZCcsIG4pO1xyXG4gICAgaWYgKHBhdXNlZCkge1xyXG4gICAgICBwYXVzZWQgPSBmYWxzZTtcclxuICAgICAgc3RyZWFtLnJlc3VtZSgpO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIHJldHVybiB0aGlzO1xyXG59O1xyXG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFJlYWRhYmxlLnByb3RvdHlwZSwgJ3JlYWRhYmxlSGlnaFdhdGVyTWFyaycsIHtcclxuICAvLyBtYWtpbmcgaXQgZXhwbGljaXQgdGhpcyBwcm9wZXJ0eSBpcyBub3QgZW51bWVyYWJsZVxyXG4gIC8vIGJlY2F1c2Ugb3RoZXJ3aXNlIHNvbWUgcHJvdG90eXBlIG1hbmlwdWxhdGlvbiBpblxyXG4gIC8vIHVzZXJsYW5kIHdpbGwgZmFpbFxyXG4gIGVudW1lcmFibGU6IGZhbHNlLFxyXG4gIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX3JlYWRhYmxlU3RhdGUuaGlnaFdhdGVyTWFyaztcclxuICB9XHJcbn0pO1xyXG5cclxuLy8gZXhwb3NlZCBmb3IgdGVzdGluZyBwdXJwb3NlcyBvbmx5LlxyXG5SZWFkYWJsZS5fZnJvbUxpc3QgPSBmcm9tTGlzdDtcclxuXHJcbi8vIFBsdWNrIG9mZiBuIGJ5dGVzIGZyb20gYW4gYXJyYXkgb2YgYnVmZmVycy5cclxuLy8gTGVuZ3RoIGlzIHRoZSBjb21iaW5lZCBsZW5ndGhzIG9mIGFsbCB0aGUgYnVmZmVycyBpbiB0aGUgbGlzdC5cclxuLy8gVGhpcyBmdW5jdGlvbiBpcyBkZXNpZ25lZCB0byBiZSBpbmxpbmFibGUsIHNvIHBsZWFzZSB0YWtlIGNhcmUgd2hlbiBtYWtpbmdcclxuLy8gY2hhbmdlcyB0byB0aGUgZnVuY3Rpb24gYm9keS5cclxuZnVuY3Rpb24gZnJvbUxpc3Qobiwgc3RhdGUpIHtcclxuICAvLyBub3RoaW5nIGJ1ZmZlcmVkXHJcbiAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCkgcmV0dXJuIG51bGw7XHJcblxyXG4gIHZhciByZXQ7XHJcbiAgaWYgKHN0YXRlLm9iamVjdE1vZGUpIHJldCA9IHN0YXRlLmJ1ZmZlci5zaGlmdCgpO2Vsc2UgaWYgKCFuIHx8IG4gPj0gc3RhdGUubGVuZ3RoKSB7XHJcbiAgICAvLyByZWFkIGl0IGFsbCwgdHJ1bmNhdGUgdGhlIGxpc3RcclxuICAgIGlmIChzdGF0ZS5kZWNvZGVyKSByZXQgPSBzdGF0ZS5idWZmZXIuam9pbignJyk7ZWxzZSBpZiAoc3RhdGUuYnVmZmVyLmxlbmd0aCA9PT0gMSkgcmV0ID0gc3RhdGUuYnVmZmVyLmhlYWQuZGF0YTtlbHNlIHJldCA9IHN0YXRlLmJ1ZmZlci5jb25jYXQoc3RhdGUubGVuZ3RoKTtcclxuICAgIHN0YXRlLmJ1ZmZlci5jbGVhcigpO1xyXG4gIH0gZWxzZSB7XHJcbiAgICAvLyByZWFkIHBhcnQgb2YgbGlzdFxyXG4gICAgcmV0ID0gZnJvbUxpc3RQYXJ0aWFsKG4sIHN0YXRlLmJ1ZmZlciwgc3RhdGUuZGVjb2Rlcik7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gcmV0O1xyXG59XHJcblxyXG4vLyBFeHRyYWN0cyBvbmx5IGVub3VnaCBidWZmZXJlZCBkYXRhIHRvIHNhdGlzZnkgdGhlIGFtb3VudCByZXF1ZXN0ZWQuXHJcbi8vIFRoaXMgZnVuY3Rpb24gaXMgZGVzaWduZWQgdG8gYmUgaW5saW5hYmxlLCBzbyBwbGVhc2UgdGFrZSBjYXJlIHdoZW4gbWFraW5nXHJcbi8vIGNoYW5nZXMgdG8gdGhlIGZ1bmN0aW9uIGJvZHkuXHJcbmZ1bmN0aW9uIGZyb21MaXN0UGFydGlhbChuLCBsaXN0LCBoYXNTdHJpbmdzKSB7XHJcbiAgdmFyIHJldDtcclxuICBpZiAobiA8IGxpc3QuaGVhZC5kYXRhLmxlbmd0aCkge1xyXG4gICAgLy8gc2xpY2UgaXMgdGhlIHNhbWUgZm9yIGJ1ZmZlcnMgYW5kIHN0cmluZ3NcclxuICAgIHJldCA9IGxpc3QuaGVhZC5kYXRhLnNsaWNlKDAsIG4pO1xyXG4gICAgbGlzdC5oZWFkLmRhdGEgPSBsaXN0LmhlYWQuZGF0YS5zbGljZShuKTtcclxuICB9IGVsc2UgaWYgKG4gPT09IGxpc3QuaGVhZC5kYXRhLmxlbmd0aCkge1xyXG4gICAgLy8gZmlyc3QgY2h1bmsgaXMgYSBwZXJmZWN0IG1hdGNoXHJcbiAgICByZXQgPSBsaXN0LnNoaWZ0KCk7XHJcbiAgfSBlbHNlIHtcclxuICAgIC8vIHJlc3VsdCBzcGFucyBtb3JlIHRoYW4gb25lIGJ1ZmZlclxyXG4gICAgcmV0ID0gaGFzU3RyaW5ncyA/IGNvcHlGcm9tQnVmZmVyU3RyaW5nKG4sIGxpc3QpIDogY29weUZyb21CdWZmZXIobiwgbGlzdCk7XHJcbiAgfVxyXG4gIHJldHVybiByZXQ7XHJcbn1cclxuXHJcbi8vIENvcGllcyBhIHNwZWNpZmllZCBhbW91bnQgb2YgY2hhcmFjdGVycyBmcm9tIHRoZSBsaXN0IG9mIGJ1ZmZlcmVkIGRhdGFcclxuLy8gY2h1bmtzLlxyXG4vLyBUaGlzIGZ1bmN0aW9uIGlzIGRlc2lnbmVkIHRvIGJlIGlubGluYWJsZSwgc28gcGxlYXNlIHRha2UgY2FyZSB3aGVuIG1ha2luZ1xyXG4vLyBjaGFuZ2VzIHRvIHRoZSBmdW5jdGlvbiBib2R5LlxyXG5mdW5jdGlvbiBjb3B5RnJvbUJ1ZmZlclN0cmluZyhuLCBsaXN0KSB7XHJcbiAgdmFyIHAgPSBsaXN0LmhlYWQ7XHJcbiAgdmFyIGMgPSAxO1xyXG4gIHZhciByZXQgPSBwLmRhdGE7XHJcbiAgbiAtPSByZXQubGVuZ3RoO1xyXG4gIHdoaWxlIChwID0gcC5uZXh0KSB7XHJcbiAgICB2YXIgc3RyID0gcC5kYXRhO1xyXG4gICAgdmFyIG5iID0gbiA+IHN0ci5sZW5ndGggPyBzdHIubGVuZ3RoIDogbjtcclxuICAgIGlmIChuYiA9PT0gc3RyLmxlbmd0aCkgcmV0ICs9IHN0cjtlbHNlIHJldCArPSBzdHIuc2xpY2UoMCwgbik7XHJcbiAgICBuIC09IG5iO1xyXG4gICAgaWYgKG4gPT09IDApIHtcclxuICAgICAgaWYgKG5iID09PSBzdHIubGVuZ3RoKSB7XHJcbiAgICAgICAgKytjO1xyXG4gICAgICAgIGlmIChwLm5leHQpIGxpc3QuaGVhZCA9IHAubmV4dDtlbHNlIGxpc3QuaGVhZCA9IGxpc3QudGFpbCA9IG51bGw7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgbGlzdC5oZWFkID0gcDtcclxuICAgICAgICBwLmRhdGEgPSBzdHIuc2xpY2UobmIpO1xyXG4gICAgICB9XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG4gICAgKytjO1xyXG4gIH1cclxuICBsaXN0Lmxlbmd0aCAtPSBjO1xyXG4gIHJldHVybiByZXQ7XHJcbn1cclxuXHJcbi8vIENvcGllcyBhIHNwZWNpZmllZCBhbW91bnQgb2YgYnl0ZXMgZnJvbSB0aGUgbGlzdCBvZiBidWZmZXJlZCBkYXRhIGNodW5rcy5cclxuLy8gVGhpcyBmdW5jdGlvbiBpcyBkZXNpZ25lZCB0byBiZSBpbmxpbmFibGUsIHNvIHBsZWFzZSB0YWtlIGNhcmUgd2hlbiBtYWtpbmdcclxuLy8gY2hhbmdlcyB0byB0aGUgZnVuY3Rpb24gYm9keS5cclxuZnVuY3Rpb24gY29weUZyb21CdWZmZXIobiwgbGlzdCkge1xyXG4gIHZhciByZXQgPSBCdWZmZXIuYWxsb2NVbnNhZmUobik7XHJcbiAgdmFyIHAgPSBsaXN0LmhlYWQ7XHJcbiAgdmFyIGMgPSAxO1xyXG4gIHAuZGF0YS5jb3B5KHJldCk7XHJcbiAgbiAtPSBwLmRhdGEubGVuZ3RoO1xyXG4gIHdoaWxlIChwID0gcC5uZXh0KSB7XHJcbiAgICB2YXIgYnVmID0gcC5kYXRhO1xyXG4gICAgdmFyIG5iID0gbiA+IGJ1Zi5sZW5ndGggPyBidWYubGVuZ3RoIDogbjtcclxuICAgIGJ1Zi5jb3B5KHJldCwgcmV0Lmxlbmd0aCAtIG4sIDAsIG5iKTtcclxuICAgIG4gLT0gbmI7XHJcbiAgICBpZiAobiA9PT0gMCkge1xyXG4gICAgICBpZiAobmIgPT09IGJ1Zi5sZW5ndGgpIHtcclxuICAgICAgICArK2M7XHJcbiAgICAgICAgaWYgKHAubmV4dCkgbGlzdC5oZWFkID0gcC5uZXh0O2Vsc2UgbGlzdC5oZWFkID0gbGlzdC50YWlsID0gbnVsbDtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBsaXN0LmhlYWQgPSBwO1xyXG4gICAgICAgIHAuZGF0YSA9IGJ1Zi5zbGljZShuYik7XHJcbiAgICAgIH1cclxuICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgICArK2M7XHJcbiAgfVxyXG4gIGxpc3QubGVuZ3RoIC09IGM7XHJcbiAgcmV0dXJuIHJldDtcclxufVxyXG5cclxuZnVuY3Rpb24gZW5kUmVhZGFibGUoc3RyZWFtKSB7XHJcbiAgdmFyIHN0YXRlID0gc3RyZWFtLl9yZWFkYWJsZVN0YXRlO1xyXG5cclxuICAvLyBJZiB3ZSBnZXQgaGVyZSBiZWZvcmUgY29uc3VtaW5nIGFsbCB0aGUgYnl0ZXMsIHRoZW4gdGhhdCBpcyBhXHJcbiAgLy8gYnVnIGluIG5vZGUuICBTaG91bGQgbmV2ZXIgaGFwcGVuLlxyXG4gIGlmIChzdGF0ZS5sZW5ndGggPiAwKSB0aHJvdyBuZXcgRXJyb3IoJ1wiZW5kUmVhZGFibGUoKVwiIGNhbGxlZCBvbiBub24tZW1wdHkgc3RyZWFtJyk7XHJcblxyXG4gIGlmICghc3RhdGUuZW5kRW1pdHRlZCkge1xyXG4gICAgc3RhdGUuZW5kZWQgPSB0cnVlO1xyXG4gICAgcG5hLm5leHRUaWNrKGVuZFJlYWRhYmxlTlQsIHN0YXRlLCBzdHJlYW0pO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gZW5kUmVhZGFibGVOVChzdGF0ZSwgc3RyZWFtKSB7XHJcbiAgLy8gQ2hlY2sgdGhhdCB3ZSBkaWRuJ3QgZ2V0IG9uZSBsYXN0IHVuc2hpZnQuXHJcbiAgaWYgKCFzdGF0ZS5lbmRFbWl0dGVkICYmIHN0YXRlLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgc3RhdGUuZW5kRW1pdHRlZCA9IHRydWU7XHJcbiAgICBzdHJlYW0ucmVhZGFibGUgPSBmYWxzZTtcclxuICAgIHN0cmVhbS5lbWl0KCdlbmQnKTtcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGluZGV4T2YoeHMsIHgpIHtcclxuICBmb3IgKHZhciBpID0gMCwgbCA9IHhzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xyXG4gICAgaWYgKHhzW2ldID09PSB4KSByZXR1cm4gaTtcclxuICB9XHJcbiAgcmV0dXJuIC0xO1xyXG59IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCdldmVudHMnKS5FdmVudEVtaXR0ZXI7XHJcbiIsIid1c2Ugc3RyaWN0JztcclxuXHJcbi8qPHJlcGxhY2VtZW50PiovXHJcblxyXG52YXIgcG5hID0gcmVxdWlyZSgncHJvY2Vzcy1uZXh0aWNrLWFyZ3MnKTtcclxuLyo8L3JlcGxhY2VtZW50PiovXHJcblxyXG4vLyB1bmRvY3VtZW50ZWQgY2IoKSBBUEksIG5lZWRlZCBmb3IgY29yZSwgbm90IGZvciBwdWJsaWMgQVBJXHJcbmZ1bmN0aW9uIGRlc3Ryb3koZXJyLCBjYikge1xyXG4gIHZhciBfdGhpcyA9IHRoaXM7XHJcblxyXG4gIHZhciByZWFkYWJsZURlc3Ryb3llZCA9IHRoaXMuX3JlYWRhYmxlU3RhdGUgJiYgdGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQ7XHJcbiAgdmFyIHdyaXRhYmxlRGVzdHJveWVkID0gdGhpcy5fd3JpdGFibGVTdGF0ZSAmJiB0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZDtcclxuXHJcbiAgaWYgKHJlYWRhYmxlRGVzdHJveWVkIHx8IHdyaXRhYmxlRGVzdHJveWVkKSB7XHJcbiAgICBpZiAoY2IpIHtcclxuICAgICAgY2IoZXJyKTtcclxuICAgIH0gZWxzZSBpZiAoZXJyICYmICghdGhpcy5fd3JpdGFibGVTdGF0ZSB8fCAhdGhpcy5fd3JpdGFibGVTdGF0ZS5lcnJvckVtaXR0ZWQpKSB7XHJcbiAgICAgIHBuYS5uZXh0VGljayhlbWl0RXJyb3JOVCwgdGhpcywgZXJyKTtcclxuICAgIH1cclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuXHJcbiAgLy8gd2Ugc2V0IGRlc3Ryb3llZCB0byB0cnVlIGJlZm9yZSBmaXJpbmcgZXJyb3IgY2FsbGJhY2tzIGluIG9yZGVyXHJcbiAgLy8gdG8gbWFrZSBpdCByZS1lbnRyYW5jZSBzYWZlIGluIGNhc2UgZGVzdHJveSgpIGlzIGNhbGxlZCB3aXRoaW4gY2FsbGJhY2tzXHJcblxyXG4gIGlmICh0aGlzLl9yZWFkYWJsZVN0YXRlKSB7XHJcbiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZCA9IHRydWU7XHJcbiAgfVxyXG5cclxuICAvLyBpZiB0aGlzIGlzIGEgZHVwbGV4IHN0cmVhbSBtYXJrIHRoZSB3cml0YWJsZSBwYXJ0IGFzIGRlc3Ryb3llZCBhcyB3ZWxsXHJcbiAgaWYgKHRoaXMuX3dyaXRhYmxlU3RhdGUpIHtcclxuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkID0gdHJ1ZTtcclxuICB9XHJcblxyXG4gIHRoaXMuX2Rlc3Ryb3koZXJyIHx8IG51bGwsIGZ1bmN0aW9uIChlcnIpIHtcclxuICAgIGlmICghY2IgJiYgZXJyKSB7XHJcbiAgICAgIHBuYS5uZXh0VGljayhlbWl0RXJyb3JOVCwgX3RoaXMsIGVycik7XHJcbiAgICAgIGlmIChfdGhpcy5fd3JpdGFibGVTdGF0ZSkge1xyXG4gICAgICAgIF90aGlzLl93cml0YWJsZVN0YXRlLmVycm9yRW1pdHRlZCA9IHRydWU7XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSBpZiAoY2IpIHtcclxuICAgICAgY2IoZXJyKTtcclxuICAgIH1cclxuICB9KTtcclxuXHJcbiAgcmV0dXJuIHRoaXM7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHVuZGVzdHJveSgpIHtcclxuICBpZiAodGhpcy5fcmVhZGFibGVTdGF0ZSkge1xyXG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQgPSBmYWxzZTtcclxuICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUucmVhZGluZyA9IGZhbHNlO1xyXG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5lbmRlZCA9IGZhbHNlO1xyXG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5lbmRFbWl0dGVkID0gZmFsc2U7XHJcbiAgfVxyXG5cclxuICBpZiAodGhpcy5fd3JpdGFibGVTdGF0ZSkge1xyXG4gICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5kZXN0cm95ZWQgPSBmYWxzZTtcclxuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZW5kZWQgPSBmYWxzZTtcclxuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZW5kaW5nID0gZmFsc2U7XHJcbiAgICB0aGlzLl93cml0YWJsZVN0YXRlLmZpbmlzaGVkID0gZmFsc2U7XHJcbiAgICB0aGlzLl93cml0YWJsZVN0YXRlLmVycm9yRW1pdHRlZCA9IGZhbHNlO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gZW1pdEVycm9yTlQoc2VsZiwgZXJyKSB7XHJcbiAgc2VsZi5lbWl0KCdlcnJvcicsIGVycik7XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG4gIGRlc3Ryb3k6IGRlc3Ryb3ksXHJcbiAgdW5kZXN0cm95OiB1bmRlc3Ryb3lcclxufTsiLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cclxuLy9cclxuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcclxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxyXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcclxuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxyXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XHJcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxyXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcclxuLy9cclxuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcclxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXHJcbi8vXHJcbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1NcclxuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxyXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXHJcbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxyXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1JcclxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxyXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxyXG5cclxuJ3VzZSBzdHJpY3QnO1xyXG5cclxuLyo8cmVwbGFjZW1lbnQ+Ki9cclxuXHJcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlcjtcclxuLyo8L3JlcGxhY2VtZW50PiovXHJcblxyXG52YXIgaXNFbmNvZGluZyA9IEJ1ZmZlci5pc0VuY29kaW5nIHx8IGZ1bmN0aW9uIChlbmNvZGluZykge1xyXG4gIGVuY29kaW5nID0gJycgKyBlbmNvZGluZztcclxuICBzd2l0Y2ggKGVuY29kaW5nICYmIGVuY29kaW5nLnRvTG93ZXJDYXNlKCkpIHtcclxuICAgIGNhc2UgJ2hleCc6Y2FzZSAndXRmOCc6Y2FzZSAndXRmLTgnOmNhc2UgJ2FzY2lpJzpjYXNlICdiaW5hcnknOmNhc2UgJ2Jhc2U2NCc6Y2FzZSAndWNzMic6Y2FzZSAndWNzLTInOmNhc2UgJ3V0ZjE2bGUnOmNhc2UgJ3V0Zi0xNmxlJzpjYXNlICdyYXcnOlxyXG4gICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIGRlZmF1bHQ6XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcbn07XHJcblxyXG5mdW5jdGlvbiBfbm9ybWFsaXplRW5jb2RpbmcoZW5jKSB7XHJcbiAgaWYgKCFlbmMpIHJldHVybiAndXRmOCc7XHJcbiAgdmFyIHJldHJpZWQ7XHJcbiAgd2hpbGUgKHRydWUpIHtcclxuICAgIHN3aXRjaCAoZW5jKSB7XHJcbiAgICAgIGNhc2UgJ3V0ZjgnOlxyXG4gICAgICBjYXNlICd1dGYtOCc6XHJcbiAgICAgICAgcmV0dXJuICd1dGY4JztcclxuICAgICAgY2FzZSAndWNzMic6XHJcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcclxuICAgICAgY2FzZSAndXRmMTZsZSc6XHJcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcclxuICAgICAgICByZXR1cm4gJ3V0ZjE2bGUnO1xyXG4gICAgICBjYXNlICdsYXRpbjEnOlxyXG4gICAgICBjYXNlICdiaW5hcnknOlxyXG4gICAgICAgIHJldHVybiAnbGF0aW4xJztcclxuICAgICAgY2FzZSAnYmFzZTY0JzpcclxuICAgICAgY2FzZSAnYXNjaWknOlxyXG4gICAgICBjYXNlICdoZXgnOlxyXG4gICAgICAgIHJldHVybiBlbmM7XHJcbiAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgaWYgKHJldHJpZWQpIHJldHVybjsgLy8gdW5kZWZpbmVkXHJcbiAgICAgICAgZW5jID0gKCcnICsgZW5jKS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgIHJldHJpZWQgPSB0cnVlO1xyXG4gICAgfVxyXG4gIH1cclxufTtcclxuXHJcbi8vIERvIG5vdCBjYWNoZSBgQnVmZmVyLmlzRW5jb2RpbmdgIHdoZW4gY2hlY2tpbmcgZW5jb2RpbmcgbmFtZXMgYXMgc29tZVxyXG4vLyBtb2R1bGVzIG1vbmtleS1wYXRjaCBpdCB0byBzdXBwb3J0IGFkZGl0aW9uYWwgZW5jb2RpbmdzXHJcbmZ1bmN0aW9uIG5vcm1hbGl6ZUVuY29kaW5nKGVuYykge1xyXG4gIHZhciBuZW5jID0gX25vcm1hbGl6ZUVuY29kaW5nKGVuYyk7XHJcbiAgaWYgKHR5cGVvZiBuZW5jICE9PSAnc3RyaW5nJyAmJiAoQnVmZmVyLmlzRW5jb2RpbmcgPT09IGlzRW5jb2RpbmcgfHwgIWlzRW5jb2RpbmcoZW5jKSkpIHRocm93IG5ldyBFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuYyk7XHJcbiAgcmV0dXJuIG5lbmMgfHwgZW5jO1xyXG59XHJcblxyXG4vLyBTdHJpbmdEZWNvZGVyIHByb3ZpZGVzIGFuIGludGVyZmFjZSBmb3IgZWZmaWNpZW50bHkgc3BsaXR0aW5nIGEgc2VyaWVzIG9mXHJcbi8vIGJ1ZmZlcnMgaW50byBhIHNlcmllcyBvZiBKUyBzdHJpbmdzIHdpdGhvdXQgYnJlYWtpbmcgYXBhcnQgbXVsdGktYnl0ZVxyXG4vLyBjaGFyYWN0ZXJzLlxyXG5leHBvcnRzLlN0cmluZ0RlY29kZXIgPSBTdHJpbmdEZWNvZGVyO1xyXG5mdW5jdGlvbiBTdHJpbmdEZWNvZGVyKGVuY29kaW5nKSB7XHJcbiAgdGhpcy5lbmNvZGluZyA9IG5vcm1hbGl6ZUVuY29kaW5nKGVuY29kaW5nKTtcclxuICB2YXIgbmI7XHJcbiAgc3dpdGNoICh0aGlzLmVuY29kaW5nKSB7XHJcbiAgICBjYXNlICd1dGYxNmxlJzpcclxuICAgICAgdGhpcy50ZXh0ID0gdXRmMTZUZXh0O1xyXG4gICAgICB0aGlzLmVuZCA9IHV0ZjE2RW5kO1xyXG4gICAgICBuYiA9IDQ7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgY2FzZSAndXRmOCc6XHJcbiAgICAgIHRoaXMuZmlsbExhc3QgPSB1dGY4RmlsbExhc3Q7XHJcbiAgICAgIG5iID0gNDtcclxuICAgICAgYnJlYWs7XHJcbiAgICBjYXNlICdiYXNlNjQnOlxyXG4gICAgICB0aGlzLnRleHQgPSBiYXNlNjRUZXh0O1xyXG4gICAgICB0aGlzLmVuZCA9IGJhc2U2NEVuZDtcclxuICAgICAgbmIgPSAzO1xyXG4gICAgICBicmVhaztcclxuICAgIGRlZmF1bHQ6XHJcbiAgICAgIHRoaXMud3JpdGUgPSBzaW1wbGVXcml0ZTtcclxuICAgICAgdGhpcy5lbmQgPSBzaW1wbGVFbmQ7XHJcbiAgICAgIHJldHVybjtcclxuICB9XHJcbiAgdGhpcy5sYXN0TmVlZCA9IDA7XHJcbiAgdGhpcy5sYXN0VG90YWwgPSAwO1xyXG4gIHRoaXMubGFzdENoYXIgPSBCdWZmZXIuYWxsb2NVbnNhZmUobmIpO1xyXG59XHJcblxyXG5TdHJpbmdEZWNvZGVyLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIChidWYpIHtcclxuICBpZiAoYnVmLmxlbmd0aCA9PT0gMCkgcmV0dXJuICcnO1xyXG4gIHZhciByO1xyXG4gIHZhciBpO1xyXG4gIGlmICh0aGlzLmxhc3ROZWVkKSB7XHJcbiAgICByID0gdGhpcy5maWxsTGFzdChidWYpO1xyXG4gICAgaWYgKHIgPT09IHVuZGVmaW5lZCkgcmV0dXJuICcnO1xyXG4gICAgaSA9IHRoaXMubGFzdE5lZWQ7XHJcbiAgICB0aGlzLmxhc3ROZWVkID0gMDtcclxuICB9IGVsc2Uge1xyXG4gICAgaSA9IDA7XHJcbiAgfVxyXG4gIGlmIChpIDwgYnVmLmxlbmd0aCkgcmV0dXJuIHIgPyByICsgdGhpcy50ZXh0KGJ1ZiwgaSkgOiB0aGlzLnRleHQoYnVmLCBpKTtcclxuICByZXR1cm4gciB8fCAnJztcclxufTtcclxuXHJcblN0cmluZ0RlY29kZXIucHJvdG90eXBlLmVuZCA9IHV0ZjhFbmQ7XHJcblxyXG4vLyBSZXR1cm5zIG9ubHkgY29tcGxldGUgY2hhcmFjdGVycyBpbiBhIEJ1ZmZlclxyXG5TdHJpbmdEZWNvZGVyLnByb3RvdHlwZS50ZXh0ID0gdXRmOFRleHQ7XHJcblxyXG4vLyBBdHRlbXB0cyB0byBjb21wbGV0ZSBhIHBhcnRpYWwgbm9uLVVURi04IGNoYXJhY3RlciB1c2luZyBieXRlcyBmcm9tIGEgQnVmZmVyXHJcblN0cmluZ0RlY29kZXIucHJvdG90eXBlLmZpbGxMYXN0ID0gZnVuY3Rpb24gKGJ1Zikge1xyXG4gIGlmICh0aGlzLmxhc3ROZWVkIDw9IGJ1Zi5sZW5ndGgpIHtcclxuICAgIGJ1Zi5jb3B5KHRoaXMubGFzdENoYXIsIHRoaXMubGFzdFRvdGFsIC0gdGhpcy5sYXN0TmVlZCwgMCwgdGhpcy5sYXN0TmVlZCk7XHJcbiAgICByZXR1cm4gdGhpcy5sYXN0Q2hhci50b1N0cmluZyh0aGlzLmVuY29kaW5nLCAwLCB0aGlzLmxhc3RUb3RhbCk7XHJcbiAgfVxyXG4gIGJ1Zi5jb3B5KHRoaXMubGFzdENoYXIsIHRoaXMubGFzdFRvdGFsIC0gdGhpcy5sYXN0TmVlZCwgMCwgYnVmLmxlbmd0aCk7XHJcbiAgdGhpcy5sYXN0TmVlZCAtPSBidWYubGVuZ3RoO1xyXG59O1xyXG5cclxuLy8gQ2hlY2tzIHRoZSB0eXBlIG9mIGEgVVRGLTggYnl0ZSwgd2hldGhlciBpdCdzIEFTQ0lJLCBhIGxlYWRpbmcgYnl0ZSwgb3IgYVxyXG4vLyBjb250aW51YXRpb24gYnl0ZS4gSWYgYW4gaW52YWxpZCBieXRlIGlzIGRldGVjdGVkLCAtMiBpcyByZXR1cm5lZC5cclxuZnVuY3Rpb24gdXRmOENoZWNrQnl0ZShieXRlKSB7XHJcbiAgaWYgKGJ5dGUgPD0gMHg3RikgcmV0dXJuIDA7ZWxzZSBpZiAoYnl0ZSA+PiA1ID09PSAweDA2KSByZXR1cm4gMjtlbHNlIGlmIChieXRlID4+IDQgPT09IDB4MEUpIHJldHVybiAzO2Vsc2UgaWYgKGJ5dGUgPj4gMyA9PT0gMHgxRSkgcmV0dXJuIDQ7XHJcbiAgcmV0dXJuIGJ5dGUgPj4gNiA9PT0gMHgwMiA/IC0xIDogLTI7XHJcbn1cclxuXHJcbi8vIENoZWNrcyBhdCBtb3N0IDMgYnl0ZXMgYXQgdGhlIGVuZCBvZiBhIEJ1ZmZlciBpbiBvcmRlciB0byBkZXRlY3QgYW5cclxuLy8gaW5jb21wbGV0ZSBtdWx0aS1ieXRlIFVURi04IGNoYXJhY3Rlci4gVGhlIHRvdGFsIG51bWJlciBvZiBieXRlcyAoMiwgMywgb3IgNClcclxuLy8gbmVlZGVkIHRvIGNvbXBsZXRlIHRoZSBVVEYtOCBjaGFyYWN0ZXIgKGlmIGFwcGxpY2FibGUpIGFyZSByZXR1cm5lZC5cclxuZnVuY3Rpb24gdXRmOENoZWNrSW5jb21wbGV0ZShzZWxmLCBidWYsIGkpIHtcclxuICB2YXIgaiA9IGJ1Zi5sZW5ndGggLSAxO1xyXG4gIGlmIChqIDwgaSkgcmV0dXJuIDA7XHJcbiAgdmFyIG5iID0gdXRmOENoZWNrQnl0ZShidWZbal0pO1xyXG4gIGlmIChuYiA+PSAwKSB7XHJcbiAgICBpZiAobmIgPiAwKSBzZWxmLmxhc3ROZWVkID0gbmIgLSAxO1xyXG4gICAgcmV0dXJuIG5iO1xyXG4gIH1cclxuICBpZiAoLS1qIDwgaSB8fCBuYiA9PT0gLTIpIHJldHVybiAwO1xyXG4gIG5iID0gdXRmOENoZWNrQnl0ZShidWZbal0pO1xyXG4gIGlmIChuYiA+PSAwKSB7XHJcbiAgICBpZiAobmIgPiAwKSBzZWxmLmxhc3ROZWVkID0gbmIgLSAyO1xyXG4gICAgcmV0dXJuIG5iO1xyXG4gIH1cclxuICBpZiAoLS1qIDwgaSB8fCBuYiA9PT0gLTIpIHJldHVybiAwO1xyXG4gIG5iID0gdXRmOENoZWNrQnl0ZShidWZbal0pO1xyXG4gIGlmIChuYiA+PSAwKSB7XHJcbiAgICBpZiAobmIgPiAwKSB7XHJcbiAgICAgIGlmIChuYiA9PT0gMikgbmIgPSAwO2Vsc2Ugc2VsZi5sYXN0TmVlZCA9IG5iIC0gMztcclxuICAgIH1cclxuICAgIHJldHVybiBuYjtcclxuICB9XHJcbiAgcmV0dXJuIDA7XHJcbn1cclxuXHJcbi8vIFZhbGlkYXRlcyBhcyBtYW55IGNvbnRpbnVhdGlvbiBieXRlcyBmb3IgYSBtdWx0aS1ieXRlIFVURi04IGNoYXJhY3RlciBhc1xyXG4vLyBuZWVkZWQgb3IgYXJlIGF2YWlsYWJsZS4gSWYgd2Ugc2VlIGEgbm9uLWNvbnRpbnVhdGlvbiBieXRlIHdoZXJlIHdlIGV4cGVjdFxyXG4vLyBvbmUsIHdlIFwicmVwbGFjZVwiIHRoZSB2YWxpZGF0ZWQgY29udGludWF0aW9uIGJ5dGVzIHdlJ3ZlIHNlZW4gc28gZmFyIHdpdGhcclxuLy8gYSBzaW5nbGUgVVRGLTggcmVwbGFjZW1lbnQgY2hhcmFjdGVyICgnXFx1ZmZmZCcpLCB0byBtYXRjaCB2OCdzIFVURi04IGRlY29kaW5nXHJcbi8vIGJlaGF2aW9yLiBUaGUgY29udGludWF0aW9uIGJ5dGUgY2hlY2sgaXMgaW5jbHVkZWQgdGhyZWUgdGltZXMgaW4gdGhlIGNhc2VcclxuLy8gd2hlcmUgYWxsIG9mIHRoZSBjb250aW51YXRpb24gYnl0ZXMgZm9yIGEgY2hhcmFjdGVyIGV4aXN0IGluIHRoZSBzYW1lIGJ1ZmZlci5cclxuLy8gSXQgaXMgYWxzbyBkb25lIHRoaXMgd2F5IGFzIGEgc2xpZ2h0IHBlcmZvcm1hbmNlIGluY3JlYXNlIGluc3RlYWQgb2YgdXNpbmcgYVxyXG4vLyBsb29wLlxyXG5mdW5jdGlvbiB1dGY4Q2hlY2tFeHRyYUJ5dGVzKHNlbGYsIGJ1ZiwgcCkge1xyXG4gIGlmICgoYnVmWzBdICYgMHhDMCkgIT09IDB4ODApIHtcclxuICAgIHNlbGYubGFzdE5lZWQgPSAwO1xyXG4gICAgcmV0dXJuICdcXHVmZmZkJztcclxuICB9XHJcbiAgaWYgKHNlbGYubGFzdE5lZWQgPiAxICYmIGJ1Zi5sZW5ndGggPiAxKSB7XHJcbiAgICBpZiAoKGJ1ZlsxXSAmIDB4QzApICE9PSAweDgwKSB7XHJcbiAgICAgIHNlbGYubGFzdE5lZWQgPSAxO1xyXG4gICAgICByZXR1cm4gJ1xcdWZmZmQnO1xyXG4gICAgfVxyXG4gICAgaWYgKHNlbGYubGFzdE5lZWQgPiAyICYmIGJ1Zi5sZW5ndGggPiAyKSB7XHJcbiAgICAgIGlmICgoYnVmWzJdICYgMHhDMCkgIT09IDB4ODApIHtcclxuICAgICAgICBzZWxmLmxhc3ROZWVkID0gMjtcclxuICAgICAgICByZXR1cm4gJ1xcdWZmZmQnO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG4vLyBBdHRlbXB0cyB0byBjb21wbGV0ZSBhIG11bHRpLWJ5dGUgVVRGLTggY2hhcmFjdGVyIHVzaW5nIGJ5dGVzIGZyb20gYSBCdWZmZXIuXHJcbmZ1bmN0aW9uIHV0ZjhGaWxsTGFzdChidWYpIHtcclxuICB2YXIgcCA9IHRoaXMubGFzdFRvdGFsIC0gdGhpcy5sYXN0TmVlZDtcclxuICB2YXIgciA9IHV0ZjhDaGVja0V4dHJhQnl0ZXModGhpcywgYnVmLCBwKTtcclxuICBpZiAociAhPT0gdW5kZWZpbmVkKSByZXR1cm4gcjtcclxuICBpZiAodGhpcy5sYXN0TmVlZCA8PSBidWYubGVuZ3RoKSB7XHJcbiAgICBidWYuY29weSh0aGlzLmxhc3RDaGFyLCBwLCAwLCB0aGlzLmxhc3ROZWVkKTtcclxuICAgIHJldHVybiB0aGlzLmxhc3RDaGFyLnRvU3RyaW5nKHRoaXMuZW5jb2RpbmcsIDAsIHRoaXMubGFzdFRvdGFsKTtcclxuICB9XHJcbiAgYnVmLmNvcHkodGhpcy5sYXN0Q2hhciwgcCwgMCwgYnVmLmxlbmd0aCk7XHJcbiAgdGhpcy5sYXN0TmVlZCAtPSBidWYubGVuZ3RoO1xyXG59XHJcblxyXG4vLyBSZXR1cm5zIGFsbCBjb21wbGV0ZSBVVEYtOCBjaGFyYWN0ZXJzIGluIGEgQnVmZmVyLiBJZiB0aGUgQnVmZmVyIGVuZGVkIG9uIGFcclxuLy8gcGFydGlhbCBjaGFyYWN0ZXIsIHRoZSBjaGFyYWN0ZXIncyBieXRlcyBhcmUgYnVmZmVyZWQgdW50aWwgdGhlIHJlcXVpcmVkXHJcbi8vIG51bWJlciBvZiBieXRlcyBhcmUgYXZhaWxhYmxlLlxyXG5mdW5jdGlvbiB1dGY4VGV4dChidWYsIGkpIHtcclxuICB2YXIgdG90YWwgPSB1dGY4Q2hlY2tJbmNvbXBsZXRlKHRoaXMsIGJ1ZiwgaSk7XHJcbiAgaWYgKCF0aGlzLmxhc3ROZWVkKSByZXR1cm4gYnVmLnRvU3RyaW5nKCd1dGY4JywgaSk7XHJcbiAgdGhpcy5sYXN0VG90YWwgPSB0b3RhbDtcclxuICB2YXIgZW5kID0gYnVmLmxlbmd0aCAtICh0b3RhbCAtIHRoaXMubGFzdE5lZWQpO1xyXG4gIGJ1Zi5jb3B5KHRoaXMubGFzdENoYXIsIDAsIGVuZCk7XHJcbiAgcmV0dXJuIGJ1Zi50b1N0cmluZygndXRmOCcsIGksIGVuZCk7XHJcbn1cclxuXHJcbi8vIEZvciBVVEYtOCwgYSByZXBsYWNlbWVudCBjaGFyYWN0ZXIgaXMgYWRkZWQgd2hlbiBlbmRpbmcgb24gYSBwYXJ0aWFsXHJcbi8vIGNoYXJhY3Rlci5cclxuZnVuY3Rpb24gdXRmOEVuZChidWYpIHtcclxuICB2YXIgciA9IGJ1ZiAmJiBidWYubGVuZ3RoID8gdGhpcy53cml0ZShidWYpIDogJyc7XHJcbiAgaWYgKHRoaXMubGFzdE5lZWQpIHJldHVybiByICsgJ1xcdWZmZmQnO1xyXG4gIHJldHVybiByO1xyXG59XHJcblxyXG4vLyBVVEYtMTZMRSB0eXBpY2FsbHkgbmVlZHMgdHdvIGJ5dGVzIHBlciBjaGFyYWN0ZXIsIGJ1dCBldmVuIGlmIHdlIGhhdmUgYW4gZXZlblxyXG4vLyBudW1iZXIgb2YgYnl0ZXMgYXZhaWxhYmxlLCB3ZSBuZWVkIHRvIGNoZWNrIGlmIHdlIGVuZCBvbiBhIGxlYWRpbmcvaGlnaFxyXG4vLyBzdXJyb2dhdGUuIEluIHRoYXQgY2FzZSwgd2UgbmVlZCB0byB3YWl0IGZvciB0aGUgbmV4dCB0d28gYnl0ZXMgaW4gb3JkZXIgdG9cclxuLy8gZGVjb2RlIHRoZSBsYXN0IGNoYXJhY3RlciBwcm9wZXJseS5cclxuZnVuY3Rpb24gdXRmMTZUZXh0KGJ1ZiwgaSkge1xyXG4gIGlmICgoYnVmLmxlbmd0aCAtIGkpICUgMiA9PT0gMCkge1xyXG4gICAgdmFyIHIgPSBidWYudG9TdHJpbmcoJ3V0ZjE2bGUnLCBpKTtcclxuICAgIGlmIChyKSB7XHJcbiAgICAgIHZhciBjID0gci5jaGFyQ29kZUF0KHIubGVuZ3RoIC0gMSk7XHJcbiAgICAgIGlmIChjID49IDB4RDgwMCAmJiBjIDw9IDB4REJGRikge1xyXG4gICAgICAgIHRoaXMubGFzdE5lZWQgPSAyO1xyXG4gICAgICAgIHRoaXMubGFzdFRvdGFsID0gNDtcclxuICAgICAgICB0aGlzLmxhc3RDaGFyWzBdID0gYnVmW2J1Zi5sZW5ndGggLSAyXTtcclxuICAgICAgICB0aGlzLmxhc3RDaGFyWzFdID0gYnVmW2J1Zi5sZW5ndGggLSAxXTtcclxuICAgICAgICByZXR1cm4gci5zbGljZSgwLCAtMSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiByO1xyXG4gIH1cclxuICB0aGlzLmxhc3ROZWVkID0gMTtcclxuICB0aGlzLmxhc3RUb3RhbCA9IDI7XHJcbiAgdGhpcy5sYXN0Q2hhclswXSA9IGJ1ZltidWYubGVuZ3RoIC0gMV07XHJcbiAgcmV0dXJuIGJ1Zi50b1N0cmluZygndXRmMTZsZScsIGksIGJ1Zi5sZW5ndGggLSAxKTtcclxufVxyXG5cclxuLy8gRm9yIFVURi0xNkxFIHdlIGRvIG5vdCBleHBsaWNpdGx5IGFwcGVuZCBzcGVjaWFsIHJlcGxhY2VtZW50IGNoYXJhY3RlcnMgaWYgd2VcclxuLy8gZW5kIG9uIGEgcGFydGlhbCBjaGFyYWN0ZXIsIHdlIHNpbXBseSBsZXQgdjggaGFuZGxlIHRoYXQuXHJcbmZ1bmN0aW9uIHV0ZjE2RW5kKGJ1Zikge1xyXG4gIHZhciByID0gYnVmICYmIGJ1Zi5sZW5ndGggPyB0aGlzLndyaXRlKGJ1ZikgOiAnJztcclxuICBpZiAodGhpcy5sYXN0TmVlZCkge1xyXG4gICAgdmFyIGVuZCA9IHRoaXMubGFzdFRvdGFsIC0gdGhpcy5sYXN0TmVlZDtcclxuICAgIHJldHVybiByICsgdGhpcy5sYXN0Q2hhci50b1N0cmluZygndXRmMTZsZScsIDAsIGVuZCk7XHJcbiAgfVxyXG4gIHJldHVybiByO1xyXG59XHJcblxyXG5mdW5jdGlvbiBiYXNlNjRUZXh0KGJ1ZiwgaSkge1xyXG4gIHZhciBuID0gKGJ1Zi5sZW5ndGggLSBpKSAlIDM7XHJcbiAgaWYgKG4gPT09IDApIHJldHVybiBidWYudG9TdHJpbmcoJ2Jhc2U2NCcsIGkpO1xyXG4gIHRoaXMubGFzdE5lZWQgPSAzIC0gbjtcclxuICB0aGlzLmxhc3RUb3RhbCA9IDM7XHJcbiAgaWYgKG4gPT09IDEpIHtcclxuICAgIHRoaXMubGFzdENoYXJbMF0gPSBidWZbYnVmLmxlbmd0aCAtIDFdO1xyXG4gIH0gZWxzZSB7XHJcbiAgICB0aGlzLmxhc3RDaGFyWzBdID0gYnVmW2J1Zi5sZW5ndGggLSAyXTtcclxuICAgIHRoaXMubGFzdENoYXJbMV0gPSBidWZbYnVmLmxlbmd0aCAtIDFdO1xyXG4gIH1cclxuICByZXR1cm4gYnVmLnRvU3RyaW5nKCdiYXNlNjQnLCBpLCBidWYubGVuZ3RoIC0gbik7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGJhc2U2NEVuZChidWYpIHtcclxuICB2YXIgciA9IGJ1ZiAmJiBidWYubGVuZ3RoID8gdGhpcy53cml0ZShidWYpIDogJyc7XHJcbiAgaWYgKHRoaXMubGFzdE5lZWQpIHJldHVybiByICsgdGhpcy5sYXN0Q2hhci50b1N0cmluZygnYmFzZTY0JywgMCwgMyAtIHRoaXMubGFzdE5lZWQpO1xyXG4gIHJldHVybiByO1xyXG59XHJcblxyXG4vLyBQYXNzIGJ5dGVzIG9uIHRocm91Z2ggZm9yIHNpbmdsZS1ieXRlIGVuY29kaW5ncyAoZS5nLiBhc2NpaSwgbGF0aW4xLCBoZXgpXHJcbmZ1bmN0aW9uIHNpbXBsZVdyaXRlKGJ1Zikge1xyXG4gIHJldHVybiBidWYudG9TdHJpbmcodGhpcy5lbmNvZGluZyk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNpbXBsZUVuZChidWYpIHtcclxuICByZXR1cm4gYnVmICYmIGJ1Zi5sZW5ndGggPyB0aGlzLndyaXRlKGJ1ZikgOiAnJztcclxufSIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxyXG4vL1xyXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxyXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXHJcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xyXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXHJcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcclxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXHJcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxyXG4vL1xyXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxyXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cclxuLy9cclxuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xyXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXHJcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cclxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXHJcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxyXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXHJcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXHJcblxyXG4vLyBhIHRyYW5zZm9ybSBzdHJlYW0gaXMgYSByZWFkYWJsZS93cml0YWJsZSBzdHJlYW0gd2hlcmUgeW91IGRvXHJcbi8vIHNvbWV0aGluZyB3aXRoIHRoZSBkYXRhLiAgU29tZXRpbWVzIGl0J3MgY2FsbGVkIGEgXCJmaWx0ZXJcIixcclxuLy8gYnV0IHRoYXQncyBub3QgYSBncmVhdCBuYW1lIGZvciBpdCwgc2luY2UgdGhhdCBpbXBsaWVzIGEgdGhpbmcgd2hlcmVcclxuLy8gc29tZSBiaXRzIHBhc3MgdGhyb3VnaCwgYW5kIG90aGVycyBhcmUgc2ltcGx5IGlnbm9yZWQuICAoVGhhdCB3b3VsZFxyXG4vLyBiZSBhIHZhbGlkIGV4YW1wbGUgb2YgYSB0cmFuc2Zvcm0sIG9mIGNvdXJzZS4pXHJcbi8vXHJcbi8vIFdoaWxlIHRoZSBvdXRwdXQgaXMgY2F1c2FsbHkgcmVsYXRlZCB0byB0aGUgaW5wdXQsIGl0J3Mgbm90IGFcclxuLy8gbmVjZXNzYXJpbHkgc3ltbWV0cmljIG9yIHN5bmNocm9ub3VzIHRyYW5zZm9ybWF0aW9uLiAgRm9yIGV4YW1wbGUsXHJcbi8vIGEgemxpYiBzdHJlYW0gbWlnaHQgdGFrZSBtdWx0aXBsZSBwbGFpbi10ZXh0IHdyaXRlcygpLCBhbmQgdGhlblxyXG4vLyBlbWl0IGEgc2luZ2xlIGNvbXByZXNzZWQgY2h1bmsgc29tZSB0aW1lIGluIHRoZSBmdXR1cmUuXHJcbi8vXHJcbi8vIEhlcmUncyBob3cgdGhpcyB3b3JrczpcclxuLy9cclxuLy8gVGhlIFRyYW5zZm9ybSBzdHJlYW0gaGFzIGFsbCB0aGUgYXNwZWN0cyBvZiB0aGUgcmVhZGFibGUgYW5kIHdyaXRhYmxlXHJcbi8vIHN0cmVhbSBjbGFzc2VzLiAgV2hlbiB5b3Ugd3JpdGUoY2h1bmspLCB0aGF0IGNhbGxzIF93cml0ZShjaHVuayxjYilcclxuLy8gaW50ZXJuYWxseSwgYW5kIHJldHVybnMgZmFsc2UgaWYgdGhlcmUncyBhIGxvdCBvZiBwZW5kaW5nIHdyaXRlc1xyXG4vLyBidWZmZXJlZCB1cC4gIFdoZW4geW91IGNhbGwgcmVhZCgpLCB0aGF0IGNhbGxzIF9yZWFkKG4pIHVudGlsXHJcbi8vIHRoZXJlJ3MgZW5vdWdoIHBlbmRpbmcgcmVhZGFibGUgZGF0YSBidWZmZXJlZCB1cC5cclxuLy9cclxuLy8gSW4gYSB0cmFuc2Zvcm0gc3RyZWFtLCB0aGUgd3JpdHRlbiBkYXRhIGlzIHBsYWNlZCBpbiBhIGJ1ZmZlci4gIFdoZW5cclxuLy8gX3JlYWQobikgaXMgY2FsbGVkLCBpdCB0cmFuc2Zvcm1zIHRoZSBxdWV1ZWQgdXAgZGF0YSwgY2FsbGluZyB0aGVcclxuLy8gYnVmZmVyZWQgX3dyaXRlIGNiJ3MgYXMgaXQgY29uc3VtZXMgY2h1bmtzLiAgSWYgY29uc3VtaW5nIGEgc2luZ2xlXHJcbi8vIHdyaXR0ZW4gY2h1bmsgd291bGQgcmVzdWx0IGluIG11bHRpcGxlIG91dHB1dCBjaHVua3MsIHRoZW4gdGhlIGZpcnN0XHJcbi8vIG91dHB1dHRlZCBiaXQgY2FsbHMgdGhlIHJlYWRjYiwgYW5kIHN1YnNlcXVlbnQgY2h1bmtzIGp1c3QgZ28gaW50b1xyXG4vLyB0aGUgcmVhZCBidWZmZXIsIGFuZCB3aWxsIGNhdXNlIGl0IHRvIGVtaXQgJ3JlYWRhYmxlJyBpZiBuZWNlc3NhcnkuXHJcbi8vXHJcbi8vIFRoaXMgd2F5LCBiYWNrLXByZXNzdXJlIGlzIGFjdHVhbGx5IGRldGVybWluZWQgYnkgdGhlIHJlYWRpbmcgc2lkZSxcclxuLy8gc2luY2UgX3JlYWQgaGFzIHRvIGJlIGNhbGxlZCB0byBzdGFydCBwcm9jZXNzaW5nIGEgbmV3IGNodW5rLiAgSG93ZXZlcixcclxuLy8gYSBwYXRob2xvZ2ljYWwgaW5mbGF0ZSB0eXBlIG9mIHRyYW5zZm9ybSBjYW4gY2F1c2UgZXhjZXNzaXZlIGJ1ZmZlcmluZ1xyXG4vLyBoZXJlLiAgRm9yIGV4YW1wbGUsIGltYWdpbmUgYSBzdHJlYW0gd2hlcmUgZXZlcnkgYnl0ZSBvZiBpbnB1dCBpc1xyXG4vLyBpbnRlcnByZXRlZCBhcyBhbiBpbnRlZ2VyIGZyb20gMC0yNTUsIGFuZCB0aGVuIHJlc3VsdHMgaW4gdGhhdCBtYW55XHJcbi8vIGJ5dGVzIG9mIG91dHB1dC4gIFdyaXRpbmcgdGhlIDQgYnl0ZXMge2ZmLGZmLGZmLGZmfSB3b3VsZCByZXN1bHQgaW5cclxuLy8gMWtiIG9mIGRhdGEgYmVpbmcgb3V0cHV0LiAgSW4gdGhpcyBjYXNlLCB5b3UgY291bGQgd3JpdGUgYSB2ZXJ5IHNtYWxsXHJcbi8vIGFtb3VudCBvZiBpbnB1dCwgYW5kIGVuZCB1cCB3aXRoIGEgdmVyeSBsYXJnZSBhbW91bnQgb2Ygb3V0cHV0LiAgSW5cclxuLy8gc3VjaCBhIHBhdGhvbG9naWNhbCBpbmZsYXRpbmcgbWVjaGFuaXNtLCB0aGVyZSdkIGJlIG5vIHdheSB0byB0ZWxsXHJcbi8vIHRoZSBzeXN0ZW0gdG8gc3RvcCBkb2luZyB0aGUgdHJhbnNmb3JtLiAgQSBzaW5nbGUgNE1CIHdyaXRlIGNvdWxkXHJcbi8vIGNhdXNlIHRoZSBzeXN0ZW0gdG8gcnVuIG91dCBvZiBtZW1vcnkuXHJcbi8vXHJcbi8vIEhvd2V2ZXIsIGV2ZW4gaW4gc3VjaCBhIHBhdGhvbG9naWNhbCBjYXNlLCBvbmx5IGEgc2luZ2xlIHdyaXR0ZW4gY2h1bmtcclxuLy8gd291bGQgYmUgY29uc3VtZWQsIGFuZCB0aGVuIHRoZSByZXN0IHdvdWxkIHdhaXQgKHVuLXRyYW5zZm9ybWVkKSB1bnRpbFxyXG4vLyB0aGUgcmVzdWx0cyBvZiB0aGUgcHJldmlvdXMgdHJhbnNmb3JtZWQgY2h1bmsgd2VyZSBjb25zdW1lZC5cclxuXHJcbid1c2Ugc3RyaWN0JztcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gVHJhbnNmb3JtO1xyXG5cclxudmFyIER1cGxleCA9IHJlcXVpcmUoJy4vX3N0cmVhbV9kdXBsZXgnKTtcclxuXHJcbi8qPHJlcGxhY2VtZW50PiovXHJcbnZhciB1dGlsID0gcmVxdWlyZSgnY29yZS11dGlsLWlzJyk7XHJcbnV0aWwuaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xyXG4vKjwvcmVwbGFjZW1lbnQ+Ki9cclxuXHJcbnV0aWwuaW5oZXJpdHMoVHJhbnNmb3JtLCBEdXBsZXgpO1xyXG5cclxuZnVuY3Rpb24gYWZ0ZXJUcmFuc2Zvcm0oZXIsIGRhdGEpIHtcclxuICB2YXIgdHMgPSB0aGlzLl90cmFuc2Zvcm1TdGF0ZTtcclxuICB0cy50cmFuc2Zvcm1pbmcgPSBmYWxzZTtcclxuXHJcbiAgdmFyIGNiID0gdHMud3JpdGVjYjtcclxuXHJcbiAgaWYgKCFjYikge1xyXG4gICAgcmV0dXJuIHRoaXMuZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IoJ3dyaXRlIGNhbGxiYWNrIGNhbGxlZCBtdWx0aXBsZSB0aW1lcycpKTtcclxuICB9XHJcblxyXG4gIHRzLndyaXRlY2h1bmsgPSBudWxsO1xyXG4gIHRzLndyaXRlY2IgPSBudWxsO1xyXG5cclxuICBpZiAoZGF0YSAhPSBudWxsKSAvLyBzaW5nbGUgZXF1YWxzIGNoZWNrIGZvciBib3RoIGBudWxsYCBhbmQgYHVuZGVmaW5lZGBcclxuICAgIHRoaXMucHVzaChkYXRhKTtcclxuXHJcbiAgY2IoZXIpO1xyXG5cclxuICB2YXIgcnMgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xyXG4gIHJzLnJlYWRpbmcgPSBmYWxzZTtcclxuICBpZiAocnMubmVlZFJlYWRhYmxlIHx8IHJzLmxlbmd0aCA8IHJzLmhpZ2hXYXRlck1hcmspIHtcclxuICAgIHRoaXMuX3JlYWQocnMuaGlnaFdhdGVyTWFyayk7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBUcmFuc2Zvcm0ob3B0aW9ucykge1xyXG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBUcmFuc2Zvcm0pKSByZXR1cm4gbmV3IFRyYW5zZm9ybShvcHRpb25zKTtcclxuXHJcbiAgRHVwbGV4LmNhbGwodGhpcywgb3B0aW9ucyk7XHJcblxyXG4gIHRoaXMuX3RyYW5zZm9ybVN0YXRlID0ge1xyXG4gICAgYWZ0ZXJUcmFuc2Zvcm06IGFmdGVyVHJhbnNmb3JtLmJpbmQodGhpcyksXHJcbiAgICBuZWVkVHJhbnNmb3JtOiBmYWxzZSxcclxuICAgIHRyYW5zZm9ybWluZzogZmFsc2UsXHJcbiAgICB3cml0ZWNiOiBudWxsLFxyXG4gICAgd3JpdGVjaHVuazogbnVsbCxcclxuICAgIHdyaXRlZW5jb2Rpbmc6IG51bGxcclxuICB9O1xyXG5cclxuICAvLyBzdGFydCBvdXQgYXNraW5nIGZvciBhIHJlYWRhYmxlIGV2ZW50IG9uY2UgZGF0YSBpcyB0cmFuc2Zvcm1lZC5cclxuICB0aGlzLl9yZWFkYWJsZVN0YXRlLm5lZWRSZWFkYWJsZSA9IHRydWU7XHJcblxyXG4gIC8vIHdlIGhhdmUgaW1wbGVtZW50ZWQgdGhlIF9yZWFkIG1ldGhvZCwgYW5kIGRvbmUgdGhlIG90aGVyIHRoaW5nc1xyXG4gIC8vIHRoYXQgUmVhZGFibGUgd2FudHMgYmVmb3JlIHRoZSBmaXJzdCBfcmVhZCBjYWxsLCBzbyB1bnNldCB0aGVcclxuICAvLyBzeW5jIGd1YXJkIGZsYWcuXHJcbiAgdGhpcy5fcmVhZGFibGVTdGF0ZS5zeW5jID0gZmFsc2U7XHJcblxyXG4gIGlmIChvcHRpb25zKSB7XHJcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMudHJhbnNmb3JtID09PSAnZnVuY3Rpb24nKSB0aGlzLl90cmFuc2Zvcm0gPSBvcHRpb25zLnRyYW5zZm9ybTtcclxuXHJcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMuZmx1c2ggPT09ICdmdW5jdGlvbicpIHRoaXMuX2ZsdXNoID0gb3B0aW9ucy5mbHVzaDtcclxuICB9XHJcblxyXG4gIC8vIFdoZW4gdGhlIHdyaXRhYmxlIHNpZGUgZmluaXNoZXMsIHRoZW4gZmx1c2ggb3V0IGFueXRoaW5nIHJlbWFpbmluZy5cclxuICB0aGlzLm9uKCdwcmVmaW5pc2gnLCBwcmVmaW5pc2gpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBwcmVmaW5pc2goKSB7XHJcbiAgdmFyIF90aGlzID0gdGhpcztcclxuXHJcbiAgaWYgKHR5cGVvZiB0aGlzLl9mbHVzaCA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgdGhpcy5fZmx1c2goZnVuY3Rpb24gKGVyLCBkYXRhKSB7XHJcbiAgICAgIGRvbmUoX3RoaXMsIGVyLCBkYXRhKTtcclxuICAgIH0pO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBkb25lKHRoaXMsIG51bGwsIG51bGwpO1xyXG4gIH1cclxufVxyXG5cclxuVHJhbnNmb3JtLnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZykge1xyXG4gIHRoaXMuX3RyYW5zZm9ybVN0YXRlLm5lZWRUcmFuc2Zvcm0gPSBmYWxzZTtcclxuICByZXR1cm4gRHVwbGV4LnByb3RvdHlwZS5wdXNoLmNhbGwodGhpcywgY2h1bmssIGVuY29kaW5nKTtcclxufTtcclxuXHJcbi8vIFRoaXMgaXMgdGhlIHBhcnQgd2hlcmUgeW91IGRvIHN0dWZmIVxyXG4vLyBvdmVycmlkZSB0aGlzIGZ1bmN0aW9uIGluIGltcGxlbWVudGF0aW9uIGNsYXNzZXMuXHJcbi8vICdjaHVuaycgaXMgYW4gaW5wdXQgY2h1bmsuXHJcbi8vXHJcbi8vIENhbGwgYHB1c2gobmV3Q2h1bmspYCB0byBwYXNzIGFsb25nIHRyYW5zZm9ybWVkIG91dHB1dFxyXG4vLyB0byB0aGUgcmVhZGFibGUgc2lkZS4gIFlvdSBtYXkgY2FsbCAncHVzaCcgemVybyBvciBtb3JlIHRpbWVzLlxyXG4vL1xyXG4vLyBDYWxsIGBjYihlcnIpYCB3aGVuIHlvdSBhcmUgZG9uZSB3aXRoIHRoaXMgY2h1bmsuICBJZiB5b3UgcGFzc1xyXG4vLyBhbiBlcnJvciwgdGhlbiB0aGF0J2xsIHB1dCB0aGUgaHVydCBvbiB0aGUgd2hvbGUgb3BlcmF0aW9uLiAgSWYgeW91XHJcbi8vIG5ldmVyIGNhbGwgY2IoKSwgdGhlbiB5b3UnbGwgbmV2ZXIgZ2V0IGFub3RoZXIgY2h1bmsuXHJcblRyYW5zZm9ybS5wcm90b3R5cGUuX3RyYW5zZm9ybSA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcsIGNiKSB7XHJcbiAgdGhyb3cgbmV3IEVycm9yKCdfdHJhbnNmb3JtKCkgaXMgbm90IGltcGxlbWVudGVkJyk7XHJcbn07XHJcblxyXG5UcmFuc2Zvcm0ucHJvdG90eXBlLl93cml0ZSA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcsIGNiKSB7XHJcbiAgdmFyIHRzID0gdGhpcy5fdHJhbnNmb3JtU3RhdGU7XHJcbiAgdHMud3JpdGVjYiA9IGNiO1xyXG4gIHRzLndyaXRlY2h1bmsgPSBjaHVuaztcclxuICB0cy53cml0ZWVuY29kaW5nID0gZW5jb2Rpbmc7XHJcbiAgaWYgKCF0cy50cmFuc2Zvcm1pbmcpIHtcclxuICAgIHZhciBycyA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XHJcbiAgICBpZiAodHMubmVlZFRyYW5zZm9ybSB8fCBycy5uZWVkUmVhZGFibGUgfHwgcnMubGVuZ3RoIDwgcnMuaGlnaFdhdGVyTWFyaykgdGhpcy5fcmVhZChycy5oaWdoV2F0ZXJNYXJrKTtcclxuICB9XHJcbn07XHJcblxyXG4vLyBEb2Vzbid0IG1hdHRlciB3aGF0IHRoZSBhcmdzIGFyZSBoZXJlLlxyXG4vLyBfdHJhbnNmb3JtIGRvZXMgYWxsIHRoZSB3b3JrLlxyXG4vLyBUaGF0IHdlIGdvdCBoZXJlIG1lYW5zIHRoYXQgdGhlIHJlYWRhYmxlIHNpZGUgd2FudHMgbW9yZSBkYXRhLlxyXG5UcmFuc2Zvcm0ucHJvdG90eXBlLl9yZWFkID0gZnVuY3Rpb24gKG4pIHtcclxuICB2YXIgdHMgPSB0aGlzLl90cmFuc2Zvcm1TdGF0ZTtcclxuXHJcbiAgaWYgKHRzLndyaXRlY2h1bmsgIT09IG51bGwgJiYgdHMud3JpdGVjYiAmJiAhdHMudHJhbnNmb3JtaW5nKSB7XHJcbiAgICB0cy50cmFuc2Zvcm1pbmcgPSB0cnVlO1xyXG4gICAgdGhpcy5fdHJhbnNmb3JtKHRzLndyaXRlY2h1bmssIHRzLndyaXRlZW5jb2RpbmcsIHRzLmFmdGVyVHJhbnNmb3JtKTtcclxuICB9IGVsc2Uge1xyXG4gICAgLy8gbWFyayB0aGF0IHdlIG5lZWQgYSB0cmFuc2Zvcm0sIHNvIHRoYXQgYW55IGRhdGEgdGhhdCBjb21lcyBpblxyXG4gICAgLy8gd2lsbCBnZXQgcHJvY2Vzc2VkLCBub3cgdGhhdCB3ZSd2ZSBhc2tlZCBmb3IgaXQuXHJcbiAgICB0cy5uZWVkVHJhbnNmb3JtID0gdHJ1ZTtcclxuICB9XHJcbn07XHJcblxyXG5UcmFuc2Zvcm0ucHJvdG90eXBlLl9kZXN0cm95ID0gZnVuY3Rpb24gKGVyciwgY2IpIHtcclxuICB2YXIgX3RoaXMyID0gdGhpcztcclxuXHJcbiAgRHVwbGV4LnByb3RvdHlwZS5fZGVzdHJveS5jYWxsKHRoaXMsIGVyciwgZnVuY3Rpb24gKGVycjIpIHtcclxuICAgIGNiKGVycjIpO1xyXG4gICAgX3RoaXMyLmVtaXQoJ2Nsb3NlJyk7XHJcbiAgfSk7XHJcbn07XHJcblxyXG5mdW5jdGlvbiBkb25lKHN0cmVhbSwgZXIsIGRhdGEpIHtcclxuICBpZiAoZXIpIHJldHVybiBzdHJlYW0uZW1pdCgnZXJyb3InLCBlcik7XHJcblxyXG4gIGlmIChkYXRhICE9IG51bGwpIC8vIHNpbmdsZSBlcXVhbHMgY2hlY2sgZm9yIGJvdGggYG51bGxgIGFuZCBgdW5kZWZpbmVkYFxyXG4gICAgc3RyZWFtLnB1c2goZGF0YSk7XHJcblxyXG4gIC8vIGlmIHRoZXJlJ3Mgbm90aGluZyBpbiB0aGUgd3JpdGUgYnVmZmVyLCB0aGVuIHRoYXQgbWVhbnNcclxuICAvLyB0aGF0IG5vdGhpbmcgbW9yZSB3aWxsIGV2ZXIgYmUgcHJvdmlkZWRcclxuICBpZiAoc3RyZWFtLl93cml0YWJsZVN0YXRlLmxlbmd0aCkgdGhyb3cgbmV3IEVycm9yKCdDYWxsaW5nIHRyYW5zZm9ybSBkb25lIHdoZW4gd3MubGVuZ3RoICE9IDAnKTtcclxuXHJcbiAgaWYgKHN0cmVhbS5fdHJhbnNmb3JtU3RhdGUudHJhbnNmb3JtaW5nKSB0aHJvdyBuZXcgRXJyb3IoJ0NhbGxpbmcgdHJhbnNmb3JtIGRvbmUgd2hlbiBzdGlsbCB0cmFuc2Zvcm1pbmcnKTtcclxuXHJcbiAgcmV0dXJuIHN0cmVhbS5wdXNoKG51bGwpO1xyXG59IiwiJ3VzZSBzdHJpY3QnO1xyXG5cclxudmFyIG9iamVjdEFzc2lnbiA9IHJlcXVpcmUoJ29iamVjdC1hc3NpZ24nKTtcclxuXHJcbi8vIGNvbXBhcmUgYW5kIGlzQnVmZmVyIHRha2VuIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXIvYmxvYi82ODBlOWU1ZTQ4OGYyMmFhYzI3NTk5YTU3ZGM4NDRhNjMxNTkyOGRkL2luZGV4LmpzXHJcbi8vIG9yaWdpbmFsIG5vdGljZTpcclxuXHJcbi8qIVxyXG4gKiBUaGUgYnVmZmVyIG1vZHVsZSBmcm9tIG5vZGUuanMsIGZvciB0aGUgYnJvd3Nlci5cclxuICpcclxuICogQGF1dGhvciAgIEZlcm9zcyBBYm91a2hhZGlqZWggPGZlcm9zc0BmZXJvc3Mub3JnPiA8aHR0cDovL2Zlcm9zcy5vcmc+XHJcbiAqIEBsaWNlbnNlICBNSVRcclxuICovXHJcbmZ1bmN0aW9uIGNvbXBhcmUoYSwgYikge1xyXG4gIGlmIChhID09PSBiKSB7XHJcbiAgICByZXR1cm4gMDtcclxuICB9XHJcblxyXG4gIHZhciB4ID0gYS5sZW5ndGg7XHJcbiAgdmFyIHkgPSBiLmxlbmd0aDtcclxuXHJcbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IE1hdGgubWluKHgsIHkpOyBpIDwgbGVuOyArK2kpIHtcclxuICAgIGlmIChhW2ldICE9PSBiW2ldKSB7XHJcbiAgICAgIHggPSBhW2ldO1xyXG4gICAgICB5ID0gYltpXTtcclxuICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBpZiAoeCA8IHkpIHtcclxuICAgIHJldHVybiAtMTtcclxuICB9XHJcbiAgaWYgKHkgPCB4KSB7XHJcbiAgICByZXR1cm4gMTtcclxuICB9XHJcbiAgcmV0dXJuIDA7XHJcbn1cclxuZnVuY3Rpb24gaXNCdWZmZXIoYikge1xyXG4gIGlmIChnbG9iYWwuQnVmZmVyICYmIHR5cGVvZiBnbG9iYWwuQnVmZmVyLmlzQnVmZmVyID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICByZXR1cm4gZ2xvYmFsLkJ1ZmZlci5pc0J1ZmZlcihiKTtcclxuICB9XHJcbiAgcmV0dXJuICEhKGIgIT0gbnVsbCAmJiBiLl9pc0J1ZmZlcik7XHJcbn1cclxuXHJcbi8vIGJhc2VkIG9uIG5vZGUgYXNzZXJ0LCBvcmlnaW5hbCBub3RpY2U6XHJcbi8vIE5COiBUaGUgVVJMIHRvIHRoZSBDb21tb25KUyBzcGVjIGlzIGtlcHQganVzdCBmb3IgdHJhZGl0aW9uLlxyXG4vLyAgICAgbm9kZS1hc3NlcnQgaGFzIGV2b2x2ZWQgYSBsb3Qgc2luY2UgdGhlbiwgYm90aCBpbiBBUEkgYW5kIGJlaGF2aW9yLlxyXG5cclxuLy8gaHR0cDovL3dpa2kuY29tbW9uanMub3JnL3dpa2kvVW5pdF9UZXN0aW5nLzEuMFxyXG4vL1xyXG4vLyBUSElTIElTIE5PVCBURVNURUQgTk9SIExJS0VMWSBUTyBXT1JLIE9VVFNJREUgVjghXHJcbi8vXHJcbi8vIE9yaWdpbmFsbHkgZnJvbSBuYXJ3aGFsLmpzIChodHRwOi8vbmFyd2hhbGpzLm9yZylcclxuLy8gQ29weXJpZ2h0IChjKSAyMDA5IFRob21hcyBSb2JpbnNvbiA8Mjgwbm9ydGguY29tPlxyXG4vL1xyXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XHJcbi8vIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlICdTb2Z0d2FyZScpLCB0b1xyXG4vLyBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZVxyXG4vLyByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3JcclxuLy8gc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcclxuLy8gZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcclxuLy9cclxuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cclxuLy8gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXHJcbi8vXHJcbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCAnQVMgSVMnLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXHJcbi8vIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxyXG4vLyBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcclxuLy8gQVVUSE9SUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU5cclxuLy8gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTlxyXG4vLyBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cclxuXHJcbnZhciB1dGlsID0gcmVxdWlyZSgndXRpbC8nKTtcclxudmFyIGhhc093biA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XHJcbnZhciBwU2xpY2UgPSBBcnJheS5wcm90b3R5cGUuc2xpY2U7XHJcbnZhciBmdW5jdGlvbnNIYXZlTmFtZXMgPSAoZnVuY3Rpb24gKCkge1xyXG4gIHJldHVybiBmdW5jdGlvbiBmb28oKSB7fS5uYW1lID09PSAnZm9vJztcclxufSgpKTtcclxuZnVuY3Rpb24gcFRvU3RyaW5nIChvYmopIHtcclxuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG9iaik7XHJcbn1cclxuZnVuY3Rpb24gaXNWaWV3KGFycmJ1Zikge1xyXG4gIGlmIChpc0J1ZmZlcihhcnJidWYpKSB7XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG4gIGlmICh0eXBlb2YgZ2xvYmFsLkFycmF5QnVmZmVyICE9PSAnZnVuY3Rpb24nKSB7XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG4gIGlmICh0eXBlb2YgQXJyYXlCdWZmZXIuaXNWaWV3ID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICByZXR1cm4gQXJyYXlCdWZmZXIuaXNWaWV3KGFycmJ1Zik7XHJcbiAgfVxyXG4gIGlmICghYXJyYnVmKSB7XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG4gIGlmIChhcnJidWYgaW5zdGFuY2VvZiBEYXRhVmlldykge1xyXG4gICAgcmV0dXJuIHRydWU7XHJcbiAgfVxyXG4gIGlmIChhcnJidWYuYnVmZmVyICYmIGFycmJ1Zi5idWZmZXIgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xyXG4gICAgcmV0dXJuIHRydWU7XHJcbiAgfVxyXG4gIHJldHVybiBmYWxzZTtcclxufVxyXG4vLyAxLiBUaGUgYXNzZXJ0IG1vZHVsZSBwcm92aWRlcyBmdW5jdGlvbnMgdGhhdCB0aHJvd1xyXG4vLyBBc3NlcnRpb25FcnJvcidzIHdoZW4gcGFydGljdWxhciBjb25kaXRpb25zIGFyZSBub3QgbWV0LiBUaGVcclxuLy8gYXNzZXJ0IG1vZHVsZSBtdXN0IGNvbmZvcm0gdG8gdGhlIGZvbGxvd2luZyBpbnRlcmZhY2UuXHJcblxyXG52YXIgYXNzZXJ0ID0gbW9kdWxlLmV4cG9ydHMgPSBvaztcclxuXHJcbi8vIDIuIFRoZSBBc3NlcnRpb25FcnJvciBpcyBkZWZpbmVkIGluIGFzc2VydC5cclxuLy8gbmV3IGFzc2VydC5Bc3NlcnRpb25FcnJvcih7IG1lc3NhZ2U6IG1lc3NhZ2UsXHJcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3R1YWw6IGFjdHVhbCxcclxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVjdGVkOiBleHBlY3RlZCB9KVxyXG5cclxudmFyIHJlZ2V4ID0gL1xccypmdW5jdGlvblxccysoW15cXChcXHNdKilcXHMqLztcclxuLy8gYmFzZWQgb24gaHR0cHM6Ly9naXRodWIuY29tL2xqaGFyYi9mdW5jdGlvbi5wcm90b3R5cGUubmFtZS9ibG9iL2FkZWVlZWM4YmZjYzYwNjhiMTg3ZDdkOWZiM2Q1YmIxZDNhMzA4OTkvaW1wbGVtZW50YXRpb24uanNcclxuZnVuY3Rpb24gZ2V0TmFtZShmdW5jKSB7XHJcbiAgaWYgKCF1dGlsLmlzRnVuY3Rpb24oZnVuYykpIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbiAgaWYgKGZ1bmN0aW9uc0hhdmVOYW1lcykge1xyXG4gICAgcmV0dXJuIGZ1bmMubmFtZTtcclxuICB9XHJcbiAgdmFyIHN0ciA9IGZ1bmMudG9TdHJpbmcoKTtcclxuICB2YXIgbWF0Y2ggPSBzdHIubWF0Y2gocmVnZXgpO1xyXG4gIHJldHVybiBtYXRjaCAmJiBtYXRjaFsxXTtcclxufVxyXG5hc3NlcnQuQXNzZXJ0aW9uRXJyb3IgPSBmdW5jdGlvbiBBc3NlcnRpb25FcnJvcihvcHRpb25zKSB7XHJcbiAgdGhpcy5uYW1lID0gJ0Fzc2VydGlvbkVycm9yJztcclxuICB0aGlzLmFjdHVhbCA9IG9wdGlvbnMuYWN0dWFsO1xyXG4gIHRoaXMuZXhwZWN0ZWQgPSBvcHRpb25zLmV4cGVjdGVkO1xyXG4gIHRoaXMub3BlcmF0b3IgPSBvcHRpb25zLm9wZXJhdG9yO1xyXG4gIGlmIChvcHRpb25zLm1lc3NhZ2UpIHtcclxuICAgIHRoaXMubWVzc2FnZSA9IG9wdGlvbnMubWVzc2FnZTtcclxuICAgIHRoaXMuZ2VuZXJhdGVkTWVzc2FnZSA9IGZhbHNlO1xyXG4gIH0gZWxzZSB7XHJcbiAgICB0aGlzLm1lc3NhZ2UgPSBnZXRNZXNzYWdlKHRoaXMpO1xyXG4gICAgdGhpcy5nZW5lcmF0ZWRNZXNzYWdlID0gdHJ1ZTtcclxuICB9XHJcbiAgdmFyIHN0YWNrU3RhcnRGdW5jdGlvbiA9IG9wdGlvbnMuc3RhY2tTdGFydEZ1bmN0aW9uIHx8IGZhaWw7XHJcbiAgaWYgKEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKSB7XHJcbiAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCBzdGFja1N0YXJ0RnVuY3Rpb24pO1xyXG4gIH0gZWxzZSB7XHJcbiAgICAvLyBub24gdjggYnJvd3NlcnMgc28gd2UgY2FuIGhhdmUgYSBzdGFja3RyYWNlXHJcbiAgICB2YXIgZXJyID0gbmV3IEVycm9yKCk7XHJcbiAgICBpZiAoZXJyLnN0YWNrKSB7XHJcbiAgICAgIHZhciBvdXQgPSBlcnIuc3RhY2s7XHJcblxyXG4gICAgICAvLyB0cnkgdG8gc3RyaXAgdXNlbGVzcyBmcmFtZXNcclxuICAgICAgdmFyIGZuX25hbWUgPSBnZXROYW1lKHN0YWNrU3RhcnRGdW5jdGlvbik7XHJcbiAgICAgIHZhciBpZHggPSBvdXQuaW5kZXhPZignXFxuJyArIGZuX25hbWUpO1xyXG4gICAgICBpZiAoaWR4ID49IDApIHtcclxuICAgICAgICAvLyBvbmNlIHdlIGhhdmUgbG9jYXRlZCB0aGUgZnVuY3Rpb24gZnJhbWVcclxuICAgICAgICAvLyB3ZSBuZWVkIHRvIHN0cmlwIG91dCBldmVyeXRoaW5nIGJlZm9yZSBpdCAoYW5kIGl0cyBsaW5lKVxyXG4gICAgICAgIHZhciBuZXh0X2xpbmUgPSBvdXQuaW5kZXhPZignXFxuJywgaWR4ICsgMSk7XHJcbiAgICAgICAgb3V0ID0gb3V0LnN1YnN0cmluZyhuZXh0X2xpbmUgKyAxKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgdGhpcy5zdGFjayA9IG91dDtcclxuICAgIH1cclxuICB9XHJcbn07XHJcblxyXG4vLyBhc3NlcnQuQXNzZXJ0aW9uRXJyb3IgaW5zdGFuY2VvZiBFcnJvclxyXG51dGlsLmluaGVyaXRzKGFzc2VydC5Bc3NlcnRpb25FcnJvciwgRXJyb3IpO1xyXG5cclxuZnVuY3Rpb24gdHJ1bmNhdGUocywgbikge1xyXG4gIGlmICh0eXBlb2YgcyA9PT0gJ3N0cmluZycpIHtcclxuICAgIHJldHVybiBzLmxlbmd0aCA8IG4gPyBzIDogcy5zbGljZSgwLCBuKTtcclxuICB9IGVsc2Uge1xyXG4gICAgcmV0dXJuIHM7XHJcbiAgfVxyXG59XHJcbmZ1bmN0aW9uIGluc3BlY3Qoc29tZXRoaW5nKSB7XHJcbiAgaWYgKGZ1bmN0aW9uc0hhdmVOYW1lcyB8fCAhdXRpbC5pc0Z1bmN0aW9uKHNvbWV0aGluZykpIHtcclxuICAgIHJldHVybiB1dGlsLmluc3BlY3Qoc29tZXRoaW5nKTtcclxuICB9XHJcbiAgdmFyIHJhd25hbWUgPSBnZXROYW1lKHNvbWV0aGluZyk7XHJcbiAgdmFyIG5hbWUgPSByYXduYW1lID8gJzogJyArIHJhd25hbWUgOiAnJztcclxuICByZXR1cm4gJ1tGdW5jdGlvbicgKyAgbmFtZSArICddJztcclxufVxyXG5mdW5jdGlvbiBnZXRNZXNzYWdlKHNlbGYpIHtcclxuICByZXR1cm4gdHJ1bmNhdGUoaW5zcGVjdChzZWxmLmFjdHVhbCksIDEyOCkgKyAnICcgK1xyXG4gICAgICAgICBzZWxmLm9wZXJhdG9yICsgJyAnICtcclxuICAgICAgICAgdHJ1bmNhdGUoaW5zcGVjdChzZWxmLmV4cGVjdGVkKSwgMTI4KTtcclxufVxyXG5cclxuLy8gQXQgcHJlc2VudCBvbmx5IHRoZSB0aHJlZSBrZXlzIG1lbnRpb25lZCBhYm92ZSBhcmUgdXNlZCBhbmRcclxuLy8gdW5kZXJzdG9vZCBieSB0aGUgc3BlYy4gSW1wbGVtZW50YXRpb25zIG9yIHN1YiBtb2R1bGVzIGNhbiBwYXNzXHJcbi8vIG90aGVyIGtleXMgdG8gdGhlIEFzc2VydGlvbkVycm9yJ3MgY29uc3RydWN0b3IgLSB0aGV5IHdpbGwgYmVcclxuLy8gaWdub3JlZC5cclxuXHJcbi8vIDMuIEFsbCBvZiB0aGUgZm9sbG93aW5nIGZ1bmN0aW9ucyBtdXN0IHRocm93IGFuIEFzc2VydGlvbkVycm9yXHJcbi8vIHdoZW4gYSBjb3JyZXNwb25kaW5nIGNvbmRpdGlvbiBpcyBub3QgbWV0LCB3aXRoIGEgbWVzc2FnZSB0aGF0XHJcbi8vIG1heSBiZSB1bmRlZmluZWQgaWYgbm90IHByb3ZpZGVkLiAgQWxsIGFzc2VydGlvbiBtZXRob2RzIHByb3ZpZGVcclxuLy8gYm90aCB0aGUgYWN0dWFsIGFuZCBleHBlY3RlZCB2YWx1ZXMgdG8gdGhlIGFzc2VydGlvbiBlcnJvciBmb3JcclxuLy8gZGlzcGxheSBwdXJwb3Nlcy5cclxuXHJcbmZ1bmN0aW9uIGZhaWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSwgb3BlcmF0b3IsIHN0YWNrU3RhcnRGdW5jdGlvbikge1xyXG4gIHRocm93IG5ldyBhc3NlcnQuQXNzZXJ0aW9uRXJyb3Ioe1xyXG4gICAgbWVzc2FnZTogbWVzc2FnZSxcclxuICAgIGFjdHVhbDogYWN0dWFsLFxyXG4gICAgZXhwZWN0ZWQ6IGV4cGVjdGVkLFxyXG4gICAgb3BlcmF0b3I6IG9wZXJhdG9yLFxyXG4gICAgc3RhY2tTdGFydEZ1bmN0aW9uOiBzdGFja1N0YXJ0RnVuY3Rpb25cclxuICB9KTtcclxufVxyXG5cclxuLy8gRVhURU5TSU9OISBhbGxvd3MgZm9yIHdlbGwgYmVoYXZlZCBlcnJvcnMgZGVmaW5lZCBlbHNld2hlcmUuXHJcbmFzc2VydC5mYWlsID0gZmFpbDtcclxuXHJcbi8vIDQuIFB1cmUgYXNzZXJ0aW9uIHRlc3RzIHdoZXRoZXIgYSB2YWx1ZSBpcyB0cnV0aHksIGFzIGRldGVybWluZWRcclxuLy8gYnkgISFndWFyZC5cclxuLy8gYXNzZXJ0Lm9rKGd1YXJkLCBtZXNzYWdlX29wdCk7XHJcbi8vIFRoaXMgc3RhdGVtZW50IGlzIGVxdWl2YWxlbnQgdG8gYXNzZXJ0LmVxdWFsKHRydWUsICEhZ3VhcmQsXHJcbi8vIG1lc3NhZ2Vfb3B0KTsuIFRvIHRlc3Qgc3RyaWN0bHkgZm9yIHRoZSB2YWx1ZSB0cnVlLCB1c2VcclxuLy8gYXNzZXJ0LnN0cmljdEVxdWFsKHRydWUsIGd1YXJkLCBtZXNzYWdlX29wdCk7LlxyXG5cclxuZnVuY3Rpb24gb2sodmFsdWUsIG1lc3NhZ2UpIHtcclxuICBpZiAoIXZhbHVlKSBmYWlsKHZhbHVlLCB0cnVlLCBtZXNzYWdlLCAnPT0nLCBhc3NlcnQub2spO1xyXG59XHJcbmFzc2VydC5vayA9IG9rO1xyXG5cclxuLy8gNS4gVGhlIGVxdWFsaXR5IGFzc2VydGlvbiB0ZXN0cyBzaGFsbG93LCBjb2VyY2l2ZSBlcXVhbGl0eSB3aXRoXHJcbi8vID09LlxyXG4vLyBhc3NlcnQuZXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZV9vcHQpO1xyXG5cclxuYXNzZXJ0LmVxdWFsID0gZnVuY3Rpb24gZXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSkge1xyXG4gIGlmIChhY3R1YWwgIT0gZXhwZWN0ZWQpIGZhaWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSwgJz09JywgYXNzZXJ0LmVxdWFsKTtcclxufTtcclxuXHJcbi8vIDYuIFRoZSBub24tZXF1YWxpdHkgYXNzZXJ0aW9uIHRlc3RzIGZvciB3aGV0aGVyIHR3byBvYmplY3RzIGFyZSBub3QgZXF1YWxcclxuLy8gd2l0aCAhPSBhc3NlcnQubm90RXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZV9vcHQpO1xyXG5cclxuYXNzZXJ0Lm5vdEVxdWFsID0gZnVuY3Rpb24gbm90RXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSkge1xyXG4gIGlmIChhY3R1YWwgPT0gZXhwZWN0ZWQpIHtcclxuICAgIGZhaWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSwgJyE9JywgYXNzZXJ0Lm5vdEVxdWFsKTtcclxuICB9XHJcbn07XHJcblxyXG4vLyA3LiBUaGUgZXF1aXZhbGVuY2UgYXNzZXJ0aW9uIHRlc3RzIGEgZGVlcCBlcXVhbGl0eSByZWxhdGlvbi5cclxuLy8gYXNzZXJ0LmRlZXBFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlX29wdCk7XHJcblxyXG5hc3NlcnQuZGVlcEVxdWFsID0gZnVuY3Rpb24gZGVlcEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpIHtcclxuICBpZiAoIV9kZWVwRXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgZmFsc2UpKSB7XHJcbiAgICBmYWlsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UsICdkZWVwRXF1YWwnLCBhc3NlcnQuZGVlcEVxdWFsKTtcclxuICB9XHJcbn07XHJcblxyXG5hc3NlcnQuZGVlcFN0cmljdEVxdWFsID0gZnVuY3Rpb24gZGVlcFN0cmljdEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpIHtcclxuICBpZiAoIV9kZWVwRXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgdHJ1ZSkpIHtcclxuICAgIGZhaWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSwgJ2RlZXBTdHJpY3RFcXVhbCcsIGFzc2VydC5kZWVwU3RyaWN0RXF1YWwpO1xyXG4gIH1cclxufTtcclxuXHJcbmZ1bmN0aW9uIF9kZWVwRXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgc3RyaWN0LCBtZW1vcykge1xyXG4gIC8vIDcuMS4gQWxsIGlkZW50aWNhbCB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGFzIGRldGVybWluZWQgYnkgPT09LlxyXG4gIGlmIChhY3R1YWwgPT09IGV4cGVjdGVkKSB7XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9IGVsc2UgaWYgKGlzQnVmZmVyKGFjdHVhbCkgJiYgaXNCdWZmZXIoZXhwZWN0ZWQpKSB7XHJcbiAgICByZXR1cm4gY29tcGFyZShhY3R1YWwsIGV4cGVjdGVkKSA9PT0gMDtcclxuXHJcbiAgLy8gNy4yLiBJZiB0aGUgZXhwZWN0ZWQgdmFsdWUgaXMgYSBEYXRlIG9iamVjdCwgdGhlIGFjdHVhbCB2YWx1ZSBpc1xyXG4gIC8vIGVxdWl2YWxlbnQgaWYgaXQgaXMgYWxzbyBhIERhdGUgb2JqZWN0IHRoYXQgcmVmZXJzIHRvIHRoZSBzYW1lIHRpbWUuXHJcbiAgfSBlbHNlIGlmICh1dGlsLmlzRGF0ZShhY3R1YWwpICYmIHV0aWwuaXNEYXRlKGV4cGVjdGVkKSkge1xyXG4gICAgcmV0dXJuIGFjdHVhbC5nZXRUaW1lKCkgPT09IGV4cGVjdGVkLmdldFRpbWUoKTtcclxuXHJcbiAgLy8gNy4zIElmIHRoZSBleHBlY3RlZCB2YWx1ZSBpcyBhIFJlZ0V4cCBvYmplY3QsIHRoZSBhY3R1YWwgdmFsdWUgaXNcclxuICAvLyBlcXVpdmFsZW50IGlmIGl0IGlzIGFsc28gYSBSZWdFeHAgb2JqZWN0IHdpdGggdGhlIHNhbWUgc291cmNlIGFuZFxyXG4gIC8vIHByb3BlcnRpZXMgKGBnbG9iYWxgLCBgbXVsdGlsaW5lYCwgYGxhc3RJbmRleGAsIGBpZ25vcmVDYXNlYCkuXHJcbiAgfSBlbHNlIGlmICh1dGlsLmlzUmVnRXhwKGFjdHVhbCkgJiYgdXRpbC5pc1JlZ0V4cChleHBlY3RlZCkpIHtcclxuICAgIHJldHVybiBhY3R1YWwuc291cmNlID09PSBleHBlY3RlZC5zb3VyY2UgJiZcclxuICAgICAgICAgICBhY3R1YWwuZ2xvYmFsID09PSBleHBlY3RlZC5nbG9iYWwgJiZcclxuICAgICAgICAgICBhY3R1YWwubXVsdGlsaW5lID09PSBleHBlY3RlZC5tdWx0aWxpbmUgJiZcclxuICAgICAgICAgICBhY3R1YWwubGFzdEluZGV4ID09PSBleHBlY3RlZC5sYXN0SW5kZXggJiZcclxuICAgICAgICAgICBhY3R1YWwuaWdub3JlQ2FzZSA9PT0gZXhwZWN0ZWQuaWdub3JlQ2FzZTtcclxuXHJcbiAgLy8gNy40LiBPdGhlciBwYWlycyB0aGF0IGRvIG5vdCBib3RoIHBhc3MgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnLFxyXG4gIC8vIGVxdWl2YWxlbmNlIGlzIGRldGVybWluZWQgYnkgPT0uXHJcbiAgfSBlbHNlIGlmICgoYWN0dWFsID09PSBudWxsIHx8IHR5cGVvZiBhY3R1YWwgIT09ICdvYmplY3QnKSAmJlxyXG4gICAgICAgICAgICAgKGV4cGVjdGVkID09PSBudWxsIHx8IHR5cGVvZiBleHBlY3RlZCAhPT0gJ29iamVjdCcpKSB7XHJcbiAgICByZXR1cm4gc3RyaWN0ID8gYWN0dWFsID09PSBleHBlY3RlZCA6IGFjdHVhbCA9PSBleHBlY3RlZDtcclxuXHJcbiAgLy8gSWYgYm90aCB2YWx1ZXMgYXJlIGluc3RhbmNlcyBvZiB0eXBlZCBhcnJheXMsIHdyYXAgdGhlaXIgdW5kZXJseWluZ1xyXG4gIC8vIEFycmF5QnVmZmVycyBpbiBhIEJ1ZmZlciBlYWNoIHRvIGluY3JlYXNlIHBlcmZvcm1hbmNlXHJcbiAgLy8gVGhpcyBvcHRpbWl6YXRpb24gcmVxdWlyZXMgdGhlIGFycmF5cyB0byBoYXZlIHRoZSBzYW1lIHR5cGUgYXMgY2hlY2tlZCBieVxyXG4gIC8vIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcgKGFrYSBwVG9TdHJpbmcpLiBOZXZlciBwZXJmb3JtIGJpbmFyeVxyXG4gIC8vIGNvbXBhcmlzb25zIGZvciBGbG9hdCpBcnJheXMsIHRob3VnaCwgc2luY2UgZS5nLiArMCA9PT0gLTAgYnV0IHRoZWlyXHJcbiAgLy8gYml0IHBhdHRlcm5zIGFyZSBub3QgaWRlbnRpY2FsLlxyXG4gIH0gZWxzZSBpZiAoaXNWaWV3KGFjdHVhbCkgJiYgaXNWaWV3KGV4cGVjdGVkKSAmJlxyXG4gICAgICAgICAgICAgcFRvU3RyaW5nKGFjdHVhbCkgPT09IHBUb1N0cmluZyhleHBlY3RlZCkgJiZcclxuICAgICAgICAgICAgICEoYWN0dWFsIGluc3RhbmNlb2YgRmxvYXQzMkFycmF5IHx8XHJcbiAgICAgICAgICAgICAgIGFjdHVhbCBpbnN0YW5jZW9mIEZsb2F0NjRBcnJheSkpIHtcclxuICAgIHJldHVybiBjb21wYXJlKG5ldyBVaW50OEFycmF5KGFjdHVhbC5idWZmZXIpLFxyXG4gICAgICAgICAgICAgICAgICAgbmV3IFVpbnQ4QXJyYXkoZXhwZWN0ZWQuYnVmZmVyKSkgPT09IDA7XHJcblxyXG4gIC8vIDcuNSBGb3IgYWxsIG90aGVyIE9iamVjdCBwYWlycywgaW5jbHVkaW5nIEFycmF5IG9iamVjdHMsIGVxdWl2YWxlbmNlIGlzXHJcbiAgLy8gZGV0ZXJtaW5lZCBieSBoYXZpbmcgdGhlIHNhbWUgbnVtYmVyIG9mIG93bmVkIHByb3BlcnRpZXMgKGFzIHZlcmlmaWVkXHJcbiAgLy8gd2l0aCBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwpLCB0aGUgc2FtZSBzZXQgb2Yga2V5c1xyXG4gIC8vIChhbHRob3VnaCBub3QgbmVjZXNzYXJpbHkgdGhlIHNhbWUgb3JkZXIpLCBlcXVpdmFsZW50IHZhbHVlcyBmb3IgZXZlcnlcclxuICAvLyBjb3JyZXNwb25kaW5nIGtleSwgYW5kIGFuIGlkZW50aWNhbCAncHJvdG90eXBlJyBwcm9wZXJ0eS4gTm90ZTogdGhpc1xyXG4gIC8vIGFjY291bnRzIGZvciBib3RoIG5hbWVkIGFuZCBpbmRleGVkIHByb3BlcnRpZXMgb24gQXJyYXlzLlxyXG4gIH0gZWxzZSBpZiAoaXNCdWZmZXIoYWN0dWFsKSAhPT0gaXNCdWZmZXIoZXhwZWN0ZWQpKSB7XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfSBlbHNlIHtcclxuICAgIG1lbW9zID0gbWVtb3MgfHwge2FjdHVhbDogW10sIGV4cGVjdGVkOiBbXX07XHJcblxyXG4gICAgdmFyIGFjdHVhbEluZGV4ID0gbWVtb3MuYWN0dWFsLmluZGV4T2YoYWN0dWFsKTtcclxuICAgIGlmIChhY3R1YWxJbmRleCAhPT0gLTEpIHtcclxuICAgICAgaWYgKGFjdHVhbEluZGV4ID09PSBtZW1vcy5leHBlY3RlZC5pbmRleE9mKGV4cGVjdGVkKSkge1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgbWVtb3MuYWN0dWFsLnB1c2goYWN0dWFsKTtcclxuICAgIG1lbW9zLmV4cGVjdGVkLnB1c2goZXhwZWN0ZWQpO1xyXG5cclxuICAgIHJldHVybiBvYmpFcXVpdihhY3R1YWwsIGV4cGVjdGVkLCBzdHJpY3QsIG1lbW9zKTtcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGlzQXJndW1lbnRzKG9iamVjdCkge1xyXG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqZWN0KSA9PSAnW29iamVjdCBBcmd1bWVudHNdJztcclxufVxyXG5cclxuZnVuY3Rpb24gb2JqRXF1aXYoYSwgYiwgc3RyaWN0LCBhY3R1YWxWaXNpdGVkT2JqZWN0cykge1xyXG4gIGlmIChhID09PSBudWxsIHx8IGEgPT09IHVuZGVmaW5lZCB8fCBiID09PSBudWxsIHx8IGIgPT09IHVuZGVmaW5lZClcclxuICAgIHJldHVybiBmYWxzZTtcclxuICAvLyBpZiBvbmUgaXMgYSBwcmltaXRpdmUsIHRoZSBvdGhlciBtdXN0IGJlIHNhbWVcclxuICBpZiAodXRpbC5pc1ByaW1pdGl2ZShhKSB8fCB1dGlsLmlzUHJpbWl0aXZlKGIpKVxyXG4gICAgcmV0dXJuIGEgPT09IGI7XHJcbiAgaWYgKHN0cmljdCAmJiBPYmplY3QuZ2V0UHJvdG90eXBlT2YoYSkgIT09IE9iamVjdC5nZXRQcm90b3R5cGVPZihiKSlcclxuICAgIHJldHVybiBmYWxzZTtcclxuICB2YXIgYUlzQXJncyA9IGlzQXJndW1lbnRzKGEpO1xyXG4gIHZhciBiSXNBcmdzID0gaXNBcmd1bWVudHMoYik7XHJcbiAgaWYgKChhSXNBcmdzICYmICFiSXNBcmdzKSB8fCAoIWFJc0FyZ3MgJiYgYklzQXJncykpXHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgaWYgKGFJc0FyZ3MpIHtcclxuICAgIGEgPSBwU2xpY2UuY2FsbChhKTtcclxuICAgIGIgPSBwU2xpY2UuY2FsbChiKTtcclxuICAgIHJldHVybiBfZGVlcEVxdWFsKGEsIGIsIHN0cmljdCk7XHJcbiAgfVxyXG4gIHZhciBrYSA9IG9iamVjdEtleXMoYSk7XHJcbiAgdmFyIGtiID0gb2JqZWN0S2V5cyhiKTtcclxuICB2YXIga2V5LCBpO1xyXG4gIC8vIGhhdmluZyB0aGUgc2FtZSBudW1iZXIgb2Ygb3duZWQgcHJvcGVydGllcyAoa2V5cyBpbmNvcnBvcmF0ZXNcclxuICAvLyBoYXNPd25Qcm9wZXJ0eSlcclxuICBpZiAoa2EubGVuZ3RoICE9PSBrYi5sZW5ndGgpXHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgLy90aGUgc2FtZSBzZXQgb2Yga2V5cyAoYWx0aG91Z2ggbm90IG5lY2Vzc2FyaWx5IHRoZSBzYW1lIG9yZGVyKSxcclxuICBrYS5zb3J0KCk7XHJcbiAga2Iuc29ydCgpO1xyXG4gIC8vfn5+Y2hlYXAga2V5IHRlc3RcclxuICBmb3IgKGkgPSBrYS5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xyXG4gICAgaWYgKGthW2ldICE9PSBrYltpXSlcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gIH1cclxuICAvL2VxdWl2YWxlbnQgdmFsdWVzIGZvciBldmVyeSBjb3JyZXNwb25kaW5nIGtleSwgYW5kXHJcbiAgLy9+fn5wb3NzaWJseSBleHBlbnNpdmUgZGVlcCB0ZXN0XHJcbiAgZm9yIChpID0ga2EubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcclxuICAgIGtleSA9IGthW2ldO1xyXG4gICAgaWYgKCFfZGVlcEVxdWFsKGFba2V5XSwgYltrZXldLCBzdHJpY3QsIGFjdHVhbFZpc2l0ZWRPYmplY3RzKSlcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gIH1cclxuICByZXR1cm4gdHJ1ZTtcclxufVxyXG5cclxuLy8gOC4gVGhlIG5vbi1lcXVpdmFsZW5jZSBhc3NlcnRpb24gdGVzdHMgZm9yIGFueSBkZWVwIGluZXF1YWxpdHkuXHJcbi8vIGFzc2VydC5ub3REZWVwRXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZV9vcHQpO1xyXG5cclxuYXNzZXJ0Lm5vdERlZXBFcXVhbCA9IGZ1bmN0aW9uIG5vdERlZXBFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlKSB7XHJcbiAgaWYgKF9kZWVwRXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgZmFsc2UpKSB7XHJcbiAgICBmYWlsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UsICdub3REZWVwRXF1YWwnLCBhc3NlcnQubm90RGVlcEVxdWFsKTtcclxuICB9XHJcbn07XHJcblxyXG5hc3NlcnQubm90RGVlcFN0cmljdEVxdWFsID0gbm90RGVlcFN0cmljdEVxdWFsO1xyXG5mdW5jdGlvbiBub3REZWVwU3RyaWN0RXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSkge1xyXG4gIGlmIChfZGVlcEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIHRydWUpKSB7XHJcbiAgICBmYWlsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UsICdub3REZWVwU3RyaWN0RXF1YWwnLCBub3REZWVwU3RyaWN0RXF1YWwpO1xyXG4gIH1cclxufVxyXG5cclxuXHJcbi8vIDkuIFRoZSBzdHJpY3QgZXF1YWxpdHkgYXNzZXJ0aW9uIHRlc3RzIHN0cmljdCBlcXVhbGl0eSwgYXMgZGV0ZXJtaW5lZCBieSA9PT0uXHJcbi8vIGFzc2VydC5zdHJpY3RFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlX29wdCk7XHJcblxyXG5hc3NlcnQuc3RyaWN0RXF1YWwgPSBmdW5jdGlvbiBzdHJpY3RFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlKSB7XHJcbiAgaWYgKGFjdHVhbCAhPT0gZXhwZWN0ZWQpIHtcclxuICAgIGZhaWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSwgJz09PScsIGFzc2VydC5zdHJpY3RFcXVhbCk7XHJcbiAgfVxyXG59O1xyXG5cclxuLy8gMTAuIFRoZSBzdHJpY3Qgbm9uLWVxdWFsaXR5IGFzc2VydGlvbiB0ZXN0cyBmb3Igc3RyaWN0IGluZXF1YWxpdHksIGFzXHJcbi8vIGRldGVybWluZWQgYnkgIT09LiAgYXNzZXJ0Lm5vdFN0cmljdEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2Vfb3B0KTtcclxuXHJcbmFzc2VydC5ub3RTdHJpY3RFcXVhbCA9IGZ1bmN0aW9uIG5vdFN0cmljdEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpIHtcclxuICBpZiAoYWN0dWFsID09PSBleHBlY3RlZCkge1xyXG4gICAgZmFpbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlLCAnIT09JywgYXNzZXJ0Lm5vdFN0cmljdEVxdWFsKTtcclxuICB9XHJcbn07XHJcblxyXG5mdW5jdGlvbiBleHBlY3RlZEV4Y2VwdGlvbihhY3R1YWwsIGV4cGVjdGVkKSB7XHJcbiAgaWYgKCFhY3R1YWwgfHwgIWV4cGVjdGVkKSB7XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG5cclxuICBpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGV4cGVjdGVkKSA9PSAnW29iamVjdCBSZWdFeHBdJykge1xyXG4gICAgcmV0dXJuIGV4cGVjdGVkLnRlc3QoYWN0dWFsKTtcclxuICB9XHJcblxyXG4gIHRyeSB7XHJcbiAgICBpZiAoYWN0dWFsIGluc3RhbmNlb2YgZXhwZWN0ZWQpIHtcclxuICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgfSBjYXRjaCAoZSkge1xyXG4gICAgLy8gSWdub3JlLiAgVGhlIGluc3RhbmNlb2YgY2hlY2sgZG9lc24ndCB3b3JrIGZvciBhcnJvdyBmdW5jdGlvbnMuXHJcbiAgfVxyXG5cclxuICBpZiAoRXJyb3IuaXNQcm90b3R5cGVPZihleHBlY3RlZCkpIHtcclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcblxyXG4gIHJldHVybiBleHBlY3RlZC5jYWxsKHt9LCBhY3R1YWwpID09PSB0cnVlO1xyXG59XHJcblxyXG5mdW5jdGlvbiBfdHJ5QmxvY2soYmxvY2spIHtcclxuICB2YXIgZXJyb3I7XHJcbiAgdHJ5IHtcclxuICAgIGJsb2NrKCk7XHJcbiAgfSBjYXRjaCAoZSkge1xyXG4gICAgZXJyb3IgPSBlO1xyXG4gIH1cclxuICByZXR1cm4gZXJyb3I7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIF90aHJvd3Moc2hvdWxkVGhyb3csIGJsb2NrLCBleHBlY3RlZCwgbWVzc2FnZSkge1xyXG4gIHZhciBhY3R1YWw7XHJcblxyXG4gIGlmICh0eXBlb2YgYmxvY2sgIT09ICdmdW5jdGlvbicpIHtcclxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wiYmxvY2tcIiBhcmd1bWVudCBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcclxuICB9XHJcblxyXG4gIGlmICh0eXBlb2YgZXhwZWN0ZWQgPT09ICdzdHJpbmcnKSB7XHJcbiAgICBtZXNzYWdlID0gZXhwZWN0ZWQ7XHJcbiAgICBleHBlY3RlZCA9IG51bGw7XHJcbiAgfVxyXG5cclxuICBhY3R1YWwgPSBfdHJ5QmxvY2soYmxvY2spO1xyXG5cclxuICBtZXNzYWdlID0gKGV4cGVjdGVkICYmIGV4cGVjdGVkLm5hbWUgPyAnICgnICsgZXhwZWN0ZWQubmFtZSArICcpLicgOiAnLicpICtcclxuICAgICAgICAgICAgKG1lc3NhZ2UgPyAnICcgKyBtZXNzYWdlIDogJy4nKTtcclxuXHJcbiAgaWYgKHNob3VsZFRocm93ICYmICFhY3R1YWwpIHtcclxuICAgIGZhaWwoYWN0dWFsLCBleHBlY3RlZCwgJ01pc3NpbmcgZXhwZWN0ZWQgZXhjZXB0aW9uJyArIG1lc3NhZ2UpO1xyXG4gIH1cclxuXHJcbiAgdmFyIHVzZXJQcm92aWRlZE1lc3NhZ2UgPSB0eXBlb2YgbWVzc2FnZSA9PT0gJ3N0cmluZyc7XHJcbiAgdmFyIGlzVW53YW50ZWRFeGNlcHRpb24gPSAhc2hvdWxkVGhyb3cgJiYgdXRpbC5pc0Vycm9yKGFjdHVhbCk7XHJcbiAgdmFyIGlzVW5leHBlY3RlZEV4Y2VwdGlvbiA9ICFzaG91bGRUaHJvdyAmJiBhY3R1YWwgJiYgIWV4cGVjdGVkO1xyXG5cclxuICBpZiAoKGlzVW53YW50ZWRFeGNlcHRpb24gJiZcclxuICAgICAgdXNlclByb3ZpZGVkTWVzc2FnZSAmJlxyXG4gICAgICBleHBlY3RlZEV4Y2VwdGlvbihhY3R1YWwsIGV4cGVjdGVkKSkgfHxcclxuICAgICAgaXNVbmV4cGVjdGVkRXhjZXB0aW9uKSB7XHJcbiAgICBmYWlsKGFjdHVhbCwgZXhwZWN0ZWQsICdHb3QgdW53YW50ZWQgZXhjZXB0aW9uJyArIG1lc3NhZ2UpO1xyXG4gIH1cclxuXHJcbiAgaWYgKChzaG91bGRUaHJvdyAmJiBhY3R1YWwgJiYgZXhwZWN0ZWQgJiZcclxuICAgICAgIWV4cGVjdGVkRXhjZXB0aW9uKGFjdHVhbCwgZXhwZWN0ZWQpKSB8fCAoIXNob3VsZFRocm93ICYmIGFjdHVhbCkpIHtcclxuICAgIHRocm93IGFjdHVhbDtcclxuICB9XHJcbn1cclxuXHJcbi8vIDExLiBFeHBlY3RlZCB0byB0aHJvdyBhbiBlcnJvcjpcclxuLy8gYXNzZXJ0LnRocm93cyhibG9jaywgRXJyb3Jfb3B0LCBtZXNzYWdlX29wdCk7XHJcblxyXG5hc3NlcnQudGhyb3dzID0gZnVuY3Rpb24oYmxvY2ssIC8qb3B0aW9uYWwqL2Vycm9yLCAvKm9wdGlvbmFsKi9tZXNzYWdlKSB7XHJcbiAgX3Rocm93cyh0cnVlLCBibG9jaywgZXJyb3IsIG1lc3NhZ2UpO1xyXG59O1xyXG5cclxuLy8gRVhURU5TSU9OISBUaGlzIGlzIGFubm95aW5nIHRvIHdyaXRlIG91dHNpZGUgdGhpcyBtb2R1bGUuXHJcbmFzc2VydC5kb2VzTm90VGhyb3cgPSBmdW5jdGlvbihibG9jaywgLypvcHRpb25hbCovZXJyb3IsIC8qb3B0aW9uYWwqL21lc3NhZ2UpIHtcclxuICBfdGhyb3dzKGZhbHNlLCBibG9jaywgZXJyb3IsIG1lc3NhZ2UpO1xyXG59O1xyXG5cclxuYXNzZXJ0LmlmRXJyb3IgPSBmdW5jdGlvbihlcnIpIHsgaWYgKGVycikgdGhyb3cgZXJyOyB9O1xyXG5cclxuLy8gRXhwb3NlIGEgc3RyaWN0IG9ubHkgdmFyaWFudCBvZiBhc3NlcnRcclxuZnVuY3Rpb24gc3RyaWN0KHZhbHVlLCBtZXNzYWdlKSB7XHJcbiAgaWYgKCF2YWx1ZSkgZmFpbCh2YWx1ZSwgdHJ1ZSwgbWVzc2FnZSwgJz09Jywgc3RyaWN0KTtcclxufVxyXG5hc3NlcnQuc3RyaWN0ID0gb2JqZWN0QXNzaWduKHN0cmljdCwgYXNzZXJ0LCB7XHJcbiAgZXF1YWw6IGFzc2VydC5zdHJpY3RFcXVhbCxcclxuICBkZWVwRXF1YWw6IGFzc2VydC5kZWVwU3RyaWN0RXF1YWwsXHJcbiAgbm90RXF1YWw6IGFzc2VydC5ub3RTdHJpY3RFcXVhbCxcclxuICBub3REZWVwRXF1YWw6IGFzc2VydC5ub3REZWVwU3RyaWN0RXF1YWxcclxufSk7XHJcbmFzc2VydC5zdHJpY3Quc3RyaWN0ID0gYXNzZXJ0LnN0cmljdDtcclxuXHJcbnZhciBvYmplY3RLZXlzID0gT2JqZWN0LmtleXMgfHwgZnVuY3Rpb24gKG9iaikge1xyXG4gIHZhciBrZXlzID0gW107XHJcbiAgZm9yICh2YXIga2V5IGluIG9iaikge1xyXG4gICAgaWYgKGhhc093bi5jYWxsKG9iaiwga2V5KSkga2V5cy5wdXNoKGtleSk7XHJcbiAgfVxyXG4gIHJldHVybiBrZXlzO1xyXG59O1xyXG4iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cclxuLy9cclxuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcclxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxyXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcclxuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxyXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XHJcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxyXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcclxuLy9cclxuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcclxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXHJcbi8vXHJcbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1NcclxuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxyXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXHJcbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxyXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1JcclxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxyXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxyXG5cclxudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvcnMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyB8fFxyXG4gIGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcnMob2JqKSB7XHJcbiAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iaik7XHJcbiAgICB2YXIgZGVzY3JpcHRvcnMgPSB7fTtcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICBkZXNjcmlwdG9yc1trZXlzW2ldXSA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXlzW2ldKTtcclxuICAgIH1cclxuICAgIHJldHVybiBkZXNjcmlwdG9ycztcclxuICB9O1xyXG5cclxudmFyIGZvcm1hdFJlZ0V4cCA9IC8lW3NkaiVdL2c7XHJcbmV4cG9ydHMuZm9ybWF0ID0gZnVuY3Rpb24oZikge1xyXG4gIGlmICghaXNTdHJpbmcoZikpIHtcclxuICAgIHZhciBvYmplY3RzID0gW107XHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICBvYmplY3RzLnB1c2goaW5zcGVjdChhcmd1bWVudHNbaV0pKTtcclxuICAgIH1cclxuICAgIHJldHVybiBvYmplY3RzLmpvaW4oJyAnKTtcclxuICB9XHJcblxyXG4gIHZhciBpID0gMTtcclxuICB2YXIgYXJncyA9IGFyZ3VtZW50cztcclxuICB2YXIgbGVuID0gYXJncy5sZW5ndGg7XHJcbiAgdmFyIHN0ciA9IFN0cmluZyhmKS5yZXBsYWNlKGZvcm1hdFJlZ0V4cCwgZnVuY3Rpb24oeCkge1xyXG4gICAgaWYgKHggPT09ICclJScpIHJldHVybiAnJSc7XHJcbiAgICBpZiAoaSA+PSBsZW4pIHJldHVybiB4O1xyXG4gICAgc3dpdGNoICh4KSB7XHJcbiAgICAgIGNhc2UgJyVzJzogcmV0dXJuIFN0cmluZyhhcmdzW2krK10pO1xyXG4gICAgICBjYXNlICclZCc6IHJldHVybiBOdW1iZXIoYXJnc1tpKytdKTtcclxuICAgICAgY2FzZSAnJWonOlxyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoYXJnc1tpKytdKTtcclxuICAgICAgICB9IGNhdGNoIChfKSB7XHJcbiAgICAgICAgICByZXR1cm4gJ1tDaXJjdWxhcl0nO1xyXG4gICAgICAgIH1cclxuICAgICAgZGVmYXVsdDpcclxuICAgICAgICByZXR1cm4geDtcclxuICAgIH1cclxuICB9KTtcclxuICBmb3IgKHZhciB4ID0gYXJnc1tpXTsgaSA8IGxlbjsgeCA9IGFyZ3NbKytpXSkge1xyXG4gICAgaWYgKGlzTnVsbCh4KSB8fCAhaXNPYmplY3QoeCkpIHtcclxuICAgICAgc3RyICs9ICcgJyArIHg7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBzdHIgKz0gJyAnICsgaW5zcGVjdCh4KTtcclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIHN0cjtcclxufTtcclxuXHJcblxyXG4vLyBNYXJrIHRoYXQgYSBtZXRob2Qgc2hvdWxkIG5vdCBiZSB1c2VkLlxyXG4vLyBSZXR1cm5zIGEgbW9kaWZpZWQgZnVuY3Rpb24gd2hpY2ggd2FybnMgb25jZSBieSBkZWZhdWx0LlxyXG4vLyBJZiAtLW5vLWRlcHJlY2F0aW9uIGlzIHNldCwgdGhlbiBpdCBpcyBhIG5vLW9wLlxyXG5leHBvcnRzLmRlcHJlY2F0ZSA9IGZ1bmN0aW9uKGZuLCBtc2cpIHtcclxuICBpZiAodHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmIHByb2Nlc3Mubm9EZXByZWNhdGlvbiA9PT0gdHJ1ZSkge1xyXG4gICAgcmV0dXJuIGZuO1xyXG4gIH1cclxuXHJcbiAgLy8gQWxsb3cgZm9yIGRlcHJlY2F0aW5nIHRoaW5ncyBpbiB0aGUgcHJvY2VzcyBvZiBzdGFydGluZyB1cC5cclxuICBpZiAodHlwZW9mIHByb2Nlc3MgPT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XHJcbiAgICAgIHJldHVybiBleHBvcnRzLmRlcHJlY2F0ZShmbiwgbXNnKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIHZhciB3YXJuZWQgPSBmYWxzZTtcclxuICBmdW5jdGlvbiBkZXByZWNhdGVkKCkge1xyXG4gICAgaWYgKCF3YXJuZWQpIHtcclxuICAgICAgaWYgKHByb2Nlc3MudGhyb3dEZXByZWNhdGlvbikge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihtc2cpO1xyXG4gICAgICB9IGVsc2UgaWYgKHByb2Nlc3MudHJhY2VEZXByZWNhdGlvbikge1xyXG4gICAgICAgIGNvbnNvbGUudHJhY2UobXNnKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKG1zZyk7XHJcbiAgICAgIH1cclxuICAgICAgd2FybmVkID0gdHJ1ZTtcclxuICAgIH1cclxuICAgIHJldHVybiBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIGRlcHJlY2F0ZWQ7XHJcbn07XHJcblxyXG5cclxudmFyIGRlYnVncyA9IHt9O1xyXG52YXIgZGVidWdFbnZpcm9uO1xyXG5leHBvcnRzLmRlYnVnbG9nID0gZnVuY3Rpb24oc2V0KSB7XHJcbiAgaWYgKGlzVW5kZWZpbmVkKGRlYnVnRW52aXJvbikpXHJcbiAgICBkZWJ1Z0Vudmlyb24gPSBwcm9jZXNzLmVudi5OT0RFX0RFQlVHIHx8ICcnO1xyXG4gIHNldCA9IHNldC50b1VwcGVyQ2FzZSgpO1xyXG4gIGlmICghZGVidWdzW3NldF0pIHtcclxuICAgIGlmIChuZXcgUmVnRXhwKCdcXFxcYicgKyBzZXQgKyAnXFxcXGInLCAnaScpLnRlc3QoZGVidWdFbnZpcm9uKSkge1xyXG4gICAgICB2YXIgcGlkID0gcHJvY2Vzcy5waWQ7XHJcbiAgICAgIGRlYnVnc1tzZXRdID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIG1zZyA9IGV4cG9ydHMuZm9ybWF0LmFwcGx5KGV4cG9ydHMsIGFyZ3VtZW50cyk7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcignJXMgJWQ6ICVzJywgc2V0LCBwaWQsIG1zZyk7XHJcbiAgICAgIH07XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBkZWJ1Z3Nbc2V0XSA9IGZ1bmN0aW9uKCkge307XHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiBkZWJ1Z3Nbc2V0XTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogRWNob3MgdGhlIHZhbHVlIG9mIGEgdmFsdWUuIFRyeXMgdG8gcHJpbnQgdGhlIHZhbHVlIG91dFxyXG4gKiBpbiB0aGUgYmVzdCB3YXkgcG9zc2libGUgZ2l2ZW4gdGhlIGRpZmZlcmVudCB0eXBlcy5cclxuICpcclxuICogQHBhcmFtIHtPYmplY3R9IG9iaiBUaGUgb2JqZWN0IHRvIHByaW50IG91dC5cclxuICogQHBhcmFtIHtPYmplY3R9IG9wdHMgT3B0aW9uYWwgb3B0aW9ucyBvYmplY3QgdGhhdCBhbHRlcnMgdGhlIG91dHB1dC5cclxuICovXHJcbi8qIGxlZ2FjeTogb2JqLCBzaG93SGlkZGVuLCBkZXB0aCwgY29sb3JzKi9cclxuZnVuY3Rpb24gaW5zcGVjdChvYmosIG9wdHMpIHtcclxuICAvLyBkZWZhdWx0IG9wdGlvbnNcclxuICB2YXIgY3R4ID0ge1xyXG4gICAgc2VlbjogW10sXHJcbiAgICBzdHlsaXplOiBzdHlsaXplTm9Db2xvclxyXG4gIH07XHJcbiAgLy8gbGVnYWN5Li4uXHJcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPj0gMykgY3R4LmRlcHRoID0gYXJndW1lbnRzWzJdO1xyXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID49IDQpIGN0eC5jb2xvcnMgPSBhcmd1bWVudHNbM107XHJcbiAgaWYgKGlzQm9vbGVhbihvcHRzKSkge1xyXG4gICAgLy8gbGVnYWN5Li4uXHJcbiAgICBjdHguc2hvd0hpZGRlbiA9IG9wdHM7XHJcbiAgfSBlbHNlIGlmIChvcHRzKSB7XHJcbiAgICAvLyBnb3QgYW4gXCJvcHRpb25zXCIgb2JqZWN0XHJcbiAgICBleHBvcnRzLl9leHRlbmQoY3R4LCBvcHRzKTtcclxuICB9XHJcbiAgLy8gc2V0IGRlZmF1bHQgb3B0aW9uc1xyXG4gIGlmIChpc1VuZGVmaW5lZChjdHguc2hvd0hpZGRlbikpIGN0eC5zaG93SGlkZGVuID0gZmFsc2U7XHJcbiAgaWYgKGlzVW5kZWZpbmVkKGN0eC5kZXB0aCkpIGN0eC5kZXB0aCA9IDI7XHJcbiAgaWYgKGlzVW5kZWZpbmVkKGN0eC5jb2xvcnMpKSBjdHguY29sb3JzID0gZmFsc2U7XHJcbiAgaWYgKGlzVW5kZWZpbmVkKGN0eC5jdXN0b21JbnNwZWN0KSkgY3R4LmN1c3RvbUluc3BlY3QgPSB0cnVlO1xyXG4gIGlmIChjdHguY29sb3JzKSBjdHguc3R5bGl6ZSA9IHN0eWxpemVXaXRoQ29sb3I7XHJcbiAgcmV0dXJuIGZvcm1hdFZhbHVlKGN0eCwgb2JqLCBjdHguZGVwdGgpO1xyXG59XHJcbmV4cG9ydHMuaW5zcGVjdCA9IGluc3BlY3Q7XHJcblxyXG5cclxuLy8gaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9BTlNJX2VzY2FwZV9jb2RlI2dyYXBoaWNzXHJcbmluc3BlY3QuY29sb3JzID0ge1xyXG4gICdib2xkJyA6IFsxLCAyMl0sXHJcbiAgJ2l0YWxpYycgOiBbMywgMjNdLFxyXG4gICd1bmRlcmxpbmUnIDogWzQsIDI0XSxcclxuICAnaW52ZXJzZScgOiBbNywgMjddLFxyXG4gICd3aGl0ZScgOiBbMzcsIDM5XSxcclxuICAnZ3JleScgOiBbOTAsIDM5XSxcclxuICAnYmxhY2snIDogWzMwLCAzOV0sXHJcbiAgJ2JsdWUnIDogWzM0LCAzOV0sXHJcbiAgJ2N5YW4nIDogWzM2LCAzOV0sXHJcbiAgJ2dyZWVuJyA6IFszMiwgMzldLFxyXG4gICdtYWdlbnRhJyA6IFszNSwgMzldLFxyXG4gICdyZWQnIDogWzMxLCAzOV0sXHJcbiAgJ3llbGxvdycgOiBbMzMsIDM5XVxyXG59O1xyXG5cclxuLy8gRG9uJ3QgdXNlICdibHVlJyBub3QgdmlzaWJsZSBvbiBjbWQuZXhlXHJcbmluc3BlY3Quc3R5bGVzID0ge1xyXG4gICdzcGVjaWFsJzogJ2N5YW4nLFxyXG4gICdudW1iZXInOiAneWVsbG93JyxcclxuICAnYm9vbGVhbic6ICd5ZWxsb3cnLFxyXG4gICd1bmRlZmluZWQnOiAnZ3JleScsXHJcbiAgJ251bGwnOiAnYm9sZCcsXHJcbiAgJ3N0cmluZyc6ICdncmVlbicsXHJcbiAgJ2RhdGUnOiAnbWFnZW50YScsXHJcbiAgLy8gXCJuYW1lXCI6IGludGVudGlvbmFsbHkgbm90IHN0eWxpbmdcclxuICAncmVnZXhwJzogJ3JlZCdcclxufTtcclxuXHJcblxyXG5mdW5jdGlvbiBzdHlsaXplV2l0aENvbG9yKHN0ciwgc3R5bGVUeXBlKSB7XHJcbiAgdmFyIHN0eWxlID0gaW5zcGVjdC5zdHlsZXNbc3R5bGVUeXBlXTtcclxuXHJcbiAgaWYgKHN0eWxlKSB7XHJcbiAgICByZXR1cm4gJ1xcdTAwMWJbJyArIGluc3BlY3QuY29sb3JzW3N0eWxlXVswXSArICdtJyArIHN0ciArXHJcbiAgICAgICAgICAgJ1xcdTAwMWJbJyArIGluc3BlY3QuY29sb3JzW3N0eWxlXVsxXSArICdtJztcclxuICB9IGVsc2Uge1xyXG4gICAgcmV0dXJuIHN0cjtcclxuICB9XHJcbn1cclxuXHJcblxyXG5mdW5jdGlvbiBzdHlsaXplTm9Db2xvcihzdHIsIHN0eWxlVHlwZSkge1xyXG4gIHJldHVybiBzdHI7XHJcbn1cclxuXHJcblxyXG5mdW5jdGlvbiBhcnJheVRvSGFzaChhcnJheSkge1xyXG4gIHZhciBoYXNoID0ge307XHJcblxyXG4gIGFycmF5LmZvckVhY2goZnVuY3Rpb24odmFsLCBpZHgpIHtcclxuICAgIGhhc2hbdmFsXSA9IHRydWU7XHJcbiAgfSk7XHJcblxyXG4gIHJldHVybiBoYXNoO1xyXG59XHJcblxyXG5cclxuZnVuY3Rpb24gZm9ybWF0VmFsdWUoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzKSB7XHJcbiAgLy8gUHJvdmlkZSBhIGhvb2sgZm9yIHVzZXItc3BlY2lmaWVkIGluc3BlY3QgZnVuY3Rpb25zLlxyXG4gIC8vIENoZWNrIHRoYXQgdmFsdWUgaXMgYW4gb2JqZWN0IHdpdGggYW4gaW5zcGVjdCBmdW5jdGlvbiBvbiBpdFxyXG4gIGlmIChjdHguY3VzdG9tSW5zcGVjdCAmJlxyXG4gICAgICB2YWx1ZSAmJlxyXG4gICAgICBpc0Z1bmN0aW9uKHZhbHVlLmluc3BlY3QpICYmXHJcbiAgICAgIC8vIEZpbHRlciBvdXQgdGhlIHV0aWwgbW9kdWxlLCBpdCdzIGluc3BlY3QgZnVuY3Rpb24gaXMgc3BlY2lhbFxyXG4gICAgICB2YWx1ZS5pbnNwZWN0ICE9PSBleHBvcnRzLmluc3BlY3QgJiZcclxuICAgICAgLy8gQWxzbyBmaWx0ZXIgb3V0IGFueSBwcm90b3R5cGUgb2JqZWN0cyB1c2luZyB0aGUgY2lyY3VsYXIgY2hlY2suXHJcbiAgICAgICEodmFsdWUuY29uc3RydWN0b3IgJiYgdmFsdWUuY29uc3RydWN0b3IucHJvdG90eXBlID09PSB2YWx1ZSkpIHtcclxuICAgIHZhciByZXQgPSB2YWx1ZS5pbnNwZWN0KHJlY3Vyc2VUaW1lcywgY3R4KTtcclxuICAgIGlmICghaXNTdHJpbmcocmV0KSkge1xyXG4gICAgICByZXQgPSBmb3JtYXRWYWx1ZShjdHgsIHJldCwgcmVjdXJzZVRpbWVzKTtcclxuICAgIH1cclxuICAgIHJldHVybiByZXQ7XHJcbiAgfVxyXG5cclxuICAvLyBQcmltaXRpdmUgdHlwZXMgY2Fubm90IGhhdmUgcHJvcGVydGllc1xyXG4gIHZhciBwcmltaXRpdmUgPSBmb3JtYXRQcmltaXRpdmUoY3R4LCB2YWx1ZSk7XHJcbiAgaWYgKHByaW1pdGl2ZSkge1xyXG4gICAgcmV0dXJuIHByaW1pdGl2ZTtcclxuICB9XHJcblxyXG4gIC8vIExvb2sgdXAgdGhlIGtleXMgb2YgdGhlIG9iamVjdC5cclxuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKHZhbHVlKTtcclxuICB2YXIgdmlzaWJsZUtleXMgPSBhcnJheVRvSGFzaChrZXlzKTtcclxuXHJcbiAgaWYgKGN0eC5zaG93SGlkZGVuKSB7XHJcbiAgICBrZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModmFsdWUpO1xyXG4gIH1cclxuXHJcbiAgLy8gSUUgZG9lc24ndCBtYWtlIGVycm9yIGZpZWxkcyBub24tZW51bWVyYWJsZVxyXG4gIC8vIGh0dHA6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9pZS9kd3c1MnNidCh2PXZzLjk0KS5hc3B4XHJcbiAgaWYgKGlzRXJyb3IodmFsdWUpXHJcbiAgICAgICYmIChrZXlzLmluZGV4T2YoJ21lc3NhZ2UnKSA+PSAwIHx8IGtleXMuaW5kZXhPZignZGVzY3JpcHRpb24nKSA+PSAwKSkge1xyXG4gICAgcmV0dXJuIGZvcm1hdEVycm9yKHZhbHVlKTtcclxuICB9XHJcblxyXG4gIC8vIFNvbWUgdHlwZSBvZiBvYmplY3Qgd2l0aG91dCBwcm9wZXJ0aWVzIGNhbiBiZSBzaG9ydGN1dHRlZC5cclxuICBpZiAoa2V5cy5sZW5ndGggPT09IDApIHtcclxuICAgIGlmIChpc0Z1bmN0aW9uKHZhbHVlKSkge1xyXG4gICAgICB2YXIgbmFtZSA9IHZhbHVlLm5hbWUgPyAnOiAnICsgdmFsdWUubmFtZSA6ICcnO1xyXG4gICAgICByZXR1cm4gY3R4LnN0eWxpemUoJ1tGdW5jdGlvbicgKyBuYW1lICsgJ10nLCAnc3BlY2lhbCcpO1xyXG4gICAgfVxyXG4gICAgaWYgKGlzUmVnRXhwKHZhbHVlKSkge1xyXG4gICAgICByZXR1cm4gY3R4LnN0eWxpemUoUmVnRXhwLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSwgJ3JlZ2V4cCcpO1xyXG4gICAgfVxyXG4gICAgaWYgKGlzRGF0ZSh2YWx1ZSkpIHtcclxuICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKERhdGUucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpLCAnZGF0ZScpO1xyXG4gICAgfVxyXG4gICAgaWYgKGlzRXJyb3IodmFsdWUpKSB7XHJcbiAgICAgIHJldHVybiBmb3JtYXRFcnJvcih2YWx1ZSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICB2YXIgYmFzZSA9ICcnLCBhcnJheSA9IGZhbHNlLCBicmFjZXMgPSBbJ3snLCAnfSddO1xyXG5cclxuICAvLyBNYWtlIEFycmF5IHNheSB0aGF0IHRoZXkgYXJlIEFycmF5XHJcbiAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XHJcbiAgICBhcnJheSA9IHRydWU7XHJcbiAgICBicmFjZXMgPSBbJ1snLCAnXSddO1xyXG4gIH1cclxuXHJcbiAgLy8gTWFrZSBmdW5jdGlvbnMgc2F5IHRoYXQgdGhleSBhcmUgZnVuY3Rpb25zXHJcbiAgaWYgKGlzRnVuY3Rpb24odmFsdWUpKSB7XHJcbiAgICB2YXIgbiA9IHZhbHVlLm5hbWUgPyAnOiAnICsgdmFsdWUubmFtZSA6ICcnO1xyXG4gICAgYmFzZSA9ICcgW0Z1bmN0aW9uJyArIG4gKyAnXSc7XHJcbiAgfVxyXG5cclxuICAvLyBNYWtlIFJlZ0V4cHMgc2F5IHRoYXQgdGhleSBhcmUgUmVnRXhwc1xyXG4gIGlmIChpc1JlZ0V4cCh2YWx1ZSkpIHtcclxuICAgIGJhc2UgPSAnICcgKyBSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpO1xyXG4gIH1cclxuXHJcbiAgLy8gTWFrZSBkYXRlcyB3aXRoIHByb3BlcnRpZXMgZmlyc3Qgc2F5IHRoZSBkYXRlXHJcbiAgaWYgKGlzRGF0ZSh2YWx1ZSkpIHtcclxuICAgIGJhc2UgPSAnICcgKyBEYXRlLnByb3RvdHlwZS50b1VUQ1N0cmluZy5jYWxsKHZhbHVlKTtcclxuICB9XHJcblxyXG4gIC8vIE1ha2UgZXJyb3Igd2l0aCBtZXNzYWdlIGZpcnN0IHNheSB0aGUgZXJyb3JcclxuICBpZiAoaXNFcnJvcih2YWx1ZSkpIHtcclxuICAgIGJhc2UgPSAnICcgKyBmb3JtYXRFcnJvcih2YWx1ZSk7XHJcbiAgfVxyXG5cclxuICBpZiAoa2V5cy5sZW5ndGggPT09IDAgJiYgKCFhcnJheSB8fCB2YWx1ZS5sZW5ndGggPT0gMCkpIHtcclxuICAgIHJldHVybiBicmFjZXNbMF0gKyBiYXNlICsgYnJhY2VzWzFdO1xyXG4gIH1cclxuXHJcbiAgaWYgKHJlY3Vyc2VUaW1lcyA8IDApIHtcclxuICAgIGlmIChpc1JlZ0V4cCh2YWx1ZSkpIHtcclxuICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSksICdyZWdleHAnKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZSgnW09iamVjdF0nLCAnc3BlY2lhbCcpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgY3R4LnNlZW4ucHVzaCh2YWx1ZSk7XHJcblxyXG4gIHZhciBvdXRwdXQ7XHJcbiAgaWYgKGFycmF5KSB7XHJcbiAgICBvdXRwdXQgPSBmb3JtYXRBcnJheShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLCBrZXlzKTtcclxuICB9IGVsc2Uge1xyXG4gICAgb3V0cHV0ID0ga2V5cy5tYXAoZnVuY3Rpb24oa2V5KSB7XHJcbiAgICAgIHJldHVybiBmb3JtYXRQcm9wZXJ0eShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLCBrZXksIGFycmF5KTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgY3R4LnNlZW4ucG9wKCk7XHJcblxyXG4gIHJldHVybiByZWR1Y2VUb1NpbmdsZVN0cmluZyhvdXRwdXQsIGJhc2UsIGJyYWNlcyk7XHJcbn1cclxuXHJcblxyXG5mdW5jdGlvbiBmb3JtYXRQcmltaXRpdmUoY3R4LCB2YWx1ZSkge1xyXG4gIGlmIChpc1VuZGVmaW5lZCh2YWx1ZSkpXHJcbiAgICByZXR1cm4gY3R4LnN0eWxpemUoJ3VuZGVmaW5lZCcsICd1bmRlZmluZWQnKTtcclxuICBpZiAoaXNTdHJpbmcodmFsdWUpKSB7XHJcbiAgICB2YXIgc2ltcGxlID0gJ1xcJycgKyBKU09OLnN0cmluZ2lmeSh2YWx1ZSkucmVwbGFjZSgvXlwifFwiJC9nLCAnJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoLycvZywgXCJcXFxcJ1wiKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvXFxcXFwiL2csICdcIicpICsgJ1xcJyc7XHJcbiAgICByZXR1cm4gY3R4LnN0eWxpemUoc2ltcGxlLCAnc3RyaW5nJyk7XHJcbiAgfVxyXG4gIGlmIChpc051bWJlcih2YWx1ZSkpXHJcbiAgICByZXR1cm4gY3R4LnN0eWxpemUoJycgKyB2YWx1ZSwgJ251bWJlcicpO1xyXG4gIGlmIChpc0Jvb2xlYW4odmFsdWUpKVxyXG4gICAgcmV0dXJuIGN0eC5zdHlsaXplKCcnICsgdmFsdWUsICdib29sZWFuJyk7XHJcbiAgLy8gRm9yIHNvbWUgcmVhc29uIHR5cGVvZiBudWxsIGlzIFwib2JqZWN0XCIsIHNvIHNwZWNpYWwgY2FzZSBoZXJlLlxyXG4gIGlmIChpc051bGwodmFsdWUpKVxyXG4gICAgcmV0dXJuIGN0eC5zdHlsaXplKCdudWxsJywgJ251bGwnKTtcclxufVxyXG5cclxuXHJcbmZ1bmN0aW9uIGZvcm1hdEVycm9yKHZhbHVlKSB7XHJcbiAgcmV0dXJuICdbJyArIEVycm9yLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSArICddJztcclxufVxyXG5cclxuXHJcbmZ1bmN0aW9uIGZvcm1hdEFycmF5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsIGtleXMpIHtcclxuICB2YXIgb3V0cHV0ID0gW107XHJcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSB2YWx1ZS5sZW5ndGg7IGkgPCBsOyArK2kpIHtcclxuICAgIGlmIChoYXNPd25Qcm9wZXJ0eSh2YWx1ZSwgU3RyaW5nKGkpKSkge1xyXG4gICAgICBvdXRwdXQucHVzaChmb3JtYXRQcm9wZXJ0eShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLFxyXG4gICAgICAgICAgU3RyaW5nKGkpLCB0cnVlKSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBvdXRwdXQucHVzaCgnJyk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIGtleXMuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcclxuICAgIGlmICgha2V5Lm1hdGNoKC9eXFxkKyQvKSkge1xyXG4gICAgICBvdXRwdXQucHVzaChmb3JtYXRQcm9wZXJ0eShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLFxyXG4gICAgICAgICAga2V5LCB0cnVlKSk7XHJcbiAgICB9XHJcbiAgfSk7XHJcbiAgcmV0dXJuIG91dHB1dDtcclxufVxyXG5cclxuXHJcbmZ1bmN0aW9uIGZvcm1hdFByb3BlcnR5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsIGtleSwgYXJyYXkpIHtcclxuICB2YXIgbmFtZSwgc3RyLCBkZXNjO1xyXG4gIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHZhbHVlLCBrZXkpIHx8IHsgdmFsdWU6IHZhbHVlW2tleV0gfTtcclxuICBpZiAoZGVzYy5nZXQpIHtcclxuICAgIGlmIChkZXNjLnNldCkge1xyXG4gICAgICBzdHIgPSBjdHguc3R5bGl6ZSgnW0dldHRlci9TZXR0ZXJdJywgJ3NwZWNpYWwnKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHN0ciA9IGN0eC5zdHlsaXplKCdbR2V0dGVyXScsICdzcGVjaWFsJyk7XHJcbiAgICB9XHJcbiAgfSBlbHNlIHtcclxuICAgIGlmIChkZXNjLnNldCkge1xyXG4gICAgICBzdHIgPSBjdHguc3R5bGl6ZSgnW1NldHRlcl0nLCAnc3BlY2lhbCcpO1xyXG4gICAgfVxyXG4gIH1cclxuICBpZiAoIWhhc093blByb3BlcnR5KHZpc2libGVLZXlzLCBrZXkpKSB7XHJcbiAgICBuYW1lID0gJ1snICsga2V5ICsgJ10nO1xyXG4gIH1cclxuICBpZiAoIXN0cikge1xyXG4gICAgaWYgKGN0eC5zZWVuLmluZGV4T2YoZGVzYy52YWx1ZSkgPCAwKSB7XHJcbiAgICAgIGlmIChpc051bGwocmVjdXJzZVRpbWVzKSkge1xyXG4gICAgICAgIHN0ciA9IGZvcm1hdFZhbHVlKGN0eCwgZGVzYy52YWx1ZSwgbnVsbCk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgc3RyID0gZm9ybWF0VmFsdWUoY3R4LCBkZXNjLnZhbHVlLCByZWN1cnNlVGltZXMgLSAxKTtcclxuICAgICAgfVxyXG4gICAgICBpZiAoc3RyLmluZGV4T2YoJ1xcbicpID4gLTEpIHtcclxuICAgICAgICBpZiAoYXJyYXkpIHtcclxuICAgICAgICAgIHN0ciA9IHN0ci5zcGxpdCgnXFxuJykubWFwKGZ1bmN0aW9uKGxpbmUpIHtcclxuICAgICAgICAgICAgcmV0dXJuICcgICcgKyBsaW5lO1xyXG4gICAgICAgICAgfSkuam9pbignXFxuJykuc3Vic3RyKDIpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBzdHIgPSAnXFxuJyArIHN0ci5zcGxpdCgnXFxuJykubWFwKGZ1bmN0aW9uKGxpbmUpIHtcclxuICAgICAgICAgICAgcmV0dXJuICcgICAnICsgbGluZTtcclxuICAgICAgICAgIH0pLmpvaW4oJ1xcbicpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgc3RyID0gY3R4LnN0eWxpemUoJ1tDaXJjdWxhcl0nLCAnc3BlY2lhbCcpO1xyXG4gICAgfVxyXG4gIH1cclxuICBpZiAoaXNVbmRlZmluZWQobmFtZSkpIHtcclxuICAgIGlmIChhcnJheSAmJiBrZXkubWF0Y2goL15cXGQrJC8pKSB7XHJcbiAgICAgIHJldHVybiBzdHI7XHJcbiAgICB9XHJcbiAgICBuYW1lID0gSlNPTi5zdHJpbmdpZnkoJycgKyBrZXkpO1xyXG4gICAgaWYgKG5hbWUubWF0Y2goL15cIihbYS16QS1aX11bYS16QS1aXzAtOV0qKVwiJC8pKSB7XHJcbiAgICAgIG5hbWUgPSBuYW1lLnN1YnN0cigxLCBuYW1lLmxlbmd0aCAtIDIpO1xyXG4gICAgICBuYW1lID0gY3R4LnN0eWxpemUobmFtZSwgJ25hbWUnKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIG5hbWUgPSBuYW1lLnJlcGxhY2UoLycvZywgXCJcXFxcJ1wiKVxyXG4gICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXFxcXCIvZywgJ1wiJylcclxuICAgICAgICAgICAgICAgICAucmVwbGFjZSgvKF5cInxcIiQpL2csIFwiJ1wiKTtcclxuICAgICAgbmFtZSA9IGN0eC5zdHlsaXplKG5hbWUsICdzdHJpbmcnKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJldHVybiBuYW1lICsgJzogJyArIHN0cjtcclxufVxyXG5cclxuXHJcbmZ1bmN0aW9uIHJlZHVjZVRvU2luZ2xlU3RyaW5nKG91dHB1dCwgYmFzZSwgYnJhY2VzKSB7XHJcbiAgdmFyIG51bUxpbmVzRXN0ID0gMDtcclxuICB2YXIgbGVuZ3RoID0gb3V0cHV0LnJlZHVjZShmdW5jdGlvbihwcmV2LCBjdXIpIHtcclxuICAgIG51bUxpbmVzRXN0Kys7XHJcbiAgICBpZiAoY3VyLmluZGV4T2YoJ1xcbicpID49IDApIG51bUxpbmVzRXN0Kys7XHJcbiAgICByZXR1cm4gcHJldiArIGN1ci5yZXBsYWNlKC9cXHUwMDFiXFxbXFxkXFxkP20vZywgJycpLmxlbmd0aCArIDE7XHJcbiAgfSwgMCk7XHJcblxyXG4gIGlmIChsZW5ndGggPiA2MCkge1xyXG4gICAgcmV0dXJuIGJyYWNlc1swXSArXHJcbiAgICAgICAgICAgKGJhc2UgPT09ICcnID8gJycgOiBiYXNlICsgJ1xcbiAnKSArXHJcbiAgICAgICAgICAgJyAnICtcclxuICAgICAgICAgICBvdXRwdXQuam9pbignLFxcbiAgJykgK1xyXG4gICAgICAgICAgICcgJyArXHJcbiAgICAgICAgICAgYnJhY2VzWzFdO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIGJyYWNlc1swXSArIGJhc2UgKyAnICcgKyBvdXRwdXQuam9pbignLCAnKSArICcgJyArIGJyYWNlc1sxXTtcclxufVxyXG5cclxuXHJcbi8vIE5PVEU6IFRoZXNlIHR5cGUgY2hlY2tpbmcgZnVuY3Rpb25zIGludGVudGlvbmFsbHkgZG9uJ3QgdXNlIGBpbnN0YW5jZW9mYFxyXG4vLyBiZWNhdXNlIGl0IGlzIGZyYWdpbGUgYW5kIGNhbiBiZSBlYXNpbHkgZmFrZWQgd2l0aCBgT2JqZWN0LmNyZWF0ZSgpYC5cclxuZnVuY3Rpb24gaXNBcnJheShhcikge1xyXG4gIHJldHVybiBBcnJheS5pc0FycmF5KGFyKTtcclxufVxyXG5leHBvcnRzLmlzQXJyYXkgPSBpc0FycmF5O1xyXG5cclxuZnVuY3Rpb24gaXNCb29sZWFuKGFyZykge1xyXG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnYm9vbGVhbic7XHJcbn1cclxuZXhwb3J0cy5pc0Jvb2xlYW4gPSBpc0Jvb2xlYW47XHJcblxyXG5mdW5jdGlvbiBpc051bGwoYXJnKSB7XHJcbiAgcmV0dXJuIGFyZyA9PT0gbnVsbDtcclxufVxyXG5leHBvcnRzLmlzTnVsbCA9IGlzTnVsbDtcclxuXHJcbmZ1bmN0aW9uIGlzTnVsbE9yVW5kZWZpbmVkKGFyZykge1xyXG4gIHJldHVybiBhcmcgPT0gbnVsbDtcclxufVxyXG5leHBvcnRzLmlzTnVsbE9yVW5kZWZpbmVkID0gaXNOdWxsT3JVbmRlZmluZWQ7XHJcblxyXG5mdW5jdGlvbiBpc051bWJlcihhcmcpIHtcclxuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ251bWJlcic7XHJcbn1cclxuZXhwb3J0cy5pc051bWJlciA9IGlzTnVtYmVyO1xyXG5cclxuZnVuY3Rpb24gaXNTdHJpbmcoYXJnKSB7XHJcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdzdHJpbmcnO1xyXG59XHJcbmV4cG9ydHMuaXNTdHJpbmcgPSBpc1N0cmluZztcclxuXHJcbmZ1bmN0aW9uIGlzU3ltYm9sKGFyZykge1xyXG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnc3ltYm9sJztcclxufVxyXG5leHBvcnRzLmlzU3ltYm9sID0gaXNTeW1ib2w7XHJcblxyXG5mdW5jdGlvbiBpc1VuZGVmaW5lZChhcmcpIHtcclxuICByZXR1cm4gYXJnID09PSB2b2lkIDA7XHJcbn1cclxuZXhwb3J0cy5pc1VuZGVmaW5lZCA9IGlzVW5kZWZpbmVkO1xyXG5cclxuZnVuY3Rpb24gaXNSZWdFeHAocmUpIHtcclxuICByZXR1cm4gaXNPYmplY3QocmUpICYmIG9iamVjdFRvU3RyaW5nKHJlKSA9PT0gJ1tvYmplY3QgUmVnRXhwXSc7XHJcbn1cclxuZXhwb3J0cy5pc1JlZ0V4cCA9IGlzUmVnRXhwO1xyXG5cclxuZnVuY3Rpb24gaXNPYmplY3QoYXJnKSB7XHJcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdvYmplY3QnICYmIGFyZyAhPT0gbnVsbDtcclxufVxyXG5leHBvcnRzLmlzT2JqZWN0ID0gaXNPYmplY3Q7XHJcblxyXG5mdW5jdGlvbiBpc0RhdGUoZCkge1xyXG4gIHJldHVybiBpc09iamVjdChkKSAmJiBvYmplY3RUb1N0cmluZyhkKSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xyXG59XHJcbmV4cG9ydHMuaXNEYXRlID0gaXNEYXRlO1xyXG5cclxuZnVuY3Rpb24gaXNFcnJvcihlKSB7XHJcbiAgcmV0dXJuIGlzT2JqZWN0KGUpICYmXHJcbiAgICAgIChvYmplY3RUb1N0cmluZyhlKSA9PT0gJ1tvYmplY3QgRXJyb3JdJyB8fCBlIGluc3RhbmNlb2YgRXJyb3IpO1xyXG59XHJcbmV4cG9ydHMuaXNFcnJvciA9IGlzRXJyb3I7XHJcblxyXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKGFyZykge1xyXG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnZnVuY3Rpb24nO1xyXG59XHJcbmV4cG9ydHMuaXNGdW5jdGlvbiA9IGlzRnVuY3Rpb247XHJcblxyXG5mdW5jdGlvbiBpc1ByaW1pdGl2ZShhcmcpIHtcclxuICByZXR1cm4gYXJnID09PSBudWxsIHx8XHJcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdib29sZWFuJyB8fFxyXG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnbnVtYmVyJyB8fFxyXG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnc3RyaW5nJyB8fFxyXG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnc3ltYm9sJyB8fCAgLy8gRVM2IHN5bWJvbFxyXG4gICAgICAgICB0eXBlb2YgYXJnID09PSAndW5kZWZpbmVkJztcclxufVxyXG5leHBvcnRzLmlzUHJpbWl0aXZlID0gaXNQcmltaXRpdmU7XHJcblxyXG5leHBvcnRzLmlzQnVmZmVyID0gcmVxdWlyZSgnLi9zdXBwb3J0L2lzQnVmZmVyJyk7XHJcblxyXG5mdW5jdGlvbiBvYmplY3RUb1N0cmluZyhvKSB7XHJcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKTtcclxufVxyXG5cclxuXHJcbmZ1bmN0aW9uIHBhZChuKSB7XHJcbiAgcmV0dXJuIG4gPCAxMCA/ICcwJyArIG4udG9TdHJpbmcoMTApIDogbi50b1N0cmluZygxMCk7XHJcbn1cclxuXHJcblxyXG52YXIgbW9udGhzID0gWydKYW4nLCAnRmViJywgJ01hcicsICdBcHInLCAnTWF5JywgJ0p1bicsICdKdWwnLCAnQXVnJywgJ1NlcCcsXHJcbiAgICAgICAgICAgICAgJ09jdCcsICdOb3YnLCAnRGVjJ107XHJcblxyXG4vLyAyNiBGZWIgMTY6MTk6MzRcclxuZnVuY3Rpb24gdGltZXN0YW1wKCkge1xyXG4gIHZhciBkID0gbmV3IERhdGUoKTtcclxuICB2YXIgdGltZSA9IFtwYWQoZC5nZXRIb3VycygpKSxcclxuICAgICAgICAgICAgICBwYWQoZC5nZXRNaW51dGVzKCkpLFxyXG4gICAgICAgICAgICAgIHBhZChkLmdldFNlY29uZHMoKSldLmpvaW4oJzonKTtcclxuICByZXR1cm4gW2QuZ2V0RGF0ZSgpLCBtb250aHNbZC5nZXRNb250aCgpXSwgdGltZV0uam9pbignICcpO1xyXG59XHJcblxyXG5cclxuLy8gbG9nIGlzIGp1c3QgYSB0aGluIHdyYXBwZXIgdG8gY29uc29sZS5sb2cgdGhhdCBwcmVwZW5kcyBhIHRpbWVzdGFtcFxyXG5leHBvcnRzLmxvZyA9IGZ1bmN0aW9uKCkge1xyXG4gIGNvbnNvbGUubG9nKCclcyAtICVzJywgdGltZXN0YW1wKCksIGV4cG9ydHMuZm9ybWF0LmFwcGx5KGV4cG9ydHMsIGFyZ3VtZW50cykpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBJbmhlcml0IHRoZSBwcm90b3R5cGUgbWV0aG9kcyBmcm9tIG9uZSBjb25zdHJ1Y3RvciBpbnRvIGFub3RoZXIuXHJcbiAqXHJcbiAqIFRoZSBGdW5jdGlvbi5wcm90b3R5cGUuaW5oZXJpdHMgZnJvbSBsYW5nLmpzIHJld3JpdHRlbiBhcyBhIHN0YW5kYWxvbmVcclxuICogZnVuY3Rpb24gKG5vdCBvbiBGdW5jdGlvbi5wcm90b3R5cGUpLiBOT1RFOiBJZiB0aGlzIGZpbGUgaXMgdG8gYmUgbG9hZGVkXHJcbiAqIGR1cmluZyBib290c3RyYXBwaW5nIHRoaXMgZnVuY3Rpb24gbmVlZHMgdG8gYmUgcmV3cml0dGVuIHVzaW5nIHNvbWUgbmF0aXZlXHJcbiAqIGZ1bmN0aW9ucyBhcyBwcm90b3R5cGUgc2V0dXAgdXNpbmcgbm9ybWFsIEphdmFTY3JpcHQgZG9lcyBub3Qgd29yayBhc1xyXG4gKiBleHBlY3RlZCBkdXJpbmcgYm9vdHN0cmFwcGluZyAoc2VlIG1pcnJvci5qcyBpbiByMTE0OTAzKS5cclxuICpcclxuICogQHBhcmFtIHtmdW5jdGlvbn0gY3RvciBDb25zdHJ1Y3RvciBmdW5jdGlvbiB3aGljaCBuZWVkcyB0byBpbmhlcml0IHRoZVxyXG4gKiAgICAgcHJvdG90eXBlLlxyXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBzdXBlckN0b3IgQ29uc3RydWN0b3IgZnVuY3Rpb24gdG8gaW5oZXJpdCBwcm90b3R5cGUgZnJvbS5cclxuICovXHJcbmV4cG9ydHMuaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xyXG5cclxuZXhwb3J0cy5fZXh0ZW5kID0gZnVuY3Rpb24ob3JpZ2luLCBhZGQpIHtcclxuICAvLyBEb24ndCBkbyBhbnl0aGluZyBpZiBhZGQgaXNuJ3QgYW4gb2JqZWN0XHJcbiAgaWYgKCFhZGQgfHwgIWlzT2JqZWN0KGFkZCkpIHJldHVybiBvcmlnaW47XHJcblxyXG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMoYWRkKTtcclxuICB2YXIgaSA9IGtleXMubGVuZ3RoO1xyXG4gIHdoaWxlIChpLS0pIHtcclxuICAgIG9yaWdpbltrZXlzW2ldXSA9IGFkZFtrZXlzW2ldXTtcclxuICB9XHJcbiAgcmV0dXJuIG9yaWdpbjtcclxufTtcclxuXHJcbmZ1bmN0aW9uIGhhc093blByb3BlcnR5KG9iaiwgcHJvcCkge1xyXG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKTtcclxufVxyXG5cclxudmFyIGtDdXN0b21Qcm9taXNpZmllZFN5bWJvbCA9IHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnID8gU3ltYm9sKCd1dGlsLnByb21pc2lmeS5jdXN0b20nKSA6IHVuZGVmaW5lZDtcclxuXHJcbmV4cG9ydHMucHJvbWlzaWZ5ID0gZnVuY3Rpb24gcHJvbWlzaWZ5KG9yaWdpbmFsKSB7XHJcbiAgaWYgKHR5cGVvZiBvcmlnaW5hbCAhPT0gJ2Z1bmN0aW9uJylcclxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBcIm9yaWdpbmFsXCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIEZ1bmN0aW9uJyk7XHJcblxyXG4gIGlmIChrQ3VzdG9tUHJvbWlzaWZpZWRTeW1ib2wgJiYgb3JpZ2luYWxba0N1c3RvbVByb21pc2lmaWVkU3ltYm9sXSkge1xyXG4gICAgdmFyIGZuID0gb3JpZ2luYWxba0N1c3RvbVByb21pc2lmaWVkU3ltYm9sXTtcclxuICAgIGlmICh0eXBlb2YgZm4gIT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwidXRpbC5wcm9taXNpZnkuY3VzdG9tXCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIEZ1bmN0aW9uJyk7XHJcbiAgICB9XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZm4sIGtDdXN0b21Qcm9taXNpZmllZFN5bWJvbCwge1xyXG4gICAgICB2YWx1ZTogZm4sIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogZmFsc2UsIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gZm47XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBmbigpIHtcclxuICAgIHZhciBwcm9taXNlUmVzb2x2ZSwgcHJvbWlzZVJlamVjdDtcclxuICAgIHZhciBwcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICBwcm9taXNlUmVzb2x2ZSA9IHJlc29sdmU7XHJcbiAgICAgIHByb21pc2VSZWplY3QgPSByZWplY3Q7XHJcbiAgICB9KTtcclxuXHJcbiAgICB2YXIgYXJncyA9IFtdO1xyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgYXJncy5wdXNoKGFyZ3VtZW50c1tpXSk7XHJcbiAgICB9XHJcbiAgICBhcmdzLnB1c2goZnVuY3Rpb24gKGVyciwgdmFsdWUpIHtcclxuICAgICAgaWYgKGVycikge1xyXG4gICAgICAgIHByb21pc2VSZWplY3QoZXJyKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBwcm9taXNlUmVzb2x2ZSh2YWx1ZSk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIHRyeSB7XHJcbiAgICAgIG9yaWdpbmFsLmFwcGx5KHRoaXMsIGFyZ3MpO1xyXG4gICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgIHByb21pc2VSZWplY3QoZXJyKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gcHJvbWlzZTtcclxuICB9XHJcblxyXG4gIE9iamVjdC5zZXRQcm90b3R5cGVPZihmbiwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG9yaWdpbmFsKSk7XHJcblxyXG4gIGlmIChrQ3VzdG9tUHJvbWlzaWZpZWRTeW1ib2wpIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShmbiwga0N1c3RvbVByb21pc2lmaWVkU3ltYm9sLCB7XHJcbiAgICB2YWx1ZTogZm4sIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogZmFsc2UsIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gIH0pO1xyXG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhcclxuICAgIGZuLFxyXG4gICAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhvcmlnaW5hbClcclxuICApO1xyXG59XHJcblxyXG5leHBvcnRzLnByb21pc2lmeS5jdXN0b20gPSBrQ3VzdG9tUHJvbWlzaWZpZWRTeW1ib2xcclxuXHJcbmZ1bmN0aW9uIGNhbGxiYWNraWZ5T25SZWplY3RlZChyZWFzb24sIGNiKSB7XHJcbiAgLy8gYCFyZWFzb25gIGd1YXJkIGluc3BpcmVkIGJ5IGJsdWViaXJkIChSZWY6IGh0dHBzOi8vZ29vLmdsL3Q1SVM2TSkuXHJcbiAgLy8gQmVjYXVzZSBgbnVsbGAgaXMgYSBzcGVjaWFsIGVycm9yIHZhbHVlIGluIGNhbGxiYWNrcyB3aGljaCBtZWFucyBcIm5vIGVycm9yXHJcbiAgLy8gb2NjdXJyZWRcIiwgd2UgZXJyb3Itd3JhcCBzbyB0aGUgY2FsbGJhY2sgY29uc3VtZXIgY2FuIGRpc3Rpbmd1aXNoIGJldHdlZW5cclxuICAvLyBcInRoZSBwcm9taXNlIHJlamVjdGVkIHdpdGggbnVsbFwiIG9yIFwidGhlIHByb21pc2UgZnVsZmlsbGVkIHdpdGggdW5kZWZpbmVkXCIuXHJcbiAgaWYgKCFyZWFzb24pIHtcclxuICAgIHZhciBuZXdSZWFzb24gPSBuZXcgRXJyb3IoJ1Byb21pc2Ugd2FzIHJlamVjdGVkIHdpdGggYSBmYWxzeSB2YWx1ZScpO1xyXG4gICAgbmV3UmVhc29uLnJlYXNvbiA9IHJlYXNvbjtcclxuICAgIHJlYXNvbiA9IG5ld1JlYXNvbjtcclxuICB9XHJcbiAgcmV0dXJuIGNiKHJlYXNvbik7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNhbGxiYWNraWZ5KG9yaWdpbmFsKSB7XHJcbiAgaWYgKHR5cGVvZiBvcmlnaW5hbCAhPT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwib3JpZ2luYWxcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgRnVuY3Rpb24nKTtcclxuICB9XHJcblxyXG4gIC8vIFdlIERPIE5PVCByZXR1cm4gdGhlIHByb21pc2UgYXMgaXQgZ2l2ZXMgdGhlIHVzZXIgYSBmYWxzZSBzZW5zZSB0aGF0XHJcbiAgLy8gdGhlIHByb21pc2UgaXMgYWN0dWFsbHkgc29tZWhvdyByZWxhdGVkIHRvIHRoZSBjYWxsYmFjaydzIGV4ZWN1dGlvblxyXG4gIC8vIGFuZCB0aGF0IHRoZSBjYWxsYmFjayB0aHJvd2luZyB3aWxsIHJlamVjdCB0aGUgcHJvbWlzZS5cclxuICBmdW5jdGlvbiBjYWxsYmFja2lmaWVkKCkge1xyXG4gICAgdmFyIGFyZ3MgPSBbXTtcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIGFyZ3MucHVzaChhcmd1bWVudHNbaV0pO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciBtYXliZUNiID0gYXJncy5wb3AoKTtcclxuICAgIGlmICh0eXBlb2YgbWF5YmVDYiAhPT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgbGFzdCBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgRnVuY3Rpb24nKTtcclxuICAgIH1cclxuICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgIHZhciBjYiA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICByZXR1cm4gbWF5YmVDYi5hcHBseShzZWxmLCBhcmd1bWVudHMpO1xyXG4gICAgfTtcclxuICAgIC8vIEluIHRydWUgbm9kZSBzdHlsZSB3ZSBwcm9jZXNzIHRoZSBjYWxsYmFjayBvbiBgbmV4dFRpY2tgIHdpdGggYWxsIHRoZVxyXG4gICAgLy8gaW1wbGljYXRpb25zIChzdGFjaywgYHVuY2F1Z2h0RXhjZXB0aW9uYCwgYGFzeW5jX2hvb2tzYClcclxuICAgIG9yaWdpbmFsLmFwcGx5KHRoaXMsIGFyZ3MpXHJcbiAgICAgIC50aGVuKGZ1bmN0aW9uKHJldCkgeyBwcm9jZXNzLm5leHRUaWNrKGNiLCBudWxsLCByZXQpIH0sXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uKHJlaikgeyBwcm9jZXNzLm5leHRUaWNrKGNhbGxiYWNraWZ5T25SZWplY3RlZCwgcmVqLCBjYikgfSk7XHJcbiAgfVxyXG5cclxuICBPYmplY3Quc2V0UHJvdG90eXBlT2YoY2FsbGJhY2tpZmllZCwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG9yaWdpbmFsKSk7XHJcbiAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoY2FsbGJhY2tpZmllZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKG9yaWdpbmFsKSk7XHJcbiAgcmV0dXJuIGNhbGxiYWNraWZpZWQ7XHJcbn1cclxuZXhwb3J0cy5jYWxsYmFja2lmeSA9IGNhbGxiYWNraWZ5O1xyXG4iLCIndXNlIHN0cmljdCc7XHJcblxyXG4vLyBOb3RlOiBhZGxlcjMyIHRha2VzIDEyJSBmb3IgbGV2ZWwgMCBhbmQgMiUgZm9yIGxldmVsIDYuXHJcbi8vIEl0IGlzbid0IHdvcnRoIGl0IHRvIG1ha2UgYWRkaXRpb25hbCBvcHRpbWl6YXRpb25zIGFzIGluIG9yaWdpbmFsLlxyXG4vLyBTbWFsbCBzaXplIGlzIHByZWZlcmFibGUuXHJcblxyXG4vLyAoQykgMTk5NS0yMDEzIEplYW4tbG91cCBHYWlsbHkgYW5kIE1hcmsgQWRsZXJcclxuLy8gKEMpIDIwMTQtMjAxNyBWaXRhbHkgUHV6cmluIGFuZCBBbmRyZXkgVHVwaXRzaW5cclxuLy9cclxuLy8gVGhpcyBzb2Z0d2FyZSBpcyBwcm92aWRlZCAnYXMtaXMnLCB3aXRob3V0IGFueSBleHByZXNzIG9yIGltcGxpZWRcclxuLy8gd2FycmFudHkuIEluIG5vIGV2ZW50IHdpbGwgdGhlIGF1dGhvcnMgYmUgaGVsZCBsaWFibGUgZm9yIGFueSBkYW1hZ2VzXHJcbi8vIGFyaXNpbmcgZnJvbSB0aGUgdXNlIG9mIHRoaXMgc29mdHdhcmUuXHJcbi8vXHJcbi8vIFBlcm1pc3Npb24gaXMgZ3JhbnRlZCB0byBhbnlvbmUgdG8gdXNlIHRoaXMgc29mdHdhcmUgZm9yIGFueSBwdXJwb3NlLFxyXG4vLyBpbmNsdWRpbmcgY29tbWVyY2lhbCBhcHBsaWNhdGlvbnMsIGFuZCB0byBhbHRlciBpdCBhbmQgcmVkaXN0cmlidXRlIGl0XHJcbi8vIGZyZWVseSwgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIHJlc3RyaWN0aW9uczpcclxuLy9cclxuLy8gMS4gVGhlIG9yaWdpbiBvZiB0aGlzIHNvZnR3YXJlIG11c3Qgbm90IGJlIG1pc3JlcHJlc2VudGVkOyB5b3UgbXVzdCBub3RcclxuLy8gICBjbGFpbSB0aGF0IHlvdSB3cm90ZSB0aGUgb3JpZ2luYWwgc29mdHdhcmUuIElmIHlvdSB1c2UgdGhpcyBzb2Z0d2FyZVxyXG4vLyAgIGluIGEgcHJvZHVjdCwgYW4gYWNrbm93bGVkZ21lbnQgaW4gdGhlIHByb2R1Y3QgZG9jdW1lbnRhdGlvbiB3b3VsZCBiZVxyXG4vLyAgIGFwcHJlY2lhdGVkIGJ1dCBpcyBub3QgcmVxdWlyZWQuXHJcbi8vIDIuIEFsdGVyZWQgc291cmNlIHZlcnNpb25zIG11c3QgYmUgcGxhaW5seSBtYXJrZWQgYXMgc3VjaCwgYW5kIG11c3Qgbm90IGJlXHJcbi8vICAgbWlzcmVwcmVzZW50ZWQgYXMgYmVpbmcgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLlxyXG4vLyAzLiBUaGlzIG5vdGljZSBtYXkgbm90IGJlIHJlbW92ZWQgb3IgYWx0ZXJlZCBmcm9tIGFueSBzb3VyY2UgZGlzdHJpYnV0aW9uLlxyXG5cclxuZnVuY3Rpb24gYWRsZXIzMihhZGxlciwgYnVmLCBsZW4sIHBvcykge1xyXG4gIHZhciBzMSA9IChhZGxlciAmIDB4ZmZmZikgfDAsXHJcbiAgICAgIHMyID0gKChhZGxlciA+Pj4gMTYpICYgMHhmZmZmKSB8MCxcclxuICAgICAgbiA9IDA7XHJcblxyXG4gIHdoaWxlIChsZW4gIT09IDApIHtcclxuICAgIC8vIFNldCBsaW1pdCB+IHR3aWNlIGxlc3MgdGhhbiA1NTUyLCB0byBrZWVwXHJcbiAgICAvLyBzMiBpbiAzMS1iaXRzLCBiZWNhdXNlIHdlIGZvcmNlIHNpZ25lZCBpbnRzLlxyXG4gICAgLy8gaW4gb3RoZXIgY2FzZSAlPSB3aWxsIGZhaWwuXHJcbiAgICBuID0gbGVuID4gMjAwMCA/IDIwMDAgOiBsZW47XHJcbiAgICBsZW4gLT0gbjtcclxuXHJcbiAgICBkbyB7XHJcbiAgICAgIHMxID0gKHMxICsgYnVmW3BvcysrXSkgfDA7XHJcbiAgICAgIHMyID0gKHMyICsgczEpIHwwO1xyXG4gICAgfSB3aGlsZSAoLS1uKTtcclxuXHJcbiAgICBzMSAlPSA2NTUyMTtcclxuICAgIHMyICU9IDY1NTIxO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIChzMSB8IChzMiA8PCAxNikpIHwwO1xyXG59XHJcblxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBhZGxlcjMyO1xyXG4iLCIndXNlIHN0cmljdCc7XHJcblxyXG4vLyBOb3RlOiB3ZSBjYW4ndCBnZXQgc2lnbmlmaWNhbnQgc3BlZWQgYm9vc3QgaGVyZS5cclxuLy8gU28gd3JpdGUgY29kZSB0byBtaW5pbWl6ZSBzaXplIC0gbm8gcHJlZ2VuZXJhdGVkIHRhYmxlc1xyXG4vLyBhbmQgYXJyYXkgdG9vbHMgZGVwZW5kZW5jaWVzLlxyXG5cclxuLy8gKEMpIDE5OTUtMjAxMyBKZWFuLWxvdXAgR2FpbGx5IGFuZCBNYXJrIEFkbGVyXHJcbi8vIChDKSAyMDE0LTIwMTcgVml0YWx5IFB1enJpbiBhbmQgQW5kcmV5IFR1cGl0c2luXHJcbi8vXHJcbi8vIFRoaXMgc29mdHdhcmUgaXMgcHJvdmlkZWQgJ2FzLWlzJywgd2l0aG91dCBhbnkgZXhwcmVzcyBvciBpbXBsaWVkXHJcbi8vIHdhcnJhbnR5LiBJbiBubyBldmVudCB3aWxsIHRoZSBhdXRob3JzIGJlIGhlbGQgbGlhYmxlIGZvciBhbnkgZGFtYWdlc1xyXG4vLyBhcmlzaW5nIGZyb20gdGhlIHVzZSBvZiB0aGlzIHNvZnR3YXJlLlxyXG4vL1xyXG4vLyBQZXJtaXNzaW9uIGlzIGdyYW50ZWQgdG8gYW55b25lIHRvIHVzZSB0aGlzIHNvZnR3YXJlIGZvciBhbnkgcHVycG9zZSxcclxuLy8gaW5jbHVkaW5nIGNvbW1lcmNpYWwgYXBwbGljYXRpb25zLCBhbmQgdG8gYWx0ZXIgaXQgYW5kIHJlZGlzdHJpYnV0ZSBpdFxyXG4vLyBmcmVlbHksIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyByZXN0cmljdGlvbnM6XHJcbi8vXHJcbi8vIDEuIFRoZSBvcmlnaW4gb2YgdGhpcyBzb2Z0d2FyZSBtdXN0IG5vdCBiZSBtaXNyZXByZXNlbnRlZDsgeW91IG11c3Qgbm90XHJcbi8vICAgY2xhaW0gdGhhdCB5b3Ugd3JvdGUgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLiBJZiB5b3UgdXNlIHRoaXMgc29mdHdhcmVcclxuLy8gICBpbiBhIHByb2R1Y3QsIGFuIGFja25vd2xlZGdtZW50IGluIHRoZSBwcm9kdWN0IGRvY3VtZW50YXRpb24gd291bGQgYmVcclxuLy8gICBhcHByZWNpYXRlZCBidXQgaXMgbm90IHJlcXVpcmVkLlxyXG4vLyAyLiBBbHRlcmVkIHNvdXJjZSB2ZXJzaW9ucyBtdXN0IGJlIHBsYWlubHkgbWFya2VkIGFzIHN1Y2gsIGFuZCBtdXN0IG5vdCBiZVxyXG4vLyAgIG1pc3JlcHJlc2VudGVkIGFzIGJlaW5nIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS5cclxuLy8gMy4gVGhpcyBub3RpY2UgbWF5IG5vdCBiZSByZW1vdmVkIG9yIGFsdGVyZWQgZnJvbSBhbnkgc291cmNlIGRpc3RyaWJ1dGlvbi5cclxuXHJcbi8vIFVzZSBvcmRpbmFyeSBhcnJheSwgc2luY2UgdW50eXBlZCBtYWtlcyBubyBib29zdCBoZXJlXHJcbmZ1bmN0aW9uIG1ha2VUYWJsZSgpIHtcclxuICB2YXIgYywgdGFibGUgPSBbXTtcclxuXHJcbiAgZm9yICh2YXIgbiA9IDA7IG4gPCAyNTY7IG4rKykge1xyXG4gICAgYyA9IG47XHJcbiAgICBmb3IgKHZhciBrID0gMDsgayA8IDg7IGsrKykge1xyXG4gICAgICBjID0gKChjICYgMSkgPyAoMHhFREI4ODMyMCBeIChjID4+PiAxKSkgOiAoYyA+Pj4gMSkpO1xyXG4gICAgfVxyXG4gICAgdGFibGVbbl0gPSBjO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHRhYmxlO1xyXG59XHJcblxyXG4vLyBDcmVhdGUgdGFibGUgb24gbG9hZC4gSnVzdCAyNTUgc2lnbmVkIGxvbmdzLiBOb3QgYSBwcm9ibGVtLlxyXG52YXIgY3JjVGFibGUgPSBtYWtlVGFibGUoKTtcclxuXHJcblxyXG5mdW5jdGlvbiBjcmMzMihjcmMsIGJ1ZiwgbGVuLCBwb3MpIHtcclxuICB2YXIgdCA9IGNyY1RhYmxlLFxyXG4gICAgICBlbmQgPSBwb3MgKyBsZW47XHJcblxyXG4gIGNyYyBePSAtMTtcclxuXHJcbiAgZm9yICh2YXIgaSA9IHBvczsgaSA8IGVuZDsgaSsrKSB7XHJcbiAgICBjcmMgPSAoY3JjID4+PiA4KSBeIHRbKGNyYyBeIGJ1ZltpXSkgJiAweEZGXTtcclxuICB9XHJcblxyXG4gIHJldHVybiAoY3JjIF4gKC0xKSk7IC8vID4+PiAwO1xyXG59XHJcblxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBjcmMzMjtcclxuIiwiJ3VzZSBzdHJpY3QnO1xyXG5cclxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ2J1ZmZlcicpLkJ1ZmZlcjtcclxudmFyIFRyYW5zZm9ybSA9IHJlcXVpcmUoJ3N0cmVhbScpLlRyYW5zZm9ybTtcclxudmFyIGJpbmRpbmcgPSByZXF1aXJlKCcuL2JpbmRpbmcnKTtcclxudmFyIHV0aWwgPSByZXF1aXJlKCd1dGlsJyk7XHJcbnZhciBhc3NlcnQgPSByZXF1aXJlKCdhc3NlcnQnKS5vaztcclxudmFyIGtNYXhMZW5ndGggPSByZXF1aXJlKCdidWZmZXInKS5rTWF4TGVuZ3RoO1xyXG52YXIga1JhbmdlRXJyb3JNZXNzYWdlID0gJ0Nhbm5vdCBjcmVhdGUgZmluYWwgQnVmZmVyLiBJdCB3b3VsZCBiZSBsYXJnZXIgJyArICd0aGFuIDB4JyArIGtNYXhMZW5ndGgudG9TdHJpbmcoMTYpICsgJyBieXRlcyc7XHJcblxyXG4vLyB6bGliIGRvZXNuJ3QgcHJvdmlkZSB0aGVzZSwgc28ga2x1ZGdlIHRoZW0gaW4gZm9sbG93aW5nIHRoZSBzYW1lXHJcbi8vIGNvbnN0IG5hbWluZyBzY2hlbWUgemxpYiB1c2VzLlxyXG5iaW5kaW5nLlpfTUlOX1dJTkRPV0JJVFMgPSA4O1xyXG5iaW5kaW5nLlpfTUFYX1dJTkRPV0JJVFMgPSAxNTtcclxuYmluZGluZy5aX0RFRkFVTFRfV0lORE9XQklUUyA9IDE1O1xyXG5cclxuLy8gZmV3ZXIgdGhhbiA2NCBieXRlcyBwZXIgY2h1bmsgaXMgc3R1cGlkLlxyXG4vLyB0ZWNobmljYWxseSBpdCBjb3VsZCB3b3JrIHdpdGggYXMgZmV3IGFzIDgsIGJ1dCBldmVuIDY0IGJ5dGVzXHJcbi8vIGlzIGFic3VyZGx5IGxvdy4gIFVzdWFsbHkgYSBNQiBvciBtb3JlIGlzIGJlc3QuXHJcbmJpbmRpbmcuWl9NSU5fQ0hVTksgPSA2NDtcclxuYmluZGluZy5aX01BWF9DSFVOSyA9IEluZmluaXR5O1xyXG5iaW5kaW5nLlpfREVGQVVMVF9DSFVOSyA9IDE2ICogMTAyNDtcclxuXHJcbmJpbmRpbmcuWl9NSU5fTUVNTEVWRUwgPSAxO1xyXG5iaW5kaW5nLlpfTUFYX01FTUxFVkVMID0gOTtcclxuYmluZGluZy5aX0RFRkFVTFRfTUVNTEVWRUwgPSA4O1xyXG5cclxuYmluZGluZy5aX01JTl9MRVZFTCA9IC0xO1xyXG5iaW5kaW5nLlpfTUFYX0xFVkVMID0gOTtcclxuYmluZGluZy5aX0RFRkFVTFRfTEVWRUwgPSBiaW5kaW5nLlpfREVGQVVMVF9DT01QUkVTU0lPTjtcclxuXHJcbi8vIGV4cG9zZSBhbGwgdGhlIHpsaWIgY29uc3RhbnRzXHJcbnZhciBia2V5cyA9IE9iamVjdC5rZXlzKGJpbmRpbmcpO1xyXG5mb3IgKHZhciBiayA9IDA7IGJrIDwgYmtleXMubGVuZ3RoOyBiaysrKSB7XHJcbiAgdmFyIGJrZXkgPSBia2V5c1tia107XHJcbiAgaWYgKGJrZXkubWF0Y2goL15aLykpIHtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBia2V5LCB7XHJcbiAgICAgIGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiBiaW5kaW5nW2JrZXldLCB3cml0YWJsZTogZmFsc2VcclxuICAgIH0pO1xyXG4gIH1cclxufVxyXG5cclxuLy8gdHJhbnNsYXRpb24gdGFibGUgZm9yIHJldHVybiBjb2Rlcy5cclxudmFyIGNvZGVzID0ge1xyXG4gIFpfT0s6IGJpbmRpbmcuWl9PSyxcclxuICBaX1NUUkVBTV9FTkQ6IGJpbmRpbmcuWl9TVFJFQU1fRU5ELFxyXG4gIFpfTkVFRF9ESUNUOiBiaW5kaW5nLlpfTkVFRF9ESUNULFxyXG4gIFpfRVJSTk86IGJpbmRpbmcuWl9FUlJOTyxcclxuICBaX1NUUkVBTV9FUlJPUjogYmluZGluZy5aX1NUUkVBTV9FUlJPUixcclxuICBaX0RBVEFfRVJST1I6IGJpbmRpbmcuWl9EQVRBX0VSUk9SLFxyXG4gIFpfTUVNX0VSUk9SOiBiaW5kaW5nLlpfTUVNX0VSUk9SLFxyXG4gIFpfQlVGX0VSUk9SOiBiaW5kaW5nLlpfQlVGX0VSUk9SLFxyXG4gIFpfVkVSU0lPTl9FUlJPUjogYmluZGluZy5aX1ZFUlNJT05fRVJST1JcclxufTtcclxuXHJcbnZhciBja2V5cyA9IE9iamVjdC5rZXlzKGNvZGVzKTtcclxuZm9yICh2YXIgY2sgPSAwOyBjayA8IGNrZXlzLmxlbmd0aDsgY2srKykge1xyXG4gIHZhciBja2V5ID0gY2tleXNbY2tdO1xyXG4gIGNvZGVzW2NvZGVzW2NrZXldXSA9IGNrZXk7XHJcbn1cclxuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnY29kZXMnLCB7XHJcbiAgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IE9iamVjdC5mcmVlemUoY29kZXMpLCB3cml0YWJsZTogZmFsc2VcclxufSk7XHJcblxyXG5leHBvcnRzLkRlZmxhdGUgPSBEZWZsYXRlO1xyXG5leHBvcnRzLkluZmxhdGUgPSBJbmZsYXRlO1xyXG5leHBvcnRzLkd6aXAgPSBHemlwO1xyXG5leHBvcnRzLkd1bnppcCA9IEd1bnppcDtcclxuZXhwb3J0cy5EZWZsYXRlUmF3ID0gRGVmbGF0ZVJhdztcclxuZXhwb3J0cy5JbmZsYXRlUmF3ID0gSW5mbGF0ZVJhdztcclxuZXhwb3J0cy5VbnppcCA9IFVuemlwO1xyXG5cclxuZXhwb3J0cy5jcmVhdGVEZWZsYXRlID0gZnVuY3Rpb24gKG8pIHtcclxuICByZXR1cm4gbmV3IERlZmxhdGUobyk7XHJcbn07XHJcblxyXG5leHBvcnRzLmNyZWF0ZUluZmxhdGUgPSBmdW5jdGlvbiAobykge1xyXG4gIHJldHVybiBuZXcgSW5mbGF0ZShvKTtcclxufTtcclxuXHJcbmV4cG9ydHMuY3JlYXRlRGVmbGF0ZVJhdyA9IGZ1bmN0aW9uIChvKSB7XHJcbiAgcmV0dXJuIG5ldyBEZWZsYXRlUmF3KG8pO1xyXG59O1xyXG5cclxuZXhwb3J0cy5jcmVhdGVJbmZsYXRlUmF3ID0gZnVuY3Rpb24gKG8pIHtcclxuICByZXR1cm4gbmV3IEluZmxhdGVSYXcobyk7XHJcbn07XHJcblxyXG5leHBvcnRzLmNyZWF0ZUd6aXAgPSBmdW5jdGlvbiAobykge1xyXG4gIHJldHVybiBuZXcgR3ppcChvKTtcclxufTtcclxuXHJcbmV4cG9ydHMuY3JlYXRlR3VuemlwID0gZnVuY3Rpb24gKG8pIHtcclxuICByZXR1cm4gbmV3IEd1bnppcChvKTtcclxufTtcclxuXHJcbmV4cG9ydHMuY3JlYXRlVW56aXAgPSBmdW5jdGlvbiAobykge1xyXG4gIHJldHVybiBuZXcgVW56aXAobyk7XHJcbn07XHJcblxyXG4vLyBDb252ZW5pZW5jZSBtZXRob2RzLlxyXG4vLyBjb21wcmVzcy9kZWNvbXByZXNzIGEgc3RyaW5nIG9yIGJ1ZmZlciBpbiBvbmUgc3RlcC5cclxuZXhwb3J0cy5kZWZsYXRlID0gZnVuY3Rpb24gKGJ1ZmZlciwgb3B0cywgY2FsbGJhY2spIHtcclxuICBpZiAodHlwZW9mIG9wdHMgPT09ICdmdW5jdGlvbicpIHtcclxuICAgIGNhbGxiYWNrID0gb3B0cztcclxuICAgIG9wdHMgPSB7fTtcclxuICB9XHJcbiAgcmV0dXJuIHpsaWJCdWZmZXIobmV3IERlZmxhdGUob3B0cyksIGJ1ZmZlciwgY2FsbGJhY2spO1xyXG59O1xyXG5cclxuZXhwb3J0cy5kZWZsYXRlU3luYyA9IGZ1bmN0aW9uIChidWZmZXIsIG9wdHMpIHtcclxuICByZXR1cm4gemxpYkJ1ZmZlclN5bmMobmV3IERlZmxhdGUob3B0cyksIGJ1ZmZlcik7XHJcbn07XHJcblxyXG5leHBvcnRzLmd6aXAgPSBmdW5jdGlvbiAoYnVmZmVyLCBvcHRzLCBjYWxsYmFjaykge1xyXG4gIGlmICh0eXBlb2Ygb3B0cyA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgY2FsbGJhY2sgPSBvcHRzO1xyXG4gICAgb3B0cyA9IHt9O1xyXG4gIH1cclxuICByZXR1cm4gemxpYkJ1ZmZlcihuZXcgR3ppcChvcHRzKSwgYnVmZmVyLCBjYWxsYmFjayk7XHJcbn07XHJcblxyXG5leHBvcnRzLmd6aXBTeW5jID0gZnVuY3Rpb24gKGJ1ZmZlciwgb3B0cykge1xyXG4gIHJldHVybiB6bGliQnVmZmVyU3luYyhuZXcgR3ppcChvcHRzKSwgYnVmZmVyKTtcclxufTtcclxuXHJcbmV4cG9ydHMuZGVmbGF0ZVJhdyA9IGZ1bmN0aW9uIChidWZmZXIsIG9wdHMsIGNhbGxiYWNrKSB7XHJcbiAgaWYgKHR5cGVvZiBvcHRzID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICBjYWxsYmFjayA9IG9wdHM7XHJcbiAgICBvcHRzID0ge307XHJcbiAgfVxyXG4gIHJldHVybiB6bGliQnVmZmVyKG5ldyBEZWZsYXRlUmF3KG9wdHMpLCBidWZmZXIsIGNhbGxiYWNrKTtcclxufTtcclxuXHJcbmV4cG9ydHMuZGVmbGF0ZVJhd1N5bmMgPSBmdW5jdGlvbiAoYnVmZmVyLCBvcHRzKSB7XHJcbiAgcmV0dXJuIHpsaWJCdWZmZXJTeW5jKG5ldyBEZWZsYXRlUmF3KG9wdHMpLCBidWZmZXIpO1xyXG59O1xyXG5cclxuZXhwb3J0cy51bnppcCA9IGZ1bmN0aW9uIChidWZmZXIsIG9wdHMsIGNhbGxiYWNrKSB7XHJcbiAgaWYgKHR5cGVvZiBvcHRzID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICBjYWxsYmFjayA9IG9wdHM7XHJcbiAgICBvcHRzID0ge307XHJcbiAgfVxyXG4gIHJldHVybiB6bGliQnVmZmVyKG5ldyBVbnppcChvcHRzKSwgYnVmZmVyLCBjYWxsYmFjayk7XHJcbn07XHJcblxyXG5leHBvcnRzLnVuemlwU3luYyA9IGZ1bmN0aW9uIChidWZmZXIsIG9wdHMpIHtcclxuICByZXR1cm4gemxpYkJ1ZmZlclN5bmMobmV3IFVuemlwKG9wdHMpLCBidWZmZXIpO1xyXG59O1xyXG5cclxuZXhwb3J0cy5pbmZsYXRlID0gZnVuY3Rpb24gKGJ1ZmZlciwgb3B0cywgY2FsbGJhY2spIHtcclxuICBpZiAodHlwZW9mIG9wdHMgPT09ICdmdW5jdGlvbicpIHtcclxuICAgIGNhbGxiYWNrID0gb3B0cztcclxuICAgIG9wdHMgPSB7fTtcclxuICB9XHJcbiAgcmV0dXJuIHpsaWJCdWZmZXIobmV3IEluZmxhdGUob3B0cyksIGJ1ZmZlciwgY2FsbGJhY2spO1xyXG59O1xyXG5cclxuZXhwb3J0cy5pbmZsYXRlU3luYyA9IGZ1bmN0aW9uIChidWZmZXIsIG9wdHMpIHtcclxuICByZXR1cm4gemxpYkJ1ZmZlclN5bmMobmV3IEluZmxhdGUob3B0cyksIGJ1ZmZlcik7XHJcbn07XHJcblxyXG5leHBvcnRzLmd1bnppcCA9IGZ1bmN0aW9uIChidWZmZXIsIG9wdHMsIGNhbGxiYWNrKSB7XHJcbiAgaWYgKHR5cGVvZiBvcHRzID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICBjYWxsYmFjayA9IG9wdHM7XHJcbiAgICBvcHRzID0ge307XHJcbiAgfVxyXG4gIHJldHVybiB6bGliQnVmZmVyKG5ldyBHdW56aXAob3B0cyksIGJ1ZmZlciwgY2FsbGJhY2spO1xyXG59O1xyXG5cclxuZXhwb3J0cy5ndW56aXBTeW5jID0gZnVuY3Rpb24gKGJ1ZmZlciwgb3B0cykge1xyXG4gIHJldHVybiB6bGliQnVmZmVyU3luYyhuZXcgR3VuemlwKG9wdHMpLCBidWZmZXIpO1xyXG59O1xyXG5cclxuZXhwb3J0cy5pbmZsYXRlUmF3ID0gZnVuY3Rpb24gKGJ1ZmZlciwgb3B0cywgY2FsbGJhY2spIHtcclxuICBpZiAodHlwZW9mIG9wdHMgPT09ICdmdW5jdGlvbicpIHtcclxuICAgIGNhbGxiYWNrID0gb3B0cztcclxuICAgIG9wdHMgPSB7fTtcclxuICB9XHJcbiAgcmV0dXJuIHpsaWJCdWZmZXIobmV3IEluZmxhdGVSYXcob3B0cyksIGJ1ZmZlciwgY2FsbGJhY2spO1xyXG59O1xyXG5cclxuZXhwb3J0cy5pbmZsYXRlUmF3U3luYyA9IGZ1bmN0aW9uIChidWZmZXIsIG9wdHMpIHtcclxuICByZXR1cm4gemxpYkJ1ZmZlclN5bmMobmV3IEluZmxhdGVSYXcob3B0cyksIGJ1ZmZlcik7XHJcbn07XHJcblxyXG5mdW5jdGlvbiB6bGliQnVmZmVyKGVuZ2luZSwgYnVmZmVyLCBjYWxsYmFjaykge1xyXG4gIHZhciBidWZmZXJzID0gW107XHJcbiAgdmFyIG5yZWFkID0gMDtcclxuXHJcbiAgZW5naW5lLm9uKCdlcnJvcicsIG9uRXJyb3IpO1xyXG4gIGVuZ2luZS5vbignZW5kJywgb25FbmQpO1xyXG5cclxuICBlbmdpbmUuZW5kKGJ1ZmZlcik7XHJcbiAgZmxvdygpO1xyXG5cclxuICBmdW5jdGlvbiBmbG93KCkge1xyXG4gICAgdmFyIGNodW5rO1xyXG4gICAgd2hpbGUgKG51bGwgIT09IChjaHVuayA9IGVuZ2luZS5yZWFkKCkpKSB7XHJcbiAgICAgIGJ1ZmZlcnMucHVzaChjaHVuayk7XHJcbiAgICAgIG5yZWFkICs9IGNodW5rLmxlbmd0aDtcclxuICAgIH1cclxuICAgIGVuZ2luZS5vbmNlKCdyZWFkYWJsZScsIGZsb3cpO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gb25FcnJvcihlcnIpIHtcclxuICAgIGVuZ2luZS5yZW1vdmVMaXN0ZW5lcignZW5kJywgb25FbmQpO1xyXG4gICAgZW5naW5lLnJlbW92ZUxpc3RlbmVyKCdyZWFkYWJsZScsIGZsb3cpO1xyXG4gICAgY2FsbGJhY2soZXJyKTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIG9uRW5kKCkge1xyXG4gICAgdmFyIGJ1ZjtcclxuICAgIHZhciBlcnIgPSBudWxsO1xyXG5cclxuICAgIGlmIChucmVhZCA+PSBrTWF4TGVuZ3RoKSB7XHJcbiAgICAgIGVyciA9IG5ldyBSYW5nZUVycm9yKGtSYW5nZUVycm9yTWVzc2FnZSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBidWYgPSBCdWZmZXIuY29uY2F0KGJ1ZmZlcnMsIG5yZWFkKTtcclxuICAgIH1cclxuXHJcbiAgICBidWZmZXJzID0gW107XHJcbiAgICBlbmdpbmUuY2xvc2UoKTtcclxuICAgIGNhbGxiYWNrKGVyciwgYnVmKTtcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHpsaWJCdWZmZXJTeW5jKGVuZ2luZSwgYnVmZmVyKSB7XHJcbiAgaWYgKHR5cGVvZiBidWZmZXIgPT09ICdzdHJpbmcnKSBidWZmZXIgPSBCdWZmZXIuZnJvbShidWZmZXIpO1xyXG5cclxuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihidWZmZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdOb3QgYSBzdHJpbmcgb3IgYnVmZmVyJyk7XHJcblxyXG4gIHZhciBmbHVzaEZsYWcgPSBlbmdpbmUuX2ZpbmlzaEZsdXNoRmxhZztcclxuXHJcbiAgcmV0dXJuIGVuZ2luZS5fcHJvY2Vzc0NodW5rKGJ1ZmZlciwgZmx1c2hGbGFnKTtcclxufVxyXG5cclxuLy8gZ2VuZXJpYyB6bGliXHJcbi8vIG1pbmltYWwgMi1ieXRlIGhlYWRlclxyXG5mdW5jdGlvbiBEZWZsYXRlKG9wdHMpIHtcclxuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgRGVmbGF0ZSkpIHJldHVybiBuZXcgRGVmbGF0ZShvcHRzKTtcclxuICBabGliLmNhbGwodGhpcywgb3B0cywgYmluZGluZy5ERUZMQVRFKTtcclxufVxyXG5cclxuZnVuY3Rpb24gSW5mbGF0ZShvcHRzKSB7XHJcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIEluZmxhdGUpKSByZXR1cm4gbmV3IEluZmxhdGUob3B0cyk7XHJcbiAgWmxpYi5jYWxsKHRoaXMsIG9wdHMsIGJpbmRpbmcuSU5GTEFURSk7XHJcbn1cclxuXHJcbi8vIGd6aXAgLSBiaWdnZXIgaGVhZGVyLCBzYW1lIGRlZmxhdGUgY29tcHJlc3Npb25cclxuZnVuY3Rpb24gR3ppcChvcHRzKSB7XHJcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIEd6aXApKSByZXR1cm4gbmV3IEd6aXAob3B0cyk7XHJcbiAgWmxpYi5jYWxsKHRoaXMsIG9wdHMsIGJpbmRpbmcuR1pJUCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIEd1bnppcChvcHRzKSB7XHJcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIEd1bnppcCkpIHJldHVybiBuZXcgR3VuemlwKG9wdHMpO1xyXG4gIFpsaWIuY2FsbCh0aGlzLCBvcHRzLCBiaW5kaW5nLkdVTlpJUCk7XHJcbn1cclxuXHJcbi8vIHJhdyAtIG5vIGhlYWRlclxyXG5mdW5jdGlvbiBEZWZsYXRlUmF3KG9wdHMpIHtcclxuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgRGVmbGF0ZVJhdykpIHJldHVybiBuZXcgRGVmbGF0ZVJhdyhvcHRzKTtcclxuICBabGliLmNhbGwodGhpcywgb3B0cywgYmluZGluZy5ERUZMQVRFUkFXKTtcclxufVxyXG5cclxuZnVuY3Rpb24gSW5mbGF0ZVJhdyhvcHRzKSB7XHJcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIEluZmxhdGVSYXcpKSByZXR1cm4gbmV3IEluZmxhdGVSYXcob3B0cyk7XHJcbiAgWmxpYi5jYWxsKHRoaXMsIG9wdHMsIGJpbmRpbmcuSU5GTEFURVJBVyk7XHJcbn1cclxuXHJcbi8vIGF1dG8tZGV0ZWN0IGhlYWRlci5cclxuZnVuY3Rpb24gVW56aXAob3B0cykge1xyXG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBVbnppcCkpIHJldHVybiBuZXcgVW56aXAob3B0cyk7XHJcbiAgWmxpYi5jYWxsKHRoaXMsIG9wdHMsIGJpbmRpbmcuVU5aSVApO1xyXG59XHJcblxyXG5mdW5jdGlvbiBpc1ZhbGlkRmx1c2hGbGFnKGZsYWcpIHtcclxuICByZXR1cm4gZmxhZyA9PT0gYmluZGluZy5aX05PX0ZMVVNIIHx8IGZsYWcgPT09IGJpbmRpbmcuWl9QQVJUSUFMX0ZMVVNIIHx8IGZsYWcgPT09IGJpbmRpbmcuWl9TWU5DX0ZMVVNIIHx8IGZsYWcgPT09IGJpbmRpbmcuWl9GVUxMX0ZMVVNIIHx8IGZsYWcgPT09IGJpbmRpbmcuWl9GSU5JU0ggfHwgZmxhZyA9PT0gYmluZGluZy5aX0JMT0NLO1xyXG59XHJcblxyXG4vLyB0aGUgWmxpYiBjbGFzcyB0aGV5IGFsbCBpbmhlcml0IGZyb21cclxuLy8gVGhpcyB0aGluZyBtYW5hZ2VzIHRoZSBxdWV1ZSBvZiByZXF1ZXN0cywgYW5kIHJldHVybnNcclxuLy8gdHJ1ZSBvciBmYWxzZSBpZiB0aGVyZSBpcyBhbnl0aGluZyBpbiB0aGUgcXVldWUgd2hlblxyXG4vLyB5b3UgY2FsbCB0aGUgLndyaXRlKCkgbWV0aG9kLlxyXG5cclxuZnVuY3Rpb24gWmxpYihvcHRzLCBtb2RlKSB7XHJcbiAgdmFyIF90aGlzID0gdGhpcztcclxuXHJcbiAgdGhpcy5fb3B0cyA9IG9wdHMgPSBvcHRzIHx8IHt9O1xyXG4gIHRoaXMuX2NodW5rU2l6ZSA9IG9wdHMuY2h1bmtTaXplIHx8IGV4cG9ydHMuWl9ERUZBVUxUX0NIVU5LO1xyXG5cclxuICBUcmFuc2Zvcm0uY2FsbCh0aGlzLCBvcHRzKTtcclxuXHJcbiAgaWYgKG9wdHMuZmx1c2ggJiYgIWlzVmFsaWRGbHVzaEZsYWcob3B0cy5mbHVzaCkpIHtcclxuICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBmbHVzaCBmbGFnOiAnICsgb3B0cy5mbHVzaCk7XHJcbiAgfVxyXG4gIGlmIChvcHRzLmZpbmlzaEZsdXNoICYmICFpc1ZhbGlkRmx1c2hGbGFnKG9wdHMuZmluaXNoRmx1c2gpKSB7XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgZmx1c2ggZmxhZzogJyArIG9wdHMuZmluaXNoRmx1c2gpO1xyXG4gIH1cclxuXHJcbiAgdGhpcy5fZmx1c2hGbGFnID0gb3B0cy5mbHVzaCB8fCBiaW5kaW5nLlpfTk9fRkxVU0g7XHJcbiAgdGhpcy5fZmluaXNoRmx1c2hGbGFnID0gdHlwZW9mIG9wdHMuZmluaXNoRmx1c2ggIT09ICd1bmRlZmluZWQnID8gb3B0cy5maW5pc2hGbHVzaCA6IGJpbmRpbmcuWl9GSU5JU0g7XHJcblxyXG4gIGlmIChvcHRzLmNodW5rU2l6ZSkge1xyXG4gICAgaWYgKG9wdHMuY2h1bmtTaXplIDwgZXhwb3J0cy5aX01JTl9DSFVOSyB8fCBvcHRzLmNodW5rU2l6ZSA+IGV4cG9ydHMuWl9NQVhfQ0hVTkspIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGNodW5rIHNpemU6ICcgKyBvcHRzLmNodW5rU2l6ZSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBpZiAob3B0cy53aW5kb3dCaXRzKSB7XHJcbiAgICBpZiAob3B0cy53aW5kb3dCaXRzIDwgZXhwb3J0cy5aX01JTl9XSU5ET1dCSVRTIHx8IG9wdHMud2luZG93Qml0cyA+IGV4cG9ydHMuWl9NQVhfV0lORE9XQklUUykge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgd2luZG93Qml0czogJyArIG9wdHMud2luZG93Qml0cyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBpZiAob3B0cy5sZXZlbCkge1xyXG4gICAgaWYgKG9wdHMubGV2ZWwgPCBleHBvcnRzLlpfTUlOX0xFVkVMIHx8IG9wdHMubGV2ZWwgPiBleHBvcnRzLlpfTUFYX0xFVkVMKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBjb21wcmVzc2lvbiBsZXZlbDogJyArIG9wdHMubGV2ZWwpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgaWYgKG9wdHMubWVtTGV2ZWwpIHtcclxuICAgIGlmIChvcHRzLm1lbUxldmVsIDwgZXhwb3J0cy5aX01JTl9NRU1MRVZFTCB8fCBvcHRzLm1lbUxldmVsID4gZXhwb3J0cy5aX01BWF9NRU1MRVZFTCkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgbWVtTGV2ZWw6ICcgKyBvcHRzLm1lbUxldmVsKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGlmIChvcHRzLnN0cmF0ZWd5KSB7XHJcbiAgICBpZiAob3B0cy5zdHJhdGVneSAhPSBleHBvcnRzLlpfRklMVEVSRUQgJiYgb3B0cy5zdHJhdGVneSAhPSBleHBvcnRzLlpfSFVGRk1BTl9PTkxZICYmIG9wdHMuc3RyYXRlZ3kgIT0gZXhwb3J0cy5aX1JMRSAmJiBvcHRzLnN0cmF0ZWd5ICE9IGV4cG9ydHMuWl9GSVhFRCAmJiBvcHRzLnN0cmF0ZWd5ICE9IGV4cG9ydHMuWl9ERUZBVUxUX1NUUkFURUdZKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBzdHJhdGVneTogJyArIG9wdHMuc3RyYXRlZ3kpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgaWYgKG9wdHMuZGljdGlvbmFyeSkge1xyXG4gICAgaWYgKCFCdWZmZXIuaXNCdWZmZXIob3B0cy5kaWN0aW9uYXJ5KSkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgZGljdGlvbmFyeTogaXQgc2hvdWxkIGJlIGEgQnVmZmVyIGluc3RhbmNlJyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICB0aGlzLl9oYW5kbGUgPSBuZXcgYmluZGluZy5abGliKG1vZGUpO1xyXG5cclxuICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgdGhpcy5faGFkRXJyb3IgPSBmYWxzZTtcclxuICB0aGlzLl9oYW5kbGUub25lcnJvciA9IGZ1bmN0aW9uIChtZXNzYWdlLCBlcnJubykge1xyXG4gICAgLy8gdGhlcmUgaXMgbm8gd2F5IHRvIGNsZWFubHkgcmVjb3Zlci5cclxuICAgIC8vIGNvbnRpbnVpbmcgb25seSBvYnNjdXJlcyBwcm9ibGVtcy5cclxuICAgIF9jbG9zZShzZWxmKTtcclxuICAgIHNlbGYuX2hhZEVycm9yID0gdHJ1ZTtcclxuXHJcbiAgICB2YXIgZXJyb3IgPSBuZXcgRXJyb3IobWVzc2FnZSk7XHJcbiAgICBlcnJvci5lcnJubyA9IGVycm5vO1xyXG4gICAgZXJyb3IuY29kZSA9IGV4cG9ydHMuY29kZXNbZXJybm9dO1xyXG4gICAgc2VsZi5lbWl0KCdlcnJvcicsIGVycm9yKTtcclxuICB9O1xyXG5cclxuICB2YXIgbGV2ZWwgPSBleHBvcnRzLlpfREVGQVVMVF9DT01QUkVTU0lPTjtcclxuICBpZiAodHlwZW9mIG9wdHMubGV2ZWwgPT09ICdudW1iZXInKSBsZXZlbCA9IG9wdHMubGV2ZWw7XHJcblxyXG4gIHZhciBzdHJhdGVneSA9IGV4cG9ydHMuWl9ERUZBVUxUX1NUUkFURUdZO1xyXG4gIGlmICh0eXBlb2Ygb3B0cy5zdHJhdGVneSA9PT0gJ251bWJlcicpIHN0cmF0ZWd5ID0gb3B0cy5zdHJhdGVneTtcclxuXHJcbiAgdGhpcy5faGFuZGxlLmluaXQob3B0cy53aW5kb3dCaXRzIHx8IGV4cG9ydHMuWl9ERUZBVUxUX1dJTkRPV0JJVFMsIGxldmVsLCBvcHRzLm1lbUxldmVsIHx8IGV4cG9ydHMuWl9ERUZBVUxUX01FTUxFVkVMLCBzdHJhdGVneSwgb3B0cy5kaWN0aW9uYXJ5KTtcclxuXHJcbiAgdGhpcy5fYnVmZmVyID0gQnVmZmVyLmFsbG9jVW5zYWZlKHRoaXMuX2NodW5rU2l6ZSk7XHJcbiAgdGhpcy5fb2Zmc2V0ID0gMDtcclxuICB0aGlzLl9sZXZlbCA9IGxldmVsO1xyXG4gIHRoaXMuX3N0cmF0ZWd5ID0gc3RyYXRlZ3k7XHJcblxyXG4gIHRoaXMub25jZSgnZW5kJywgdGhpcy5jbG9zZSk7XHJcblxyXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnX2Nsb3NlZCcsIHtcclxuICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICByZXR1cm4gIV90aGlzLl9oYW5kbGU7XHJcbiAgICB9LFxyXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxyXG4gICAgZW51bWVyYWJsZTogdHJ1ZVxyXG4gIH0pO1xyXG59XHJcblxyXG51dGlsLmluaGVyaXRzKFpsaWIsIFRyYW5zZm9ybSk7XHJcblxyXG5abGliLnByb3RvdHlwZS5wYXJhbXMgPSBmdW5jdGlvbiAobGV2ZWwsIHN0cmF0ZWd5LCBjYWxsYmFjaykge1xyXG4gIGlmIChsZXZlbCA8IGV4cG9ydHMuWl9NSU5fTEVWRUwgfHwgbGV2ZWwgPiBleHBvcnRzLlpfTUFYX0xFVkVMKSB7XHJcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW52YWxpZCBjb21wcmVzc2lvbiBsZXZlbDogJyArIGxldmVsKTtcclxuICB9XHJcbiAgaWYgKHN0cmF0ZWd5ICE9IGV4cG9ydHMuWl9GSUxURVJFRCAmJiBzdHJhdGVneSAhPSBleHBvcnRzLlpfSFVGRk1BTl9PTkxZICYmIHN0cmF0ZWd5ICE9IGV4cG9ydHMuWl9STEUgJiYgc3RyYXRlZ3kgIT0gZXhwb3J0cy5aX0ZJWEVEICYmIHN0cmF0ZWd5ICE9IGV4cG9ydHMuWl9ERUZBVUxUX1NUUkFURUdZKSB7XHJcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIHN0cmF0ZWd5OiAnICsgc3RyYXRlZ3kpO1xyXG4gIH1cclxuXHJcbiAgaWYgKHRoaXMuX2xldmVsICE9PSBsZXZlbCB8fCB0aGlzLl9zdHJhdGVneSAhPT0gc3RyYXRlZ3kpIHtcclxuICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgIHRoaXMuZmx1c2goYmluZGluZy5aX1NZTkNfRkxVU0gsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgYXNzZXJ0KHNlbGYuX2hhbmRsZSwgJ3psaWIgYmluZGluZyBjbG9zZWQnKTtcclxuICAgICAgc2VsZi5faGFuZGxlLnBhcmFtcyhsZXZlbCwgc3RyYXRlZ3kpO1xyXG4gICAgICBpZiAoIXNlbGYuX2hhZEVycm9yKSB7XHJcbiAgICAgICAgc2VsZi5fbGV2ZWwgPSBsZXZlbDtcclxuICAgICAgICBzZWxmLl9zdHJhdGVneSA9IHN0cmF0ZWd5O1xyXG4gICAgICAgIGlmIChjYWxsYmFjaykgY2FsbGJhY2soKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfSBlbHNlIHtcclxuICAgIHByb2Nlc3MubmV4dFRpY2soY2FsbGJhY2spO1xyXG4gIH1cclxufTtcclxuXHJcblpsaWIucHJvdG90eXBlLnJlc2V0ID0gZnVuY3Rpb24gKCkge1xyXG4gIGFzc2VydCh0aGlzLl9oYW5kbGUsICd6bGliIGJpbmRpbmcgY2xvc2VkJyk7XHJcbiAgcmV0dXJuIHRoaXMuX2hhbmRsZS5yZXNldCgpO1xyXG59O1xyXG5cclxuLy8gVGhpcyBpcyB0aGUgX2ZsdXNoIGZ1bmN0aW9uIGNhbGxlZCBieSB0aGUgdHJhbnNmb3JtIGNsYXNzLFxyXG4vLyBpbnRlcm5hbGx5LCB3aGVuIHRoZSBsYXN0IGNodW5rIGhhcyBiZWVuIHdyaXR0ZW4uXHJcblpsaWIucHJvdG90eXBlLl9mbHVzaCA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xyXG4gIHRoaXMuX3RyYW5zZm9ybShCdWZmZXIuYWxsb2MoMCksICcnLCBjYWxsYmFjayk7XHJcbn07XHJcblxyXG5abGliLnByb3RvdHlwZS5mbHVzaCA9IGZ1bmN0aW9uIChraW5kLCBjYWxsYmFjaykge1xyXG4gIHZhciBfdGhpczIgPSB0aGlzO1xyXG5cclxuICB2YXIgd3MgPSB0aGlzLl93cml0YWJsZVN0YXRlO1xyXG5cclxuICBpZiAodHlwZW9mIGtpbmQgPT09ICdmdW5jdGlvbicgfHwga2luZCA9PT0gdW5kZWZpbmVkICYmICFjYWxsYmFjaykge1xyXG4gICAgY2FsbGJhY2sgPSBraW5kO1xyXG4gICAga2luZCA9IGJpbmRpbmcuWl9GVUxMX0ZMVVNIO1xyXG4gIH1cclxuXHJcbiAgaWYgKHdzLmVuZGVkKSB7XHJcbiAgICBpZiAoY2FsbGJhY2spIHByb2Nlc3MubmV4dFRpY2soY2FsbGJhY2spO1xyXG4gIH0gZWxzZSBpZiAod3MuZW5kaW5nKSB7XHJcbiAgICBpZiAoY2FsbGJhY2spIHRoaXMub25jZSgnZW5kJywgY2FsbGJhY2spO1xyXG4gIH0gZWxzZSBpZiAod3MubmVlZERyYWluKSB7XHJcbiAgICBpZiAoY2FsbGJhY2spIHtcclxuICAgICAgdGhpcy5vbmNlKCdkcmFpbicsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gX3RoaXMyLmZsdXNoKGtpbmQsIGNhbGxiYWNrKTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfSBlbHNlIHtcclxuICAgIHRoaXMuX2ZsdXNoRmxhZyA9IGtpbmQ7XHJcbiAgICB0aGlzLndyaXRlKEJ1ZmZlci5hbGxvYygwKSwgJycsIGNhbGxiYWNrKTtcclxuICB9XHJcbn07XHJcblxyXG5abGliLnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xyXG4gIF9jbG9zZSh0aGlzLCBjYWxsYmFjayk7XHJcbiAgcHJvY2Vzcy5uZXh0VGljayhlbWl0Q2xvc2VOVCwgdGhpcyk7XHJcbn07XHJcblxyXG5mdW5jdGlvbiBfY2xvc2UoZW5naW5lLCBjYWxsYmFjaykge1xyXG4gIGlmIChjYWxsYmFjaykgcHJvY2Vzcy5uZXh0VGljayhjYWxsYmFjayk7XHJcblxyXG4gIC8vIENhbGxlciBtYXkgaW52b2tlIC5jbG9zZSBhZnRlciBhIHpsaWIgZXJyb3IgKHdoaWNoIHdpbGwgbnVsbCBfaGFuZGxlKS5cclxuICBpZiAoIWVuZ2luZS5faGFuZGxlKSByZXR1cm47XHJcblxyXG4gIGVuZ2luZS5faGFuZGxlLmNsb3NlKCk7XHJcbiAgZW5naW5lLl9oYW5kbGUgPSBudWxsO1xyXG59XHJcblxyXG5mdW5jdGlvbiBlbWl0Q2xvc2VOVChzZWxmKSB7XHJcbiAgc2VsZi5lbWl0KCdjbG9zZScpO1xyXG59XHJcblxyXG5abGliLnByb3RvdHlwZS5fdHJhbnNmb3JtID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZywgY2IpIHtcclxuICB2YXIgZmx1c2hGbGFnO1xyXG4gIHZhciB3cyA9IHRoaXMuX3dyaXRhYmxlU3RhdGU7XHJcbiAgdmFyIGVuZGluZyA9IHdzLmVuZGluZyB8fCB3cy5lbmRlZDtcclxuICB2YXIgbGFzdCA9IGVuZGluZyAmJiAoIWNodW5rIHx8IHdzLmxlbmd0aCA9PT0gY2h1bmsubGVuZ3RoKTtcclxuXHJcbiAgaWYgKGNodW5rICE9PSBudWxsICYmICFCdWZmZXIuaXNCdWZmZXIoY2h1bmspKSByZXR1cm4gY2IobmV3IEVycm9yKCdpbnZhbGlkIGlucHV0JykpO1xyXG5cclxuICBpZiAoIXRoaXMuX2hhbmRsZSkgcmV0dXJuIGNiKG5ldyBFcnJvcignemxpYiBiaW5kaW5nIGNsb3NlZCcpKTtcclxuXHJcbiAgLy8gSWYgaXQncyB0aGUgbGFzdCBjaHVuaywgb3IgYSBmaW5hbCBmbHVzaCwgd2UgdXNlIHRoZSBaX0ZJTklTSCBmbHVzaCBmbGFnXHJcbiAgLy8gKG9yIHdoYXRldmVyIGZsYWcgd2FzIHByb3ZpZGVkIHVzaW5nIG9wdHMuZmluaXNoRmx1c2gpLlxyXG4gIC8vIElmIGl0J3MgZXhwbGljaXRseSBmbHVzaGluZyBhdCBzb21lIG90aGVyIHRpbWUsIHRoZW4gd2UgdXNlXHJcbiAgLy8gWl9GVUxMX0ZMVVNILiBPdGhlcndpc2UsIHVzZSBaX05PX0ZMVVNIIGZvciBtYXhpbXVtIGNvbXByZXNzaW9uXHJcbiAgLy8gZ29vZG5lc3MuXHJcbiAgaWYgKGxhc3QpIGZsdXNoRmxhZyA9IHRoaXMuX2ZpbmlzaEZsdXNoRmxhZztlbHNlIHtcclxuICAgIGZsdXNoRmxhZyA9IHRoaXMuX2ZsdXNoRmxhZztcclxuICAgIC8vIG9uY2Ugd2UndmUgZmx1c2hlZCB0aGUgbGFzdCBvZiB0aGUgcXVldWUsIHN0b3AgZmx1c2hpbmcgYW5kXHJcbiAgICAvLyBnbyBiYWNrIHRvIHRoZSBub3JtYWwgYmVoYXZpb3IuXHJcbiAgICBpZiAoY2h1bmsubGVuZ3RoID49IHdzLmxlbmd0aCkge1xyXG4gICAgICB0aGlzLl9mbHVzaEZsYWcgPSB0aGlzLl9vcHRzLmZsdXNoIHx8IGJpbmRpbmcuWl9OT19GTFVTSDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHRoaXMuX3Byb2Nlc3NDaHVuayhjaHVuaywgZmx1c2hGbGFnLCBjYik7XHJcbn07XHJcblxyXG5abGliLnByb3RvdHlwZS5fcHJvY2Vzc0NodW5rID0gZnVuY3Rpb24gKGNodW5rLCBmbHVzaEZsYWcsIGNiKSB7XHJcbiAgdmFyIGF2YWlsSW5CZWZvcmUgPSBjaHVuayAmJiBjaHVuay5sZW5ndGg7XHJcbiAgdmFyIGF2YWlsT3V0QmVmb3JlID0gdGhpcy5fY2h1bmtTaXplIC0gdGhpcy5fb2Zmc2V0O1xyXG4gIHZhciBpbk9mZiA9IDA7XHJcblxyXG4gIHZhciBzZWxmID0gdGhpcztcclxuXHJcbiAgdmFyIGFzeW5jID0gdHlwZW9mIGNiID09PSAnZnVuY3Rpb24nO1xyXG5cclxuICBpZiAoIWFzeW5jKSB7XHJcbiAgICB2YXIgYnVmZmVycyA9IFtdO1xyXG4gICAgdmFyIG5yZWFkID0gMDtcclxuXHJcbiAgICB2YXIgZXJyb3I7XHJcbiAgICB0aGlzLm9uKCdlcnJvcicsIGZ1bmN0aW9uIChlcikge1xyXG4gICAgICBlcnJvciA9IGVyO1xyXG4gICAgfSk7XHJcblxyXG4gICAgYXNzZXJ0KHRoaXMuX2hhbmRsZSwgJ3psaWIgYmluZGluZyBjbG9zZWQnKTtcclxuICAgIGRvIHtcclxuICAgICAgdmFyIHJlcyA9IHRoaXMuX2hhbmRsZS53cml0ZVN5bmMoZmx1c2hGbGFnLCBjaHVuaywgLy8gaW5cclxuICAgICAgaW5PZmYsIC8vIGluX29mZlxyXG4gICAgICBhdmFpbEluQmVmb3JlLCAvLyBpbl9sZW5cclxuICAgICAgdGhpcy5fYnVmZmVyLCAvLyBvdXRcclxuICAgICAgdGhpcy5fb2Zmc2V0LCAvL291dF9vZmZcclxuICAgICAgYXZhaWxPdXRCZWZvcmUpOyAvLyBvdXRfbGVuXHJcbiAgICB9IHdoaWxlICghdGhpcy5faGFkRXJyb3IgJiYgY2FsbGJhY2socmVzWzBdLCByZXNbMV0pKTtcclxuXHJcbiAgICBpZiAodGhpcy5faGFkRXJyb3IpIHtcclxuICAgICAgdGhyb3cgZXJyb3I7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKG5yZWFkID49IGtNYXhMZW5ndGgpIHtcclxuICAgICAgX2Nsb3NlKHRoaXMpO1xyXG4gICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihrUmFuZ2VFcnJvck1lc3NhZ2UpO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciBidWYgPSBCdWZmZXIuY29uY2F0KGJ1ZmZlcnMsIG5yZWFkKTtcclxuICAgIF9jbG9zZSh0aGlzKTtcclxuXHJcbiAgICByZXR1cm4gYnVmO1xyXG4gIH1cclxuXHJcbiAgYXNzZXJ0KHRoaXMuX2hhbmRsZSwgJ3psaWIgYmluZGluZyBjbG9zZWQnKTtcclxuICB2YXIgcmVxID0gdGhpcy5faGFuZGxlLndyaXRlKGZsdXNoRmxhZywgY2h1bmssIC8vIGluXHJcbiAgaW5PZmYsIC8vIGluX29mZlxyXG4gIGF2YWlsSW5CZWZvcmUsIC8vIGluX2xlblxyXG4gIHRoaXMuX2J1ZmZlciwgLy8gb3V0XHJcbiAgdGhpcy5fb2Zmc2V0LCAvL291dF9vZmZcclxuICBhdmFpbE91dEJlZm9yZSk7IC8vIG91dF9sZW5cclxuXHJcbiAgcmVxLmJ1ZmZlciA9IGNodW5rO1xyXG4gIHJlcS5jYWxsYmFjayA9IGNhbGxiYWNrO1xyXG5cclxuICBmdW5jdGlvbiBjYWxsYmFjayhhdmFpbEluQWZ0ZXIsIGF2YWlsT3V0QWZ0ZXIpIHtcclxuICAgIC8vIFdoZW4gdGhlIGNhbGxiYWNrIGlzIHVzZWQgaW4gYW4gYXN5bmMgd3JpdGUsIHRoZSBjYWxsYmFjaydzXHJcbiAgICAvLyBjb250ZXh0IGlzIHRoZSBgcmVxYCBvYmplY3QgdGhhdCB3YXMgY3JlYXRlZC4gVGhlIHJlcSBvYmplY3RcclxuICAgIC8vIGlzID09PSB0aGlzLl9oYW5kbGUsIGFuZCB0aGF0J3Mgd2h5IGl0J3MgaW1wb3J0YW50IHRvIG51bGxcclxuICAgIC8vIG91dCB0aGUgdmFsdWVzIGFmdGVyIHRoZXkgYXJlIGRvbmUgYmVpbmcgdXNlZC4gYHRoaXMuX2hhbmRsZWBcclxuICAgIC8vIGNhbiBzdGF5IGluIG1lbW9yeSBsb25nZXIgdGhhbiB0aGUgY2FsbGJhY2sgYW5kIGJ1ZmZlciBhcmUgbmVlZGVkLlxyXG4gICAgaWYgKHRoaXMpIHtcclxuICAgICAgdGhpcy5idWZmZXIgPSBudWxsO1xyXG4gICAgICB0aGlzLmNhbGxiYWNrID0gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoc2VsZi5faGFkRXJyb3IpIHJldHVybjtcclxuXHJcbiAgICB2YXIgaGF2ZSA9IGF2YWlsT3V0QmVmb3JlIC0gYXZhaWxPdXRBZnRlcjtcclxuICAgIGFzc2VydChoYXZlID49IDAsICdoYXZlIHNob3VsZCBub3QgZ28gZG93bicpO1xyXG5cclxuICAgIGlmIChoYXZlID4gMCkge1xyXG4gICAgICB2YXIgb3V0ID0gc2VsZi5fYnVmZmVyLnNsaWNlKHNlbGYuX29mZnNldCwgc2VsZi5fb2Zmc2V0ICsgaGF2ZSk7XHJcbiAgICAgIHNlbGYuX29mZnNldCArPSBoYXZlO1xyXG4gICAgICAvLyBzZXJ2ZSBzb21lIG91dHB1dCB0byB0aGUgY29uc3VtZXIuXHJcbiAgICAgIGlmIChhc3luYykge1xyXG4gICAgICAgIHNlbGYucHVzaChvdXQpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGJ1ZmZlcnMucHVzaChvdXQpO1xyXG4gICAgICAgIG5yZWFkICs9IG91dC5sZW5ndGg7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBleGhhdXN0ZWQgdGhlIG91dHB1dCBidWZmZXIsIG9yIHVzZWQgYWxsIHRoZSBpbnB1dCBjcmVhdGUgYSBuZXcgb25lLlxyXG4gICAgaWYgKGF2YWlsT3V0QWZ0ZXIgPT09IDAgfHwgc2VsZi5fb2Zmc2V0ID49IHNlbGYuX2NodW5rU2l6ZSkge1xyXG4gICAgICBhdmFpbE91dEJlZm9yZSA9IHNlbGYuX2NodW5rU2l6ZTtcclxuICAgICAgc2VsZi5fb2Zmc2V0ID0gMDtcclxuICAgICAgc2VsZi5fYnVmZmVyID0gQnVmZmVyLmFsbG9jVW5zYWZlKHNlbGYuX2NodW5rU2l6ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGF2YWlsT3V0QWZ0ZXIgPT09IDApIHtcclxuICAgICAgLy8gTm90IGFjdHVhbGx5IGRvbmUuICBOZWVkIHRvIHJlcHJvY2Vzcy5cclxuICAgICAgLy8gQWxzbywgdXBkYXRlIHRoZSBhdmFpbEluQmVmb3JlIHRvIHRoZSBhdmFpbEluQWZ0ZXIgdmFsdWUsXHJcbiAgICAgIC8vIHNvIHRoYXQgaWYgd2UgaGF2ZSB0byBoaXQgaXQgYSB0aGlyZCAoZm91cnRoLCBldGMuKSB0aW1lLFxyXG4gICAgICAvLyBpdCdsbCBoYXZlIHRoZSBjb3JyZWN0IGJ5dGUgY291bnRzLlxyXG4gICAgICBpbk9mZiArPSBhdmFpbEluQmVmb3JlIC0gYXZhaWxJbkFmdGVyO1xyXG4gICAgICBhdmFpbEluQmVmb3JlID0gYXZhaWxJbkFmdGVyO1xyXG5cclxuICAgICAgaWYgKCFhc3luYykgcmV0dXJuIHRydWU7XHJcblxyXG4gICAgICB2YXIgbmV3UmVxID0gc2VsZi5faGFuZGxlLndyaXRlKGZsdXNoRmxhZywgY2h1bmssIGluT2ZmLCBhdmFpbEluQmVmb3JlLCBzZWxmLl9idWZmZXIsIHNlbGYuX29mZnNldCwgc2VsZi5fY2h1bmtTaXplKTtcclxuICAgICAgbmV3UmVxLmNhbGxiYWNrID0gY2FsbGJhY2s7IC8vIHRoaXMgc2FtZSBmdW5jdGlvblxyXG4gICAgICBuZXdSZXEuYnVmZmVyID0gY2h1bms7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoIWFzeW5jKSByZXR1cm4gZmFsc2U7XHJcblxyXG4gICAgLy8gZmluaXNoZWQgd2l0aCB0aGUgY2h1bmsuXHJcbiAgICBjYigpO1xyXG4gIH1cclxufTtcclxuXHJcbnV0aWwuaW5oZXJpdHMoRGVmbGF0ZSwgWmxpYik7XHJcbnV0aWwuaW5oZXJpdHMoSW5mbGF0ZSwgWmxpYik7XHJcbnV0aWwuaW5oZXJpdHMoR3ppcCwgWmxpYik7XHJcbnV0aWwuaW5oZXJpdHMoR3VuemlwLCBabGliKTtcclxudXRpbC5pbmhlcml0cyhEZWZsYXRlUmF3LCBabGliKTtcclxudXRpbC5pbmhlcml0cyhJbmZsYXRlUmF3LCBabGliKTtcclxudXRpbC5pbmhlcml0cyhVbnppcCwgWmxpYik7IiwiJ3VzZSBzdHJpY3QnXHJcblxyXG5leHBvcnRzLmJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoXHJcbmV4cG9ydHMudG9CeXRlQXJyYXkgPSB0b0J5dGVBcnJheVxyXG5leHBvcnRzLmZyb21CeXRlQXJyYXkgPSBmcm9tQnl0ZUFycmF5XHJcblxyXG52YXIgbG9va3VwID0gW11cclxudmFyIHJldkxvb2t1cCA9IFtdXHJcbnZhciBBcnIgPSB0eXBlb2YgVWludDhBcnJheSAhPT0gJ3VuZGVmaW5lZCcgPyBVaW50OEFycmF5IDogQXJyYXlcclxuXHJcbnZhciBjb2RlID0gJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky8nXHJcbmZvciAodmFyIGkgPSAwLCBsZW4gPSBjb2RlLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XHJcbiAgbG9va3VwW2ldID0gY29kZVtpXVxyXG4gIHJldkxvb2t1cFtjb2RlLmNoYXJDb2RlQXQoaSldID0gaVxyXG59XHJcblxyXG4vLyBTdXBwb3J0IGRlY29kaW5nIFVSTC1zYWZlIGJhc2U2NCBzdHJpbmdzLCBhcyBOb2RlLmpzIGRvZXMuXHJcbi8vIFNlZTogaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQmFzZTY0I1VSTF9hcHBsaWNhdGlvbnNcclxucmV2TG9va3VwWyctJy5jaGFyQ29kZUF0KDApXSA9IDYyXHJcbnJldkxvb2t1cFsnXycuY2hhckNvZGVBdCgwKV0gPSA2M1xyXG5cclxuZnVuY3Rpb24gZ2V0TGVucyAoYjY0KSB7XHJcbiAgdmFyIGxlbiA9IGI2NC5sZW5ndGhcclxuXHJcbiAgaWYgKGxlbiAlIDQgPiAwKSB7XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgc3RyaW5nLiBMZW5ndGggbXVzdCBiZSBhIG11bHRpcGxlIG9mIDQnKVxyXG4gIH1cclxuXHJcbiAgLy8gVHJpbSBvZmYgZXh0cmEgYnl0ZXMgYWZ0ZXIgcGxhY2Vob2xkZXIgYnl0ZXMgYXJlIGZvdW5kXHJcbiAgLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vYmVhdGdhbW1pdC9iYXNlNjQtanMvaXNzdWVzLzQyXHJcbiAgdmFyIHZhbGlkTGVuID0gYjY0LmluZGV4T2YoJz0nKVxyXG4gIGlmICh2YWxpZExlbiA9PT0gLTEpIHZhbGlkTGVuID0gbGVuXHJcblxyXG4gIHZhciBwbGFjZUhvbGRlcnNMZW4gPSB2YWxpZExlbiA9PT0gbGVuXHJcbiAgICA/IDBcclxuICAgIDogNCAtICh2YWxpZExlbiAlIDQpXHJcblxyXG4gIHJldHVybiBbdmFsaWRMZW4sIHBsYWNlSG9sZGVyc0xlbl1cclxufVxyXG5cclxuLy8gYmFzZTY0IGlzIDQvMyArIHVwIHRvIHR3byBjaGFyYWN0ZXJzIG9mIHRoZSBvcmlnaW5hbCBkYXRhXHJcbmZ1bmN0aW9uIGJ5dGVMZW5ndGggKGI2NCkge1xyXG4gIHZhciBsZW5zID0gZ2V0TGVucyhiNjQpXHJcbiAgdmFyIHZhbGlkTGVuID0gbGVuc1swXVxyXG4gIHZhciBwbGFjZUhvbGRlcnNMZW4gPSBsZW5zWzFdXHJcbiAgcmV0dXJuICgodmFsaWRMZW4gKyBwbGFjZUhvbGRlcnNMZW4pICogMyAvIDQpIC0gcGxhY2VIb2xkZXJzTGVuXHJcbn1cclxuXHJcbmZ1bmN0aW9uIF9ieXRlTGVuZ3RoIChiNjQsIHZhbGlkTGVuLCBwbGFjZUhvbGRlcnNMZW4pIHtcclxuICByZXR1cm4gKCh2YWxpZExlbiArIHBsYWNlSG9sZGVyc0xlbikgKiAzIC8gNCkgLSBwbGFjZUhvbGRlcnNMZW5cclxufVxyXG5cclxuZnVuY3Rpb24gdG9CeXRlQXJyYXkgKGI2NCkge1xyXG4gIHZhciB0bXBcclxuICB2YXIgbGVucyA9IGdldExlbnMoYjY0KVxyXG4gIHZhciB2YWxpZExlbiA9IGxlbnNbMF1cclxuICB2YXIgcGxhY2VIb2xkZXJzTGVuID0gbGVuc1sxXVxyXG5cclxuICB2YXIgYXJyID0gbmV3IEFycihfYnl0ZUxlbmd0aChiNjQsIHZhbGlkTGVuLCBwbGFjZUhvbGRlcnNMZW4pKVxyXG5cclxuICB2YXIgY3VyQnl0ZSA9IDBcclxuXHJcbiAgLy8gaWYgdGhlcmUgYXJlIHBsYWNlaG9sZGVycywgb25seSBnZXQgdXAgdG8gdGhlIGxhc3QgY29tcGxldGUgNCBjaGFyc1xyXG4gIHZhciBsZW4gPSBwbGFjZUhvbGRlcnNMZW4gPiAwXHJcbiAgICA/IHZhbGlkTGVuIC0gNFxyXG4gICAgOiB2YWxpZExlblxyXG5cclxuICB2YXIgaVxyXG4gIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gNCkge1xyXG4gICAgdG1wID1cclxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMTgpIHxcclxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldIDw8IDEyKSB8XHJcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDIpXSA8PCA2KSB8XHJcbiAgICAgIHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMyldXHJcbiAgICBhcnJbY3VyQnl0ZSsrXSA9ICh0bXAgPj4gMTYpICYgMHhGRlxyXG4gICAgYXJyW2N1ckJ5dGUrK10gPSAodG1wID4+IDgpICYgMHhGRlxyXG4gICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgJiAweEZGXHJcbiAgfVxyXG5cclxuICBpZiAocGxhY2VIb2xkZXJzTGVuID09PSAyKSB7XHJcbiAgICB0bXAgPVxyXG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAyKSB8XHJcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA+PiA0KVxyXG4gICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgJiAweEZGXHJcbiAgfVxyXG5cclxuICBpZiAocGxhY2VIb2xkZXJzTGVuID09PSAxKSB7XHJcbiAgICB0bXAgPVxyXG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAxMCkgfFxyXG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPDwgNCkgfFxyXG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAyKV0gPj4gMilcclxuICAgIGFycltjdXJCeXRlKytdID0gKHRtcCA+PiA4KSAmIDB4RkZcclxuICAgIGFycltjdXJCeXRlKytdID0gdG1wICYgMHhGRlxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIGFyclxyXG59XHJcblxyXG5mdW5jdGlvbiB0cmlwbGV0VG9CYXNlNjQgKG51bSkge1xyXG4gIHJldHVybiBsb29rdXBbbnVtID4+IDE4ICYgMHgzRl0gK1xyXG4gICAgbG9va3VwW251bSA+PiAxMiAmIDB4M0ZdICtcclxuICAgIGxvb2t1cFtudW0gPj4gNiAmIDB4M0ZdICtcclxuICAgIGxvb2t1cFtudW0gJiAweDNGXVxyXG59XHJcblxyXG5mdW5jdGlvbiBlbmNvZGVDaHVuayAodWludDgsIHN0YXJ0LCBlbmQpIHtcclxuICB2YXIgdG1wXHJcbiAgdmFyIG91dHB1dCA9IFtdXHJcbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpICs9IDMpIHtcclxuICAgIHRtcCA9XHJcbiAgICAgICgodWludDhbaV0gPDwgMTYpICYgMHhGRjAwMDApICtcclxuICAgICAgKCh1aW50OFtpICsgMV0gPDwgOCkgJiAweEZGMDApICtcclxuICAgICAgKHVpbnQ4W2kgKyAyXSAmIDB4RkYpXHJcbiAgICBvdXRwdXQucHVzaCh0cmlwbGV0VG9CYXNlNjQodG1wKSlcclxuICB9XHJcbiAgcmV0dXJuIG91dHB1dC5qb2luKCcnKVxyXG59XHJcblxyXG5mdW5jdGlvbiBmcm9tQnl0ZUFycmF5ICh1aW50OCkge1xyXG4gIHZhciB0bXBcclxuICB2YXIgbGVuID0gdWludDgubGVuZ3RoXHJcbiAgdmFyIGV4dHJhQnl0ZXMgPSBsZW4gJSAzIC8vIGlmIHdlIGhhdmUgMSBieXRlIGxlZnQsIHBhZCAyIGJ5dGVzXHJcbiAgdmFyIHBhcnRzID0gW11cclxuICB2YXIgbWF4Q2h1bmtMZW5ndGggPSAxNjM4MyAvLyBtdXN0IGJlIG11bHRpcGxlIG9mIDNcclxuXHJcbiAgLy8gZ28gdGhyb3VnaCB0aGUgYXJyYXkgZXZlcnkgdGhyZWUgYnl0ZXMsIHdlJ2xsIGRlYWwgd2l0aCB0cmFpbGluZyBzdHVmZiBsYXRlclxyXG4gIGZvciAodmFyIGkgPSAwLCBsZW4yID0gbGVuIC0gZXh0cmFCeXRlczsgaSA8IGxlbjI7IGkgKz0gbWF4Q2h1bmtMZW5ndGgpIHtcclxuICAgIHBhcnRzLnB1c2goZW5jb2RlQ2h1bmsoXHJcbiAgICAgIHVpbnQ4LCBpLCAoaSArIG1heENodW5rTGVuZ3RoKSA+IGxlbjIgPyBsZW4yIDogKGkgKyBtYXhDaHVua0xlbmd0aClcclxuICAgICkpXHJcbiAgfVxyXG5cclxuICAvLyBwYWQgdGhlIGVuZCB3aXRoIHplcm9zLCBidXQgbWFrZSBzdXJlIHRvIG5vdCBmb3JnZXQgdGhlIGV4dHJhIGJ5dGVzXHJcbiAgaWYgKGV4dHJhQnl0ZXMgPT09IDEpIHtcclxuICAgIHRtcCA9IHVpbnQ4W2xlbiAtIDFdXHJcbiAgICBwYXJ0cy5wdXNoKFxyXG4gICAgICBsb29rdXBbdG1wID4+IDJdICtcclxuICAgICAgbG9va3VwWyh0bXAgPDwgNCkgJiAweDNGXSArXHJcbiAgICAgICc9PSdcclxuICAgIClcclxuICB9IGVsc2UgaWYgKGV4dHJhQnl0ZXMgPT09IDIpIHtcclxuICAgIHRtcCA9ICh1aW50OFtsZW4gLSAyXSA8PCA4KSArIHVpbnQ4W2xlbiAtIDFdXHJcbiAgICBwYXJ0cy5wdXNoKFxyXG4gICAgICBsb29rdXBbdG1wID4+IDEwXSArXHJcbiAgICAgIGxvb2t1cFsodG1wID4+IDQpICYgMHgzRl0gK1xyXG4gICAgICBsb29rdXBbKHRtcCA8PCAyKSAmIDB4M0ZdICtcclxuICAgICAgJz0nXHJcbiAgICApXHJcbiAgfVxyXG5cclxuICByZXR1cm4gcGFydHMuam9pbignJylcclxufVxyXG4iLCJleHBvcnRzLnJlYWQgPSBmdW5jdGlvbiAoYnVmZmVyLCBvZmZzZXQsIGlzTEUsIG1MZW4sIG5CeXRlcykge1xyXG4gIHZhciBlLCBtXHJcbiAgdmFyIGVMZW4gPSAobkJ5dGVzICogOCkgLSBtTGVuIC0gMVxyXG4gIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxXHJcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxXHJcbiAgdmFyIG5CaXRzID0gLTdcclxuICB2YXIgaSA9IGlzTEUgPyAobkJ5dGVzIC0gMSkgOiAwXHJcbiAgdmFyIGQgPSBpc0xFID8gLTEgOiAxXHJcbiAgdmFyIHMgPSBidWZmZXJbb2Zmc2V0ICsgaV1cclxuXHJcbiAgaSArPSBkXHJcblxyXG4gIGUgPSBzICYgKCgxIDw8ICgtbkJpdHMpKSAtIDEpXHJcbiAgcyA+Pj0gKC1uQml0cylcclxuICBuQml0cyArPSBlTGVuXHJcbiAgZm9yICg7IG5CaXRzID4gMDsgZSA9IChlICogMjU2KSArIGJ1ZmZlcltvZmZzZXQgKyBpXSwgaSArPSBkLCBuQml0cyAtPSA4KSB7fVxyXG5cclxuICBtID0gZSAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxyXG4gIGUgPj49ICgtbkJpdHMpXHJcbiAgbkJpdHMgKz0gbUxlblxyXG4gIGZvciAoOyBuQml0cyA+IDA7IG0gPSAobSAqIDI1NikgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cclxuXHJcbiAgaWYgKGUgPT09IDApIHtcclxuICAgIGUgPSAxIC0gZUJpYXNcclxuICB9IGVsc2UgaWYgKGUgPT09IGVNYXgpIHtcclxuICAgIHJldHVybiBtID8gTmFOIDogKChzID8gLTEgOiAxKSAqIEluZmluaXR5KVxyXG4gIH0gZWxzZSB7XHJcbiAgICBtID0gbSArIE1hdGgucG93KDIsIG1MZW4pXHJcbiAgICBlID0gZSAtIGVCaWFzXHJcbiAgfVxyXG4gIHJldHVybiAocyA/IC0xIDogMSkgKiBtICogTWF0aC5wb3coMiwgZSAtIG1MZW4pXHJcbn1cclxuXHJcbmV4cG9ydHMud3JpdGUgPSBmdW5jdGlvbiAoYnVmZmVyLCB2YWx1ZSwgb2Zmc2V0LCBpc0xFLCBtTGVuLCBuQnl0ZXMpIHtcclxuICB2YXIgZSwgbSwgY1xyXG4gIHZhciBlTGVuID0gKG5CeXRlcyAqIDgpIC0gbUxlbiAtIDFcclxuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMVxyXG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMVxyXG4gIHZhciBydCA9IChtTGVuID09PSAyMyA/IE1hdGgucG93KDIsIC0yNCkgLSBNYXRoLnBvdygyLCAtNzcpIDogMClcclxuICB2YXIgaSA9IGlzTEUgPyAwIDogKG5CeXRlcyAtIDEpXHJcbiAgdmFyIGQgPSBpc0xFID8gMSA6IC0xXHJcbiAgdmFyIHMgPSB2YWx1ZSA8IDAgfHwgKHZhbHVlID09PSAwICYmIDEgLyB2YWx1ZSA8IDApID8gMSA6IDBcclxuXHJcbiAgdmFsdWUgPSBNYXRoLmFicyh2YWx1ZSlcclxuXHJcbiAgaWYgKGlzTmFOKHZhbHVlKSB8fCB2YWx1ZSA9PT0gSW5maW5pdHkpIHtcclxuICAgIG0gPSBpc05hTih2YWx1ZSkgPyAxIDogMFxyXG4gICAgZSA9IGVNYXhcclxuICB9IGVsc2Uge1xyXG4gICAgZSA9IE1hdGguZmxvb3IoTWF0aC5sb2codmFsdWUpIC8gTWF0aC5MTjIpXHJcbiAgICBpZiAodmFsdWUgKiAoYyA9IE1hdGgucG93KDIsIC1lKSkgPCAxKSB7XHJcbiAgICAgIGUtLVxyXG4gICAgICBjICo9IDJcclxuICAgIH1cclxuICAgIGlmIChlICsgZUJpYXMgPj0gMSkge1xyXG4gICAgICB2YWx1ZSArPSBydCAvIGNcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHZhbHVlICs9IHJ0ICogTWF0aC5wb3coMiwgMSAtIGVCaWFzKVxyXG4gICAgfVxyXG4gICAgaWYgKHZhbHVlICogYyA+PSAyKSB7XHJcbiAgICAgIGUrK1xyXG4gICAgICBjIC89IDJcclxuICAgIH1cclxuXHJcbiAgICBpZiAoZSArIGVCaWFzID49IGVNYXgpIHtcclxuICAgICAgbSA9IDBcclxuICAgICAgZSA9IGVNYXhcclxuICAgIH0gZWxzZSBpZiAoZSArIGVCaWFzID49IDEpIHtcclxuICAgICAgbSA9ICgodmFsdWUgKiBjKSAtIDEpICogTWF0aC5wb3coMiwgbUxlbilcclxuICAgICAgZSA9IGUgKyBlQmlhc1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgbSA9IHZhbHVlICogTWF0aC5wb3coMiwgZUJpYXMgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pXHJcbiAgICAgIGUgPSAwXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBmb3IgKDsgbUxlbiA+PSA4OyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBtICYgMHhmZiwgaSArPSBkLCBtIC89IDI1NiwgbUxlbiAtPSA4KSB7fVxyXG5cclxuICBlID0gKGUgPDwgbUxlbikgfCBtXHJcbiAgZUxlbiArPSBtTGVuXHJcbiAgZm9yICg7IGVMZW4gPiAwOyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBlICYgMHhmZiwgaSArPSBkLCBlIC89IDI1NiwgZUxlbiAtPSA4KSB7fVxyXG5cclxuICBidWZmZXJbb2Zmc2V0ICsgaSAtIGRdIHw9IHMgKiAxMjhcclxufVxyXG4iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cclxuLy9cclxuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcclxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxyXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcclxuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxyXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XHJcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxyXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcclxuLy9cclxuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcclxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXHJcbi8vXHJcbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1NcclxuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxyXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXHJcbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxyXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1JcclxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxyXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBTdHJlYW07XHJcblxyXG52YXIgRUUgPSByZXF1aXJlKCdldmVudHMnKS5FdmVudEVtaXR0ZXI7XHJcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XHJcblxyXG5pbmhlcml0cyhTdHJlYW0sIEVFKTtcclxuU3RyZWFtLlJlYWRhYmxlID0gcmVxdWlyZSgncmVhZGFibGUtc3RyZWFtL3JlYWRhYmxlLmpzJyk7XHJcblN0cmVhbS5Xcml0YWJsZSA9IHJlcXVpcmUoJ3JlYWRhYmxlLXN0cmVhbS93cml0YWJsZS5qcycpO1xyXG5TdHJlYW0uRHVwbGV4ID0gcmVxdWlyZSgncmVhZGFibGUtc3RyZWFtL2R1cGxleC5qcycpO1xyXG5TdHJlYW0uVHJhbnNmb3JtID0gcmVxdWlyZSgncmVhZGFibGUtc3RyZWFtL3RyYW5zZm9ybS5qcycpO1xyXG5TdHJlYW0uUGFzc1Rocm91Z2ggPSByZXF1aXJlKCdyZWFkYWJsZS1zdHJlYW0vcGFzc3Rocm91Z2guanMnKTtcclxuXHJcbi8vIEJhY2t3YXJkcy1jb21wYXQgd2l0aCBub2RlIDAuNC54XHJcblN0cmVhbS5TdHJlYW0gPSBTdHJlYW07XHJcblxyXG5cclxuXHJcbi8vIG9sZC1zdHlsZSBzdHJlYW1zLiAgTm90ZSB0aGF0IHRoZSBwaXBlIG1ldGhvZCAodGhlIG9ubHkgcmVsZXZhbnRcclxuLy8gcGFydCBvZiB0aGlzIGNsYXNzKSBpcyBvdmVycmlkZGVuIGluIHRoZSBSZWFkYWJsZSBjbGFzcy5cclxuXHJcbmZ1bmN0aW9uIFN0cmVhbSgpIHtcclxuICBFRS5jYWxsKHRoaXMpO1xyXG59XHJcblxyXG5TdHJlYW0ucHJvdG90eXBlLnBpcGUgPSBmdW5jdGlvbihkZXN0LCBvcHRpb25zKSB7XHJcbiAgdmFyIHNvdXJjZSA9IHRoaXM7XHJcblxyXG4gIGZ1bmN0aW9uIG9uZGF0YShjaHVuaykge1xyXG4gICAgaWYgKGRlc3Qud3JpdGFibGUpIHtcclxuICAgICAgaWYgKGZhbHNlID09PSBkZXN0LndyaXRlKGNodW5rKSAmJiBzb3VyY2UucGF1c2UpIHtcclxuICAgICAgICBzb3VyY2UucGF1c2UoKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc291cmNlLm9uKCdkYXRhJywgb25kYXRhKTtcclxuXHJcbiAgZnVuY3Rpb24gb25kcmFpbigpIHtcclxuICAgIGlmIChzb3VyY2UucmVhZGFibGUgJiYgc291cmNlLnJlc3VtZSkge1xyXG4gICAgICBzb3VyY2UucmVzdW1lKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBkZXN0Lm9uKCdkcmFpbicsIG9uZHJhaW4pO1xyXG5cclxuICAvLyBJZiB0aGUgJ2VuZCcgb3B0aW9uIGlzIG5vdCBzdXBwbGllZCwgZGVzdC5lbmQoKSB3aWxsIGJlIGNhbGxlZCB3aGVuXHJcbiAgLy8gc291cmNlIGdldHMgdGhlICdlbmQnIG9yICdjbG9zZScgZXZlbnRzLiAgT25seSBkZXN0LmVuZCgpIG9uY2UuXHJcbiAgaWYgKCFkZXN0Ll9pc1N0ZGlvICYmICghb3B0aW9ucyB8fCBvcHRpb25zLmVuZCAhPT0gZmFsc2UpKSB7XHJcbiAgICBzb3VyY2Uub24oJ2VuZCcsIG9uZW5kKTtcclxuICAgIHNvdXJjZS5vbignY2xvc2UnLCBvbmNsb3NlKTtcclxuICB9XHJcblxyXG4gIHZhciBkaWRPbkVuZCA9IGZhbHNlO1xyXG4gIGZ1bmN0aW9uIG9uZW5kKCkge1xyXG4gICAgaWYgKGRpZE9uRW5kKSByZXR1cm47XHJcbiAgICBkaWRPbkVuZCA9IHRydWU7XHJcblxyXG4gICAgZGVzdC5lbmQoKTtcclxuICB9XHJcblxyXG5cclxuICBmdW5jdGlvbiBvbmNsb3NlKCkge1xyXG4gICAgaWYgKGRpZE9uRW5kKSByZXR1cm47XHJcbiAgICBkaWRPbkVuZCA9IHRydWU7XHJcblxyXG4gICAgaWYgKHR5cGVvZiBkZXN0LmRlc3Ryb3kgPT09ICdmdW5jdGlvbicpIGRlc3QuZGVzdHJveSgpO1xyXG4gIH1cclxuXHJcbiAgLy8gZG9uJ3QgbGVhdmUgZGFuZ2xpbmcgcGlwZXMgd2hlbiB0aGVyZSBhcmUgZXJyb3JzLlxyXG4gIGZ1bmN0aW9uIG9uZXJyb3IoZXIpIHtcclxuICAgIGNsZWFudXAoKTtcclxuICAgIGlmIChFRS5saXN0ZW5lckNvdW50KHRoaXMsICdlcnJvcicpID09PSAwKSB7XHJcbiAgICAgIHRocm93IGVyOyAvLyBVbmhhbmRsZWQgc3RyZWFtIGVycm9yIGluIHBpcGUuXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzb3VyY2Uub24oJ2Vycm9yJywgb25lcnJvcik7XHJcbiAgZGVzdC5vbignZXJyb3InLCBvbmVycm9yKTtcclxuXHJcbiAgLy8gcmVtb3ZlIGFsbCB0aGUgZXZlbnQgbGlzdGVuZXJzIHRoYXQgd2VyZSBhZGRlZC5cclxuICBmdW5jdGlvbiBjbGVhbnVwKCkge1xyXG4gICAgc291cmNlLnJlbW92ZUxpc3RlbmVyKCdkYXRhJywgb25kYXRhKTtcclxuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2RyYWluJywgb25kcmFpbik7XHJcblxyXG4gICAgc291cmNlLnJlbW92ZUxpc3RlbmVyKCdlbmQnLCBvbmVuZCk7XHJcbiAgICBzb3VyY2UucmVtb3ZlTGlzdGVuZXIoJ2Nsb3NlJywgb25jbG9zZSk7XHJcblxyXG4gICAgc291cmNlLnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIG9uZXJyb3IpO1xyXG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignZXJyb3InLCBvbmVycm9yKTtcclxuXHJcbiAgICBzb3VyY2UucmVtb3ZlTGlzdGVuZXIoJ2VuZCcsIGNsZWFudXApO1xyXG4gICAgc291cmNlLnJlbW92ZUxpc3RlbmVyKCdjbG9zZScsIGNsZWFudXApO1xyXG5cclxuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2Nsb3NlJywgY2xlYW51cCk7XHJcbiAgfVxyXG5cclxuICBzb3VyY2Uub24oJ2VuZCcsIGNsZWFudXApO1xyXG4gIHNvdXJjZS5vbignY2xvc2UnLCBjbGVhbnVwKTtcclxuXHJcbiAgZGVzdC5vbignY2xvc2UnLCBjbGVhbnVwKTtcclxuXHJcbiAgZGVzdC5lbWl0KCdwaXBlJywgc291cmNlKTtcclxuXHJcbiAgLy8gQWxsb3cgZm9yIHVuaXgtbGlrZSB1c2FnZTogQS5waXBlKEIpLnBpcGUoQylcclxuICByZXR1cm4gZGVzdDtcclxufTtcclxuIiwiJ3VzZSBzdHJpY3QnO1xyXG5cclxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cclxuXHJcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlcjtcclxudmFyIHV0aWwgPSByZXF1aXJlKCd1dGlsJyk7XHJcblxyXG5mdW5jdGlvbiBjb3B5QnVmZmVyKHNyYywgdGFyZ2V0LCBvZmZzZXQpIHtcclxuICBzcmMuY29weSh0YXJnZXQsIG9mZnNldCk7XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xyXG4gIGZ1bmN0aW9uIEJ1ZmZlckxpc3QoKSB7XHJcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQnVmZmVyTGlzdCk7XHJcblxyXG4gICAgdGhpcy5oZWFkID0gbnVsbDtcclxuICAgIHRoaXMudGFpbCA9IG51bGw7XHJcbiAgICB0aGlzLmxlbmd0aCA9IDA7XHJcbiAgfVxyXG5cclxuICBCdWZmZXJMaXN0LnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24gcHVzaCh2KSB7XHJcbiAgICB2YXIgZW50cnkgPSB7IGRhdGE6IHYsIG5leHQ6IG51bGwgfTtcclxuICAgIGlmICh0aGlzLmxlbmd0aCA+IDApIHRoaXMudGFpbC5uZXh0ID0gZW50cnk7ZWxzZSB0aGlzLmhlYWQgPSBlbnRyeTtcclxuICAgIHRoaXMudGFpbCA9IGVudHJ5O1xyXG4gICAgKyt0aGlzLmxlbmd0aDtcclxuICB9O1xyXG5cclxuICBCdWZmZXJMaXN0LnByb3RvdHlwZS51bnNoaWZ0ID0gZnVuY3Rpb24gdW5zaGlmdCh2KSB7XHJcbiAgICB2YXIgZW50cnkgPSB7IGRhdGE6IHYsIG5leHQ6IHRoaXMuaGVhZCB9O1xyXG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSB0aGlzLnRhaWwgPSBlbnRyeTtcclxuICAgIHRoaXMuaGVhZCA9IGVudHJ5O1xyXG4gICAgKyt0aGlzLmxlbmd0aDtcclxuICB9O1xyXG5cclxuICBCdWZmZXJMaXN0LnByb3RvdHlwZS5zaGlmdCA9IGZ1bmN0aW9uIHNoaWZ0KCkge1xyXG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSByZXR1cm47XHJcbiAgICB2YXIgcmV0ID0gdGhpcy5oZWFkLmRhdGE7XHJcbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDEpIHRoaXMuaGVhZCA9IHRoaXMudGFpbCA9IG51bGw7ZWxzZSB0aGlzLmhlYWQgPSB0aGlzLmhlYWQubmV4dDtcclxuICAgIC0tdGhpcy5sZW5ndGg7XHJcbiAgICByZXR1cm4gcmV0O1xyXG4gIH07XHJcblxyXG4gIEJ1ZmZlckxpc3QucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gY2xlYXIoKSB7XHJcbiAgICB0aGlzLmhlYWQgPSB0aGlzLnRhaWwgPSBudWxsO1xyXG4gICAgdGhpcy5sZW5ndGggPSAwO1xyXG4gIH07XHJcblxyXG4gIEJ1ZmZlckxpc3QucHJvdG90eXBlLmpvaW4gPSBmdW5jdGlvbiBqb2luKHMpIHtcclxuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkgcmV0dXJuICcnO1xyXG4gICAgdmFyIHAgPSB0aGlzLmhlYWQ7XHJcbiAgICB2YXIgcmV0ID0gJycgKyBwLmRhdGE7XHJcbiAgICB3aGlsZSAocCA9IHAubmV4dCkge1xyXG4gICAgICByZXQgKz0gcyArIHAuZGF0YTtcclxuICAgIH1yZXR1cm4gcmV0O1xyXG4gIH07XHJcblxyXG4gIEJ1ZmZlckxpc3QucHJvdG90eXBlLmNvbmNhdCA9IGZ1bmN0aW9uIGNvbmNhdChuKSB7XHJcbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDApIHJldHVybiBCdWZmZXIuYWxsb2MoMCk7XHJcbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDEpIHJldHVybiB0aGlzLmhlYWQuZGF0YTtcclxuICAgIHZhciByZXQgPSBCdWZmZXIuYWxsb2NVbnNhZmUobiA+Pj4gMCk7XHJcbiAgICB2YXIgcCA9IHRoaXMuaGVhZDtcclxuICAgIHZhciBpID0gMDtcclxuICAgIHdoaWxlIChwKSB7XHJcbiAgICAgIGNvcHlCdWZmZXIocC5kYXRhLCByZXQsIGkpO1xyXG4gICAgICBpICs9IHAuZGF0YS5sZW5ndGg7XHJcbiAgICAgIHAgPSBwLm5leHQ7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmV0O1xyXG4gIH07XHJcblxyXG4gIHJldHVybiBCdWZmZXJMaXN0O1xyXG59KCk7XHJcblxyXG5pZiAodXRpbCAmJiB1dGlsLmluc3BlY3QgJiYgdXRpbC5pbnNwZWN0LmN1c3RvbSkge1xyXG4gIG1vZHVsZS5leHBvcnRzLnByb3RvdHlwZVt1dGlsLmluc3BlY3QuY3VzdG9tXSA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBvYmogPSB1dGlsLmluc3BlY3QoeyBsZW5ndGg6IHRoaXMubGVuZ3RoIH0pO1xyXG4gICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3IubmFtZSArICcgJyArIG9iajtcclxuICB9O1xyXG59IiwidmFyIHNjb3BlID0gKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgJiYgZ2xvYmFsKSB8fFxyXG4gICAgICAgICAgICAodHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgJiYgc2VsZikgfHxcclxuICAgICAgICAgICAgd2luZG93O1xyXG52YXIgYXBwbHkgPSBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHk7XHJcblxyXG4vLyBET00gQVBJcywgZm9yIGNvbXBsZXRlbmVzc1xyXG5cclxuZXhwb3J0cy5zZXRUaW1lb3V0ID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIG5ldyBUaW1lb3V0KGFwcGx5LmNhbGwoc2V0VGltZW91dCwgc2NvcGUsIGFyZ3VtZW50cyksIGNsZWFyVGltZW91dCk7XHJcbn07XHJcbmV4cG9ydHMuc2V0SW50ZXJ2YWwgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gbmV3IFRpbWVvdXQoYXBwbHkuY2FsbChzZXRJbnRlcnZhbCwgc2NvcGUsIGFyZ3VtZW50cyksIGNsZWFySW50ZXJ2YWwpO1xyXG59O1xyXG5leHBvcnRzLmNsZWFyVGltZW91dCA9XHJcbmV4cG9ydHMuY2xlYXJJbnRlcnZhbCA9IGZ1bmN0aW9uKHRpbWVvdXQpIHtcclxuICBpZiAodGltZW91dCkge1xyXG4gICAgdGltZW91dC5jbG9zZSgpO1xyXG4gIH1cclxufTtcclxuXHJcbmZ1bmN0aW9uIFRpbWVvdXQoaWQsIGNsZWFyRm4pIHtcclxuICB0aGlzLl9pZCA9IGlkO1xyXG4gIHRoaXMuX2NsZWFyRm4gPSBjbGVhckZuO1xyXG59XHJcblRpbWVvdXQucHJvdG90eXBlLnVucmVmID0gVGltZW91dC5wcm90b3R5cGUucmVmID0gZnVuY3Rpb24oKSB7fTtcclxuVGltZW91dC5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbigpIHtcclxuICB0aGlzLl9jbGVhckZuLmNhbGwoc2NvcGUsIHRoaXMuX2lkKTtcclxufTtcclxuXHJcbi8vIERvZXMgbm90IHN0YXJ0IHRoZSB0aW1lLCBqdXN0IHNldHMgdXAgdGhlIG1lbWJlcnMgbmVlZGVkLlxyXG5leHBvcnRzLmVucm9sbCA9IGZ1bmN0aW9uKGl0ZW0sIG1zZWNzKSB7XHJcbiAgY2xlYXJUaW1lb3V0KGl0ZW0uX2lkbGVUaW1lb3V0SWQpO1xyXG4gIGl0ZW0uX2lkbGVUaW1lb3V0ID0gbXNlY3M7XHJcbn07XHJcblxyXG5leHBvcnRzLnVuZW5yb2xsID0gZnVuY3Rpb24oaXRlbSkge1xyXG4gIGNsZWFyVGltZW91dChpdGVtLl9pZGxlVGltZW91dElkKTtcclxuICBpdGVtLl9pZGxlVGltZW91dCA9IC0xO1xyXG59O1xyXG5cclxuZXhwb3J0cy5fdW5yZWZBY3RpdmUgPSBleHBvcnRzLmFjdGl2ZSA9IGZ1bmN0aW9uKGl0ZW0pIHtcclxuICBjbGVhclRpbWVvdXQoaXRlbS5faWRsZVRpbWVvdXRJZCk7XHJcblxyXG4gIHZhciBtc2VjcyA9IGl0ZW0uX2lkbGVUaW1lb3V0O1xyXG4gIGlmIChtc2VjcyA+PSAwKSB7XHJcbiAgICBpdGVtLl9pZGxlVGltZW91dElkID0gc2V0VGltZW91dChmdW5jdGlvbiBvblRpbWVvdXQoKSB7XHJcbiAgICAgIGlmIChpdGVtLl9vblRpbWVvdXQpXHJcbiAgICAgICAgaXRlbS5fb25UaW1lb3V0KCk7XHJcbiAgICB9LCBtc2Vjcyk7XHJcbiAgfVxyXG59O1xyXG5cclxuLy8gc2V0aW1tZWRpYXRlIGF0dGFjaGVzIGl0c2VsZiB0byB0aGUgZ2xvYmFsIG9iamVjdFxyXG5yZXF1aXJlKFwic2V0aW1tZWRpYXRlXCIpO1xyXG4vLyBPbiBzb21lIGV4b3RpYyBlbnZpcm9ubWVudHMsIGl0J3Mgbm90IGNsZWFyIHdoaWNoIG9iamVjdCBgc2V0aW1tZWRpYXRlYCB3YXNcclxuLy8gYWJsZSB0byBpbnN0YWxsIG9udG8uICBTZWFyY2ggZWFjaCBwb3NzaWJpbGl0eSBpbiB0aGUgc2FtZSBvcmRlciBhcyB0aGVcclxuLy8gYHNldGltbWVkaWF0ZWAgbGlicmFyeS5cclxuZXhwb3J0cy5zZXRJbW1lZGlhdGUgPSAodHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgJiYgc2VsZi5zZXRJbW1lZGlhdGUpIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgJiYgZ2xvYmFsLnNldEltbWVkaWF0ZSkgfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAodGhpcyAmJiB0aGlzLnNldEltbWVkaWF0ZSk7XHJcbmV4cG9ydHMuY2xlYXJJbW1lZGlhdGUgPSAodHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgJiYgc2VsZi5jbGVhckltbWVkaWF0ZSkgfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICh0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiICYmIGdsb2JhbC5jbGVhckltbWVkaWF0ZSkgfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICh0aGlzICYmIHRoaXMuY2xlYXJJbW1lZGlhdGUpO1xyXG4iLCIoZnVuY3Rpb24gKGdsb2JhbCwgdW5kZWZpbmVkKSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuXHJcbiAgICBpZiAoZ2xvYmFsLnNldEltbWVkaWF0ZSkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgbmV4dEhhbmRsZSA9IDE7IC8vIFNwZWMgc2F5cyBncmVhdGVyIHRoYW4gemVyb1xyXG4gICAgdmFyIHRhc2tzQnlIYW5kbGUgPSB7fTtcclxuICAgIHZhciBjdXJyZW50bHlSdW5uaW5nQVRhc2sgPSBmYWxzZTtcclxuICAgIHZhciBkb2MgPSBnbG9iYWwuZG9jdW1lbnQ7XHJcbiAgICB2YXIgcmVnaXN0ZXJJbW1lZGlhdGU7XHJcblxyXG4gICAgZnVuY3Rpb24gc2V0SW1tZWRpYXRlKGNhbGxiYWNrKSB7XHJcbiAgICAgIC8vIENhbGxiYWNrIGNhbiBlaXRoZXIgYmUgYSBmdW5jdGlvbiBvciBhIHN0cmluZ1xyXG4gICAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgICBjYWxsYmFjayA9IG5ldyBGdW5jdGlvbihcIlwiICsgY2FsbGJhY2spO1xyXG4gICAgICB9XHJcbiAgICAgIC8vIENvcHkgZnVuY3Rpb24gYXJndW1lbnRzXHJcbiAgICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcclxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICBhcmdzW2ldID0gYXJndW1lbnRzW2kgKyAxXTtcclxuICAgICAgfVxyXG4gICAgICAvLyBTdG9yZSBhbmQgcmVnaXN0ZXIgdGhlIHRhc2tcclxuICAgICAgdmFyIHRhc2sgPSB7IGNhbGxiYWNrOiBjYWxsYmFjaywgYXJnczogYXJncyB9O1xyXG4gICAgICB0YXNrc0J5SGFuZGxlW25leHRIYW5kbGVdID0gdGFzaztcclxuICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUobmV4dEhhbmRsZSk7XHJcbiAgICAgIHJldHVybiBuZXh0SGFuZGxlKys7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gY2xlYXJJbW1lZGlhdGUoaGFuZGxlKSB7XHJcbiAgICAgICAgZGVsZXRlIHRhc2tzQnlIYW5kbGVbaGFuZGxlXTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBydW4odGFzaykge1xyXG4gICAgICAgIHZhciBjYWxsYmFjayA9IHRhc2suY2FsbGJhY2s7XHJcbiAgICAgICAgdmFyIGFyZ3MgPSB0YXNrLmFyZ3M7XHJcbiAgICAgICAgc3dpdGNoIChhcmdzLmxlbmd0aCkge1xyXG4gICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgY2FsbGJhY2soKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICBjYWxsYmFjayhhcmdzWzBdKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICBjYWxsYmFjayhhcmdzWzBdLCBhcmdzWzFdKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAzOlxyXG4gICAgICAgICAgICBjYWxsYmFjayhhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgY2FsbGJhY2suYXBwbHkodW5kZWZpbmVkLCBhcmdzKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHJ1bklmUHJlc2VudChoYW5kbGUpIHtcclxuICAgICAgICAvLyBGcm9tIHRoZSBzcGVjOiBcIldhaXQgdW50aWwgYW55IGludm9jYXRpb25zIG9mIHRoaXMgYWxnb3JpdGhtIHN0YXJ0ZWQgYmVmb3JlIHRoaXMgb25lIGhhdmUgY29tcGxldGVkLlwiXHJcbiAgICAgICAgLy8gU28gaWYgd2UncmUgY3VycmVudGx5IHJ1bm5pbmcgYSB0YXNrLCB3ZSdsbCBuZWVkIHRvIGRlbGF5IHRoaXMgaW52b2NhdGlvbi5cclxuICAgICAgICBpZiAoY3VycmVudGx5UnVubmluZ0FUYXNrKSB7XHJcbiAgICAgICAgICAgIC8vIERlbGF5IGJ5IGRvaW5nIGEgc2V0VGltZW91dC4gc2V0SW1tZWRpYXRlIHdhcyB0cmllZCBpbnN0ZWFkLCBidXQgaW4gRmlyZWZveCA3IGl0IGdlbmVyYXRlZCBhXHJcbiAgICAgICAgICAgIC8vIFwidG9vIG11Y2ggcmVjdXJzaW9uXCIgZXJyb3IuXHJcbiAgICAgICAgICAgIHNldFRpbWVvdXQocnVuSWZQcmVzZW50LCAwLCBoYW5kbGUpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHZhciB0YXNrID0gdGFza3NCeUhhbmRsZVtoYW5kbGVdO1xyXG4gICAgICAgICAgICBpZiAodGFzaykge1xyXG4gICAgICAgICAgICAgICAgY3VycmVudGx5UnVubmluZ0FUYXNrID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcnVuKHRhc2spO1xyXG4gICAgICAgICAgICAgICAgfSBmaW5hbGx5IHtcclxuICAgICAgICAgICAgICAgICAgICBjbGVhckltbWVkaWF0ZShoYW5kbGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRseVJ1bm5pbmdBVGFzayA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGluc3RhbGxOZXh0VGlja0ltcGxlbWVudGF0aW9uKCkge1xyXG4gICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XHJcbiAgICAgICAgICAgIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24gKCkgeyBydW5JZlByZXNlbnQoaGFuZGxlKTsgfSk7XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBjYW5Vc2VQb3N0TWVzc2FnZSgpIHtcclxuICAgICAgICAvLyBUaGUgdGVzdCBhZ2FpbnN0IGBpbXBvcnRTY3JpcHRzYCBwcmV2ZW50cyB0aGlzIGltcGxlbWVudGF0aW9uIGZyb20gYmVpbmcgaW5zdGFsbGVkIGluc2lkZSBhIHdlYiB3b3JrZXIsXHJcbiAgICAgICAgLy8gd2hlcmUgYGdsb2JhbC5wb3N0TWVzc2FnZWAgbWVhbnMgc29tZXRoaW5nIGNvbXBsZXRlbHkgZGlmZmVyZW50IGFuZCBjYW4ndCBiZSB1c2VkIGZvciB0aGlzIHB1cnBvc2UuXHJcbiAgICAgICAgaWYgKGdsb2JhbC5wb3N0TWVzc2FnZSAmJiAhZ2xvYmFsLmltcG9ydFNjcmlwdHMpIHtcclxuICAgICAgICAgICAgdmFyIHBvc3RNZXNzYWdlSXNBc3luY2hyb25vdXMgPSB0cnVlO1xyXG4gICAgICAgICAgICB2YXIgb2xkT25NZXNzYWdlID0gZ2xvYmFsLm9ubWVzc2FnZTtcclxuICAgICAgICAgICAgZ2xvYmFsLm9ubWVzc2FnZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgcG9zdE1lc3NhZ2VJc0FzeW5jaHJvbm91cyA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBnbG9iYWwucG9zdE1lc3NhZ2UoXCJcIiwgXCIqXCIpO1xyXG4gICAgICAgICAgICBnbG9iYWwub25tZXNzYWdlID0gb2xkT25NZXNzYWdlO1xyXG4gICAgICAgICAgICByZXR1cm4gcG9zdE1lc3NhZ2VJc0FzeW5jaHJvbm91cztcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gaW5zdGFsbFBvc3RNZXNzYWdlSW1wbGVtZW50YXRpb24oKSB7XHJcbiAgICAgICAgLy8gSW5zdGFsbHMgYW4gZXZlbnQgaGFuZGxlciBvbiBgZ2xvYmFsYCBmb3IgdGhlIGBtZXNzYWdlYCBldmVudDogc2VlXHJcbiAgICAgICAgLy8gKiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9ET00vd2luZG93LnBvc3RNZXNzYWdlXHJcbiAgICAgICAgLy8gKiBodHRwOi8vd3d3LndoYXR3Zy5vcmcvc3BlY3Mvd2ViLWFwcHMvY3VycmVudC13b3JrL211bHRpcGFnZS9jb21tcy5odG1sI2Nyb3NzRG9jdW1lbnRNZXNzYWdlc1xyXG5cclxuICAgICAgICB2YXIgbWVzc2FnZVByZWZpeCA9IFwic2V0SW1tZWRpYXRlJFwiICsgTWF0aC5yYW5kb20oKSArIFwiJFwiO1xyXG4gICAgICAgIHZhciBvbkdsb2JhbE1lc3NhZ2UgPSBmdW5jdGlvbihldmVudCkge1xyXG4gICAgICAgICAgICBpZiAoZXZlbnQuc291cmNlID09PSBnbG9iYWwgJiZcclxuICAgICAgICAgICAgICAgIHR5cGVvZiBldmVudC5kYXRhID09PSBcInN0cmluZ1wiICYmXHJcbiAgICAgICAgICAgICAgICBldmVudC5kYXRhLmluZGV4T2YobWVzc2FnZVByZWZpeCkgPT09IDApIHtcclxuICAgICAgICAgICAgICAgIHJ1bklmUHJlc2VudCgrZXZlbnQuZGF0YS5zbGljZShtZXNzYWdlUHJlZml4Lmxlbmd0aCkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgaWYgKGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKSB7XHJcbiAgICAgICAgICAgIGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLCBvbkdsb2JhbE1lc3NhZ2UsIGZhbHNlKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBnbG9iYWwuYXR0YWNoRXZlbnQoXCJvbm1lc3NhZ2VcIiwgb25HbG9iYWxNZXNzYWdlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XHJcbiAgICAgICAgICAgIGdsb2JhbC5wb3N0TWVzc2FnZShtZXNzYWdlUHJlZml4ICsgaGFuZGxlLCBcIipcIik7XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBpbnN0YWxsTWVzc2FnZUNoYW5uZWxJbXBsZW1lbnRhdGlvbigpIHtcclxuICAgICAgICB2YXIgY2hhbm5lbCA9IG5ldyBNZXNzYWdlQ2hhbm5lbCgpO1xyXG4gICAgICAgIGNoYW5uZWwucG9ydDEub25tZXNzYWdlID0gZnVuY3Rpb24oZXZlbnQpIHtcclxuICAgICAgICAgICAgdmFyIGhhbmRsZSA9IGV2ZW50LmRhdGE7XHJcbiAgICAgICAgICAgIHJ1bklmUHJlc2VudChoYW5kbGUpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XHJcbiAgICAgICAgICAgIGNoYW5uZWwucG9ydDIucG9zdE1lc3NhZ2UoaGFuZGxlKTtcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGluc3RhbGxSZWFkeVN0YXRlQ2hhbmdlSW1wbGVtZW50YXRpb24oKSB7XHJcbiAgICAgICAgdmFyIGh0bWwgPSBkb2MuZG9jdW1lbnRFbGVtZW50O1xyXG4gICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XHJcbiAgICAgICAgICAgIC8vIENyZWF0ZSBhIDxzY3JpcHQ+IGVsZW1lbnQ7IGl0cyByZWFkeXN0YXRlY2hhbmdlIGV2ZW50IHdpbGwgYmUgZmlyZWQgYXN5bmNocm9ub3VzbHkgb25jZSBpdCBpcyBpbnNlcnRlZFxyXG4gICAgICAgICAgICAvLyBpbnRvIHRoZSBkb2N1bWVudC4gRG8gc28sIHRodXMgcXVldWluZyB1cCB0aGUgdGFzay4gUmVtZW1iZXIgdG8gY2xlYW4gdXAgb25jZSBpdCdzIGJlZW4gY2FsbGVkLlxyXG4gICAgICAgICAgICB2YXIgc2NyaXB0ID0gZG9jLmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIik7XHJcbiAgICAgICAgICAgIHNjcmlwdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBydW5JZlByZXNlbnQoaGFuZGxlKTtcclxuICAgICAgICAgICAgICAgIHNjcmlwdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgaHRtbC5yZW1vdmVDaGlsZChzY3JpcHQpO1xyXG4gICAgICAgICAgICAgICAgc2NyaXB0ID0gbnVsbDtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgaHRtbC5hcHBlbmRDaGlsZChzY3JpcHQpO1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gaW5zdGFsbFNldFRpbWVvdXRJbXBsZW1lbnRhdGlvbigpIHtcclxuICAgICAgICByZWdpc3RlckltbWVkaWF0ZSA9IGZ1bmN0aW9uKGhhbmRsZSkge1xyXG4gICAgICAgICAgICBzZXRUaW1lb3V0KHJ1bklmUHJlc2VudCwgMCwgaGFuZGxlKTtcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIC8vIElmIHN1cHBvcnRlZCwgd2Ugc2hvdWxkIGF0dGFjaCB0byB0aGUgcHJvdG90eXBlIG9mIGdsb2JhbCwgc2luY2UgdGhhdCBpcyB3aGVyZSBzZXRUaW1lb3V0IGV0IGFsLiBsaXZlLlxyXG4gICAgdmFyIGF0dGFjaFRvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mICYmIE9iamVjdC5nZXRQcm90b3R5cGVPZihnbG9iYWwpO1xyXG4gICAgYXR0YWNoVG8gPSBhdHRhY2hUbyAmJiBhdHRhY2hUby5zZXRUaW1lb3V0ID8gYXR0YWNoVG8gOiBnbG9iYWw7XHJcblxyXG4gICAgLy8gRG9uJ3QgZ2V0IGZvb2xlZCBieSBlLmcuIGJyb3dzZXJpZnkgZW52aXJvbm1lbnRzLlxyXG4gICAgaWYgKHt9LnRvU3RyaW5nLmNhbGwoZ2xvYmFsLnByb2Nlc3MpID09PSBcIltvYmplY3QgcHJvY2Vzc11cIikge1xyXG4gICAgICAgIC8vIEZvciBOb2RlLmpzIGJlZm9yZSAwLjlcclxuICAgICAgICBpbnN0YWxsTmV4dFRpY2tJbXBsZW1lbnRhdGlvbigpO1xyXG5cclxuICAgIH0gZWxzZSBpZiAoY2FuVXNlUG9zdE1lc3NhZ2UoKSkge1xyXG4gICAgICAgIC8vIEZvciBub24tSUUxMCBtb2Rlcm4gYnJvd3NlcnNcclxuICAgICAgICBpbnN0YWxsUG9zdE1lc3NhZ2VJbXBsZW1lbnRhdGlvbigpO1xyXG5cclxuICAgIH0gZWxzZSBpZiAoZ2xvYmFsLk1lc3NhZ2VDaGFubmVsKSB7XHJcbiAgICAgICAgLy8gRm9yIHdlYiB3b3JrZXJzLCB3aGVyZSBzdXBwb3J0ZWRcclxuICAgICAgICBpbnN0YWxsTWVzc2FnZUNoYW5uZWxJbXBsZW1lbnRhdGlvbigpO1xyXG5cclxuICAgIH0gZWxzZSBpZiAoZG9jICYmIFwib25yZWFkeXN0YXRlY2hhbmdlXCIgaW4gZG9jLmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIikpIHtcclxuICAgICAgICAvLyBGb3IgSUUgNuKAkzhcclxuICAgICAgICBpbnN0YWxsUmVhZHlTdGF0ZUNoYW5nZUltcGxlbWVudGF0aW9uKCk7XHJcblxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICAvLyBGb3Igb2xkZXIgYnJvd3NlcnNcclxuICAgICAgICBpbnN0YWxsU2V0VGltZW91dEltcGxlbWVudGF0aW9uKCk7XHJcbiAgICB9XHJcblxyXG4gICAgYXR0YWNoVG8uc2V0SW1tZWRpYXRlID0gc2V0SW1tZWRpYXRlO1xyXG4gICAgYXR0YWNoVG8uY2xlYXJJbW1lZGlhdGUgPSBjbGVhckltbWVkaWF0ZTtcclxufSh0eXBlb2Ygc2VsZiA9PT0gXCJ1bmRlZmluZWRcIiA/IHR5cGVvZiBnbG9iYWwgPT09IFwidW5kZWZpbmVkXCIgPyB0aGlzIDogZ2xvYmFsIDogc2VsZikpO1xyXG4iLCJcclxuLyoqXHJcbiAqIE1vZHVsZSBleHBvcnRzLlxyXG4gKi9cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gZGVwcmVjYXRlO1xyXG5cclxuLyoqXHJcbiAqIE1hcmsgdGhhdCBhIG1ldGhvZCBzaG91bGQgbm90IGJlIHVzZWQuXHJcbiAqIFJldHVybnMgYSBtb2RpZmllZCBmdW5jdGlvbiB3aGljaCB3YXJucyBvbmNlIGJ5IGRlZmF1bHQuXHJcbiAqXHJcbiAqIElmIGBsb2NhbFN0b3JhZ2Uubm9EZXByZWNhdGlvbiA9IHRydWVgIGlzIHNldCwgdGhlbiBpdCBpcyBhIG5vLW9wLlxyXG4gKlxyXG4gKiBJZiBgbG9jYWxTdG9yYWdlLnRocm93RGVwcmVjYXRpb24gPSB0cnVlYCBpcyBzZXQsIHRoZW4gZGVwcmVjYXRlZCBmdW5jdGlvbnNcclxuICogd2lsbCB0aHJvdyBhbiBFcnJvciB3aGVuIGludm9rZWQuXHJcbiAqXHJcbiAqIElmIGBsb2NhbFN0b3JhZ2UudHJhY2VEZXByZWNhdGlvbiA9IHRydWVgIGlzIHNldCwgdGhlbiBkZXByZWNhdGVkIGZ1bmN0aW9uc1xyXG4gKiB3aWxsIGludm9rZSBgY29uc29sZS50cmFjZSgpYCBpbnN0ZWFkIG9mIGBjb25zb2xlLmVycm9yKClgLlxyXG4gKlxyXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiAtIHRoZSBmdW5jdGlvbiB0byBkZXByZWNhdGVcclxuICogQHBhcmFtIHtTdHJpbmd9IG1zZyAtIHRoZSBzdHJpbmcgdG8gcHJpbnQgdG8gdGhlIGNvbnNvbGUgd2hlbiBgZm5gIGlzIGludm9rZWRcclxuICogQHJldHVybnMge0Z1bmN0aW9ufSBhIG5ldyBcImRlcHJlY2F0ZWRcIiB2ZXJzaW9uIG9mIGBmbmBcclxuICogQGFwaSBwdWJsaWNcclxuICovXHJcblxyXG5mdW5jdGlvbiBkZXByZWNhdGUgKGZuLCBtc2cpIHtcclxuICBpZiAoY29uZmlnKCdub0RlcHJlY2F0aW9uJykpIHtcclxuICAgIHJldHVybiBmbjtcclxuICB9XHJcblxyXG4gIHZhciB3YXJuZWQgPSBmYWxzZTtcclxuICBmdW5jdGlvbiBkZXByZWNhdGVkKCkge1xyXG4gICAgaWYgKCF3YXJuZWQpIHtcclxuICAgICAgaWYgKGNvbmZpZygndGhyb3dEZXByZWNhdGlvbicpKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1zZyk7XHJcbiAgICAgIH0gZWxzZSBpZiAoY29uZmlnKCd0cmFjZURlcHJlY2F0aW9uJykpIHtcclxuICAgICAgICBjb25zb2xlLnRyYWNlKG1zZyk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY29uc29sZS53YXJuKG1zZyk7XHJcbiAgICAgIH1cclxuICAgICAgd2FybmVkID0gdHJ1ZTtcclxuICAgIH1cclxuICAgIHJldHVybiBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIGRlcHJlY2F0ZWQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDaGVja3MgYGxvY2FsU3RvcmFnZWAgZm9yIGJvb2xlYW4gdmFsdWVzIGZvciB0aGUgZ2l2ZW4gYG5hbWVgLlxyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZVxyXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn1cclxuICogQGFwaSBwcml2YXRlXHJcbiAqL1xyXG5cclxuZnVuY3Rpb24gY29uZmlnIChuYW1lKSB7XHJcbiAgLy8gYWNjZXNzaW5nIGdsb2JhbC5sb2NhbFN0b3JhZ2UgY2FuIHRyaWdnZXIgYSBET01FeGNlcHRpb24gaW4gc2FuZGJveGVkIGlmcmFtZXNcclxuICB0cnkge1xyXG4gICAgaWYgKCFnbG9iYWwubG9jYWxTdG9yYWdlKSByZXR1cm4gZmFsc2U7XHJcbiAgfSBjYXRjaCAoXykge1xyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH1cclxuICB2YXIgdmFsID0gZ2xvYmFsLmxvY2FsU3RvcmFnZVtuYW1lXTtcclxuICBpZiAobnVsbCA9PSB2YWwpIHJldHVybiBmYWxzZTtcclxuICByZXR1cm4gU3RyaW5nKHZhbCkudG9Mb3dlckNhc2UoKSA9PT0gJ3RydWUnO1xyXG59XHJcbiIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxyXG4vL1xyXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxyXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXHJcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xyXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXHJcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcclxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXHJcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxyXG4vL1xyXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxyXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cclxuLy9cclxuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xyXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXHJcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cclxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXHJcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxyXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXHJcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXHJcblxyXG4vLyBhIHBhc3N0aHJvdWdoIHN0cmVhbS5cclxuLy8gYmFzaWNhbGx5IGp1c3QgdGhlIG1vc3QgbWluaW1hbCBzb3J0IG9mIFRyYW5zZm9ybSBzdHJlYW0uXHJcbi8vIEV2ZXJ5IHdyaXR0ZW4gY2h1bmsgZ2V0cyBvdXRwdXQgYXMtaXMuXHJcblxyXG4ndXNlIHN0cmljdCc7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IFBhc3NUaHJvdWdoO1xyXG5cclxudmFyIFRyYW5zZm9ybSA9IHJlcXVpcmUoJy4vX3N0cmVhbV90cmFuc2Zvcm0nKTtcclxuXHJcbi8qPHJlcGxhY2VtZW50PiovXHJcbnZhciB1dGlsID0gcmVxdWlyZSgnY29yZS11dGlsLWlzJyk7XHJcbnV0aWwuaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xyXG4vKjwvcmVwbGFjZW1lbnQ+Ki9cclxuXHJcbnV0aWwuaW5oZXJpdHMoUGFzc1Rocm91Z2gsIFRyYW5zZm9ybSk7XHJcblxyXG5mdW5jdGlvbiBQYXNzVGhyb3VnaChvcHRpb25zKSB7XHJcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFBhc3NUaHJvdWdoKSkgcmV0dXJuIG5ldyBQYXNzVGhyb3VnaChvcHRpb25zKTtcclxuXHJcbiAgVHJhbnNmb3JtLmNhbGwodGhpcywgb3B0aW9ucyk7XHJcbn1cclxuXHJcblBhc3NUaHJvdWdoLnByb3RvdHlwZS5fdHJhbnNmb3JtID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZywgY2IpIHtcclxuICBjYihudWxsLCBjaHVuayk7XHJcbn07IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2xpYi9fc3RyZWFtX3dyaXRhYmxlLmpzJyk7XHJcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9saWIvX3N0cmVhbV9kdXBsZXguanMnKTtcclxuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL3JlYWRhYmxlJykuVHJhbnNmb3JtXHJcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9yZWFkYWJsZScpLlBhc3NUaHJvdWdoXHJcbiIsIid1c2Ugc3RyaWN0JztcclxuLyogZXNsaW50IGNhbWVsY2FzZTogXCJvZmZcIiAqL1xyXG5cclxudmFyIGFzc2VydCA9IHJlcXVpcmUoJ2Fzc2VydCcpO1xyXG5cclxudmFyIFpzdHJlYW0gPSByZXF1aXJlKCdwYWtvL2xpYi96bGliL3pzdHJlYW0nKTtcclxudmFyIHpsaWJfZGVmbGF0ZSA9IHJlcXVpcmUoJ3Bha28vbGliL3psaWIvZGVmbGF0ZS5qcycpO1xyXG52YXIgemxpYl9pbmZsYXRlID0gcmVxdWlyZSgncGFrby9saWIvemxpYi9pbmZsYXRlLmpzJyk7XHJcbnZhciBjb25zdGFudHMgPSByZXF1aXJlKCdwYWtvL2xpYi96bGliL2NvbnN0YW50cycpO1xyXG5cclxuZm9yICh2YXIga2V5IGluIGNvbnN0YW50cykge1xyXG4gIGV4cG9ydHNba2V5XSA9IGNvbnN0YW50c1trZXldO1xyXG59XHJcblxyXG4vLyB6bGliIG1vZGVzXHJcbmV4cG9ydHMuTk9ORSA9IDA7XHJcbmV4cG9ydHMuREVGTEFURSA9IDE7XHJcbmV4cG9ydHMuSU5GTEFURSA9IDI7XHJcbmV4cG9ydHMuR1pJUCA9IDM7XHJcbmV4cG9ydHMuR1VOWklQID0gNDtcclxuZXhwb3J0cy5ERUZMQVRFUkFXID0gNTtcclxuZXhwb3J0cy5JTkZMQVRFUkFXID0gNjtcclxuZXhwb3J0cy5VTlpJUCA9IDc7XHJcblxyXG52YXIgR1pJUF9IRUFERVJfSUQxID0gMHgxZjtcclxudmFyIEdaSVBfSEVBREVSX0lEMiA9IDB4OGI7XHJcblxyXG4vKipcclxuICogRW11bGF0ZSBOb2RlJ3MgemxpYiBDKysgbGF5ZXIgZm9yIHVzZSBieSB0aGUgSlMgbGF5ZXIgaW4gaW5kZXguanNcclxuICovXHJcbmZ1bmN0aW9uIFpsaWIobW9kZSkge1xyXG4gIGlmICh0eXBlb2YgbW9kZSAhPT0gJ251bWJlcicgfHwgbW9kZSA8IGV4cG9ydHMuREVGTEFURSB8fCBtb2RlID4gZXhwb3J0cy5VTlpJUCkge1xyXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQmFkIGFyZ3VtZW50Jyk7XHJcbiAgfVxyXG5cclxuICB0aGlzLmRpY3Rpb25hcnkgPSBudWxsO1xyXG4gIHRoaXMuZXJyID0gMDtcclxuICB0aGlzLmZsdXNoID0gMDtcclxuICB0aGlzLmluaXRfZG9uZSA9IGZhbHNlO1xyXG4gIHRoaXMubGV2ZWwgPSAwO1xyXG4gIHRoaXMubWVtTGV2ZWwgPSAwO1xyXG4gIHRoaXMubW9kZSA9IG1vZGU7XHJcbiAgdGhpcy5zdHJhdGVneSA9IDA7XHJcbiAgdGhpcy53aW5kb3dCaXRzID0gMDtcclxuICB0aGlzLndyaXRlX2luX3Byb2dyZXNzID0gZmFsc2U7XHJcbiAgdGhpcy5wZW5kaW5nX2Nsb3NlID0gZmFsc2U7XHJcbiAgdGhpcy5nemlwX2lkX2J5dGVzX3JlYWQgPSAwO1xyXG59XHJcblxyXG5abGliLnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uICgpIHtcclxuICBpZiAodGhpcy53cml0ZV9pbl9wcm9ncmVzcykge1xyXG4gICAgdGhpcy5wZW5kaW5nX2Nsb3NlID0gdHJ1ZTtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIHRoaXMucGVuZGluZ19jbG9zZSA9IGZhbHNlO1xyXG5cclxuICBhc3NlcnQodGhpcy5pbml0X2RvbmUsICdjbG9zZSBiZWZvcmUgaW5pdCcpO1xyXG4gIGFzc2VydCh0aGlzLm1vZGUgPD0gZXhwb3J0cy5VTlpJUCk7XHJcblxyXG4gIGlmICh0aGlzLm1vZGUgPT09IGV4cG9ydHMuREVGTEFURSB8fCB0aGlzLm1vZGUgPT09IGV4cG9ydHMuR1pJUCB8fCB0aGlzLm1vZGUgPT09IGV4cG9ydHMuREVGTEFURVJBVykge1xyXG4gICAgemxpYl9kZWZsYXRlLmRlZmxhdGVFbmQodGhpcy5zdHJtKTtcclxuICB9IGVsc2UgaWYgKHRoaXMubW9kZSA9PT0gZXhwb3J0cy5JTkZMQVRFIHx8IHRoaXMubW9kZSA9PT0gZXhwb3J0cy5HVU5aSVAgfHwgdGhpcy5tb2RlID09PSBleHBvcnRzLklORkxBVEVSQVcgfHwgdGhpcy5tb2RlID09PSBleHBvcnRzLlVOWklQKSB7XHJcbiAgICB6bGliX2luZmxhdGUuaW5mbGF0ZUVuZCh0aGlzLnN0cm0pO1xyXG4gIH1cclxuXHJcbiAgdGhpcy5tb2RlID0gZXhwb3J0cy5OT05FO1xyXG5cclxuICB0aGlzLmRpY3Rpb25hcnkgPSBudWxsO1xyXG59O1xyXG5cclxuWmxpYi5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbiAoZmx1c2gsIGlucHV0LCBpbl9vZmYsIGluX2xlbiwgb3V0LCBvdXRfb2ZmLCBvdXRfbGVuKSB7XHJcbiAgcmV0dXJuIHRoaXMuX3dyaXRlKHRydWUsIGZsdXNoLCBpbnB1dCwgaW5fb2ZmLCBpbl9sZW4sIG91dCwgb3V0X29mZiwgb3V0X2xlbik7XHJcbn07XHJcblxyXG5abGliLnByb3RvdHlwZS53cml0ZVN5bmMgPSBmdW5jdGlvbiAoZmx1c2gsIGlucHV0LCBpbl9vZmYsIGluX2xlbiwgb3V0LCBvdXRfb2ZmLCBvdXRfbGVuKSB7XHJcbiAgcmV0dXJuIHRoaXMuX3dyaXRlKGZhbHNlLCBmbHVzaCwgaW5wdXQsIGluX29mZiwgaW5fbGVuLCBvdXQsIG91dF9vZmYsIG91dF9sZW4pO1xyXG59O1xyXG5cclxuWmxpYi5wcm90b3R5cGUuX3dyaXRlID0gZnVuY3Rpb24gKGFzeW5jLCBmbHVzaCwgaW5wdXQsIGluX29mZiwgaW5fbGVuLCBvdXQsIG91dF9vZmYsIG91dF9sZW4pIHtcclxuICBhc3NlcnQuZXF1YWwoYXJndW1lbnRzLmxlbmd0aCwgOCk7XHJcblxyXG4gIGFzc2VydCh0aGlzLmluaXRfZG9uZSwgJ3dyaXRlIGJlZm9yZSBpbml0Jyk7XHJcbiAgYXNzZXJ0KHRoaXMubW9kZSAhPT0gZXhwb3J0cy5OT05FLCAnYWxyZWFkeSBmaW5hbGl6ZWQnKTtcclxuICBhc3NlcnQuZXF1YWwoZmFsc2UsIHRoaXMud3JpdGVfaW5fcHJvZ3Jlc3MsICd3cml0ZSBhbHJlYWR5IGluIHByb2dyZXNzJyk7XHJcbiAgYXNzZXJ0LmVxdWFsKGZhbHNlLCB0aGlzLnBlbmRpbmdfY2xvc2UsICdjbG9zZSBpcyBwZW5kaW5nJyk7XHJcblxyXG4gIHRoaXMud3JpdGVfaW5fcHJvZ3Jlc3MgPSB0cnVlO1xyXG5cclxuICBhc3NlcnQuZXF1YWwoZmFsc2UsIGZsdXNoID09PSB1bmRlZmluZWQsICdtdXN0IHByb3ZpZGUgZmx1c2ggdmFsdWUnKTtcclxuXHJcbiAgdGhpcy53cml0ZV9pbl9wcm9ncmVzcyA9IHRydWU7XHJcblxyXG4gIGlmIChmbHVzaCAhPT0gZXhwb3J0cy5aX05PX0ZMVVNIICYmIGZsdXNoICE9PSBleHBvcnRzLlpfUEFSVElBTF9GTFVTSCAmJiBmbHVzaCAhPT0gZXhwb3J0cy5aX1NZTkNfRkxVU0ggJiYgZmx1c2ggIT09IGV4cG9ydHMuWl9GVUxMX0ZMVVNIICYmIGZsdXNoICE9PSBleHBvcnRzLlpfRklOSVNIICYmIGZsdXNoICE9PSBleHBvcnRzLlpfQkxPQ0spIHtcclxuICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBmbHVzaCB2YWx1ZScpO1xyXG4gIH1cclxuXHJcbiAgaWYgKGlucHV0ID09IG51bGwpIHtcclxuICAgIGlucHV0ID0gQnVmZmVyLmFsbG9jKDApO1xyXG4gICAgaW5fbGVuID0gMDtcclxuICAgIGluX29mZiA9IDA7XHJcbiAgfVxyXG5cclxuICB0aGlzLnN0cm0uYXZhaWxfaW4gPSBpbl9sZW47XHJcbiAgdGhpcy5zdHJtLmlucHV0ID0gaW5wdXQ7XHJcbiAgdGhpcy5zdHJtLm5leHRfaW4gPSBpbl9vZmY7XHJcbiAgdGhpcy5zdHJtLmF2YWlsX291dCA9IG91dF9sZW47XHJcbiAgdGhpcy5zdHJtLm91dHB1dCA9IG91dDtcclxuICB0aGlzLnN0cm0ubmV4dF9vdXQgPSBvdXRfb2ZmO1xyXG4gIHRoaXMuZmx1c2ggPSBmbHVzaDtcclxuXHJcbiAgaWYgKCFhc3luYykge1xyXG4gICAgLy8gc3luYyB2ZXJzaW9uXHJcbiAgICB0aGlzLl9wcm9jZXNzKCk7XHJcblxyXG4gICAgaWYgKHRoaXMuX2NoZWNrRXJyb3IoKSkge1xyXG4gICAgICByZXR1cm4gdGhpcy5fYWZ0ZXJTeW5jKCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvLyBhc3luYyB2ZXJzaW9uXHJcbiAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24gKCkge1xyXG4gICAgc2VsZi5fcHJvY2VzcygpO1xyXG4gICAgc2VsZi5fYWZ0ZXIoKTtcclxuICB9KTtcclxuXHJcbiAgcmV0dXJuIHRoaXM7XHJcbn07XHJcblxyXG5abGliLnByb3RvdHlwZS5fYWZ0ZXJTeW5jID0gZnVuY3Rpb24gKCkge1xyXG4gIHZhciBhdmFpbF9vdXQgPSB0aGlzLnN0cm0uYXZhaWxfb3V0O1xyXG4gIHZhciBhdmFpbF9pbiA9IHRoaXMuc3RybS5hdmFpbF9pbjtcclxuXHJcbiAgdGhpcy53cml0ZV9pbl9wcm9ncmVzcyA9IGZhbHNlO1xyXG5cclxuICByZXR1cm4gW2F2YWlsX2luLCBhdmFpbF9vdXRdO1xyXG59O1xyXG5cclxuWmxpYi5wcm90b3R5cGUuX3Byb2Nlc3MgPSBmdW5jdGlvbiAoKSB7XHJcbiAgdmFyIG5leHRfZXhwZWN0ZWRfaGVhZGVyX2J5dGUgPSBudWxsO1xyXG5cclxuICAvLyBJZiB0aGUgYXZhaWxfb3V0IGlzIGxlZnQgYXQgMCwgdGhlbiBpdCBtZWFucyB0aGF0IGl0IHJhbiBvdXRcclxuICAvLyBvZiByb29tLiAgSWYgdGhlcmUgd2FzIGF2YWlsX291dCBsZWZ0IG92ZXIsIHRoZW4gaXQgbWVhbnNcclxuICAvLyB0aGF0IGFsbCBvZiB0aGUgaW5wdXQgd2FzIGNvbnN1bWVkLlxyXG4gIHN3aXRjaCAodGhpcy5tb2RlKSB7XHJcbiAgICBjYXNlIGV4cG9ydHMuREVGTEFURTpcclxuICAgIGNhc2UgZXhwb3J0cy5HWklQOlxyXG4gICAgY2FzZSBleHBvcnRzLkRFRkxBVEVSQVc6XHJcbiAgICAgIHRoaXMuZXJyID0gemxpYl9kZWZsYXRlLmRlZmxhdGUodGhpcy5zdHJtLCB0aGlzLmZsdXNoKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICBjYXNlIGV4cG9ydHMuVU5aSVA6XHJcbiAgICAgIGlmICh0aGlzLnN0cm0uYXZhaWxfaW4gPiAwKSB7XHJcbiAgICAgICAgbmV4dF9leHBlY3RlZF9oZWFkZXJfYnl0ZSA9IHRoaXMuc3RybS5uZXh0X2luO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBzd2l0Y2ggKHRoaXMuZ3ppcF9pZF9ieXRlc19yZWFkKSB7XHJcbiAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgaWYgKG5leHRfZXhwZWN0ZWRfaGVhZGVyX2J5dGUgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgaWYgKHRoaXMuc3RybS5pbnB1dFtuZXh0X2V4cGVjdGVkX2hlYWRlcl9ieXRlXSA9PT0gR1pJUF9IRUFERVJfSUQxKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZ3ppcF9pZF9ieXRlc19yZWFkID0gMTtcclxuICAgICAgICAgICAgbmV4dF9leHBlY3RlZF9oZWFkZXJfYnl0ZSsrO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuc3RybS5hdmFpbF9pbiA9PT0gMSkge1xyXG4gICAgICAgICAgICAgIC8vIFRoZSBvbmx5IGF2YWlsYWJsZSBieXRlIHdhcyBhbHJlYWR5IHJlYWQuXHJcbiAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMubW9kZSA9IGV4cG9ydHMuSU5GTEFURTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGZhbGx0aHJvdWdoXHJcbiAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgaWYgKG5leHRfZXhwZWN0ZWRfaGVhZGVyX2J5dGUgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgaWYgKHRoaXMuc3RybS5pbnB1dFtuZXh0X2V4cGVjdGVkX2hlYWRlcl9ieXRlXSA9PT0gR1pJUF9IRUFERVJfSUQyKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZ3ppcF9pZF9ieXRlc19yZWFkID0gMjtcclxuICAgICAgICAgICAgdGhpcy5tb2RlID0gZXhwb3J0cy5HVU5aSVA7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBUaGVyZSBpcyBubyBhY3R1YWwgZGlmZmVyZW5jZSBiZXR3ZWVuIElORkxBVEUgYW5kIElORkxBVEVSQVdcclxuICAgICAgICAgICAgLy8gKGFmdGVyIGluaXRpYWxpemF0aW9uKS5cclxuICAgICAgICAgICAgdGhpcy5tb2RlID0gZXhwb3J0cy5JTkZMQVRFO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgbnVtYmVyIG9mIGd6aXAgbWFnaWMgbnVtYmVyIGJ5dGVzIHJlYWQnKTtcclxuICAgICAgfVxyXG5cclxuICAgIC8vIGZhbGx0aHJvdWdoXHJcbiAgICBjYXNlIGV4cG9ydHMuSU5GTEFURTpcclxuICAgIGNhc2UgZXhwb3J0cy5HVU5aSVA6XHJcbiAgICBjYXNlIGV4cG9ydHMuSU5GTEFURVJBVzpcclxuICAgICAgdGhpcy5lcnIgPSB6bGliX2luZmxhdGUuaW5mbGF0ZSh0aGlzLnN0cm0sIHRoaXMuZmx1c2hcclxuXHJcbiAgICAgIC8vIElmIGRhdGEgd2FzIGVuY29kZWQgd2l0aCBkaWN0aW9uYXJ5XHJcbiAgICAgICk7aWYgKHRoaXMuZXJyID09PSBleHBvcnRzLlpfTkVFRF9ESUNUICYmIHRoaXMuZGljdGlvbmFyeSkge1xyXG4gICAgICAgIC8vIExvYWQgaXRcclxuICAgICAgICB0aGlzLmVyciA9IHpsaWJfaW5mbGF0ZS5pbmZsYXRlU2V0RGljdGlvbmFyeSh0aGlzLnN0cm0sIHRoaXMuZGljdGlvbmFyeSk7XHJcbiAgICAgICAgaWYgKHRoaXMuZXJyID09PSBleHBvcnRzLlpfT0spIHtcclxuICAgICAgICAgIC8vIEFuZCB0cnkgdG8gZGVjb2RlIGFnYWluXHJcbiAgICAgICAgICB0aGlzLmVyciA9IHpsaWJfaW5mbGF0ZS5pbmZsYXRlKHRoaXMuc3RybSwgdGhpcy5mbHVzaCk7XHJcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmVyciA9PT0gZXhwb3J0cy5aX0RBVEFfRVJST1IpIHtcclxuICAgICAgICAgIC8vIEJvdGggaW5mbGF0ZVNldERpY3Rpb25hcnkoKSBhbmQgaW5mbGF0ZSgpIHJldHVybiBaX0RBVEFfRVJST1IuXHJcbiAgICAgICAgICAvLyBNYWtlIGl0IHBvc3NpYmxlIGZvciBBZnRlcigpIHRvIHRlbGwgYSBiYWQgZGljdGlvbmFyeSBmcm9tIGJhZFxyXG4gICAgICAgICAgLy8gaW5wdXQuXHJcbiAgICAgICAgICB0aGlzLmVyciA9IGV4cG9ydHMuWl9ORUVEX0RJQ1Q7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIHdoaWxlICh0aGlzLnN0cm0uYXZhaWxfaW4gPiAwICYmIHRoaXMubW9kZSA9PT0gZXhwb3J0cy5HVU5aSVAgJiYgdGhpcy5lcnIgPT09IGV4cG9ydHMuWl9TVFJFQU1fRU5EICYmIHRoaXMuc3RybS5uZXh0X2luWzBdICE9PSAweDAwKSB7XHJcbiAgICAgICAgLy8gQnl0ZXMgcmVtYWluIGluIGlucHV0IGJ1ZmZlci4gUGVyaGFwcyB0aGlzIGlzIGFub3RoZXIgY29tcHJlc3NlZFxyXG4gICAgICAgIC8vIG1lbWJlciBpbiB0aGUgc2FtZSBhcmNoaXZlLCBvciBqdXN0IHRyYWlsaW5nIGdhcmJhZ2UuXHJcbiAgICAgICAgLy8gVHJhaWxpbmcgemVybyBieXRlcyBhcmUgb2theSwgdGhvdWdoLCBzaW5jZSB0aGV5IGFyZSBmcmVxdWVudGx5XHJcbiAgICAgICAgLy8gdXNlZCBmb3IgcGFkZGluZy5cclxuXHJcbiAgICAgICAgdGhpcy5yZXNldCgpO1xyXG4gICAgICAgIHRoaXMuZXJyID0gemxpYl9pbmZsYXRlLmluZmxhdGUodGhpcy5zdHJtLCB0aGlzLmZsdXNoKTtcclxuICAgICAgfVxyXG4gICAgICBicmVhaztcclxuICAgIGRlZmF1bHQ6XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biBtb2RlICcgKyB0aGlzLm1vZGUpO1xyXG4gIH1cclxufTtcclxuXHJcblpsaWIucHJvdG90eXBlLl9jaGVja0Vycm9yID0gZnVuY3Rpb24gKCkge1xyXG4gIC8vIEFjY2VwdGFibGUgZXJyb3Igc3RhdGVzIGRlcGVuZCBvbiB0aGUgdHlwZSBvZiB6bGliIHN0cmVhbS5cclxuICBzd2l0Y2ggKHRoaXMuZXJyKSB7XHJcbiAgICBjYXNlIGV4cG9ydHMuWl9PSzpcclxuICAgIGNhc2UgZXhwb3J0cy5aX0JVRl9FUlJPUjpcclxuICAgICAgaWYgKHRoaXMuc3RybS5hdmFpbF9vdXQgIT09IDAgJiYgdGhpcy5mbHVzaCA9PT0gZXhwb3J0cy5aX0ZJTklTSCkge1xyXG4gICAgICAgIHRoaXMuX2Vycm9yKCd1bmV4cGVjdGVkIGVuZCBvZiBmaWxlJyk7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICB9XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgY2FzZSBleHBvcnRzLlpfU1RSRUFNX0VORDpcclxuICAgICAgLy8gbm9ybWFsIHN0YXR1c2VzLCBub3QgZmF0YWxcclxuICAgICAgYnJlYWs7XHJcbiAgICBjYXNlIGV4cG9ydHMuWl9ORUVEX0RJQ1Q6XHJcbiAgICAgIGlmICh0aGlzLmRpY3Rpb25hcnkgPT0gbnVsbCkge1xyXG4gICAgICAgIHRoaXMuX2Vycm9yKCdNaXNzaW5nIGRpY3Rpb25hcnknKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB0aGlzLl9lcnJvcignQmFkIGRpY3Rpb25hcnknKTtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICBkZWZhdWx0OlxyXG4gICAgICAvLyBzb21ldGhpbmcgZWxzZS5cclxuICAgICAgdGhpcy5fZXJyb3IoJ1psaWIgZXJyb3InKTtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHRydWU7XHJcbn07XHJcblxyXG5abGliLnByb3RvdHlwZS5fYWZ0ZXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgaWYgKCF0aGlzLl9jaGVja0Vycm9yKCkpIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIHZhciBhdmFpbF9vdXQgPSB0aGlzLnN0cm0uYXZhaWxfb3V0O1xyXG4gIHZhciBhdmFpbF9pbiA9IHRoaXMuc3RybS5hdmFpbF9pbjtcclxuXHJcbiAgdGhpcy53cml0ZV9pbl9wcm9ncmVzcyA9IGZhbHNlO1xyXG5cclxuICAvLyBjYWxsIHRoZSB3cml0ZSgpIGNiXHJcbiAgdGhpcy5jYWxsYmFjayhhdmFpbF9pbiwgYXZhaWxfb3V0KTtcclxuXHJcbiAgaWYgKHRoaXMucGVuZGluZ19jbG9zZSkge1xyXG4gICAgdGhpcy5jbG9zZSgpO1xyXG4gIH1cclxufTtcclxuXHJcblpsaWIucHJvdG90eXBlLl9lcnJvciA9IGZ1bmN0aW9uIChtZXNzYWdlKSB7XHJcbiAgaWYgKHRoaXMuc3RybS5tc2cpIHtcclxuICAgIG1lc3NhZ2UgPSB0aGlzLnN0cm0ubXNnO1xyXG4gIH1cclxuICB0aGlzLm9uZXJyb3IobWVzc2FnZSwgdGhpcy5lcnJcclxuXHJcbiAgLy8gbm8gaG9wZSBvZiByZXNjdWUuXHJcbiAgKTt0aGlzLndyaXRlX2luX3Byb2dyZXNzID0gZmFsc2U7XHJcbiAgaWYgKHRoaXMucGVuZGluZ19jbG9zZSkge1xyXG4gICAgdGhpcy5jbG9zZSgpO1xyXG4gIH1cclxufTtcclxuXHJcblpsaWIucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAod2luZG93Qml0cywgbGV2ZWwsIG1lbUxldmVsLCBzdHJhdGVneSwgZGljdGlvbmFyeSkge1xyXG4gIGFzc2VydChhcmd1bWVudHMubGVuZ3RoID09PSA0IHx8IGFyZ3VtZW50cy5sZW5ndGggPT09IDUsICdpbml0KHdpbmRvd0JpdHMsIGxldmVsLCBtZW1MZXZlbCwgc3RyYXRlZ3ksIFtkaWN0aW9uYXJ5XSknKTtcclxuXHJcbiAgYXNzZXJ0KHdpbmRvd0JpdHMgPj0gOCAmJiB3aW5kb3dCaXRzIDw9IDE1LCAnaW52YWxpZCB3aW5kb3dCaXRzJyk7XHJcbiAgYXNzZXJ0KGxldmVsID49IC0xICYmIGxldmVsIDw9IDksICdpbnZhbGlkIGNvbXByZXNzaW9uIGxldmVsJyk7XHJcblxyXG4gIGFzc2VydChtZW1MZXZlbCA+PSAxICYmIG1lbUxldmVsIDw9IDksICdpbnZhbGlkIG1lbWxldmVsJyk7XHJcblxyXG4gIGFzc2VydChzdHJhdGVneSA9PT0gZXhwb3J0cy5aX0ZJTFRFUkVEIHx8IHN0cmF0ZWd5ID09PSBleHBvcnRzLlpfSFVGRk1BTl9PTkxZIHx8IHN0cmF0ZWd5ID09PSBleHBvcnRzLlpfUkxFIHx8IHN0cmF0ZWd5ID09PSBleHBvcnRzLlpfRklYRUQgfHwgc3RyYXRlZ3kgPT09IGV4cG9ydHMuWl9ERUZBVUxUX1NUUkFURUdZLCAnaW52YWxpZCBzdHJhdGVneScpO1xyXG5cclxuICB0aGlzLl9pbml0KGxldmVsLCB3aW5kb3dCaXRzLCBtZW1MZXZlbCwgc3RyYXRlZ3ksIGRpY3Rpb25hcnkpO1xyXG4gIHRoaXMuX3NldERpY3Rpb25hcnkoKTtcclxufTtcclxuXHJcblpsaWIucHJvdG90eXBlLnBhcmFtcyA9IGZ1bmN0aW9uICgpIHtcclxuICB0aHJvdyBuZXcgRXJyb3IoJ2RlZmxhdGVQYXJhbXMgTm90IHN1cHBvcnRlZCcpO1xyXG59O1xyXG5cclxuWmxpYi5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgdGhpcy5fcmVzZXQoKTtcclxuICB0aGlzLl9zZXREaWN0aW9uYXJ5KCk7XHJcbn07XHJcblxyXG5abGliLnByb3RvdHlwZS5faW5pdCA9IGZ1bmN0aW9uIChsZXZlbCwgd2luZG93Qml0cywgbWVtTGV2ZWwsIHN0cmF0ZWd5LCBkaWN0aW9uYXJ5KSB7XHJcbiAgdGhpcy5sZXZlbCA9IGxldmVsO1xyXG4gIHRoaXMud2luZG93Qml0cyA9IHdpbmRvd0JpdHM7XHJcbiAgdGhpcy5tZW1MZXZlbCA9IG1lbUxldmVsO1xyXG4gIHRoaXMuc3RyYXRlZ3kgPSBzdHJhdGVneTtcclxuXHJcbiAgdGhpcy5mbHVzaCA9IGV4cG9ydHMuWl9OT19GTFVTSDtcclxuXHJcbiAgdGhpcy5lcnIgPSBleHBvcnRzLlpfT0s7XHJcblxyXG4gIGlmICh0aGlzLm1vZGUgPT09IGV4cG9ydHMuR1pJUCB8fCB0aGlzLm1vZGUgPT09IGV4cG9ydHMuR1VOWklQKSB7XHJcbiAgICB0aGlzLndpbmRvd0JpdHMgKz0gMTY7XHJcbiAgfVxyXG5cclxuICBpZiAodGhpcy5tb2RlID09PSBleHBvcnRzLlVOWklQKSB7XHJcbiAgICB0aGlzLndpbmRvd0JpdHMgKz0gMzI7XHJcbiAgfVxyXG5cclxuICBpZiAodGhpcy5tb2RlID09PSBleHBvcnRzLkRFRkxBVEVSQVcgfHwgdGhpcy5tb2RlID09PSBleHBvcnRzLklORkxBVEVSQVcpIHtcclxuICAgIHRoaXMud2luZG93Qml0cyA9IC0xICogdGhpcy53aW5kb3dCaXRzO1xyXG4gIH1cclxuXHJcbiAgdGhpcy5zdHJtID0gbmV3IFpzdHJlYW0oKTtcclxuXHJcbiAgc3dpdGNoICh0aGlzLm1vZGUpIHtcclxuICAgIGNhc2UgZXhwb3J0cy5ERUZMQVRFOlxyXG4gICAgY2FzZSBleHBvcnRzLkdaSVA6XHJcbiAgICBjYXNlIGV4cG9ydHMuREVGTEFURVJBVzpcclxuICAgICAgdGhpcy5lcnIgPSB6bGliX2RlZmxhdGUuZGVmbGF0ZUluaXQyKHRoaXMuc3RybSwgdGhpcy5sZXZlbCwgZXhwb3J0cy5aX0RFRkxBVEVELCB0aGlzLndpbmRvd0JpdHMsIHRoaXMubWVtTGV2ZWwsIHRoaXMuc3RyYXRlZ3kpO1xyXG4gICAgICBicmVhaztcclxuICAgIGNhc2UgZXhwb3J0cy5JTkZMQVRFOlxyXG4gICAgY2FzZSBleHBvcnRzLkdVTlpJUDpcclxuICAgIGNhc2UgZXhwb3J0cy5JTkZMQVRFUkFXOlxyXG4gICAgY2FzZSBleHBvcnRzLlVOWklQOlxyXG4gICAgICB0aGlzLmVyciA9IHpsaWJfaW5mbGF0ZS5pbmZsYXRlSW5pdDIodGhpcy5zdHJtLCB0aGlzLndpbmRvd0JpdHMpO1xyXG4gICAgICBicmVhaztcclxuICAgIGRlZmF1bHQ6XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biBtb2RlICcgKyB0aGlzLm1vZGUpO1xyXG4gIH1cclxuXHJcbiAgaWYgKHRoaXMuZXJyICE9PSBleHBvcnRzLlpfT0spIHtcclxuICAgIHRoaXMuX2Vycm9yKCdJbml0IGVycm9yJyk7XHJcbiAgfVxyXG5cclxuICB0aGlzLmRpY3Rpb25hcnkgPSBkaWN0aW9uYXJ5O1xyXG5cclxuICB0aGlzLndyaXRlX2luX3Byb2dyZXNzID0gZmFsc2U7XHJcbiAgdGhpcy5pbml0X2RvbmUgPSB0cnVlO1xyXG59O1xyXG5cclxuWmxpYi5wcm90b3R5cGUuX3NldERpY3Rpb25hcnkgPSBmdW5jdGlvbiAoKSB7XHJcbiAgaWYgKHRoaXMuZGljdGlvbmFyeSA9PSBudWxsKSB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICB0aGlzLmVyciA9IGV4cG9ydHMuWl9PSztcclxuXHJcbiAgc3dpdGNoICh0aGlzLm1vZGUpIHtcclxuICAgIGNhc2UgZXhwb3J0cy5ERUZMQVRFOlxyXG4gICAgY2FzZSBleHBvcnRzLkRFRkxBVEVSQVc6XHJcbiAgICAgIHRoaXMuZXJyID0gemxpYl9kZWZsYXRlLmRlZmxhdGVTZXREaWN0aW9uYXJ5KHRoaXMuc3RybSwgdGhpcy5kaWN0aW9uYXJ5KTtcclxuICAgICAgYnJlYWs7XHJcbiAgICBkZWZhdWx0OlxyXG4gICAgICBicmVhaztcclxuICB9XHJcblxyXG4gIGlmICh0aGlzLmVyciAhPT0gZXhwb3J0cy5aX09LKSB7XHJcbiAgICB0aGlzLl9lcnJvcignRmFpbGVkIHRvIHNldCBkaWN0aW9uYXJ5Jyk7XHJcbiAgfVxyXG59O1xyXG5cclxuWmxpYi5wcm90b3R5cGUuX3Jlc2V0ID0gZnVuY3Rpb24gKCkge1xyXG4gIHRoaXMuZXJyID0gZXhwb3J0cy5aX09LO1xyXG5cclxuICBzd2l0Y2ggKHRoaXMubW9kZSkge1xyXG4gICAgY2FzZSBleHBvcnRzLkRFRkxBVEU6XHJcbiAgICBjYXNlIGV4cG9ydHMuREVGTEFURVJBVzpcclxuICAgIGNhc2UgZXhwb3J0cy5HWklQOlxyXG4gICAgICB0aGlzLmVyciA9IHpsaWJfZGVmbGF0ZS5kZWZsYXRlUmVzZXQodGhpcy5zdHJtKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICBjYXNlIGV4cG9ydHMuSU5GTEFURTpcclxuICAgIGNhc2UgZXhwb3J0cy5JTkZMQVRFUkFXOlxyXG4gICAgY2FzZSBleHBvcnRzLkdVTlpJUDpcclxuICAgICAgdGhpcy5lcnIgPSB6bGliX2luZmxhdGUuaW5mbGF0ZVJlc2V0KHRoaXMuc3RybSk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgZGVmYXVsdDpcclxuICAgICAgYnJlYWs7XHJcbiAgfVxyXG5cclxuICBpZiAodGhpcy5lcnIgIT09IGV4cG9ydHMuWl9PSykge1xyXG4gICAgdGhpcy5fZXJyb3IoJ0ZhaWxlZCB0byByZXNldCBzdHJlYW0nKTtcclxuICB9XHJcbn07XHJcblxyXG5leHBvcnRzLlpsaWIgPSBabGliOyIsIi8qXHJcbm9iamVjdC1hc3NpZ25cclxuKGMpIFNpbmRyZSBTb3JodXNcclxuQGxpY2Vuc2UgTUlUXHJcbiovXHJcblxyXG4ndXNlIHN0cmljdCc7XHJcbi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXHJcbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xyXG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xyXG52YXIgcHJvcElzRW51bWVyYWJsZSA9IE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGU7XHJcblxyXG5mdW5jdGlvbiB0b09iamVjdCh2YWwpIHtcclxuXHRpZiAodmFsID09PSBudWxsIHx8IHZhbCA9PT0gdW5kZWZpbmVkKSB7XHJcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdPYmplY3QuYXNzaWduIGNhbm5vdCBiZSBjYWxsZWQgd2l0aCBudWxsIG9yIHVuZGVmaW5lZCcpO1xyXG5cdH1cclxuXHJcblx0cmV0dXJuIE9iamVjdCh2YWwpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBzaG91bGRVc2VOYXRpdmUoKSB7XHJcblx0dHJ5IHtcclxuXHRcdGlmICghT2JqZWN0LmFzc2lnbikge1xyXG5cdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gRGV0ZWN0IGJ1Z2d5IHByb3BlcnR5IGVudW1lcmF0aW9uIG9yZGVyIGluIG9sZGVyIFY4IHZlcnNpb25zLlxyXG5cclxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTQxMThcclxuXHRcdHZhciB0ZXN0MSA9IG5ldyBTdHJpbmcoJ2FiYycpOyAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXctd3JhcHBlcnNcclxuXHRcdHRlc3QxWzVdID0gJ2RlJztcclxuXHRcdGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MSlbMF0gPT09ICc1Jykge1xyXG5cdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxyXG5cdFx0dmFyIHRlc3QyID0ge307XHJcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IDEwOyBpKyspIHtcclxuXHRcdFx0dGVzdDJbJ18nICsgU3RyaW5nLmZyb21DaGFyQ29kZShpKV0gPSBpO1xyXG5cdFx0fVxyXG5cdFx0dmFyIG9yZGVyMiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QyKS5tYXAoZnVuY3Rpb24gKG4pIHtcclxuXHRcdFx0cmV0dXJuIHRlc3QyW25dO1xyXG5cdFx0fSk7XHJcblx0XHRpZiAob3JkZXIyLmpvaW4oJycpICE9PSAnMDEyMzQ1Njc4OScpIHtcclxuXHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcclxuXHRcdHZhciB0ZXN0MyA9IHt9O1xyXG5cdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jy5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAobGV0dGVyKSB7XHJcblx0XHRcdHRlc3QzW2xldHRlcl0gPSBsZXR0ZXI7XHJcblx0XHR9KTtcclxuXHRcdGlmIChPYmplY3Qua2V5cyhPYmplY3QuYXNzaWduKHt9LCB0ZXN0MykpLmpvaW4oJycpICE9PVxyXG5cdFx0XHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcpIHtcclxuXHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0cnVlO1xyXG5cdH0gY2F0Y2ggKGVycikge1xyXG5cdFx0Ly8gV2UgZG9uJ3QgZXhwZWN0IGFueSBvZiB0aGUgYWJvdmUgdG8gdGhyb3csIGJ1dCBiZXR0ZXIgdG8gYmUgc2FmZS5cclxuXHRcdHJldHVybiBmYWxzZTtcclxuXHR9XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gc2hvdWxkVXNlTmF0aXZlKCkgPyBPYmplY3QuYXNzaWduIDogZnVuY3Rpb24gKHRhcmdldCwgc291cmNlKSB7XHJcblx0dmFyIGZyb207XHJcblx0dmFyIHRvID0gdG9PYmplY3QodGFyZ2V0KTtcclxuXHR2YXIgc3ltYm9scztcclxuXHJcblx0Zm9yICh2YXIgcyA9IDE7IHMgPCBhcmd1bWVudHMubGVuZ3RoOyBzKyspIHtcclxuXHRcdGZyb20gPSBPYmplY3QoYXJndW1lbnRzW3NdKTtcclxuXHJcblx0XHRmb3IgKHZhciBrZXkgaW4gZnJvbSkge1xyXG5cdFx0XHRpZiAoaGFzT3duUHJvcGVydHkuY2FsbChmcm9tLCBrZXkpKSB7XHJcblx0XHRcdFx0dG9ba2V5XSA9IGZyb21ba2V5XTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdGlmIChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcclxuXHRcdFx0c3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9scyhmcm9tKTtcclxuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzeW1ib2xzLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdFx0aWYgKHByb3BJc0VudW1lcmFibGUuY2FsbChmcm9tLCBzeW1ib2xzW2ldKSkge1xyXG5cdFx0XHRcdFx0dG9bc3ltYm9sc1tpXV0gPSBmcm9tW3N5bWJvbHNbaV1dO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0cmV0dXJuIHRvO1xyXG59O1xyXG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQnVmZmVyKGFyZykge1xyXG4gIHJldHVybiBhcmcgJiYgdHlwZW9mIGFyZyA9PT0gJ29iamVjdCdcclxuICAgICYmIHR5cGVvZiBhcmcuY29weSA9PT0gJ2Z1bmN0aW9uJ1xyXG4gICAgJiYgdHlwZW9mIGFyZy5maWxsID09PSAnZnVuY3Rpb24nXHJcbiAgICAmJiB0eXBlb2YgYXJnLnJlYWRVSW50OCA9PT0gJ2Z1bmN0aW9uJztcclxufSIsIid1c2Ugc3RyaWN0JztcclxuXHJcbi8vIChDKSAxOTk1LTIwMTMgSmVhbi1sb3VwIEdhaWxseSBhbmQgTWFyayBBZGxlclxyXG4vLyAoQykgMjAxNC0yMDE3IFZpdGFseSBQdXpyaW4gYW5kIEFuZHJleSBUdXBpdHNpblxyXG4vL1xyXG4vLyBUaGlzIHNvZnR3YXJlIGlzIHByb3ZpZGVkICdhcy1pcycsIHdpdGhvdXQgYW55IGV4cHJlc3Mgb3IgaW1wbGllZFxyXG4vLyB3YXJyYW50eS4gSW4gbm8gZXZlbnQgd2lsbCB0aGUgYXV0aG9ycyBiZSBoZWxkIGxpYWJsZSBmb3IgYW55IGRhbWFnZXNcclxuLy8gYXJpc2luZyBmcm9tIHRoZSB1c2Ugb2YgdGhpcyBzb2Z0d2FyZS5cclxuLy9cclxuLy8gUGVybWlzc2lvbiBpcyBncmFudGVkIHRvIGFueW9uZSB0byB1c2UgdGhpcyBzb2Z0d2FyZSBmb3IgYW55IHB1cnBvc2UsXHJcbi8vIGluY2x1ZGluZyBjb21tZXJjaWFsIGFwcGxpY2F0aW9ucywgYW5kIHRvIGFsdGVyIGl0IGFuZCByZWRpc3RyaWJ1dGUgaXRcclxuLy8gZnJlZWx5LCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgcmVzdHJpY3Rpb25zOlxyXG4vL1xyXG4vLyAxLiBUaGUgb3JpZ2luIG9mIHRoaXMgc29mdHdhcmUgbXVzdCBub3QgYmUgbWlzcmVwcmVzZW50ZWQ7IHlvdSBtdXN0IG5vdFxyXG4vLyAgIGNsYWltIHRoYXQgeW91IHdyb3RlIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS4gSWYgeW91IHVzZSB0aGlzIHNvZnR3YXJlXHJcbi8vICAgaW4gYSBwcm9kdWN0LCBhbiBhY2tub3dsZWRnbWVudCBpbiB0aGUgcHJvZHVjdCBkb2N1bWVudGF0aW9uIHdvdWxkIGJlXHJcbi8vICAgYXBwcmVjaWF0ZWQgYnV0IGlzIG5vdCByZXF1aXJlZC5cclxuLy8gMi4gQWx0ZXJlZCBzb3VyY2UgdmVyc2lvbnMgbXVzdCBiZSBwbGFpbmx5IG1hcmtlZCBhcyBzdWNoLCBhbmQgbXVzdCBub3QgYmVcclxuLy8gICBtaXNyZXByZXNlbnRlZCBhcyBiZWluZyB0aGUgb3JpZ2luYWwgc29mdHdhcmUuXHJcbi8vIDMuIFRoaXMgbm90aWNlIG1heSBub3QgYmUgcmVtb3ZlZCBvciBhbHRlcmVkIGZyb20gYW55IHNvdXJjZSBkaXN0cmlidXRpb24uXHJcblxyXG5mdW5jdGlvbiBaU3RyZWFtKCkge1xyXG4gIC8qIG5leHQgaW5wdXQgYnl0ZSAqL1xyXG4gIHRoaXMuaW5wdXQgPSBudWxsOyAvLyBKUyBzcGVjaWZpYywgYmVjYXVzZSB3ZSBoYXZlIG5vIHBvaW50ZXJzXHJcbiAgdGhpcy5uZXh0X2luID0gMDtcclxuICAvKiBudW1iZXIgb2YgYnl0ZXMgYXZhaWxhYmxlIGF0IGlucHV0ICovXHJcbiAgdGhpcy5hdmFpbF9pbiA9IDA7XHJcbiAgLyogdG90YWwgbnVtYmVyIG9mIGlucHV0IGJ5dGVzIHJlYWQgc28gZmFyICovXHJcbiAgdGhpcy50b3RhbF9pbiA9IDA7XHJcbiAgLyogbmV4dCBvdXRwdXQgYnl0ZSBzaG91bGQgYmUgcHV0IHRoZXJlICovXHJcbiAgdGhpcy5vdXRwdXQgPSBudWxsOyAvLyBKUyBzcGVjaWZpYywgYmVjYXVzZSB3ZSBoYXZlIG5vIHBvaW50ZXJzXHJcbiAgdGhpcy5uZXh0X291dCA9IDA7XHJcbiAgLyogcmVtYWluaW5nIGZyZWUgc3BhY2UgYXQgb3V0cHV0ICovXHJcbiAgdGhpcy5hdmFpbF9vdXQgPSAwO1xyXG4gIC8qIHRvdGFsIG51bWJlciBvZiBieXRlcyBvdXRwdXQgc28gZmFyICovXHJcbiAgdGhpcy50b3RhbF9vdXQgPSAwO1xyXG4gIC8qIGxhc3QgZXJyb3IgbWVzc2FnZSwgTlVMTCBpZiBubyBlcnJvciAqL1xyXG4gIHRoaXMubXNnID0gJycvKlpfTlVMTCovO1xyXG4gIC8qIG5vdCB2aXNpYmxlIGJ5IGFwcGxpY2F0aW9ucyAqL1xyXG4gIHRoaXMuc3RhdGUgPSBudWxsO1xyXG4gIC8qIGJlc3QgZ3Vlc3MgYWJvdXQgdGhlIGRhdGEgdHlwZTogYmluYXJ5IG9yIHRleHQgKi9cclxuICB0aGlzLmRhdGFfdHlwZSA9IDIvKlpfVU5LTk9XTiovO1xyXG4gIC8qIGFkbGVyMzIgdmFsdWUgb2YgdGhlIHVuY29tcHJlc3NlZCBkYXRhICovXHJcbiAgdGhpcy5hZGxlciA9IDA7XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gWlN0cmVhbTtcclxuIiwiJ3VzZSBzdHJpY3QnO1xyXG5cclxuLy8gKEMpIDE5OTUtMjAxMyBKZWFuLWxvdXAgR2FpbGx5IGFuZCBNYXJrIEFkbGVyXHJcbi8vIChDKSAyMDE0LTIwMTcgVml0YWx5IFB1enJpbiBhbmQgQW5kcmV5IFR1cGl0c2luXHJcbi8vXHJcbi8vIFRoaXMgc29mdHdhcmUgaXMgcHJvdmlkZWQgJ2FzLWlzJywgd2l0aG91dCBhbnkgZXhwcmVzcyBvciBpbXBsaWVkXHJcbi8vIHdhcnJhbnR5LiBJbiBubyBldmVudCB3aWxsIHRoZSBhdXRob3JzIGJlIGhlbGQgbGlhYmxlIGZvciBhbnkgZGFtYWdlc1xyXG4vLyBhcmlzaW5nIGZyb20gdGhlIHVzZSBvZiB0aGlzIHNvZnR3YXJlLlxyXG4vL1xyXG4vLyBQZXJtaXNzaW9uIGlzIGdyYW50ZWQgdG8gYW55b25lIHRvIHVzZSB0aGlzIHNvZnR3YXJlIGZvciBhbnkgcHVycG9zZSxcclxuLy8gaW5jbHVkaW5nIGNvbW1lcmNpYWwgYXBwbGljYXRpb25zLCBhbmQgdG8gYWx0ZXIgaXQgYW5kIHJlZGlzdHJpYnV0ZSBpdFxyXG4vLyBmcmVlbHksIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyByZXN0cmljdGlvbnM6XHJcbi8vXHJcbi8vIDEuIFRoZSBvcmlnaW4gb2YgdGhpcyBzb2Z0d2FyZSBtdXN0IG5vdCBiZSBtaXNyZXByZXNlbnRlZDsgeW91IG11c3Qgbm90XHJcbi8vICAgY2xhaW0gdGhhdCB5b3Ugd3JvdGUgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLiBJZiB5b3UgdXNlIHRoaXMgc29mdHdhcmVcclxuLy8gICBpbiBhIHByb2R1Y3QsIGFuIGFja25vd2xlZGdtZW50IGluIHRoZSBwcm9kdWN0IGRvY3VtZW50YXRpb24gd291bGQgYmVcclxuLy8gICBhcHByZWNpYXRlZCBidXQgaXMgbm90IHJlcXVpcmVkLlxyXG4vLyAyLiBBbHRlcmVkIHNvdXJjZSB2ZXJzaW9ucyBtdXN0IGJlIHBsYWlubHkgbWFya2VkIGFzIHN1Y2gsIGFuZCBtdXN0IG5vdCBiZVxyXG4vLyAgIG1pc3JlcHJlc2VudGVkIGFzIGJlaW5nIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS5cclxuLy8gMy4gVGhpcyBub3RpY2UgbWF5IG5vdCBiZSByZW1vdmVkIG9yIGFsdGVyZWQgZnJvbSBhbnkgc291cmNlIGRpc3RyaWJ1dGlvbi5cclxuXHJcbnZhciB1dGlscyAgID0gcmVxdWlyZSgnLi4vdXRpbHMvY29tbW9uJyk7XHJcbnZhciB0cmVlcyAgID0gcmVxdWlyZSgnLi90cmVlcycpO1xyXG52YXIgYWRsZXIzMiA9IHJlcXVpcmUoJy4vYWRsZXIzMicpO1xyXG52YXIgY3JjMzIgICA9IHJlcXVpcmUoJy4vY3JjMzInKTtcclxudmFyIG1zZyAgICAgPSByZXF1aXJlKCcuL21lc3NhZ2VzJyk7XHJcblxyXG4vKiBQdWJsaWMgY29uc3RhbnRzID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xyXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xyXG5cclxuXHJcbi8qIEFsbG93ZWQgZmx1c2ggdmFsdWVzOyBzZWUgZGVmbGF0ZSgpIGFuZCBpbmZsYXRlKCkgYmVsb3cgZm9yIGRldGFpbHMgKi9cclxudmFyIFpfTk9fRkxVU0ggICAgICA9IDA7XHJcbnZhciBaX1BBUlRJQUxfRkxVU0ggPSAxO1xyXG4vL3ZhciBaX1NZTkNfRkxVU0ggICAgPSAyO1xyXG52YXIgWl9GVUxMX0ZMVVNIICAgID0gMztcclxudmFyIFpfRklOSVNIICAgICAgICA9IDQ7XHJcbnZhciBaX0JMT0NLICAgICAgICAgPSA1O1xyXG4vL3ZhciBaX1RSRUVTICAgICAgICAgPSA2O1xyXG5cclxuXHJcbi8qIFJldHVybiBjb2RlcyBmb3IgdGhlIGNvbXByZXNzaW9uL2RlY29tcHJlc3Npb24gZnVuY3Rpb25zLiBOZWdhdGl2ZSB2YWx1ZXNcclxuICogYXJlIGVycm9ycywgcG9zaXRpdmUgdmFsdWVzIGFyZSB1c2VkIGZvciBzcGVjaWFsIGJ1dCBub3JtYWwgZXZlbnRzLlxyXG4gKi9cclxudmFyIFpfT0sgICAgICAgICAgICA9IDA7XHJcbnZhciBaX1NUUkVBTV9FTkQgICAgPSAxO1xyXG4vL3ZhciBaX05FRURfRElDVCAgICAgPSAyO1xyXG4vL3ZhciBaX0VSUk5PICAgICAgICAgPSAtMTtcclxudmFyIFpfU1RSRUFNX0VSUk9SICA9IC0yO1xyXG52YXIgWl9EQVRBX0VSUk9SICAgID0gLTM7XHJcbi8vdmFyIFpfTUVNX0VSUk9SICAgICA9IC00O1xyXG52YXIgWl9CVUZfRVJST1IgICAgID0gLTU7XHJcbi8vdmFyIFpfVkVSU0lPTl9FUlJPUiA9IC02O1xyXG5cclxuXHJcbi8qIGNvbXByZXNzaW9uIGxldmVscyAqL1xyXG4vL3ZhciBaX05PX0NPTVBSRVNTSU9OICAgICAgPSAwO1xyXG4vL3ZhciBaX0JFU1RfU1BFRUQgICAgICAgICAgPSAxO1xyXG4vL3ZhciBaX0JFU1RfQ09NUFJFU1NJT04gICAgPSA5O1xyXG52YXIgWl9ERUZBVUxUX0NPTVBSRVNTSU9OID0gLTE7XHJcblxyXG5cclxudmFyIFpfRklMVEVSRUQgICAgICAgICAgICA9IDE7XHJcbnZhciBaX0hVRkZNQU5fT05MWSAgICAgICAgPSAyO1xyXG52YXIgWl9STEUgICAgICAgICAgICAgICAgID0gMztcclxudmFyIFpfRklYRUQgICAgICAgICAgICAgICA9IDQ7XHJcbnZhciBaX0RFRkFVTFRfU1RSQVRFR1kgICAgPSAwO1xyXG5cclxuLyogUG9zc2libGUgdmFsdWVzIG9mIHRoZSBkYXRhX3R5cGUgZmllbGQgKHRob3VnaCBzZWUgaW5mbGF0ZSgpKSAqL1xyXG4vL3ZhciBaX0JJTkFSWSAgICAgICAgICAgICAgPSAwO1xyXG4vL3ZhciBaX1RFWFQgICAgICAgICAgICAgICAgPSAxO1xyXG4vL3ZhciBaX0FTQ0lJICAgICAgICAgICAgICAgPSAxOyAvLyA9IFpfVEVYVFxyXG52YXIgWl9VTktOT1dOICAgICAgICAgICAgID0gMjtcclxuXHJcblxyXG4vKiBUaGUgZGVmbGF0ZSBjb21wcmVzc2lvbiBtZXRob2QgKi9cclxudmFyIFpfREVGTEFURUQgID0gODtcclxuXHJcbi8qPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovXHJcblxyXG5cclxudmFyIE1BWF9NRU1fTEVWRUwgPSA5O1xyXG4vKiBNYXhpbXVtIHZhbHVlIGZvciBtZW1MZXZlbCBpbiBkZWZsYXRlSW5pdDIgKi9cclxudmFyIE1BWF9XQklUUyA9IDE1O1xyXG4vKiAzMksgTFo3NyB3aW5kb3cgKi9cclxudmFyIERFRl9NRU1fTEVWRUwgPSA4O1xyXG5cclxuXHJcbnZhciBMRU5HVEhfQ09ERVMgID0gMjk7XHJcbi8qIG51bWJlciBvZiBsZW5ndGggY29kZXMsIG5vdCBjb3VudGluZyB0aGUgc3BlY2lhbCBFTkRfQkxPQ0sgY29kZSAqL1xyXG52YXIgTElURVJBTFMgICAgICA9IDI1NjtcclxuLyogbnVtYmVyIG9mIGxpdGVyYWwgYnl0ZXMgMC4uMjU1ICovXHJcbnZhciBMX0NPREVTICAgICAgID0gTElURVJBTFMgKyAxICsgTEVOR1RIX0NPREVTO1xyXG4vKiBudW1iZXIgb2YgTGl0ZXJhbCBvciBMZW5ndGggY29kZXMsIGluY2x1ZGluZyB0aGUgRU5EX0JMT0NLIGNvZGUgKi9cclxudmFyIERfQ09ERVMgICAgICAgPSAzMDtcclxuLyogbnVtYmVyIG9mIGRpc3RhbmNlIGNvZGVzICovXHJcbnZhciBCTF9DT0RFUyAgICAgID0gMTk7XHJcbi8qIG51bWJlciBvZiBjb2RlcyB1c2VkIHRvIHRyYW5zZmVyIHRoZSBiaXQgbGVuZ3RocyAqL1xyXG52YXIgSEVBUF9TSVpFICAgICA9IDIgKiBMX0NPREVTICsgMTtcclxuLyogbWF4aW11bSBoZWFwIHNpemUgKi9cclxudmFyIE1BWF9CSVRTICA9IDE1O1xyXG4vKiBBbGwgY29kZXMgbXVzdCBub3QgZXhjZWVkIE1BWF9CSVRTIGJpdHMgKi9cclxuXHJcbnZhciBNSU5fTUFUQ0ggPSAzO1xyXG52YXIgTUFYX01BVENIID0gMjU4O1xyXG52YXIgTUlOX0xPT0tBSEVBRCA9IChNQVhfTUFUQ0ggKyBNSU5fTUFUQ0ggKyAxKTtcclxuXHJcbnZhciBQUkVTRVRfRElDVCA9IDB4MjA7XHJcblxyXG52YXIgSU5JVF9TVEFURSA9IDQyO1xyXG52YXIgRVhUUkFfU1RBVEUgPSA2OTtcclxudmFyIE5BTUVfU1RBVEUgPSA3MztcclxudmFyIENPTU1FTlRfU1RBVEUgPSA5MTtcclxudmFyIEhDUkNfU1RBVEUgPSAxMDM7XHJcbnZhciBCVVNZX1NUQVRFID0gMTEzO1xyXG52YXIgRklOSVNIX1NUQVRFID0gNjY2O1xyXG5cclxudmFyIEJTX05FRURfTU9SRSAgICAgID0gMTsgLyogYmxvY2sgbm90IGNvbXBsZXRlZCwgbmVlZCBtb3JlIGlucHV0IG9yIG1vcmUgb3V0cHV0ICovXHJcbnZhciBCU19CTE9DS19ET05FICAgICA9IDI7IC8qIGJsb2NrIGZsdXNoIHBlcmZvcm1lZCAqL1xyXG52YXIgQlNfRklOSVNIX1NUQVJURUQgPSAzOyAvKiBmaW5pc2ggc3RhcnRlZCwgbmVlZCBvbmx5IG1vcmUgb3V0cHV0IGF0IG5leHQgZGVmbGF0ZSAqL1xyXG52YXIgQlNfRklOSVNIX0RPTkUgICAgPSA0OyAvKiBmaW5pc2ggZG9uZSwgYWNjZXB0IG5vIG1vcmUgaW5wdXQgb3Igb3V0cHV0ICovXHJcblxyXG52YXIgT1NfQ09ERSA9IDB4MDM7IC8vIFVuaXggOikgLiBEb24ndCBkZXRlY3QsIHVzZSB0aGlzIGRlZmF1bHQuXHJcblxyXG5mdW5jdGlvbiBlcnIoc3RybSwgZXJyb3JDb2RlKSB7XHJcbiAgc3RybS5tc2cgPSBtc2dbZXJyb3JDb2RlXTtcclxuICByZXR1cm4gZXJyb3JDb2RlO1xyXG59XHJcblxyXG5mdW5jdGlvbiByYW5rKGYpIHtcclxuICByZXR1cm4gKChmKSA8PCAxKSAtICgoZikgPiA0ID8gOSA6IDApO1xyXG59XHJcblxyXG5mdW5jdGlvbiB6ZXJvKGJ1ZikgeyB2YXIgbGVuID0gYnVmLmxlbmd0aDsgd2hpbGUgKC0tbGVuID49IDApIHsgYnVmW2xlbl0gPSAwOyB9IH1cclxuXHJcblxyXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbiAqIEZsdXNoIGFzIG11Y2ggcGVuZGluZyBvdXRwdXQgYXMgcG9zc2libGUuIEFsbCBkZWZsYXRlKCkgb3V0cHV0IGdvZXNcclxuICogdGhyb3VnaCB0aGlzIGZ1bmN0aW9uIHNvIHNvbWUgYXBwbGljYXRpb25zIG1heSB3aXNoIHRvIG1vZGlmeSBpdFxyXG4gKiB0byBhdm9pZCBhbGxvY2F0aW5nIGEgbGFyZ2Ugc3RybS0+b3V0cHV0IGJ1ZmZlciBhbmQgY29weWluZyBpbnRvIGl0LlxyXG4gKiAoU2VlIGFsc28gcmVhZF9idWYoKSkuXHJcbiAqL1xyXG5mdW5jdGlvbiBmbHVzaF9wZW5kaW5nKHN0cm0pIHtcclxuICB2YXIgcyA9IHN0cm0uc3RhdGU7XHJcblxyXG4gIC8vX3RyX2ZsdXNoX2JpdHMocyk7XHJcbiAgdmFyIGxlbiA9IHMucGVuZGluZztcclxuICBpZiAobGVuID4gc3RybS5hdmFpbF9vdXQpIHtcclxuICAgIGxlbiA9IHN0cm0uYXZhaWxfb3V0O1xyXG4gIH1cclxuICBpZiAobGVuID09PSAwKSB7IHJldHVybjsgfVxyXG5cclxuICB1dGlscy5hcnJheVNldChzdHJtLm91dHB1dCwgcy5wZW5kaW5nX2J1Ziwgcy5wZW5kaW5nX291dCwgbGVuLCBzdHJtLm5leHRfb3V0KTtcclxuICBzdHJtLm5leHRfb3V0ICs9IGxlbjtcclxuICBzLnBlbmRpbmdfb3V0ICs9IGxlbjtcclxuICBzdHJtLnRvdGFsX291dCArPSBsZW47XHJcbiAgc3RybS5hdmFpbF9vdXQgLT0gbGVuO1xyXG4gIHMucGVuZGluZyAtPSBsZW47XHJcbiAgaWYgKHMucGVuZGluZyA9PT0gMCkge1xyXG4gICAgcy5wZW5kaW5nX291dCA9IDA7XHJcbiAgfVxyXG59XHJcblxyXG5cclxuZnVuY3Rpb24gZmx1c2hfYmxvY2tfb25seShzLCBsYXN0KSB7XHJcbiAgdHJlZXMuX3RyX2ZsdXNoX2Jsb2NrKHMsIChzLmJsb2NrX3N0YXJ0ID49IDAgPyBzLmJsb2NrX3N0YXJ0IDogLTEpLCBzLnN0cnN0YXJ0IC0gcy5ibG9ja19zdGFydCwgbGFzdCk7XHJcbiAgcy5ibG9ja19zdGFydCA9IHMuc3Ryc3RhcnQ7XHJcbiAgZmx1c2hfcGVuZGluZyhzLnN0cm0pO1xyXG59XHJcblxyXG5cclxuZnVuY3Rpb24gcHV0X2J5dGUocywgYikge1xyXG4gIHMucGVuZGluZ19idWZbcy5wZW5kaW5nKytdID0gYjtcclxufVxyXG5cclxuXHJcbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuICogUHV0IGEgc2hvcnQgaW4gdGhlIHBlbmRpbmcgYnVmZmVyLiBUaGUgMTYtYml0IHZhbHVlIGlzIHB1dCBpbiBNU0Igb3JkZXIuXHJcbiAqIElOIGFzc2VydGlvbjogdGhlIHN0cmVhbSBzdGF0ZSBpcyBjb3JyZWN0IGFuZCB0aGVyZSBpcyBlbm91Z2ggcm9vbSBpblxyXG4gKiBwZW5kaW5nX2J1Zi5cclxuICovXHJcbmZ1bmN0aW9uIHB1dFNob3J0TVNCKHMsIGIpIHtcclxuLy8gIHB1dF9ieXRlKHMsIChCeXRlKShiID4+IDgpKTtcclxuLy8gIHB1dF9ieXRlKHMsIChCeXRlKShiICYgMHhmZikpO1xyXG4gIHMucGVuZGluZ19idWZbcy5wZW5kaW5nKytdID0gKGIgPj4+IDgpICYgMHhmZjtcclxuICBzLnBlbmRpbmdfYnVmW3MucGVuZGluZysrXSA9IGIgJiAweGZmO1xyXG59XHJcblxyXG5cclxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbiAqIFJlYWQgYSBuZXcgYnVmZmVyIGZyb20gdGhlIGN1cnJlbnQgaW5wdXQgc3RyZWFtLCB1cGRhdGUgdGhlIGFkbGVyMzJcclxuICogYW5kIHRvdGFsIG51bWJlciBvZiBieXRlcyByZWFkLiAgQWxsIGRlZmxhdGUoKSBpbnB1dCBnb2VzIHRocm91Z2hcclxuICogdGhpcyBmdW5jdGlvbiBzbyBzb21lIGFwcGxpY2F0aW9ucyBtYXkgd2lzaCB0byBtb2RpZnkgaXQgdG8gYXZvaWRcclxuICogYWxsb2NhdGluZyBhIGxhcmdlIHN0cm0tPmlucHV0IGJ1ZmZlciBhbmQgY29weWluZyBmcm9tIGl0LlxyXG4gKiAoU2VlIGFsc28gZmx1c2hfcGVuZGluZygpKS5cclxuICovXHJcbmZ1bmN0aW9uIHJlYWRfYnVmKHN0cm0sIGJ1Ziwgc3RhcnQsIHNpemUpIHtcclxuICB2YXIgbGVuID0gc3RybS5hdmFpbF9pbjtcclxuXHJcbiAgaWYgKGxlbiA+IHNpemUpIHsgbGVuID0gc2l6ZTsgfVxyXG4gIGlmIChsZW4gPT09IDApIHsgcmV0dXJuIDA7IH1cclxuXHJcbiAgc3RybS5hdmFpbF9pbiAtPSBsZW47XHJcblxyXG4gIC8vIHptZW1jcHkoYnVmLCBzdHJtLT5uZXh0X2luLCBsZW4pO1xyXG4gIHV0aWxzLmFycmF5U2V0KGJ1Ziwgc3RybS5pbnB1dCwgc3RybS5uZXh0X2luLCBsZW4sIHN0YXJ0KTtcclxuICBpZiAoc3RybS5zdGF0ZS53cmFwID09PSAxKSB7XHJcbiAgICBzdHJtLmFkbGVyID0gYWRsZXIzMihzdHJtLmFkbGVyLCBidWYsIGxlbiwgc3RhcnQpO1xyXG4gIH1cclxuXHJcbiAgZWxzZSBpZiAoc3RybS5zdGF0ZS53cmFwID09PSAyKSB7XHJcbiAgICBzdHJtLmFkbGVyID0gY3JjMzIoc3RybS5hZGxlciwgYnVmLCBsZW4sIHN0YXJ0KTtcclxuICB9XHJcblxyXG4gIHN0cm0ubmV4dF9pbiArPSBsZW47XHJcbiAgc3RybS50b3RhbF9pbiArPSBsZW47XHJcblxyXG4gIHJldHVybiBsZW47XHJcbn1cclxuXHJcblxyXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuICogU2V0IG1hdGNoX3N0YXJ0IHRvIHRoZSBsb25nZXN0IG1hdGNoIHN0YXJ0aW5nIGF0IHRoZSBnaXZlbiBzdHJpbmcgYW5kXHJcbiAqIHJldHVybiBpdHMgbGVuZ3RoLiBNYXRjaGVzIHNob3J0ZXIgb3IgZXF1YWwgdG8gcHJldl9sZW5ndGggYXJlIGRpc2NhcmRlZCxcclxuICogaW4gd2hpY2ggY2FzZSB0aGUgcmVzdWx0IGlzIGVxdWFsIHRvIHByZXZfbGVuZ3RoIGFuZCBtYXRjaF9zdGFydCBpc1xyXG4gKiBnYXJiYWdlLlxyXG4gKiBJTiBhc3NlcnRpb25zOiBjdXJfbWF0Y2ggaXMgdGhlIGhlYWQgb2YgdGhlIGhhc2ggY2hhaW4gZm9yIHRoZSBjdXJyZW50XHJcbiAqICAgc3RyaW5nIChzdHJzdGFydCkgYW5kIGl0cyBkaXN0YW5jZSBpcyA8PSBNQVhfRElTVCwgYW5kIHByZXZfbGVuZ3RoID49IDFcclxuICogT1VUIGFzc2VydGlvbjogdGhlIG1hdGNoIGxlbmd0aCBpcyBub3QgZ3JlYXRlciB0aGFuIHMtPmxvb2thaGVhZC5cclxuICovXHJcbmZ1bmN0aW9uIGxvbmdlc3RfbWF0Y2gocywgY3VyX21hdGNoKSB7XHJcbiAgdmFyIGNoYWluX2xlbmd0aCA9IHMubWF4X2NoYWluX2xlbmd0aDsgICAgICAvKiBtYXggaGFzaCBjaGFpbiBsZW5ndGggKi9cclxuICB2YXIgc2NhbiA9IHMuc3Ryc3RhcnQ7IC8qIGN1cnJlbnQgc3RyaW5nICovXHJcbiAgdmFyIG1hdGNoOyAgICAgICAgICAgICAgICAgICAgICAgLyogbWF0Y2hlZCBzdHJpbmcgKi9cclxuICB2YXIgbGVuOyAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIGxlbmd0aCBvZiBjdXJyZW50IG1hdGNoICovXHJcbiAgdmFyIGJlc3RfbGVuID0gcy5wcmV2X2xlbmd0aDsgICAgICAgICAgICAgIC8qIGJlc3QgbWF0Y2ggbGVuZ3RoIHNvIGZhciAqL1xyXG4gIHZhciBuaWNlX21hdGNoID0gcy5uaWNlX21hdGNoOyAgICAgICAgICAgICAvKiBzdG9wIGlmIG1hdGNoIGxvbmcgZW5vdWdoICovXHJcbiAgdmFyIGxpbWl0ID0gKHMuc3Ryc3RhcnQgPiAocy53X3NpemUgLSBNSU5fTE9PS0FIRUFEKSkgP1xyXG4gICAgICBzLnN0cnN0YXJ0IC0gKHMud19zaXplIC0gTUlOX0xPT0tBSEVBRCkgOiAwLypOSUwqLztcclxuXHJcbiAgdmFyIF93aW4gPSBzLndpbmRvdzsgLy8gc2hvcnRjdXRcclxuXHJcbiAgdmFyIHdtYXNrID0gcy53X21hc2s7XHJcbiAgdmFyIHByZXYgID0gcy5wcmV2O1xyXG5cclxuICAvKiBTdG9wIHdoZW4gY3VyX21hdGNoIGJlY29tZXMgPD0gbGltaXQuIFRvIHNpbXBsaWZ5IHRoZSBjb2RlLFxyXG4gICAqIHdlIHByZXZlbnQgbWF0Y2hlcyB3aXRoIHRoZSBzdHJpbmcgb2Ygd2luZG93IGluZGV4IDAuXHJcbiAgICovXHJcblxyXG4gIHZhciBzdHJlbmQgPSBzLnN0cnN0YXJ0ICsgTUFYX01BVENIO1xyXG4gIHZhciBzY2FuX2VuZDEgID0gX3dpbltzY2FuICsgYmVzdF9sZW4gLSAxXTtcclxuICB2YXIgc2Nhbl9lbmQgICA9IF93aW5bc2NhbiArIGJlc3RfbGVuXTtcclxuXHJcbiAgLyogVGhlIGNvZGUgaXMgb3B0aW1pemVkIGZvciBIQVNIX0JJVFMgPj0gOCBhbmQgTUFYX01BVENILTIgbXVsdGlwbGUgb2YgMTYuXHJcbiAgICogSXQgaXMgZWFzeSB0byBnZXQgcmlkIG9mIHRoaXMgb3B0aW1pemF0aW9uIGlmIG5lY2Vzc2FyeS5cclxuICAgKi9cclxuICAvLyBBc3NlcnQocy0+aGFzaF9iaXRzID49IDggJiYgTUFYX01BVENIID09IDI1OCwgXCJDb2RlIHRvbyBjbGV2ZXJcIik7XHJcblxyXG4gIC8qIERvIG5vdCB3YXN0ZSB0b28gbXVjaCB0aW1lIGlmIHdlIGFscmVhZHkgaGF2ZSBhIGdvb2QgbWF0Y2g6ICovXHJcbiAgaWYgKHMucHJldl9sZW5ndGggPj0gcy5nb29kX21hdGNoKSB7XHJcbiAgICBjaGFpbl9sZW5ndGggPj49IDI7XHJcbiAgfVxyXG4gIC8qIERvIG5vdCBsb29rIGZvciBtYXRjaGVzIGJleW9uZCB0aGUgZW5kIG9mIHRoZSBpbnB1dC4gVGhpcyBpcyBuZWNlc3NhcnlcclxuICAgKiB0byBtYWtlIGRlZmxhdGUgZGV0ZXJtaW5pc3RpYy5cclxuICAgKi9cclxuICBpZiAobmljZV9tYXRjaCA+IHMubG9va2FoZWFkKSB7IG5pY2VfbWF0Y2ggPSBzLmxvb2thaGVhZDsgfVxyXG5cclxuICAvLyBBc3NlcnQoKHVsZylzLT5zdHJzdGFydCA8PSBzLT53aW5kb3dfc2l6ZS1NSU5fTE9PS0FIRUFELCBcIm5lZWQgbG9va2FoZWFkXCIpO1xyXG5cclxuICBkbyB7XHJcbiAgICAvLyBBc3NlcnQoY3VyX21hdGNoIDwgcy0+c3Ryc3RhcnQsIFwibm8gZnV0dXJlXCIpO1xyXG4gICAgbWF0Y2ggPSBjdXJfbWF0Y2g7XHJcblxyXG4gICAgLyogU2tpcCB0byBuZXh0IG1hdGNoIGlmIHRoZSBtYXRjaCBsZW5ndGggY2Fubm90IGluY3JlYXNlXHJcbiAgICAgKiBvciBpZiB0aGUgbWF0Y2ggbGVuZ3RoIGlzIGxlc3MgdGhhbiAyLiAgTm90ZSB0aGF0IHRoZSBjaGVja3MgYmVsb3dcclxuICAgICAqIGZvciBpbnN1ZmZpY2llbnQgbG9va2FoZWFkIG9ubHkgb2NjdXIgb2NjYXNpb25hbGx5IGZvciBwZXJmb3JtYW5jZVxyXG4gICAgICogcmVhc29ucy4gIFRoZXJlZm9yZSB1bmluaXRpYWxpemVkIG1lbW9yeSB3aWxsIGJlIGFjY2Vzc2VkLCBhbmRcclxuICAgICAqIGNvbmRpdGlvbmFsIGp1bXBzIHdpbGwgYmUgbWFkZSB0aGF0IGRlcGVuZCBvbiB0aG9zZSB2YWx1ZXMuXHJcbiAgICAgKiBIb3dldmVyIHRoZSBsZW5ndGggb2YgdGhlIG1hdGNoIGlzIGxpbWl0ZWQgdG8gdGhlIGxvb2thaGVhZCwgc29cclxuICAgICAqIHRoZSBvdXRwdXQgb2YgZGVmbGF0ZSBpcyBub3QgYWZmZWN0ZWQgYnkgdGhlIHVuaW5pdGlhbGl6ZWQgdmFsdWVzLlxyXG4gICAgICovXHJcblxyXG4gICAgaWYgKF93aW5bbWF0Y2ggKyBiZXN0X2xlbl0gICAgICE9PSBzY2FuX2VuZCAgfHxcclxuICAgICAgICBfd2luW21hdGNoICsgYmVzdF9sZW4gLSAxXSAhPT0gc2Nhbl9lbmQxIHx8XHJcbiAgICAgICAgX3dpblttYXRjaF0gICAgICAgICAgICAgICAgIT09IF93aW5bc2Nhbl0gfHxcclxuICAgICAgICBfd2luWysrbWF0Y2hdICAgICAgICAgICAgICAhPT0gX3dpbltzY2FuICsgMV0pIHtcclxuICAgICAgY29udGludWU7XHJcbiAgICB9XHJcblxyXG4gICAgLyogVGhlIGNoZWNrIGF0IGJlc3RfbGVuLTEgY2FuIGJlIHJlbW92ZWQgYmVjYXVzZSBpdCB3aWxsIGJlIG1hZGVcclxuICAgICAqIGFnYWluIGxhdGVyLiAoVGhpcyBoZXVyaXN0aWMgaXMgbm90IGFsd2F5cyBhIHdpbi4pXHJcbiAgICAgKiBJdCBpcyBub3QgbmVjZXNzYXJ5IHRvIGNvbXBhcmUgc2NhblsyXSBhbmQgbWF0Y2hbMl0gc2luY2UgdGhleVxyXG4gICAgICogYXJlIGFsd2F5cyBlcXVhbCB3aGVuIHRoZSBvdGhlciBieXRlcyBtYXRjaCwgZ2l2ZW4gdGhhdFxyXG4gICAgICogdGhlIGhhc2gga2V5cyBhcmUgZXF1YWwgYW5kIHRoYXQgSEFTSF9CSVRTID49IDguXHJcbiAgICAgKi9cclxuICAgIHNjYW4gKz0gMjtcclxuICAgIG1hdGNoKys7XHJcbiAgICAvLyBBc3NlcnQoKnNjYW4gPT0gKm1hdGNoLCBcIm1hdGNoWzJdP1wiKTtcclxuXHJcbiAgICAvKiBXZSBjaGVjayBmb3IgaW5zdWZmaWNpZW50IGxvb2thaGVhZCBvbmx5IGV2ZXJ5IDh0aCBjb21wYXJpc29uO1xyXG4gICAgICogdGhlIDI1NnRoIGNoZWNrIHdpbGwgYmUgbWFkZSBhdCBzdHJzdGFydCsyNTguXHJcbiAgICAgKi9cclxuICAgIGRvIHtcclxuICAgICAgLypqc2hpbnQgbm9lbXB0eTpmYWxzZSovXHJcbiAgICB9IHdoaWxlIChfd2luWysrc2Nhbl0gPT09IF93aW5bKyttYXRjaF0gJiYgX3dpblsrK3NjYW5dID09PSBfd2luWysrbWF0Y2hdICYmXHJcbiAgICAgICAgICAgICBfd2luWysrc2Nhbl0gPT09IF93aW5bKyttYXRjaF0gJiYgX3dpblsrK3NjYW5dID09PSBfd2luWysrbWF0Y2hdICYmXHJcbiAgICAgICAgICAgICBfd2luWysrc2Nhbl0gPT09IF93aW5bKyttYXRjaF0gJiYgX3dpblsrK3NjYW5dID09PSBfd2luWysrbWF0Y2hdICYmXHJcbiAgICAgICAgICAgICBfd2luWysrc2Nhbl0gPT09IF93aW5bKyttYXRjaF0gJiYgX3dpblsrK3NjYW5dID09PSBfd2luWysrbWF0Y2hdICYmXHJcbiAgICAgICAgICAgICBzY2FuIDwgc3RyZW5kKTtcclxuXHJcbiAgICAvLyBBc3NlcnQoc2NhbiA8PSBzLT53aW5kb3crKHVuc2lnbmVkKShzLT53aW5kb3dfc2l6ZS0xKSwgXCJ3aWxkIHNjYW5cIik7XHJcblxyXG4gICAgbGVuID0gTUFYX01BVENIIC0gKHN0cmVuZCAtIHNjYW4pO1xyXG4gICAgc2NhbiA9IHN0cmVuZCAtIE1BWF9NQVRDSDtcclxuXHJcbiAgICBpZiAobGVuID4gYmVzdF9sZW4pIHtcclxuICAgICAgcy5tYXRjaF9zdGFydCA9IGN1cl9tYXRjaDtcclxuICAgICAgYmVzdF9sZW4gPSBsZW47XHJcbiAgICAgIGlmIChsZW4gPj0gbmljZV9tYXRjaCkge1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICAgIHNjYW5fZW5kMSAgPSBfd2luW3NjYW4gKyBiZXN0X2xlbiAtIDFdO1xyXG4gICAgICBzY2FuX2VuZCAgID0gX3dpbltzY2FuICsgYmVzdF9sZW5dO1xyXG4gICAgfVxyXG4gIH0gd2hpbGUgKChjdXJfbWF0Y2ggPSBwcmV2W2N1cl9tYXRjaCAmIHdtYXNrXSkgPiBsaW1pdCAmJiAtLWNoYWluX2xlbmd0aCAhPT0gMCk7XHJcblxyXG4gIGlmIChiZXN0X2xlbiA8PSBzLmxvb2thaGVhZCkge1xyXG4gICAgcmV0dXJuIGJlc3RfbGVuO1xyXG4gIH1cclxuICByZXR1cm4gcy5sb29rYWhlYWQ7XHJcbn1cclxuXHJcblxyXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuICogRmlsbCB0aGUgd2luZG93IHdoZW4gdGhlIGxvb2thaGVhZCBiZWNvbWVzIGluc3VmZmljaWVudC5cclxuICogVXBkYXRlcyBzdHJzdGFydCBhbmQgbG9va2FoZWFkLlxyXG4gKlxyXG4gKiBJTiBhc3NlcnRpb246IGxvb2thaGVhZCA8IE1JTl9MT09LQUhFQURcclxuICogT1VUIGFzc2VydGlvbnM6IHN0cnN0YXJ0IDw9IHdpbmRvd19zaXplLU1JTl9MT09LQUhFQURcclxuICogICAgQXQgbGVhc3Qgb25lIGJ5dGUgaGFzIGJlZW4gcmVhZCwgb3IgYXZhaWxfaW4gPT0gMDsgcmVhZHMgYXJlXHJcbiAqICAgIHBlcmZvcm1lZCBmb3IgYXQgbGVhc3QgdHdvIGJ5dGVzIChyZXF1aXJlZCBmb3IgdGhlIHppcCB0cmFuc2xhdGVfZW9sXHJcbiAqICAgIG9wdGlvbiAtLSBub3Qgc3VwcG9ydGVkIGhlcmUpLlxyXG4gKi9cclxuZnVuY3Rpb24gZmlsbF93aW5kb3cocykge1xyXG4gIHZhciBfd19zaXplID0gcy53X3NpemU7XHJcbiAgdmFyIHAsIG4sIG0sIG1vcmUsIHN0cjtcclxuXHJcbiAgLy9Bc3NlcnQocy0+bG9va2FoZWFkIDwgTUlOX0xPT0tBSEVBRCwgXCJhbHJlYWR5IGVub3VnaCBsb29rYWhlYWRcIik7XHJcblxyXG4gIGRvIHtcclxuICAgIG1vcmUgPSBzLndpbmRvd19zaXplIC0gcy5sb29rYWhlYWQgLSBzLnN0cnN0YXJ0O1xyXG5cclxuICAgIC8vIEpTIGludHMgaGF2ZSAzMiBiaXQsIGJsb2NrIGJlbG93IG5vdCBuZWVkZWRcclxuICAgIC8qIERlYWwgd2l0aCAhQCMkJSA2NEsgbGltaXQ6ICovXHJcbiAgICAvL2lmIChzaXplb2YoaW50KSA8PSAyKSB7XHJcbiAgICAvLyAgICBpZiAobW9yZSA9PSAwICYmIHMtPnN0cnN0YXJ0ID09IDAgJiYgcy0+bG9va2FoZWFkID09IDApIHtcclxuICAgIC8vICAgICAgICBtb3JlID0gd3NpemU7XHJcbiAgICAvL1xyXG4gICAgLy8gIH0gZWxzZSBpZiAobW9yZSA9PSAodW5zaWduZWQpKC0xKSkge1xyXG4gICAgLy8gICAgICAgIC8qIFZlcnkgdW5saWtlbHksIGJ1dCBwb3NzaWJsZSBvbiAxNiBiaXQgbWFjaGluZSBpZlxyXG4gICAgLy8gICAgICAgICAqIHN0cnN0YXJ0ID09IDAgJiYgbG9va2FoZWFkID09IDEgKGlucHV0IGRvbmUgYSBieXRlIGF0IHRpbWUpXHJcbiAgICAvLyAgICAgICAgICovXHJcbiAgICAvLyAgICAgICAgbW9yZS0tO1xyXG4gICAgLy8gICAgfVxyXG4gICAgLy99XHJcblxyXG5cclxuICAgIC8qIElmIHRoZSB3aW5kb3cgaXMgYWxtb3N0IGZ1bGwgYW5kIHRoZXJlIGlzIGluc3VmZmljaWVudCBsb29rYWhlYWQsXHJcbiAgICAgKiBtb3ZlIHRoZSB1cHBlciBoYWxmIHRvIHRoZSBsb3dlciBvbmUgdG8gbWFrZSByb29tIGluIHRoZSB1cHBlciBoYWxmLlxyXG4gICAgICovXHJcbiAgICBpZiAocy5zdHJzdGFydCA+PSBfd19zaXplICsgKF93X3NpemUgLSBNSU5fTE9PS0FIRUFEKSkge1xyXG5cclxuICAgICAgdXRpbHMuYXJyYXlTZXQocy53aW5kb3csIHMud2luZG93LCBfd19zaXplLCBfd19zaXplLCAwKTtcclxuICAgICAgcy5tYXRjaF9zdGFydCAtPSBfd19zaXplO1xyXG4gICAgICBzLnN0cnN0YXJ0IC09IF93X3NpemU7XHJcbiAgICAgIC8qIHdlIG5vdyBoYXZlIHN0cnN0YXJ0ID49IE1BWF9ESVNUICovXHJcbiAgICAgIHMuYmxvY2tfc3RhcnQgLT0gX3dfc2l6ZTtcclxuXHJcbiAgICAgIC8qIFNsaWRlIHRoZSBoYXNoIHRhYmxlIChjb3VsZCBiZSBhdm9pZGVkIHdpdGggMzIgYml0IHZhbHVlc1xyXG4gICAgICAgYXQgdGhlIGV4cGVuc2Ugb2YgbWVtb3J5IHVzYWdlKS4gV2Ugc2xpZGUgZXZlbiB3aGVuIGxldmVsID09IDBcclxuICAgICAgIHRvIGtlZXAgdGhlIGhhc2ggdGFibGUgY29uc2lzdGVudCBpZiB3ZSBzd2l0Y2ggYmFjayB0byBsZXZlbCA+IDBcclxuICAgICAgIGxhdGVyLiAoVXNpbmcgbGV2ZWwgMCBwZXJtYW5lbnRseSBpcyBub3QgYW4gb3B0aW1hbCB1c2FnZSBvZlxyXG4gICAgICAgemxpYiwgc28gd2UgZG9uJ3QgY2FyZSBhYm91dCB0aGlzIHBhdGhvbG9naWNhbCBjYXNlLilcclxuICAgICAgICovXHJcblxyXG4gICAgICBuID0gcy5oYXNoX3NpemU7XHJcbiAgICAgIHAgPSBuO1xyXG4gICAgICBkbyB7XHJcbiAgICAgICAgbSA9IHMuaGVhZFstLXBdO1xyXG4gICAgICAgIHMuaGVhZFtwXSA9IChtID49IF93X3NpemUgPyBtIC0gX3dfc2l6ZSA6IDApO1xyXG4gICAgICB9IHdoaWxlICgtLW4pO1xyXG5cclxuICAgICAgbiA9IF93X3NpemU7XHJcbiAgICAgIHAgPSBuO1xyXG4gICAgICBkbyB7XHJcbiAgICAgICAgbSA9IHMucHJldlstLXBdO1xyXG4gICAgICAgIHMucHJldltwXSA9IChtID49IF93X3NpemUgPyBtIC0gX3dfc2l6ZSA6IDApO1xyXG4gICAgICAgIC8qIElmIG4gaXMgbm90IG9uIGFueSBoYXNoIGNoYWluLCBwcmV2W25dIGlzIGdhcmJhZ2UgYnV0XHJcbiAgICAgICAgICogaXRzIHZhbHVlIHdpbGwgbmV2ZXIgYmUgdXNlZC5cclxuICAgICAgICAgKi9cclxuICAgICAgfSB3aGlsZSAoLS1uKTtcclxuXHJcbiAgICAgIG1vcmUgKz0gX3dfc2l6ZTtcclxuICAgIH1cclxuICAgIGlmIChzLnN0cm0uYXZhaWxfaW4gPT09IDApIHtcclxuICAgICAgYnJlYWs7XHJcbiAgICB9XHJcblxyXG4gICAgLyogSWYgdGhlcmUgd2FzIG5vIHNsaWRpbmc6XHJcbiAgICAgKiAgICBzdHJzdGFydCA8PSBXU0laRStNQVhfRElTVC0xICYmIGxvb2thaGVhZCA8PSBNSU5fTE9PS0FIRUFEIC0gMSAmJlxyXG4gICAgICogICAgbW9yZSA9PSB3aW5kb3dfc2l6ZSAtIGxvb2thaGVhZCAtIHN0cnN0YXJ0XHJcbiAgICAgKiA9PiBtb3JlID49IHdpbmRvd19zaXplIC0gKE1JTl9MT09LQUhFQUQtMSArIFdTSVpFICsgTUFYX0RJU1QtMSlcclxuICAgICAqID0+IG1vcmUgPj0gd2luZG93X3NpemUgLSAyKldTSVpFICsgMlxyXG4gICAgICogSW4gdGhlIEJJR19NRU0gb3IgTU1BUCBjYXNlIChub3QgeWV0IHN1cHBvcnRlZCksXHJcbiAgICAgKiAgIHdpbmRvd19zaXplID09IGlucHV0X3NpemUgKyBNSU5fTE9PS0FIRUFEICAmJlxyXG4gICAgICogICBzdHJzdGFydCArIHMtPmxvb2thaGVhZCA8PSBpbnB1dF9zaXplID0+IG1vcmUgPj0gTUlOX0xPT0tBSEVBRC5cclxuICAgICAqIE90aGVyd2lzZSwgd2luZG93X3NpemUgPT0gMipXU0laRSBzbyBtb3JlID49IDIuXHJcbiAgICAgKiBJZiB0aGVyZSB3YXMgc2xpZGluZywgbW9yZSA+PSBXU0laRS4gU28gaW4gYWxsIGNhc2VzLCBtb3JlID49IDIuXHJcbiAgICAgKi9cclxuICAgIC8vQXNzZXJ0KG1vcmUgPj0gMiwgXCJtb3JlIDwgMlwiKTtcclxuICAgIG4gPSByZWFkX2J1ZihzLnN0cm0sIHMud2luZG93LCBzLnN0cnN0YXJ0ICsgcy5sb29rYWhlYWQsIG1vcmUpO1xyXG4gICAgcy5sb29rYWhlYWQgKz0gbjtcclxuXHJcbiAgICAvKiBJbml0aWFsaXplIHRoZSBoYXNoIHZhbHVlIG5vdyB0aGF0IHdlIGhhdmUgc29tZSBpbnB1dDogKi9cclxuICAgIGlmIChzLmxvb2thaGVhZCArIHMuaW5zZXJ0ID49IE1JTl9NQVRDSCkge1xyXG4gICAgICBzdHIgPSBzLnN0cnN0YXJ0IC0gcy5pbnNlcnQ7XHJcbiAgICAgIHMuaW5zX2ggPSBzLndpbmRvd1tzdHJdO1xyXG5cclxuICAgICAgLyogVVBEQVRFX0hBU0gocywgcy0+aW5zX2gsIHMtPndpbmRvd1tzdHIgKyAxXSk7ICovXHJcbiAgICAgIHMuaW5zX2ggPSAoKHMuaW5zX2ggPDwgcy5oYXNoX3NoaWZ0KSBeIHMud2luZG93W3N0ciArIDFdKSAmIHMuaGFzaF9tYXNrO1xyXG4vLyNpZiBNSU5fTUFUQ0ggIT0gM1xyXG4vLyAgICAgICAgQ2FsbCB1cGRhdGVfaGFzaCgpIE1JTl9NQVRDSC0zIG1vcmUgdGltZXNcclxuLy8jZW5kaWZcclxuICAgICAgd2hpbGUgKHMuaW5zZXJ0KSB7XHJcbiAgICAgICAgLyogVVBEQVRFX0hBU0gocywgcy0+aW5zX2gsIHMtPndpbmRvd1tzdHIgKyBNSU5fTUFUQ0gtMV0pOyAqL1xyXG4gICAgICAgIHMuaW5zX2ggPSAoKHMuaW5zX2ggPDwgcy5oYXNoX3NoaWZ0KSBeIHMud2luZG93W3N0ciArIE1JTl9NQVRDSCAtIDFdKSAmIHMuaGFzaF9tYXNrO1xyXG5cclxuICAgICAgICBzLnByZXZbc3RyICYgcy53X21hc2tdID0gcy5oZWFkW3MuaW5zX2hdO1xyXG4gICAgICAgIHMuaGVhZFtzLmluc19oXSA9IHN0cjtcclxuICAgICAgICBzdHIrKztcclxuICAgICAgICBzLmluc2VydC0tO1xyXG4gICAgICAgIGlmIChzLmxvb2thaGVhZCArIHMuaW5zZXJ0IDwgTUlOX01BVENIKSB7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIC8qIElmIHRoZSB3aG9sZSBpbnB1dCBoYXMgbGVzcyB0aGFuIE1JTl9NQVRDSCBieXRlcywgaW5zX2ggaXMgZ2FyYmFnZSxcclxuICAgICAqIGJ1dCB0aGlzIGlzIG5vdCBpbXBvcnRhbnQgc2luY2Ugb25seSBsaXRlcmFsIGJ5dGVzIHdpbGwgYmUgZW1pdHRlZC5cclxuICAgICAqL1xyXG5cclxuICB9IHdoaWxlIChzLmxvb2thaGVhZCA8IE1JTl9MT09LQUhFQUQgJiYgcy5zdHJtLmF2YWlsX2luICE9PSAwKTtcclxuXHJcbiAgLyogSWYgdGhlIFdJTl9JTklUIGJ5dGVzIGFmdGVyIHRoZSBlbmQgb2YgdGhlIGN1cnJlbnQgZGF0YSBoYXZlIG5ldmVyIGJlZW5cclxuICAgKiB3cml0dGVuLCB0aGVuIHplcm8gdGhvc2UgYnl0ZXMgaW4gb3JkZXIgdG8gYXZvaWQgbWVtb3J5IGNoZWNrIHJlcG9ydHMgb2ZcclxuICAgKiB0aGUgdXNlIG9mIHVuaW5pdGlhbGl6ZWQgKG9yIHVuaW5pdGlhbGlzZWQgYXMgSnVsaWFuIHdyaXRlcykgYnl0ZXMgYnlcclxuICAgKiB0aGUgbG9uZ2VzdCBtYXRjaCByb3V0aW5lcy4gIFVwZGF0ZSB0aGUgaGlnaCB3YXRlciBtYXJrIGZvciB0aGUgbmV4dFxyXG4gICAqIHRpbWUgdGhyb3VnaCBoZXJlLiAgV0lOX0lOSVQgaXMgc2V0IHRvIE1BWF9NQVRDSCBzaW5jZSB0aGUgbG9uZ2VzdCBtYXRjaFxyXG4gICAqIHJvdXRpbmVzIGFsbG93IHNjYW5uaW5nIHRvIHN0cnN0YXJ0ICsgTUFYX01BVENILCBpZ25vcmluZyBsb29rYWhlYWQuXHJcbiAgICovXHJcbi8vICBpZiAocy5oaWdoX3dhdGVyIDwgcy53aW5kb3dfc2l6ZSkge1xyXG4vLyAgICB2YXIgY3VyciA9IHMuc3Ryc3RhcnQgKyBzLmxvb2thaGVhZDtcclxuLy8gICAgdmFyIGluaXQgPSAwO1xyXG4vL1xyXG4vLyAgICBpZiAocy5oaWdoX3dhdGVyIDwgY3Vycikge1xyXG4vLyAgICAgIC8qIFByZXZpb3VzIGhpZ2ggd2F0ZXIgbWFyayBiZWxvdyBjdXJyZW50IGRhdGEgLS0gemVybyBXSU5fSU5JVFxyXG4vLyAgICAgICAqIGJ5dGVzIG9yIHVwIHRvIGVuZCBvZiB3aW5kb3csIHdoaWNoZXZlciBpcyBsZXNzLlxyXG4vLyAgICAgICAqL1xyXG4vLyAgICAgIGluaXQgPSBzLndpbmRvd19zaXplIC0gY3VycjtcclxuLy8gICAgICBpZiAoaW5pdCA+IFdJTl9JTklUKVxyXG4vLyAgICAgICAgaW5pdCA9IFdJTl9JTklUO1xyXG4vLyAgICAgIHptZW16ZXJvKHMtPndpbmRvdyArIGN1cnIsICh1bnNpZ25lZClpbml0KTtcclxuLy8gICAgICBzLT5oaWdoX3dhdGVyID0gY3VyciArIGluaXQ7XHJcbi8vICAgIH1cclxuLy8gICAgZWxzZSBpZiAocy0+aGlnaF93YXRlciA8ICh1bGcpY3VyciArIFdJTl9JTklUKSB7XHJcbi8vICAgICAgLyogSGlnaCB3YXRlciBtYXJrIGF0IG9yIGFib3ZlIGN1cnJlbnQgZGF0YSwgYnV0IGJlbG93IGN1cnJlbnQgZGF0YVxyXG4vLyAgICAgICAqIHBsdXMgV0lOX0lOSVQgLS0gemVybyBvdXQgdG8gY3VycmVudCBkYXRhIHBsdXMgV0lOX0lOSVQsIG9yIHVwXHJcbi8vICAgICAgICogdG8gZW5kIG9mIHdpbmRvdywgd2hpY2hldmVyIGlzIGxlc3MuXHJcbi8vICAgICAgICovXHJcbi8vICAgICAgaW5pdCA9ICh1bGcpY3VyciArIFdJTl9JTklUIC0gcy0+aGlnaF93YXRlcjtcclxuLy8gICAgICBpZiAoaW5pdCA+IHMtPndpbmRvd19zaXplIC0gcy0+aGlnaF93YXRlcilcclxuLy8gICAgICAgIGluaXQgPSBzLT53aW5kb3dfc2l6ZSAtIHMtPmhpZ2hfd2F0ZXI7XHJcbi8vICAgICAgem1lbXplcm8ocy0+d2luZG93ICsgcy0+aGlnaF93YXRlciwgKHVuc2lnbmVkKWluaXQpO1xyXG4vLyAgICAgIHMtPmhpZ2hfd2F0ZXIgKz0gaW5pdDtcclxuLy8gICAgfVxyXG4vLyAgfVxyXG4vL1xyXG4vLyAgQXNzZXJ0KCh1bGcpcy0+c3Ryc3RhcnQgPD0gcy0+d2luZG93X3NpemUgLSBNSU5fTE9PS0FIRUFELFxyXG4vLyAgICBcIm5vdCBlbm91Z2ggcm9vbSBmb3Igc2VhcmNoXCIpO1xyXG59XHJcblxyXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuICogQ29weSB3aXRob3V0IGNvbXByZXNzaW9uIGFzIG11Y2ggYXMgcG9zc2libGUgZnJvbSB0aGUgaW5wdXQgc3RyZWFtLCByZXR1cm5cclxuICogdGhlIGN1cnJlbnQgYmxvY2sgc3RhdGUuXHJcbiAqIFRoaXMgZnVuY3Rpb24gZG9lcyBub3QgaW5zZXJ0IG5ldyBzdHJpbmdzIGluIHRoZSBkaWN0aW9uYXJ5IHNpbmNlXHJcbiAqIHVuY29tcHJlc3NpYmxlIGRhdGEgaXMgcHJvYmFibHkgbm90IHVzZWZ1bC4gVGhpcyBmdW5jdGlvbiBpcyB1c2VkXHJcbiAqIG9ubHkgZm9yIHRoZSBsZXZlbD0wIGNvbXByZXNzaW9uIG9wdGlvbi5cclxuICogTk9URTogdGhpcyBmdW5jdGlvbiBzaG91bGQgYmUgb3B0aW1pemVkIHRvIGF2b2lkIGV4dHJhIGNvcHlpbmcgZnJvbVxyXG4gKiB3aW5kb3cgdG8gcGVuZGluZ19idWYuXHJcbiAqL1xyXG5mdW5jdGlvbiBkZWZsYXRlX3N0b3JlZChzLCBmbHVzaCkge1xyXG4gIC8qIFN0b3JlZCBibG9ja3MgYXJlIGxpbWl0ZWQgdG8gMHhmZmZmIGJ5dGVzLCBwZW5kaW5nX2J1ZiBpcyBsaW1pdGVkXHJcbiAgICogdG8gcGVuZGluZ19idWZfc2l6ZSwgYW5kIGVhY2ggc3RvcmVkIGJsb2NrIGhhcyBhIDUgYnl0ZSBoZWFkZXI6XHJcbiAgICovXHJcbiAgdmFyIG1heF9ibG9ja19zaXplID0gMHhmZmZmO1xyXG5cclxuICBpZiAobWF4X2Jsb2NrX3NpemUgPiBzLnBlbmRpbmdfYnVmX3NpemUgLSA1KSB7XHJcbiAgICBtYXhfYmxvY2tfc2l6ZSA9IHMucGVuZGluZ19idWZfc2l6ZSAtIDU7XHJcbiAgfVxyXG5cclxuICAvKiBDb3B5IGFzIG11Y2ggYXMgcG9zc2libGUgZnJvbSBpbnB1dCB0byBvdXRwdXQ6ICovXHJcbiAgZm9yICg7Oykge1xyXG4gICAgLyogRmlsbCB0aGUgd2luZG93IGFzIG11Y2ggYXMgcG9zc2libGU6ICovXHJcbiAgICBpZiAocy5sb29rYWhlYWQgPD0gMSkge1xyXG5cclxuICAgICAgLy9Bc3NlcnQocy0+c3Ryc3RhcnQgPCBzLT53X3NpemUrTUFYX0RJU1QocykgfHxcclxuICAgICAgLy8gIHMtPmJsb2NrX3N0YXJ0ID49IChsb25nKXMtPndfc2l6ZSwgXCJzbGlkZSB0b28gbGF0ZVwiKTtcclxuLy8gICAgICBpZiAoIShzLnN0cnN0YXJ0IDwgcy53X3NpemUgKyAocy53X3NpemUgLSBNSU5fTE9PS0FIRUFEKSB8fFxyXG4vLyAgICAgICAgcy5ibG9ja19zdGFydCA+PSBzLndfc2l6ZSkpIHtcclxuLy8gICAgICAgIHRocm93ICBuZXcgRXJyb3IoXCJzbGlkZSB0b28gbGF0ZVwiKTtcclxuLy8gICAgICB9XHJcblxyXG4gICAgICBmaWxsX3dpbmRvdyhzKTtcclxuICAgICAgaWYgKHMubG9va2FoZWFkID09PSAwICYmIGZsdXNoID09PSBaX05PX0ZMVVNIKSB7XHJcbiAgICAgICAgcmV0dXJuIEJTX05FRURfTU9SRTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKHMubG9va2FoZWFkID09PSAwKSB7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgICAgLyogZmx1c2ggdGhlIGN1cnJlbnQgYmxvY2sgKi9cclxuICAgIH1cclxuICAgIC8vQXNzZXJ0KHMtPmJsb2NrX3N0YXJ0ID49IDBMLCBcImJsb2NrIGdvbmVcIik7XHJcbi8vICAgIGlmIChzLmJsb2NrX3N0YXJ0IDwgMCkgdGhyb3cgbmV3IEVycm9yKFwiYmxvY2sgZ29uZVwiKTtcclxuXHJcbiAgICBzLnN0cnN0YXJ0ICs9IHMubG9va2FoZWFkO1xyXG4gICAgcy5sb29rYWhlYWQgPSAwO1xyXG5cclxuICAgIC8qIEVtaXQgYSBzdG9yZWQgYmxvY2sgaWYgcGVuZGluZ19idWYgd2lsbCBiZSBmdWxsOiAqL1xyXG4gICAgdmFyIG1heF9zdGFydCA9IHMuYmxvY2tfc3RhcnQgKyBtYXhfYmxvY2tfc2l6ZTtcclxuXHJcbiAgICBpZiAocy5zdHJzdGFydCA9PT0gMCB8fCBzLnN0cnN0YXJ0ID49IG1heF9zdGFydCkge1xyXG4gICAgICAvKiBzdHJzdGFydCA9PSAwIGlzIHBvc3NpYmxlIHdoZW4gd3JhcGFyb3VuZCBvbiAxNi1iaXQgbWFjaGluZSAqL1xyXG4gICAgICBzLmxvb2thaGVhZCA9IHMuc3Ryc3RhcnQgLSBtYXhfc3RhcnQ7XHJcbiAgICAgIHMuc3Ryc3RhcnQgPSBtYXhfc3RhcnQ7XHJcbiAgICAgIC8qKiogRkxVU0hfQkxPQ0socywgMCk7ICoqKi9cclxuICAgICAgZmx1c2hfYmxvY2tfb25seShzLCBmYWxzZSk7XHJcbiAgICAgIGlmIChzLnN0cm0uYXZhaWxfb3V0ID09PSAwKSB7XHJcbiAgICAgICAgcmV0dXJuIEJTX05FRURfTU9SRTtcclxuICAgICAgfVxyXG4gICAgICAvKioqL1xyXG5cclxuXHJcbiAgICB9XHJcbiAgICAvKiBGbHVzaCBpZiB3ZSBtYXkgaGF2ZSB0byBzbGlkZSwgb3RoZXJ3aXNlIGJsb2NrX3N0YXJ0IG1heSBiZWNvbWVcclxuICAgICAqIG5lZ2F0aXZlIGFuZCB0aGUgZGF0YSB3aWxsIGJlIGdvbmU6XHJcbiAgICAgKi9cclxuICAgIGlmIChzLnN0cnN0YXJ0IC0gcy5ibG9ja19zdGFydCA+PSAocy53X3NpemUgLSBNSU5fTE9PS0FIRUFEKSkge1xyXG4gICAgICAvKioqIEZMVVNIX0JMT0NLKHMsIDApOyAqKiovXHJcbiAgICAgIGZsdXNoX2Jsb2NrX29ubHkocywgZmFsc2UpO1xyXG4gICAgICBpZiAocy5zdHJtLmF2YWlsX291dCA9PT0gMCkge1xyXG4gICAgICAgIHJldHVybiBCU19ORUVEX01PUkU7XHJcbiAgICAgIH1cclxuICAgICAgLyoqKi9cclxuICAgIH1cclxuICB9XHJcblxyXG4gIHMuaW5zZXJ0ID0gMDtcclxuXHJcbiAgaWYgKGZsdXNoID09PSBaX0ZJTklTSCkge1xyXG4gICAgLyoqKiBGTFVTSF9CTE9DSyhzLCAxKTsgKioqL1xyXG4gICAgZmx1c2hfYmxvY2tfb25seShzLCB0cnVlKTtcclxuICAgIGlmIChzLnN0cm0uYXZhaWxfb3V0ID09PSAwKSB7XHJcbiAgICAgIHJldHVybiBCU19GSU5JU0hfU1RBUlRFRDtcclxuICAgIH1cclxuICAgIC8qKiovXHJcbiAgICByZXR1cm4gQlNfRklOSVNIX0RPTkU7XHJcbiAgfVxyXG5cclxuICBpZiAocy5zdHJzdGFydCA+IHMuYmxvY2tfc3RhcnQpIHtcclxuICAgIC8qKiogRkxVU0hfQkxPQ0socywgMCk7ICoqKi9cclxuICAgIGZsdXNoX2Jsb2NrX29ubHkocywgZmFsc2UpO1xyXG4gICAgaWYgKHMuc3RybS5hdmFpbF9vdXQgPT09IDApIHtcclxuICAgICAgcmV0dXJuIEJTX05FRURfTU9SRTtcclxuICAgIH1cclxuICAgIC8qKiovXHJcbiAgfVxyXG5cclxuICByZXR1cm4gQlNfTkVFRF9NT1JFO1xyXG59XHJcblxyXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuICogQ29tcHJlc3MgYXMgbXVjaCBhcyBwb3NzaWJsZSBmcm9tIHRoZSBpbnB1dCBzdHJlYW0sIHJldHVybiB0aGUgY3VycmVudFxyXG4gKiBibG9jayBzdGF0ZS5cclxuICogVGhpcyBmdW5jdGlvbiBkb2VzIG5vdCBwZXJmb3JtIGxhenkgZXZhbHVhdGlvbiBvZiBtYXRjaGVzIGFuZCBpbnNlcnRzXHJcbiAqIG5ldyBzdHJpbmdzIGluIHRoZSBkaWN0aW9uYXJ5IG9ubHkgZm9yIHVubWF0Y2hlZCBzdHJpbmdzIG9yIGZvciBzaG9ydFxyXG4gKiBtYXRjaGVzLiBJdCBpcyB1c2VkIG9ubHkgZm9yIHRoZSBmYXN0IGNvbXByZXNzaW9uIG9wdGlvbnMuXHJcbiAqL1xyXG5mdW5jdGlvbiBkZWZsYXRlX2Zhc3QocywgZmx1c2gpIHtcclxuICB2YXIgaGFzaF9oZWFkOyAgICAgICAgLyogaGVhZCBvZiB0aGUgaGFzaCBjaGFpbiAqL1xyXG4gIHZhciBiZmx1c2g7ICAgICAgICAgICAvKiBzZXQgaWYgY3VycmVudCBibG9jayBtdXN0IGJlIGZsdXNoZWQgKi9cclxuXHJcbiAgZm9yICg7Oykge1xyXG4gICAgLyogTWFrZSBzdXJlIHRoYXQgd2UgYWx3YXlzIGhhdmUgZW5vdWdoIGxvb2thaGVhZCwgZXhjZXB0XHJcbiAgICAgKiBhdCB0aGUgZW5kIG9mIHRoZSBpbnB1dCBmaWxlLiBXZSBuZWVkIE1BWF9NQVRDSCBieXRlc1xyXG4gICAgICogZm9yIHRoZSBuZXh0IG1hdGNoLCBwbHVzIE1JTl9NQVRDSCBieXRlcyB0byBpbnNlcnQgdGhlXHJcbiAgICAgKiBzdHJpbmcgZm9sbG93aW5nIHRoZSBuZXh0IG1hdGNoLlxyXG4gICAgICovXHJcbiAgICBpZiAocy5sb29rYWhlYWQgPCBNSU5fTE9PS0FIRUFEKSB7XHJcbiAgICAgIGZpbGxfd2luZG93KHMpO1xyXG4gICAgICBpZiAocy5sb29rYWhlYWQgPCBNSU5fTE9PS0FIRUFEICYmIGZsdXNoID09PSBaX05PX0ZMVVNIKSB7XHJcbiAgICAgICAgcmV0dXJuIEJTX05FRURfTU9SRTtcclxuICAgICAgfVxyXG4gICAgICBpZiAocy5sb29rYWhlYWQgPT09IDApIHtcclxuICAgICAgICBicmVhazsgLyogZmx1c2ggdGhlIGN1cnJlbnQgYmxvY2sgKi9cclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qIEluc2VydCB0aGUgc3RyaW5nIHdpbmRvd1tzdHJzdGFydCAuLiBzdHJzdGFydCsyXSBpbiB0aGVcclxuICAgICAqIGRpY3Rpb25hcnksIGFuZCBzZXQgaGFzaF9oZWFkIHRvIHRoZSBoZWFkIG9mIHRoZSBoYXNoIGNoYWluOlxyXG4gICAgICovXHJcbiAgICBoYXNoX2hlYWQgPSAwLypOSUwqLztcclxuICAgIGlmIChzLmxvb2thaGVhZCA+PSBNSU5fTUFUQ0gpIHtcclxuICAgICAgLyoqKiBJTlNFUlRfU1RSSU5HKHMsIHMuc3Ryc3RhcnQsIGhhc2hfaGVhZCk7ICoqKi9cclxuICAgICAgcy5pbnNfaCA9ICgocy5pbnNfaCA8PCBzLmhhc2hfc2hpZnQpIF4gcy53aW5kb3dbcy5zdHJzdGFydCArIE1JTl9NQVRDSCAtIDFdKSAmIHMuaGFzaF9tYXNrO1xyXG4gICAgICBoYXNoX2hlYWQgPSBzLnByZXZbcy5zdHJzdGFydCAmIHMud19tYXNrXSA9IHMuaGVhZFtzLmluc19oXTtcclxuICAgICAgcy5oZWFkW3MuaW5zX2hdID0gcy5zdHJzdGFydDtcclxuICAgICAgLyoqKi9cclxuICAgIH1cclxuXHJcbiAgICAvKiBGaW5kIHRoZSBsb25nZXN0IG1hdGNoLCBkaXNjYXJkaW5nIHRob3NlIDw9IHByZXZfbGVuZ3RoLlxyXG4gICAgICogQXQgdGhpcyBwb2ludCB3ZSBoYXZlIGFsd2F5cyBtYXRjaF9sZW5ndGggPCBNSU5fTUFUQ0hcclxuICAgICAqL1xyXG4gICAgaWYgKGhhc2hfaGVhZCAhPT0gMC8qTklMKi8gJiYgKChzLnN0cnN0YXJ0IC0gaGFzaF9oZWFkKSA8PSAocy53X3NpemUgLSBNSU5fTE9PS0FIRUFEKSkpIHtcclxuICAgICAgLyogVG8gc2ltcGxpZnkgdGhlIGNvZGUsIHdlIHByZXZlbnQgbWF0Y2hlcyB3aXRoIHRoZSBzdHJpbmdcclxuICAgICAgICogb2Ygd2luZG93IGluZGV4IDAgKGluIHBhcnRpY3VsYXIgd2UgaGF2ZSB0byBhdm9pZCBhIG1hdGNoXHJcbiAgICAgICAqIG9mIHRoZSBzdHJpbmcgd2l0aCBpdHNlbGYgYXQgdGhlIHN0YXJ0IG9mIHRoZSBpbnB1dCBmaWxlKS5cclxuICAgICAgICovXHJcbiAgICAgIHMubWF0Y2hfbGVuZ3RoID0gbG9uZ2VzdF9tYXRjaChzLCBoYXNoX2hlYWQpO1xyXG4gICAgICAvKiBsb25nZXN0X21hdGNoKCkgc2V0cyBtYXRjaF9zdGFydCAqL1xyXG4gICAgfVxyXG4gICAgaWYgKHMubWF0Y2hfbGVuZ3RoID49IE1JTl9NQVRDSCkge1xyXG4gICAgICAvLyBjaGVja19tYXRjaChzLCBzLnN0cnN0YXJ0LCBzLm1hdGNoX3N0YXJ0LCBzLm1hdGNoX2xlbmd0aCk7IC8vIGZvciBkZWJ1ZyBvbmx5XHJcblxyXG4gICAgICAvKioqIF90cl90YWxseV9kaXN0KHMsIHMuc3Ryc3RhcnQgLSBzLm1hdGNoX3N0YXJ0LFxyXG4gICAgICAgICAgICAgICAgICAgICBzLm1hdGNoX2xlbmd0aCAtIE1JTl9NQVRDSCwgYmZsdXNoKTsgKioqL1xyXG4gICAgICBiZmx1c2ggPSB0cmVlcy5fdHJfdGFsbHkocywgcy5zdHJzdGFydCAtIHMubWF0Y2hfc3RhcnQsIHMubWF0Y2hfbGVuZ3RoIC0gTUlOX01BVENIKTtcclxuXHJcbiAgICAgIHMubG9va2FoZWFkIC09IHMubWF0Y2hfbGVuZ3RoO1xyXG5cclxuICAgICAgLyogSW5zZXJ0IG5ldyBzdHJpbmdzIGluIHRoZSBoYXNoIHRhYmxlIG9ubHkgaWYgdGhlIG1hdGNoIGxlbmd0aFxyXG4gICAgICAgKiBpcyBub3QgdG9vIGxhcmdlLiBUaGlzIHNhdmVzIHRpbWUgYnV0IGRlZ3JhZGVzIGNvbXByZXNzaW9uLlxyXG4gICAgICAgKi9cclxuICAgICAgaWYgKHMubWF0Y2hfbGVuZ3RoIDw9IHMubWF4X2xhenlfbWF0Y2gvKm1heF9pbnNlcnRfbGVuZ3RoKi8gJiYgcy5sb29rYWhlYWQgPj0gTUlOX01BVENIKSB7XHJcbiAgICAgICAgcy5tYXRjaF9sZW5ndGgtLTsgLyogc3RyaW5nIGF0IHN0cnN0YXJ0IGFscmVhZHkgaW4gdGFibGUgKi9cclxuICAgICAgICBkbyB7XHJcbiAgICAgICAgICBzLnN0cnN0YXJ0Kys7XHJcbiAgICAgICAgICAvKioqIElOU0VSVF9TVFJJTkcocywgcy5zdHJzdGFydCwgaGFzaF9oZWFkKTsgKioqL1xyXG4gICAgICAgICAgcy5pbnNfaCA9ICgocy5pbnNfaCA8PCBzLmhhc2hfc2hpZnQpIF4gcy53aW5kb3dbcy5zdHJzdGFydCArIE1JTl9NQVRDSCAtIDFdKSAmIHMuaGFzaF9tYXNrO1xyXG4gICAgICAgICAgaGFzaF9oZWFkID0gcy5wcmV2W3Muc3Ryc3RhcnQgJiBzLndfbWFza10gPSBzLmhlYWRbcy5pbnNfaF07XHJcbiAgICAgICAgICBzLmhlYWRbcy5pbnNfaF0gPSBzLnN0cnN0YXJ0O1xyXG4gICAgICAgICAgLyoqKi9cclxuICAgICAgICAgIC8qIHN0cnN0YXJ0IG5ldmVyIGV4Y2VlZHMgV1NJWkUtTUFYX01BVENILCBzbyB0aGVyZSBhcmVcclxuICAgICAgICAgICAqIGFsd2F5cyBNSU5fTUFUQ0ggYnl0ZXMgYWhlYWQuXHJcbiAgICAgICAgICAgKi9cclxuICAgICAgICB9IHdoaWxlICgtLXMubWF0Y2hfbGVuZ3RoICE9PSAwKTtcclxuICAgICAgICBzLnN0cnN0YXJ0Kys7XHJcbiAgICAgIH0gZWxzZVxyXG4gICAgICB7XHJcbiAgICAgICAgcy5zdHJzdGFydCArPSBzLm1hdGNoX2xlbmd0aDtcclxuICAgICAgICBzLm1hdGNoX2xlbmd0aCA9IDA7XHJcbiAgICAgICAgcy5pbnNfaCA9IHMud2luZG93W3Muc3Ryc3RhcnRdO1xyXG4gICAgICAgIC8qIFVQREFURV9IQVNIKHMsIHMuaW5zX2gsIHMud2luZG93W3Muc3Ryc3RhcnQrMV0pOyAqL1xyXG4gICAgICAgIHMuaW5zX2ggPSAoKHMuaW5zX2ggPDwgcy5oYXNoX3NoaWZ0KSBeIHMud2luZG93W3Muc3Ryc3RhcnQgKyAxXSkgJiBzLmhhc2hfbWFzaztcclxuXHJcbi8vI2lmIE1JTl9NQVRDSCAhPSAzXHJcbi8vICAgICAgICAgICAgICAgIENhbGwgVVBEQVRFX0hBU0goKSBNSU5fTUFUQ0gtMyBtb3JlIHRpbWVzXHJcbi8vI2VuZGlmXHJcbiAgICAgICAgLyogSWYgbG9va2FoZWFkIDwgTUlOX01BVENILCBpbnNfaCBpcyBnYXJiYWdlLCBidXQgaXQgZG9lcyBub3RcclxuICAgICAgICAgKiBtYXR0ZXIgc2luY2UgaXQgd2lsbCBiZSByZWNvbXB1dGVkIGF0IG5leHQgZGVmbGF0ZSBjYWxsLlxyXG4gICAgICAgICAqL1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAvKiBObyBtYXRjaCwgb3V0cHV0IGEgbGl0ZXJhbCBieXRlICovXHJcbiAgICAgIC8vVHJhY2V2digoc3RkZXJyLFwiJWNcIiwgcy53aW5kb3dbcy5zdHJzdGFydF0pKTtcclxuICAgICAgLyoqKiBfdHJfdGFsbHlfbGl0KHMsIHMud2luZG93W3Muc3Ryc3RhcnRdLCBiZmx1c2gpOyAqKiovXHJcbiAgICAgIGJmbHVzaCA9IHRyZWVzLl90cl90YWxseShzLCAwLCBzLndpbmRvd1tzLnN0cnN0YXJ0XSk7XHJcblxyXG4gICAgICBzLmxvb2thaGVhZC0tO1xyXG4gICAgICBzLnN0cnN0YXJ0Kys7XHJcbiAgICB9XHJcbiAgICBpZiAoYmZsdXNoKSB7XHJcbiAgICAgIC8qKiogRkxVU0hfQkxPQ0socywgMCk7ICoqKi9cclxuICAgICAgZmx1c2hfYmxvY2tfb25seShzLCBmYWxzZSk7XHJcbiAgICAgIGlmIChzLnN0cm0uYXZhaWxfb3V0ID09PSAwKSB7XHJcbiAgICAgICAgcmV0dXJuIEJTX05FRURfTU9SRTtcclxuICAgICAgfVxyXG4gICAgICAvKioqL1xyXG4gICAgfVxyXG4gIH1cclxuICBzLmluc2VydCA9ICgocy5zdHJzdGFydCA8IChNSU5fTUFUQ0ggLSAxKSkgPyBzLnN0cnN0YXJ0IDogTUlOX01BVENIIC0gMSk7XHJcbiAgaWYgKGZsdXNoID09PSBaX0ZJTklTSCkge1xyXG4gICAgLyoqKiBGTFVTSF9CTE9DSyhzLCAxKTsgKioqL1xyXG4gICAgZmx1c2hfYmxvY2tfb25seShzLCB0cnVlKTtcclxuICAgIGlmIChzLnN0cm0uYXZhaWxfb3V0ID09PSAwKSB7XHJcbiAgICAgIHJldHVybiBCU19GSU5JU0hfU1RBUlRFRDtcclxuICAgIH1cclxuICAgIC8qKiovXHJcbiAgICByZXR1cm4gQlNfRklOSVNIX0RPTkU7XHJcbiAgfVxyXG4gIGlmIChzLmxhc3RfbGl0KSB7XHJcbiAgICAvKioqIEZMVVNIX0JMT0NLKHMsIDApOyAqKiovXHJcbiAgICBmbHVzaF9ibG9ja19vbmx5KHMsIGZhbHNlKTtcclxuICAgIGlmIChzLnN0cm0uYXZhaWxfb3V0ID09PSAwKSB7XHJcbiAgICAgIHJldHVybiBCU19ORUVEX01PUkU7XHJcbiAgICB9XHJcbiAgICAvKioqL1xyXG4gIH1cclxuICByZXR1cm4gQlNfQkxPQ0tfRE9ORTtcclxufVxyXG5cclxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbiAqIFNhbWUgYXMgYWJvdmUsIGJ1dCBhY2hpZXZlcyBiZXR0ZXIgY29tcHJlc3Npb24uIFdlIHVzZSBhIGxhenlcclxuICogZXZhbHVhdGlvbiBmb3IgbWF0Y2hlczogYSBtYXRjaCBpcyBmaW5hbGx5IGFkb3B0ZWQgb25seSBpZiB0aGVyZSBpc1xyXG4gKiBubyBiZXR0ZXIgbWF0Y2ggYXQgdGhlIG5leHQgd2luZG93IHBvc2l0aW9uLlxyXG4gKi9cclxuZnVuY3Rpb24gZGVmbGF0ZV9zbG93KHMsIGZsdXNoKSB7XHJcbiAgdmFyIGhhc2hfaGVhZDsgICAgICAgICAgLyogaGVhZCBvZiBoYXNoIGNoYWluICovXHJcbiAgdmFyIGJmbHVzaDsgICAgICAgICAgICAgIC8qIHNldCBpZiBjdXJyZW50IGJsb2NrIG11c3QgYmUgZmx1c2hlZCAqL1xyXG5cclxuICB2YXIgbWF4X2luc2VydDtcclxuXHJcbiAgLyogUHJvY2VzcyB0aGUgaW5wdXQgYmxvY2suICovXHJcbiAgZm9yICg7Oykge1xyXG4gICAgLyogTWFrZSBzdXJlIHRoYXQgd2UgYWx3YXlzIGhhdmUgZW5vdWdoIGxvb2thaGVhZCwgZXhjZXB0XHJcbiAgICAgKiBhdCB0aGUgZW5kIG9mIHRoZSBpbnB1dCBmaWxlLiBXZSBuZWVkIE1BWF9NQVRDSCBieXRlc1xyXG4gICAgICogZm9yIHRoZSBuZXh0IG1hdGNoLCBwbHVzIE1JTl9NQVRDSCBieXRlcyB0byBpbnNlcnQgdGhlXHJcbiAgICAgKiBzdHJpbmcgZm9sbG93aW5nIHRoZSBuZXh0IG1hdGNoLlxyXG4gICAgICovXHJcbiAgICBpZiAocy5sb29rYWhlYWQgPCBNSU5fTE9PS0FIRUFEKSB7XHJcbiAgICAgIGZpbGxfd2luZG93KHMpO1xyXG4gICAgICBpZiAocy5sb29rYWhlYWQgPCBNSU5fTE9PS0FIRUFEICYmIGZsdXNoID09PSBaX05PX0ZMVVNIKSB7XHJcbiAgICAgICAgcmV0dXJuIEJTX05FRURfTU9SRTtcclxuICAgICAgfVxyXG4gICAgICBpZiAocy5sb29rYWhlYWQgPT09IDApIHsgYnJlYWs7IH0gLyogZmx1c2ggdGhlIGN1cnJlbnQgYmxvY2sgKi9cclxuICAgIH1cclxuXHJcbiAgICAvKiBJbnNlcnQgdGhlIHN0cmluZyB3aW5kb3dbc3Ryc3RhcnQgLi4gc3Ryc3RhcnQrMl0gaW4gdGhlXHJcbiAgICAgKiBkaWN0aW9uYXJ5LCBhbmQgc2V0IGhhc2hfaGVhZCB0byB0aGUgaGVhZCBvZiB0aGUgaGFzaCBjaGFpbjpcclxuICAgICAqL1xyXG4gICAgaGFzaF9oZWFkID0gMC8qTklMKi87XHJcbiAgICBpZiAocy5sb29rYWhlYWQgPj0gTUlOX01BVENIKSB7XHJcbiAgICAgIC8qKiogSU5TRVJUX1NUUklORyhzLCBzLnN0cnN0YXJ0LCBoYXNoX2hlYWQpOyAqKiovXHJcbiAgICAgIHMuaW5zX2ggPSAoKHMuaW5zX2ggPDwgcy5oYXNoX3NoaWZ0KSBeIHMud2luZG93W3Muc3Ryc3RhcnQgKyBNSU5fTUFUQ0ggLSAxXSkgJiBzLmhhc2hfbWFzaztcclxuICAgICAgaGFzaF9oZWFkID0gcy5wcmV2W3Muc3Ryc3RhcnQgJiBzLndfbWFza10gPSBzLmhlYWRbcy5pbnNfaF07XHJcbiAgICAgIHMuaGVhZFtzLmluc19oXSA9IHMuc3Ryc3RhcnQ7XHJcbiAgICAgIC8qKiovXHJcbiAgICB9XHJcblxyXG4gICAgLyogRmluZCB0aGUgbG9uZ2VzdCBtYXRjaCwgZGlzY2FyZGluZyB0aG9zZSA8PSBwcmV2X2xlbmd0aC5cclxuICAgICAqL1xyXG4gICAgcy5wcmV2X2xlbmd0aCA9IHMubWF0Y2hfbGVuZ3RoO1xyXG4gICAgcy5wcmV2X21hdGNoID0gcy5tYXRjaF9zdGFydDtcclxuICAgIHMubWF0Y2hfbGVuZ3RoID0gTUlOX01BVENIIC0gMTtcclxuXHJcbiAgICBpZiAoaGFzaF9oZWFkICE9PSAwLypOSUwqLyAmJiBzLnByZXZfbGVuZ3RoIDwgcy5tYXhfbGF6eV9tYXRjaCAmJlxyXG4gICAgICAgIHMuc3Ryc3RhcnQgLSBoYXNoX2hlYWQgPD0gKHMud19zaXplIC0gTUlOX0xPT0tBSEVBRCkvKk1BWF9ESVNUKHMpKi8pIHtcclxuICAgICAgLyogVG8gc2ltcGxpZnkgdGhlIGNvZGUsIHdlIHByZXZlbnQgbWF0Y2hlcyB3aXRoIHRoZSBzdHJpbmdcclxuICAgICAgICogb2Ygd2luZG93IGluZGV4IDAgKGluIHBhcnRpY3VsYXIgd2UgaGF2ZSB0byBhdm9pZCBhIG1hdGNoXHJcbiAgICAgICAqIG9mIHRoZSBzdHJpbmcgd2l0aCBpdHNlbGYgYXQgdGhlIHN0YXJ0IG9mIHRoZSBpbnB1dCBmaWxlKS5cclxuICAgICAgICovXHJcbiAgICAgIHMubWF0Y2hfbGVuZ3RoID0gbG9uZ2VzdF9tYXRjaChzLCBoYXNoX2hlYWQpO1xyXG4gICAgICAvKiBsb25nZXN0X21hdGNoKCkgc2V0cyBtYXRjaF9zdGFydCAqL1xyXG5cclxuICAgICAgaWYgKHMubWF0Y2hfbGVuZ3RoIDw9IDUgJiZcclxuICAgICAgICAgKHMuc3RyYXRlZ3kgPT09IFpfRklMVEVSRUQgfHwgKHMubWF0Y2hfbGVuZ3RoID09PSBNSU5fTUFUQ0ggJiYgcy5zdHJzdGFydCAtIHMubWF0Y2hfc3RhcnQgPiA0MDk2LypUT09fRkFSKi8pKSkge1xyXG5cclxuICAgICAgICAvKiBJZiBwcmV2X21hdGNoIGlzIGFsc28gTUlOX01BVENILCBtYXRjaF9zdGFydCBpcyBnYXJiYWdlXHJcbiAgICAgICAgICogYnV0IHdlIHdpbGwgaWdub3JlIHRoZSBjdXJyZW50IG1hdGNoIGFueXdheS5cclxuICAgICAgICAgKi9cclxuICAgICAgICBzLm1hdGNoX2xlbmd0aCA9IE1JTl9NQVRDSCAtIDE7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIC8qIElmIHRoZXJlIHdhcyBhIG1hdGNoIGF0IHRoZSBwcmV2aW91cyBzdGVwIGFuZCB0aGUgY3VycmVudFxyXG4gICAgICogbWF0Y2ggaXMgbm90IGJldHRlciwgb3V0cHV0IHRoZSBwcmV2aW91cyBtYXRjaDpcclxuICAgICAqL1xyXG4gICAgaWYgKHMucHJldl9sZW5ndGggPj0gTUlOX01BVENIICYmIHMubWF0Y2hfbGVuZ3RoIDw9IHMucHJldl9sZW5ndGgpIHtcclxuICAgICAgbWF4X2luc2VydCA9IHMuc3Ryc3RhcnQgKyBzLmxvb2thaGVhZCAtIE1JTl9NQVRDSDtcclxuICAgICAgLyogRG8gbm90IGluc2VydCBzdHJpbmdzIGluIGhhc2ggdGFibGUgYmV5b25kIHRoaXMuICovXHJcblxyXG4gICAgICAvL2NoZWNrX21hdGNoKHMsIHMuc3Ryc3RhcnQtMSwgcy5wcmV2X21hdGNoLCBzLnByZXZfbGVuZ3RoKTtcclxuXHJcbiAgICAgIC8qKipfdHJfdGFsbHlfZGlzdChzLCBzLnN0cnN0YXJ0IC0gMSAtIHMucHJldl9tYXRjaCxcclxuICAgICAgICAgICAgICAgICAgICAgcy5wcmV2X2xlbmd0aCAtIE1JTl9NQVRDSCwgYmZsdXNoKTsqKiovXHJcbiAgICAgIGJmbHVzaCA9IHRyZWVzLl90cl90YWxseShzLCBzLnN0cnN0YXJ0IC0gMSAtIHMucHJldl9tYXRjaCwgcy5wcmV2X2xlbmd0aCAtIE1JTl9NQVRDSCk7XHJcbiAgICAgIC8qIEluc2VydCBpbiBoYXNoIHRhYmxlIGFsbCBzdHJpbmdzIHVwIHRvIHRoZSBlbmQgb2YgdGhlIG1hdGNoLlxyXG4gICAgICAgKiBzdHJzdGFydC0xIGFuZCBzdHJzdGFydCBhcmUgYWxyZWFkeSBpbnNlcnRlZC4gSWYgdGhlcmUgaXMgbm90XHJcbiAgICAgICAqIGVub3VnaCBsb29rYWhlYWQsIHRoZSBsYXN0IHR3byBzdHJpbmdzIGFyZSBub3QgaW5zZXJ0ZWQgaW5cclxuICAgICAgICogdGhlIGhhc2ggdGFibGUuXHJcbiAgICAgICAqL1xyXG4gICAgICBzLmxvb2thaGVhZCAtPSBzLnByZXZfbGVuZ3RoIC0gMTtcclxuICAgICAgcy5wcmV2X2xlbmd0aCAtPSAyO1xyXG4gICAgICBkbyB7XHJcbiAgICAgICAgaWYgKCsrcy5zdHJzdGFydCA8PSBtYXhfaW5zZXJ0KSB7XHJcbiAgICAgICAgICAvKioqIElOU0VSVF9TVFJJTkcocywgcy5zdHJzdGFydCwgaGFzaF9oZWFkKTsgKioqL1xyXG4gICAgICAgICAgcy5pbnNfaCA9ICgocy5pbnNfaCA8PCBzLmhhc2hfc2hpZnQpIF4gcy53aW5kb3dbcy5zdHJzdGFydCArIE1JTl9NQVRDSCAtIDFdKSAmIHMuaGFzaF9tYXNrO1xyXG4gICAgICAgICAgaGFzaF9oZWFkID0gcy5wcmV2W3Muc3Ryc3RhcnQgJiBzLndfbWFza10gPSBzLmhlYWRbcy5pbnNfaF07XHJcbiAgICAgICAgICBzLmhlYWRbcy5pbnNfaF0gPSBzLnN0cnN0YXJ0O1xyXG4gICAgICAgICAgLyoqKi9cclxuICAgICAgICB9XHJcbiAgICAgIH0gd2hpbGUgKC0tcy5wcmV2X2xlbmd0aCAhPT0gMCk7XHJcbiAgICAgIHMubWF0Y2hfYXZhaWxhYmxlID0gMDtcclxuICAgICAgcy5tYXRjaF9sZW5ndGggPSBNSU5fTUFUQ0ggLSAxO1xyXG4gICAgICBzLnN0cnN0YXJ0Kys7XHJcblxyXG4gICAgICBpZiAoYmZsdXNoKSB7XHJcbiAgICAgICAgLyoqKiBGTFVTSF9CTE9DSyhzLCAwKTsgKioqL1xyXG4gICAgICAgIGZsdXNoX2Jsb2NrX29ubHkocywgZmFsc2UpO1xyXG4gICAgICAgIGlmIChzLnN0cm0uYXZhaWxfb3V0ID09PSAwKSB7XHJcbiAgICAgICAgICByZXR1cm4gQlNfTkVFRF9NT1JFO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvKioqL1xyXG4gICAgICB9XHJcblxyXG4gICAgfSBlbHNlIGlmIChzLm1hdGNoX2F2YWlsYWJsZSkge1xyXG4gICAgICAvKiBJZiB0aGVyZSB3YXMgbm8gbWF0Y2ggYXQgdGhlIHByZXZpb3VzIHBvc2l0aW9uLCBvdXRwdXQgYVxyXG4gICAgICAgKiBzaW5nbGUgbGl0ZXJhbC4gSWYgdGhlcmUgd2FzIGEgbWF0Y2ggYnV0IHRoZSBjdXJyZW50IG1hdGNoXHJcbiAgICAgICAqIGlzIGxvbmdlciwgdHJ1bmNhdGUgdGhlIHByZXZpb3VzIG1hdGNoIHRvIGEgc2luZ2xlIGxpdGVyYWwuXHJcbiAgICAgICAqL1xyXG4gICAgICAvL1RyYWNldnYoKHN0ZGVycixcIiVjXCIsIHMtPndpbmRvd1tzLT5zdHJzdGFydC0xXSkpO1xyXG4gICAgICAvKioqIF90cl90YWxseV9saXQocywgcy53aW5kb3dbcy5zdHJzdGFydC0xXSwgYmZsdXNoKTsgKioqL1xyXG4gICAgICBiZmx1c2ggPSB0cmVlcy5fdHJfdGFsbHkocywgMCwgcy53aW5kb3dbcy5zdHJzdGFydCAtIDFdKTtcclxuXHJcbiAgICAgIGlmIChiZmx1c2gpIHtcclxuICAgICAgICAvKioqIEZMVVNIX0JMT0NLX09OTFkocywgMCkgKioqL1xyXG4gICAgICAgIGZsdXNoX2Jsb2NrX29ubHkocywgZmFsc2UpO1xyXG4gICAgICAgIC8qKiovXHJcbiAgICAgIH1cclxuICAgICAgcy5zdHJzdGFydCsrO1xyXG4gICAgICBzLmxvb2thaGVhZC0tO1xyXG4gICAgICBpZiAocy5zdHJtLmF2YWlsX291dCA9PT0gMCkge1xyXG4gICAgICAgIHJldHVybiBCU19ORUVEX01PUkU7XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8qIFRoZXJlIGlzIG5vIHByZXZpb3VzIG1hdGNoIHRvIGNvbXBhcmUgd2l0aCwgd2FpdCBmb3JcclxuICAgICAgICogdGhlIG5leHQgc3RlcCB0byBkZWNpZGUuXHJcbiAgICAgICAqL1xyXG4gICAgICBzLm1hdGNoX2F2YWlsYWJsZSA9IDE7XHJcbiAgICAgIHMuc3Ryc3RhcnQrKztcclxuICAgICAgcy5sb29rYWhlYWQtLTtcclxuICAgIH1cclxuICB9XHJcbiAgLy9Bc3NlcnQgKGZsdXNoICE9IFpfTk9fRkxVU0gsIFwibm8gZmx1c2g/XCIpO1xyXG4gIGlmIChzLm1hdGNoX2F2YWlsYWJsZSkge1xyXG4gICAgLy9UcmFjZXZ2KChzdGRlcnIsXCIlY1wiLCBzLT53aW5kb3dbcy0+c3Ryc3RhcnQtMV0pKTtcclxuICAgIC8qKiogX3RyX3RhbGx5X2xpdChzLCBzLndpbmRvd1tzLnN0cnN0YXJ0LTFdLCBiZmx1c2gpOyAqKiovXHJcbiAgICBiZmx1c2ggPSB0cmVlcy5fdHJfdGFsbHkocywgMCwgcy53aW5kb3dbcy5zdHJzdGFydCAtIDFdKTtcclxuXHJcbiAgICBzLm1hdGNoX2F2YWlsYWJsZSA9IDA7XHJcbiAgfVxyXG4gIHMuaW5zZXJ0ID0gcy5zdHJzdGFydCA8IE1JTl9NQVRDSCAtIDEgPyBzLnN0cnN0YXJ0IDogTUlOX01BVENIIC0gMTtcclxuICBpZiAoZmx1c2ggPT09IFpfRklOSVNIKSB7XHJcbiAgICAvKioqIEZMVVNIX0JMT0NLKHMsIDEpOyAqKiovXHJcbiAgICBmbHVzaF9ibG9ja19vbmx5KHMsIHRydWUpO1xyXG4gICAgaWYgKHMuc3RybS5hdmFpbF9vdXQgPT09IDApIHtcclxuICAgICAgcmV0dXJuIEJTX0ZJTklTSF9TVEFSVEVEO1xyXG4gICAgfVxyXG4gICAgLyoqKi9cclxuICAgIHJldHVybiBCU19GSU5JU0hfRE9ORTtcclxuICB9XHJcbiAgaWYgKHMubGFzdF9saXQpIHtcclxuICAgIC8qKiogRkxVU0hfQkxPQ0socywgMCk7ICoqKi9cclxuICAgIGZsdXNoX2Jsb2NrX29ubHkocywgZmFsc2UpO1xyXG4gICAgaWYgKHMuc3RybS5hdmFpbF9vdXQgPT09IDApIHtcclxuICAgICAgcmV0dXJuIEJTX05FRURfTU9SRTtcclxuICAgIH1cclxuICAgIC8qKiovXHJcbiAgfVxyXG5cclxuICByZXR1cm4gQlNfQkxPQ0tfRE9ORTtcclxufVxyXG5cclxuXHJcbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4gKiBGb3IgWl9STEUsIHNpbXBseSBsb29rIGZvciBydW5zIG9mIGJ5dGVzLCBnZW5lcmF0ZSBtYXRjaGVzIG9ubHkgb2YgZGlzdGFuY2VcclxuICogb25lLiAgRG8gbm90IG1haW50YWluIGEgaGFzaCB0YWJsZS4gIChJdCB3aWxsIGJlIHJlZ2VuZXJhdGVkIGlmIHRoaXMgcnVuIG9mXHJcbiAqIGRlZmxhdGUgc3dpdGNoZXMgYXdheSBmcm9tIFpfUkxFLilcclxuICovXHJcbmZ1bmN0aW9uIGRlZmxhdGVfcmxlKHMsIGZsdXNoKSB7XHJcbiAgdmFyIGJmbHVzaDsgICAgICAgICAgICAvKiBzZXQgaWYgY3VycmVudCBibG9jayBtdXN0IGJlIGZsdXNoZWQgKi9cclxuICB2YXIgcHJldjsgICAgICAgICAgICAgIC8qIGJ5dGUgYXQgZGlzdGFuY2Ugb25lIHRvIG1hdGNoICovXHJcbiAgdmFyIHNjYW4sIHN0cmVuZDsgICAgICAvKiBzY2FuIGdvZXMgdXAgdG8gc3RyZW5kIGZvciBsZW5ndGggb2YgcnVuICovXHJcblxyXG4gIHZhciBfd2luID0gcy53aW5kb3c7XHJcblxyXG4gIGZvciAoOzspIHtcclxuICAgIC8qIE1ha2Ugc3VyZSB0aGF0IHdlIGFsd2F5cyBoYXZlIGVub3VnaCBsb29rYWhlYWQsIGV4Y2VwdFxyXG4gICAgICogYXQgdGhlIGVuZCBvZiB0aGUgaW5wdXQgZmlsZS4gV2UgbmVlZCBNQVhfTUFUQ0ggYnl0ZXNcclxuICAgICAqIGZvciB0aGUgbG9uZ2VzdCBydW4sIHBsdXMgb25lIGZvciB0aGUgdW5yb2xsZWQgbG9vcC5cclxuICAgICAqL1xyXG4gICAgaWYgKHMubG9va2FoZWFkIDw9IE1BWF9NQVRDSCkge1xyXG4gICAgICBmaWxsX3dpbmRvdyhzKTtcclxuICAgICAgaWYgKHMubG9va2FoZWFkIDw9IE1BWF9NQVRDSCAmJiBmbHVzaCA9PT0gWl9OT19GTFVTSCkge1xyXG4gICAgICAgIHJldHVybiBCU19ORUVEX01PUkU7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKHMubG9va2FoZWFkID09PSAwKSB7IGJyZWFrOyB9IC8qIGZsdXNoIHRoZSBjdXJyZW50IGJsb2NrICovXHJcbiAgICB9XHJcblxyXG4gICAgLyogU2VlIGhvdyBtYW55IHRpbWVzIHRoZSBwcmV2aW91cyBieXRlIHJlcGVhdHMgKi9cclxuICAgIHMubWF0Y2hfbGVuZ3RoID0gMDtcclxuICAgIGlmIChzLmxvb2thaGVhZCA+PSBNSU5fTUFUQ0ggJiYgcy5zdHJzdGFydCA+IDApIHtcclxuICAgICAgc2NhbiA9IHMuc3Ryc3RhcnQgLSAxO1xyXG4gICAgICBwcmV2ID0gX3dpbltzY2FuXTtcclxuICAgICAgaWYgKHByZXYgPT09IF93aW5bKytzY2FuXSAmJiBwcmV2ID09PSBfd2luWysrc2Nhbl0gJiYgcHJldiA9PT0gX3dpblsrK3NjYW5dKSB7XHJcbiAgICAgICAgc3RyZW5kID0gcy5zdHJzdGFydCArIE1BWF9NQVRDSDtcclxuICAgICAgICBkbyB7XHJcbiAgICAgICAgICAvKmpzaGludCBub2VtcHR5OmZhbHNlKi9cclxuICAgICAgICB9IHdoaWxlIChwcmV2ID09PSBfd2luWysrc2Nhbl0gJiYgcHJldiA9PT0gX3dpblsrK3NjYW5dICYmXHJcbiAgICAgICAgICAgICAgICAgcHJldiA9PT0gX3dpblsrK3NjYW5dICYmIHByZXYgPT09IF93aW5bKytzY2FuXSAmJlxyXG4gICAgICAgICAgICAgICAgIHByZXYgPT09IF93aW5bKytzY2FuXSAmJiBwcmV2ID09PSBfd2luWysrc2Nhbl0gJiZcclxuICAgICAgICAgICAgICAgICBwcmV2ID09PSBfd2luWysrc2Nhbl0gJiYgcHJldiA9PT0gX3dpblsrK3NjYW5dICYmXHJcbiAgICAgICAgICAgICAgICAgc2NhbiA8IHN0cmVuZCk7XHJcbiAgICAgICAgcy5tYXRjaF9sZW5ndGggPSBNQVhfTUFUQ0ggLSAoc3RyZW5kIC0gc2Nhbik7XHJcbiAgICAgICAgaWYgKHMubWF0Y2hfbGVuZ3RoID4gcy5sb29rYWhlYWQpIHtcclxuICAgICAgICAgIHMubWF0Y2hfbGVuZ3RoID0gcy5sb29rYWhlYWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIC8vQXNzZXJ0KHNjYW4gPD0gcy0+d2luZG93Kyh1SW50KShzLT53aW5kb3dfc2l6ZS0xKSwgXCJ3aWxkIHNjYW5cIik7XHJcbiAgICB9XHJcblxyXG4gICAgLyogRW1pdCBtYXRjaCBpZiBoYXZlIHJ1biBvZiBNSU5fTUFUQ0ggb3IgbG9uZ2VyLCBlbHNlIGVtaXQgbGl0ZXJhbCAqL1xyXG4gICAgaWYgKHMubWF0Y2hfbGVuZ3RoID49IE1JTl9NQVRDSCkge1xyXG4gICAgICAvL2NoZWNrX21hdGNoKHMsIHMuc3Ryc3RhcnQsIHMuc3Ryc3RhcnQgLSAxLCBzLm1hdGNoX2xlbmd0aCk7XHJcblxyXG4gICAgICAvKioqIF90cl90YWxseV9kaXN0KHMsIDEsIHMubWF0Y2hfbGVuZ3RoIC0gTUlOX01BVENILCBiZmx1c2gpOyAqKiovXHJcbiAgICAgIGJmbHVzaCA9IHRyZWVzLl90cl90YWxseShzLCAxLCBzLm1hdGNoX2xlbmd0aCAtIE1JTl9NQVRDSCk7XHJcblxyXG4gICAgICBzLmxvb2thaGVhZCAtPSBzLm1hdGNoX2xlbmd0aDtcclxuICAgICAgcy5zdHJzdGFydCArPSBzLm1hdGNoX2xlbmd0aDtcclxuICAgICAgcy5tYXRjaF9sZW5ndGggPSAwO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLyogTm8gbWF0Y2gsIG91dHB1dCBhIGxpdGVyYWwgYnl0ZSAqL1xyXG4gICAgICAvL1RyYWNldnYoKHN0ZGVycixcIiVjXCIsIHMtPndpbmRvd1tzLT5zdHJzdGFydF0pKTtcclxuICAgICAgLyoqKiBfdHJfdGFsbHlfbGl0KHMsIHMud2luZG93W3Muc3Ryc3RhcnRdLCBiZmx1c2gpOyAqKiovXHJcbiAgICAgIGJmbHVzaCA9IHRyZWVzLl90cl90YWxseShzLCAwLCBzLndpbmRvd1tzLnN0cnN0YXJ0XSk7XHJcblxyXG4gICAgICBzLmxvb2thaGVhZC0tO1xyXG4gICAgICBzLnN0cnN0YXJ0Kys7XHJcbiAgICB9XHJcbiAgICBpZiAoYmZsdXNoKSB7XHJcbiAgICAgIC8qKiogRkxVU0hfQkxPQ0socywgMCk7ICoqKi9cclxuICAgICAgZmx1c2hfYmxvY2tfb25seShzLCBmYWxzZSk7XHJcbiAgICAgIGlmIChzLnN0cm0uYXZhaWxfb3V0ID09PSAwKSB7XHJcbiAgICAgICAgcmV0dXJuIEJTX05FRURfTU9SRTtcclxuICAgICAgfVxyXG4gICAgICAvKioqL1xyXG4gICAgfVxyXG4gIH1cclxuICBzLmluc2VydCA9IDA7XHJcbiAgaWYgKGZsdXNoID09PSBaX0ZJTklTSCkge1xyXG4gICAgLyoqKiBGTFVTSF9CTE9DSyhzLCAxKTsgKioqL1xyXG4gICAgZmx1c2hfYmxvY2tfb25seShzLCB0cnVlKTtcclxuICAgIGlmIChzLnN0cm0uYXZhaWxfb3V0ID09PSAwKSB7XHJcbiAgICAgIHJldHVybiBCU19GSU5JU0hfU1RBUlRFRDtcclxuICAgIH1cclxuICAgIC8qKiovXHJcbiAgICByZXR1cm4gQlNfRklOSVNIX0RPTkU7XHJcbiAgfVxyXG4gIGlmIChzLmxhc3RfbGl0KSB7XHJcbiAgICAvKioqIEZMVVNIX0JMT0NLKHMsIDApOyAqKiovXHJcbiAgICBmbHVzaF9ibG9ja19vbmx5KHMsIGZhbHNlKTtcclxuICAgIGlmIChzLnN0cm0uYXZhaWxfb3V0ID09PSAwKSB7XHJcbiAgICAgIHJldHVybiBCU19ORUVEX01PUkU7XHJcbiAgICB9XHJcbiAgICAvKioqL1xyXG4gIH1cclxuICByZXR1cm4gQlNfQkxPQ0tfRE9ORTtcclxufVxyXG5cclxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbiAqIEZvciBaX0hVRkZNQU5fT05MWSwgZG8gbm90IGxvb2sgZm9yIG1hdGNoZXMuICBEbyBub3QgbWFpbnRhaW4gYSBoYXNoIHRhYmxlLlxyXG4gKiAoSXQgd2lsbCBiZSByZWdlbmVyYXRlZCBpZiB0aGlzIHJ1biBvZiBkZWZsYXRlIHN3aXRjaGVzIGF3YXkgZnJvbSBIdWZmbWFuLilcclxuICovXHJcbmZ1bmN0aW9uIGRlZmxhdGVfaHVmZihzLCBmbHVzaCkge1xyXG4gIHZhciBiZmx1c2g7ICAgICAgICAgICAgIC8qIHNldCBpZiBjdXJyZW50IGJsb2NrIG11c3QgYmUgZmx1c2hlZCAqL1xyXG5cclxuICBmb3IgKDs7KSB7XHJcbiAgICAvKiBNYWtlIHN1cmUgdGhhdCB3ZSBoYXZlIGEgbGl0ZXJhbCB0byB3cml0ZS4gKi9cclxuICAgIGlmIChzLmxvb2thaGVhZCA9PT0gMCkge1xyXG4gICAgICBmaWxsX3dpbmRvdyhzKTtcclxuICAgICAgaWYgKHMubG9va2FoZWFkID09PSAwKSB7XHJcbiAgICAgICAgaWYgKGZsdXNoID09PSBaX05PX0ZMVVNIKSB7XHJcbiAgICAgICAgICByZXR1cm4gQlNfTkVFRF9NT1JFO1xyXG4gICAgICAgIH1cclxuICAgICAgICBicmVhazsgICAgICAvKiBmbHVzaCB0aGUgY3VycmVudCBibG9jayAqL1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyogT3V0cHV0IGEgbGl0ZXJhbCBieXRlICovXHJcbiAgICBzLm1hdGNoX2xlbmd0aCA9IDA7XHJcbiAgICAvL1RyYWNldnYoKHN0ZGVycixcIiVjXCIsIHMtPndpbmRvd1tzLT5zdHJzdGFydF0pKTtcclxuICAgIC8qKiogX3RyX3RhbGx5X2xpdChzLCBzLndpbmRvd1tzLnN0cnN0YXJ0XSwgYmZsdXNoKTsgKioqL1xyXG4gICAgYmZsdXNoID0gdHJlZXMuX3RyX3RhbGx5KHMsIDAsIHMud2luZG93W3Muc3Ryc3RhcnRdKTtcclxuICAgIHMubG9va2FoZWFkLS07XHJcbiAgICBzLnN0cnN0YXJ0Kys7XHJcbiAgICBpZiAoYmZsdXNoKSB7XHJcbiAgICAgIC8qKiogRkxVU0hfQkxPQ0socywgMCk7ICoqKi9cclxuICAgICAgZmx1c2hfYmxvY2tfb25seShzLCBmYWxzZSk7XHJcbiAgICAgIGlmIChzLnN0cm0uYXZhaWxfb3V0ID09PSAwKSB7XHJcbiAgICAgICAgcmV0dXJuIEJTX05FRURfTU9SRTtcclxuICAgICAgfVxyXG4gICAgICAvKioqL1xyXG4gICAgfVxyXG4gIH1cclxuICBzLmluc2VydCA9IDA7XHJcbiAgaWYgKGZsdXNoID09PSBaX0ZJTklTSCkge1xyXG4gICAgLyoqKiBGTFVTSF9CTE9DSyhzLCAxKTsgKioqL1xyXG4gICAgZmx1c2hfYmxvY2tfb25seShzLCB0cnVlKTtcclxuICAgIGlmIChzLnN0cm0uYXZhaWxfb3V0ID09PSAwKSB7XHJcbiAgICAgIHJldHVybiBCU19GSU5JU0hfU1RBUlRFRDtcclxuICAgIH1cclxuICAgIC8qKiovXHJcbiAgICByZXR1cm4gQlNfRklOSVNIX0RPTkU7XHJcbiAgfVxyXG4gIGlmIChzLmxhc3RfbGl0KSB7XHJcbiAgICAvKioqIEZMVVNIX0JMT0NLKHMsIDApOyAqKiovXHJcbiAgICBmbHVzaF9ibG9ja19vbmx5KHMsIGZhbHNlKTtcclxuICAgIGlmIChzLnN0cm0uYXZhaWxfb3V0ID09PSAwKSB7XHJcbiAgICAgIHJldHVybiBCU19ORUVEX01PUkU7XHJcbiAgICB9XHJcbiAgICAvKioqL1xyXG4gIH1cclxuICByZXR1cm4gQlNfQkxPQ0tfRE9ORTtcclxufVxyXG5cclxuLyogVmFsdWVzIGZvciBtYXhfbGF6eV9tYXRjaCwgZ29vZF9tYXRjaCBhbmQgbWF4X2NoYWluX2xlbmd0aCwgZGVwZW5kaW5nIG9uXHJcbiAqIHRoZSBkZXNpcmVkIHBhY2sgbGV2ZWwgKDAuLjkpLiBUaGUgdmFsdWVzIGdpdmVuIGJlbG93IGhhdmUgYmVlbiB0dW5lZCB0b1xyXG4gKiBleGNsdWRlIHdvcnN0IGNhc2UgcGVyZm9ybWFuY2UgZm9yIHBhdGhvbG9naWNhbCBmaWxlcy4gQmV0dGVyIHZhbHVlcyBtYXkgYmVcclxuICogZm91bmQgZm9yIHNwZWNpZmljIGZpbGVzLlxyXG4gKi9cclxuZnVuY3Rpb24gQ29uZmlnKGdvb2RfbGVuZ3RoLCBtYXhfbGF6eSwgbmljZV9sZW5ndGgsIG1heF9jaGFpbiwgZnVuYykge1xyXG4gIHRoaXMuZ29vZF9sZW5ndGggPSBnb29kX2xlbmd0aDtcclxuICB0aGlzLm1heF9sYXp5ID0gbWF4X2xhenk7XHJcbiAgdGhpcy5uaWNlX2xlbmd0aCA9IG5pY2VfbGVuZ3RoO1xyXG4gIHRoaXMubWF4X2NoYWluID0gbWF4X2NoYWluO1xyXG4gIHRoaXMuZnVuYyA9IGZ1bmM7XHJcbn1cclxuXHJcbnZhciBjb25maWd1cmF0aW9uX3RhYmxlO1xyXG5cclxuY29uZmlndXJhdGlvbl90YWJsZSA9IFtcclxuICAvKiAgICAgIGdvb2QgbGF6eSBuaWNlIGNoYWluICovXHJcbiAgbmV3IENvbmZpZygwLCAwLCAwLCAwLCBkZWZsYXRlX3N0b3JlZCksICAgICAgICAgIC8qIDAgc3RvcmUgb25seSAqL1xyXG4gIG5ldyBDb25maWcoNCwgNCwgOCwgNCwgZGVmbGF0ZV9mYXN0KSwgICAgICAgICAgICAvKiAxIG1heCBzcGVlZCwgbm8gbGF6eSBtYXRjaGVzICovXHJcbiAgbmV3IENvbmZpZyg0LCA1LCAxNiwgOCwgZGVmbGF0ZV9mYXN0KSwgICAgICAgICAgIC8qIDIgKi9cclxuICBuZXcgQ29uZmlnKDQsIDYsIDMyLCAzMiwgZGVmbGF0ZV9mYXN0KSwgICAgICAgICAgLyogMyAqL1xyXG5cclxuICBuZXcgQ29uZmlnKDQsIDQsIDE2LCAxNiwgZGVmbGF0ZV9zbG93KSwgICAgICAgICAgLyogNCBsYXp5IG1hdGNoZXMgKi9cclxuICBuZXcgQ29uZmlnKDgsIDE2LCAzMiwgMzIsIGRlZmxhdGVfc2xvdyksICAgICAgICAgLyogNSAqL1xyXG4gIG5ldyBDb25maWcoOCwgMTYsIDEyOCwgMTI4LCBkZWZsYXRlX3Nsb3cpLCAgICAgICAvKiA2ICovXHJcbiAgbmV3IENvbmZpZyg4LCAzMiwgMTI4LCAyNTYsIGRlZmxhdGVfc2xvdyksICAgICAgIC8qIDcgKi9cclxuICBuZXcgQ29uZmlnKDMyLCAxMjgsIDI1OCwgMTAyNCwgZGVmbGF0ZV9zbG93KSwgICAgLyogOCAqL1xyXG4gIG5ldyBDb25maWcoMzIsIDI1OCwgMjU4LCA0MDk2LCBkZWZsYXRlX3Nsb3cpICAgICAvKiA5IG1heCBjb21wcmVzc2lvbiAqL1xyXG5dO1xyXG5cclxuXHJcbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4gKiBJbml0aWFsaXplIHRoZSBcImxvbmdlc3QgbWF0Y2hcIiByb3V0aW5lcyBmb3IgYSBuZXcgemxpYiBzdHJlYW1cclxuICovXHJcbmZ1bmN0aW9uIGxtX2luaXQocykge1xyXG4gIHMud2luZG93X3NpemUgPSAyICogcy53X3NpemU7XHJcblxyXG4gIC8qKiogQ0xFQVJfSEFTSChzKTsgKioqL1xyXG4gIHplcm8ocy5oZWFkKTsgLy8gRmlsbCB3aXRoIE5JTCAoPSAwKTtcclxuXHJcbiAgLyogU2V0IHRoZSBkZWZhdWx0IGNvbmZpZ3VyYXRpb24gcGFyYW1ldGVyczpcclxuICAgKi9cclxuICBzLm1heF9sYXp5X21hdGNoID0gY29uZmlndXJhdGlvbl90YWJsZVtzLmxldmVsXS5tYXhfbGF6eTtcclxuICBzLmdvb2RfbWF0Y2ggPSBjb25maWd1cmF0aW9uX3RhYmxlW3MubGV2ZWxdLmdvb2RfbGVuZ3RoO1xyXG4gIHMubmljZV9tYXRjaCA9IGNvbmZpZ3VyYXRpb25fdGFibGVbcy5sZXZlbF0ubmljZV9sZW5ndGg7XHJcbiAgcy5tYXhfY2hhaW5fbGVuZ3RoID0gY29uZmlndXJhdGlvbl90YWJsZVtzLmxldmVsXS5tYXhfY2hhaW47XHJcblxyXG4gIHMuc3Ryc3RhcnQgPSAwO1xyXG4gIHMuYmxvY2tfc3RhcnQgPSAwO1xyXG4gIHMubG9va2FoZWFkID0gMDtcclxuICBzLmluc2VydCA9IDA7XHJcbiAgcy5tYXRjaF9sZW5ndGggPSBzLnByZXZfbGVuZ3RoID0gTUlOX01BVENIIC0gMTtcclxuICBzLm1hdGNoX2F2YWlsYWJsZSA9IDA7XHJcbiAgcy5pbnNfaCA9IDA7XHJcbn1cclxuXHJcblxyXG5mdW5jdGlvbiBEZWZsYXRlU3RhdGUoKSB7XHJcbiAgdGhpcy5zdHJtID0gbnVsbDsgICAgICAgICAgICAvKiBwb2ludGVyIGJhY2sgdG8gdGhpcyB6bGliIHN0cmVhbSAqL1xyXG4gIHRoaXMuc3RhdHVzID0gMDsgICAgICAgICAgICAvKiBhcyB0aGUgbmFtZSBpbXBsaWVzICovXHJcbiAgdGhpcy5wZW5kaW5nX2J1ZiA9IG51bGw7ICAgICAgLyogb3V0cHV0IHN0aWxsIHBlbmRpbmcgKi9cclxuICB0aGlzLnBlbmRpbmdfYnVmX3NpemUgPSAwOyAgLyogc2l6ZSBvZiBwZW5kaW5nX2J1ZiAqL1xyXG4gIHRoaXMucGVuZGluZ19vdXQgPSAwOyAgICAgICAvKiBuZXh0IHBlbmRpbmcgYnl0ZSB0byBvdXRwdXQgdG8gdGhlIHN0cmVhbSAqL1xyXG4gIHRoaXMucGVuZGluZyA9IDA7ICAgICAgICAgICAvKiBuYiBvZiBieXRlcyBpbiB0aGUgcGVuZGluZyBidWZmZXIgKi9cclxuICB0aGlzLndyYXAgPSAwOyAgICAgICAgICAgICAgLyogYml0IDAgdHJ1ZSBmb3IgemxpYiwgYml0IDEgdHJ1ZSBmb3IgZ3ppcCAqL1xyXG4gIHRoaXMuZ3poZWFkID0gbnVsbDsgICAgICAgICAvKiBnemlwIGhlYWRlciBpbmZvcm1hdGlvbiB0byB3cml0ZSAqL1xyXG4gIHRoaXMuZ3ppbmRleCA9IDA7ICAgICAgICAgICAvKiB3aGVyZSBpbiBleHRyYSwgbmFtZSwgb3IgY29tbWVudCAqL1xyXG4gIHRoaXMubWV0aG9kID0gWl9ERUZMQVRFRDsgLyogY2FuIG9ubHkgYmUgREVGTEFURUQgKi9cclxuICB0aGlzLmxhc3RfZmx1c2ggPSAtMTsgICAvKiB2YWx1ZSBvZiBmbHVzaCBwYXJhbSBmb3IgcHJldmlvdXMgZGVmbGF0ZSBjYWxsICovXHJcblxyXG4gIHRoaXMud19zaXplID0gMDsgIC8qIExaNzcgd2luZG93IHNpemUgKDMySyBieSBkZWZhdWx0KSAqL1xyXG4gIHRoaXMud19iaXRzID0gMDsgIC8qIGxvZzIod19zaXplKSAgKDguLjE2KSAqL1xyXG4gIHRoaXMud19tYXNrID0gMDsgIC8qIHdfc2l6ZSAtIDEgKi9cclxuXHJcbiAgdGhpcy53aW5kb3cgPSBudWxsO1xyXG4gIC8qIFNsaWRpbmcgd2luZG93LiBJbnB1dCBieXRlcyBhcmUgcmVhZCBpbnRvIHRoZSBzZWNvbmQgaGFsZiBvZiB0aGUgd2luZG93LFxyXG4gICAqIGFuZCBtb3ZlIHRvIHRoZSBmaXJzdCBoYWxmIGxhdGVyIHRvIGtlZXAgYSBkaWN0aW9uYXJ5IG9mIGF0IGxlYXN0IHdTaXplXHJcbiAgICogYnl0ZXMuIFdpdGggdGhpcyBvcmdhbml6YXRpb24sIG1hdGNoZXMgYXJlIGxpbWl0ZWQgdG8gYSBkaXN0YW5jZSBvZlxyXG4gICAqIHdTaXplLU1BWF9NQVRDSCBieXRlcywgYnV0IHRoaXMgZW5zdXJlcyB0aGF0IElPIGlzIGFsd2F5c1xyXG4gICAqIHBlcmZvcm1lZCB3aXRoIGEgbGVuZ3RoIG11bHRpcGxlIG9mIHRoZSBibG9jayBzaXplLlxyXG4gICAqL1xyXG5cclxuICB0aGlzLndpbmRvd19zaXplID0gMDtcclxuICAvKiBBY3R1YWwgc2l6ZSBvZiB3aW5kb3c6IDIqd1NpemUsIGV4Y2VwdCB3aGVuIHRoZSB1c2VyIGlucHV0IGJ1ZmZlclxyXG4gICAqIGlzIGRpcmVjdGx5IHVzZWQgYXMgc2xpZGluZyB3aW5kb3cuXHJcbiAgICovXHJcblxyXG4gIHRoaXMucHJldiA9IG51bGw7XHJcbiAgLyogTGluayB0byBvbGRlciBzdHJpbmcgd2l0aCBzYW1lIGhhc2ggaW5kZXguIFRvIGxpbWl0IHRoZSBzaXplIG9mIHRoaXNcclxuICAgKiBhcnJheSB0byA2NEssIHRoaXMgbGluayBpcyBtYWludGFpbmVkIG9ubHkgZm9yIHRoZSBsYXN0IDMySyBzdHJpbmdzLlxyXG4gICAqIEFuIGluZGV4IGluIHRoaXMgYXJyYXkgaXMgdGh1cyBhIHdpbmRvdyBpbmRleCBtb2R1bG8gMzJLLlxyXG4gICAqL1xyXG5cclxuICB0aGlzLmhlYWQgPSBudWxsOyAgIC8qIEhlYWRzIG9mIHRoZSBoYXNoIGNoYWlucyBvciBOSUwuICovXHJcblxyXG4gIHRoaXMuaW5zX2ggPSAwOyAgICAgICAvKiBoYXNoIGluZGV4IG9mIHN0cmluZyB0byBiZSBpbnNlcnRlZCAqL1xyXG4gIHRoaXMuaGFzaF9zaXplID0gMDsgICAvKiBudW1iZXIgb2YgZWxlbWVudHMgaW4gaGFzaCB0YWJsZSAqL1xyXG4gIHRoaXMuaGFzaF9iaXRzID0gMDsgICAvKiBsb2cyKGhhc2hfc2l6ZSkgKi9cclxuICB0aGlzLmhhc2hfbWFzayA9IDA7ICAgLyogaGFzaF9zaXplLTEgKi9cclxuXHJcbiAgdGhpcy5oYXNoX3NoaWZ0ID0gMDtcclxuICAvKiBOdW1iZXIgb2YgYml0cyBieSB3aGljaCBpbnNfaCBtdXN0IGJlIHNoaWZ0ZWQgYXQgZWFjaCBpbnB1dFxyXG4gICAqIHN0ZXAuIEl0IG11c3QgYmUgc3VjaCB0aGF0IGFmdGVyIE1JTl9NQVRDSCBzdGVwcywgdGhlIG9sZGVzdFxyXG4gICAqIGJ5dGUgbm8gbG9uZ2VyIHRha2VzIHBhcnQgaW4gdGhlIGhhc2gga2V5LCB0aGF0IGlzOlxyXG4gICAqICAgaGFzaF9zaGlmdCAqIE1JTl9NQVRDSCA+PSBoYXNoX2JpdHNcclxuICAgKi9cclxuXHJcbiAgdGhpcy5ibG9ja19zdGFydCA9IDA7XHJcbiAgLyogV2luZG93IHBvc2l0aW9uIGF0IHRoZSBiZWdpbm5pbmcgb2YgdGhlIGN1cnJlbnQgb3V0cHV0IGJsb2NrLiBHZXRzXHJcbiAgICogbmVnYXRpdmUgd2hlbiB0aGUgd2luZG93IGlzIG1vdmVkIGJhY2t3YXJkcy5cclxuICAgKi9cclxuXHJcbiAgdGhpcy5tYXRjaF9sZW5ndGggPSAwOyAgICAgIC8qIGxlbmd0aCBvZiBiZXN0IG1hdGNoICovXHJcbiAgdGhpcy5wcmV2X21hdGNoID0gMDsgICAgICAgIC8qIHByZXZpb3VzIG1hdGNoICovXHJcbiAgdGhpcy5tYXRjaF9hdmFpbGFibGUgPSAwOyAgIC8qIHNldCBpZiBwcmV2aW91cyBtYXRjaCBleGlzdHMgKi9cclxuICB0aGlzLnN0cnN0YXJ0ID0gMDsgICAgICAgICAgLyogc3RhcnQgb2Ygc3RyaW5nIHRvIGluc2VydCAqL1xyXG4gIHRoaXMubWF0Y2hfc3RhcnQgPSAwOyAgICAgICAvKiBzdGFydCBvZiBtYXRjaGluZyBzdHJpbmcgKi9cclxuICB0aGlzLmxvb2thaGVhZCA9IDA7ICAgICAgICAgLyogbnVtYmVyIG9mIHZhbGlkIGJ5dGVzIGFoZWFkIGluIHdpbmRvdyAqL1xyXG5cclxuICB0aGlzLnByZXZfbGVuZ3RoID0gMDtcclxuICAvKiBMZW5ndGggb2YgdGhlIGJlc3QgbWF0Y2ggYXQgcHJldmlvdXMgc3RlcC4gTWF0Y2hlcyBub3QgZ3JlYXRlciB0aGFuIHRoaXNcclxuICAgKiBhcmUgZGlzY2FyZGVkLiBUaGlzIGlzIHVzZWQgaW4gdGhlIGxhenkgbWF0Y2ggZXZhbHVhdGlvbi5cclxuICAgKi9cclxuXHJcbiAgdGhpcy5tYXhfY2hhaW5fbGVuZ3RoID0gMDtcclxuICAvKiBUbyBzcGVlZCB1cCBkZWZsYXRpb24sIGhhc2ggY2hhaW5zIGFyZSBuZXZlciBzZWFyY2hlZCBiZXlvbmQgdGhpc1xyXG4gICAqIGxlbmd0aC4gIEEgaGlnaGVyIGxpbWl0IGltcHJvdmVzIGNvbXByZXNzaW9uIHJhdGlvIGJ1dCBkZWdyYWRlcyB0aGVcclxuICAgKiBzcGVlZC5cclxuICAgKi9cclxuXHJcbiAgdGhpcy5tYXhfbGF6eV9tYXRjaCA9IDA7XHJcbiAgLyogQXR0ZW1wdCB0byBmaW5kIGEgYmV0dGVyIG1hdGNoIG9ubHkgd2hlbiB0aGUgY3VycmVudCBtYXRjaCBpcyBzdHJpY3RseVxyXG4gICAqIHNtYWxsZXIgdGhhbiB0aGlzIHZhbHVlLiBUaGlzIG1lY2hhbmlzbSBpcyB1c2VkIG9ubHkgZm9yIGNvbXByZXNzaW9uXHJcbiAgICogbGV2ZWxzID49IDQuXHJcbiAgICovXHJcbiAgLy8gVGhhdCdzIGFsaWFzIHRvIG1heF9sYXp5X21hdGNoLCBkb24ndCB1c2UgZGlyZWN0bHlcclxuICAvL3RoaXMubWF4X2luc2VydF9sZW5ndGggPSAwO1xyXG4gIC8qIEluc2VydCBuZXcgc3RyaW5ncyBpbiB0aGUgaGFzaCB0YWJsZSBvbmx5IGlmIHRoZSBtYXRjaCBsZW5ndGggaXMgbm90XHJcbiAgICogZ3JlYXRlciB0aGFuIHRoaXMgbGVuZ3RoLiBUaGlzIHNhdmVzIHRpbWUgYnV0IGRlZ3JhZGVzIGNvbXByZXNzaW9uLlxyXG4gICAqIG1heF9pbnNlcnRfbGVuZ3RoIGlzIHVzZWQgb25seSBmb3IgY29tcHJlc3Npb24gbGV2ZWxzIDw9IDMuXHJcbiAgICovXHJcblxyXG4gIHRoaXMubGV2ZWwgPSAwOyAgICAgLyogY29tcHJlc3Npb24gbGV2ZWwgKDEuLjkpICovXHJcbiAgdGhpcy5zdHJhdGVneSA9IDA7ICAvKiBmYXZvciBvciBmb3JjZSBIdWZmbWFuIGNvZGluZyovXHJcblxyXG4gIHRoaXMuZ29vZF9tYXRjaCA9IDA7XHJcbiAgLyogVXNlIGEgZmFzdGVyIHNlYXJjaCB3aGVuIHRoZSBwcmV2aW91cyBtYXRjaCBpcyBsb25nZXIgdGhhbiB0aGlzICovXHJcblxyXG4gIHRoaXMubmljZV9tYXRjaCA9IDA7IC8qIFN0b3Agc2VhcmNoaW5nIHdoZW4gY3VycmVudCBtYXRjaCBleGNlZWRzIHRoaXMgKi9cclxuXHJcbiAgICAgICAgICAgICAgLyogdXNlZCBieSB0cmVlcy5jOiAqL1xyXG5cclxuICAvKiBEaWRuJ3QgdXNlIGN0X2RhdGEgdHlwZWRlZiBiZWxvdyB0byBzdXBwcmVzcyBjb21waWxlciB3YXJuaW5nICovXHJcblxyXG4gIC8vIHN0cnVjdCBjdF9kYXRhX3MgZHluX2x0cmVlW0hFQVBfU0laRV07ICAgLyogbGl0ZXJhbCBhbmQgbGVuZ3RoIHRyZWUgKi9cclxuICAvLyBzdHJ1Y3QgY3RfZGF0YV9zIGR5bl9kdHJlZVsyKkRfQ09ERVMrMV07IC8qIGRpc3RhbmNlIHRyZWUgKi9cclxuICAvLyBzdHJ1Y3QgY3RfZGF0YV9zIGJsX3RyZWVbMipCTF9DT0RFUysxXTsgIC8qIEh1ZmZtYW4gdHJlZSBmb3IgYml0IGxlbmd0aHMgKi9cclxuXHJcbiAgLy8gVXNlIGZsYXQgYXJyYXkgb2YgRE9VQkxFIHNpemUsIHdpdGggaW50ZXJsZWF2ZWQgZmF0YSxcclxuICAvLyBiZWNhdXNlIEpTIGRvZXMgbm90IHN1cHBvcnQgZWZmZWN0aXZlXHJcbiAgdGhpcy5keW5fbHRyZWUgID0gbmV3IHV0aWxzLkJ1ZjE2KEhFQVBfU0laRSAqIDIpO1xyXG4gIHRoaXMuZHluX2R0cmVlICA9IG5ldyB1dGlscy5CdWYxNigoMiAqIERfQ09ERVMgKyAxKSAqIDIpO1xyXG4gIHRoaXMuYmxfdHJlZSAgICA9IG5ldyB1dGlscy5CdWYxNigoMiAqIEJMX0NPREVTICsgMSkgKiAyKTtcclxuICB6ZXJvKHRoaXMuZHluX2x0cmVlKTtcclxuICB6ZXJvKHRoaXMuZHluX2R0cmVlKTtcclxuICB6ZXJvKHRoaXMuYmxfdHJlZSk7XHJcblxyXG4gIHRoaXMubF9kZXNjICAgPSBudWxsOyAgICAgICAgIC8qIGRlc2MuIGZvciBsaXRlcmFsIHRyZWUgKi9cclxuICB0aGlzLmRfZGVzYyAgID0gbnVsbDsgICAgICAgICAvKiBkZXNjLiBmb3IgZGlzdGFuY2UgdHJlZSAqL1xyXG4gIHRoaXMuYmxfZGVzYyAgPSBudWxsOyAgICAgICAgIC8qIGRlc2MuIGZvciBiaXQgbGVuZ3RoIHRyZWUgKi9cclxuXHJcbiAgLy91c2ggYmxfY291bnRbTUFYX0JJVFMrMV07XHJcbiAgdGhpcy5ibF9jb3VudCA9IG5ldyB1dGlscy5CdWYxNihNQVhfQklUUyArIDEpO1xyXG4gIC8qIG51bWJlciBvZiBjb2RlcyBhdCBlYWNoIGJpdCBsZW5ndGggZm9yIGFuIG9wdGltYWwgdHJlZSAqL1xyXG5cclxuICAvL2ludCBoZWFwWzIqTF9DT0RFUysxXTsgICAgICAvKiBoZWFwIHVzZWQgdG8gYnVpbGQgdGhlIEh1ZmZtYW4gdHJlZXMgKi9cclxuICB0aGlzLmhlYXAgPSBuZXcgdXRpbHMuQnVmMTYoMiAqIExfQ09ERVMgKyAxKTsgIC8qIGhlYXAgdXNlZCB0byBidWlsZCB0aGUgSHVmZm1hbiB0cmVlcyAqL1xyXG4gIHplcm8odGhpcy5oZWFwKTtcclxuXHJcbiAgdGhpcy5oZWFwX2xlbiA9IDA7ICAgICAgICAgICAgICAgLyogbnVtYmVyIG9mIGVsZW1lbnRzIGluIHRoZSBoZWFwICovXHJcbiAgdGhpcy5oZWFwX21heCA9IDA7ICAgICAgICAgICAgICAgLyogZWxlbWVudCBvZiBsYXJnZXN0IGZyZXF1ZW5jeSAqL1xyXG4gIC8qIFRoZSBzb25zIG9mIGhlYXBbbl0gYXJlIGhlYXBbMipuXSBhbmQgaGVhcFsyKm4rMV0uIGhlYXBbMF0gaXMgbm90IHVzZWQuXHJcbiAgICogVGhlIHNhbWUgaGVhcCBhcnJheSBpcyB1c2VkIHRvIGJ1aWxkIGFsbCB0cmVlcy5cclxuICAgKi9cclxuXHJcbiAgdGhpcy5kZXB0aCA9IG5ldyB1dGlscy5CdWYxNigyICogTF9DT0RFUyArIDEpOyAvL3VjaCBkZXB0aFsyKkxfQ09ERVMrMV07XHJcbiAgemVybyh0aGlzLmRlcHRoKTtcclxuICAvKiBEZXB0aCBvZiBlYWNoIHN1YnRyZWUgdXNlZCBhcyB0aWUgYnJlYWtlciBmb3IgdHJlZXMgb2YgZXF1YWwgZnJlcXVlbmN5XHJcbiAgICovXHJcblxyXG4gIHRoaXMubF9idWYgPSAwOyAgICAgICAgICAvKiBidWZmZXIgaW5kZXggZm9yIGxpdGVyYWxzIG9yIGxlbmd0aHMgKi9cclxuXHJcbiAgdGhpcy5saXRfYnVmc2l6ZSA9IDA7XHJcbiAgLyogU2l6ZSBvZiBtYXRjaCBidWZmZXIgZm9yIGxpdGVyYWxzL2xlbmd0aHMuICBUaGVyZSBhcmUgNCByZWFzb25zIGZvclxyXG4gICAqIGxpbWl0aW5nIGxpdF9idWZzaXplIHRvIDY0SzpcclxuICAgKiAgIC0gZnJlcXVlbmNpZXMgY2FuIGJlIGtlcHQgaW4gMTYgYml0IGNvdW50ZXJzXHJcbiAgICogICAtIGlmIGNvbXByZXNzaW9uIGlzIG5vdCBzdWNjZXNzZnVsIGZvciB0aGUgZmlyc3QgYmxvY2ssIGFsbCBpbnB1dFxyXG4gICAqICAgICBkYXRhIGlzIHN0aWxsIGluIHRoZSB3aW5kb3cgc28gd2UgY2FuIHN0aWxsIGVtaXQgYSBzdG9yZWQgYmxvY2sgZXZlblxyXG4gICAqICAgICB3aGVuIGlucHV0IGNvbWVzIGZyb20gc3RhbmRhcmQgaW5wdXQuICAoVGhpcyBjYW4gYWxzbyBiZSBkb25lIGZvclxyXG4gICAqICAgICBhbGwgYmxvY2tzIGlmIGxpdF9idWZzaXplIGlzIG5vdCBncmVhdGVyIHRoYW4gMzJLLilcclxuICAgKiAgIC0gaWYgY29tcHJlc3Npb24gaXMgbm90IHN1Y2Nlc3NmdWwgZm9yIGEgZmlsZSBzbWFsbGVyIHRoYW4gNjRLLCB3ZSBjYW5cclxuICAgKiAgICAgZXZlbiBlbWl0IGEgc3RvcmVkIGZpbGUgaW5zdGVhZCBvZiBhIHN0b3JlZCBibG9jayAoc2F2aW5nIDUgYnl0ZXMpLlxyXG4gICAqICAgICBUaGlzIGlzIGFwcGxpY2FibGUgb25seSBmb3IgemlwIChub3QgZ3ppcCBvciB6bGliKS5cclxuICAgKiAgIC0gY3JlYXRpbmcgbmV3IEh1ZmZtYW4gdHJlZXMgbGVzcyBmcmVxdWVudGx5IG1heSBub3QgcHJvdmlkZSBmYXN0XHJcbiAgICogICAgIGFkYXB0YXRpb24gdG8gY2hhbmdlcyBpbiB0aGUgaW5wdXQgZGF0YSBzdGF0aXN0aWNzLiAoVGFrZSBmb3JcclxuICAgKiAgICAgZXhhbXBsZSBhIGJpbmFyeSBmaWxlIHdpdGggcG9vcmx5IGNvbXByZXNzaWJsZSBjb2RlIGZvbGxvd2VkIGJ5XHJcbiAgICogICAgIGEgaGlnaGx5IGNvbXByZXNzaWJsZSBzdHJpbmcgdGFibGUuKSBTbWFsbGVyIGJ1ZmZlciBzaXplcyBnaXZlXHJcbiAgICogICAgIGZhc3QgYWRhcHRhdGlvbiBidXQgaGF2ZSBvZiBjb3Vyc2UgdGhlIG92ZXJoZWFkIG9mIHRyYW5zbWl0dGluZ1xyXG4gICAqICAgICB0cmVlcyBtb3JlIGZyZXF1ZW50bHkuXHJcbiAgICogICAtIEkgY2FuJ3QgY291bnQgYWJvdmUgNFxyXG4gICAqL1xyXG5cclxuICB0aGlzLmxhc3RfbGl0ID0gMDsgICAgICAvKiBydW5uaW5nIGluZGV4IGluIGxfYnVmICovXHJcblxyXG4gIHRoaXMuZF9idWYgPSAwO1xyXG4gIC8qIEJ1ZmZlciBpbmRleCBmb3IgZGlzdGFuY2VzLiBUbyBzaW1wbGlmeSB0aGUgY29kZSwgZF9idWYgYW5kIGxfYnVmIGhhdmVcclxuICAgKiB0aGUgc2FtZSBudW1iZXIgb2YgZWxlbWVudHMuIFRvIHVzZSBkaWZmZXJlbnQgbGVuZ3RocywgYW4gZXh0cmEgZmxhZ1xyXG4gICAqIGFycmF5IHdvdWxkIGJlIG5lY2Vzc2FyeS5cclxuICAgKi9cclxuXHJcbiAgdGhpcy5vcHRfbGVuID0gMDsgICAgICAgLyogYml0IGxlbmd0aCBvZiBjdXJyZW50IGJsb2NrIHdpdGggb3B0aW1hbCB0cmVlcyAqL1xyXG4gIHRoaXMuc3RhdGljX2xlbiA9IDA7ICAgIC8qIGJpdCBsZW5ndGggb2YgY3VycmVudCBibG9jayB3aXRoIHN0YXRpYyB0cmVlcyAqL1xyXG4gIHRoaXMubWF0Y2hlcyA9IDA7ICAgICAgIC8qIG51bWJlciBvZiBzdHJpbmcgbWF0Y2hlcyBpbiBjdXJyZW50IGJsb2NrICovXHJcbiAgdGhpcy5pbnNlcnQgPSAwOyAgICAgICAgLyogYnl0ZXMgYXQgZW5kIG9mIHdpbmRvdyBsZWZ0IHRvIGluc2VydCAqL1xyXG5cclxuXHJcbiAgdGhpcy5iaV9idWYgPSAwO1xyXG4gIC8qIE91dHB1dCBidWZmZXIuIGJpdHMgYXJlIGluc2VydGVkIHN0YXJ0aW5nIGF0IHRoZSBib3R0b20gKGxlYXN0XHJcbiAgICogc2lnbmlmaWNhbnQgYml0cykuXHJcbiAgICovXHJcbiAgdGhpcy5iaV92YWxpZCA9IDA7XHJcbiAgLyogTnVtYmVyIG9mIHZhbGlkIGJpdHMgaW4gYmlfYnVmLiAgQWxsIGJpdHMgYWJvdmUgdGhlIGxhc3QgdmFsaWQgYml0XHJcbiAgICogYXJlIGFsd2F5cyB6ZXJvLlxyXG4gICAqL1xyXG5cclxuICAvLyBVc2VkIGZvciB3aW5kb3cgbWVtb3J5IGluaXQuIFdlIHNhZmVseSBpZ25vcmUgaXQgZm9yIEpTLiBUaGF0IG1ha2VzXHJcbiAgLy8gc2Vuc2Ugb25seSBmb3IgcG9pbnRlcnMgYW5kIG1lbW9yeSBjaGVjayB0b29scy5cclxuICAvL3RoaXMuaGlnaF93YXRlciA9IDA7XHJcbiAgLyogSGlnaCB3YXRlciBtYXJrIG9mZnNldCBpbiB3aW5kb3cgZm9yIGluaXRpYWxpemVkIGJ5dGVzIC0tIGJ5dGVzIGFib3ZlXHJcbiAgICogdGhpcyBhcmUgc2V0IHRvIHplcm8gaW4gb3JkZXIgdG8gYXZvaWQgbWVtb3J5IGNoZWNrIHdhcm5pbmdzIHdoZW5cclxuICAgKiBsb25nZXN0IG1hdGNoIHJvdXRpbmVzIGFjY2VzcyBieXRlcyBwYXN0IHRoZSBpbnB1dC4gIFRoaXMgaXMgdGhlblxyXG4gICAqIHVwZGF0ZWQgdG8gdGhlIG5ldyBoaWdoIHdhdGVyIG1hcmsuXHJcbiAgICovXHJcbn1cclxuXHJcblxyXG5mdW5jdGlvbiBkZWZsYXRlUmVzZXRLZWVwKHN0cm0pIHtcclxuICB2YXIgcztcclxuXHJcbiAgaWYgKCFzdHJtIHx8ICFzdHJtLnN0YXRlKSB7XHJcbiAgICByZXR1cm4gZXJyKHN0cm0sIFpfU1RSRUFNX0VSUk9SKTtcclxuICB9XHJcblxyXG4gIHN0cm0udG90YWxfaW4gPSBzdHJtLnRvdGFsX291dCA9IDA7XHJcbiAgc3RybS5kYXRhX3R5cGUgPSBaX1VOS05PV047XHJcblxyXG4gIHMgPSBzdHJtLnN0YXRlO1xyXG4gIHMucGVuZGluZyA9IDA7XHJcbiAgcy5wZW5kaW5nX291dCA9IDA7XHJcblxyXG4gIGlmIChzLndyYXAgPCAwKSB7XHJcbiAgICBzLndyYXAgPSAtcy53cmFwO1xyXG4gICAgLyogd2FzIG1hZGUgbmVnYXRpdmUgYnkgZGVmbGF0ZSguLi4sIFpfRklOSVNIKTsgKi9cclxuICB9XHJcbiAgcy5zdGF0dXMgPSAocy53cmFwID8gSU5JVF9TVEFURSA6IEJVU1lfU1RBVEUpO1xyXG4gIHN0cm0uYWRsZXIgPSAocy53cmFwID09PSAyKSA/XHJcbiAgICAwICAvLyBjcmMzMigwLCBaX05VTEwsIDApXHJcbiAgOlxyXG4gICAgMTsgLy8gYWRsZXIzMigwLCBaX05VTEwsIDApXHJcbiAgcy5sYXN0X2ZsdXNoID0gWl9OT19GTFVTSDtcclxuICB0cmVlcy5fdHJfaW5pdChzKTtcclxuICByZXR1cm4gWl9PSztcclxufVxyXG5cclxuXHJcbmZ1bmN0aW9uIGRlZmxhdGVSZXNldChzdHJtKSB7XHJcbiAgdmFyIHJldCA9IGRlZmxhdGVSZXNldEtlZXAoc3RybSk7XHJcbiAgaWYgKHJldCA9PT0gWl9PSykge1xyXG4gICAgbG1faW5pdChzdHJtLnN0YXRlKTtcclxuICB9XHJcbiAgcmV0dXJuIHJldDtcclxufVxyXG5cclxuXHJcbmZ1bmN0aW9uIGRlZmxhdGVTZXRIZWFkZXIoc3RybSwgaGVhZCkge1xyXG4gIGlmICghc3RybSB8fCAhc3RybS5zdGF0ZSkgeyByZXR1cm4gWl9TVFJFQU1fRVJST1I7IH1cclxuICBpZiAoc3RybS5zdGF0ZS53cmFwICE9PSAyKSB7IHJldHVybiBaX1NUUkVBTV9FUlJPUjsgfVxyXG4gIHN0cm0uc3RhdGUuZ3poZWFkID0gaGVhZDtcclxuICByZXR1cm4gWl9PSztcclxufVxyXG5cclxuXHJcbmZ1bmN0aW9uIGRlZmxhdGVJbml0MihzdHJtLCBsZXZlbCwgbWV0aG9kLCB3aW5kb3dCaXRzLCBtZW1MZXZlbCwgc3RyYXRlZ3kpIHtcclxuICBpZiAoIXN0cm0pIHsgLy8gPT09IFpfTlVMTFxyXG4gICAgcmV0dXJuIFpfU1RSRUFNX0VSUk9SO1xyXG4gIH1cclxuICB2YXIgd3JhcCA9IDE7XHJcblxyXG4gIGlmIChsZXZlbCA9PT0gWl9ERUZBVUxUX0NPTVBSRVNTSU9OKSB7XHJcbiAgICBsZXZlbCA9IDY7XHJcbiAgfVxyXG5cclxuICBpZiAod2luZG93Qml0cyA8IDApIHsgLyogc3VwcHJlc3MgemxpYiB3cmFwcGVyICovXHJcbiAgICB3cmFwID0gMDtcclxuICAgIHdpbmRvd0JpdHMgPSAtd2luZG93Qml0cztcclxuICB9XHJcblxyXG4gIGVsc2UgaWYgKHdpbmRvd0JpdHMgPiAxNSkge1xyXG4gICAgd3JhcCA9IDI7ICAgICAgICAgICAvKiB3cml0ZSBnemlwIHdyYXBwZXIgaW5zdGVhZCAqL1xyXG4gICAgd2luZG93Qml0cyAtPSAxNjtcclxuICB9XHJcblxyXG5cclxuICBpZiAobWVtTGV2ZWwgPCAxIHx8IG1lbUxldmVsID4gTUFYX01FTV9MRVZFTCB8fCBtZXRob2QgIT09IFpfREVGTEFURUQgfHxcclxuICAgIHdpbmRvd0JpdHMgPCA4IHx8IHdpbmRvd0JpdHMgPiAxNSB8fCBsZXZlbCA8IDAgfHwgbGV2ZWwgPiA5IHx8XHJcbiAgICBzdHJhdGVneSA8IDAgfHwgc3RyYXRlZ3kgPiBaX0ZJWEVEKSB7XHJcbiAgICByZXR1cm4gZXJyKHN0cm0sIFpfU1RSRUFNX0VSUk9SKTtcclxuICB9XHJcblxyXG5cclxuICBpZiAod2luZG93Qml0cyA9PT0gOCkge1xyXG4gICAgd2luZG93Qml0cyA9IDk7XHJcbiAgfVxyXG4gIC8qIHVudGlsIDI1Ni1ieXRlIHdpbmRvdyBidWcgZml4ZWQgKi9cclxuXHJcbiAgdmFyIHMgPSBuZXcgRGVmbGF0ZVN0YXRlKCk7XHJcblxyXG4gIHN0cm0uc3RhdGUgPSBzO1xyXG4gIHMuc3RybSA9IHN0cm07XHJcblxyXG4gIHMud3JhcCA9IHdyYXA7XHJcbiAgcy5nemhlYWQgPSBudWxsO1xyXG4gIHMud19iaXRzID0gd2luZG93Qml0cztcclxuICBzLndfc2l6ZSA9IDEgPDwgcy53X2JpdHM7XHJcbiAgcy53X21hc2sgPSBzLndfc2l6ZSAtIDE7XHJcblxyXG4gIHMuaGFzaF9iaXRzID0gbWVtTGV2ZWwgKyA3O1xyXG4gIHMuaGFzaF9zaXplID0gMSA8PCBzLmhhc2hfYml0cztcclxuICBzLmhhc2hfbWFzayA9IHMuaGFzaF9zaXplIC0gMTtcclxuICBzLmhhc2hfc2hpZnQgPSB+figocy5oYXNoX2JpdHMgKyBNSU5fTUFUQ0ggLSAxKSAvIE1JTl9NQVRDSCk7XHJcblxyXG4gIHMud2luZG93ID0gbmV3IHV0aWxzLkJ1Zjgocy53X3NpemUgKiAyKTtcclxuICBzLmhlYWQgPSBuZXcgdXRpbHMuQnVmMTYocy5oYXNoX3NpemUpO1xyXG4gIHMucHJldiA9IG5ldyB1dGlscy5CdWYxNihzLndfc2l6ZSk7XHJcblxyXG4gIC8vIERvbid0IG5lZWQgbWVtIGluaXQgbWFnaWMgZm9yIEpTLlxyXG4gIC8vcy5oaWdoX3dhdGVyID0gMDsgIC8qIG5vdGhpbmcgd3JpdHRlbiB0byBzLT53aW5kb3cgeWV0ICovXHJcblxyXG4gIHMubGl0X2J1ZnNpemUgPSAxIDw8IChtZW1MZXZlbCArIDYpOyAvKiAxNksgZWxlbWVudHMgYnkgZGVmYXVsdCAqL1xyXG5cclxuICBzLnBlbmRpbmdfYnVmX3NpemUgPSBzLmxpdF9idWZzaXplICogNDtcclxuXHJcbiAgLy9vdmVybGF5ID0gKHVzaGYgKikgWkFMTE9DKHN0cm0sIHMtPmxpdF9idWZzaXplLCBzaXplb2YodXNoKSsyKTtcclxuICAvL3MtPnBlbmRpbmdfYnVmID0gKHVjaGYgKikgb3ZlcmxheTtcclxuICBzLnBlbmRpbmdfYnVmID0gbmV3IHV0aWxzLkJ1Zjgocy5wZW5kaW5nX2J1Zl9zaXplKTtcclxuXHJcbiAgLy8gSXQgaXMgb2Zmc2V0IGZyb20gYHMucGVuZGluZ19idWZgIChzaXplIGlzIGBzLmxpdF9idWZzaXplICogMmApXHJcbiAgLy9zLT5kX2J1ZiA9IG92ZXJsYXkgKyBzLT5saXRfYnVmc2l6ZS9zaXplb2YodXNoKTtcclxuICBzLmRfYnVmID0gMSAqIHMubGl0X2J1ZnNpemU7XHJcblxyXG4gIC8vcy0+bF9idWYgPSBzLT5wZW5kaW5nX2J1ZiArICgxK3NpemVvZih1c2gpKSpzLT5saXRfYnVmc2l6ZTtcclxuICBzLmxfYnVmID0gKDEgKyAyKSAqIHMubGl0X2J1ZnNpemU7XHJcblxyXG4gIHMubGV2ZWwgPSBsZXZlbDtcclxuICBzLnN0cmF0ZWd5ID0gc3RyYXRlZ3k7XHJcbiAgcy5tZXRob2QgPSBtZXRob2Q7XHJcblxyXG4gIHJldHVybiBkZWZsYXRlUmVzZXQoc3RybSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRlZmxhdGVJbml0KHN0cm0sIGxldmVsKSB7XHJcbiAgcmV0dXJuIGRlZmxhdGVJbml0MihzdHJtLCBsZXZlbCwgWl9ERUZMQVRFRCwgTUFYX1dCSVRTLCBERUZfTUVNX0xFVkVMLCBaX0RFRkFVTFRfU1RSQVRFR1kpO1xyXG59XHJcblxyXG5cclxuZnVuY3Rpb24gZGVmbGF0ZShzdHJtLCBmbHVzaCkge1xyXG4gIHZhciBvbGRfZmx1c2gsIHM7XHJcbiAgdmFyIGJlZywgdmFsOyAvLyBmb3IgZ3ppcCBoZWFkZXIgd3JpdGUgb25seVxyXG5cclxuICBpZiAoIXN0cm0gfHwgIXN0cm0uc3RhdGUgfHxcclxuICAgIGZsdXNoID4gWl9CTE9DSyB8fCBmbHVzaCA8IDApIHtcclxuICAgIHJldHVybiBzdHJtID8gZXJyKHN0cm0sIFpfU1RSRUFNX0VSUk9SKSA6IFpfU1RSRUFNX0VSUk9SO1xyXG4gIH1cclxuXHJcbiAgcyA9IHN0cm0uc3RhdGU7XHJcblxyXG4gIGlmICghc3RybS5vdXRwdXQgfHxcclxuICAgICAgKCFzdHJtLmlucHV0ICYmIHN0cm0uYXZhaWxfaW4gIT09IDApIHx8XHJcbiAgICAgIChzLnN0YXR1cyA9PT0gRklOSVNIX1NUQVRFICYmIGZsdXNoICE9PSBaX0ZJTklTSCkpIHtcclxuICAgIHJldHVybiBlcnIoc3RybSwgKHN0cm0uYXZhaWxfb3V0ID09PSAwKSA/IFpfQlVGX0VSUk9SIDogWl9TVFJFQU1fRVJST1IpO1xyXG4gIH1cclxuXHJcbiAgcy5zdHJtID0gc3RybTsgLyoganVzdCBpbiBjYXNlICovXHJcbiAgb2xkX2ZsdXNoID0gcy5sYXN0X2ZsdXNoO1xyXG4gIHMubGFzdF9mbHVzaCA9IGZsdXNoO1xyXG5cclxuICAvKiBXcml0ZSB0aGUgaGVhZGVyICovXHJcbiAgaWYgKHMuc3RhdHVzID09PSBJTklUX1NUQVRFKSB7XHJcblxyXG4gICAgaWYgKHMud3JhcCA9PT0gMikgeyAvLyBHWklQIGhlYWRlclxyXG4gICAgICBzdHJtLmFkbGVyID0gMDsgIC8vY3JjMzIoMEwsIFpfTlVMTCwgMCk7XHJcbiAgICAgIHB1dF9ieXRlKHMsIDMxKTtcclxuICAgICAgcHV0X2J5dGUocywgMTM5KTtcclxuICAgICAgcHV0X2J5dGUocywgOCk7XHJcbiAgICAgIGlmICghcy5nemhlYWQpIHsgLy8gcy0+Z3poZWFkID09IFpfTlVMTFxyXG4gICAgICAgIHB1dF9ieXRlKHMsIDApO1xyXG4gICAgICAgIHB1dF9ieXRlKHMsIDApO1xyXG4gICAgICAgIHB1dF9ieXRlKHMsIDApO1xyXG4gICAgICAgIHB1dF9ieXRlKHMsIDApO1xyXG4gICAgICAgIHB1dF9ieXRlKHMsIDApO1xyXG4gICAgICAgIHB1dF9ieXRlKHMsIHMubGV2ZWwgPT09IDkgPyAyIDpcclxuICAgICAgICAgICAgICAgICAgICAocy5zdHJhdGVneSA+PSBaX0hVRkZNQU5fT05MWSB8fCBzLmxldmVsIDwgMiA/XHJcbiAgICAgICAgICAgICAgICAgICAgIDQgOiAwKSk7XHJcbiAgICAgICAgcHV0X2J5dGUocywgT1NfQ09ERSk7XHJcbiAgICAgICAgcy5zdGF0dXMgPSBCVVNZX1NUQVRFO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgIHB1dF9ieXRlKHMsIChzLmd6aGVhZC50ZXh0ID8gMSA6IDApICtcclxuICAgICAgICAgICAgICAgICAgICAocy5nemhlYWQuaGNyYyA/IDIgOiAwKSArXHJcbiAgICAgICAgICAgICAgICAgICAgKCFzLmd6aGVhZC5leHRyYSA/IDAgOiA0KSArXHJcbiAgICAgICAgICAgICAgICAgICAgKCFzLmd6aGVhZC5uYW1lID8gMCA6IDgpICtcclxuICAgICAgICAgICAgICAgICAgICAoIXMuZ3poZWFkLmNvbW1lbnQgPyAwIDogMTYpXHJcbiAgICAgICAgKTtcclxuICAgICAgICBwdXRfYnl0ZShzLCBzLmd6aGVhZC50aW1lICYgMHhmZik7XHJcbiAgICAgICAgcHV0X2J5dGUocywgKHMuZ3poZWFkLnRpbWUgPj4gOCkgJiAweGZmKTtcclxuICAgICAgICBwdXRfYnl0ZShzLCAocy5nemhlYWQudGltZSA+PiAxNikgJiAweGZmKTtcclxuICAgICAgICBwdXRfYnl0ZShzLCAocy5nemhlYWQudGltZSA+PiAyNCkgJiAweGZmKTtcclxuICAgICAgICBwdXRfYnl0ZShzLCBzLmxldmVsID09PSA5ID8gMiA6XHJcbiAgICAgICAgICAgICAgICAgICAgKHMuc3RyYXRlZ3kgPj0gWl9IVUZGTUFOX09OTFkgfHwgcy5sZXZlbCA8IDIgP1xyXG4gICAgICAgICAgICAgICAgICAgICA0IDogMCkpO1xyXG4gICAgICAgIHB1dF9ieXRlKHMsIHMuZ3poZWFkLm9zICYgMHhmZik7XHJcbiAgICAgICAgaWYgKHMuZ3poZWFkLmV4dHJhICYmIHMuZ3poZWFkLmV4dHJhLmxlbmd0aCkge1xyXG4gICAgICAgICAgcHV0X2J5dGUocywgcy5nemhlYWQuZXh0cmEubGVuZ3RoICYgMHhmZik7XHJcbiAgICAgICAgICBwdXRfYnl0ZShzLCAocy5nemhlYWQuZXh0cmEubGVuZ3RoID4+IDgpICYgMHhmZik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChzLmd6aGVhZC5oY3JjKSB7XHJcbiAgICAgICAgICBzdHJtLmFkbGVyID0gY3JjMzIoc3RybS5hZGxlciwgcy5wZW5kaW5nX2J1Ziwgcy5wZW5kaW5nLCAwKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcy5nemluZGV4ID0gMDtcclxuICAgICAgICBzLnN0YXR1cyA9IEVYVFJBX1NUQVRFO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIC8vIERFRkxBVEUgaGVhZGVyXHJcbiAgICB7XHJcbiAgICAgIHZhciBoZWFkZXIgPSAoWl9ERUZMQVRFRCArICgocy53X2JpdHMgLSA4KSA8PCA0KSkgPDwgODtcclxuICAgICAgdmFyIGxldmVsX2ZsYWdzID0gLTE7XHJcblxyXG4gICAgICBpZiAocy5zdHJhdGVneSA+PSBaX0hVRkZNQU5fT05MWSB8fCBzLmxldmVsIDwgMikge1xyXG4gICAgICAgIGxldmVsX2ZsYWdzID0gMDtcclxuICAgICAgfSBlbHNlIGlmIChzLmxldmVsIDwgNikge1xyXG4gICAgICAgIGxldmVsX2ZsYWdzID0gMTtcclxuICAgICAgfSBlbHNlIGlmIChzLmxldmVsID09PSA2KSB7XHJcbiAgICAgICAgbGV2ZWxfZmxhZ3MgPSAyO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGxldmVsX2ZsYWdzID0gMztcclxuICAgICAgfVxyXG4gICAgICBoZWFkZXIgfD0gKGxldmVsX2ZsYWdzIDw8IDYpO1xyXG4gICAgICBpZiAocy5zdHJzdGFydCAhPT0gMCkgeyBoZWFkZXIgfD0gUFJFU0VUX0RJQ1Q7IH1cclxuICAgICAgaGVhZGVyICs9IDMxIC0gKGhlYWRlciAlIDMxKTtcclxuXHJcbiAgICAgIHMuc3RhdHVzID0gQlVTWV9TVEFURTtcclxuICAgICAgcHV0U2hvcnRNU0IocywgaGVhZGVyKTtcclxuXHJcbiAgICAgIC8qIFNhdmUgdGhlIGFkbGVyMzIgb2YgdGhlIHByZXNldCBkaWN0aW9uYXJ5OiAqL1xyXG4gICAgICBpZiAocy5zdHJzdGFydCAhPT0gMCkge1xyXG4gICAgICAgIHB1dFNob3J0TVNCKHMsIHN0cm0uYWRsZXIgPj4+IDE2KTtcclxuICAgICAgICBwdXRTaG9ydE1TQihzLCBzdHJtLmFkbGVyICYgMHhmZmZmKTtcclxuICAgICAgfVxyXG4gICAgICBzdHJtLmFkbGVyID0gMTsgLy8gYWRsZXIzMigwTCwgWl9OVUxMLCAwKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4vLyNpZmRlZiBHWklQXHJcbiAgaWYgKHMuc3RhdHVzID09PSBFWFRSQV9TVEFURSkge1xyXG4gICAgaWYgKHMuZ3poZWFkLmV4dHJhLyogIT0gWl9OVUxMKi8pIHtcclxuICAgICAgYmVnID0gcy5wZW5kaW5nOyAgLyogc3RhcnQgb2YgYnl0ZXMgdG8gdXBkYXRlIGNyYyAqL1xyXG5cclxuICAgICAgd2hpbGUgKHMuZ3ppbmRleCA8IChzLmd6aGVhZC5leHRyYS5sZW5ndGggJiAweGZmZmYpKSB7XHJcbiAgICAgICAgaWYgKHMucGVuZGluZyA9PT0gcy5wZW5kaW5nX2J1Zl9zaXplKSB7XHJcbiAgICAgICAgICBpZiAocy5nemhlYWQuaGNyYyAmJiBzLnBlbmRpbmcgPiBiZWcpIHtcclxuICAgICAgICAgICAgc3RybS5hZGxlciA9IGNyYzMyKHN0cm0uYWRsZXIsIHMucGVuZGluZ19idWYsIHMucGVuZGluZyAtIGJlZywgYmVnKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGZsdXNoX3BlbmRpbmcoc3RybSk7XHJcbiAgICAgICAgICBiZWcgPSBzLnBlbmRpbmc7XHJcbiAgICAgICAgICBpZiAocy5wZW5kaW5nID09PSBzLnBlbmRpbmdfYnVmX3NpemUpIHtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHB1dF9ieXRlKHMsIHMuZ3poZWFkLmV4dHJhW3MuZ3ppbmRleF0gJiAweGZmKTtcclxuICAgICAgICBzLmd6aW5kZXgrKztcclxuICAgICAgfVxyXG4gICAgICBpZiAocy5nemhlYWQuaGNyYyAmJiBzLnBlbmRpbmcgPiBiZWcpIHtcclxuICAgICAgICBzdHJtLmFkbGVyID0gY3JjMzIoc3RybS5hZGxlciwgcy5wZW5kaW5nX2J1Ziwgcy5wZW5kaW5nIC0gYmVnLCBiZWcpO1xyXG4gICAgICB9XHJcbiAgICAgIGlmIChzLmd6aW5kZXggPT09IHMuZ3poZWFkLmV4dHJhLmxlbmd0aCkge1xyXG4gICAgICAgIHMuZ3ppbmRleCA9IDA7XHJcbiAgICAgICAgcy5zdGF0dXMgPSBOQU1FX1NUQVRFO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgcy5zdGF0dXMgPSBOQU1FX1NUQVRFO1xyXG4gICAgfVxyXG4gIH1cclxuICBpZiAocy5zdGF0dXMgPT09IE5BTUVfU1RBVEUpIHtcclxuICAgIGlmIChzLmd6aGVhZC5uYW1lLyogIT0gWl9OVUxMKi8pIHtcclxuICAgICAgYmVnID0gcy5wZW5kaW5nOyAgLyogc3RhcnQgb2YgYnl0ZXMgdG8gdXBkYXRlIGNyYyAqL1xyXG4gICAgICAvL2ludCB2YWw7XHJcblxyXG4gICAgICBkbyB7XHJcbiAgICAgICAgaWYgKHMucGVuZGluZyA9PT0gcy5wZW5kaW5nX2J1Zl9zaXplKSB7XHJcbiAgICAgICAgICBpZiAocy5nemhlYWQuaGNyYyAmJiBzLnBlbmRpbmcgPiBiZWcpIHtcclxuICAgICAgICAgICAgc3RybS5hZGxlciA9IGNyYzMyKHN0cm0uYWRsZXIsIHMucGVuZGluZ19idWYsIHMucGVuZGluZyAtIGJlZywgYmVnKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGZsdXNoX3BlbmRpbmcoc3RybSk7XHJcbiAgICAgICAgICBiZWcgPSBzLnBlbmRpbmc7XHJcbiAgICAgICAgICBpZiAocy5wZW5kaW5nID09PSBzLnBlbmRpbmdfYnVmX3NpemUpIHtcclxuICAgICAgICAgICAgdmFsID0gMTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIEpTIHNwZWNpZmljOiBsaXR0bGUgbWFnaWMgdG8gYWRkIHplcm8gdGVybWluYXRvciB0byBlbmQgb2Ygc3RyaW5nXHJcbiAgICAgICAgaWYgKHMuZ3ppbmRleCA8IHMuZ3poZWFkLm5hbWUubGVuZ3RoKSB7XHJcbiAgICAgICAgICB2YWwgPSBzLmd6aGVhZC5uYW1lLmNoYXJDb2RlQXQocy5nemluZGV4KyspICYgMHhmZjtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgdmFsID0gMDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcHV0X2J5dGUocywgdmFsKTtcclxuICAgICAgfSB3aGlsZSAodmFsICE9PSAwKTtcclxuXHJcbiAgICAgIGlmIChzLmd6aGVhZC5oY3JjICYmIHMucGVuZGluZyA+IGJlZykge1xyXG4gICAgICAgIHN0cm0uYWRsZXIgPSBjcmMzMihzdHJtLmFkbGVyLCBzLnBlbmRpbmdfYnVmLCBzLnBlbmRpbmcgLSBiZWcsIGJlZyk7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKHZhbCA9PT0gMCkge1xyXG4gICAgICAgIHMuZ3ppbmRleCA9IDA7XHJcbiAgICAgICAgcy5zdGF0dXMgPSBDT01NRU5UX1NUQVRFO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgcy5zdGF0dXMgPSBDT01NRU5UX1NUQVRFO1xyXG4gICAgfVxyXG4gIH1cclxuICBpZiAocy5zdGF0dXMgPT09IENPTU1FTlRfU1RBVEUpIHtcclxuICAgIGlmIChzLmd6aGVhZC5jb21tZW50LyogIT0gWl9OVUxMKi8pIHtcclxuICAgICAgYmVnID0gcy5wZW5kaW5nOyAgLyogc3RhcnQgb2YgYnl0ZXMgdG8gdXBkYXRlIGNyYyAqL1xyXG4gICAgICAvL2ludCB2YWw7XHJcblxyXG4gICAgICBkbyB7XHJcbiAgICAgICAgaWYgKHMucGVuZGluZyA9PT0gcy5wZW5kaW5nX2J1Zl9zaXplKSB7XHJcbiAgICAgICAgICBpZiAocy5nemhlYWQuaGNyYyAmJiBzLnBlbmRpbmcgPiBiZWcpIHtcclxuICAgICAgICAgICAgc3RybS5hZGxlciA9IGNyYzMyKHN0cm0uYWRsZXIsIHMucGVuZGluZ19idWYsIHMucGVuZGluZyAtIGJlZywgYmVnKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGZsdXNoX3BlbmRpbmcoc3RybSk7XHJcbiAgICAgICAgICBiZWcgPSBzLnBlbmRpbmc7XHJcbiAgICAgICAgICBpZiAocy5wZW5kaW5nID09PSBzLnBlbmRpbmdfYnVmX3NpemUpIHtcclxuICAgICAgICAgICAgdmFsID0gMTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIEpTIHNwZWNpZmljOiBsaXR0bGUgbWFnaWMgdG8gYWRkIHplcm8gdGVybWluYXRvciB0byBlbmQgb2Ygc3RyaW5nXHJcbiAgICAgICAgaWYgKHMuZ3ppbmRleCA8IHMuZ3poZWFkLmNvbW1lbnQubGVuZ3RoKSB7XHJcbiAgICAgICAgICB2YWwgPSBzLmd6aGVhZC5jb21tZW50LmNoYXJDb2RlQXQocy5nemluZGV4KyspICYgMHhmZjtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgdmFsID0gMDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcHV0X2J5dGUocywgdmFsKTtcclxuICAgICAgfSB3aGlsZSAodmFsICE9PSAwKTtcclxuXHJcbiAgICAgIGlmIChzLmd6aGVhZC5oY3JjICYmIHMucGVuZGluZyA+IGJlZykge1xyXG4gICAgICAgIHN0cm0uYWRsZXIgPSBjcmMzMihzdHJtLmFkbGVyLCBzLnBlbmRpbmdfYnVmLCBzLnBlbmRpbmcgLSBiZWcsIGJlZyk7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKHZhbCA9PT0gMCkge1xyXG4gICAgICAgIHMuc3RhdHVzID0gSENSQ19TVEFURTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIHMuc3RhdHVzID0gSENSQ19TVEFURTtcclxuICAgIH1cclxuICB9XHJcbiAgaWYgKHMuc3RhdHVzID09PSBIQ1JDX1NUQVRFKSB7XHJcbiAgICBpZiAocy5nemhlYWQuaGNyYykge1xyXG4gICAgICBpZiAocy5wZW5kaW5nICsgMiA+IHMucGVuZGluZ19idWZfc2l6ZSkge1xyXG4gICAgICAgIGZsdXNoX3BlbmRpbmcoc3RybSk7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKHMucGVuZGluZyArIDIgPD0gcy5wZW5kaW5nX2J1Zl9zaXplKSB7XHJcbiAgICAgICAgcHV0X2J5dGUocywgc3RybS5hZGxlciAmIDB4ZmYpO1xyXG4gICAgICAgIHB1dF9ieXRlKHMsIChzdHJtLmFkbGVyID4+IDgpICYgMHhmZik7XHJcbiAgICAgICAgc3RybS5hZGxlciA9IDA7IC8vY3JjMzIoMEwsIFpfTlVMTCwgMCk7XHJcbiAgICAgICAgcy5zdGF0dXMgPSBCVVNZX1NUQVRFO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgcy5zdGF0dXMgPSBCVVNZX1NUQVRFO1xyXG4gICAgfVxyXG4gIH1cclxuLy8jZW5kaWZcclxuXHJcbiAgLyogRmx1c2ggYXMgbXVjaCBwZW5kaW5nIG91dHB1dCBhcyBwb3NzaWJsZSAqL1xyXG4gIGlmIChzLnBlbmRpbmcgIT09IDApIHtcclxuICAgIGZsdXNoX3BlbmRpbmcoc3RybSk7XHJcbiAgICBpZiAoc3RybS5hdmFpbF9vdXQgPT09IDApIHtcclxuICAgICAgLyogU2luY2UgYXZhaWxfb3V0IGlzIDAsIGRlZmxhdGUgd2lsbCBiZSBjYWxsZWQgYWdhaW4gd2l0aFxyXG4gICAgICAgKiBtb3JlIG91dHB1dCBzcGFjZSwgYnV0IHBvc3NpYmx5IHdpdGggYm90aCBwZW5kaW5nIGFuZFxyXG4gICAgICAgKiBhdmFpbF9pbiBlcXVhbCB0byB6ZXJvLiBUaGVyZSB3b24ndCBiZSBhbnl0aGluZyB0byBkbyxcclxuICAgICAgICogYnV0IHRoaXMgaXMgbm90IGFuIGVycm9yIHNpdHVhdGlvbiBzbyBtYWtlIHN1cmUgd2VcclxuICAgICAgICogcmV0dXJuIE9LIGluc3RlYWQgb2YgQlVGX0VSUk9SIGF0IG5leHQgY2FsbCBvZiBkZWZsYXRlOlxyXG4gICAgICAgKi9cclxuICAgICAgcy5sYXN0X2ZsdXNoID0gLTE7XHJcbiAgICAgIHJldHVybiBaX09LO1xyXG4gICAgfVxyXG5cclxuICAgIC8qIE1ha2Ugc3VyZSB0aGVyZSBpcyBzb21ldGhpbmcgdG8gZG8gYW5kIGF2b2lkIGR1cGxpY2F0ZSBjb25zZWN1dGl2ZVxyXG4gICAgICogZmx1c2hlcy4gRm9yIHJlcGVhdGVkIGFuZCB1c2VsZXNzIGNhbGxzIHdpdGggWl9GSU5JU0gsIHdlIGtlZXBcclxuICAgICAqIHJldHVybmluZyBaX1NUUkVBTV9FTkQgaW5zdGVhZCBvZiBaX0JVRl9FUlJPUi5cclxuICAgICAqL1xyXG4gIH0gZWxzZSBpZiAoc3RybS5hdmFpbF9pbiA9PT0gMCAmJiByYW5rKGZsdXNoKSA8PSByYW5rKG9sZF9mbHVzaCkgJiZcclxuICAgIGZsdXNoICE9PSBaX0ZJTklTSCkge1xyXG4gICAgcmV0dXJuIGVycihzdHJtLCBaX0JVRl9FUlJPUik7XHJcbiAgfVxyXG5cclxuICAvKiBVc2VyIG11c3Qgbm90IHByb3ZpZGUgbW9yZSBpbnB1dCBhZnRlciB0aGUgZmlyc3QgRklOSVNIOiAqL1xyXG4gIGlmIChzLnN0YXR1cyA9PT0gRklOSVNIX1NUQVRFICYmIHN0cm0uYXZhaWxfaW4gIT09IDApIHtcclxuICAgIHJldHVybiBlcnIoc3RybSwgWl9CVUZfRVJST1IpO1xyXG4gIH1cclxuXHJcbiAgLyogU3RhcnQgYSBuZXcgYmxvY2sgb3IgY29udGludWUgdGhlIGN1cnJlbnQgb25lLlxyXG4gICAqL1xyXG4gIGlmIChzdHJtLmF2YWlsX2luICE9PSAwIHx8IHMubG9va2FoZWFkICE9PSAwIHx8XHJcbiAgICAoZmx1c2ggIT09IFpfTk9fRkxVU0ggJiYgcy5zdGF0dXMgIT09IEZJTklTSF9TVEFURSkpIHtcclxuICAgIHZhciBic3RhdGUgPSAocy5zdHJhdGVneSA9PT0gWl9IVUZGTUFOX09OTFkpID8gZGVmbGF0ZV9odWZmKHMsIGZsdXNoKSA6XHJcbiAgICAgIChzLnN0cmF0ZWd5ID09PSBaX1JMRSA/IGRlZmxhdGVfcmxlKHMsIGZsdXNoKSA6XHJcbiAgICAgICAgY29uZmlndXJhdGlvbl90YWJsZVtzLmxldmVsXS5mdW5jKHMsIGZsdXNoKSk7XHJcblxyXG4gICAgaWYgKGJzdGF0ZSA9PT0gQlNfRklOSVNIX1NUQVJURUQgfHwgYnN0YXRlID09PSBCU19GSU5JU0hfRE9ORSkge1xyXG4gICAgICBzLnN0YXR1cyA9IEZJTklTSF9TVEFURTtcclxuICAgIH1cclxuICAgIGlmIChic3RhdGUgPT09IEJTX05FRURfTU9SRSB8fCBic3RhdGUgPT09IEJTX0ZJTklTSF9TVEFSVEVEKSB7XHJcbiAgICAgIGlmIChzdHJtLmF2YWlsX291dCA9PT0gMCkge1xyXG4gICAgICAgIHMubGFzdF9mbHVzaCA9IC0xO1xyXG4gICAgICAgIC8qIGF2b2lkIEJVRl9FUlJPUiBuZXh0IGNhbGwsIHNlZSBhYm92ZSAqL1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBaX09LO1xyXG4gICAgICAvKiBJZiBmbHVzaCAhPSBaX05PX0ZMVVNIICYmIGF2YWlsX291dCA9PSAwLCB0aGUgbmV4dCBjYWxsXHJcbiAgICAgICAqIG9mIGRlZmxhdGUgc2hvdWxkIHVzZSB0aGUgc2FtZSBmbHVzaCBwYXJhbWV0ZXIgdG8gbWFrZSBzdXJlXHJcbiAgICAgICAqIHRoYXQgdGhlIGZsdXNoIGlzIGNvbXBsZXRlLiBTbyB3ZSBkb24ndCBoYXZlIHRvIG91dHB1dCBhblxyXG4gICAgICAgKiBlbXB0eSBibG9jayBoZXJlLCB0aGlzIHdpbGwgYmUgZG9uZSBhdCBuZXh0IGNhbGwuIFRoaXMgYWxzb1xyXG4gICAgICAgKiBlbnN1cmVzIHRoYXQgZm9yIGEgdmVyeSBzbWFsbCBvdXRwdXQgYnVmZmVyLCB3ZSBlbWl0IGF0IG1vc3RcclxuICAgICAgICogb25lIGVtcHR5IGJsb2NrLlxyXG4gICAgICAgKi9cclxuICAgIH1cclxuICAgIGlmIChic3RhdGUgPT09IEJTX0JMT0NLX0RPTkUpIHtcclxuICAgICAgaWYgKGZsdXNoID09PSBaX1BBUlRJQUxfRkxVU0gpIHtcclxuICAgICAgICB0cmVlcy5fdHJfYWxpZ24ocyk7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSBpZiAoZmx1c2ggIT09IFpfQkxPQ0spIHsgLyogRlVMTF9GTFVTSCBvciBTWU5DX0ZMVVNIICovXHJcblxyXG4gICAgICAgIHRyZWVzLl90cl9zdG9yZWRfYmxvY2socywgMCwgMCwgZmFsc2UpO1xyXG4gICAgICAgIC8qIEZvciBhIGZ1bGwgZmx1c2gsIHRoaXMgZW1wdHkgYmxvY2sgd2lsbCBiZSByZWNvZ25pemVkXHJcbiAgICAgICAgICogYXMgYSBzcGVjaWFsIG1hcmtlciBieSBpbmZsYXRlX3N5bmMoKS5cclxuICAgICAgICAgKi9cclxuICAgICAgICBpZiAoZmx1c2ggPT09IFpfRlVMTF9GTFVTSCkge1xyXG4gICAgICAgICAgLyoqKiBDTEVBUl9IQVNIKHMpOyAqKiovICAgICAgICAgICAgIC8qIGZvcmdldCBoaXN0b3J5ICovXHJcbiAgICAgICAgICB6ZXJvKHMuaGVhZCk7IC8vIEZpbGwgd2l0aCBOSUwgKD0gMCk7XHJcblxyXG4gICAgICAgICAgaWYgKHMubG9va2FoZWFkID09PSAwKSB7XHJcbiAgICAgICAgICAgIHMuc3Ryc3RhcnQgPSAwO1xyXG4gICAgICAgICAgICBzLmJsb2NrX3N0YXJ0ID0gMDtcclxuICAgICAgICAgICAgcy5pbnNlcnQgPSAwO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBmbHVzaF9wZW5kaW5nKHN0cm0pO1xyXG4gICAgICBpZiAoc3RybS5hdmFpbF9vdXQgPT09IDApIHtcclxuICAgICAgICBzLmxhc3RfZmx1c2ggPSAtMTsgLyogYXZvaWQgQlVGX0VSUk9SIGF0IG5leHQgY2FsbCwgc2VlIGFib3ZlICovXHJcbiAgICAgICAgcmV0dXJuIFpfT0s7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbiAgLy9Bc3NlcnQoc3RybS0+YXZhaWxfb3V0ID4gMCwgXCJidWcyXCIpO1xyXG4gIC8vaWYgKHN0cm0uYXZhaWxfb3V0IDw9IDApIHsgdGhyb3cgbmV3IEVycm9yKFwiYnVnMlwiKTt9XHJcblxyXG4gIGlmIChmbHVzaCAhPT0gWl9GSU5JU0gpIHsgcmV0dXJuIFpfT0s7IH1cclxuICBpZiAocy53cmFwIDw9IDApIHsgcmV0dXJuIFpfU1RSRUFNX0VORDsgfVxyXG5cclxuICAvKiBXcml0ZSB0aGUgdHJhaWxlciAqL1xyXG4gIGlmIChzLndyYXAgPT09IDIpIHtcclxuICAgIHB1dF9ieXRlKHMsIHN0cm0uYWRsZXIgJiAweGZmKTtcclxuICAgIHB1dF9ieXRlKHMsIChzdHJtLmFkbGVyID4+IDgpICYgMHhmZik7XHJcbiAgICBwdXRfYnl0ZShzLCAoc3RybS5hZGxlciA+PiAxNikgJiAweGZmKTtcclxuICAgIHB1dF9ieXRlKHMsIChzdHJtLmFkbGVyID4+IDI0KSAmIDB4ZmYpO1xyXG4gICAgcHV0X2J5dGUocywgc3RybS50b3RhbF9pbiAmIDB4ZmYpO1xyXG4gICAgcHV0X2J5dGUocywgKHN0cm0udG90YWxfaW4gPj4gOCkgJiAweGZmKTtcclxuICAgIHB1dF9ieXRlKHMsIChzdHJtLnRvdGFsX2luID4+IDE2KSAmIDB4ZmYpO1xyXG4gICAgcHV0X2J5dGUocywgKHN0cm0udG90YWxfaW4gPj4gMjQpICYgMHhmZik7XHJcbiAgfVxyXG4gIGVsc2VcclxuICB7XHJcbiAgICBwdXRTaG9ydE1TQihzLCBzdHJtLmFkbGVyID4+PiAxNik7XHJcbiAgICBwdXRTaG9ydE1TQihzLCBzdHJtLmFkbGVyICYgMHhmZmZmKTtcclxuICB9XHJcblxyXG4gIGZsdXNoX3BlbmRpbmcoc3RybSk7XHJcbiAgLyogSWYgYXZhaWxfb3V0IGlzIHplcm8sIHRoZSBhcHBsaWNhdGlvbiB3aWxsIGNhbGwgZGVmbGF0ZSBhZ2FpblxyXG4gICAqIHRvIGZsdXNoIHRoZSByZXN0LlxyXG4gICAqL1xyXG4gIGlmIChzLndyYXAgPiAwKSB7IHMud3JhcCA9IC1zLndyYXA7IH1cclxuICAvKiB3cml0ZSB0aGUgdHJhaWxlciBvbmx5IG9uY2UhICovXHJcbiAgcmV0dXJuIHMucGVuZGluZyAhPT0gMCA/IFpfT0sgOiBaX1NUUkVBTV9FTkQ7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRlZmxhdGVFbmQoc3RybSkge1xyXG4gIHZhciBzdGF0dXM7XHJcblxyXG4gIGlmICghc3RybS8qPT0gWl9OVUxMKi8gfHwgIXN0cm0uc3RhdGUvKj09IFpfTlVMTCovKSB7XHJcbiAgICByZXR1cm4gWl9TVFJFQU1fRVJST1I7XHJcbiAgfVxyXG5cclxuICBzdGF0dXMgPSBzdHJtLnN0YXRlLnN0YXR1cztcclxuICBpZiAoc3RhdHVzICE9PSBJTklUX1NUQVRFICYmXHJcbiAgICBzdGF0dXMgIT09IEVYVFJBX1NUQVRFICYmXHJcbiAgICBzdGF0dXMgIT09IE5BTUVfU1RBVEUgJiZcclxuICAgIHN0YXR1cyAhPT0gQ09NTUVOVF9TVEFURSAmJlxyXG4gICAgc3RhdHVzICE9PSBIQ1JDX1NUQVRFICYmXHJcbiAgICBzdGF0dXMgIT09IEJVU1lfU1RBVEUgJiZcclxuICAgIHN0YXR1cyAhPT0gRklOSVNIX1NUQVRFXHJcbiAgKSB7XHJcbiAgICByZXR1cm4gZXJyKHN0cm0sIFpfU1RSRUFNX0VSUk9SKTtcclxuICB9XHJcblxyXG4gIHN0cm0uc3RhdGUgPSBudWxsO1xyXG5cclxuICByZXR1cm4gc3RhdHVzID09PSBCVVNZX1NUQVRFID8gZXJyKHN0cm0sIFpfREFUQV9FUlJPUikgOiBaX09LO1xyXG59XHJcblxyXG5cclxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4gKiBJbml0aWFsaXplcyB0aGUgY29tcHJlc3Npb24gZGljdGlvbmFyeSBmcm9tIHRoZSBnaXZlbiBieXRlXHJcbiAqIHNlcXVlbmNlIHdpdGhvdXQgcHJvZHVjaW5nIGFueSBjb21wcmVzc2VkIG91dHB1dC5cclxuICovXHJcbmZ1bmN0aW9uIGRlZmxhdGVTZXREaWN0aW9uYXJ5KHN0cm0sIGRpY3Rpb25hcnkpIHtcclxuICB2YXIgZGljdExlbmd0aCA9IGRpY3Rpb25hcnkubGVuZ3RoO1xyXG5cclxuICB2YXIgcztcclxuICB2YXIgc3RyLCBuO1xyXG4gIHZhciB3cmFwO1xyXG4gIHZhciBhdmFpbDtcclxuICB2YXIgbmV4dDtcclxuICB2YXIgaW5wdXQ7XHJcbiAgdmFyIHRtcERpY3Q7XHJcblxyXG4gIGlmICghc3RybS8qPT0gWl9OVUxMKi8gfHwgIXN0cm0uc3RhdGUvKj09IFpfTlVMTCovKSB7XHJcbiAgICByZXR1cm4gWl9TVFJFQU1fRVJST1I7XHJcbiAgfVxyXG5cclxuICBzID0gc3RybS5zdGF0ZTtcclxuICB3cmFwID0gcy53cmFwO1xyXG5cclxuICBpZiAod3JhcCA9PT0gMiB8fCAod3JhcCA9PT0gMSAmJiBzLnN0YXR1cyAhPT0gSU5JVF9TVEFURSkgfHwgcy5sb29rYWhlYWQpIHtcclxuICAgIHJldHVybiBaX1NUUkVBTV9FUlJPUjtcclxuICB9XHJcblxyXG4gIC8qIHdoZW4gdXNpbmcgemxpYiB3cmFwcGVycywgY29tcHV0ZSBBZGxlci0zMiBmb3IgcHJvdmlkZWQgZGljdGlvbmFyeSAqL1xyXG4gIGlmICh3cmFwID09PSAxKSB7XHJcbiAgICAvKiBhZGxlcjMyKHN0cm0tPmFkbGVyLCBkaWN0aW9uYXJ5LCBkaWN0TGVuZ3RoKTsgKi9cclxuICAgIHN0cm0uYWRsZXIgPSBhZGxlcjMyKHN0cm0uYWRsZXIsIGRpY3Rpb25hcnksIGRpY3RMZW5ndGgsIDApO1xyXG4gIH1cclxuXHJcbiAgcy53cmFwID0gMDsgICAvKiBhdm9pZCBjb21wdXRpbmcgQWRsZXItMzIgaW4gcmVhZF9idWYgKi9cclxuXHJcbiAgLyogaWYgZGljdGlvbmFyeSB3b3VsZCBmaWxsIHdpbmRvdywganVzdCByZXBsYWNlIHRoZSBoaXN0b3J5ICovXHJcbiAgaWYgKGRpY3RMZW5ndGggPj0gcy53X3NpemUpIHtcclxuICAgIGlmICh3cmFwID09PSAwKSB7ICAgICAgICAgICAgLyogYWxyZWFkeSBlbXB0eSBvdGhlcndpc2UgKi9cclxuICAgICAgLyoqKiBDTEVBUl9IQVNIKHMpOyAqKiovXHJcbiAgICAgIHplcm8ocy5oZWFkKTsgLy8gRmlsbCB3aXRoIE5JTCAoPSAwKTtcclxuICAgICAgcy5zdHJzdGFydCA9IDA7XHJcbiAgICAgIHMuYmxvY2tfc3RhcnQgPSAwO1xyXG4gICAgICBzLmluc2VydCA9IDA7XHJcbiAgICB9XHJcbiAgICAvKiB1c2UgdGhlIHRhaWwgKi9cclxuICAgIC8vIGRpY3Rpb25hcnkgPSBkaWN0aW9uYXJ5LnNsaWNlKGRpY3RMZW5ndGggLSBzLndfc2l6ZSk7XHJcbiAgICB0bXBEaWN0ID0gbmV3IHV0aWxzLkJ1Zjgocy53X3NpemUpO1xyXG4gICAgdXRpbHMuYXJyYXlTZXQodG1wRGljdCwgZGljdGlvbmFyeSwgZGljdExlbmd0aCAtIHMud19zaXplLCBzLndfc2l6ZSwgMCk7XHJcbiAgICBkaWN0aW9uYXJ5ID0gdG1wRGljdDtcclxuICAgIGRpY3RMZW5ndGggPSBzLndfc2l6ZTtcclxuICB9XHJcbiAgLyogaW5zZXJ0IGRpY3Rpb25hcnkgaW50byB3aW5kb3cgYW5kIGhhc2ggKi9cclxuICBhdmFpbCA9IHN0cm0uYXZhaWxfaW47XHJcbiAgbmV4dCA9IHN0cm0ubmV4dF9pbjtcclxuICBpbnB1dCA9IHN0cm0uaW5wdXQ7XHJcbiAgc3RybS5hdmFpbF9pbiA9IGRpY3RMZW5ndGg7XHJcbiAgc3RybS5uZXh0X2luID0gMDtcclxuICBzdHJtLmlucHV0ID0gZGljdGlvbmFyeTtcclxuICBmaWxsX3dpbmRvdyhzKTtcclxuICB3aGlsZSAocy5sb29rYWhlYWQgPj0gTUlOX01BVENIKSB7XHJcbiAgICBzdHIgPSBzLnN0cnN0YXJ0O1xyXG4gICAgbiA9IHMubG9va2FoZWFkIC0gKE1JTl9NQVRDSCAtIDEpO1xyXG4gICAgZG8ge1xyXG4gICAgICAvKiBVUERBVEVfSEFTSChzLCBzLT5pbnNfaCwgcy0+d2luZG93W3N0ciArIE1JTl9NQVRDSC0xXSk7ICovXHJcbiAgICAgIHMuaW5zX2ggPSAoKHMuaW5zX2ggPDwgcy5oYXNoX3NoaWZ0KSBeIHMud2luZG93W3N0ciArIE1JTl9NQVRDSCAtIDFdKSAmIHMuaGFzaF9tYXNrO1xyXG5cclxuICAgICAgcy5wcmV2W3N0ciAmIHMud19tYXNrXSA9IHMuaGVhZFtzLmluc19oXTtcclxuXHJcbiAgICAgIHMuaGVhZFtzLmluc19oXSA9IHN0cjtcclxuICAgICAgc3RyKys7XHJcbiAgICB9IHdoaWxlICgtLW4pO1xyXG4gICAgcy5zdHJzdGFydCA9IHN0cjtcclxuICAgIHMubG9va2FoZWFkID0gTUlOX01BVENIIC0gMTtcclxuICAgIGZpbGxfd2luZG93KHMpO1xyXG4gIH1cclxuICBzLnN0cnN0YXJ0ICs9IHMubG9va2FoZWFkO1xyXG4gIHMuYmxvY2tfc3RhcnQgPSBzLnN0cnN0YXJ0O1xyXG4gIHMuaW5zZXJ0ID0gcy5sb29rYWhlYWQ7XHJcbiAgcy5sb29rYWhlYWQgPSAwO1xyXG4gIHMubWF0Y2hfbGVuZ3RoID0gcy5wcmV2X2xlbmd0aCA9IE1JTl9NQVRDSCAtIDE7XHJcbiAgcy5tYXRjaF9hdmFpbGFibGUgPSAwO1xyXG4gIHN0cm0ubmV4dF9pbiA9IG5leHQ7XHJcbiAgc3RybS5pbnB1dCA9IGlucHV0O1xyXG4gIHN0cm0uYXZhaWxfaW4gPSBhdmFpbDtcclxuICBzLndyYXAgPSB3cmFwO1xyXG4gIHJldHVybiBaX09LO1xyXG59XHJcblxyXG5cclxuZXhwb3J0cy5kZWZsYXRlSW5pdCA9IGRlZmxhdGVJbml0O1xyXG5leHBvcnRzLmRlZmxhdGVJbml0MiA9IGRlZmxhdGVJbml0MjtcclxuZXhwb3J0cy5kZWZsYXRlUmVzZXQgPSBkZWZsYXRlUmVzZXQ7XHJcbmV4cG9ydHMuZGVmbGF0ZVJlc2V0S2VlcCA9IGRlZmxhdGVSZXNldEtlZXA7XHJcbmV4cG9ydHMuZGVmbGF0ZVNldEhlYWRlciA9IGRlZmxhdGVTZXRIZWFkZXI7XHJcbmV4cG9ydHMuZGVmbGF0ZSA9IGRlZmxhdGU7XHJcbmV4cG9ydHMuZGVmbGF0ZUVuZCA9IGRlZmxhdGVFbmQ7XHJcbmV4cG9ydHMuZGVmbGF0ZVNldERpY3Rpb25hcnkgPSBkZWZsYXRlU2V0RGljdGlvbmFyeTtcclxuZXhwb3J0cy5kZWZsYXRlSW5mbyA9ICdwYWtvIGRlZmxhdGUgKGZyb20gTm9kZWNhIHByb2plY3QpJztcclxuXHJcbi8qIE5vdCBpbXBsZW1lbnRlZFxyXG5leHBvcnRzLmRlZmxhdGVCb3VuZCA9IGRlZmxhdGVCb3VuZDtcclxuZXhwb3J0cy5kZWZsYXRlQ29weSA9IGRlZmxhdGVDb3B5O1xyXG5leHBvcnRzLmRlZmxhdGVQYXJhbXMgPSBkZWZsYXRlUGFyYW1zO1xyXG5leHBvcnRzLmRlZmxhdGVQZW5kaW5nID0gZGVmbGF0ZVBlbmRpbmc7XHJcbmV4cG9ydHMuZGVmbGF0ZVByaW1lID0gZGVmbGF0ZVByaW1lO1xyXG5leHBvcnRzLmRlZmxhdGVUdW5lID0gZGVmbGF0ZVR1bmU7XHJcbiovXHJcbiIsIid1c2Ugc3RyaWN0JztcclxuXHJcbi8vIChDKSAxOTk1LTIwMTMgSmVhbi1sb3VwIEdhaWxseSBhbmQgTWFyayBBZGxlclxyXG4vLyAoQykgMjAxNC0yMDE3IFZpdGFseSBQdXpyaW4gYW5kIEFuZHJleSBUdXBpdHNpblxyXG4vL1xyXG4vLyBUaGlzIHNvZnR3YXJlIGlzIHByb3ZpZGVkICdhcy1pcycsIHdpdGhvdXQgYW55IGV4cHJlc3Mgb3IgaW1wbGllZFxyXG4vLyB3YXJyYW50eS4gSW4gbm8gZXZlbnQgd2lsbCB0aGUgYXV0aG9ycyBiZSBoZWxkIGxpYWJsZSBmb3IgYW55IGRhbWFnZXNcclxuLy8gYXJpc2luZyBmcm9tIHRoZSB1c2Ugb2YgdGhpcyBzb2Z0d2FyZS5cclxuLy9cclxuLy8gUGVybWlzc2lvbiBpcyBncmFudGVkIHRvIGFueW9uZSB0byB1c2UgdGhpcyBzb2Z0d2FyZSBmb3IgYW55IHB1cnBvc2UsXHJcbi8vIGluY2x1ZGluZyBjb21tZXJjaWFsIGFwcGxpY2F0aW9ucywgYW5kIHRvIGFsdGVyIGl0IGFuZCByZWRpc3RyaWJ1dGUgaXRcclxuLy8gZnJlZWx5LCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgcmVzdHJpY3Rpb25zOlxyXG4vL1xyXG4vLyAxLiBUaGUgb3JpZ2luIG9mIHRoaXMgc29mdHdhcmUgbXVzdCBub3QgYmUgbWlzcmVwcmVzZW50ZWQ7IHlvdSBtdXN0IG5vdFxyXG4vLyAgIGNsYWltIHRoYXQgeW91IHdyb3RlIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS4gSWYgeW91IHVzZSB0aGlzIHNvZnR3YXJlXHJcbi8vICAgaW4gYSBwcm9kdWN0LCBhbiBhY2tub3dsZWRnbWVudCBpbiB0aGUgcHJvZHVjdCBkb2N1bWVudGF0aW9uIHdvdWxkIGJlXHJcbi8vICAgYXBwcmVjaWF0ZWQgYnV0IGlzIG5vdCByZXF1aXJlZC5cclxuLy8gMi4gQWx0ZXJlZCBzb3VyY2UgdmVyc2lvbnMgbXVzdCBiZSBwbGFpbmx5IG1hcmtlZCBhcyBzdWNoLCBhbmQgbXVzdCBub3QgYmVcclxuLy8gICBtaXNyZXByZXNlbnRlZCBhcyBiZWluZyB0aGUgb3JpZ2luYWwgc29mdHdhcmUuXHJcbi8vIDMuIFRoaXMgbm90aWNlIG1heSBub3QgYmUgcmVtb3ZlZCBvciBhbHRlcmVkIGZyb20gYW55IHNvdXJjZSBkaXN0cmlidXRpb24uXHJcblxyXG4vKiBlc2xpbnQtZGlzYWJsZSBzcGFjZS11bmFyeS1vcHMgKi9cclxuXHJcbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzL2NvbW1vbicpO1xyXG5cclxuLyogUHVibGljIGNvbnN0YW50cyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cclxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cclxuXHJcblxyXG4vL3ZhciBaX0ZJTFRFUkVEICAgICAgICAgID0gMTtcclxuLy92YXIgWl9IVUZGTUFOX09OTFkgICAgICA9IDI7XHJcbi8vdmFyIFpfUkxFICAgICAgICAgICAgICAgPSAzO1xyXG52YXIgWl9GSVhFRCAgICAgICAgICAgICAgID0gNDtcclxuLy92YXIgWl9ERUZBVUxUX1NUUkFURUdZICA9IDA7XHJcblxyXG4vKiBQb3NzaWJsZSB2YWx1ZXMgb2YgdGhlIGRhdGFfdHlwZSBmaWVsZCAodGhvdWdoIHNlZSBpbmZsYXRlKCkpICovXHJcbnZhciBaX0JJTkFSWSAgICAgICAgICAgICAgPSAwO1xyXG52YXIgWl9URVhUICAgICAgICAgICAgICAgID0gMTtcclxuLy92YXIgWl9BU0NJSSAgICAgICAgICAgICA9IDE7IC8vID0gWl9URVhUXHJcbnZhciBaX1VOS05PV04gICAgICAgICAgICAgPSAyO1xyXG5cclxuLyo9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cclxuXHJcblxyXG5mdW5jdGlvbiB6ZXJvKGJ1ZikgeyB2YXIgbGVuID0gYnVmLmxlbmd0aDsgd2hpbGUgKC0tbGVuID49IDApIHsgYnVmW2xlbl0gPSAwOyB9IH1cclxuXHJcbi8vIEZyb20genV0aWwuaFxyXG5cclxudmFyIFNUT1JFRF9CTE9DSyA9IDA7XHJcbnZhciBTVEFUSUNfVFJFRVMgPSAxO1xyXG52YXIgRFlOX1RSRUVTICAgID0gMjtcclxuLyogVGhlIHRocmVlIGtpbmRzIG9mIGJsb2NrIHR5cGUgKi9cclxuXHJcbnZhciBNSU5fTUFUQ0ggICAgPSAzO1xyXG52YXIgTUFYX01BVENIICAgID0gMjU4O1xyXG4vKiBUaGUgbWluaW11bSBhbmQgbWF4aW11bSBtYXRjaCBsZW5ndGhzICovXHJcblxyXG4vLyBGcm9tIGRlZmxhdGUuaFxyXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuICogSW50ZXJuYWwgY29tcHJlc3Npb24gc3RhdGUuXHJcbiAqL1xyXG5cclxudmFyIExFTkdUSF9DT0RFUyAgPSAyOTtcclxuLyogbnVtYmVyIG9mIGxlbmd0aCBjb2Rlcywgbm90IGNvdW50aW5nIHRoZSBzcGVjaWFsIEVORF9CTE9DSyBjb2RlICovXHJcblxyXG52YXIgTElURVJBTFMgICAgICA9IDI1NjtcclxuLyogbnVtYmVyIG9mIGxpdGVyYWwgYnl0ZXMgMC4uMjU1ICovXHJcblxyXG52YXIgTF9DT0RFUyAgICAgICA9IExJVEVSQUxTICsgMSArIExFTkdUSF9DT0RFUztcclxuLyogbnVtYmVyIG9mIExpdGVyYWwgb3IgTGVuZ3RoIGNvZGVzLCBpbmNsdWRpbmcgdGhlIEVORF9CTE9DSyBjb2RlICovXHJcblxyXG52YXIgRF9DT0RFUyAgICAgICA9IDMwO1xyXG4vKiBudW1iZXIgb2YgZGlzdGFuY2UgY29kZXMgKi9cclxuXHJcbnZhciBCTF9DT0RFUyAgICAgID0gMTk7XHJcbi8qIG51bWJlciBvZiBjb2RlcyB1c2VkIHRvIHRyYW5zZmVyIHRoZSBiaXQgbGVuZ3RocyAqL1xyXG5cclxudmFyIEhFQVBfU0laRSAgICAgPSAyICogTF9DT0RFUyArIDE7XHJcbi8qIG1heGltdW0gaGVhcCBzaXplICovXHJcblxyXG52YXIgTUFYX0JJVFMgICAgICA9IDE1O1xyXG4vKiBBbGwgY29kZXMgbXVzdCBub3QgZXhjZWVkIE1BWF9CSVRTIGJpdHMgKi9cclxuXHJcbnZhciBCdWZfc2l6ZSAgICAgID0gMTY7XHJcbi8qIHNpemUgb2YgYml0IGJ1ZmZlciBpbiBiaV9idWYgKi9cclxuXHJcblxyXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuICogQ29uc3RhbnRzXHJcbiAqL1xyXG5cclxudmFyIE1BWF9CTF9CSVRTID0gNztcclxuLyogQml0IGxlbmd0aCBjb2RlcyBtdXN0IG5vdCBleGNlZWQgTUFYX0JMX0JJVFMgYml0cyAqL1xyXG5cclxudmFyIEVORF9CTE9DSyAgID0gMjU2O1xyXG4vKiBlbmQgb2YgYmxvY2sgbGl0ZXJhbCBjb2RlICovXHJcblxyXG52YXIgUkVQXzNfNiAgICAgPSAxNjtcclxuLyogcmVwZWF0IHByZXZpb3VzIGJpdCBsZW5ndGggMy02IHRpbWVzICgyIGJpdHMgb2YgcmVwZWF0IGNvdW50KSAqL1xyXG5cclxudmFyIFJFUFpfM18xMCAgID0gMTc7XHJcbi8qIHJlcGVhdCBhIHplcm8gbGVuZ3RoIDMtMTAgdGltZXMgICgzIGJpdHMgb2YgcmVwZWF0IGNvdW50KSAqL1xyXG5cclxudmFyIFJFUFpfMTFfMTM4ID0gMTg7XHJcbi8qIHJlcGVhdCBhIHplcm8gbGVuZ3RoIDExLTEzOCB0aW1lcyAgKDcgYml0cyBvZiByZXBlYXQgY291bnQpICovXHJcblxyXG4vKiBlc2xpbnQtZGlzYWJsZSBjb21tYS1zcGFjaW5nLGFycmF5LWJyYWNrZXQtc3BhY2luZyAqL1xyXG52YXIgZXh0cmFfbGJpdHMgPSAgIC8qIGV4dHJhIGJpdHMgZm9yIGVhY2ggbGVuZ3RoIGNvZGUgKi9cclxuICBbMCwwLDAsMCwwLDAsMCwwLDEsMSwxLDEsMiwyLDIsMiwzLDMsMywzLDQsNCw0LDQsNSw1LDUsNSwwXTtcclxuXHJcbnZhciBleHRyYV9kYml0cyA9ICAgLyogZXh0cmEgYml0cyBmb3IgZWFjaCBkaXN0YW5jZSBjb2RlICovXHJcbiAgWzAsMCwwLDAsMSwxLDIsMiwzLDMsNCw0LDUsNSw2LDYsNyw3LDgsOCw5LDksMTAsMTAsMTEsMTEsMTIsMTIsMTMsMTNdO1xyXG5cclxudmFyIGV4dHJhX2JsYml0cyA9ICAvKiBleHRyYSBiaXRzIGZvciBlYWNoIGJpdCBsZW5ndGggY29kZSAqL1xyXG4gIFswLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDIsMyw3XTtcclxuXHJcbnZhciBibF9vcmRlciA9XHJcbiAgWzE2LDE3LDE4LDAsOCw3LDksNiwxMCw1LDExLDQsMTIsMywxMywyLDE0LDEsMTVdO1xyXG4vKiBlc2xpbnQtZW5hYmxlIGNvbW1hLXNwYWNpbmcsYXJyYXktYnJhY2tldC1zcGFjaW5nICovXHJcblxyXG4vKiBUaGUgbGVuZ3RocyBvZiB0aGUgYml0IGxlbmd0aCBjb2RlcyBhcmUgc2VudCBpbiBvcmRlciBvZiBkZWNyZWFzaW5nXHJcbiAqIHByb2JhYmlsaXR5LCB0byBhdm9pZCB0cmFuc21pdHRpbmcgdGhlIGxlbmd0aHMgZm9yIHVudXNlZCBiaXQgbGVuZ3RoIGNvZGVzLlxyXG4gKi9cclxuXHJcbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4gKiBMb2NhbCBkYXRhLiBUaGVzZSBhcmUgaW5pdGlhbGl6ZWQgb25seSBvbmNlLlxyXG4gKi9cclxuXHJcbi8vIFdlIHByZS1maWxsIGFycmF5cyB3aXRoIDAgdG8gYXZvaWQgdW5pbml0aWFsaXplZCBnYXBzXHJcblxyXG52YXIgRElTVF9DT0RFX0xFTiA9IDUxMjsgLyogc2VlIGRlZmluaXRpb24gb2YgYXJyYXkgZGlzdF9jb2RlIGJlbG93ICovXHJcblxyXG4vLyAhISEhIFVzZSBmbGF0IGFycmF5IGluc3RlYWQgb2Ygc3RydWN0dXJlLCBGcmVxID0gaSoyLCBMZW4gPSBpKjIrMVxyXG52YXIgc3RhdGljX2x0cmVlICA9IG5ldyBBcnJheSgoTF9DT0RFUyArIDIpICogMik7XHJcbnplcm8oc3RhdGljX2x0cmVlKTtcclxuLyogVGhlIHN0YXRpYyBsaXRlcmFsIHRyZWUuIFNpbmNlIHRoZSBiaXQgbGVuZ3RocyBhcmUgaW1wb3NlZCwgdGhlcmUgaXMgbm9cclxuICogbmVlZCBmb3IgdGhlIExfQ09ERVMgZXh0cmEgY29kZXMgdXNlZCBkdXJpbmcgaGVhcCBjb25zdHJ1Y3Rpb24uIEhvd2V2ZXJcclxuICogVGhlIGNvZGVzIDI4NiBhbmQgMjg3IGFyZSBuZWVkZWQgdG8gYnVpbGQgYSBjYW5vbmljYWwgdHJlZSAoc2VlIF90cl9pbml0XHJcbiAqIGJlbG93KS5cclxuICovXHJcblxyXG52YXIgc3RhdGljX2R0cmVlICA9IG5ldyBBcnJheShEX0NPREVTICogMik7XHJcbnplcm8oc3RhdGljX2R0cmVlKTtcclxuLyogVGhlIHN0YXRpYyBkaXN0YW5jZSB0cmVlLiAoQWN0dWFsbHkgYSB0cml2aWFsIHRyZWUgc2luY2UgYWxsIGNvZGVzIHVzZVxyXG4gKiA1IGJpdHMuKVxyXG4gKi9cclxuXHJcbnZhciBfZGlzdF9jb2RlICAgID0gbmV3IEFycmF5KERJU1RfQ09ERV9MRU4pO1xyXG56ZXJvKF9kaXN0X2NvZGUpO1xyXG4vKiBEaXN0YW5jZSBjb2Rlcy4gVGhlIGZpcnN0IDI1NiB2YWx1ZXMgY29ycmVzcG9uZCB0byB0aGUgZGlzdGFuY2VzXHJcbiAqIDMgLi4gMjU4LCB0aGUgbGFzdCAyNTYgdmFsdWVzIGNvcnJlc3BvbmQgdG8gdGhlIHRvcCA4IGJpdHMgb2ZcclxuICogdGhlIDE1IGJpdCBkaXN0YW5jZXMuXHJcbiAqL1xyXG5cclxudmFyIF9sZW5ndGhfY29kZSAgPSBuZXcgQXJyYXkoTUFYX01BVENIIC0gTUlOX01BVENIICsgMSk7XHJcbnplcm8oX2xlbmd0aF9jb2RlKTtcclxuLyogbGVuZ3RoIGNvZGUgZm9yIGVhY2ggbm9ybWFsaXplZCBtYXRjaCBsZW5ndGggKDAgPT0gTUlOX01BVENIKSAqL1xyXG5cclxudmFyIGJhc2VfbGVuZ3RoICAgPSBuZXcgQXJyYXkoTEVOR1RIX0NPREVTKTtcclxuemVybyhiYXNlX2xlbmd0aCk7XHJcbi8qIEZpcnN0IG5vcm1hbGl6ZWQgbGVuZ3RoIGZvciBlYWNoIGNvZGUgKDAgPSBNSU5fTUFUQ0gpICovXHJcblxyXG52YXIgYmFzZV9kaXN0ICAgICA9IG5ldyBBcnJheShEX0NPREVTKTtcclxuemVybyhiYXNlX2Rpc3QpO1xyXG4vKiBGaXJzdCBub3JtYWxpemVkIGRpc3RhbmNlIGZvciBlYWNoIGNvZGUgKDAgPSBkaXN0YW5jZSBvZiAxKSAqL1xyXG5cclxuXHJcbmZ1bmN0aW9uIFN0YXRpY1RyZWVEZXNjKHN0YXRpY190cmVlLCBleHRyYV9iaXRzLCBleHRyYV9iYXNlLCBlbGVtcywgbWF4X2xlbmd0aCkge1xyXG5cclxuICB0aGlzLnN0YXRpY190cmVlICA9IHN0YXRpY190cmVlOyAgLyogc3RhdGljIHRyZWUgb3IgTlVMTCAqL1xyXG4gIHRoaXMuZXh0cmFfYml0cyAgID0gZXh0cmFfYml0czsgICAvKiBleHRyYSBiaXRzIGZvciBlYWNoIGNvZGUgb3IgTlVMTCAqL1xyXG4gIHRoaXMuZXh0cmFfYmFzZSAgID0gZXh0cmFfYmFzZTsgICAvKiBiYXNlIGluZGV4IGZvciBleHRyYV9iaXRzICovXHJcbiAgdGhpcy5lbGVtcyAgICAgICAgPSBlbGVtczsgICAgICAgIC8qIG1heCBudW1iZXIgb2YgZWxlbWVudHMgaW4gdGhlIHRyZWUgKi9cclxuICB0aGlzLm1heF9sZW5ndGggICA9IG1heF9sZW5ndGg7ICAgLyogbWF4IGJpdCBsZW5ndGggZm9yIHRoZSBjb2RlcyAqL1xyXG5cclxuICAvLyBzaG93IGlmIGBzdGF0aWNfdHJlZWAgaGFzIGRhdGEgb3IgZHVtbXkgLSBuZWVkZWQgZm9yIG1vbm9tb3JwaGljIG9iamVjdHNcclxuICB0aGlzLmhhc19zdHJlZSAgICA9IHN0YXRpY190cmVlICYmIHN0YXRpY190cmVlLmxlbmd0aDtcclxufVxyXG5cclxuXHJcbnZhciBzdGF0aWNfbF9kZXNjO1xyXG52YXIgc3RhdGljX2RfZGVzYztcclxudmFyIHN0YXRpY19ibF9kZXNjO1xyXG5cclxuXHJcbmZ1bmN0aW9uIFRyZWVEZXNjKGR5bl90cmVlLCBzdGF0X2Rlc2MpIHtcclxuICB0aGlzLmR5bl90cmVlID0gZHluX3RyZWU7ICAgICAvKiB0aGUgZHluYW1pYyB0cmVlICovXHJcbiAgdGhpcy5tYXhfY29kZSA9IDA7ICAgICAgICAgICAgLyogbGFyZ2VzdCBjb2RlIHdpdGggbm9uIHplcm8gZnJlcXVlbmN5ICovXHJcbiAgdGhpcy5zdGF0X2Rlc2MgPSBzdGF0X2Rlc2M7ICAgLyogdGhlIGNvcnJlc3BvbmRpbmcgc3RhdGljIHRyZWUgKi9cclxufVxyXG5cclxuXHJcblxyXG5mdW5jdGlvbiBkX2NvZGUoZGlzdCkge1xyXG4gIHJldHVybiBkaXN0IDwgMjU2ID8gX2Rpc3RfY29kZVtkaXN0XSA6IF9kaXN0X2NvZGVbMjU2ICsgKGRpc3QgPj4+IDcpXTtcclxufVxyXG5cclxuXHJcbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4gKiBPdXRwdXQgYSBzaG9ydCBMU0IgZmlyc3Qgb24gdGhlIHN0cmVhbS5cclxuICogSU4gYXNzZXJ0aW9uOiB0aGVyZSBpcyBlbm91Z2ggcm9vbSBpbiBwZW5kaW5nQnVmLlxyXG4gKi9cclxuZnVuY3Rpb24gcHV0X3Nob3J0KHMsIHcpIHtcclxuLy8gICAgcHV0X2J5dGUocywgKHVjaCkoKHcpICYgMHhmZikpO1xyXG4vLyAgICBwdXRfYnl0ZShzLCAodWNoKSgodXNoKSh3KSA+PiA4KSk7XHJcbiAgcy5wZW5kaW5nX2J1ZltzLnBlbmRpbmcrK10gPSAodykgJiAweGZmO1xyXG4gIHMucGVuZGluZ19idWZbcy5wZW5kaW5nKytdID0gKHcgPj4+IDgpICYgMHhmZjtcclxufVxyXG5cclxuXHJcbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4gKiBTZW5kIGEgdmFsdWUgb24gYSBnaXZlbiBudW1iZXIgb2YgYml0cy5cclxuICogSU4gYXNzZXJ0aW9uOiBsZW5ndGggPD0gMTYgYW5kIHZhbHVlIGZpdHMgaW4gbGVuZ3RoIGJpdHMuXHJcbiAqL1xyXG5mdW5jdGlvbiBzZW5kX2JpdHMocywgdmFsdWUsIGxlbmd0aCkge1xyXG4gIGlmIChzLmJpX3ZhbGlkID4gKEJ1Zl9zaXplIC0gbGVuZ3RoKSkge1xyXG4gICAgcy5iaV9idWYgfD0gKHZhbHVlIDw8IHMuYmlfdmFsaWQpICYgMHhmZmZmO1xyXG4gICAgcHV0X3Nob3J0KHMsIHMuYmlfYnVmKTtcclxuICAgIHMuYmlfYnVmID0gdmFsdWUgPj4gKEJ1Zl9zaXplIC0gcy5iaV92YWxpZCk7XHJcbiAgICBzLmJpX3ZhbGlkICs9IGxlbmd0aCAtIEJ1Zl9zaXplO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBzLmJpX2J1ZiB8PSAodmFsdWUgPDwgcy5iaV92YWxpZCkgJiAweGZmZmY7XHJcbiAgICBzLmJpX3ZhbGlkICs9IGxlbmd0aDtcclxuICB9XHJcbn1cclxuXHJcblxyXG5mdW5jdGlvbiBzZW5kX2NvZGUocywgYywgdHJlZSkge1xyXG4gIHNlbmRfYml0cyhzLCB0cmVlW2MgKiAyXS8qLkNvZGUqLywgdHJlZVtjICogMiArIDFdLyouTGVuKi8pO1xyXG59XHJcblxyXG5cclxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbiAqIFJldmVyc2UgdGhlIGZpcnN0IGxlbiBiaXRzIG9mIGEgY29kZSwgdXNpbmcgc3RyYWlnaHRmb3J3YXJkIGNvZGUgKGEgZmFzdGVyXHJcbiAqIG1ldGhvZCB3b3VsZCB1c2UgYSB0YWJsZSlcclxuICogSU4gYXNzZXJ0aW9uOiAxIDw9IGxlbiA8PSAxNVxyXG4gKi9cclxuZnVuY3Rpb24gYmlfcmV2ZXJzZShjb2RlLCBsZW4pIHtcclxuICB2YXIgcmVzID0gMDtcclxuICBkbyB7XHJcbiAgICByZXMgfD0gY29kZSAmIDE7XHJcbiAgICBjb2RlID4+Pj0gMTtcclxuICAgIHJlcyA8PD0gMTtcclxuICB9IHdoaWxlICgtLWxlbiA+IDApO1xyXG4gIHJldHVybiByZXMgPj4+IDE7XHJcbn1cclxuXHJcblxyXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuICogRmx1c2ggdGhlIGJpdCBidWZmZXIsIGtlZXBpbmcgYXQgbW9zdCA3IGJpdHMgaW4gaXQuXHJcbiAqL1xyXG5mdW5jdGlvbiBiaV9mbHVzaChzKSB7XHJcbiAgaWYgKHMuYmlfdmFsaWQgPT09IDE2KSB7XHJcbiAgICBwdXRfc2hvcnQocywgcy5iaV9idWYpO1xyXG4gICAgcy5iaV9idWYgPSAwO1xyXG4gICAgcy5iaV92YWxpZCA9IDA7XHJcblxyXG4gIH0gZWxzZSBpZiAocy5iaV92YWxpZCA+PSA4KSB7XHJcbiAgICBzLnBlbmRpbmdfYnVmW3MucGVuZGluZysrXSA9IHMuYmlfYnVmICYgMHhmZjtcclxuICAgIHMuYmlfYnVmID4+PSA4O1xyXG4gICAgcy5iaV92YWxpZCAtPSA4O1xyXG4gIH1cclxufVxyXG5cclxuXHJcbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4gKiBDb21wdXRlIHRoZSBvcHRpbWFsIGJpdCBsZW5ndGhzIGZvciBhIHRyZWUgYW5kIHVwZGF0ZSB0aGUgdG90YWwgYml0IGxlbmd0aFxyXG4gKiBmb3IgdGhlIGN1cnJlbnQgYmxvY2suXHJcbiAqIElOIGFzc2VydGlvbjogdGhlIGZpZWxkcyBmcmVxIGFuZCBkYWQgYXJlIHNldCwgaGVhcFtoZWFwX21heF0gYW5kXHJcbiAqICAgIGFib3ZlIGFyZSB0aGUgdHJlZSBub2RlcyBzb3J0ZWQgYnkgaW5jcmVhc2luZyBmcmVxdWVuY3kuXHJcbiAqIE9VVCBhc3NlcnRpb25zOiB0aGUgZmllbGQgbGVuIGlzIHNldCB0byB0aGUgb3B0aW1hbCBiaXQgbGVuZ3RoLCB0aGVcclxuICogICAgIGFycmF5IGJsX2NvdW50IGNvbnRhaW5zIHRoZSBmcmVxdWVuY2llcyBmb3IgZWFjaCBiaXQgbGVuZ3RoLlxyXG4gKiAgICAgVGhlIGxlbmd0aCBvcHRfbGVuIGlzIHVwZGF0ZWQ7IHN0YXRpY19sZW4gaXMgYWxzbyB1cGRhdGVkIGlmIHN0cmVlIGlzXHJcbiAqICAgICBub3QgbnVsbC5cclxuICovXHJcbmZ1bmN0aW9uIGdlbl9iaXRsZW4ocywgZGVzYylcclxuLy8gICAgZGVmbGF0ZV9zdGF0ZSAqcztcclxuLy8gICAgdHJlZV9kZXNjICpkZXNjOyAgICAvKiB0aGUgdHJlZSBkZXNjcmlwdG9yICovXHJcbntcclxuICB2YXIgdHJlZSAgICAgICAgICAgID0gZGVzYy5keW5fdHJlZTtcclxuICB2YXIgbWF4X2NvZGUgICAgICAgID0gZGVzYy5tYXhfY29kZTtcclxuICB2YXIgc3RyZWUgICAgICAgICAgID0gZGVzYy5zdGF0X2Rlc2Muc3RhdGljX3RyZWU7XHJcbiAgdmFyIGhhc19zdHJlZSAgICAgICA9IGRlc2Muc3RhdF9kZXNjLmhhc19zdHJlZTtcclxuICB2YXIgZXh0cmEgICAgICAgICAgID0gZGVzYy5zdGF0X2Rlc2MuZXh0cmFfYml0cztcclxuICB2YXIgYmFzZSAgICAgICAgICAgID0gZGVzYy5zdGF0X2Rlc2MuZXh0cmFfYmFzZTtcclxuICB2YXIgbWF4X2xlbmd0aCAgICAgID0gZGVzYy5zdGF0X2Rlc2MubWF4X2xlbmd0aDtcclxuICB2YXIgaDsgICAgICAgICAgICAgIC8qIGhlYXAgaW5kZXggKi9cclxuICB2YXIgbiwgbTsgICAgICAgICAgIC8qIGl0ZXJhdGUgb3ZlciB0aGUgdHJlZSBlbGVtZW50cyAqL1xyXG4gIHZhciBiaXRzOyAgICAgICAgICAgLyogYml0IGxlbmd0aCAqL1xyXG4gIHZhciB4Yml0czsgICAgICAgICAgLyogZXh0cmEgYml0cyAqL1xyXG4gIHZhciBmOyAgICAgICAgICAgICAgLyogZnJlcXVlbmN5ICovXHJcbiAgdmFyIG92ZXJmbG93ID0gMDsgICAvKiBudW1iZXIgb2YgZWxlbWVudHMgd2l0aCBiaXQgbGVuZ3RoIHRvbyBsYXJnZSAqL1xyXG5cclxuICBmb3IgKGJpdHMgPSAwOyBiaXRzIDw9IE1BWF9CSVRTOyBiaXRzKyspIHtcclxuICAgIHMuYmxfY291bnRbYml0c10gPSAwO1xyXG4gIH1cclxuXHJcbiAgLyogSW4gYSBmaXJzdCBwYXNzLCBjb21wdXRlIHRoZSBvcHRpbWFsIGJpdCBsZW5ndGhzICh3aGljaCBtYXlcclxuICAgKiBvdmVyZmxvdyBpbiB0aGUgY2FzZSBvZiB0aGUgYml0IGxlbmd0aCB0cmVlKS5cclxuICAgKi9cclxuICB0cmVlW3MuaGVhcFtzLmhlYXBfbWF4XSAqIDIgKyAxXS8qLkxlbiovID0gMDsgLyogcm9vdCBvZiB0aGUgaGVhcCAqL1xyXG5cclxuICBmb3IgKGggPSBzLmhlYXBfbWF4ICsgMTsgaCA8IEhFQVBfU0laRTsgaCsrKSB7XHJcbiAgICBuID0gcy5oZWFwW2hdO1xyXG4gICAgYml0cyA9IHRyZWVbdHJlZVtuICogMiArIDFdLyouRGFkKi8gKiAyICsgMV0vKi5MZW4qLyArIDE7XHJcbiAgICBpZiAoYml0cyA+IG1heF9sZW5ndGgpIHtcclxuICAgICAgYml0cyA9IG1heF9sZW5ndGg7XHJcbiAgICAgIG92ZXJmbG93Kys7XHJcbiAgICB9XHJcbiAgICB0cmVlW24gKiAyICsgMV0vKi5MZW4qLyA9IGJpdHM7XHJcbiAgICAvKiBXZSBvdmVyd3JpdGUgdHJlZVtuXS5EYWQgd2hpY2ggaXMgbm8gbG9uZ2VyIG5lZWRlZCAqL1xyXG5cclxuICAgIGlmIChuID4gbWF4X2NvZGUpIHsgY29udGludWU7IH0gLyogbm90IGEgbGVhZiBub2RlICovXHJcblxyXG4gICAgcy5ibF9jb3VudFtiaXRzXSsrO1xyXG4gICAgeGJpdHMgPSAwO1xyXG4gICAgaWYgKG4gPj0gYmFzZSkge1xyXG4gICAgICB4Yml0cyA9IGV4dHJhW24gLSBiYXNlXTtcclxuICAgIH1cclxuICAgIGYgPSB0cmVlW24gKiAyXS8qLkZyZXEqLztcclxuICAgIHMub3B0X2xlbiArPSBmICogKGJpdHMgKyB4Yml0cyk7XHJcbiAgICBpZiAoaGFzX3N0cmVlKSB7XHJcbiAgICAgIHMuc3RhdGljX2xlbiArPSBmICogKHN0cmVlW24gKiAyICsgMV0vKi5MZW4qLyArIHhiaXRzKTtcclxuICAgIH1cclxuICB9XHJcbiAgaWYgKG92ZXJmbG93ID09PSAwKSB7IHJldHVybjsgfVxyXG5cclxuICAvLyBUcmFjZSgoc3RkZXJyLFwiXFxuYml0IGxlbmd0aCBvdmVyZmxvd1xcblwiKSk7XHJcbiAgLyogVGhpcyBoYXBwZW5zIGZvciBleGFtcGxlIG9uIG9iajIgYW5kIHBpYyBvZiB0aGUgQ2FsZ2FyeSBjb3JwdXMgKi9cclxuXHJcbiAgLyogRmluZCB0aGUgZmlyc3QgYml0IGxlbmd0aCB3aGljaCBjb3VsZCBpbmNyZWFzZTogKi9cclxuICBkbyB7XHJcbiAgICBiaXRzID0gbWF4X2xlbmd0aCAtIDE7XHJcbiAgICB3aGlsZSAocy5ibF9jb3VudFtiaXRzXSA9PT0gMCkgeyBiaXRzLS07IH1cclxuICAgIHMuYmxfY291bnRbYml0c10tLTsgICAgICAvKiBtb3ZlIG9uZSBsZWFmIGRvd24gdGhlIHRyZWUgKi9cclxuICAgIHMuYmxfY291bnRbYml0cyArIDFdICs9IDI7IC8qIG1vdmUgb25lIG92ZXJmbG93IGl0ZW0gYXMgaXRzIGJyb3RoZXIgKi9cclxuICAgIHMuYmxfY291bnRbbWF4X2xlbmd0aF0tLTtcclxuICAgIC8qIFRoZSBicm90aGVyIG9mIHRoZSBvdmVyZmxvdyBpdGVtIGFsc28gbW92ZXMgb25lIHN0ZXAgdXAsXHJcbiAgICAgKiBidXQgdGhpcyBkb2VzIG5vdCBhZmZlY3QgYmxfY291bnRbbWF4X2xlbmd0aF1cclxuICAgICAqL1xyXG4gICAgb3ZlcmZsb3cgLT0gMjtcclxuICB9IHdoaWxlIChvdmVyZmxvdyA+IDApO1xyXG5cclxuICAvKiBOb3cgcmVjb21wdXRlIGFsbCBiaXQgbGVuZ3Rocywgc2Nhbm5pbmcgaW4gaW5jcmVhc2luZyBmcmVxdWVuY3kuXHJcbiAgICogaCBpcyBzdGlsbCBlcXVhbCB0byBIRUFQX1NJWkUuIChJdCBpcyBzaW1wbGVyIHRvIHJlY29uc3RydWN0IGFsbFxyXG4gICAqIGxlbmd0aHMgaW5zdGVhZCBvZiBmaXhpbmcgb25seSB0aGUgd3Jvbmcgb25lcy4gVGhpcyBpZGVhIGlzIHRha2VuXHJcbiAgICogZnJvbSAnYXInIHdyaXR0ZW4gYnkgSGFydWhpa28gT2t1bXVyYS4pXHJcbiAgICovXHJcbiAgZm9yIChiaXRzID0gbWF4X2xlbmd0aDsgYml0cyAhPT0gMDsgYml0cy0tKSB7XHJcbiAgICBuID0gcy5ibF9jb3VudFtiaXRzXTtcclxuICAgIHdoaWxlIChuICE9PSAwKSB7XHJcbiAgICAgIG0gPSBzLmhlYXBbLS1oXTtcclxuICAgICAgaWYgKG0gPiBtYXhfY29kZSkgeyBjb250aW51ZTsgfVxyXG4gICAgICBpZiAodHJlZVttICogMiArIDFdLyouTGVuKi8gIT09IGJpdHMpIHtcclxuICAgICAgICAvLyBUcmFjZSgoc3RkZXJyLFwiY29kZSAlZCBiaXRzICVkLT4lZFxcblwiLCBtLCB0cmVlW21dLkxlbiwgYml0cykpO1xyXG4gICAgICAgIHMub3B0X2xlbiArPSAoYml0cyAtIHRyZWVbbSAqIDIgKyAxXS8qLkxlbiovKSAqIHRyZWVbbSAqIDJdLyouRnJlcSovO1xyXG4gICAgICAgIHRyZWVbbSAqIDIgKyAxXS8qLkxlbiovID0gYml0cztcclxuICAgICAgfVxyXG4gICAgICBuLS07XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5cclxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbiAqIEdlbmVyYXRlIHRoZSBjb2RlcyBmb3IgYSBnaXZlbiB0cmVlIGFuZCBiaXQgY291bnRzICh3aGljaCBuZWVkIG5vdCBiZVxyXG4gKiBvcHRpbWFsKS5cclxuICogSU4gYXNzZXJ0aW9uOiB0aGUgYXJyYXkgYmxfY291bnQgY29udGFpbnMgdGhlIGJpdCBsZW5ndGggc3RhdGlzdGljcyBmb3JcclxuICogdGhlIGdpdmVuIHRyZWUgYW5kIHRoZSBmaWVsZCBsZW4gaXMgc2V0IGZvciBhbGwgdHJlZSBlbGVtZW50cy5cclxuICogT1VUIGFzc2VydGlvbjogdGhlIGZpZWxkIGNvZGUgaXMgc2V0IGZvciBhbGwgdHJlZSBlbGVtZW50cyBvZiBub25cclxuICogICAgIHplcm8gY29kZSBsZW5ndGguXHJcbiAqL1xyXG5mdW5jdGlvbiBnZW5fY29kZXModHJlZSwgbWF4X2NvZGUsIGJsX2NvdW50KVxyXG4vLyAgICBjdF9kYXRhICp0cmVlOyAgICAgICAgICAgICAvKiB0aGUgdHJlZSB0byBkZWNvcmF0ZSAqL1xyXG4vLyAgICBpbnQgbWF4X2NvZGU7ICAgICAgICAgICAgICAvKiBsYXJnZXN0IGNvZGUgd2l0aCBub24gemVybyBmcmVxdWVuY3kgKi9cclxuLy8gICAgdXNoZiAqYmxfY291bnQ7ICAgICAgICAgICAgLyogbnVtYmVyIG9mIGNvZGVzIGF0IGVhY2ggYml0IGxlbmd0aCAqL1xyXG57XHJcbiAgdmFyIG5leHRfY29kZSA9IG5ldyBBcnJheShNQVhfQklUUyArIDEpOyAvKiBuZXh0IGNvZGUgdmFsdWUgZm9yIGVhY2ggYml0IGxlbmd0aCAqL1xyXG4gIHZhciBjb2RlID0gMDsgICAgICAgICAgICAgIC8qIHJ1bm5pbmcgY29kZSB2YWx1ZSAqL1xyXG4gIHZhciBiaXRzOyAgICAgICAgICAgICAgICAgIC8qIGJpdCBpbmRleCAqL1xyXG4gIHZhciBuOyAgICAgICAgICAgICAgICAgICAgIC8qIGNvZGUgaW5kZXggKi9cclxuXHJcbiAgLyogVGhlIGRpc3RyaWJ1dGlvbiBjb3VudHMgYXJlIGZpcnN0IHVzZWQgdG8gZ2VuZXJhdGUgdGhlIGNvZGUgdmFsdWVzXHJcbiAgICogd2l0aG91dCBiaXQgcmV2ZXJzYWwuXHJcbiAgICovXHJcbiAgZm9yIChiaXRzID0gMTsgYml0cyA8PSBNQVhfQklUUzsgYml0cysrKSB7XHJcbiAgICBuZXh0X2NvZGVbYml0c10gPSBjb2RlID0gKGNvZGUgKyBibF9jb3VudFtiaXRzIC0gMV0pIDw8IDE7XHJcbiAgfVxyXG4gIC8qIENoZWNrIHRoYXQgdGhlIGJpdCBjb3VudHMgaW4gYmxfY291bnQgYXJlIGNvbnNpc3RlbnQuIFRoZSBsYXN0IGNvZGVcclxuICAgKiBtdXN0IGJlIGFsbCBvbmVzLlxyXG4gICAqL1xyXG4gIC8vQXNzZXJ0IChjb2RlICsgYmxfY291bnRbTUFYX0JJVFNdLTEgPT0gKDE8PE1BWF9CSVRTKS0xLFxyXG4gIC8vICAgICAgICBcImluY29uc2lzdGVudCBiaXQgY291bnRzXCIpO1xyXG4gIC8vVHJhY2V2KChzdGRlcnIsXCJcXG5nZW5fY29kZXM6IG1heF9jb2RlICVkIFwiLCBtYXhfY29kZSkpO1xyXG5cclxuICBmb3IgKG4gPSAwOyAgbiA8PSBtYXhfY29kZTsgbisrKSB7XHJcbiAgICB2YXIgbGVuID0gdHJlZVtuICogMiArIDFdLyouTGVuKi87XHJcbiAgICBpZiAobGVuID09PSAwKSB7IGNvbnRpbnVlOyB9XHJcbiAgICAvKiBOb3cgcmV2ZXJzZSB0aGUgYml0cyAqL1xyXG4gICAgdHJlZVtuICogMl0vKi5Db2RlKi8gPSBiaV9yZXZlcnNlKG5leHRfY29kZVtsZW5dKyssIGxlbik7XHJcblxyXG4gICAgLy9UcmFjZWN2KHRyZWUgIT0gc3RhdGljX2x0cmVlLCAoc3RkZXJyLFwiXFxubiAlM2QgJWMgbCAlMmQgYyAlNHggKCV4KSBcIixcclxuICAgIC8vICAgICBuLCAoaXNncmFwaChuKSA/IG4gOiAnICcpLCBsZW4sIHRyZWVbbl0uQ29kZSwgbmV4dF9jb2RlW2xlbl0tMSkpO1xyXG4gIH1cclxufVxyXG5cclxuXHJcbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4gKiBJbml0aWFsaXplIHRoZSB2YXJpb3VzICdjb25zdGFudCcgdGFibGVzLlxyXG4gKi9cclxuZnVuY3Rpb24gdHJfc3RhdGljX2luaXQoKSB7XHJcbiAgdmFyIG47ICAgICAgICAvKiBpdGVyYXRlcyBvdmVyIHRyZWUgZWxlbWVudHMgKi9cclxuICB2YXIgYml0czsgICAgIC8qIGJpdCBjb3VudGVyICovXHJcbiAgdmFyIGxlbmd0aDsgICAvKiBsZW5ndGggdmFsdWUgKi9cclxuICB2YXIgY29kZTsgICAgIC8qIGNvZGUgdmFsdWUgKi9cclxuICB2YXIgZGlzdDsgICAgIC8qIGRpc3RhbmNlIGluZGV4ICovXHJcbiAgdmFyIGJsX2NvdW50ID0gbmV3IEFycmF5KE1BWF9CSVRTICsgMSk7XHJcbiAgLyogbnVtYmVyIG9mIGNvZGVzIGF0IGVhY2ggYml0IGxlbmd0aCBmb3IgYW4gb3B0aW1hbCB0cmVlICovXHJcblxyXG4gIC8vIGRvIGNoZWNrIGluIF90cl9pbml0KClcclxuICAvL2lmIChzdGF0aWNfaW5pdF9kb25lKSByZXR1cm47XHJcblxyXG4gIC8qIEZvciBzb21lIGVtYmVkZGVkIHRhcmdldHMsIGdsb2JhbCB2YXJpYWJsZXMgYXJlIG5vdCBpbml0aWFsaXplZDogKi9cclxuLyojaWZkZWYgTk9fSU5JVF9HTE9CQUxfUE9JTlRFUlNcclxuICBzdGF0aWNfbF9kZXNjLnN0YXRpY190cmVlID0gc3RhdGljX2x0cmVlO1xyXG4gIHN0YXRpY19sX2Rlc2MuZXh0cmFfYml0cyA9IGV4dHJhX2xiaXRzO1xyXG4gIHN0YXRpY19kX2Rlc2Muc3RhdGljX3RyZWUgPSBzdGF0aWNfZHRyZWU7XHJcbiAgc3RhdGljX2RfZGVzYy5leHRyYV9iaXRzID0gZXh0cmFfZGJpdHM7XHJcbiAgc3RhdGljX2JsX2Rlc2MuZXh0cmFfYml0cyA9IGV4dHJhX2JsYml0cztcclxuI2VuZGlmKi9cclxuXHJcbiAgLyogSW5pdGlhbGl6ZSB0aGUgbWFwcGluZyBsZW5ndGggKDAuLjI1NSkgLT4gbGVuZ3RoIGNvZGUgKDAuLjI4KSAqL1xyXG4gIGxlbmd0aCA9IDA7XHJcbiAgZm9yIChjb2RlID0gMDsgY29kZSA8IExFTkdUSF9DT0RFUyAtIDE7IGNvZGUrKykge1xyXG4gICAgYmFzZV9sZW5ndGhbY29kZV0gPSBsZW5ndGg7XHJcbiAgICBmb3IgKG4gPSAwOyBuIDwgKDEgPDwgZXh0cmFfbGJpdHNbY29kZV0pOyBuKyspIHtcclxuICAgICAgX2xlbmd0aF9jb2RlW2xlbmd0aCsrXSA9IGNvZGU7XHJcbiAgICB9XHJcbiAgfVxyXG4gIC8vQXNzZXJ0IChsZW5ndGggPT0gMjU2LCBcInRyX3N0YXRpY19pbml0OiBsZW5ndGggIT0gMjU2XCIpO1xyXG4gIC8qIE5vdGUgdGhhdCB0aGUgbGVuZ3RoIDI1NSAobWF0Y2ggbGVuZ3RoIDI1OCkgY2FuIGJlIHJlcHJlc2VudGVkXHJcbiAgICogaW4gdHdvIGRpZmZlcmVudCB3YXlzOiBjb2RlIDI4NCArIDUgYml0cyBvciBjb2RlIDI4NSwgc28gd2VcclxuICAgKiBvdmVyd3JpdGUgbGVuZ3RoX2NvZGVbMjU1XSB0byB1c2UgdGhlIGJlc3QgZW5jb2Rpbmc6XHJcbiAgICovXHJcbiAgX2xlbmd0aF9jb2RlW2xlbmd0aCAtIDFdID0gY29kZTtcclxuXHJcbiAgLyogSW5pdGlhbGl6ZSB0aGUgbWFwcGluZyBkaXN0ICgwLi4zMkspIC0+IGRpc3QgY29kZSAoMC4uMjkpICovXHJcbiAgZGlzdCA9IDA7XHJcbiAgZm9yIChjb2RlID0gMDsgY29kZSA8IDE2OyBjb2RlKyspIHtcclxuICAgIGJhc2VfZGlzdFtjb2RlXSA9IGRpc3Q7XHJcbiAgICBmb3IgKG4gPSAwOyBuIDwgKDEgPDwgZXh0cmFfZGJpdHNbY29kZV0pOyBuKyspIHtcclxuICAgICAgX2Rpc3RfY29kZVtkaXN0KytdID0gY29kZTtcclxuICAgIH1cclxuICB9XHJcbiAgLy9Bc3NlcnQgKGRpc3QgPT0gMjU2LCBcInRyX3N0YXRpY19pbml0OiBkaXN0ICE9IDI1NlwiKTtcclxuICBkaXN0ID4+PSA3OyAvKiBmcm9tIG5vdyBvbiwgYWxsIGRpc3RhbmNlcyBhcmUgZGl2aWRlZCBieSAxMjggKi9cclxuICBmb3IgKDsgY29kZSA8IERfQ09ERVM7IGNvZGUrKykge1xyXG4gICAgYmFzZV9kaXN0W2NvZGVdID0gZGlzdCA8PCA3O1xyXG4gICAgZm9yIChuID0gMDsgbiA8ICgxIDw8IChleHRyYV9kYml0c1tjb2RlXSAtIDcpKTsgbisrKSB7XHJcbiAgICAgIF9kaXN0X2NvZGVbMjU2ICsgZGlzdCsrXSA9IGNvZGU7XHJcbiAgICB9XHJcbiAgfVxyXG4gIC8vQXNzZXJ0IChkaXN0ID09IDI1NiwgXCJ0cl9zdGF0aWNfaW5pdDogMjU2K2Rpc3QgIT0gNTEyXCIpO1xyXG5cclxuICAvKiBDb25zdHJ1Y3QgdGhlIGNvZGVzIG9mIHRoZSBzdGF0aWMgbGl0ZXJhbCB0cmVlICovXHJcbiAgZm9yIChiaXRzID0gMDsgYml0cyA8PSBNQVhfQklUUzsgYml0cysrKSB7XHJcbiAgICBibF9jb3VudFtiaXRzXSA9IDA7XHJcbiAgfVxyXG5cclxuICBuID0gMDtcclxuICB3aGlsZSAobiA8PSAxNDMpIHtcclxuICAgIHN0YXRpY19sdHJlZVtuICogMiArIDFdLyouTGVuKi8gPSA4O1xyXG4gICAgbisrO1xyXG4gICAgYmxfY291bnRbOF0rKztcclxuICB9XHJcbiAgd2hpbGUgKG4gPD0gMjU1KSB7XHJcbiAgICBzdGF0aWNfbHRyZWVbbiAqIDIgKyAxXS8qLkxlbiovID0gOTtcclxuICAgIG4rKztcclxuICAgIGJsX2NvdW50WzldKys7XHJcbiAgfVxyXG4gIHdoaWxlIChuIDw9IDI3OSkge1xyXG4gICAgc3RhdGljX2x0cmVlW24gKiAyICsgMV0vKi5MZW4qLyA9IDc7XHJcbiAgICBuKys7XHJcbiAgICBibF9jb3VudFs3XSsrO1xyXG4gIH1cclxuICB3aGlsZSAobiA8PSAyODcpIHtcclxuICAgIHN0YXRpY19sdHJlZVtuICogMiArIDFdLyouTGVuKi8gPSA4O1xyXG4gICAgbisrO1xyXG4gICAgYmxfY291bnRbOF0rKztcclxuICB9XHJcbiAgLyogQ29kZXMgMjg2IGFuZCAyODcgZG8gbm90IGV4aXN0LCBidXQgd2UgbXVzdCBpbmNsdWRlIHRoZW0gaW4gdGhlXHJcbiAgICogdHJlZSBjb25zdHJ1Y3Rpb24gdG8gZ2V0IGEgY2Fub25pY2FsIEh1ZmZtYW4gdHJlZSAobG9uZ2VzdCBjb2RlXHJcbiAgICogYWxsIG9uZXMpXHJcbiAgICovXHJcbiAgZ2VuX2NvZGVzKHN0YXRpY19sdHJlZSwgTF9DT0RFUyArIDEsIGJsX2NvdW50KTtcclxuXHJcbiAgLyogVGhlIHN0YXRpYyBkaXN0YW5jZSB0cmVlIGlzIHRyaXZpYWw6ICovXHJcbiAgZm9yIChuID0gMDsgbiA8IERfQ09ERVM7IG4rKykge1xyXG4gICAgc3RhdGljX2R0cmVlW24gKiAyICsgMV0vKi5MZW4qLyA9IDU7XHJcbiAgICBzdGF0aWNfZHRyZWVbbiAqIDJdLyouQ29kZSovID0gYmlfcmV2ZXJzZShuLCA1KTtcclxuICB9XHJcblxyXG4gIC8vIE5vdyBkYXRhIHJlYWR5IGFuZCB3ZSBjYW4gaW5pdCBzdGF0aWMgdHJlZXNcclxuICBzdGF0aWNfbF9kZXNjID0gbmV3IFN0YXRpY1RyZWVEZXNjKHN0YXRpY19sdHJlZSwgZXh0cmFfbGJpdHMsIExJVEVSQUxTICsgMSwgTF9DT0RFUywgTUFYX0JJVFMpO1xyXG4gIHN0YXRpY19kX2Rlc2MgPSBuZXcgU3RhdGljVHJlZURlc2Moc3RhdGljX2R0cmVlLCBleHRyYV9kYml0cywgMCwgICAgICAgICAgRF9DT0RFUywgTUFYX0JJVFMpO1xyXG4gIHN0YXRpY19ibF9kZXNjID0gbmV3IFN0YXRpY1RyZWVEZXNjKG5ldyBBcnJheSgwKSwgZXh0cmFfYmxiaXRzLCAwLCAgICAgICAgIEJMX0NPREVTLCBNQVhfQkxfQklUUyk7XHJcblxyXG4gIC8vc3RhdGljX2luaXRfZG9uZSA9IHRydWU7XHJcbn1cclxuXHJcblxyXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuICogSW5pdGlhbGl6ZSBhIG5ldyBibG9jay5cclxuICovXHJcbmZ1bmN0aW9uIGluaXRfYmxvY2socykge1xyXG4gIHZhciBuOyAvKiBpdGVyYXRlcyBvdmVyIHRyZWUgZWxlbWVudHMgKi9cclxuXHJcbiAgLyogSW5pdGlhbGl6ZSB0aGUgdHJlZXMuICovXHJcbiAgZm9yIChuID0gMDsgbiA8IExfQ09ERVM7ICBuKyspIHsgcy5keW5fbHRyZWVbbiAqIDJdLyouRnJlcSovID0gMDsgfVxyXG4gIGZvciAobiA9IDA7IG4gPCBEX0NPREVTOyAgbisrKSB7IHMuZHluX2R0cmVlW24gKiAyXS8qLkZyZXEqLyA9IDA7IH1cclxuICBmb3IgKG4gPSAwOyBuIDwgQkxfQ09ERVM7IG4rKykgeyBzLmJsX3RyZWVbbiAqIDJdLyouRnJlcSovID0gMDsgfVxyXG5cclxuICBzLmR5bl9sdHJlZVtFTkRfQkxPQ0sgKiAyXS8qLkZyZXEqLyA9IDE7XHJcbiAgcy5vcHRfbGVuID0gcy5zdGF0aWNfbGVuID0gMDtcclxuICBzLmxhc3RfbGl0ID0gcy5tYXRjaGVzID0gMDtcclxufVxyXG5cclxuXHJcbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4gKiBGbHVzaCB0aGUgYml0IGJ1ZmZlciBhbmQgYWxpZ24gdGhlIG91dHB1dCBvbiBhIGJ5dGUgYm91bmRhcnlcclxuICovXHJcbmZ1bmN0aW9uIGJpX3dpbmR1cChzKVxyXG57XHJcbiAgaWYgKHMuYmlfdmFsaWQgPiA4KSB7XHJcbiAgICBwdXRfc2hvcnQocywgcy5iaV9idWYpO1xyXG4gIH0gZWxzZSBpZiAocy5iaV92YWxpZCA+IDApIHtcclxuICAgIC8vcHV0X2J5dGUocywgKEJ5dGUpcy0+YmlfYnVmKTtcclxuICAgIHMucGVuZGluZ19idWZbcy5wZW5kaW5nKytdID0gcy5iaV9idWY7XHJcbiAgfVxyXG4gIHMuYmlfYnVmID0gMDtcclxuICBzLmJpX3ZhbGlkID0gMDtcclxufVxyXG5cclxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbiAqIENvcHkgYSBzdG9yZWQgYmxvY2ssIHN0b3JpbmcgZmlyc3QgdGhlIGxlbmd0aCBhbmQgaXRzXHJcbiAqIG9uZSdzIGNvbXBsZW1lbnQgaWYgcmVxdWVzdGVkLlxyXG4gKi9cclxuZnVuY3Rpb24gY29weV9ibG9jayhzLCBidWYsIGxlbiwgaGVhZGVyKVxyXG4vL0RlZmxhdGVTdGF0ZSAqcztcclxuLy9jaGFyZiAgICAqYnVmOyAgICAvKiB0aGUgaW5wdXQgZGF0YSAqL1xyXG4vL3Vuc2lnbmVkIGxlbjsgICAgIC8qIGl0cyBsZW5ndGggKi9cclxuLy9pbnQgICAgICBoZWFkZXI7ICAvKiB0cnVlIGlmIGJsb2NrIGhlYWRlciBtdXN0IGJlIHdyaXR0ZW4gKi9cclxue1xyXG4gIGJpX3dpbmR1cChzKTsgICAgICAgIC8qIGFsaWduIG9uIGJ5dGUgYm91bmRhcnkgKi9cclxuXHJcbiAgaWYgKGhlYWRlcikge1xyXG4gICAgcHV0X3Nob3J0KHMsIGxlbik7XHJcbiAgICBwdXRfc2hvcnQocywgfmxlbik7XHJcbiAgfVxyXG4vLyAgd2hpbGUgKGxlbi0tKSB7XHJcbi8vICAgIHB1dF9ieXRlKHMsICpidWYrKyk7XHJcbi8vICB9XHJcbiAgdXRpbHMuYXJyYXlTZXQocy5wZW5kaW5nX2J1Ziwgcy53aW5kb3csIGJ1ZiwgbGVuLCBzLnBlbmRpbmcpO1xyXG4gIHMucGVuZGluZyArPSBsZW47XHJcbn1cclxuXHJcbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4gKiBDb21wYXJlcyB0byBzdWJ0cmVlcywgdXNpbmcgdGhlIHRyZWUgZGVwdGggYXMgdGllIGJyZWFrZXIgd2hlblxyXG4gKiB0aGUgc3VidHJlZXMgaGF2ZSBlcXVhbCBmcmVxdWVuY3kuIFRoaXMgbWluaW1pemVzIHRoZSB3b3JzdCBjYXNlIGxlbmd0aC5cclxuICovXHJcbmZ1bmN0aW9uIHNtYWxsZXIodHJlZSwgbiwgbSwgZGVwdGgpIHtcclxuICB2YXIgX24yID0gbiAqIDI7XHJcbiAgdmFyIF9tMiA9IG0gKiAyO1xyXG4gIHJldHVybiAodHJlZVtfbjJdLyouRnJlcSovIDwgdHJlZVtfbTJdLyouRnJlcSovIHx8XHJcbiAgICAgICAgICh0cmVlW19uMl0vKi5GcmVxKi8gPT09IHRyZWVbX20yXS8qLkZyZXEqLyAmJiBkZXB0aFtuXSA8PSBkZXB0aFttXSkpO1xyXG59XHJcblxyXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuICogUmVzdG9yZSB0aGUgaGVhcCBwcm9wZXJ0eSBieSBtb3ZpbmcgZG93biB0aGUgdHJlZSBzdGFydGluZyBhdCBub2RlIGssXHJcbiAqIGV4Y2hhbmdpbmcgYSBub2RlIHdpdGggdGhlIHNtYWxsZXN0IG9mIGl0cyB0d28gc29ucyBpZiBuZWNlc3NhcnksIHN0b3BwaW5nXHJcbiAqIHdoZW4gdGhlIGhlYXAgcHJvcGVydHkgaXMgcmUtZXN0YWJsaXNoZWQgKGVhY2ggZmF0aGVyIHNtYWxsZXIgdGhhbiBpdHNcclxuICogdHdvIHNvbnMpLlxyXG4gKi9cclxuZnVuY3Rpb24gcHFkb3duaGVhcChzLCB0cmVlLCBrKVxyXG4vLyAgICBkZWZsYXRlX3N0YXRlICpzO1xyXG4vLyAgICBjdF9kYXRhICp0cmVlOyAgLyogdGhlIHRyZWUgdG8gcmVzdG9yZSAqL1xyXG4vLyAgICBpbnQgazsgICAgICAgICAgICAgICAvKiBub2RlIHRvIG1vdmUgZG93biAqL1xyXG57XHJcbiAgdmFyIHYgPSBzLmhlYXBba107XHJcbiAgdmFyIGogPSBrIDw8IDE7ICAvKiBsZWZ0IHNvbiBvZiBrICovXHJcbiAgd2hpbGUgKGogPD0gcy5oZWFwX2xlbikge1xyXG4gICAgLyogU2V0IGogdG8gdGhlIHNtYWxsZXN0IG9mIHRoZSB0d28gc29uczogKi9cclxuICAgIGlmIChqIDwgcy5oZWFwX2xlbiAmJlxyXG4gICAgICBzbWFsbGVyKHRyZWUsIHMuaGVhcFtqICsgMV0sIHMuaGVhcFtqXSwgcy5kZXB0aCkpIHtcclxuICAgICAgaisrO1xyXG4gICAgfVxyXG4gICAgLyogRXhpdCBpZiB2IGlzIHNtYWxsZXIgdGhhbiBib3RoIHNvbnMgKi9cclxuICAgIGlmIChzbWFsbGVyKHRyZWUsIHYsIHMuaGVhcFtqXSwgcy5kZXB0aCkpIHsgYnJlYWs7IH1cclxuXHJcbiAgICAvKiBFeGNoYW5nZSB2IHdpdGggdGhlIHNtYWxsZXN0IHNvbiAqL1xyXG4gICAgcy5oZWFwW2tdID0gcy5oZWFwW2pdO1xyXG4gICAgayA9IGo7XHJcblxyXG4gICAgLyogQW5kIGNvbnRpbnVlIGRvd24gdGhlIHRyZWUsIHNldHRpbmcgaiB0byB0aGUgbGVmdCBzb24gb2YgayAqL1xyXG4gICAgaiA8PD0gMTtcclxuICB9XHJcbiAgcy5oZWFwW2tdID0gdjtcclxufVxyXG5cclxuXHJcbi8vIGlubGluZWQgbWFudWFsbHlcclxuLy8gdmFyIFNNQUxMRVNUID0gMTtcclxuXHJcbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4gKiBTZW5kIHRoZSBibG9jayBkYXRhIGNvbXByZXNzZWQgdXNpbmcgdGhlIGdpdmVuIEh1ZmZtYW4gdHJlZXNcclxuICovXHJcbmZ1bmN0aW9uIGNvbXByZXNzX2Jsb2NrKHMsIGx0cmVlLCBkdHJlZSlcclxuLy8gICAgZGVmbGF0ZV9zdGF0ZSAqcztcclxuLy8gICAgY29uc3QgY3RfZGF0YSAqbHRyZWU7IC8qIGxpdGVyYWwgdHJlZSAqL1xyXG4vLyAgICBjb25zdCBjdF9kYXRhICpkdHJlZTsgLyogZGlzdGFuY2UgdHJlZSAqL1xyXG57XHJcbiAgdmFyIGRpc3Q7ICAgICAgICAgICAvKiBkaXN0YW5jZSBvZiBtYXRjaGVkIHN0cmluZyAqL1xyXG4gIHZhciBsYzsgICAgICAgICAgICAgLyogbWF0Y2ggbGVuZ3RoIG9yIHVubWF0Y2hlZCBjaGFyIChpZiBkaXN0ID09IDApICovXHJcbiAgdmFyIGx4ID0gMDsgICAgICAgICAvKiBydW5uaW5nIGluZGV4IGluIGxfYnVmICovXHJcbiAgdmFyIGNvZGU7ICAgICAgICAgICAvKiB0aGUgY29kZSB0byBzZW5kICovXHJcbiAgdmFyIGV4dHJhOyAgICAgICAgICAvKiBudW1iZXIgb2YgZXh0cmEgYml0cyB0byBzZW5kICovXHJcblxyXG4gIGlmIChzLmxhc3RfbGl0ICE9PSAwKSB7XHJcbiAgICBkbyB7XHJcbiAgICAgIGRpc3QgPSAocy5wZW5kaW5nX2J1ZltzLmRfYnVmICsgbHggKiAyXSA8PCA4KSB8IChzLnBlbmRpbmdfYnVmW3MuZF9idWYgKyBseCAqIDIgKyAxXSk7XHJcbiAgICAgIGxjID0gcy5wZW5kaW5nX2J1ZltzLmxfYnVmICsgbHhdO1xyXG4gICAgICBseCsrO1xyXG5cclxuICAgICAgaWYgKGRpc3QgPT09IDApIHtcclxuICAgICAgICBzZW5kX2NvZGUocywgbGMsIGx0cmVlKTsgLyogc2VuZCBhIGxpdGVyYWwgYnl0ZSAqL1xyXG4gICAgICAgIC8vVHJhY2Vjdihpc2dyYXBoKGxjKSwgKHN0ZGVycixcIiAnJWMnIFwiLCBsYykpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIC8qIEhlcmUsIGxjIGlzIHRoZSBtYXRjaCBsZW5ndGggLSBNSU5fTUFUQ0ggKi9cclxuICAgICAgICBjb2RlID0gX2xlbmd0aF9jb2RlW2xjXTtcclxuICAgICAgICBzZW5kX2NvZGUocywgY29kZSArIExJVEVSQUxTICsgMSwgbHRyZWUpOyAvKiBzZW5kIHRoZSBsZW5ndGggY29kZSAqL1xyXG4gICAgICAgIGV4dHJhID0gZXh0cmFfbGJpdHNbY29kZV07XHJcbiAgICAgICAgaWYgKGV4dHJhICE9PSAwKSB7XHJcbiAgICAgICAgICBsYyAtPSBiYXNlX2xlbmd0aFtjb2RlXTtcclxuICAgICAgICAgIHNlbmRfYml0cyhzLCBsYywgZXh0cmEpOyAgICAgICAvKiBzZW5kIHRoZSBleHRyYSBsZW5ndGggYml0cyAqL1xyXG4gICAgICAgIH1cclxuICAgICAgICBkaXN0LS07IC8qIGRpc3QgaXMgbm93IHRoZSBtYXRjaCBkaXN0YW5jZSAtIDEgKi9cclxuICAgICAgICBjb2RlID0gZF9jb2RlKGRpc3QpO1xyXG4gICAgICAgIC8vQXNzZXJ0IChjb2RlIDwgRF9DT0RFUywgXCJiYWQgZF9jb2RlXCIpO1xyXG5cclxuICAgICAgICBzZW5kX2NvZGUocywgY29kZSwgZHRyZWUpOyAgICAgICAvKiBzZW5kIHRoZSBkaXN0YW5jZSBjb2RlICovXHJcbiAgICAgICAgZXh0cmEgPSBleHRyYV9kYml0c1tjb2RlXTtcclxuICAgICAgICBpZiAoZXh0cmEgIT09IDApIHtcclxuICAgICAgICAgIGRpc3QgLT0gYmFzZV9kaXN0W2NvZGVdO1xyXG4gICAgICAgICAgc2VuZF9iaXRzKHMsIGRpc3QsIGV4dHJhKTsgICAvKiBzZW5kIHRoZSBleHRyYSBkaXN0YW5jZSBiaXRzICovXHJcbiAgICAgICAgfVxyXG4gICAgICB9IC8qIGxpdGVyYWwgb3IgbWF0Y2ggcGFpciA/ICovXHJcblxyXG4gICAgICAvKiBDaGVjayB0aGF0IHRoZSBvdmVybGF5IGJldHdlZW4gcGVuZGluZ19idWYgYW5kIGRfYnVmK2xfYnVmIGlzIG9rOiAqL1xyXG4gICAgICAvL0Fzc2VydCgodUludCkocy0+cGVuZGluZykgPCBzLT5saXRfYnVmc2l6ZSArIDIqbHgsXHJcbiAgICAgIC8vICAgICAgIFwicGVuZGluZ0J1ZiBvdmVyZmxvd1wiKTtcclxuXHJcbiAgICB9IHdoaWxlIChseCA8IHMubGFzdF9saXQpO1xyXG4gIH1cclxuXHJcbiAgc2VuZF9jb2RlKHMsIEVORF9CTE9DSywgbHRyZWUpO1xyXG59XHJcblxyXG5cclxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbiAqIENvbnN0cnVjdCBvbmUgSHVmZm1hbiB0cmVlIGFuZCBhc3NpZ25zIHRoZSBjb2RlIGJpdCBzdHJpbmdzIGFuZCBsZW5ndGhzLlxyXG4gKiBVcGRhdGUgdGhlIHRvdGFsIGJpdCBsZW5ndGggZm9yIHRoZSBjdXJyZW50IGJsb2NrLlxyXG4gKiBJTiBhc3NlcnRpb246IHRoZSBmaWVsZCBmcmVxIGlzIHNldCBmb3IgYWxsIHRyZWUgZWxlbWVudHMuXHJcbiAqIE9VVCBhc3NlcnRpb25zOiB0aGUgZmllbGRzIGxlbiBhbmQgY29kZSBhcmUgc2V0IHRvIHRoZSBvcHRpbWFsIGJpdCBsZW5ndGhcclxuICogICAgIGFuZCBjb3JyZXNwb25kaW5nIGNvZGUuIFRoZSBsZW5ndGggb3B0X2xlbiBpcyB1cGRhdGVkOyBzdGF0aWNfbGVuIGlzXHJcbiAqICAgICBhbHNvIHVwZGF0ZWQgaWYgc3RyZWUgaXMgbm90IG51bGwuIFRoZSBmaWVsZCBtYXhfY29kZSBpcyBzZXQuXHJcbiAqL1xyXG5mdW5jdGlvbiBidWlsZF90cmVlKHMsIGRlc2MpXHJcbi8vICAgIGRlZmxhdGVfc3RhdGUgKnM7XHJcbi8vICAgIHRyZWVfZGVzYyAqZGVzYzsgLyogdGhlIHRyZWUgZGVzY3JpcHRvciAqL1xyXG57XHJcbiAgdmFyIHRyZWUgICAgID0gZGVzYy5keW5fdHJlZTtcclxuICB2YXIgc3RyZWUgICAgPSBkZXNjLnN0YXRfZGVzYy5zdGF0aWNfdHJlZTtcclxuICB2YXIgaGFzX3N0cmVlID0gZGVzYy5zdGF0X2Rlc2MuaGFzX3N0cmVlO1xyXG4gIHZhciBlbGVtcyAgICA9IGRlc2Muc3RhdF9kZXNjLmVsZW1zO1xyXG4gIHZhciBuLCBtOyAgICAgICAgICAvKiBpdGVyYXRlIG92ZXIgaGVhcCBlbGVtZW50cyAqL1xyXG4gIHZhciBtYXhfY29kZSA9IC0xOyAvKiBsYXJnZXN0IGNvZGUgd2l0aCBub24gemVybyBmcmVxdWVuY3kgKi9cclxuICB2YXIgbm9kZTsgICAgICAgICAgLyogbmV3IG5vZGUgYmVpbmcgY3JlYXRlZCAqL1xyXG5cclxuICAvKiBDb25zdHJ1Y3QgdGhlIGluaXRpYWwgaGVhcCwgd2l0aCBsZWFzdCBmcmVxdWVudCBlbGVtZW50IGluXHJcbiAgICogaGVhcFtTTUFMTEVTVF0uIFRoZSBzb25zIG9mIGhlYXBbbl0gYXJlIGhlYXBbMipuXSBhbmQgaGVhcFsyKm4rMV0uXHJcbiAgICogaGVhcFswXSBpcyBub3QgdXNlZC5cclxuICAgKi9cclxuICBzLmhlYXBfbGVuID0gMDtcclxuICBzLmhlYXBfbWF4ID0gSEVBUF9TSVpFO1xyXG5cclxuICBmb3IgKG4gPSAwOyBuIDwgZWxlbXM7IG4rKykge1xyXG4gICAgaWYgKHRyZWVbbiAqIDJdLyouRnJlcSovICE9PSAwKSB7XHJcbiAgICAgIHMuaGVhcFsrK3MuaGVhcF9sZW5dID0gbWF4X2NvZGUgPSBuO1xyXG4gICAgICBzLmRlcHRoW25dID0gMDtcclxuXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0cmVlW24gKiAyICsgMV0vKi5MZW4qLyA9IDA7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKiBUaGUgcGt6aXAgZm9ybWF0IHJlcXVpcmVzIHRoYXQgYXQgbGVhc3Qgb25lIGRpc3RhbmNlIGNvZGUgZXhpc3RzLFxyXG4gICAqIGFuZCB0aGF0IGF0IGxlYXN0IG9uZSBiaXQgc2hvdWxkIGJlIHNlbnQgZXZlbiBpZiB0aGVyZSBpcyBvbmx5IG9uZVxyXG4gICAqIHBvc3NpYmxlIGNvZGUuIFNvIHRvIGF2b2lkIHNwZWNpYWwgY2hlY2tzIGxhdGVyIG9uIHdlIGZvcmNlIGF0IGxlYXN0XHJcbiAgICogdHdvIGNvZGVzIG9mIG5vbiB6ZXJvIGZyZXF1ZW5jeS5cclxuICAgKi9cclxuICB3aGlsZSAocy5oZWFwX2xlbiA8IDIpIHtcclxuICAgIG5vZGUgPSBzLmhlYXBbKytzLmhlYXBfbGVuXSA9IChtYXhfY29kZSA8IDIgPyArK21heF9jb2RlIDogMCk7XHJcbiAgICB0cmVlW25vZGUgKiAyXS8qLkZyZXEqLyA9IDE7XHJcbiAgICBzLmRlcHRoW25vZGVdID0gMDtcclxuICAgIHMub3B0X2xlbi0tO1xyXG5cclxuICAgIGlmIChoYXNfc3RyZWUpIHtcclxuICAgICAgcy5zdGF0aWNfbGVuIC09IHN0cmVlW25vZGUgKiAyICsgMV0vKi5MZW4qLztcclxuICAgIH1cclxuICAgIC8qIG5vZGUgaXMgMCBvciAxIHNvIGl0IGRvZXMgbm90IGhhdmUgZXh0cmEgYml0cyAqL1xyXG4gIH1cclxuICBkZXNjLm1heF9jb2RlID0gbWF4X2NvZGU7XHJcblxyXG4gIC8qIFRoZSBlbGVtZW50cyBoZWFwW2hlYXBfbGVuLzIrMSAuLiBoZWFwX2xlbl0gYXJlIGxlYXZlcyBvZiB0aGUgdHJlZSxcclxuICAgKiBlc3RhYmxpc2ggc3ViLWhlYXBzIG9mIGluY3JlYXNpbmcgbGVuZ3RoczpcclxuICAgKi9cclxuICBmb3IgKG4gPSAocy5oZWFwX2xlbiA+PiAxLyppbnQgLzIqLyk7IG4gPj0gMTsgbi0tKSB7IHBxZG93bmhlYXAocywgdHJlZSwgbik7IH1cclxuXHJcbiAgLyogQ29uc3RydWN0IHRoZSBIdWZmbWFuIHRyZWUgYnkgcmVwZWF0ZWRseSBjb21iaW5pbmcgdGhlIGxlYXN0IHR3b1xyXG4gICAqIGZyZXF1ZW50IG5vZGVzLlxyXG4gICAqL1xyXG4gIG5vZGUgPSBlbGVtczsgICAgICAgICAgICAgIC8qIG5leHQgaW50ZXJuYWwgbm9kZSBvZiB0aGUgdHJlZSAqL1xyXG4gIGRvIHtcclxuICAgIC8vcHFyZW1vdmUocywgdHJlZSwgbik7ICAvKiBuID0gbm9kZSBvZiBsZWFzdCBmcmVxdWVuY3kgKi9cclxuICAgIC8qKiogcHFyZW1vdmUgKioqL1xyXG4gICAgbiA9IHMuaGVhcFsxLypTTUFMTEVTVCovXTtcclxuICAgIHMuaGVhcFsxLypTTUFMTEVTVCovXSA9IHMuaGVhcFtzLmhlYXBfbGVuLS1dO1xyXG4gICAgcHFkb3duaGVhcChzLCB0cmVlLCAxLypTTUFMTEVTVCovKTtcclxuICAgIC8qKiovXHJcblxyXG4gICAgbSA9IHMuaGVhcFsxLypTTUFMTEVTVCovXTsgLyogbSA9IG5vZGUgb2YgbmV4dCBsZWFzdCBmcmVxdWVuY3kgKi9cclxuXHJcbiAgICBzLmhlYXBbLS1zLmhlYXBfbWF4XSA9IG47IC8qIGtlZXAgdGhlIG5vZGVzIHNvcnRlZCBieSBmcmVxdWVuY3kgKi9cclxuICAgIHMuaGVhcFstLXMuaGVhcF9tYXhdID0gbTtcclxuXHJcbiAgICAvKiBDcmVhdGUgYSBuZXcgbm9kZSBmYXRoZXIgb2YgbiBhbmQgbSAqL1xyXG4gICAgdHJlZVtub2RlICogMl0vKi5GcmVxKi8gPSB0cmVlW24gKiAyXS8qLkZyZXEqLyArIHRyZWVbbSAqIDJdLyouRnJlcSovO1xyXG4gICAgcy5kZXB0aFtub2RlXSA9IChzLmRlcHRoW25dID49IHMuZGVwdGhbbV0gPyBzLmRlcHRoW25dIDogcy5kZXB0aFttXSkgKyAxO1xyXG4gICAgdHJlZVtuICogMiArIDFdLyouRGFkKi8gPSB0cmVlW20gKiAyICsgMV0vKi5EYWQqLyA9IG5vZGU7XHJcblxyXG4gICAgLyogYW5kIGluc2VydCB0aGUgbmV3IG5vZGUgaW4gdGhlIGhlYXAgKi9cclxuICAgIHMuaGVhcFsxLypTTUFMTEVTVCovXSA9IG5vZGUrKztcclxuICAgIHBxZG93bmhlYXAocywgdHJlZSwgMS8qU01BTExFU1QqLyk7XHJcblxyXG4gIH0gd2hpbGUgKHMuaGVhcF9sZW4gPj0gMik7XHJcblxyXG4gIHMuaGVhcFstLXMuaGVhcF9tYXhdID0gcy5oZWFwWzEvKlNNQUxMRVNUKi9dO1xyXG5cclxuICAvKiBBdCB0aGlzIHBvaW50LCB0aGUgZmllbGRzIGZyZXEgYW5kIGRhZCBhcmUgc2V0LiBXZSBjYW4gbm93XHJcbiAgICogZ2VuZXJhdGUgdGhlIGJpdCBsZW5ndGhzLlxyXG4gICAqL1xyXG4gIGdlbl9iaXRsZW4ocywgZGVzYyk7XHJcblxyXG4gIC8qIFRoZSBmaWVsZCBsZW4gaXMgbm93IHNldCwgd2UgY2FuIGdlbmVyYXRlIHRoZSBiaXQgY29kZXMgKi9cclxuICBnZW5fY29kZXModHJlZSwgbWF4X2NvZGUsIHMuYmxfY291bnQpO1xyXG59XHJcblxyXG5cclxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbiAqIFNjYW4gYSBsaXRlcmFsIG9yIGRpc3RhbmNlIHRyZWUgdG8gZGV0ZXJtaW5lIHRoZSBmcmVxdWVuY2llcyBvZiB0aGUgY29kZXNcclxuICogaW4gdGhlIGJpdCBsZW5ndGggdHJlZS5cclxuICovXHJcbmZ1bmN0aW9uIHNjYW5fdHJlZShzLCB0cmVlLCBtYXhfY29kZSlcclxuLy8gICAgZGVmbGF0ZV9zdGF0ZSAqcztcclxuLy8gICAgY3RfZGF0YSAqdHJlZTsgICAvKiB0aGUgdHJlZSB0byBiZSBzY2FubmVkICovXHJcbi8vICAgIGludCBtYXhfY29kZTsgICAgLyogYW5kIGl0cyBsYXJnZXN0IGNvZGUgb2Ygbm9uIHplcm8gZnJlcXVlbmN5ICovXHJcbntcclxuICB2YXIgbjsgICAgICAgICAgICAgICAgICAgICAvKiBpdGVyYXRlcyBvdmVyIGFsbCB0cmVlIGVsZW1lbnRzICovXHJcbiAgdmFyIHByZXZsZW4gPSAtMTsgICAgICAgICAgLyogbGFzdCBlbWl0dGVkIGxlbmd0aCAqL1xyXG4gIHZhciBjdXJsZW47ICAgICAgICAgICAgICAgIC8qIGxlbmd0aCBvZiBjdXJyZW50IGNvZGUgKi9cclxuXHJcbiAgdmFyIG5leHRsZW4gPSB0cmVlWzAgKiAyICsgMV0vKi5MZW4qLzsgLyogbGVuZ3RoIG9mIG5leHQgY29kZSAqL1xyXG5cclxuICB2YXIgY291bnQgPSAwOyAgICAgICAgICAgICAvKiByZXBlYXQgY291bnQgb2YgdGhlIGN1cnJlbnQgY29kZSAqL1xyXG4gIHZhciBtYXhfY291bnQgPSA3OyAgICAgICAgIC8qIG1heCByZXBlYXQgY291bnQgKi9cclxuICB2YXIgbWluX2NvdW50ID0gNDsgICAgICAgICAvKiBtaW4gcmVwZWF0IGNvdW50ICovXHJcblxyXG4gIGlmIChuZXh0bGVuID09PSAwKSB7XHJcbiAgICBtYXhfY291bnQgPSAxMzg7XHJcbiAgICBtaW5fY291bnQgPSAzO1xyXG4gIH1cclxuICB0cmVlWyhtYXhfY29kZSArIDEpICogMiArIDFdLyouTGVuKi8gPSAweGZmZmY7IC8qIGd1YXJkICovXHJcblxyXG4gIGZvciAobiA9IDA7IG4gPD0gbWF4X2NvZGU7IG4rKykge1xyXG4gICAgY3VybGVuID0gbmV4dGxlbjtcclxuICAgIG5leHRsZW4gPSB0cmVlWyhuICsgMSkgKiAyICsgMV0vKi5MZW4qLztcclxuXHJcbiAgICBpZiAoKytjb3VudCA8IG1heF9jb3VudCAmJiBjdXJsZW4gPT09IG5leHRsZW4pIHtcclxuICAgICAgY29udGludWU7XHJcblxyXG4gICAgfSBlbHNlIGlmIChjb3VudCA8IG1pbl9jb3VudCkge1xyXG4gICAgICBzLmJsX3RyZWVbY3VybGVuICogMl0vKi5GcmVxKi8gKz0gY291bnQ7XHJcblxyXG4gICAgfSBlbHNlIGlmIChjdXJsZW4gIT09IDApIHtcclxuXHJcbiAgICAgIGlmIChjdXJsZW4gIT09IHByZXZsZW4pIHsgcy5ibF90cmVlW2N1cmxlbiAqIDJdLyouRnJlcSovKys7IH1cclxuICAgICAgcy5ibF90cmVlW1JFUF8zXzYgKiAyXS8qLkZyZXEqLysrO1xyXG5cclxuICAgIH0gZWxzZSBpZiAoY291bnQgPD0gMTApIHtcclxuICAgICAgcy5ibF90cmVlW1JFUFpfM18xMCAqIDJdLyouRnJlcSovKys7XHJcblxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcy5ibF90cmVlW1JFUFpfMTFfMTM4ICogMl0vKi5GcmVxKi8rKztcclxuICAgIH1cclxuXHJcbiAgICBjb3VudCA9IDA7XHJcbiAgICBwcmV2bGVuID0gY3VybGVuO1xyXG5cclxuICAgIGlmIChuZXh0bGVuID09PSAwKSB7XHJcbiAgICAgIG1heF9jb3VudCA9IDEzODtcclxuICAgICAgbWluX2NvdW50ID0gMztcclxuXHJcbiAgICB9IGVsc2UgaWYgKGN1cmxlbiA9PT0gbmV4dGxlbikge1xyXG4gICAgICBtYXhfY291bnQgPSA2O1xyXG4gICAgICBtaW5fY291bnQgPSAzO1xyXG5cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIG1heF9jb3VudCA9IDc7XHJcbiAgICAgIG1pbl9jb3VudCA9IDQ7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5cclxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbiAqIFNlbmQgYSBsaXRlcmFsIG9yIGRpc3RhbmNlIHRyZWUgaW4gY29tcHJlc3NlZCBmb3JtLCB1c2luZyB0aGUgY29kZXMgaW5cclxuICogYmxfdHJlZS5cclxuICovXHJcbmZ1bmN0aW9uIHNlbmRfdHJlZShzLCB0cmVlLCBtYXhfY29kZSlcclxuLy8gICAgZGVmbGF0ZV9zdGF0ZSAqcztcclxuLy8gICAgY3RfZGF0YSAqdHJlZTsgLyogdGhlIHRyZWUgdG8gYmUgc2Nhbm5lZCAqL1xyXG4vLyAgICBpbnQgbWF4X2NvZGU7ICAgICAgIC8qIGFuZCBpdHMgbGFyZ2VzdCBjb2RlIG9mIG5vbiB6ZXJvIGZyZXF1ZW5jeSAqL1xyXG57XHJcbiAgdmFyIG47ICAgICAgICAgICAgICAgICAgICAgLyogaXRlcmF0ZXMgb3ZlciBhbGwgdHJlZSBlbGVtZW50cyAqL1xyXG4gIHZhciBwcmV2bGVuID0gLTE7ICAgICAgICAgIC8qIGxhc3QgZW1pdHRlZCBsZW5ndGggKi9cclxuICB2YXIgY3VybGVuOyAgICAgICAgICAgICAgICAvKiBsZW5ndGggb2YgY3VycmVudCBjb2RlICovXHJcblxyXG4gIHZhciBuZXh0bGVuID0gdHJlZVswICogMiArIDFdLyouTGVuKi87IC8qIGxlbmd0aCBvZiBuZXh0IGNvZGUgKi9cclxuXHJcbiAgdmFyIGNvdW50ID0gMDsgICAgICAgICAgICAgLyogcmVwZWF0IGNvdW50IG9mIHRoZSBjdXJyZW50IGNvZGUgKi9cclxuICB2YXIgbWF4X2NvdW50ID0gNzsgICAgICAgICAvKiBtYXggcmVwZWF0IGNvdW50ICovXHJcbiAgdmFyIG1pbl9jb3VudCA9IDQ7ICAgICAgICAgLyogbWluIHJlcGVhdCBjb3VudCAqL1xyXG5cclxuICAvKiB0cmVlW21heF9jb2RlKzFdLkxlbiA9IC0xOyAqLyAgLyogZ3VhcmQgYWxyZWFkeSBzZXQgKi9cclxuICBpZiAobmV4dGxlbiA9PT0gMCkge1xyXG4gICAgbWF4X2NvdW50ID0gMTM4O1xyXG4gICAgbWluX2NvdW50ID0gMztcclxuICB9XHJcblxyXG4gIGZvciAobiA9IDA7IG4gPD0gbWF4X2NvZGU7IG4rKykge1xyXG4gICAgY3VybGVuID0gbmV4dGxlbjtcclxuICAgIG5leHRsZW4gPSB0cmVlWyhuICsgMSkgKiAyICsgMV0vKi5MZW4qLztcclxuXHJcbiAgICBpZiAoKytjb3VudCA8IG1heF9jb3VudCAmJiBjdXJsZW4gPT09IG5leHRsZW4pIHtcclxuICAgICAgY29udGludWU7XHJcblxyXG4gICAgfSBlbHNlIGlmIChjb3VudCA8IG1pbl9jb3VudCkge1xyXG4gICAgICBkbyB7IHNlbmRfY29kZShzLCBjdXJsZW4sIHMuYmxfdHJlZSk7IH0gd2hpbGUgKC0tY291bnQgIT09IDApO1xyXG5cclxuICAgIH0gZWxzZSBpZiAoY3VybGVuICE9PSAwKSB7XHJcbiAgICAgIGlmIChjdXJsZW4gIT09IHByZXZsZW4pIHtcclxuICAgICAgICBzZW5kX2NvZGUocywgY3VybGVuLCBzLmJsX3RyZWUpO1xyXG4gICAgICAgIGNvdW50LS07XHJcbiAgICAgIH1cclxuICAgICAgLy9Bc3NlcnQoY291bnQgPj0gMyAmJiBjb3VudCA8PSA2LCBcIiAzXzY/XCIpO1xyXG4gICAgICBzZW5kX2NvZGUocywgUkVQXzNfNiwgcy5ibF90cmVlKTtcclxuICAgICAgc2VuZF9iaXRzKHMsIGNvdW50IC0gMywgMik7XHJcblxyXG4gICAgfSBlbHNlIGlmIChjb3VudCA8PSAxMCkge1xyXG4gICAgICBzZW5kX2NvZGUocywgUkVQWl8zXzEwLCBzLmJsX3RyZWUpO1xyXG4gICAgICBzZW5kX2JpdHMocywgY291bnQgLSAzLCAzKTtcclxuXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBzZW5kX2NvZGUocywgUkVQWl8xMV8xMzgsIHMuYmxfdHJlZSk7XHJcbiAgICAgIHNlbmRfYml0cyhzLCBjb3VudCAtIDExLCA3KTtcclxuICAgIH1cclxuXHJcbiAgICBjb3VudCA9IDA7XHJcbiAgICBwcmV2bGVuID0gY3VybGVuO1xyXG4gICAgaWYgKG5leHRsZW4gPT09IDApIHtcclxuICAgICAgbWF4X2NvdW50ID0gMTM4O1xyXG4gICAgICBtaW5fY291bnQgPSAzO1xyXG5cclxuICAgIH0gZWxzZSBpZiAoY3VybGVuID09PSBuZXh0bGVuKSB7XHJcbiAgICAgIG1heF9jb3VudCA9IDY7XHJcbiAgICAgIG1pbl9jb3VudCA9IDM7XHJcblxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgbWF4X2NvdW50ID0gNztcclxuICAgICAgbWluX2NvdW50ID0gNDtcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcblxyXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuICogQ29uc3RydWN0IHRoZSBIdWZmbWFuIHRyZWUgZm9yIHRoZSBiaXQgbGVuZ3RocyBhbmQgcmV0dXJuIHRoZSBpbmRleCBpblxyXG4gKiBibF9vcmRlciBvZiB0aGUgbGFzdCBiaXQgbGVuZ3RoIGNvZGUgdG8gc2VuZC5cclxuICovXHJcbmZ1bmN0aW9uIGJ1aWxkX2JsX3RyZWUocykge1xyXG4gIHZhciBtYXhfYmxpbmRleDsgIC8qIGluZGV4IG9mIGxhc3QgYml0IGxlbmd0aCBjb2RlIG9mIG5vbiB6ZXJvIGZyZXEgKi9cclxuXHJcbiAgLyogRGV0ZXJtaW5lIHRoZSBiaXQgbGVuZ3RoIGZyZXF1ZW5jaWVzIGZvciBsaXRlcmFsIGFuZCBkaXN0YW5jZSB0cmVlcyAqL1xyXG4gIHNjYW5fdHJlZShzLCBzLmR5bl9sdHJlZSwgcy5sX2Rlc2MubWF4X2NvZGUpO1xyXG4gIHNjYW5fdHJlZShzLCBzLmR5bl9kdHJlZSwgcy5kX2Rlc2MubWF4X2NvZGUpO1xyXG5cclxuICAvKiBCdWlsZCB0aGUgYml0IGxlbmd0aCB0cmVlOiAqL1xyXG4gIGJ1aWxkX3RyZWUocywgcy5ibF9kZXNjKTtcclxuICAvKiBvcHRfbGVuIG5vdyBpbmNsdWRlcyB0aGUgbGVuZ3RoIG9mIHRoZSB0cmVlIHJlcHJlc2VudGF0aW9ucywgZXhjZXB0XHJcbiAgICogdGhlIGxlbmd0aHMgb2YgdGhlIGJpdCBsZW5ndGhzIGNvZGVzIGFuZCB0aGUgNSs1KzQgYml0cyBmb3IgdGhlIGNvdW50cy5cclxuICAgKi9cclxuXHJcbiAgLyogRGV0ZXJtaW5lIHRoZSBudW1iZXIgb2YgYml0IGxlbmd0aCBjb2RlcyB0byBzZW5kLiBUaGUgcGt6aXAgZm9ybWF0XHJcbiAgICogcmVxdWlyZXMgdGhhdCBhdCBsZWFzdCA0IGJpdCBsZW5ndGggY29kZXMgYmUgc2VudC4gKGFwcG5vdGUudHh0IHNheXNcclxuICAgKiAzIGJ1dCB0aGUgYWN0dWFsIHZhbHVlIHVzZWQgaXMgNC4pXHJcbiAgICovXHJcbiAgZm9yIChtYXhfYmxpbmRleCA9IEJMX0NPREVTIC0gMTsgbWF4X2JsaW5kZXggPj0gMzsgbWF4X2JsaW5kZXgtLSkge1xyXG4gICAgaWYgKHMuYmxfdHJlZVtibF9vcmRlclttYXhfYmxpbmRleF0gKiAyICsgMV0vKi5MZW4qLyAhPT0gMCkge1xyXG4gICAgICBicmVhaztcclxuICAgIH1cclxuICB9XHJcbiAgLyogVXBkYXRlIG9wdF9sZW4gdG8gaW5jbHVkZSB0aGUgYml0IGxlbmd0aCB0cmVlIGFuZCBjb3VudHMgKi9cclxuICBzLm9wdF9sZW4gKz0gMyAqIChtYXhfYmxpbmRleCArIDEpICsgNSArIDUgKyA0O1xyXG4gIC8vVHJhY2V2KChzdGRlcnIsIFwiXFxuZHluIHRyZWVzOiBkeW4gJWxkLCBzdGF0ICVsZFwiLFxyXG4gIC8vICAgICAgICBzLT5vcHRfbGVuLCBzLT5zdGF0aWNfbGVuKSk7XHJcblxyXG4gIHJldHVybiBtYXhfYmxpbmRleDtcclxufVxyXG5cclxuXHJcbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4gKiBTZW5kIHRoZSBoZWFkZXIgZm9yIGEgYmxvY2sgdXNpbmcgZHluYW1pYyBIdWZmbWFuIHRyZWVzOiB0aGUgY291bnRzLCB0aGVcclxuICogbGVuZ3RocyBvZiB0aGUgYml0IGxlbmd0aCBjb2RlcywgdGhlIGxpdGVyYWwgdHJlZSBhbmQgdGhlIGRpc3RhbmNlIHRyZWUuXHJcbiAqIElOIGFzc2VydGlvbjogbGNvZGVzID49IDI1NywgZGNvZGVzID49IDEsIGJsY29kZXMgPj0gNC5cclxuICovXHJcbmZ1bmN0aW9uIHNlbmRfYWxsX3RyZWVzKHMsIGxjb2RlcywgZGNvZGVzLCBibGNvZGVzKVxyXG4vLyAgICBkZWZsYXRlX3N0YXRlICpzO1xyXG4vLyAgICBpbnQgbGNvZGVzLCBkY29kZXMsIGJsY29kZXM7IC8qIG51bWJlciBvZiBjb2RlcyBmb3IgZWFjaCB0cmVlICovXHJcbntcclxuICB2YXIgcmFuazsgICAgICAgICAgICAgICAgICAgIC8qIGluZGV4IGluIGJsX29yZGVyICovXHJcblxyXG4gIC8vQXNzZXJ0IChsY29kZXMgPj0gMjU3ICYmIGRjb2RlcyA+PSAxICYmIGJsY29kZXMgPj0gNCwgXCJub3QgZW5vdWdoIGNvZGVzXCIpO1xyXG4gIC8vQXNzZXJ0IChsY29kZXMgPD0gTF9DT0RFUyAmJiBkY29kZXMgPD0gRF9DT0RFUyAmJiBibGNvZGVzIDw9IEJMX0NPREVTLFxyXG4gIC8vICAgICAgICBcInRvbyBtYW55IGNvZGVzXCIpO1xyXG4gIC8vVHJhY2V2KChzdGRlcnIsIFwiXFxuYmwgY291bnRzOiBcIikpO1xyXG4gIHNlbmRfYml0cyhzLCBsY29kZXMgLSAyNTcsIDUpOyAvKiBub3QgKzI1NSBhcyBzdGF0ZWQgaW4gYXBwbm90ZS50eHQgKi9cclxuICBzZW5kX2JpdHMocywgZGNvZGVzIC0gMSwgICA1KTtcclxuICBzZW5kX2JpdHMocywgYmxjb2RlcyAtIDQsICA0KTsgLyogbm90IC0zIGFzIHN0YXRlZCBpbiBhcHBub3RlLnR4dCAqL1xyXG4gIGZvciAocmFuayA9IDA7IHJhbmsgPCBibGNvZGVzOyByYW5rKyspIHtcclxuICAgIC8vVHJhY2V2KChzdGRlcnIsIFwiXFxuYmwgY29kZSAlMmQgXCIsIGJsX29yZGVyW3JhbmtdKSk7XHJcbiAgICBzZW5kX2JpdHMocywgcy5ibF90cmVlW2JsX29yZGVyW3JhbmtdICogMiArIDFdLyouTGVuKi8sIDMpO1xyXG4gIH1cclxuICAvL1RyYWNldigoc3RkZXJyLCBcIlxcbmJsIHRyZWU6IHNlbnQgJWxkXCIsIHMtPmJpdHNfc2VudCkpO1xyXG5cclxuICBzZW5kX3RyZWUocywgcy5keW5fbHRyZWUsIGxjb2RlcyAtIDEpOyAvKiBsaXRlcmFsIHRyZWUgKi9cclxuICAvL1RyYWNldigoc3RkZXJyLCBcIlxcbmxpdCB0cmVlOiBzZW50ICVsZFwiLCBzLT5iaXRzX3NlbnQpKTtcclxuXHJcbiAgc2VuZF90cmVlKHMsIHMuZHluX2R0cmVlLCBkY29kZXMgLSAxKTsgLyogZGlzdGFuY2UgdHJlZSAqL1xyXG4gIC8vVHJhY2V2KChzdGRlcnIsIFwiXFxuZGlzdCB0cmVlOiBzZW50ICVsZFwiLCBzLT5iaXRzX3NlbnQpKTtcclxufVxyXG5cclxuXHJcbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4gKiBDaGVjayBpZiB0aGUgZGF0YSB0eXBlIGlzIFRFWFQgb3IgQklOQVJZLCB1c2luZyB0aGUgZm9sbG93aW5nIGFsZ29yaXRobTpcclxuICogLSBURVhUIGlmIHRoZSB0d28gY29uZGl0aW9ucyBiZWxvdyBhcmUgc2F0aXNmaWVkOlxyXG4gKiAgICBhKSBUaGVyZSBhcmUgbm8gbm9uLXBvcnRhYmxlIGNvbnRyb2wgY2hhcmFjdGVycyBiZWxvbmdpbmcgdG8gdGhlXHJcbiAqICAgICAgIFwiYmxhY2sgbGlzdFwiICgwLi42LCAxNC4uMjUsIDI4Li4zMSkuXHJcbiAqICAgIGIpIFRoZXJlIGlzIGF0IGxlYXN0IG9uZSBwcmludGFibGUgY2hhcmFjdGVyIGJlbG9uZ2luZyB0byB0aGVcclxuICogICAgICAgXCJ3aGl0ZSBsaXN0XCIgKDkge1RBQn0sIDEwIHtMRn0sIDEzIHtDUn0sIDMyLi4yNTUpLlxyXG4gKiAtIEJJTkFSWSBvdGhlcndpc2UuXHJcbiAqIC0gVGhlIGZvbGxvd2luZyBwYXJ0aWFsbHktcG9ydGFibGUgY29udHJvbCBjaGFyYWN0ZXJzIGZvcm0gYVxyXG4gKiAgIFwiZ3JheSBsaXN0XCIgdGhhdCBpcyBpZ25vcmVkIGluIHRoaXMgZGV0ZWN0aW9uIGFsZ29yaXRobTpcclxuICogICAoNyB7QkVMfSwgOCB7QlN9LCAxMSB7VlR9LCAxMiB7RkZ9LCAyNiB7U1VCfSwgMjcge0VTQ30pLlxyXG4gKiBJTiBhc3NlcnRpb246IHRoZSBmaWVsZHMgRnJlcSBvZiBkeW5fbHRyZWUgYXJlIHNldC5cclxuICovXHJcbmZ1bmN0aW9uIGRldGVjdF9kYXRhX3R5cGUocykge1xyXG4gIC8qIGJsYWNrX21hc2sgaXMgdGhlIGJpdCBtYXNrIG9mIGJsYWNrLWxpc3RlZCBieXRlc1xyXG4gICAqIHNldCBiaXRzIDAuLjYsIDE0Li4yNSwgYW5kIDI4Li4zMVxyXG4gICAqIDB4ZjNmZmMwN2YgPSBiaW5hcnkgMTExMTAwMTExMTExMTExMTExMDAwMDAwMDExMTExMTFcclxuICAgKi9cclxuICB2YXIgYmxhY2tfbWFzayA9IDB4ZjNmZmMwN2Y7XHJcbiAgdmFyIG47XHJcblxyXG4gIC8qIENoZWNrIGZvciBub24tdGV4dHVhbCAoXCJibGFjay1saXN0ZWRcIikgYnl0ZXMuICovXHJcbiAgZm9yIChuID0gMDsgbiA8PSAzMTsgbisrLCBibGFja19tYXNrID4+Pj0gMSkge1xyXG4gICAgaWYgKChibGFja19tYXNrICYgMSkgJiYgKHMuZHluX2x0cmVlW24gKiAyXS8qLkZyZXEqLyAhPT0gMCkpIHtcclxuICAgICAgcmV0dXJuIFpfQklOQVJZO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyogQ2hlY2sgZm9yIHRleHR1YWwgKFwid2hpdGUtbGlzdGVkXCIpIGJ5dGVzLiAqL1xyXG4gIGlmIChzLmR5bl9sdHJlZVs5ICogMl0vKi5GcmVxKi8gIT09IDAgfHwgcy5keW5fbHRyZWVbMTAgKiAyXS8qLkZyZXEqLyAhPT0gMCB8fFxyXG4gICAgICBzLmR5bl9sdHJlZVsxMyAqIDJdLyouRnJlcSovICE9PSAwKSB7XHJcbiAgICByZXR1cm4gWl9URVhUO1xyXG4gIH1cclxuICBmb3IgKG4gPSAzMjsgbiA8IExJVEVSQUxTOyBuKyspIHtcclxuICAgIGlmIChzLmR5bl9sdHJlZVtuICogMl0vKi5GcmVxKi8gIT09IDApIHtcclxuICAgICAgcmV0dXJuIFpfVEVYVDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qIFRoZXJlIGFyZSBubyBcImJsYWNrLWxpc3RlZFwiIG9yIFwid2hpdGUtbGlzdGVkXCIgYnl0ZXM6XHJcbiAgICogdGhpcyBzdHJlYW0gZWl0aGVyIGlzIGVtcHR5IG9yIGhhcyB0b2xlcmF0ZWQgKFwiZ3JheS1saXN0ZWRcIikgYnl0ZXMgb25seS5cclxuICAgKi9cclxuICByZXR1cm4gWl9CSU5BUlk7XHJcbn1cclxuXHJcblxyXG52YXIgc3RhdGljX2luaXRfZG9uZSA9IGZhbHNlO1xyXG5cclxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbiAqIEluaXRpYWxpemUgdGhlIHRyZWUgZGF0YSBzdHJ1Y3R1cmVzIGZvciBhIG5ldyB6bGliIHN0cmVhbS5cclxuICovXHJcbmZ1bmN0aW9uIF90cl9pbml0KHMpXHJcbntcclxuXHJcbiAgaWYgKCFzdGF0aWNfaW5pdF9kb25lKSB7XHJcbiAgICB0cl9zdGF0aWNfaW5pdCgpO1xyXG4gICAgc3RhdGljX2luaXRfZG9uZSA9IHRydWU7XHJcbiAgfVxyXG5cclxuICBzLmxfZGVzYyAgPSBuZXcgVHJlZURlc2Mocy5keW5fbHRyZWUsIHN0YXRpY19sX2Rlc2MpO1xyXG4gIHMuZF9kZXNjICA9IG5ldyBUcmVlRGVzYyhzLmR5bl9kdHJlZSwgc3RhdGljX2RfZGVzYyk7XHJcbiAgcy5ibF9kZXNjID0gbmV3IFRyZWVEZXNjKHMuYmxfdHJlZSwgc3RhdGljX2JsX2Rlc2MpO1xyXG5cclxuICBzLmJpX2J1ZiA9IDA7XHJcbiAgcy5iaV92YWxpZCA9IDA7XHJcblxyXG4gIC8qIEluaXRpYWxpemUgdGhlIGZpcnN0IGJsb2NrIG9mIHRoZSBmaXJzdCBmaWxlOiAqL1xyXG4gIGluaXRfYmxvY2socyk7XHJcbn1cclxuXHJcblxyXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuICogU2VuZCBhIHN0b3JlZCBibG9ja1xyXG4gKi9cclxuZnVuY3Rpb24gX3RyX3N0b3JlZF9ibG9jayhzLCBidWYsIHN0b3JlZF9sZW4sIGxhc3QpXHJcbi8vRGVmbGF0ZVN0YXRlICpzO1xyXG4vL2NoYXJmICpidWY7ICAgICAgIC8qIGlucHV0IGJsb2NrICovXHJcbi8vdWxnIHN0b3JlZF9sZW47ICAgLyogbGVuZ3RoIG9mIGlucHV0IGJsb2NrICovXHJcbi8vaW50IGxhc3Q7ICAgICAgICAgLyogb25lIGlmIHRoaXMgaXMgdGhlIGxhc3QgYmxvY2sgZm9yIGEgZmlsZSAqL1xyXG57XHJcbiAgc2VuZF9iaXRzKHMsIChTVE9SRURfQkxPQ0sgPDwgMSkgKyAobGFzdCA/IDEgOiAwKSwgMyk7ICAgIC8qIHNlbmQgYmxvY2sgdHlwZSAqL1xyXG4gIGNvcHlfYmxvY2socywgYnVmLCBzdG9yZWRfbGVuLCB0cnVlKTsgLyogd2l0aCBoZWFkZXIgKi9cclxufVxyXG5cclxuXHJcbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4gKiBTZW5kIG9uZSBlbXB0eSBzdGF0aWMgYmxvY2sgdG8gZ2l2ZSBlbm91Z2ggbG9va2FoZWFkIGZvciBpbmZsYXRlLlxyXG4gKiBUaGlzIHRha2VzIDEwIGJpdHMsIG9mIHdoaWNoIDcgbWF5IHJlbWFpbiBpbiB0aGUgYml0IGJ1ZmZlci5cclxuICovXHJcbmZ1bmN0aW9uIF90cl9hbGlnbihzKSB7XHJcbiAgc2VuZF9iaXRzKHMsIFNUQVRJQ19UUkVFUyA8PCAxLCAzKTtcclxuICBzZW5kX2NvZGUocywgRU5EX0JMT0NLLCBzdGF0aWNfbHRyZWUpO1xyXG4gIGJpX2ZsdXNoKHMpO1xyXG59XHJcblxyXG5cclxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbiAqIERldGVybWluZSB0aGUgYmVzdCBlbmNvZGluZyBmb3IgdGhlIGN1cnJlbnQgYmxvY2s6IGR5bmFtaWMgdHJlZXMsIHN0YXRpY1xyXG4gKiB0cmVlcyBvciBzdG9yZSwgYW5kIG91dHB1dCB0aGUgZW5jb2RlZCBibG9jayB0byB0aGUgemlwIGZpbGUuXHJcbiAqL1xyXG5mdW5jdGlvbiBfdHJfZmx1c2hfYmxvY2socywgYnVmLCBzdG9yZWRfbGVuLCBsYXN0KVxyXG4vL0RlZmxhdGVTdGF0ZSAqcztcclxuLy9jaGFyZiAqYnVmOyAgICAgICAvKiBpbnB1dCBibG9jaywgb3IgTlVMTCBpZiB0b28gb2xkICovXHJcbi8vdWxnIHN0b3JlZF9sZW47ICAgLyogbGVuZ3RoIG9mIGlucHV0IGJsb2NrICovXHJcbi8vaW50IGxhc3Q7ICAgICAgICAgLyogb25lIGlmIHRoaXMgaXMgdGhlIGxhc3QgYmxvY2sgZm9yIGEgZmlsZSAqL1xyXG57XHJcbiAgdmFyIG9wdF9sZW5iLCBzdGF0aWNfbGVuYjsgIC8qIG9wdF9sZW4gYW5kIHN0YXRpY19sZW4gaW4gYnl0ZXMgKi9cclxuICB2YXIgbWF4X2JsaW5kZXggPSAwOyAgICAgICAgLyogaW5kZXggb2YgbGFzdCBiaXQgbGVuZ3RoIGNvZGUgb2Ygbm9uIHplcm8gZnJlcSAqL1xyXG5cclxuICAvKiBCdWlsZCB0aGUgSHVmZm1hbiB0cmVlcyB1bmxlc3MgYSBzdG9yZWQgYmxvY2sgaXMgZm9yY2VkICovXHJcbiAgaWYgKHMubGV2ZWwgPiAwKSB7XHJcblxyXG4gICAgLyogQ2hlY2sgaWYgdGhlIGZpbGUgaXMgYmluYXJ5IG9yIHRleHQgKi9cclxuICAgIGlmIChzLnN0cm0uZGF0YV90eXBlID09PSBaX1VOS05PV04pIHtcclxuICAgICAgcy5zdHJtLmRhdGFfdHlwZSA9IGRldGVjdF9kYXRhX3R5cGUocyk7XHJcbiAgICB9XHJcblxyXG4gICAgLyogQ29uc3RydWN0IHRoZSBsaXRlcmFsIGFuZCBkaXN0YW5jZSB0cmVlcyAqL1xyXG4gICAgYnVpbGRfdHJlZShzLCBzLmxfZGVzYyk7XHJcbiAgICAvLyBUcmFjZXYoKHN0ZGVyciwgXCJcXG5saXQgZGF0YTogZHluICVsZCwgc3RhdCAlbGRcIiwgcy0+b3B0X2xlbixcclxuICAgIC8vICAgICAgICBzLT5zdGF0aWNfbGVuKSk7XHJcblxyXG4gICAgYnVpbGRfdHJlZShzLCBzLmRfZGVzYyk7XHJcbiAgICAvLyBUcmFjZXYoKHN0ZGVyciwgXCJcXG5kaXN0IGRhdGE6IGR5biAlbGQsIHN0YXQgJWxkXCIsIHMtPm9wdF9sZW4sXHJcbiAgICAvLyAgICAgICAgcy0+c3RhdGljX2xlbikpO1xyXG4gICAgLyogQXQgdGhpcyBwb2ludCwgb3B0X2xlbiBhbmQgc3RhdGljX2xlbiBhcmUgdGhlIHRvdGFsIGJpdCBsZW5ndGhzIG9mXHJcbiAgICAgKiB0aGUgY29tcHJlc3NlZCBibG9jayBkYXRhLCBleGNsdWRpbmcgdGhlIHRyZWUgcmVwcmVzZW50YXRpb25zLlxyXG4gICAgICovXHJcblxyXG4gICAgLyogQnVpbGQgdGhlIGJpdCBsZW5ndGggdHJlZSBmb3IgdGhlIGFib3ZlIHR3byB0cmVlcywgYW5kIGdldCB0aGUgaW5kZXhcclxuICAgICAqIGluIGJsX29yZGVyIG9mIHRoZSBsYXN0IGJpdCBsZW5ndGggY29kZSB0byBzZW5kLlxyXG4gICAgICovXHJcbiAgICBtYXhfYmxpbmRleCA9IGJ1aWxkX2JsX3RyZWUocyk7XHJcblxyXG4gICAgLyogRGV0ZXJtaW5lIHRoZSBiZXN0IGVuY29kaW5nLiBDb21wdXRlIHRoZSBibG9jayBsZW5ndGhzIGluIGJ5dGVzLiAqL1xyXG4gICAgb3B0X2xlbmIgPSAocy5vcHRfbGVuICsgMyArIDcpID4+PiAzO1xyXG4gICAgc3RhdGljX2xlbmIgPSAocy5zdGF0aWNfbGVuICsgMyArIDcpID4+PiAzO1xyXG5cclxuICAgIC8vIFRyYWNldigoc3RkZXJyLCBcIlxcbm9wdCAlbHUoJWx1KSBzdGF0ICVsdSglbHUpIHN0b3JlZCAlbHUgbGl0ICV1IFwiLFxyXG4gICAgLy8gICAgICAgIG9wdF9sZW5iLCBzLT5vcHRfbGVuLCBzdGF0aWNfbGVuYiwgcy0+c3RhdGljX2xlbiwgc3RvcmVkX2xlbixcclxuICAgIC8vICAgICAgICBzLT5sYXN0X2xpdCkpO1xyXG5cclxuICAgIGlmIChzdGF0aWNfbGVuYiA8PSBvcHRfbGVuYikgeyBvcHRfbGVuYiA9IHN0YXRpY19sZW5iOyB9XHJcblxyXG4gIH0gZWxzZSB7XHJcbiAgICAvLyBBc3NlcnQoYnVmICE9IChjaGFyKikwLCBcImxvc3QgYnVmXCIpO1xyXG4gICAgb3B0X2xlbmIgPSBzdGF0aWNfbGVuYiA9IHN0b3JlZF9sZW4gKyA1OyAvKiBmb3JjZSBhIHN0b3JlZCBibG9jayAqL1xyXG4gIH1cclxuXHJcbiAgaWYgKChzdG9yZWRfbGVuICsgNCA8PSBvcHRfbGVuYikgJiYgKGJ1ZiAhPT0gLTEpKSB7XHJcbiAgICAvKiA0OiB0d28gd29yZHMgZm9yIHRoZSBsZW5ndGhzICovXHJcblxyXG4gICAgLyogVGhlIHRlc3QgYnVmICE9IE5VTEwgaXMgb25seSBuZWNlc3NhcnkgaWYgTElUX0JVRlNJWkUgPiBXU0laRS5cclxuICAgICAqIE90aGVyd2lzZSB3ZSBjYW4ndCBoYXZlIHByb2Nlc3NlZCBtb3JlIHRoYW4gV1NJWkUgaW5wdXQgYnl0ZXMgc2luY2VcclxuICAgICAqIHRoZSBsYXN0IGJsb2NrIGZsdXNoLCBiZWNhdXNlIGNvbXByZXNzaW9uIHdvdWxkIGhhdmUgYmVlblxyXG4gICAgICogc3VjY2Vzc2Z1bC4gSWYgTElUX0JVRlNJWkUgPD0gV1NJWkUsIGl0IGlzIG5ldmVyIHRvbyBsYXRlIHRvXHJcbiAgICAgKiB0cmFuc2Zvcm0gYSBibG9jayBpbnRvIGEgc3RvcmVkIGJsb2NrLlxyXG4gICAgICovXHJcbiAgICBfdHJfc3RvcmVkX2Jsb2NrKHMsIGJ1Ziwgc3RvcmVkX2xlbiwgbGFzdCk7XHJcblxyXG4gIH0gZWxzZSBpZiAocy5zdHJhdGVneSA9PT0gWl9GSVhFRCB8fCBzdGF0aWNfbGVuYiA9PT0gb3B0X2xlbmIpIHtcclxuXHJcbiAgICBzZW5kX2JpdHMocywgKFNUQVRJQ19UUkVFUyA8PCAxKSArIChsYXN0ID8gMSA6IDApLCAzKTtcclxuICAgIGNvbXByZXNzX2Jsb2NrKHMsIHN0YXRpY19sdHJlZSwgc3RhdGljX2R0cmVlKTtcclxuXHJcbiAgfSBlbHNlIHtcclxuICAgIHNlbmRfYml0cyhzLCAoRFlOX1RSRUVTIDw8IDEpICsgKGxhc3QgPyAxIDogMCksIDMpO1xyXG4gICAgc2VuZF9hbGxfdHJlZXMocywgcy5sX2Rlc2MubWF4X2NvZGUgKyAxLCBzLmRfZGVzYy5tYXhfY29kZSArIDEsIG1heF9ibGluZGV4ICsgMSk7XHJcbiAgICBjb21wcmVzc19ibG9jayhzLCBzLmR5bl9sdHJlZSwgcy5keW5fZHRyZWUpO1xyXG4gIH1cclxuICAvLyBBc3NlcnQgKHMtPmNvbXByZXNzZWRfbGVuID09IHMtPmJpdHNfc2VudCwgXCJiYWQgY29tcHJlc3NlZCBzaXplXCIpO1xyXG4gIC8qIFRoZSBhYm92ZSBjaGVjayBpcyBtYWRlIG1vZCAyXjMyLCBmb3IgZmlsZXMgbGFyZ2VyIHRoYW4gNTEyIE1CXHJcbiAgICogYW5kIHVMb25nIGltcGxlbWVudGVkIG9uIDMyIGJpdHMuXHJcbiAgICovXHJcbiAgaW5pdF9ibG9jayhzKTtcclxuXHJcbiAgaWYgKGxhc3QpIHtcclxuICAgIGJpX3dpbmR1cChzKTtcclxuICB9XHJcbiAgLy8gVHJhY2V2KChzdGRlcnIsXCJcXG5jb21wcmxlbiAlbHUoJWx1KSBcIiwgcy0+Y29tcHJlc3NlZF9sZW4+PjMsXHJcbiAgLy8gICAgICAgcy0+Y29tcHJlc3NlZF9sZW4tNypsYXN0KSk7XHJcbn1cclxuXHJcbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4gKiBTYXZlIHRoZSBtYXRjaCBpbmZvIGFuZCB0YWxseSB0aGUgZnJlcXVlbmN5IGNvdW50cy4gUmV0dXJuIHRydWUgaWZcclxuICogdGhlIGN1cnJlbnQgYmxvY2sgbXVzdCBiZSBmbHVzaGVkLlxyXG4gKi9cclxuZnVuY3Rpb24gX3RyX3RhbGx5KHMsIGRpc3QsIGxjKVxyXG4vLyAgICBkZWZsYXRlX3N0YXRlICpzO1xyXG4vLyAgICB1bnNpZ25lZCBkaXN0OyAgLyogZGlzdGFuY2Ugb2YgbWF0Y2hlZCBzdHJpbmcgKi9cclxuLy8gICAgdW5zaWduZWQgbGM7ICAgIC8qIG1hdGNoIGxlbmd0aC1NSU5fTUFUQ0ggb3IgdW5tYXRjaGVkIGNoYXIgKGlmIGRpc3Q9PTApICovXHJcbntcclxuICAvL3ZhciBvdXRfbGVuZ3RoLCBpbl9sZW5ndGgsIGRjb2RlO1xyXG5cclxuICBzLnBlbmRpbmdfYnVmW3MuZF9idWYgKyBzLmxhc3RfbGl0ICogMl0gICAgID0gKGRpc3QgPj4+IDgpICYgMHhmZjtcclxuICBzLnBlbmRpbmdfYnVmW3MuZF9idWYgKyBzLmxhc3RfbGl0ICogMiArIDFdID0gZGlzdCAmIDB4ZmY7XHJcblxyXG4gIHMucGVuZGluZ19idWZbcy5sX2J1ZiArIHMubGFzdF9saXRdID0gbGMgJiAweGZmO1xyXG4gIHMubGFzdF9saXQrKztcclxuXHJcbiAgaWYgKGRpc3QgPT09IDApIHtcclxuICAgIC8qIGxjIGlzIHRoZSB1bm1hdGNoZWQgY2hhciAqL1xyXG4gICAgcy5keW5fbHRyZWVbbGMgKiAyXS8qLkZyZXEqLysrO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBzLm1hdGNoZXMrKztcclxuICAgIC8qIEhlcmUsIGxjIGlzIHRoZSBtYXRjaCBsZW5ndGggLSBNSU5fTUFUQ0ggKi9cclxuICAgIGRpc3QtLTsgICAgICAgICAgICAgLyogZGlzdCA9IG1hdGNoIGRpc3RhbmNlIC0gMSAqL1xyXG4gICAgLy9Bc3NlcnQoKHVzaClkaXN0IDwgKHVzaClNQVhfRElTVChzKSAmJlxyXG4gICAgLy8gICAgICAgKHVzaClsYyA8PSAodXNoKShNQVhfTUFUQ0gtTUlOX01BVENIKSAmJlxyXG4gICAgLy8gICAgICAgKHVzaClkX2NvZGUoZGlzdCkgPCAodXNoKURfQ09ERVMsICBcIl90cl90YWxseTogYmFkIG1hdGNoXCIpO1xyXG5cclxuICAgIHMuZHluX2x0cmVlWyhfbGVuZ3RoX2NvZGVbbGNdICsgTElURVJBTFMgKyAxKSAqIDJdLyouRnJlcSovKys7XHJcbiAgICBzLmR5bl9kdHJlZVtkX2NvZGUoZGlzdCkgKiAyXS8qLkZyZXEqLysrO1xyXG4gIH1cclxuXHJcbi8vICghKSBUaGlzIGJsb2NrIGlzIGRpc2FibGVkIGluIHpsaWIgZGVmYXVsdHMsXHJcbi8vIGRvbid0IGVuYWJsZSBpdCBmb3IgYmluYXJ5IGNvbXBhdGliaWxpdHlcclxuXHJcbi8vI2lmZGVmIFRSVU5DQVRFX0JMT0NLXHJcbi8vICAvKiBUcnkgdG8gZ3Vlc3MgaWYgaXQgaXMgcHJvZml0YWJsZSB0byBzdG9wIHRoZSBjdXJyZW50IGJsb2NrIGhlcmUgKi9cclxuLy8gIGlmICgocy5sYXN0X2xpdCAmIDB4MWZmZikgPT09IDAgJiYgcy5sZXZlbCA+IDIpIHtcclxuLy8gICAgLyogQ29tcHV0ZSBhbiB1cHBlciBib3VuZCBmb3IgdGhlIGNvbXByZXNzZWQgbGVuZ3RoICovXHJcbi8vICAgIG91dF9sZW5ndGggPSBzLmxhc3RfbGl0Kjg7XHJcbi8vICAgIGluX2xlbmd0aCA9IHMuc3Ryc3RhcnQgLSBzLmJsb2NrX3N0YXJ0O1xyXG4vL1xyXG4vLyAgICBmb3IgKGRjb2RlID0gMDsgZGNvZGUgPCBEX0NPREVTOyBkY29kZSsrKSB7XHJcbi8vICAgICAgb3V0X2xlbmd0aCArPSBzLmR5bl9kdHJlZVtkY29kZSoyXS8qLkZyZXEqLyAqICg1ICsgZXh0cmFfZGJpdHNbZGNvZGVdKTtcclxuLy8gICAgfVxyXG4vLyAgICBvdXRfbGVuZ3RoID4+Pj0gMztcclxuLy8gICAgLy9UcmFjZXYoKHN0ZGVycixcIlxcbmxhc3RfbGl0ICV1LCBpbiAlbGQsIG91dCB+JWxkKCVsZCUlKSBcIixcclxuLy8gICAgLy8gICAgICAgcy0+bGFzdF9saXQsIGluX2xlbmd0aCwgb3V0X2xlbmd0aCxcclxuLy8gICAgLy8gICAgICAgMTAwTCAtIG91dF9sZW5ndGgqMTAwTC9pbl9sZW5ndGgpKTtcclxuLy8gICAgaWYgKHMubWF0Y2hlcyA8IChzLmxhc3RfbGl0Pj4xKS8qaW50IC8yKi8gJiYgb3V0X2xlbmd0aCA8IChpbl9sZW5ndGg+PjEpLyppbnQgLzIqLykge1xyXG4vLyAgICAgIHJldHVybiB0cnVlO1xyXG4vLyAgICB9XHJcbi8vICB9XHJcbi8vI2VuZGlmXHJcblxyXG4gIHJldHVybiAocy5sYXN0X2xpdCA9PT0gcy5saXRfYnVmc2l6ZSAtIDEpO1xyXG4gIC8qIFdlIGF2b2lkIGVxdWFsaXR5IHdpdGggbGl0X2J1ZnNpemUgYmVjYXVzZSBvZiB3cmFwYXJvdW5kIGF0IDY0S1xyXG4gICAqIG9uIDE2IGJpdCBtYWNoaW5lcyBhbmQgYmVjYXVzZSBzdG9yZWQgYmxvY2tzIGFyZSByZXN0cmljdGVkIHRvXHJcbiAgICogNjRLLTEgYnl0ZXMuXHJcbiAgICovXHJcbn1cclxuXHJcbmV4cG9ydHMuX3RyX2luaXQgID0gX3RyX2luaXQ7XHJcbmV4cG9ydHMuX3RyX3N0b3JlZF9ibG9jayA9IF90cl9zdG9yZWRfYmxvY2s7XHJcbmV4cG9ydHMuX3RyX2ZsdXNoX2Jsb2NrICA9IF90cl9mbHVzaF9ibG9jaztcclxuZXhwb3J0cy5fdHJfdGFsbHkgPSBfdHJfdGFsbHk7XHJcbmV4cG9ydHMuX3RyX2FsaWduID0gX3RyX2FsaWduO1xyXG4iLCIndXNlIHN0cmljdCc7XHJcblxyXG4vLyAoQykgMTk5NS0yMDEzIEplYW4tbG91cCBHYWlsbHkgYW5kIE1hcmsgQWRsZXJcclxuLy8gKEMpIDIwMTQtMjAxNyBWaXRhbHkgUHV6cmluIGFuZCBBbmRyZXkgVHVwaXRzaW5cclxuLy9cclxuLy8gVGhpcyBzb2Z0d2FyZSBpcyBwcm92aWRlZCAnYXMtaXMnLCB3aXRob3V0IGFueSBleHByZXNzIG9yIGltcGxpZWRcclxuLy8gd2FycmFudHkuIEluIG5vIGV2ZW50IHdpbGwgdGhlIGF1dGhvcnMgYmUgaGVsZCBsaWFibGUgZm9yIGFueSBkYW1hZ2VzXHJcbi8vIGFyaXNpbmcgZnJvbSB0aGUgdXNlIG9mIHRoaXMgc29mdHdhcmUuXHJcbi8vXHJcbi8vIFBlcm1pc3Npb24gaXMgZ3JhbnRlZCB0byBhbnlvbmUgdG8gdXNlIHRoaXMgc29mdHdhcmUgZm9yIGFueSBwdXJwb3NlLFxyXG4vLyBpbmNsdWRpbmcgY29tbWVyY2lhbCBhcHBsaWNhdGlvbnMsIGFuZCB0byBhbHRlciBpdCBhbmQgcmVkaXN0cmlidXRlIGl0XHJcbi8vIGZyZWVseSwgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIHJlc3RyaWN0aW9uczpcclxuLy9cclxuLy8gMS4gVGhlIG9yaWdpbiBvZiB0aGlzIHNvZnR3YXJlIG11c3Qgbm90IGJlIG1pc3JlcHJlc2VudGVkOyB5b3UgbXVzdCBub3RcclxuLy8gICBjbGFpbSB0aGF0IHlvdSB3cm90ZSB0aGUgb3JpZ2luYWwgc29mdHdhcmUuIElmIHlvdSB1c2UgdGhpcyBzb2Z0d2FyZVxyXG4vLyAgIGluIGEgcHJvZHVjdCwgYW4gYWNrbm93bGVkZ21lbnQgaW4gdGhlIHByb2R1Y3QgZG9jdW1lbnRhdGlvbiB3b3VsZCBiZVxyXG4vLyAgIGFwcHJlY2lhdGVkIGJ1dCBpcyBub3QgcmVxdWlyZWQuXHJcbi8vIDIuIEFsdGVyZWQgc291cmNlIHZlcnNpb25zIG11c3QgYmUgcGxhaW5seSBtYXJrZWQgYXMgc3VjaCwgYW5kIG11c3Qgbm90IGJlXHJcbi8vICAgbWlzcmVwcmVzZW50ZWQgYXMgYmVpbmcgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLlxyXG4vLyAzLiBUaGlzIG5vdGljZSBtYXkgbm90IGJlIHJlbW92ZWQgb3IgYWx0ZXJlZCBmcm9tIGFueSBzb3VyY2UgZGlzdHJpYnV0aW9uLlxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgMjogICAgICAnbmVlZCBkaWN0aW9uYXJ5JywgICAgIC8qIFpfTkVFRF9ESUNUICAgICAgIDIgICovXHJcbiAgMTogICAgICAnc3RyZWFtIGVuZCcsICAgICAgICAgIC8qIFpfU1RSRUFNX0VORCAgICAgIDEgICovXHJcbiAgMDogICAgICAnJywgICAgICAgICAgICAgICAgICAgIC8qIFpfT0sgICAgICAgICAgICAgIDAgICovXHJcbiAgJy0xJzogICAnZmlsZSBlcnJvcicsICAgICAgICAgIC8qIFpfRVJSTk8gICAgICAgICAoLTEpICovXHJcbiAgJy0yJzogICAnc3RyZWFtIGVycm9yJywgICAgICAgIC8qIFpfU1RSRUFNX0VSUk9SICAoLTIpICovXHJcbiAgJy0zJzogICAnZGF0YSBlcnJvcicsICAgICAgICAgIC8qIFpfREFUQV9FUlJPUiAgICAoLTMpICovXHJcbiAgJy00JzogICAnaW5zdWZmaWNpZW50IG1lbW9yeScsIC8qIFpfTUVNX0VSUk9SICAgICAoLTQpICovXHJcbiAgJy01JzogICAnYnVmZmVyIGVycm9yJywgICAgICAgIC8qIFpfQlVGX0VSUk9SICAgICAoLTUpICovXHJcbiAgJy02JzogICAnaW5jb21wYXRpYmxlIHZlcnNpb24nIC8qIFpfVkVSU0lPTl9FUlJPUiAoLTYpICovXHJcbn07XHJcbiIsIid1c2Ugc3RyaWN0JztcclxuXHJcbi8vIChDKSAxOTk1LTIwMTMgSmVhbi1sb3VwIEdhaWxseSBhbmQgTWFyayBBZGxlclxyXG4vLyAoQykgMjAxNC0yMDE3IFZpdGFseSBQdXpyaW4gYW5kIEFuZHJleSBUdXBpdHNpblxyXG4vL1xyXG4vLyBUaGlzIHNvZnR3YXJlIGlzIHByb3ZpZGVkICdhcy1pcycsIHdpdGhvdXQgYW55IGV4cHJlc3Mgb3IgaW1wbGllZFxyXG4vLyB3YXJyYW50eS4gSW4gbm8gZXZlbnQgd2lsbCB0aGUgYXV0aG9ycyBiZSBoZWxkIGxpYWJsZSBmb3IgYW55IGRhbWFnZXNcclxuLy8gYXJpc2luZyBmcm9tIHRoZSB1c2Ugb2YgdGhpcyBzb2Z0d2FyZS5cclxuLy9cclxuLy8gUGVybWlzc2lvbiBpcyBncmFudGVkIHRvIGFueW9uZSB0byB1c2UgdGhpcyBzb2Z0d2FyZSBmb3IgYW55IHB1cnBvc2UsXHJcbi8vIGluY2x1ZGluZyBjb21tZXJjaWFsIGFwcGxpY2F0aW9ucywgYW5kIHRvIGFsdGVyIGl0IGFuZCByZWRpc3RyaWJ1dGUgaXRcclxuLy8gZnJlZWx5LCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgcmVzdHJpY3Rpb25zOlxyXG4vL1xyXG4vLyAxLiBUaGUgb3JpZ2luIG9mIHRoaXMgc29mdHdhcmUgbXVzdCBub3QgYmUgbWlzcmVwcmVzZW50ZWQ7IHlvdSBtdXN0IG5vdFxyXG4vLyAgIGNsYWltIHRoYXQgeW91IHdyb3RlIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS4gSWYgeW91IHVzZSB0aGlzIHNvZnR3YXJlXHJcbi8vICAgaW4gYSBwcm9kdWN0LCBhbiBhY2tub3dsZWRnbWVudCBpbiB0aGUgcHJvZHVjdCBkb2N1bWVudGF0aW9uIHdvdWxkIGJlXHJcbi8vICAgYXBwcmVjaWF0ZWQgYnV0IGlzIG5vdCByZXF1aXJlZC5cclxuLy8gMi4gQWx0ZXJlZCBzb3VyY2UgdmVyc2lvbnMgbXVzdCBiZSBwbGFpbmx5IG1hcmtlZCBhcyBzdWNoLCBhbmQgbXVzdCBub3QgYmVcclxuLy8gICBtaXNyZXByZXNlbnRlZCBhcyBiZWluZyB0aGUgb3JpZ2luYWwgc29mdHdhcmUuXHJcbi8vIDMuIFRoaXMgbm90aWNlIG1heSBub3QgYmUgcmVtb3ZlZCBvciBhbHRlcmVkIGZyb20gYW55IHNvdXJjZSBkaXN0cmlidXRpb24uXHJcblxyXG52YXIgdXRpbHMgICAgICAgICA9IHJlcXVpcmUoJy4uL3V0aWxzL2NvbW1vbicpO1xyXG52YXIgYWRsZXIzMiAgICAgICA9IHJlcXVpcmUoJy4vYWRsZXIzMicpO1xyXG52YXIgY3JjMzIgICAgICAgICA9IHJlcXVpcmUoJy4vY3JjMzInKTtcclxudmFyIGluZmxhdGVfZmFzdCAgPSByZXF1aXJlKCcuL2luZmZhc3QnKTtcclxudmFyIGluZmxhdGVfdGFibGUgPSByZXF1aXJlKCcuL2luZnRyZWVzJyk7XHJcblxyXG52YXIgQ09ERVMgPSAwO1xyXG52YXIgTEVOUyA9IDE7XHJcbnZhciBESVNUUyA9IDI7XHJcblxyXG4vKiBQdWJsaWMgY29uc3RhbnRzID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xyXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xyXG5cclxuXHJcbi8qIEFsbG93ZWQgZmx1c2ggdmFsdWVzOyBzZWUgZGVmbGF0ZSgpIGFuZCBpbmZsYXRlKCkgYmVsb3cgZm9yIGRldGFpbHMgKi9cclxuLy92YXIgWl9OT19GTFVTSCAgICAgID0gMDtcclxuLy92YXIgWl9QQVJUSUFMX0ZMVVNIID0gMTtcclxuLy92YXIgWl9TWU5DX0ZMVVNIICAgID0gMjtcclxuLy92YXIgWl9GVUxMX0ZMVVNIICAgID0gMztcclxudmFyIFpfRklOSVNIICAgICAgICA9IDQ7XHJcbnZhciBaX0JMT0NLICAgICAgICAgPSA1O1xyXG52YXIgWl9UUkVFUyAgICAgICAgID0gNjtcclxuXHJcblxyXG4vKiBSZXR1cm4gY29kZXMgZm9yIHRoZSBjb21wcmVzc2lvbi9kZWNvbXByZXNzaW9uIGZ1bmN0aW9ucy4gTmVnYXRpdmUgdmFsdWVzXHJcbiAqIGFyZSBlcnJvcnMsIHBvc2l0aXZlIHZhbHVlcyBhcmUgdXNlZCBmb3Igc3BlY2lhbCBidXQgbm9ybWFsIGV2ZW50cy5cclxuICovXHJcbnZhciBaX09LICAgICAgICAgICAgPSAwO1xyXG52YXIgWl9TVFJFQU1fRU5EICAgID0gMTtcclxudmFyIFpfTkVFRF9ESUNUICAgICA9IDI7XHJcbi8vdmFyIFpfRVJSTk8gICAgICAgICA9IC0xO1xyXG52YXIgWl9TVFJFQU1fRVJST1IgID0gLTI7XHJcbnZhciBaX0RBVEFfRVJST1IgICAgPSAtMztcclxudmFyIFpfTUVNX0VSUk9SICAgICA9IC00O1xyXG52YXIgWl9CVUZfRVJST1IgICAgID0gLTU7XHJcbi8vdmFyIFpfVkVSU0lPTl9FUlJPUiA9IC02O1xyXG5cclxuLyogVGhlIGRlZmxhdGUgY29tcHJlc3Npb24gbWV0aG9kICovXHJcbnZhciBaX0RFRkxBVEVEICA9IDg7XHJcblxyXG5cclxuLyogU1RBVEVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cclxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cclxuXHJcblxyXG52YXIgICAgSEVBRCA9IDE7ICAgICAgIC8qIGk6IHdhaXRpbmcgZm9yIG1hZ2ljIGhlYWRlciAqL1xyXG52YXIgICAgRkxBR1MgPSAyOyAgICAgIC8qIGk6IHdhaXRpbmcgZm9yIG1ldGhvZCBhbmQgZmxhZ3MgKGd6aXApICovXHJcbnZhciAgICBUSU1FID0gMzsgICAgICAgLyogaTogd2FpdGluZyBmb3IgbW9kaWZpY2F0aW9uIHRpbWUgKGd6aXApICovXHJcbnZhciAgICBPUyA9IDQ7ICAgICAgICAgLyogaTogd2FpdGluZyBmb3IgZXh0cmEgZmxhZ3MgYW5kIG9wZXJhdGluZyBzeXN0ZW0gKGd6aXApICovXHJcbnZhciAgICBFWExFTiA9IDU7ICAgICAgLyogaTogd2FpdGluZyBmb3IgZXh0cmEgbGVuZ3RoIChnemlwKSAqL1xyXG52YXIgICAgRVhUUkEgPSA2OyAgICAgIC8qIGk6IHdhaXRpbmcgZm9yIGV4dHJhIGJ5dGVzIChnemlwKSAqL1xyXG52YXIgICAgTkFNRSA9IDc7ICAgICAgIC8qIGk6IHdhaXRpbmcgZm9yIGVuZCBvZiBmaWxlIG5hbWUgKGd6aXApICovXHJcbnZhciAgICBDT01NRU5UID0gODsgICAgLyogaTogd2FpdGluZyBmb3IgZW5kIG9mIGNvbW1lbnQgKGd6aXApICovXHJcbnZhciAgICBIQ1JDID0gOTsgICAgICAgLyogaTogd2FpdGluZyBmb3IgaGVhZGVyIGNyYyAoZ3ppcCkgKi9cclxudmFyICAgIERJQ1RJRCA9IDEwOyAgICAvKiBpOiB3YWl0aW5nIGZvciBkaWN0aW9uYXJ5IGNoZWNrIHZhbHVlICovXHJcbnZhciAgICBESUNUID0gMTE7ICAgICAgLyogd2FpdGluZyBmb3IgaW5mbGF0ZVNldERpY3Rpb25hcnkoKSBjYWxsICovXHJcbnZhciAgICAgICAgVFlQRSA9IDEyOyAgICAgIC8qIGk6IHdhaXRpbmcgZm9yIHR5cGUgYml0cywgaW5jbHVkaW5nIGxhc3QtZmxhZyBiaXQgKi9cclxudmFyICAgICAgICBUWVBFRE8gPSAxMzsgICAgLyogaTogc2FtZSwgYnV0IHNraXAgY2hlY2sgdG8gZXhpdCBpbmZsYXRlIG9uIG5ldyBibG9jayAqL1xyXG52YXIgICAgICAgIFNUT1JFRCA9IDE0OyAgICAvKiBpOiB3YWl0aW5nIGZvciBzdG9yZWQgc2l6ZSAobGVuZ3RoIGFuZCBjb21wbGVtZW50KSAqL1xyXG52YXIgICAgICAgIENPUFlfID0gMTU7ICAgICAvKiBpL286IHNhbWUgYXMgQ09QWSBiZWxvdywgYnV0IG9ubHkgZmlyc3QgdGltZSBpbiAqL1xyXG52YXIgICAgICAgIENPUFkgPSAxNjsgICAgICAvKiBpL286IHdhaXRpbmcgZm9yIGlucHV0IG9yIG91dHB1dCB0byBjb3B5IHN0b3JlZCBibG9jayAqL1xyXG52YXIgICAgICAgIFRBQkxFID0gMTc7ICAgICAvKiBpOiB3YWl0aW5nIGZvciBkeW5hbWljIGJsb2NrIHRhYmxlIGxlbmd0aHMgKi9cclxudmFyICAgICAgICBMRU5MRU5TID0gMTg7ICAgLyogaTogd2FpdGluZyBmb3IgY29kZSBsZW5ndGggY29kZSBsZW5ndGhzICovXHJcbnZhciAgICAgICAgQ09ERUxFTlMgPSAxOTsgIC8qIGk6IHdhaXRpbmcgZm9yIGxlbmd0aC9saXQgYW5kIGRpc3RhbmNlIGNvZGUgbGVuZ3RocyAqL1xyXG52YXIgICAgICAgICAgICBMRU5fID0gMjA7ICAgICAgLyogaTogc2FtZSBhcyBMRU4gYmVsb3csIGJ1dCBvbmx5IGZpcnN0IHRpbWUgaW4gKi9cclxudmFyICAgICAgICAgICAgTEVOID0gMjE7ICAgICAgIC8qIGk6IHdhaXRpbmcgZm9yIGxlbmd0aC9saXQvZW9iIGNvZGUgKi9cclxudmFyICAgICAgICAgICAgTEVORVhUID0gMjI7ICAgIC8qIGk6IHdhaXRpbmcgZm9yIGxlbmd0aCBleHRyYSBiaXRzICovXHJcbnZhciAgICAgICAgICAgIERJU1QgPSAyMzsgICAgICAvKiBpOiB3YWl0aW5nIGZvciBkaXN0YW5jZSBjb2RlICovXHJcbnZhciAgICAgICAgICAgIERJU1RFWFQgPSAyNDsgICAvKiBpOiB3YWl0aW5nIGZvciBkaXN0YW5jZSBleHRyYSBiaXRzICovXHJcbnZhciAgICAgICAgICAgIE1BVENIID0gMjU7ICAgICAvKiBvOiB3YWl0aW5nIGZvciBvdXRwdXQgc3BhY2UgdG8gY29weSBzdHJpbmcgKi9cclxudmFyICAgICAgICAgICAgTElUID0gMjY7ICAgICAgIC8qIG86IHdhaXRpbmcgZm9yIG91dHB1dCBzcGFjZSB0byB3cml0ZSBsaXRlcmFsICovXHJcbnZhciAgICBDSEVDSyA9IDI3OyAgICAgLyogaTogd2FpdGluZyBmb3IgMzItYml0IGNoZWNrIHZhbHVlICovXHJcbnZhciAgICBMRU5HVEggPSAyODsgICAgLyogaTogd2FpdGluZyBmb3IgMzItYml0IGxlbmd0aCAoZ3ppcCkgKi9cclxudmFyICAgIERPTkUgPSAyOTsgICAgICAvKiBmaW5pc2hlZCBjaGVjaywgZG9uZSAtLSByZW1haW4gaGVyZSB1bnRpbCByZXNldCAqL1xyXG52YXIgICAgQkFEID0gMzA7ICAgICAgIC8qIGdvdCBhIGRhdGEgZXJyb3IgLS0gcmVtYWluIGhlcmUgdW50aWwgcmVzZXQgKi9cclxudmFyICAgIE1FTSA9IDMxOyAgICAgICAvKiBnb3QgYW4gaW5mbGF0ZSgpIG1lbW9yeSBlcnJvciAtLSByZW1haW4gaGVyZSB1bnRpbCByZXNldCAqL1xyXG52YXIgICAgU1lOQyA9IDMyOyAgICAgIC8qIGxvb2tpbmcgZm9yIHN5bmNocm9uaXphdGlvbiBieXRlcyB0byByZXN0YXJ0IGluZmxhdGUoKSAqL1xyXG5cclxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cclxuXHJcblxyXG5cclxudmFyIEVOT1VHSF9MRU5TID0gODUyO1xyXG52YXIgRU5PVUdIX0RJU1RTID0gNTkyO1xyXG4vL3ZhciBFTk9VR0ggPSAgKEVOT1VHSF9MRU5TK0VOT1VHSF9ESVNUUyk7XHJcblxyXG52YXIgTUFYX1dCSVRTID0gMTU7XHJcbi8qIDMySyBMWjc3IHdpbmRvdyAqL1xyXG52YXIgREVGX1dCSVRTID0gTUFYX1dCSVRTO1xyXG5cclxuXHJcbmZ1bmN0aW9uIHpzd2FwMzIocSkge1xyXG4gIHJldHVybiAgKCgocSA+Pj4gMjQpICYgMHhmZikgK1xyXG4gICAgICAgICAgKChxID4+PiA4KSAmIDB4ZmYwMCkgK1xyXG4gICAgICAgICAgKChxICYgMHhmZjAwKSA8PCA4KSArXHJcbiAgICAgICAgICAoKHEgJiAweGZmKSA8PCAyNCkpO1xyXG59XHJcblxyXG5cclxuZnVuY3Rpb24gSW5mbGF0ZVN0YXRlKCkge1xyXG4gIHRoaXMubW9kZSA9IDA7ICAgICAgICAgICAgIC8qIGN1cnJlbnQgaW5mbGF0ZSBtb2RlICovXHJcbiAgdGhpcy5sYXN0ID0gZmFsc2U7ICAgICAgICAgIC8qIHRydWUgaWYgcHJvY2Vzc2luZyBsYXN0IGJsb2NrICovXHJcbiAgdGhpcy53cmFwID0gMDsgICAgICAgICAgICAgIC8qIGJpdCAwIHRydWUgZm9yIHpsaWIsIGJpdCAxIHRydWUgZm9yIGd6aXAgKi9cclxuICB0aGlzLmhhdmVkaWN0ID0gZmFsc2U7ICAgICAgLyogdHJ1ZSBpZiBkaWN0aW9uYXJ5IHByb3ZpZGVkICovXHJcbiAgdGhpcy5mbGFncyA9IDA7ICAgICAgICAgICAgIC8qIGd6aXAgaGVhZGVyIG1ldGhvZCBhbmQgZmxhZ3MgKDAgaWYgemxpYikgKi9cclxuICB0aGlzLmRtYXggPSAwOyAgICAgICAgICAgICAgLyogemxpYiBoZWFkZXIgbWF4IGRpc3RhbmNlIChJTkZMQVRFX1NUUklDVCkgKi9cclxuICB0aGlzLmNoZWNrID0gMDsgICAgICAgICAgICAgLyogcHJvdGVjdGVkIGNvcHkgb2YgY2hlY2sgdmFsdWUgKi9cclxuICB0aGlzLnRvdGFsID0gMDsgICAgICAgICAgICAgLyogcHJvdGVjdGVkIGNvcHkgb2Ygb3V0cHV0IGNvdW50ICovXHJcbiAgLy8gVE9ETzogbWF5IGJlIHt9XHJcbiAgdGhpcy5oZWFkID0gbnVsbDsgICAgICAgICAgIC8qIHdoZXJlIHRvIHNhdmUgZ3ppcCBoZWFkZXIgaW5mb3JtYXRpb24gKi9cclxuXHJcbiAgLyogc2xpZGluZyB3aW5kb3cgKi9cclxuICB0aGlzLndiaXRzID0gMDsgICAgICAgICAgICAgLyogbG9nIGJhc2UgMiBvZiByZXF1ZXN0ZWQgd2luZG93IHNpemUgKi9cclxuICB0aGlzLndzaXplID0gMDsgICAgICAgICAgICAgLyogd2luZG93IHNpemUgb3IgemVybyBpZiBub3QgdXNpbmcgd2luZG93ICovXHJcbiAgdGhpcy53aGF2ZSA9IDA7ICAgICAgICAgICAgIC8qIHZhbGlkIGJ5dGVzIGluIHRoZSB3aW5kb3cgKi9cclxuICB0aGlzLnduZXh0ID0gMDsgICAgICAgICAgICAgLyogd2luZG93IHdyaXRlIGluZGV4ICovXHJcbiAgdGhpcy53aW5kb3cgPSBudWxsOyAgICAgICAgIC8qIGFsbG9jYXRlZCBzbGlkaW5nIHdpbmRvdywgaWYgbmVlZGVkICovXHJcblxyXG4gIC8qIGJpdCBhY2N1bXVsYXRvciAqL1xyXG4gIHRoaXMuaG9sZCA9IDA7ICAgICAgICAgICAgICAvKiBpbnB1dCBiaXQgYWNjdW11bGF0b3IgKi9cclxuICB0aGlzLmJpdHMgPSAwOyAgICAgICAgICAgICAgLyogbnVtYmVyIG9mIGJpdHMgaW4gXCJpblwiICovXHJcblxyXG4gIC8qIGZvciBzdHJpbmcgYW5kIHN0b3JlZCBibG9jayBjb3B5aW5nICovXHJcbiAgdGhpcy5sZW5ndGggPSAwOyAgICAgICAgICAgIC8qIGxpdGVyYWwgb3IgbGVuZ3RoIG9mIGRhdGEgdG8gY29weSAqL1xyXG4gIHRoaXMub2Zmc2V0ID0gMDsgICAgICAgICAgICAvKiBkaXN0YW5jZSBiYWNrIHRvIGNvcHkgc3RyaW5nIGZyb20gKi9cclxuXHJcbiAgLyogZm9yIHRhYmxlIGFuZCBjb2RlIGRlY29kaW5nICovXHJcbiAgdGhpcy5leHRyYSA9IDA7ICAgICAgICAgICAgIC8qIGV4dHJhIGJpdHMgbmVlZGVkICovXHJcblxyXG4gIC8qIGZpeGVkIGFuZCBkeW5hbWljIGNvZGUgdGFibGVzICovXHJcbiAgdGhpcy5sZW5jb2RlID0gbnVsbDsgICAgICAgICAgLyogc3RhcnRpbmcgdGFibGUgZm9yIGxlbmd0aC9saXRlcmFsIGNvZGVzICovXHJcbiAgdGhpcy5kaXN0Y29kZSA9IG51bGw7ICAgICAgICAgLyogc3RhcnRpbmcgdGFibGUgZm9yIGRpc3RhbmNlIGNvZGVzICovXHJcbiAgdGhpcy5sZW5iaXRzID0gMDsgICAgICAgICAgIC8qIGluZGV4IGJpdHMgZm9yIGxlbmNvZGUgKi9cclxuICB0aGlzLmRpc3RiaXRzID0gMDsgICAgICAgICAgLyogaW5kZXggYml0cyBmb3IgZGlzdGNvZGUgKi9cclxuXHJcbiAgLyogZHluYW1pYyB0YWJsZSBidWlsZGluZyAqL1xyXG4gIHRoaXMubmNvZGUgPSAwOyAgICAgICAgICAgICAvKiBudW1iZXIgb2YgY29kZSBsZW5ndGggY29kZSBsZW5ndGhzICovXHJcbiAgdGhpcy5ubGVuID0gMDsgICAgICAgICAgICAgIC8qIG51bWJlciBvZiBsZW5ndGggY29kZSBsZW5ndGhzICovXHJcbiAgdGhpcy5uZGlzdCA9IDA7ICAgICAgICAgICAgIC8qIG51bWJlciBvZiBkaXN0YW5jZSBjb2RlIGxlbmd0aHMgKi9cclxuICB0aGlzLmhhdmUgPSAwOyAgICAgICAgICAgICAgLyogbnVtYmVyIG9mIGNvZGUgbGVuZ3RocyBpbiBsZW5zW10gKi9cclxuICB0aGlzLm5leHQgPSBudWxsOyAgICAgICAgICAgICAgLyogbmV4dCBhdmFpbGFibGUgc3BhY2UgaW4gY29kZXNbXSAqL1xyXG5cclxuICB0aGlzLmxlbnMgPSBuZXcgdXRpbHMuQnVmMTYoMzIwKTsgLyogdGVtcG9yYXJ5IHN0b3JhZ2UgZm9yIGNvZGUgbGVuZ3RocyAqL1xyXG4gIHRoaXMud29yayA9IG5ldyB1dGlscy5CdWYxNigyODgpOyAvKiB3b3JrIGFyZWEgZm9yIGNvZGUgdGFibGUgYnVpbGRpbmcgKi9cclxuXHJcbiAgLypcclxuICAgYmVjYXVzZSB3ZSBkb24ndCBoYXZlIHBvaW50ZXJzIGluIGpzLCB3ZSB1c2UgbGVuY29kZSBhbmQgZGlzdGNvZGUgZGlyZWN0bHlcclxuICAgYXMgYnVmZmVycyBzbyB3ZSBkb24ndCBuZWVkIGNvZGVzXHJcbiAgKi9cclxuICAvL3RoaXMuY29kZXMgPSBuZXcgdXRpbHMuQnVmMzIoRU5PVUdIKTsgICAgICAgLyogc3BhY2UgZm9yIGNvZGUgdGFibGVzICovXHJcbiAgdGhpcy5sZW5keW4gPSBudWxsOyAgICAgICAgICAgICAgLyogZHluYW1pYyB0YWJsZSBmb3IgbGVuZ3RoL2xpdGVyYWwgY29kZXMgKEpTIHNwZWNpZmljKSAqL1xyXG4gIHRoaXMuZGlzdGR5biA9IG51bGw7ICAgICAgICAgICAgIC8qIGR5bmFtaWMgdGFibGUgZm9yIGRpc3RhbmNlIGNvZGVzIChKUyBzcGVjaWZpYykgKi9cclxuICB0aGlzLnNhbmUgPSAwOyAgICAgICAgICAgICAgICAgICAvKiBpZiBmYWxzZSwgYWxsb3cgaW52YWxpZCBkaXN0YW5jZSB0b28gZmFyICovXHJcbiAgdGhpcy5iYWNrID0gMDsgICAgICAgICAgICAgICAgICAgLyogYml0cyBiYWNrIG9mIGxhc3QgdW5wcm9jZXNzZWQgbGVuZ3RoL2xpdCAqL1xyXG4gIHRoaXMud2FzID0gMDsgICAgICAgICAgICAgICAgICAgIC8qIGluaXRpYWwgbGVuZ3RoIG9mIG1hdGNoICovXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGluZmxhdGVSZXNldEtlZXAoc3RybSkge1xyXG4gIHZhciBzdGF0ZTtcclxuXHJcbiAgaWYgKCFzdHJtIHx8ICFzdHJtLnN0YXRlKSB7IHJldHVybiBaX1NUUkVBTV9FUlJPUjsgfVxyXG4gIHN0YXRlID0gc3RybS5zdGF0ZTtcclxuICBzdHJtLnRvdGFsX2luID0gc3RybS50b3RhbF9vdXQgPSBzdGF0ZS50b3RhbCA9IDA7XHJcbiAgc3RybS5tc2cgPSAnJzsgLypaX05VTEwqL1xyXG4gIGlmIChzdGF0ZS53cmFwKSB7ICAgICAgIC8qIHRvIHN1cHBvcnQgaWxsLWNvbmNlaXZlZCBKYXZhIHRlc3Qgc3VpdGUgKi9cclxuICAgIHN0cm0uYWRsZXIgPSBzdGF0ZS53cmFwICYgMTtcclxuICB9XHJcbiAgc3RhdGUubW9kZSA9IEhFQUQ7XHJcbiAgc3RhdGUubGFzdCA9IDA7XHJcbiAgc3RhdGUuaGF2ZWRpY3QgPSAwO1xyXG4gIHN0YXRlLmRtYXggPSAzMjc2ODtcclxuICBzdGF0ZS5oZWFkID0gbnVsbC8qWl9OVUxMKi87XHJcbiAgc3RhdGUuaG9sZCA9IDA7XHJcbiAgc3RhdGUuYml0cyA9IDA7XHJcbiAgLy9zdGF0ZS5sZW5jb2RlID0gc3RhdGUuZGlzdGNvZGUgPSBzdGF0ZS5uZXh0ID0gc3RhdGUuY29kZXM7XHJcbiAgc3RhdGUubGVuY29kZSA9IHN0YXRlLmxlbmR5biA9IG5ldyB1dGlscy5CdWYzMihFTk9VR0hfTEVOUyk7XHJcbiAgc3RhdGUuZGlzdGNvZGUgPSBzdGF0ZS5kaXN0ZHluID0gbmV3IHV0aWxzLkJ1ZjMyKEVOT1VHSF9ESVNUUyk7XHJcblxyXG4gIHN0YXRlLnNhbmUgPSAxO1xyXG4gIHN0YXRlLmJhY2sgPSAtMTtcclxuICAvL1RyYWNldigoc3RkZXJyLCBcImluZmxhdGU6IHJlc2V0XFxuXCIpKTtcclxuICByZXR1cm4gWl9PSztcclxufVxyXG5cclxuZnVuY3Rpb24gaW5mbGF0ZVJlc2V0KHN0cm0pIHtcclxuICB2YXIgc3RhdGU7XHJcblxyXG4gIGlmICghc3RybSB8fCAhc3RybS5zdGF0ZSkgeyByZXR1cm4gWl9TVFJFQU1fRVJST1I7IH1cclxuICBzdGF0ZSA9IHN0cm0uc3RhdGU7XHJcbiAgc3RhdGUud3NpemUgPSAwO1xyXG4gIHN0YXRlLndoYXZlID0gMDtcclxuICBzdGF0ZS53bmV4dCA9IDA7XHJcbiAgcmV0dXJuIGluZmxhdGVSZXNldEtlZXAoc3RybSk7XHJcblxyXG59XHJcblxyXG5mdW5jdGlvbiBpbmZsYXRlUmVzZXQyKHN0cm0sIHdpbmRvd0JpdHMpIHtcclxuICB2YXIgd3JhcDtcclxuICB2YXIgc3RhdGU7XHJcblxyXG4gIC8qIGdldCB0aGUgc3RhdGUgKi9cclxuICBpZiAoIXN0cm0gfHwgIXN0cm0uc3RhdGUpIHsgcmV0dXJuIFpfU1RSRUFNX0VSUk9SOyB9XHJcbiAgc3RhdGUgPSBzdHJtLnN0YXRlO1xyXG5cclxuICAvKiBleHRyYWN0IHdyYXAgcmVxdWVzdCBmcm9tIHdpbmRvd0JpdHMgcGFyYW1ldGVyICovXHJcbiAgaWYgKHdpbmRvd0JpdHMgPCAwKSB7XHJcbiAgICB3cmFwID0gMDtcclxuICAgIHdpbmRvd0JpdHMgPSAtd2luZG93Qml0cztcclxuICB9XHJcbiAgZWxzZSB7XHJcbiAgICB3cmFwID0gKHdpbmRvd0JpdHMgPj4gNCkgKyAxO1xyXG4gICAgaWYgKHdpbmRvd0JpdHMgPCA0OCkge1xyXG4gICAgICB3aW5kb3dCaXRzICY9IDE1O1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyogc2V0IG51bWJlciBvZiB3aW5kb3cgYml0cywgZnJlZSB3aW5kb3cgaWYgZGlmZmVyZW50ICovXHJcbiAgaWYgKHdpbmRvd0JpdHMgJiYgKHdpbmRvd0JpdHMgPCA4IHx8IHdpbmRvd0JpdHMgPiAxNSkpIHtcclxuICAgIHJldHVybiBaX1NUUkVBTV9FUlJPUjtcclxuICB9XHJcbiAgaWYgKHN0YXRlLndpbmRvdyAhPT0gbnVsbCAmJiBzdGF0ZS53Yml0cyAhPT0gd2luZG93Qml0cykge1xyXG4gICAgc3RhdGUud2luZG93ID0gbnVsbDtcclxuICB9XHJcblxyXG4gIC8qIHVwZGF0ZSBzdGF0ZSBhbmQgcmVzZXQgdGhlIHJlc3Qgb2YgaXQgKi9cclxuICBzdGF0ZS53cmFwID0gd3JhcDtcclxuICBzdGF0ZS53Yml0cyA9IHdpbmRvd0JpdHM7XHJcbiAgcmV0dXJuIGluZmxhdGVSZXNldChzdHJtKTtcclxufVxyXG5cclxuZnVuY3Rpb24gaW5mbGF0ZUluaXQyKHN0cm0sIHdpbmRvd0JpdHMpIHtcclxuICB2YXIgcmV0O1xyXG4gIHZhciBzdGF0ZTtcclxuXHJcbiAgaWYgKCFzdHJtKSB7IHJldHVybiBaX1NUUkVBTV9FUlJPUjsgfVxyXG4gIC8vc3RybS5tc2cgPSBaX05VTEw7ICAgICAgICAgICAgICAgICAvKiBpbiBjYXNlIHdlIHJldHVybiBhbiBlcnJvciAqL1xyXG5cclxuICBzdGF0ZSA9IG5ldyBJbmZsYXRlU3RhdGUoKTtcclxuXHJcbiAgLy9pZiAoc3RhdGUgPT09IFpfTlVMTCkgcmV0dXJuIFpfTUVNX0VSUk9SO1xyXG4gIC8vVHJhY2V2KChzdGRlcnIsIFwiaW5mbGF0ZTogYWxsb2NhdGVkXFxuXCIpKTtcclxuICBzdHJtLnN0YXRlID0gc3RhdGU7XHJcbiAgc3RhdGUud2luZG93ID0gbnVsbC8qWl9OVUxMKi87XHJcbiAgcmV0ID0gaW5mbGF0ZVJlc2V0MihzdHJtLCB3aW5kb3dCaXRzKTtcclxuICBpZiAocmV0ICE9PSBaX09LKSB7XHJcbiAgICBzdHJtLnN0YXRlID0gbnVsbC8qWl9OVUxMKi87XHJcbiAgfVxyXG4gIHJldHVybiByZXQ7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGluZmxhdGVJbml0KHN0cm0pIHtcclxuICByZXR1cm4gaW5mbGF0ZUluaXQyKHN0cm0sIERFRl9XQklUUyk7XHJcbn1cclxuXHJcblxyXG4vKlxyXG4gUmV0dXJuIHN0YXRlIHdpdGggbGVuZ3RoIGFuZCBkaXN0YW5jZSBkZWNvZGluZyB0YWJsZXMgYW5kIGluZGV4IHNpemVzIHNldCB0b1xyXG4gZml4ZWQgY29kZSBkZWNvZGluZy4gIE5vcm1hbGx5IHRoaXMgcmV0dXJucyBmaXhlZCB0YWJsZXMgZnJvbSBpbmZmaXhlZC5oLlxyXG4gSWYgQlVJTERGSVhFRCBpcyBkZWZpbmVkLCB0aGVuIGluc3RlYWQgdGhpcyByb3V0aW5lIGJ1aWxkcyB0aGUgdGFibGVzIHRoZVxyXG4gZmlyc3QgdGltZSBpdCdzIGNhbGxlZCwgYW5kIHJldHVybnMgdGhvc2UgdGFibGVzIHRoZSBmaXJzdCB0aW1lIGFuZFxyXG4gdGhlcmVhZnRlci4gIFRoaXMgcmVkdWNlcyB0aGUgc2l6ZSBvZiB0aGUgY29kZSBieSBhYm91dCAySyBieXRlcywgaW5cclxuIGV4Y2hhbmdlIGZvciBhIGxpdHRsZSBleGVjdXRpb24gdGltZS4gIEhvd2V2ZXIsIEJVSUxERklYRUQgc2hvdWxkIG5vdCBiZVxyXG4gdXNlZCBmb3IgdGhyZWFkZWQgYXBwbGljYXRpb25zLCBzaW5jZSB0aGUgcmV3cml0aW5nIG9mIHRoZSB0YWJsZXMgYW5kIHZpcmdpblxyXG4gbWF5IG5vdCBiZSB0aHJlYWQtc2FmZS5cclxuICovXHJcbnZhciB2aXJnaW4gPSB0cnVlO1xyXG5cclxudmFyIGxlbmZpeCwgZGlzdGZpeDsgLy8gV2UgaGF2ZSBubyBwb2ludGVycyBpbiBKUywgc28ga2VlcCB0YWJsZXMgc2VwYXJhdGVcclxuXHJcbmZ1bmN0aW9uIGZpeGVkdGFibGVzKHN0YXRlKSB7XHJcbiAgLyogYnVpbGQgZml4ZWQgaHVmZm1hbiB0YWJsZXMgaWYgZmlyc3QgY2FsbCAobWF5IG5vdCBiZSB0aHJlYWQgc2FmZSkgKi9cclxuICBpZiAodmlyZ2luKSB7XHJcbiAgICB2YXIgc3ltO1xyXG5cclxuICAgIGxlbmZpeCA9IG5ldyB1dGlscy5CdWYzMig1MTIpO1xyXG4gICAgZGlzdGZpeCA9IG5ldyB1dGlscy5CdWYzMigzMik7XHJcblxyXG4gICAgLyogbGl0ZXJhbC9sZW5ndGggdGFibGUgKi9cclxuICAgIHN5bSA9IDA7XHJcbiAgICB3aGlsZSAoc3ltIDwgMTQ0KSB7IHN0YXRlLmxlbnNbc3ltKytdID0gODsgfVxyXG4gICAgd2hpbGUgKHN5bSA8IDI1NikgeyBzdGF0ZS5sZW5zW3N5bSsrXSA9IDk7IH1cclxuICAgIHdoaWxlIChzeW0gPCAyODApIHsgc3RhdGUubGVuc1tzeW0rK10gPSA3OyB9XHJcbiAgICB3aGlsZSAoc3ltIDwgMjg4KSB7IHN0YXRlLmxlbnNbc3ltKytdID0gODsgfVxyXG5cclxuICAgIGluZmxhdGVfdGFibGUoTEVOUywgIHN0YXRlLmxlbnMsIDAsIDI4OCwgbGVuZml4LCAgIDAsIHN0YXRlLndvcmssIHsgYml0czogOSB9KTtcclxuXHJcbiAgICAvKiBkaXN0YW5jZSB0YWJsZSAqL1xyXG4gICAgc3ltID0gMDtcclxuICAgIHdoaWxlIChzeW0gPCAzMikgeyBzdGF0ZS5sZW5zW3N5bSsrXSA9IDU7IH1cclxuXHJcbiAgICBpbmZsYXRlX3RhYmxlKERJU1RTLCBzdGF0ZS5sZW5zLCAwLCAzMiwgICBkaXN0Zml4LCAwLCBzdGF0ZS53b3JrLCB7IGJpdHM6IDUgfSk7XHJcblxyXG4gICAgLyogZG8gdGhpcyBqdXN0IG9uY2UgKi9cclxuICAgIHZpcmdpbiA9IGZhbHNlO1xyXG4gIH1cclxuXHJcbiAgc3RhdGUubGVuY29kZSA9IGxlbmZpeDtcclxuICBzdGF0ZS5sZW5iaXRzID0gOTtcclxuICBzdGF0ZS5kaXN0Y29kZSA9IGRpc3RmaXg7XHJcbiAgc3RhdGUuZGlzdGJpdHMgPSA1O1xyXG59XHJcblxyXG5cclxuLypcclxuIFVwZGF0ZSB0aGUgd2luZG93IHdpdGggdGhlIGxhc3Qgd3NpemUgKG5vcm1hbGx5IDMySykgYnl0ZXMgd3JpdHRlbiBiZWZvcmVcclxuIHJldHVybmluZy4gIElmIHdpbmRvdyBkb2VzIG5vdCBleGlzdCB5ZXQsIGNyZWF0ZSBpdC4gIFRoaXMgaXMgb25seSBjYWxsZWRcclxuIHdoZW4gYSB3aW5kb3cgaXMgYWxyZWFkeSBpbiB1c2UsIG9yIHdoZW4gb3V0cHV0IGhhcyBiZWVuIHdyaXR0ZW4gZHVyaW5nIHRoaXNcclxuIGluZmxhdGUgY2FsbCwgYnV0IHRoZSBlbmQgb2YgdGhlIGRlZmxhdGUgc3RyZWFtIGhhcyBub3QgYmVlbiByZWFjaGVkIHlldC5cclxuIEl0IGlzIGFsc28gY2FsbGVkIHRvIGNyZWF0ZSBhIHdpbmRvdyBmb3IgZGljdGlvbmFyeSBkYXRhIHdoZW4gYSBkaWN0aW9uYXJ5XHJcbiBpcyBsb2FkZWQuXHJcblxyXG4gUHJvdmlkaW5nIG91dHB1dCBidWZmZXJzIGxhcmdlciB0aGFuIDMySyB0byBpbmZsYXRlKCkgc2hvdWxkIHByb3ZpZGUgYSBzcGVlZFxyXG4gYWR2YW50YWdlLCBzaW5jZSBvbmx5IHRoZSBsYXN0IDMySyBvZiBvdXRwdXQgaXMgY29waWVkIHRvIHRoZSBzbGlkaW5nIHdpbmRvd1xyXG4gdXBvbiByZXR1cm4gZnJvbSBpbmZsYXRlKCksIGFuZCBzaW5jZSBhbGwgZGlzdGFuY2VzIGFmdGVyIHRoZSBmaXJzdCAzMksgb2ZcclxuIG91dHB1dCB3aWxsIGZhbGwgaW4gdGhlIG91dHB1dCBkYXRhLCBtYWtpbmcgbWF0Y2ggY29waWVzIHNpbXBsZXIgYW5kIGZhc3Rlci5cclxuIFRoZSBhZHZhbnRhZ2UgbWF5IGJlIGRlcGVuZGVudCBvbiB0aGUgc2l6ZSBvZiB0aGUgcHJvY2Vzc29yJ3MgZGF0YSBjYWNoZXMuXHJcbiAqL1xyXG5mdW5jdGlvbiB1cGRhdGV3aW5kb3coc3RybSwgc3JjLCBlbmQsIGNvcHkpIHtcclxuICB2YXIgZGlzdDtcclxuICB2YXIgc3RhdGUgPSBzdHJtLnN0YXRlO1xyXG5cclxuICAvKiBpZiBpdCBoYXNuJ3QgYmVlbiBkb25lIGFscmVhZHksIGFsbG9jYXRlIHNwYWNlIGZvciB0aGUgd2luZG93ICovXHJcbiAgaWYgKHN0YXRlLndpbmRvdyA9PT0gbnVsbCkge1xyXG4gICAgc3RhdGUud3NpemUgPSAxIDw8IHN0YXRlLndiaXRzO1xyXG4gICAgc3RhdGUud25leHQgPSAwO1xyXG4gICAgc3RhdGUud2hhdmUgPSAwO1xyXG5cclxuICAgIHN0YXRlLndpbmRvdyA9IG5ldyB1dGlscy5CdWY4KHN0YXRlLndzaXplKTtcclxuICB9XHJcblxyXG4gIC8qIGNvcHkgc3RhdGUtPndzaXplIG9yIGxlc3Mgb3V0cHV0IGJ5dGVzIGludG8gdGhlIGNpcmN1bGFyIHdpbmRvdyAqL1xyXG4gIGlmIChjb3B5ID49IHN0YXRlLndzaXplKSB7XHJcbiAgICB1dGlscy5hcnJheVNldChzdGF0ZS53aW5kb3csIHNyYywgZW5kIC0gc3RhdGUud3NpemUsIHN0YXRlLndzaXplLCAwKTtcclxuICAgIHN0YXRlLnduZXh0ID0gMDtcclxuICAgIHN0YXRlLndoYXZlID0gc3RhdGUud3NpemU7XHJcbiAgfVxyXG4gIGVsc2Uge1xyXG4gICAgZGlzdCA9IHN0YXRlLndzaXplIC0gc3RhdGUud25leHQ7XHJcbiAgICBpZiAoZGlzdCA+IGNvcHkpIHtcclxuICAgICAgZGlzdCA9IGNvcHk7XHJcbiAgICB9XHJcbiAgICAvL3ptZW1jcHkoc3RhdGUtPndpbmRvdyArIHN0YXRlLT53bmV4dCwgZW5kIC0gY29weSwgZGlzdCk7XHJcbiAgICB1dGlscy5hcnJheVNldChzdGF0ZS53aW5kb3csIHNyYywgZW5kIC0gY29weSwgZGlzdCwgc3RhdGUud25leHQpO1xyXG4gICAgY29weSAtPSBkaXN0O1xyXG4gICAgaWYgKGNvcHkpIHtcclxuICAgICAgLy96bWVtY3B5KHN0YXRlLT53aW5kb3csIGVuZCAtIGNvcHksIGNvcHkpO1xyXG4gICAgICB1dGlscy5hcnJheVNldChzdGF0ZS53aW5kb3csIHNyYywgZW5kIC0gY29weSwgY29weSwgMCk7XHJcbiAgICAgIHN0YXRlLnduZXh0ID0gY29weTtcclxuICAgICAgc3RhdGUud2hhdmUgPSBzdGF0ZS53c2l6ZTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICBzdGF0ZS53bmV4dCArPSBkaXN0O1xyXG4gICAgICBpZiAoc3RhdGUud25leHQgPT09IHN0YXRlLndzaXplKSB7IHN0YXRlLnduZXh0ID0gMDsgfVxyXG4gICAgICBpZiAoc3RhdGUud2hhdmUgPCBzdGF0ZS53c2l6ZSkgeyBzdGF0ZS53aGF2ZSArPSBkaXN0OyB9XHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiAwO1xyXG59XHJcblxyXG5mdW5jdGlvbiBpbmZsYXRlKHN0cm0sIGZsdXNoKSB7XHJcbiAgdmFyIHN0YXRlO1xyXG4gIHZhciBpbnB1dCwgb3V0cHV0OyAgICAgICAgICAvLyBpbnB1dC9vdXRwdXQgYnVmZmVyc1xyXG4gIHZhciBuZXh0OyAgICAgICAgICAgICAgICAgICAvKiBuZXh0IGlucHV0IElOREVYICovXHJcbiAgdmFyIHB1dDsgICAgICAgICAgICAgICAgICAgIC8qIG5leHQgb3V0cHV0IElOREVYICovXHJcbiAgdmFyIGhhdmUsIGxlZnQ7ICAgICAgICAgICAgIC8qIGF2YWlsYWJsZSBpbnB1dCBhbmQgb3V0cHV0ICovXHJcbiAgdmFyIGhvbGQ7ICAgICAgICAgICAgICAgICAgIC8qIGJpdCBidWZmZXIgKi9cclxuICB2YXIgYml0czsgICAgICAgICAgICAgICAgICAgLyogYml0cyBpbiBiaXQgYnVmZmVyICovXHJcbiAgdmFyIF9pbiwgX291dDsgICAgICAgICAgICAgIC8qIHNhdmUgc3RhcnRpbmcgYXZhaWxhYmxlIGlucHV0IGFuZCBvdXRwdXQgKi9cclxuICB2YXIgY29weTsgICAgICAgICAgICAgICAgICAgLyogbnVtYmVyIG9mIHN0b3JlZCBvciBtYXRjaCBieXRlcyB0byBjb3B5ICovXHJcbiAgdmFyIGZyb207ICAgICAgICAgICAgICAgICAgIC8qIHdoZXJlIHRvIGNvcHkgbWF0Y2ggYnl0ZXMgZnJvbSAqL1xyXG4gIHZhciBmcm9tX3NvdXJjZTtcclxuICB2YXIgaGVyZSA9IDA7ICAgICAgICAgICAgICAgLyogY3VycmVudCBkZWNvZGluZyB0YWJsZSBlbnRyeSAqL1xyXG4gIHZhciBoZXJlX2JpdHMsIGhlcmVfb3AsIGhlcmVfdmFsOyAvLyBwYWtlZCBcImhlcmVcIiBkZW5vcm1hbGl6ZWQgKEpTIHNwZWNpZmljKVxyXG4gIC8vdmFyIGxhc3Q7ICAgICAgICAgICAgICAgICAgIC8qIHBhcmVudCB0YWJsZSBlbnRyeSAqL1xyXG4gIHZhciBsYXN0X2JpdHMsIGxhc3Rfb3AsIGxhc3RfdmFsOyAvLyBwYWtlZCBcImxhc3RcIiBkZW5vcm1hbGl6ZWQgKEpTIHNwZWNpZmljKVxyXG4gIHZhciBsZW47ICAgICAgICAgICAgICAgICAgICAvKiBsZW5ndGggdG8gY29weSBmb3IgcmVwZWF0cywgYml0cyB0byBkcm9wICovXHJcbiAgdmFyIHJldDsgICAgICAgICAgICAgICAgICAgIC8qIHJldHVybiBjb2RlICovXHJcbiAgdmFyIGhidWYgPSBuZXcgdXRpbHMuQnVmOCg0KTsgICAgLyogYnVmZmVyIGZvciBnemlwIGhlYWRlciBjcmMgY2FsY3VsYXRpb24gKi9cclxuICB2YXIgb3B0cztcclxuXHJcbiAgdmFyIG47IC8vIHRlbXBvcmFyeSB2YXIgZm9yIE5FRURfQklUU1xyXG5cclxuICB2YXIgb3JkZXIgPSAvKiBwZXJtdXRhdGlvbiBvZiBjb2RlIGxlbmd0aHMgKi9cclxuICAgIFsgMTYsIDE3LCAxOCwgMCwgOCwgNywgOSwgNiwgMTAsIDUsIDExLCA0LCAxMiwgMywgMTMsIDIsIDE0LCAxLCAxNSBdO1xyXG5cclxuXHJcbiAgaWYgKCFzdHJtIHx8ICFzdHJtLnN0YXRlIHx8ICFzdHJtLm91dHB1dCB8fFxyXG4gICAgICAoIXN0cm0uaW5wdXQgJiYgc3RybS5hdmFpbF9pbiAhPT0gMCkpIHtcclxuICAgIHJldHVybiBaX1NUUkVBTV9FUlJPUjtcclxuICB9XHJcblxyXG4gIHN0YXRlID0gc3RybS5zdGF0ZTtcclxuICBpZiAoc3RhdGUubW9kZSA9PT0gVFlQRSkgeyBzdGF0ZS5tb2RlID0gVFlQRURPOyB9ICAgIC8qIHNraXAgY2hlY2sgKi9cclxuXHJcblxyXG4gIC8vLS0tIExPQUQoKSAtLS1cclxuICBwdXQgPSBzdHJtLm5leHRfb3V0O1xyXG4gIG91dHB1dCA9IHN0cm0ub3V0cHV0O1xyXG4gIGxlZnQgPSBzdHJtLmF2YWlsX291dDtcclxuICBuZXh0ID0gc3RybS5uZXh0X2luO1xyXG4gIGlucHV0ID0gc3RybS5pbnB1dDtcclxuICBoYXZlID0gc3RybS5hdmFpbF9pbjtcclxuICBob2xkID0gc3RhdGUuaG9sZDtcclxuICBiaXRzID0gc3RhdGUuYml0cztcclxuICAvLy0tLVxyXG5cclxuICBfaW4gPSBoYXZlO1xyXG4gIF9vdXQgPSBsZWZ0O1xyXG4gIHJldCA9IFpfT0s7XHJcblxyXG4gIGluZl9sZWF2ZTogLy8gZ290byBlbXVsYXRpb25cclxuICBmb3IgKDs7KSB7XHJcbiAgICBzd2l0Y2ggKHN0YXRlLm1vZGUpIHtcclxuICAgICAgY2FzZSBIRUFEOlxyXG4gICAgICAgIGlmIChzdGF0ZS53cmFwID09PSAwKSB7XHJcbiAgICAgICAgICBzdGF0ZS5tb2RlID0gVFlQRURPO1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vPT09IE5FRURCSVRTKDE2KTtcclxuICAgICAgICB3aGlsZSAoYml0cyA8IDE2KSB7XHJcbiAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cclxuICAgICAgICAgIGhhdmUtLTtcclxuICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xyXG4gICAgICAgICAgYml0cyArPSA4O1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLz09PS8vXHJcbiAgICAgICAgaWYgKChzdGF0ZS53cmFwICYgMikgJiYgaG9sZCA9PT0gMHg4YjFmKSB7ICAvKiBnemlwIGhlYWRlciAqL1xyXG4gICAgICAgICAgc3RhdGUuY2hlY2sgPSAwLypjcmMzMigwTCwgWl9OVUxMLCAwKSovO1xyXG4gICAgICAgICAgLy89PT0gQ1JDMihzdGF0ZS5jaGVjaywgaG9sZCk7XHJcbiAgICAgICAgICBoYnVmWzBdID0gaG9sZCAmIDB4ZmY7XHJcbiAgICAgICAgICBoYnVmWzFdID0gKGhvbGQgPj4+IDgpICYgMHhmZjtcclxuICAgICAgICAgIHN0YXRlLmNoZWNrID0gY3JjMzIoc3RhdGUuY2hlY2ssIGhidWYsIDIsIDApO1xyXG4gICAgICAgICAgLy89PT0vL1xyXG5cclxuICAgICAgICAgIC8vPT09IElOSVRCSVRTKCk7XHJcbiAgICAgICAgICBob2xkID0gMDtcclxuICAgICAgICAgIGJpdHMgPSAwO1xyXG4gICAgICAgICAgLy89PT0vL1xyXG4gICAgICAgICAgc3RhdGUubW9kZSA9IEZMQUdTO1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHN0YXRlLmZsYWdzID0gMDsgICAgICAgICAgIC8qIGV4cGVjdCB6bGliIGhlYWRlciAqL1xyXG4gICAgICAgIGlmIChzdGF0ZS5oZWFkKSB7XHJcbiAgICAgICAgICBzdGF0ZS5oZWFkLmRvbmUgPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCEoc3RhdGUud3JhcCAmIDEpIHx8ICAgLyogY2hlY2sgaWYgemxpYiBoZWFkZXIgYWxsb3dlZCAqL1xyXG4gICAgICAgICAgKCgoaG9sZCAmIDB4ZmYpLypCSVRTKDgpKi8gPDwgOCkgKyAoaG9sZCA+PiA4KSkgJSAzMSkge1xyXG4gICAgICAgICAgc3RybS5tc2cgPSAnaW5jb3JyZWN0IGhlYWRlciBjaGVjayc7XHJcbiAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEO1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICgoaG9sZCAmIDB4MGYpLypCSVRTKDQpKi8gIT09IFpfREVGTEFURUQpIHtcclxuICAgICAgICAgIHN0cm0ubXNnID0gJ3Vua25vd24gY29tcHJlc3Npb24gbWV0aG9kJztcclxuICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8tLS0gRFJPUEJJVFMoNCkgLS0tLy9cclxuICAgICAgICBob2xkID4+Pj0gNDtcclxuICAgICAgICBiaXRzIC09IDQ7XHJcbiAgICAgICAgLy8tLS0vL1xyXG4gICAgICAgIGxlbiA9IChob2xkICYgMHgwZikvKkJJVFMoNCkqLyArIDg7XHJcbiAgICAgICAgaWYgKHN0YXRlLndiaXRzID09PSAwKSB7XHJcbiAgICAgICAgICBzdGF0ZS53Yml0cyA9IGxlbjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAobGVuID4gc3RhdGUud2JpdHMpIHtcclxuICAgICAgICAgIHN0cm0ubXNnID0gJ2ludmFsaWQgd2luZG93IHNpemUnO1xyXG4gICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzdGF0ZS5kbWF4ID0gMSA8PCBsZW47XHJcbiAgICAgICAgLy9UcmFjZXYoKHN0ZGVyciwgXCJpbmZsYXRlOiAgIHpsaWIgaGVhZGVyIG9rXFxuXCIpKTtcclxuICAgICAgICBzdHJtLmFkbGVyID0gc3RhdGUuY2hlY2sgPSAxLyphZGxlcjMyKDBMLCBaX05VTEwsIDApKi87XHJcbiAgICAgICAgc3RhdGUubW9kZSA9IGhvbGQgJiAweDIwMCA/IERJQ1RJRCA6IFRZUEU7XHJcbiAgICAgICAgLy89PT0gSU5JVEJJVFMoKTtcclxuICAgICAgICBob2xkID0gMDtcclxuICAgICAgICBiaXRzID0gMDtcclxuICAgICAgICAvLz09PS8vXHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgRkxBR1M6XHJcbiAgICAgICAgLy89PT0gTkVFREJJVFMoMTYpOyAqL1xyXG4gICAgICAgIHdoaWxlIChiaXRzIDwgMTYpIHtcclxuICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxyXG4gICAgICAgICAgaGF2ZS0tO1xyXG4gICAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7XHJcbiAgICAgICAgICBiaXRzICs9IDg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vPT09Ly9cclxuICAgICAgICBzdGF0ZS5mbGFncyA9IGhvbGQ7XHJcbiAgICAgICAgaWYgKChzdGF0ZS5mbGFncyAmIDB4ZmYpICE9PSBaX0RFRkxBVEVEKSB7XHJcbiAgICAgICAgICBzdHJtLm1zZyA9ICd1bmtub3duIGNvbXByZXNzaW9uIG1ldGhvZCc7XHJcbiAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEO1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChzdGF0ZS5mbGFncyAmIDB4ZTAwMCkge1xyXG4gICAgICAgICAgc3RybS5tc2cgPSAndW5rbm93biBoZWFkZXIgZmxhZ3Mgc2V0JztcclxuICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHN0YXRlLmhlYWQpIHtcclxuICAgICAgICAgIHN0YXRlLmhlYWQudGV4dCA9ICgoaG9sZCA+PiA4KSAmIDEpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoc3RhdGUuZmxhZ3MgJiAweDAyMDApIHtcclxuICAgICAgICAgIC8vPT09IENSQzIoc3RhdGUuY2hlY2ssIGhvbGQpO1xyXG4gICAgICAgICAgaGJ1ZlswXSA9IGhvbGQgJiAweGZmO1xyXG4gICAgICAgICAgaGJ1ZlsxXSA9IChob2xkID4+PiA4KSAmIDB4ZmY7XHJcbiAgICAgICAgICBzdGF0ZS5jaGVjayA9IGNyYzMyKHN0YXRlLmNoZWNrLCBoYnVmLCAyLCAwKTtcclxuICAgICAgICAgIC8vPT09Ly9cclxuICAgICAgICB9XHJcbiAgICAgICAgLy89PT0gSU5JVEJJVFMoKTtcclxuICAgICAgICBob2xkID0gMDtcclxuICAgICAgICBiaXRzID0gMDtcclxuICAgICAgICAvLz09PS8vXHJcbiAgICAgICAgc3RhdGUubW9kZSA9IFRJTUU7XHJcbiAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xyXG4gICAgICBjYXNlIFRJTUU6XHJcbiAgICAgICAgLy89PT0gTkVFREJJVFMoMzIpOyAqL1xyXG4gICAgICAgIHdoaWxlIChiaXRzIDwgMzIpIHtcclxuICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxyXG4gICAgICAgICAgaGF2ZS0tO1xyXG4gICAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7XHJcbiAgICAgICAgICBiaXRzICs9IDg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vPT09Ly9cclxuICAgICAgICBpZiAoc3RhdGUuaGVhZCkge1xyXG4gICAgICAgICAgc3RhdGUuaGVhZC50aW1lID0gaG9sZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHN0YXRlLmZsYWdzICYgMHgwMjAwKSB7XHJcbiAgICAgICAgICAvLz09PSBDUkM0KHN0YXRlLmNoZWNrLCBob2xkKVxyXG4gICAgICAgICAgaGJ1ZlswXSA9IGhvbGQgJiAweGZmO1xyXG4gICAgICAgICAgaGJ1ZlsxXSA9IChob2xkID4+PiA4KSAmIDB4ZmY7XHJcbiAgICAgICAgICBoYnVmWzJdID0gKGhvbGQgPj4+IDE2KSAmIDB4ZmY7XHJcbiAgICAgICAgICBoYnVmWzNdID0gKGhvbGQgPj4+IDI0KSAmIDB4ZmY7XHJcbiAgICAgICAgICBzdGF0ZS5jaGVjayA9IGNyYzMyKHN0YXRlLmNoZWNrLCBoYnVmLCA0LCAwKTtcclxuICAgICAgICAgIC8vPT09XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vPT09IElOSVRCSVRTKCk7XHJcbiAgICAgICAgaG9sZCA9IDA7XHJcbiAgICAgICAgYml0cyA9IDA7XHJcbiAgICAgICAgLy89PT0vL1xyXG4gICAgICAgIHN0YXRlLm1vZGUgPSBPUztcclxuICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXHJcbiAgICAgIGNhc2UgT1M6XHJcbiAgICAgICAgLy89PT0gTkVFREJJVFMoMTYpOyAqL1xyXG4gICAgICAgIHdoaWxlIChiaXRzIDwgMTYpIHtcclxuICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxyXG4gICAgICAgICAgaGF2ZS0tO1xyXG4gICAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7XHJcbiAgICAgICAgICBiaXRzICs9IDg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vPT09Ly9cclxuICAgICAgICBpZiAoc3RhdGUuaGVhZCkge1xyXG4gICAgICAgICAgc3RhdGUuaGVhZC54ZmxhZ3MgPSAoaG9sZCAmIDB4ZmYpO1xyXG4gICAgICAgICAgc3RhdGUuaGVhZC5vcyA9IChob2xkID4+IDgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoc3RhdGUuZmxhZ3MgJiAweDAyMDApIHtcclxuICAgICAgICAgIC8vPT09IENSQzIoc3RhdGUuY2hlY2ssIGhvbGQpO1xyXG4gICAgICAgICAgaGJ1ZlswXSA9IGhvbGQgJiAweGZmO1xyXG4gICAgICAgICAgaGJ1ZlsxXSA9IChob2xkID4+PiA4KSAmIDB4ZmY7XHJcbiAgICAgICAgICBzdGF0ZS5jaGVjayA9IGNyYzMyKHN0YXRlLmNoZWNrLCBoYnVmLCAyLCAwKTtcclxuICAgICAgICAgIC8vPT09Ly9cclxuICAgICAgICB9XHJcbiAgICAgICAgLy89PT0gSU5JVEJJVFMoKTtcclxuICAgICAgICBob2xkID0gMDtcclxuICAgICAgICBiaXRzID0gMDtcclxuICAgICAgICAvLz09PS8vXHJcbiAgICAgICAgc3RhdGUubW9kZSA9IEVYTEVOO1xyXG4gICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cclxuICAgICAgY2FzZSBFWExFTjpcclxuICAgICAgICBpZiAoc3RhdGUuZmxhZ3MgJiAweDA0MDApIHtcclxuICAgICAgICAgIC8vPT09IE5FRURCSVRTKDE2KTsgKi9cclxuICAgICAgICAgIHdoaWxlIChiaXRzIDwgMTYpIHtcclxuICAgICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsgYnJlYWsgaW5mX2xlYXZlOyB9XHJcbiAgICAgICAgICAgIGhhdmUtLTtcclxuICAgICAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7XHJcbiAgICAgICAgICAgIGJpdHMgKz0gODtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIC8vPT09Ly9cclxuICAgICAgICAgIHN0YXRlLmxlbmd0aCA9IGhvbGQ7XHJcbiAgICAgICAgICBpZiAoc3RhdGUuaGVhZCkge1xyXG4gICAgICAgICAgICBzdGF0ZS5oZWFkLmV4dHJhX2xlbiA9IGhvbGQ7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBpZiAoc3RhdGUuZmxhZ3MgJiAweDAyMDApIHtcclxuICAgICAgICAgICAgLy89PT0gQ1JDMihzdGF0ZS5jaGVjaywgaG9sZCk7XHJcbiAgICAgICAgICAgIGhidWZbMF0gPSBob2xkICYgMHhmZjtcclxuICAgICAgICAgICAgaGJ1ZlsxXSA9IChob2xkID4+PiA4KSAmIDB4ZmY7XHJcbiAgICAgICAgICAgIHN0YXRlLmNoZWNrID0gY3JjMzIoc3RhdGUuY2hlY2ssIGhidWYsIDIsIDApO1xyXG4gICAgICAgICAgICAvLz09PS8vXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICAvLz09PSBJTklUQklUUygpO1xyXG4gICAgICAgICAgaG9sZCA9IDA7XHJcbiAgICAgICAgICBiaXRzID0gMDtcclxuICAgICAgICAgIC8vPT09Ly9cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoc3RhdGUuaGVhZCkge1xyXG4gICAgICAgICAgc3RhdGUuaGVhZC5leHRyYSA9IG51bGwvKlpfTlVMTCovO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzdGF0ZS5tb2RlID0gRVhUUkE7XHJcbiAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xyXG4gICAgICBjYXNlIEVYVFJBOlxyXG4gICAgICAgIGlmIChzdGF0ZS5mbGFncyAmIDB4MDQwMCkge1xyXG4gICAgICAgICAgY29weSA9IHN0YXRlLmxlbmd0aDtcclxuICAgICAgICAgIGlmIChjb3B5ID4gaGF2ZSkgeyBjb3B5ID0gaGF2ZTsgfVxyXG4gICAgICAgICAgaWYgKGNvcHkpIHtcclxuICAgICAgICAgICAgaWYgKHN0YXRlLmhlYWQpIHtcclxuICAgICAgICAgICAgICBsZW4gPSBzdGF0ZS5oZWFkLmV4dHJhX2xlbiAtIHN0YXRlLmxlbmd0aDtcclxuICAgICAgICAgICAgICBpZiAoIXN0YXRlLmhlYWQuZXh0cmEpIHtcclxuICAgICAgICAgICAgICAgIC8vIFVzZSB1bnR5cGVkIGFycmF5IGZvciBtb3JlIGNvbnZlbmllbnQgcHJvY2Vzc2luZyBsYXRlclxyXG4gICAgICAgICAgICAgICAgc3RhdGUuaGVhZC5leHRyYSA9IG5ldyBBcnJheShzdGF0ZS5oZWFkLmV4dHJhX2xlbik7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIHV0aWxzLmFycmF5U2V0KFxyXG4gICAgICAgICAgICAgICAgc3RhdGUuaGVhZC5leHRyYSxcclxuICAgICAgICAgICAgICAgIGlucHV0LFxyXG4gICAgICAgICAgICAgICAgbmV4dCxcclxuICAgICAgICAgICAgICAgIC8vIGV4dHJhIGZpZWxkIGlzIGxpbWl0ZWQgdG8gNjU1MzYgYnl0ZXNcclxuICAgICAgICAgICAgICAgIC8vIC0gbm8gbmVlZCBmb3IgYWRkaXRpb25hbCBzaXplIGNoZWNrXHJcbiAgICAgICAgICAgICAgICBjb3B5LFxyXG4gICAgICAgICAgICAgICAgLypsZW4gKyBjb3B5ID4gc3RhdGUuaGVhZC5leHRyYV9tYXggLSBsZW4gPyBzdGF0ZS5oZWFkLmV4dHJhX21heCA6IGNvcHksKi9cclxuICAgICAgICAgICAgICAgIGxlblxyXG4gICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgLy96bWVtY3B5KHN0YXRlLmhlYWQuZXh0cmEgKyBsZW4sIG5leHQsXHJcbiAgICAgICAgICAgICAgLy8gICAgICAgIGxlbiArIGNvcHkgPiBzdGF0ZS5oZWFkLmV4dHJhX21heCA/XHJcbiAgICAgICAgICAgICAgLy8gICAgICAgIHN0YXRlLmhlYWQuZXh0cmFfbWF4IC0gbGVuIDogY29weSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHN0YXRlLmZsYWdzICYgMHgwMjAwKSB7XHJcbiAgICAgICAgICAgICAgc3RhdGUuY2hlY2sgPSBjcmMzMihzdGF0ZS5jaGVjaywgaW5wdXQsIGNvcHksIG5leHQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGhhdmUgLT0gY29weTtcclxuICAgICAgICAgICAgbmV4dCArPSBjb3B5O1xyXG4gICAgICAgICAgICBzdGF0ZS5sZW5ndGggLT0gY29weTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGlmIChzdGF0ZS5sZW5ndGgpIHsgYnJlYWsgaW5mX2xlYXZlOyB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHN0YXRlLmxlbmd0aCA9IDA7XHJcbiAgICAgICAgc3RhdGUubW9kZSA9IE5BTUU7XHJcbiAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xyXG4gICAgICBjYXNlIE5BTUU6XHJcbiAgICAgICAgaWYgKHN0YXRlLmZsYWdzICYgMHgwODAwKSB7XHJcbiAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cclxuICAgICAgICAgIGNvcHkgPSAwO1xyXG4gICAgICAgICAgZG8ge1xyXG4gICAgICAgICAgICAvLyBUT0RPOiAyIG9yIDEgYnl0ZXM/XHJcbiAgICAgICAgICAgIGxlbiA9IGlucHV0W25leHQgKyBjb3B5KytdO1xyXG4gICAgICAgICAgICAvKiB1c2UgY29uc3RhbnQgbGltaXQgYmVjYXVzZSBpbiBqcyB3ZSBzaG91bGQgbm90IHByZWFsbG9jYXRlIG1lbW9yeSAqL1xyXG4gICAgICAgICAgICBpZiAoc3RhdGUuaGVhZCAmJiBsZW4gJiZcclxuICAgICAgICAgICAgICAgIChzdGF0ZS5sZW5ndGggPCA2NTUzNiAvKnN0YXRlLmhlYWQubmFtZV9tYXgqLykpIHtcclxuICAgICAgICAgICAgICBzdGF0ZS5oZWFkLm5hbWUgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShsZW4pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9IHdoaWxlIChsZW4gJiYgY29weSA8IGhhdmUpO1xyXG5cclxuICAgICAgICAgIGlmIChzdGF0ZS5mbGFncyAmIDB4MDIwMCkge1xyXG4gICAgICAgICAgICBzdGF0ZS5jaGVjayA9IGNyYzMyKHN0YXRlLmNoZWNrLCBpbnB1dCwgY29weSwgbmV4dCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBoYXZlIC09IGNvcHk7XHJcbiAgICAgICAgICBuZXh0ICs9IGNvcHk7XHJcbiAgICAgICAgICBpZiAobGVuKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChzdGF0ZS5oZWFkKSB7XHJcbiAgICAgICAgICBzdGF0ZS5oZWFkLm5hbWUgPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzdGF0ZS5sZW5ndGggPSAwO1xyXG4gICAgICAgIHN0YXRlLm1vZGUgPSBDT01NRU5UO1xyXG4gICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cclxuICAgICAgY2FzZSBDT01NRU5UOlxyXG4gICAgICAgIGlmIChzdGF0ZS5mbGFncyAmIDB4MTAwMCkge1xyXG4gICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsgYnJlYWsgaW5mX2xlYXZlOyB9XHJcbiAgICAgICAgICBjb3B5ID0gMDtcclxuICAgICAgICAgIGRvIHtcclxuICAgICAgICAgICAgbGVuID0gaW5wdXRbbmV4dCArIGNvcHkrK107XHJcbiAgICAgICAgICAgIC8qIHVzZSBjb25zdGFudCBsaW1pdCBiZWNhdXNlIGluIGpzIHdlIHNob3VsZCBub3QgcHJlYWxsb2NhdGUgbWVtb3J5ICovXHJcbiAgICAgICAgICAgIGlmIChzdGF0ZS5oZWFkICYmIGxlbiAmJlxyXG4gICAgICAgICAgICAgICAgKHN0YXRlLmxlbmd0aCA8IDY1NTM2IC8qc3RhdGUuaGVhZC5jb21tX21heCovKSkge1xyXG4gICAgICAgICAgICAgIHN0YXRlLmhlYWQuY29tbWVudCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGxlbik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0gd2hpbGUgKGxlbiAmJiBjb3B5IDwgaGF2ZSk7XHJcbiAgICAgICAgICBpZiAoc3RhdGUuZmxhZ3MgJiAweDAyMDApIHtcclxuICAgICAgICAgICAgc3RhdGUuY2hlY2sgPSBjcmMzMihzdGF0ZS5jaGVjaywgaW5wdXQsIGNvcHksIG5leHQpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgaGF2ZSAtPSBjb3B5O1xyXG4gICAgICAgICAgbmV4dCArPSBjb3B5O1xyXG4gICAgICAgICAgaWYgKGxlbikgeyBicmVhayBpbmZfbGVhdmU7IH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoc3RhdGUuaGVhZCkge1xyXG4gICAgICAgICAgc3RhdGUuaGVhZC5jb21tZW50ID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgc3RhdGUubW9kZSA9IEhDUkM7XHJcbiAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xyXG4gICAgICBjYXNlIEhDUkM6XHJcbiAgICAgICAgaWYgKHN0YXRlLmZsYWdzICYgMHgwMjAwKSB7XHJcbiAgICAgICAgICAvLz09PSBORUVEQklUUygxNik7ICovXHJcbiAgICAgICAgICB3aGlsZSAoYml0cyA8IDE2KSB7XHJcbiAgICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxyXG4gICAgICAgICAgICBoYXZlLS07XHJcbiAgICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xyXG4gICAgICAgICAgICBiaXRzICs9IDg7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICAvLz09PS8vXHJcbiAgICAgICAgICBpZiAoaG9sZCAhPT0gKHN0YXRlLmNoZWNrICYgMHhmZmZmKSkge1xyXG4gICAgICAgICAgICBzdHJtLm1zZyA9ICdoZWFkZXIgY3JjIG1pc21hdGNoJztcclxuICAgICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICAvLz09PSBJTklUQklUUygpO1xyXG4gICAgICAgICAgaG9sZCA9IDA7XHJcbiAgICAgICAgICBiaXRzID0gMDtcclxuICAgICAgICAgIC8vPT09Ly9cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHN0YXRlLmhlYWQpIHtcclxuICAgICAgICAgIHN0YXRlLmhlYWQuaGNyYyA9ICgoc3RhdGUuZmxhZ3MgPj4gOSkgJiAxKTtcclxuICAgICAgICAgIHN0YXRlLmhlYWQuZG9uZSA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHN0cm0uYWRsZXIgPSBzdGF0ZS5jaGVjayA9IDA7XHJcbiAgICAgICAgc3RhdGUubW9kZSA9IFRZUEU7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgRElDVElEOlxyXG4gICAgICAgIC8vPT09IE5FRURCSVRTKDMyKTsgKi9cclxuICAgICAgICB3aGlsZSAoYml0cyA8IDMyKSB7XHJcbiAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cclxuICAgICAgICAgIGhhdmUtLTtcclxuICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xyXG4gICAgICAgICAgYml0cyArPSA4O1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLz09PS8vXHJcbiAgICAgICAgc3RybS5hZGxlciA9IHN0YXRlLmNoZWNrID0genN3YXAzMihob2xkKTtcclxuICAgICAgICAvLz09PSBJTklUQklUUygpO1xyXG4gICAgICAgIGhvbGQgPSAwO1xyXG4gICAgICAgIGJpdHMgPSAwO1xyXG4gICAgICAgIC8vPT09Ly9cclxuICAgICAgICBzdGF0ZS5tb2RlID0gRElDVDtcclxuICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXHJcbiAgICAgIGNhc2UgRElDVDpcclxuICAgICAgICBpZiAoc3RhdGUuaGF2ZWRpY3QgPT09IDApIHtcclxuICAgICAgICAgIC8vLS0tIFJFU1RPUkUoKSAtLS1cclxuICAgICAgICAgIHN0cm0ubmV4dF9vdXQgPSBwdXQ7XHJcbiAgICAgICAgICBzdHJtLmF2YWlsX291dCA9IGxlZnQ7XHJcbiAgICAgICAgICBzdHJtLm5leHRfaW4gPSBuZXh0O1xyXG4gICAgICAgICAgc3RybS5hdmFpbF9pbiA9IGhhdmU7XHJcbiAgICAgICAgICBzdGF0ZS5ob2xkID0gaG9sZDtcclxuICAgICAgICAgIHN0YXRlLmJpdHMgPSBiaXRzO1xyXG4gICAgICAgICAgLy8tLS1cclxuICAgICAgICAgIHJldHVybiBaX05FRURfRElDVDtcclxuICAgICAgICB9XHJcbiAgICAgICAgc3RybS5hZGxlciA9IHN0YXRlLmNoZWNrID0gMS8qYWRsZXIzMigwTCwgWl9OVUxMLCAwKSovO1xyXG4gICAgICAgIHN0YXRlLm1vZGUgPSBUWVBFO1xyXG4gICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cclxuICAgICAgY2FzZSBUWVBFOlxyXG4gICAgICAgIGlmIChmbHVzaCA9PT0gWl9CTE9DSyB8fCBmbHVzaCA9PT0gWl9UUkVFUykgeyBicmVhayBpbmZfbGVhdmU7IH1cclxuICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXHJcbiAgICAgIGNhc2UgVFlQRURPOlxyXG4gICAgICAgIGlmIChzdGF0ZS5sYXN0KSB7XHJcbiAgICAgICAgICAvLy0tLSBCWVRFQklUUygpIC0tLS8vXHJcbiAgICAgICAgICBob2xkID4+Pj0gYml0cyAmIDc7XHJcbiAgICAgICAgICBiaXRzIC09IGJpdHMgJiA3O1xyXG4gICAgICAgICAgLy8tLS0vL1xyXG4gICAgICAgICAgc3RhdGUubW9kZSA9IENIRUNLO1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vPT09IE5FRURCSVRTKDMpOyAqL1xyXG4gICAgICAgIHdoaWxlIChiaXRzIDwgMykge1xyXG4gICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsgYnJlYWsgaW5mX2xlYXZlOyB9XHJcbiAgICAgICAgICBoYXZlLS07XHJcbiAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0cztcclxuICAgICAgICAgIGJpdHMgKz0gODtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy89PT0vL1xyXG4gICAgICAgIHN0YXRlLmxhc3QgPSAoaG9sZCAmIDB4MDEpLypCSVRTKDEpKi87XHJcbiAgICAgICAgLy8tLS0gRFJPUEJJVFMoMSkgLS0tLy9cclxuICAgICAgICBob2xkID4+Pj0gMTtcclxuICAgICAgICBiaXRzIC09IDE7XHJcbiAgICAgICAgLy8tLS0vL1xyXG5cclxuICAgICAgICBzd2l0Y2ggKChob2xkICYgMHgwMykvKkJJVFMoMikqLykge1xyXG4gICAgICAgICAgY2FzZSAwOiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogc3RvcmVkIGJsb2NrICovXHJcbiAgICAgICAgICAgIC8vVHJhY2V2KChzdGRlcnIsIFwiaW5mbGF0ZTogICAgIHN0b3JlZCBibG9jayVzXFxuXCIsXHJcbiAgICAgICAgICAgIC8vICAgICAgICBzdGF0ZS5sYXN0ID8gXCIgKGxhc3QpXCIgOiBcIlwiKSk7XHJcbiAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBTVE9SRUQ7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgY2FzZSAxOiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogZml4ZWQgYmxvY2sgKi9cclxuICAgICAgICAgICAgZml4ZWR0YWJsZXMoc3RhdGUpO1xyXG4gICAgICAgICAgICAvL1RyYWNldigoc3RkZXJyLCBcImluZmxhdGU6ICAgICBmaXhlZCBjb2RlcyBibG9jayVzXFxuXCIsXHJcbiAgICAgICAgICAgIC8vICAgICAgICBzdGF0ZS5sYXN0ID8gXCIgKGxhc3QpXCIgOiBcIlwiKSk7XHJcbiAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBMRU5fOyAgICAgICAgICAgICAvKiBkZWNvZGUgY29kZXMgKi9cclxuICAgICAgICAgICAgaWYgKGZsdXNoID09PSBaX1RSRUVTKSB7XHJcbiAgICAgICAgICAgICAgLy8tLS0gRFJPUEJJVFMoMikgLS0tLy9cclxuICAgICAgICAgICAgICBob2xkID4+Pj0gMjtcclxuICAgICAgICAgICAgICBiaXRzIC09IDI7XHJcbiAgICAgICAgICAgICAgLy8tLS0vL1xyXG4gICAgICAgICAgICAgIGJyZWFrIGluZl9sZWF2ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgIGNhc2UgMjogICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIGR5bmFtaWMgYmxvY2sgKi9cclxuICAgICAgICAgICAgLy9UcmFjZXYoKHN0ZGVyciwgXCJpbmZsYXRlOiAgICAgZHluYW1pYyBjb2RlcyBibG9jayVzXFxuXCIsXHJcbiAgICAgICAgICAgIC8vICAgICAgICBzdGF0ZS5sYXN0ID8gXCIgKGxhc3QpXCIgOiBcIlwiKSk7XHJcbiAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBUQUJMRTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICBjYXNlIDM6XHJcbiAgICAgICAgICAgIHN0cm0ubXNnID0gJ2ludmFsaWQgYmxvY2sgdHlwZSc7XHJcbiAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vLS0tIERST1BCSVRTKDIpIC0tLS8vXHJcbiAgICAgICAgaG9sZCA+Pj49IDI7XHJcbiAgICAgICAgYml0cyAtPSAyO1xyXG4gICAgICAgIC8vLS0tLy9cclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSBTVE9SRUQ6XHJcbiAgICAgICAgLy8tLS0gQllURUJJVFMoKSAtLS0vLyAvKiBnbyB0byBieXRlIGJvdW5kYXJ5ICovXHJcbiAgICAgICAgaG9sZCA+Pj49IGJpdHMgJiA3O1xyXG4gICAgICAgIGJpdHMgLT0gYml0cyAmIDc7XHJcbiAgICAgICAgLy8tLS0vL1xyXG4gICAgICAgIC8vPT09IE5FRURCSVRTKDMyKTsgKi9cclxuICAgICAgICB3aGlsZSAoYml0cyA8IDMyKSB7XHJcbiAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cclxuICAgICAgICAgIGhhdmUtLTtcclxuICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xyXG4gICAgICAgICAgYml0cyArPSA4O1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLz09PS8vXHJcbiAgICAgICAgaWYgKChob2xkICYgMHhmZmZmKSAhPT0gKChob2xkID4+PiAxNikgXiAweGZmZmYpKSB7XHJcbiAgICAgICAgICBzdHJtLm1zZyA9ICdpbnZhbGlkIHN0b3JlZCBibG9jayBsZW5ndGhzJztcclxuICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgICAgc3RhdGUubGVuZ3RoID0gaG9sZCAmIDB4ZmZmZjtcclxuICAgICAgICAvL1RyYWNldigoc3RkZXJyLCBcImluZmxhdGU6ICAgICAgIHN0b3JlZCBsZW5ndGggJXVcXG5cIixcclxuICAgICAgICAvLyAgICAgICAgc3RhdGUubGVuZ3RoKSk7XHJcbiAgICAgICAgLy89PT0gSU5JVEJJVFMoKTtcclxuICAgICAgICBob2xkID0gMDtcclxuICAgICAgICBiaXRzID0gMDtcclxuICAgICAgICAvLz09PS8vXHJcbiAgICAgICAgc3RhdGUubW9kZSA9IENPUFlfO1xyXG4gICAgICAgIGlmIChmbHVzaCA9PT0gWl9UUkVFUykgeyBicmVhayBpbmZfbGVhdmU7IH1cclxuICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXHJcbiAgICAgIGNhc2UgQ09QWV86XHJcbiAgICAgICAgc3RhdGUubW9kZSA9IENPUFk7XHJcbiAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xyXG4gICAgICBjYXNlIENPUFk6XHJcbiAgICAgICAgY29weSA9IHN0YXRlLmxlbmd0aDtcclxuICAgICAgICBpZiAoY29weSkge1xyXG4gICAgICAgICAgaWYgKGNvcHkgPiBoYXZlKSB7IGNvcHkgPSBoYXZlOyB9XHJcbiAgICAgICAgICBpZiAoY29weSA+IGxlZnQpIHsgY29weSA9IGxlZnQ7IH1cclxuICAgICAgICAgIGlmIChjb3B5ID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxyXG4gICAgICAgICAgLy8tLS0gem1lbWNweShwdXQsIG5leHQsIGNvcHkpOyAtLS1cclxuICAgICAgICAgIHV0aWxzLmFycmF5U2V0KG91dHB1dCwgaW5wdXQsIG5leHQsIGNvcHksIHB1dCk7XHJcbiAgICAgICAgICAvLy0tLS8vXHJcbiAgICAgICAgICBoYXZlIC09IGNvcHk7XHJcbiAgICAgICAgICBuZXh0ICs9IGNvcHk7XHJcbiAgICAgICAgICBsZWZ0IC09IGNvcHk7XHJcbiAgICAgICAgICBwdXQgKz0gY29weTtcclxuICAgICAgICAgIHN0YXRlLmxlbmd0aCAtPSBjb3B5O1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vVHJhY2V2KChzdGRlcnIsIFwiaW5mbGF0ZTogICAgICAgc3RvcmVkIGVuZFxcblwiKSk7XHJcbiAgICAgICAgc3RhdGUubW9kZSA9IFRZUEU7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgVEFCTEU6XHJcbiAgICAgICAgLy89PT0gTkVFREJJVFMoMTQpOyAqL1xyXG4gICAgICAgIHdoaWxlIChiaXRzIDwgMTQpIHtcclxuICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxyXG4gICAgICAgICAgaGF2ZS0tO1xyXG4gICAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7XHJcbiAgICAgICAgICBiaXRzICs9IDg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vPT09Ly9cclxuICAgICAgICBzdGF0ZS5ubGVuID0gKGhvbGQgJiAweDFmKS8qQklUUyg1KSovICsgMjU3O1xyXG4gICAgICAgIC8vLS0tIERST1BCSVRTKDUpIC0tLS8vXHJcbiAgICAgICAgaG9sZCA+Pj49IDU7XHJcbiAgICAgICAgYml0cyAtPSA1O1xyXG4gICAgICAgIC8vLS0tLy9cclxuICAgICAgICBzdGF0ZS5uZGlzdCA9IChob2xkICYgMHgxZikvKkJJVFMoNSkqLyArIDE7XHJcbiAgICAgICAgLy8tLS0gRFJPUEJJVFMoNSkgLS0tLy9cclxuICAgICAgICBob2xkID4+Pj0gNTtcclxuICAgICAgICBiaXRzIC09IDU7XHJcbiAgICAgICAgLy8tLS0vL1xyXG4gICAgICAgIHN0YXRlLm5jb2RlID0gKGhvbGQgJiAweDBmKS8qQklUUyg0KSovICsgNDtcclxuICAgICAgICAvLy0tLSBEUk9QQklUUyg0KSAtLS0vL1xyXG4gICAgICAgIGhvbGQgPj4+PSA0O1xyXG4gICAgICAgIGJpdHMgLT0gNDtcclxuICAgICAgICAvLy0tLS8vXHJcbi8vI2lmbmRlZiBQS1pJUF9CVUdfV09SS0FST1VORFxyXG4gICAgICAgIGlmIChzdGF0ZS5ubGVuID4gMjg2IHx8IHN0YXRlLm5kaXN0ID4gMzApIHtcclxuICAgICAgICAgIHN0cm0ubXNnID0gJ3RvbyBtYW55IGxlbmd0aCBvciBkaXN0YW5jZSBzeW1ib2xzJztcclxuICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbi8vI2VuZGlmXHJcbiAgICAgICAgLy9UcmFjZXYoKHN0ZGVyciwgXCJpbmZsYXRlOiAgICAgICB0YWJsZSBzaXplcyBva1xcblwiKSk7XHJcbiAgICAgICAgc3RhdGUuaGF2ZSA9IDA7XHJcbiAgICAgICAgc3RhdGUubW9kZSA9IExFTkxFTlM7XHJcbiAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xyXG4gICAgICBjYXNlIExFTkxFTlM6XHJcbiAgICAgICAgd2hpbGUgKHN0YXRlLmhhdmUgPCBzdGF0ZS5uY29kZSkge1xyXG4gICAgICAgICAgLy89PT0gTkVFREJJVFMoMyk7XHJcbiAgICAgICAgICB3aGlsZSAoYml0cyA8IDMpIHtcclxuICAgICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsgYnJlYWsgaW5mX2xlYXZlOyB9XHJcbiAgICAgICAgICAgIGhhdmUtLTtcclxuICAgICAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7XHJcbiAgICAgICAgICAgIGJpdHMgKz0gODtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIC8vPT09Ly9cclxuICAgICAgICAgIHN0YXRlLmxlbnNbb3JkZXJbc3RhdGUuaGF2ZSsrXV0gPSAoaG9sZCAmIDB4MDcpOy8vQklUUygzKTtcclxuICAgICAgICAgIC8vLS0tIERST1BCSVRTKDMpIC0tLS8vXHJcbiAgICAgICAgICBob2xkID4+Pj0gMztcclxuICAgICAgICAgIGJpdHMgLT0gMztcclxuICAgICAgICAgIC8vLS0tLy9cclxuICAgICAgICB9XHJcbiAgICAgICAgd2hpbGUgKHN0YXRlLmhhdmUgPCAxOSkge1xyXG4gICAgICAgICAgc3RhdGUubGVuc1tvcmRlcltzdGF0ZS5oYXZlKytdXSA9IDA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIFdlIGhhdmUgc2VwYXJhdGUgdGFibGVzICYgbm8gcG9pbnRlcnMuIDIgY29tbWVudGVkIGxpbmVzIGJlbG93IG5vdCBuZWVkZWQuXHJcbiAgICAgICAgLy9zdGF0ZS5uZXh0ID0gc3RhdGUuY29kZXM7XHJcbiAgICAgICAgLy9zdGF0ZS5sZW5jb2RlID0gc3RhdGUubmV4dDtcclxuICAgICAgICAvLyBTd2l0Y2ggdG8gdXNlIGR5bmFtaWMgdGFibGVcclxuICAgICAgICBzdGF0ZS5sZW5jb2RlID0gc3RhdGUubGVuZHluO1xyXG4gICAgICAgIHN0YXRlLmxlbmJpdHMgPSA3O1xyXG5cclxuICAgICAgICBvcHRzID0geyBiaXRzOiBzdGF0ZS5sZW5iaXRzIH07XHJcbiAgICAgICAgcmV0ID0gaW5mbGF0ZV90YWJsZShDT0RFUywgc3RhdGUubGVucywgMCwgMTksIHN0YXRlLmxlbmNvZGUsIDAsIHN0YXRlLndvcmssIG9wdHMpO1xyXG4gICAgICAgIHN0YXRlLmxlbmJpdHMgPSBvcHRzLmJpdHM7XHJcblxyXG4gICAgICAgIGlmIChyZXQpIHtcclxuICAgICAgICAgIHN0cm0ubXNnID0gJ2ludmFsaWQgY29kZSBsZW5ndGhzIHNldCc7XHJcbiAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEO1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vVHJhY2V2KChzdGRlcnIsIFwiaW5mbGF0ZTogICAgICAgY29kZSBsZW5ndGhzIG9rXFxuXCIpKTtcclxuICAgICAgICBzdGF0ZS5oYXZlID0gMDtcclxuICAgICAgICBzdGF0ZS5tb2RlID0gQ09ERUxFTlM7XHJcbiAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xyXG4gICAgICBjYXNlIENPREVMRU5TOlxyXG4gICAgICAgIHdoaWxlIChzdGF0ZS5oYXZlIDwgc3RhdGUubmxlbiArIHN0YXRlLm5kaXN0KSB7XHJcbiAgICAgICAgICBmb3IgKDs7KSB7XHJcbiAgICAgICAgICAgIGhlcmUgPSBzdGF0ZS5sZW5jb2RlW2hvbGQgJiAoKDEgPDwgc3RhdGUubGVuYml0cykgLSAxKV07LypCSVRTKHN0YXRlLmxlbmJpdHMpKi9cclxuICAgICAgICAgICAgaGVyZV9iaXRzID0gaGVyZSA+Pj4gMjQ7XHJcbiAgICAgICAgICAgIGhlcmVfb3AgPSAoaGVyZSA+Pj4gMTYpICYgMHhmZjtcclxuICAgICAgICAgICAgaGVyZV92YWwgPSBoZXJlICYgMHhmZmZmO1xyXG5cclxuICAgICAgICAgICAgaWYgKChoZXJlX2JpdHMpIDw9IGJpdHMpIHsgYnJlYWs7IH1cclxuICAgICAgICAgICAgLy8tLS0gUFVMTEJZVEUoKSAtLS0vL1xyXG4gICAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cclxuICAgICAgICAgICAgaGF2ZS0tO1xyXG4gICAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0cztcclxuICAgICAgICAgICAgYml0cyArPSA4O1xyXG4gICAgICAgICAgICAvLy0tLS8vXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBpZiAoaGVyZV92YWwgPCAxNikge1xyXG4gICAgICAgICAgICAvLy0tLSBEUk9QQklUUyhoZXJlLmJpdHMpIC0tLS8vXHJcbiAgICAgICAgICAgIGhvbGQgPj4+PSBoZXJlX2JpdHM7XHJcbiAgICAgICAgICAgIGJpdHMgLT0gaGVyZV9iaXRzO1xyXG4gICAgICAgICAgICAvLy0tLS8vXHJcbiAgICAgICAgICAgIHN0YXRlLmxlbnNbc3RhdGUuaGF2ZSsrXSA9IGhlcmVfdmFsO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGlmIChoZXJlX3ZhbCA9PT0gMTYpIHtcclxuICAgICAgICAgICAgICAvLz09PSBORUVEQklUUyhoZXJlLmJpdHMgKyAyKTtcclxuICAgICAgICAgICAgICBuID0gaGVyZV9iaXRzICsgMjtcclxuICAgICAgICAgICAgICB3aGlsZSAoYml0cyA8IG4pIHtcclxuICAgICAgICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxyXG4gICAgICAgICAgICAgICAgaGF2ZS0tO1xyXG4gICAgICAgICAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7XHJcbiAgICAgICAgICAgICAgICBiaXRzICs9IDg7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIC8vPT09Ly9cclxuICAgICAgICAgICAgICAvLy0tLSBEUk9QQklUUyhoZXJlLmJpdHMpIC0tLS8vXHJcbiAgICAgICAgICAgICAgaG9sZCA+Pj49IGhlcmVfYml0cztcclxuICAgICAgICAgICAgICBiaXRzIC09IGhlcmVfYml0cztcclxuICAgICAgICAgICAgICAvLy0tLS8vXHJcbiAgICAgICAgICAgICAgaWYgKHN0YXRlLmhhdmUgPT09IDApIHtcclxuICAgICAgICAgICAgICAgIHN0cm0ubXNnID0gJ2ludmFsaWQgYml0IGxlbmd0aCByZXBlYXQnO1xyXG4gICAgICAgICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICBsZW4gPSBzdGF0ZS5sZW5zW3N0YXRlLmhhdmUgLSAxXTtcclxuICAgICAgICAgICAgICBjb3B5ID0gMyArIChob2xkICYgMHgwMyk7Ly9CSVRTKDIpO1xyXG4gICAgICAgICAgICAgIC8vLS0tIERST1BCSVRTKDIpIC0tLS8vXHJcbiAgICAgICAgICAgICAgaG9sZCA+Pj49IDI7XHJcbiAgICAgICAgICAgICAgYml0cyAtPSAyO1xyXG4gICAgICAgICAgICAgIC8vLS0tLy9cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChoZXJlX3ZhbCA9PT0gMTcpIHtcclxuICAgICAgICAgICAgICAvLz09PSBORUVEQklUUyhoZXJlLmJpdHMgKyAzKTtcclxuICAgICAgICAgICAgICBuID0gaGVyZV9iaXRzICsgMztcclxuICAgICAgICAgICAgICB3aGlsZSAoYml0cyA8IG4pIHtcclxuICAgICAgICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxyXG4gICAgICAgICAgICAgICAgaGF2ZS0tO1xyXG4gICAgICAgICAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7XHJcbiAgICAgICAgICAgICAgICBiaXRzICs9IDg7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIC8vPT09Ly9cclxuICAgICAgICAgICAgICAvLy0tLSBEUk9QQklUUyhoZXJlLmJpdHMpIC0tLS8vXHJcbiAgICAgICAgICAgICAgaG9sZCA+Pj49IGhlcmVfYml0cztcclxuICAgICAgICAgICAgICBiaXRzIC09IGhlcmVfYml0cztcclxuICAgICAgICAgICAgICAvLy0tLS8vXHJcbiAgICAgICAgICAgICAgbGVuID0gMDtcclxuICAgICAgICAgICAgICBjb3B5ID0gMyArIChob2xkICYgMHgwNyk7Ly9CSVRTKDMpO1xyXG4gICAgICAgICAgICAgIC8vLS0tIERST1BCSVRTKDMpIC0tLS8vXHJcbiAgICAgICAgICAgICAgaG9sZCA+Pj49IDM7XHJcbiAgICAgICAgICAgICAgYml0cyAtPSAzO1xyXG4gICAgICAgICAgICAgIC8vLS0tLy9cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAvLz09PSBORUVEQklUUyhoZXJlLmJpdHMgKyA3KTtcclxuICAgICAgICAgICAgICBuID0gaGVyZV9iaXRzICsgNztcclxuICAgICAgICAgICAgICB3aGlsZSAoYml0cyA8IG4pIHtcclxuICAgICAgICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxyXG4gICAgICAgICAgICAgICAgaGF2ZS0tO1xyXG4gICAgICAgICAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7XHJcbiAgICAgICAgICAgICAgICBiaXRzICs9IDg7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIC8vPT09Ly9cclxuICAgICAgICAgICAgICAvLy0tLSBEUk9QQklUUyhoZXJlLmJpdHMpIC0tLS8vXHJcbiAgICAgICAgICAgICAgaG9sZCA+Pj49IGhlcmVfYml0cztcclxuICAgICAgICAgICAgICBiaXRzIC09IGhlcmVfYml0cztcclxuICAgICAgICAgICAgICAvLy0tLS8vXHJcbiAgICAgICAgICAgICAgbGVuID0gMDtcclxuICAgICAgICAgICAgICBjb3B5ID0gMTEgKyAoaG9sZCAmIDB4N2YpOy8vQklUUyg3KTtcclxuICAgICAgICAgICAgICAvLy0tLSBEUk9QQklUUyg3KSAtLS0vL1xyXG4gICAgICAgICAgICAgIGhvbGQgPj4+PSA3O1xyXG4gICAgICAgICAgICAgIGJpdHMgLT0gNztcclxuICAgICAgICAgICAgICAvLy0tLS8vXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHN0YXRlLmhhdmUgKyBjb3B5ID4gc3RhdGUubmxlbiArIHN0YXRlLm5kaXN0KSB7XHJcbiAgICAgICAgICAgICAgc3RybS5tc2cgPSAnaW52YWxpZCBiaXQgbGVuZ3RoIHJlcGVhdCc7XHJcbiAgICAgICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcclxuICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB3aGlsZSAoY29weS0tKSB7XHJcbiAgICAgICAgICAgICAgc3RhdGUubGVuc1tzdGF0ZS5oYXZlKytdID0gbGVuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKiBoYW5kbGUgZXJyb3IgYnJlYWtzIGluIHdoaWxlICovXHJcbiAgICAgICAgaWYgKHN0YXRlLm1vZGUgPT09IEJBRCkgeyBicmVhazsgfVxyXG5cclxuICAgICAgICAvKiBjaGVjayBmb3IgZW5kLW9mLWJsb2NrIGNvZGUgKGJldHRlciBoYXZlIG9uZSkgKi9cclxuICAgICAgICBpZiAoc3RhdGUubGVuc1syNTZdID09PSAwKSB7XHJcbiAgICAgICAgICBzdHJtLm1zZyA9ICdpbnZhbGlkIGNvZGUgLS0gbWlzc2luZyBlbmQtb2YtYmxvY2snO1xyXG4gICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyogYnVpbGQgY29kZSB0YWJsZXMgLS0gbm90ZTogZG8gbm90IGNoYW5nZSB0aGUgbGVuYml0cyBvciBkaXN0Yml0c1xyXG4gICAgICAgICAgIHZhbHVlcyBoZXJlICg5IGFuZCA2KSB3aXRob3V0IHJlYWRpbmcgdGhlIGNvbW1lbnRzIGluIGluZnRyZWVzLmhcclxuICAgICAgICAgICBjb25jZXJuaW5nIHRoZSBFTk9VR0ggY29uc3RhbnRzLCB3aGljaCBkZXBlbmQgb24gdGhvc2UgdmFsdWVzICovXHJcbiAgICAgICAgc3RhdGUubGVuYml0cyA9IDk7XHJcblxyXG4gICAgICAgIG9wdHMgPSB7IGJpdHM6IHN0YXRlLmxlbmJpdHMgfTtcclxuICAgICAgICByZXQgPSBpbmZsYXRlX3RhYmxlKExFTlMsIHN0YXRlLmxlbnMsIDAsIHN0YXRlLm5sZW4sIHN0YXRlLmxlbmNvZGUsIDAsIHN0YXRlLndvcmssIG9wdHMpO1xyXG4gICAgICAgIC8vIFdlIGhhdmUgc2VwYXJhdGUgdGFibGVzICYgbm8gcG9pbnRlcnMuIDIgY29tbWVudGVkIGxpbmVzIGJlbG93IG5vdCBuZWVkZWQuXHJcbiAgICAgICAgLy8gc3RhdGUubmV4dF9pbmRleCA9IG9wdHMudGFibGVfaW5kZXg7XHJcbiAgICAgICAgc3RhdGUubGVuYml0cyA9IG9wdHMuYml0cztcclxuICAgICAgICAvLyBzdGF0ZS5sZW5jb2RlID0gc3RhdGUubmV4dDtcclxuXHJcbiAgICAgICAgaWYgKHJldCkge1xyXG4gICAgICAgICAgc3RybS5tc2cgPSAnaW52YWxpZCBsaXRlcmFsL2xlbmd0aHMgc2V0JztcclxuICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHN0YXRlLmRpc3RiaXRzID0gNjtcclxuICAgICAgICAvL3N0YXRlLmRpc3Rjb2RlLmNvcHkoc3RhdGUuY29kZXMpO1xyXG4gICAgICAgIC8vIFN3aXRjaCB0byB1c2UgZHluYW1pYyB0YWJsZVxyXG4gICAgICAgIHN0YXRlLmRpc3Rjb2RlID0gc3RhdGUuZGlzdGR5bjtcclxuICAgICAgICBvcHRzID0geyBiaXRzOiBzdGF0ZS5kaXN0Yml0cyB9O1xyXG4gICAgICAgIHJldCA9IGluZmxhdGVfdGFibGUoRElTVFMsIHN0YXRlLmxlbnMsIHN0YXRlLm5sZW4sIHN0YXRlLm5kaXN0LCBzdGF0ZS5kaXN0Y29kZSwgMCwgc3RhdGUud29yaywgb3B0cyk7XHJcbiAgICAgICAgLy8gV2UgaGF2ZSBzZXBhcmF0ZSB0YWJsZXMgJiBubyBwb2ludGVycy4gMiBjb21tZW50ZWQgbGluZXMgYmVsb3cgbm90IG5lZWRlZC5cclxuICAgICAgICAvLyBzdGF0ZS5uZXh0X2luZGV4ID0gb3B0cy50YWJsZV9pbmRleDtcclxuICAgICAgICBzdGF0ZS5kaXN0Yml0cyA9IG9wdHMuYml0cztcclxuICAgICAgICAvLyBzdGF0ZS5kaXN0Y29kZSA9IHN0YXRlLm5leHQ7XHJcblxyXG4gICAgICAgIGlmIChyZXQpIHtcclxuICAgICAgICAgIHN0cm0ubXNnID0gJ2ludmFsaWQgZGlzdGFuY2VzIHNldCc7XHJcbiAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEO1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vVHJhY2V2KChzdGRlcnIsICdpbmZsYXRlOiAgICAgICBjb2RlcyBva1xcbicpKTtcclxuICAgICAgICBzdGF0ZS5tb2RlID0gTEVOXztcclxuICAgICAgICBpZiAoZmx1c2ggPT09IFpfVFJFRVMpIHsgYnJlYWsgaW5mX2xlYXZlOyB9XHJcbiAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xyXG4gICAgICBjYXNlIExFTl86XHJcbiAgICAgICAgc3RhdGUubW9kZSA9IExFTjtcclxuICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXHJcbiAgICAgIGNhc2UgTEVOOlxyXG4gICAgICAgIGlmIChoYXZlID49IDYgJiYgbGVmdCA+PSAyNTgpIHtcclxuICAgICAgICAgIC8vLS0tIFJFU1RPUkUoKSAtLS1cclxuICAgICAgICAgIHN0cm0ubmV4dF9vdXQgPSBwdXQ7XHJcbiAgICAgICAgICBzdHJtLmF2YWlsX291dCA9IGxlZnQ7XHJcbiAgICAgICAgICBzdHJtLm5leHRfaW4gPSBuZXh0O1xyXG4gICAgICAgICAgc3RybS5hdmFpbF9pbiA9IGhhdmU7XHJcbiAgICAgICAgICBzdGF0ZS5ob2xkID0gaG9sZDtcclxuICAgICAgICAgIHN0YXRlLmJpdHMgPSBiaXRzO1xyXG4gICAgICAgICAgLy8tLS1cclxuICAgICAgICAgIGluZmxhdGVfZmFzdChzdHJtLCBfb3V0KTtcclxuICAgICAgICAgIC8vLS0tIExPQUQoKSAtLS1cclxuICAgICAgICAgIHB1dCA9IHN0cm0ubmV4dF9vdXQ7XHJcbiAgICAgICAgICBvdXRwdXQgPSBzdHJtLm91dHB1dDtcclxuICAgICAgICAgIGxlZnQgPSBzdHJtLmF2YWlsX291dDtcclxuICAgICAgICAgIG5leHQgPSBzdHJtLm5leHRfaW47XHJcbiAgICAgICAgICBpbnB1dCA9IHN0cm0uaW5wdXQ7XHJcbiAgICAgICAgICBoYXZlID0gc3RybS5hdmFpbF9pbjtcclxuICAgICAgICAgIGhvbGQgPSBzdGF0ZS5ob2xkO1xyXG4gICAgICAgICAgYml0cyA9IHN0YXRlLmJpdHM7XHJcbiAgICAgICAgICAvLy0tLVxyXG5cclxuICAgICAgICAgIGlmIChzdGF0ZS5tb2RlID09PSBUWVBFKSB7XHJcbiAgICAgICAgICAgIHN0YXRlLmJhY2sgPSAtMTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzdGF0ZS5iYWNrID0gMDtcclxuICAgICAgICBmb3IgKDs7KSB7XHJcbiAgICAgICAgICBoZXJlID0gc3RhdGUubGVuY29kZVtob2xkICYgKCgxIDw8IHN0YXRlLmxlbmJpdHMpIC0gMSldOyAgLypCSVRTKHN0YXRlLmxlbmJpdHMpKi9cclxuICAgICAgICAgIGhlcmVfYml0cyA9IGhlcmUgPj4+IDI0O1xyXG4gICAgICAgICAgaGVyZV9vcCA9IChoZXJlID4+PiAxNikgJiAweGZmO1xyXG4gICAgICAgICAgaGVyZV92YWwgPSBoZXJlICYgMHhmZmZmO1xyXG5cclxuICAgICAgICAgIGlmIChoZXJlX2JpdHMgPD0gYml0cykgeyBicmVhazsgfVxyXG4gICAgICAgICAgLy8tLS0gUFVMTEJZVEUoKSAtLS0vL1xyXG4gICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsgYnJlYWsgaW5mX2xlYXZlOyB9XHJcbiAgICAgICAgICBoYXZlLS07XHJcbiAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0cztcclxuICAgICAgICAgIGJpdHMgKz0gODtcclxuICAgICAgICAgIC8vLS0tLy9cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGhlcmVfb3AgJiYgKGhlcmVfb3AgJiAweGYwKSA9PT0gMCkge1xyXG4gICAgICAgICAgbGFzdF9iaXRzID0gaGVyZV9iaXRzO1xyXG4gICAgICAgICAgbGFzdF9vcCA9IGhlcmVfb3A7XHJcbiAgICAgICAgICBsYXN0X3ZhbCA9IGhlcmVfdmFsO1xyXG4gICAgICAgICAgZm9yICg7Oykge1xyXG4gICAgICAgICAgICBoZXJlID0gc3RhdGUubGVuY29kZVtsYXN0X3ZhbCArXHJcbiAgICAgICAgICAgICAgICAgICAgKChob2xkICYgKCgxIDw8IChsYXN0X2JpdHMgKyBsYXN0X29wKSkgLSAxKSkvKkJJVFMobGFzdC5iaXRzICsgbGFzdC5vcCkqLyA+PiBsYXN0X2JpdHMpXTtcclxuICAgICAgICAgICAgaGVyZV9iaXRzID0gaGVyZSA+Pj4gMjQ7XHJcbiAgICAgICAgICAgIGhlcmVfb3AgPSAoaGVyZSA+Pj4gMTYpICYgMHhmZjtcclxuICAgICAgICAgICAgaGVyZV92YWwgPSBoZXJlICYgMHhmZmZmO1xyXG5cclxuICAgICAgICAgICAgaWYgKChsYXN0X2JpdHMgKyBoZXJlX2JpdHMpIDw9IGJpdHMpIHsgYnJlYWs7IH1cclxuICAgICAgICAgICAgLy8tLS0gUFVMTEJZVEUoKSAtLS0vL1xyXG4gICAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cclxuICAgICAgICAgICAgaGF2ZS0tO1xyXG4gICAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0cztcclxuICAgICAgICAgICAgYml0cyArPSA4O1xyXG4gICAgICAgICAgICAvLy0tLS8vXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICAvLy0tLSBEUk9QQklUUyhsYXN0LmJpdHMpIC0tLS8vXHJcbiAgICAgICAgICBob2xkID4+Pj0gbGFzdF9iaXRzO1xyXG4gICAgICAgICAgYml0cyAtPSBsYXN0X2JpdHM7XHJcbiAgICAgICAgICAvLy0tLS8vXHJcbiAgICAgICAgICBzdGF0ZS5iYWNrICs9IGxhc3RfYml0cztcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8tLS0gRFJPUEJJVFMoaGVyZS5iaXRzKSAtLS0vL1xyXG4gICAgICAgIGhvbGQgPj4+PSBoZXJlX2JpdHM7XHJcbiAgICAgICAgYml0cyAtPSBoZXJlX2JpdHM7XHJcbiAgICAgICAgLy8tLS0vL1xyXG4gICAgICAgIHN0YXRlLmJhY2sgKz0gaGVyZV9iaXRzO1xyXG4gICAgICAgIHN0YXRlLmxlbmd0aCA9IGhlcmVfdmFsO1xyXG4gICAgICAgIGlmIChoZXJlX29wID09PSAwKSB7XHJcbiAgICAgICAgICAvL1RyYWNldnYoKHN0ZGVyciwgaGVyZS52YWwgPj0gMHgyMCAmJiBoZXJlLnZhbCA8IDB4N2YgP1xyXG4gICAgICAgICAgLy8gICAgICAgIFwiaW5mbGF0ZTogICAgICAgICBsaXRlcmFsICclYydcXG5cIiA6XHJcbiAgICAgICAgICAvLyAgICAgICAgXCJpbmZsYXRlOiAgICAgICAgIGxpdGVyYWwgMHglMDJ4XFxuXCIsIGhlcmUudmFsKSk7XHJcbiAgICAgICAgICBzdGF0ZS5tb2RlID0gTElUO1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChoZXJlX29wICYgMzIpIHtcclxuICAgICAgICAgIC8vVHJhY2V2digoc3RkZXJyLCBcImluZmxhdGU6ICAgICAgICAgZW5kIG9mIGJsb2NrXFxuXCIpKTtcclxuICAgICAgICAgIHN0YXRlLmJhY2sgPSAtMTtcclxuICAgICAgICAgIHN0YXRlLm1vZGUgPSBUWVBFO1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChoZXJlX29wICYgNjQpIHtcclxuICAgICAgICAgIHN0cm0ubXNnID0gJ2ludmFsaWQgbGl0ZXJhbC9sZW5ndGggY29kZSc7XHJcbiAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEO1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHN0YXRlLmV4dHJhID0gaGVyZV9vcCAmIDE1O1xyXG4gICAgICAgIHN0YXRlLm1vZGUgPSBMRU5FWFQ7XHJcbiAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xyXG4gICAgICBjYXNlIExFTkVYVDpcclxuICAgICAgICBpZiAoc3RhdGUuZXh0cmEpIHtcclxuICAgICAgICAgIC8vPT09IE5FRURCSVRTKHN0YXRlLmV4dHJhKTtcclxuICAgICAgICAgIG4gPSBzdGF0ZS5leHRyYTtcclxuICAgICAgICAgIHdoaWxlIChiaXRzIDwgbikge1xyXG4gICAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cclxuICAgICAgICAgICAgaGF2ZS0tO1xyXG4gICAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0cztcclxuICAgICAgICAgICAgYml0cyArPSA4O1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgLy89PT0vL1xyXG4gICAgICAgICAgc3RhdGUubGVuZ3RoICs9IGhvbGQgJiAoKDEgPDwgc3RhdGUuZXh0cmEpIC0gMSkvKkJJVFMoc3RhdGUuZXh0cmEpKi87XHJcbiAgICAgICAgICAvLy0tLSBEUk9QQklUUyhzdGF0ZS5leHRyYSkgLS0tLy9cclxuICAgICAgICAgIGhvbGQgPj4+PSBzdGF0ZS5leHRyYTtcclxuICAgICAgICAgIGJpdHMgLT0gc3RhdGUuZXh0cmE7XHJcbiAgICAgICAgICAvLy0tLS8vXHJcbiAgICAgICAgICBzdGF0ZS5iYWNrICs9IHN0YXRlLmV4dHJhO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvL1RyYWNldnYoKHN0ZGVyciwgXCJpbmZsYXRlOiAgICAgICAgIGxlbmd0aCAldVxcblwiLCBzdGF0ZS5sZW5ndGgpKTtcclxuICAgICAgICBzdGF0ZS53YXMgPSBzdGF0ZS5sZW5ndGg7XHJcbiAgICAgICAgc3RhdGUubW9kZSA9IERJU1Q7XHJcbiAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xyXG4gICAgICBjYXNlIERJU1Q6XHJcbiAgICAgICAgZm9yICg7Oykge1xyXG4gICAgICAgICAgaGVyZSA9IHN0YXRlLmRpc3Rjb2RlW2hvbGQgJiAoKDEgPDwgc3RhdGUuZGlzdGJpdHMpIC0gMSldOy8qQklUUyhzdGF0ZS5kaXN0Yml0cykqL1xyXG4gICAgICAgICAgaGVyZV9iaXRzID0gaGVyZSA+Pj4gMjQ7XHJcbiAgICAgICAgICBoZXJlX29wID0gKGhlcmUgPj4+IDE2KSAmIDB4ZmY7XHJcbiAgICAgICAgICBoZXJlX3ZhbCA9IGhlcmUgJiAweGZmZmY7XHJcblxyXG4gICAgICAgICAgaWYgKChoZXJlX2JpdHMpIDw9IGJpdHMpIHsgYnJlYWs7IH1cclxuICAgICAgICAgIC8vLS0tIFBVTExCWVRFKCkgLS0tLy9cclxuICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxyXG4gICAgICAgICAgaGF2ZS0tO1xyXG4gICAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7XHJcbiAgICAgICAgICBiaXRzICs9IDg7XHJcbiAgICAgICAgICAvLy0tLS8vXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICgoaGVyZV9vcCAmIDB4ZjApID09PSAwKSB7XHJcbiAgICAgICAgICBsYXN0X2JpdHMgPSBoZXJlX2JpdHM7XHJcbiAgICAgICAgICBsYXN0X29wID0gaGVyZV9vcDtcclxuICAgICAgICAgIGxhc3RfdmFsID0gaGVyZV92YWw7XHJcbiAgICAgICAgICBmb3IgKDs7KSB7XHJcbiAgICAgICAgICAgIGhlcmUgPSBzdGF0ZS5kaXN0Y29kZVtsYXN0X3ZhbCArXHJcbiAgICAgICAgICAgICAgICAgICAgKChob2xkICYgKCgxIDw8IChsYXN0X2JpdHMgKyBsYXN0X29wKSkgLSAxKSkvKkJJVFMobGFzdC5iaXRzICsgbGFzdC5vcCkqLyA+PiBsYXN0X2JpdHMpXTtcclxuICAgICAgICAgICAgaGVyZV9iaXRzID0gaGVyZSA+Pj4gMjQ7XHJcbiAgICAgICAgICAgIGhlcmVfb3AgPSAoaGVyZSA+Pj4gMTYpICYgMHhmZjtcclxuICAgICAgICAgICAgaGVyZV92YWwgPSBoZXJlICYgMHhmZmZmO1xyXG5cclxuICAgICAgICAgICAgaWYgKChsYXN0X2JpdHMgKyBoZXJlX2JpdHMpIDw9IGJpdHMpIHsgYnJlYWs7IH1cclxuICAgICAgICAgICAgLy8tLS0gUFVMTEJZVEUoKSAtLS0vL1xyXG4gICAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cclxuICAgICAgICAgICAgaGF2ZS0tO1xyXG4gICAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0cztcclxuICAgICAgICAgICAgYml0cyArPSA4O1xyXG4gICAgICAgICAgICAvLy0tLS8vXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICAvLy0tLSBEUk9QQklUUyhsYXN0LmJpdHMpIC0tLS8vXHJcbiAgICAgICAgICBob2xkID4+Pj0gbGFzdF9iaXRzO1xyXG4gICAgICAgICAgYml0cyAtPSBsYXN0X2JpdHM7XHJcbiAgICAgICAgICAvLy0tLS8vXHJcbiAgICAgICAgICBzdGF0ZS5iYWNrICs9IGxhc3RfYml0cztcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8tLS0gRFJPUEJJVFMoaGVyZS5iaXRzKSAtLS0vL1xyXG4gICAgICAgIGhvbGQgPj4+PSBoZXJlX2JpdHM7XHJcbiAgICAgICAgYml0cyAtPSBoZXJlX2JpdHM7XHJcbiAgICAgICAgLy8tLS0vL1xyXG4gICAgICAgIHN0YXRlLmJhY2sgKz0gaGVyZV9iaXRzO1xyXG4gICAgICAgIGlmIChoZXJlX29wICYgNjQpIHtcclxuICAgICAgICAgIHN0cm0ubXNnID0gJ2ludmFsaWQgZGlzdGFuY2UgY29kZSc7XHJcbiAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEO1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHN0YXRlLm9mZnNldCA9IGhlcmVfdmFsO1xyXG4gICAgICAgIHN0YXRlLmV4dHJhID0gKGhlcmVfb3ApICYgMTU7XHJcbiAgICAgICAgc3RhdGUubW9kZSA9IERJU1RFWFQ7XHJcbiAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xyXG4gICAgICBjYXNlIERJU1RFWFQ6XHJcbiAgICAgICAgaWYgKHN0YXRlLmV4dHJhKSB7XHJcbiAgICAgICAgICAvLz09PSBORUVEQklUUyhzdGF0ZS5leHRyYSk7XHJcbiAgICAgICAgICBuID0gc3RhdGUuZXh0cmE7XHJcbiAgICAgICAgICB3aGlsZSAoYml0cyA8IG4pIHtcclxuICAgICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsgYnJlYWsgaW5mX2xlYXZlOyB9XHJcbiAgICAgICAgICAgIGhhdmUtLTtcclxuICAgICAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7XHJcbiAgICAgICAgICAgIGJpdHMgKz0gODtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIC8vPT09Ly9cclxuICAgICAgICAgIHN0YXRlLm9mZnNldCArPSBob2xkICYgKCgxIDw8IHN0YXRlLmV4dHJhKSAtIDEpLypCSVRTKHN0YXRlLmV4dHJhKSovO1xyXG4gICAgICAgICAgLy8tLS0gRFJPUEJJVFMoc3RhdGUuZXh0cmEpIC0tLS8vXHJcbiAgICAgICAgICBob2xkID4+Pj0gc3RhdGUuZXh0cmE7XHJcbiAgICAgICAgICBiaXRzIC09IHN0YXRlLmV4dHJhO1xyXG4gICAgICAgICAgLy8tLS0vL1xyXG4gICAgICAgICAgc3RhdGUuYmFjayArPSBzdGF0ZS5leHRyYTtcclxuICAgICAgICB9XHJcbi8vI2lmZGVmIElORkxBVEVfU1RSSUNUXHJcbiAgICAgICAgaWYgKHN0YXRlLm9mZnNldCA+IHN0YXRlLmRtYXgpIHtcclxuICAgICAgICAgIHN0cm0ubXNnID0gJ2ludmFsaWQgZGlzdGFuY2UgdG9vIGZhciBiYWNrJztcclxuICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbi8vI2VuZGlmXHJcbiAgICAgICAgLy9UcmFjZXZ2KChzdGRlcnIsIFwiaW5mbGF0ZTogICAgICAgICBkaXN0YW5jZSAldVxcblwiLCBzdGF0ZS5vZmZzZXQpKTtcclxuICAgICAgICBzdGF0ZS5tb2RlID0gTUFUQ0g7XHJcbiAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xyXG4gICAgICBjYXNlIE1BVENIOlxyXG4gICAgICAgIGlmIChsZWZ0ID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxyXG4gICAgICAgIGNvcHkgPSBfb3V0IC0gbGVmdDtcclxuICAgICAgICBpZiAoc3RhdGUub2Zmc2V0ID4gY29weSkgeyAgICAgICAgIC8qIGNvcHkgZnJvbSB3aW5kb3cgKi9cclxuICAgICAgICAgIGNvcHkgPSBzdGF0ZS5vZmZzZXQgLSBjb3B5O1xyXG4gICAgICAgICAgaWYgKGNvcHkgPiBzdGF0ZS53aGF2ZSkge1xyXG4gICAgICAgICAgICBpZiAoc3RhdGUuc2FuZSkge1xyXG4gICAgICAgICAgICAgIHN0cm0ubXNnID0gJ2ludmFsaWQgZGlzdGFuY2UgdG9vIGZhciBiYWNrJztcclxuICAgICAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEO1xyXG4gICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbi8vICghKSBUaGlzIGJsb2NrIGlzIGRpc2FibGVkIGluIHpsaWIgZGVmYXVsdHMsXHJcbi8vIGRvbid0IGVuYWJsZSBpdCBmb3IgYmluYXJ5IGNvbXBhdGliaWxpdHlcclxuLy8jaWZkZWYgSU5GTEFURV9BTExPV19JTlZBTElEX0RJU1RBTkNFX1RPT0ZBUl9BUlJSXHJcbi8vICAgICAgICAgIFRyYWNlKChzdGRlcnIsIFwiaW5mbGF0ZS5jIHRvbyBmYXJcXG5cIikpO1xyXG4vLyAgICAgICAgICBjb3B5IC09IHN0YXRlLndoYXZlO1xyXG4vLyAgICAgICAgICBpZiAoY29weSA+IHN0YXRlLmxlbmd0aCkgeyBjb3B5ID0gc3RhdGUubGVuZ3RoOyB9XHJcbi8vICAgICAgICAgIGlmIChjb3B5ID4gbGVmdCkgeyBjb3B5ID0gbGVmdDsgfVxyXG4vLyAgICAgICAgICBsZWZ0IC09IGNvcHk7XHJcbi8vICAgICAgICAgIHN0YXRlLmxlbmd0aCAtPSBjb3B5O1xyXG4vLyAgICAgICAgICBkbyB7XHJcbi8vICAgICAgICAgICAgb3V0cHV0W3B1dCsrXSA9IDA7XHJcbi8vICAgICAgICAgIH0gd2hpbGUgKC0tY29weSk7XHJcbi8vICAgICAgICAgIGlmIChzdGF0ZS5sZW5ndGggPT09IDApIHsgc3RhdGUubW9kZSA9IExFTjsgfVxyXG4vLyAgICAgICAgICBicmVhaztcclxuLy8jZW5kaWZcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGlmIChjb3B5ID4gc3RhdGUud25leHQpIHtcclxuICAgICAgICAgICAgY29weSAtPSBzdGF0ZS53bmV4dDtcclxuICAgICAgICAgICAgZnJvbSA9IHN0YXRlLndzaXplIC0gY29weTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBmcm9tID0gc3RhdGUud25leHQgLSBjb3B5O1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgaWYgKGNvcHkgPiBzdGF0ZS5sZW5ndGgpIHsgY29weSA9IHN0YXRlLmxlbmd0aDsgfVxyXG4gICAgICAgICAgZnJvbV9zb3VyY2UgPSBzdGF0ZS53aW5kb3c7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIGNvcHkgZnJvbSBvdXRwdXQgKi9cclxuICAgICAgICAgIGZyb21fc291cmNlID0gb3V0cHV0O1xyXG4gICAgICAgICAgZnJvbSA9IHB1dCAtIHN0YXRlLm9mZnNldDtcclxuICAgICAgICAgIGNvcHkgPSBzdGF0ZS5sZW5ndGg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChjb3B5ID4gbGVmdCkgeyBjb3B5ID0gbGVmdDsgfVxyXG4gICAgICAgIGxlZnQgLT0gY29weTtcclxuICAgICAgICBzdGF0ZS5sZW5ndGggLT0gY29weTtcclxuICAgICAgICBkbyB7XHJcbiAgICAgICAgICBvdXRwdXRbcHV0KytdID0gZnJvbV9zb3VyY2VbZnJvbSsrXTtcclxuICAgICAgICB9IHdoaWxlICgtLWNvcHkpO1xyXG4gICAgICAgIGlmIChzdGF0ZS5sZW5ndGggPT09IDApIHsgc3RhdGUubW9kZSA9IExFTjsgfVxyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlIExJVDpcclxuICAgICAgICBpZiAobGVmdCA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cclxuICAgICAgICBvdXRwdXRbcHV0KytdID0gc3RhdGUubGVuZ3RoO1xyXG4gICAgICAgIGxlZnQtLTtcclxuICAgICAgICBzdGF0ZS5tb2RlID0gTEVOO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlIENIRUNLOlxyXG4gICAgICAgIGlmIChzdGF0ZS53cmFwKSB7XHJcbiAgICAgICAgICAvLz09PSBORUVEQklUUygzMik7XHJcbiAgICAgICAgICB3aGlsZSAoYml0cyA8IDMyKSB7XHJcbiAgICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxyXG4gICAgICAgICAgICBoYXZlLS07XHJcbiAgICAgICAgICAgIC8vIFVzZSAnfCcgaW5zdGVhZCBvZiAnKycgdG8gbWFrZSBzdXJlIHRoYXQgcmVzdWx0IGlzIHNpZ25lZFxyXG4gICAgICAgICAgICBob2xkIHw9IGlucHV0W25leHQrK10gPDwgYml0cztcclxuICAgICAgICAgICAgYml0cyArPSA4O1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgLy89PT0vL1xyXG4gICAgICAgICAgX291dCAtPSBsZWZ0O1xyXG4gICAgICAgICAgc3RybS50b3RhbF9vdXQgKz0gX291dDtcclxuICAgICAgICAgIHN0YXRlLnRvdGFsICs9IF9vdXQ7XHJcbiAgICAgICAgICBpZiAoX291dCkge1xyXG4gICAgICAgICAgICBzdHJtLmFkbGVyID0gc3RhdGUuY2hlY2sgPVxyXG4gICAgICAgICAgICAgICAgLypVUERBVEUoc3RhdGUuY2hlY2ssIHB1dCAtIF9vdXQsIF9vdXQpOyovXHJcbiAgICAgICAgICAgICAgICAoc3RhdGUuZmxhZ3MgPyBjcmMzMihzdGF0ZS5jaGVjaywgb3V0cHV0LCBfb3V0LCBwdXQgLSBfb3V0KSA6IGFkbGVyMzIoc3RhdGUuY2hlY2ssIG91dHB1dCwgX291dCwgcHV0IC0gX291dCkpO1xyXG5cclxuICAgICAgICAgIH1cclxuICAgICAgICAgIF9vdXQgPSBsZWZ0O1xyXG4gICAgICAgICAgLy8gTkI6IGNyYzMyIHN0b3JlZCBhcyBzaWduZWQgMzItYml0IGludCwgenN3YXAzMiByZXR1cm5zIHNpZ25lZCB0b29cclxuICAgICAgICAgIGlmICgoc3RhdGUuZmxhZ3MgPyBob2xkIDogenN3YXAzMihob2xkKSkgIT09IHN0YXRlLmNoZWNrKSB7XHJcbiAgICAgICAgICAgIHN0cm0ubXNnID0gJ2luY29ycmVjdCBkYXRhIGNoZWNrJztcclxuICAgICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICAvLz09PSBJTklUQklUUygpO1xyXG4gICAgICAgICAgaG9sZCA9IDA7XHJcbiAgICAgICAgICBiaXRzID0gMDtcclxuICAgICAgICAgIC8vPT09Ly9cclxuICAgICAgICAgIC8vVHJhY2V2KChzdGRlcnIsIFwiaW5mbGF0ZTogICBjaGVjayBtYXRjaGVzIHRyYWlsZXJcXG5cIikpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzdGF0ZS5tb2RlID0gTEVOR1RIO1xyXG4gICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cclxuICAgICAgY2FzZSBMRU5HVEg6XHJcbiAgICAgICAgaWYgKHN0YXRlLndyYXAgJiYgc3RhdGUuZmxhZ3MpIHtcclxuICAgICAgICAgIC8vPT09IE5FRURCSVRTKDMyKTtcclxuICAgICAgICAgIHdoaWxlIChiaXRzIDwgMzIpIHtcclxuICAgICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsgYnJlYWsgaW5mX2xlYXZlOyB9XHJcbiAgICAgICAgICAgIGhhdmUtLTtcclxuICAgICAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7XHJcbiAgICAgICAgICAgIGJpdHMgKz0gODtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIC8vPT09Ly9cclxuICAgICAgICAgIGlmIChob2xkICE9PSAoc3RhdGUudG90YWwgJiAweGZmZmZmZmZmKSkge1xyXG4gICAgICAgICAgICBzdHJtLm1zZyA9ICdpbmNvcnJlY3QgbGVuZ3RoIGNoZWNrJztcclxuICAgICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICAvLz09PSBJTklUQklUUygpO1xyXG4gICAgICAgICAgaG9sZCA9IDA7XHJcbiAgICAgICAgICBiaXRzID0gMDtcclxuICAgICAgICAgIC8vPT09Ly9cclxuICAgICAgICAgIC8vVHJhY2V2KChzdGRlcnIsIFwiaW5mbGF0ZTogICBsZW5ndGggbWF0Y2hlcyB0cmFpbGVyXFxuXCIpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgc3RhdGUubW9kZSA9IERPTkU7XHJcbiAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xyXG4gICAgICBjYXNlIERPTkU6XHJcbiAgICAgICAgcmV0ID0gWl9TVFJFQU1fRU5EO1xyXG4gICAgICAgIGJyZWFrIGluZl9sZWF2ZTtcclxuICAgICAgY2FzZSBCQUQ6XHJcbiAgICAgICAgcmV0ID0gWl9EQVRBX0VSUk9SO1xyXG4gICAgICAgIGJyZWFrIGluZl9sZWF2ZTtcclxuICAgICAgY2FzZSBNRU06XHJcbiAgICAgICAgcmV0dXJuIFpfTUVNX0VSUk9SO1xyXG4gICAgICBjYXNlIFNZTkM6XHJcbiAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xyXG4gICAgICBkZWZhdWx0OlxyXG4gICAgICAgIHJldHVybiBaX1NUUkVBTV9FUlJPUjtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIGluZl9sZWF2ZSA8LSBoZXJlIGlzIHJlYWwgcGxhY2UgZm9yIFwiZ290byBpbmZfbGVhdmVcIiwgZW11bGF0ZWQgdmlhIFwiYnJlYWsgaW5mX2xlYXZlXCJcclxuXHJcbiAgLypcclxuICAgICBSZXR1cm4gZnJvbSBpbmZsYXRlKCksIHVwZGF0aW5nIHRoZSB0b3RhbCBjb3VudHMgYW5kIHRoZSBjaGVjayB2YWx1ZS5cclxuICAgICBJZiB0aGVyZSB3YXMgbm8gcHJvZ3Jlc3MgZHVyaW5nIHRoZSBpbmZsYXRlKCkgY2FsbCwgcmV0dXJuIGEgYnVmZmVyXHJcbiAgICAgZXJyb3IuICBDYWxsIHVwZGF0ZXdpbmRvdygpIHRvIGNyZWF0ZSBhbmQvb3IgdXBkYXRlIHRoZSB3aW5kb3cgc3RhdGUuXHJcbiAgICAgTm90ZTogYSBtZW1vcnkgZXJyb3IgZnJvbSBpbmZsYXRlKCkgaXMgbm9uLXJlY292ZXJhYmxlLlxyXG4gICAqL1xyXG5cclxuICAvLy0tLSBSRVNUT1JFKCkgLS0tXHJcbiAgc3RybS5uZXh0X291dCA9IHB1dDtcclxuICBzdHJtLmF2YWlsX291dCA9IGxlZnQ7XHJcbiAgc3RybS5uZXh0X2luID0gbmV4dDtcclxuICBzdHJtLmF2YWlsX2luID0gaGF2ZTtcclxuICBzdGF0ZS5ob2xkID0gaG9sZDtcclxuICBzdGF0ZS5iaXRzID0gYml0cztcclxuICAvLy0tLVxyXG5cclxuICBpZiAoc3RhdGUud3NpemUgfHwgKF9vdXQgIT09IHN0cm0uYXZhaWxfb3V0ICYmIHN0YXRlLm1vZGUgPCBCQUQgJiZcclxuICAgICAgICAgICAgICAgICAgICAgIChzdGF0ZS5tb2RlIDwgQ0hFQ0sgfHwgZmx1c2ggIT09IFpfRklOSVNIKSkpIHtcclxuICAgIGlmICh1cGRhdGV3aW5kb3coc3RybSwgc3RybS5vdXRwdXQsIHN0cm0ubmV4dF9vdXQsIF9vdXQgLSBzdHJtLmF2YWlsX291dCkpIHtcclxuICAgICAgc3RhdGUubW9kZSA9IE1FTTtcclxuICAgICAgcmV0dXJuIFpfTUVNX0VSUk9SO1xyXG4gICAgfVxyXG4gIH1cclxuICBfaW4gLT0gc3RybS5hdmFpbF9pbjtcclxuICBfb3V0IC09IHN0cm0uYXZhaWxfb3V0O1xyXG4gIHN0cm0udG90YWxfaW4gKz0gX2luO1xyXG4gIHN0cm0udG90YWxfb3V0ICs9IF9vdXQ7XHJcbiAgc3RhdGUudG90YWwgKz0gX291dDtcclxuICBpZiAoc3RhdGUud3JhcCAmJiBfb3V0KSB7XHJcbiAgICBzdHJtLmFkbGVyID0gc3RhdGUuY2hlY2sgPSAvKlVQREFURShzdGF0ZS5jaGVjaywgc3RybS5uZXh0X291dCAtIF9vdXQsIF9vdXQpOyovXHJcbiAgICAgIChzdGF0ZS5mbGFncyA/IGNyYzMyKHN0YXRlLmNoZWNrLCBvdXRwdXQsIF9vdXQsIHN0cm0ubmV4dF9vdXQgLSBfb3V0KSA6IGFkbGVyMzIoc3RhdGUuY2hlY2ssIG91dHB1dCwgX291dCwgc3RybS5uZXh0X291dCAtIF9vdXQpKTtcclxuICB9XHJcbiAgc3RybS5kYXRhX3R5cGUgPSBzdGF0ZS5iaXRzICsgKHN0YXRlLmxhc3QgPyA2NCA6IDApICtcclxuICAgICAgICAgICAgICAgICAgICAoc3RhdGUubW9kZSA9PT0gVFlQRSA/IDEyOCA6IDApICtcclxuICAgICAgICAgICAgICAgICAgICAoc3RhdGUubW9kZSA9PT0gTEVOXyB8fCBzdGF0ZS5tb2RlID09PSBDT1BZXyA/IDI1NiA6IDApO1xyXG4gIGlmICgoKF9pbiA9PT0gMCAmJiBfb3V0ID09PSAwKSB8fCBmbHVzaCA9PT0gWl9GSU5JU0gpICYmIHJldCA9PT0gWl9PSykge1xyXG4gICAgcmV0ID0gWl9CVUZfRVJST1I7XHJcbiAgfVxyXG4gIHJldHVybiByZXQ7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGluZmxhdGVFbmQoc3RybSkge1xyXG5cclxuICBpZiAoIXN0cm0gfHwgIXN0cm0uc3RhdGUgLyp8fCBzdHJtLT56ZnJlZSA9PSAoZnJlZV9mdW5jKTAqLykge1xyXG4gICAgcmV0dXJuIFpfU1RSRUFNX0VSUk9SO1xyXG4gIH1cclxuXHJcbiAgdmFyIHN0YXRlID0gc3RybS5zdGF0ZTtcclxuICBpZiAoc3RhdGUud2luZG93KSB7XHJcbiAgICBzdGF0ZS53aW5kb3cgPSBudWxsO1xyXG4gIH1cclxuICBzdHJtLnN0YXRlID0gbnVsbDtcclxuICByZXR1cm4gWl9PSztcclxufVxyXG5cclxuZnVuY3Rpb24gaW5mbGF0ZUdldEhlYWRlcihzdHJtLCBoZWFkKSB7XHJcbiAgdmFyIHN0YXRlO1xyXG5cclxuICAvKiBjaGVjayBzdGF0ZSAqL1xyXG4gIGlmICghc3RybSB8fCAhc3RybS5zdGF0ZSkgeyByZXR1cm4gWl9TVFJFQU1fRVJST1I7IH1cclxuICBzdGF0ZSA9IHN0cm0uc3RhdGU7XHJcbiAgaWYgKChzdGF0ZS53cmFwICYgMikgPT09IDApIHsgcmV0dXJuIFpfU1RSRUFNX0VSUk9SOyB9XHJcblxyXG4gIC8qIHNhdmUgaGVhZGVyIHN0cnVjdHVyZSAqL1xyXG4gIHN0YXRlLmhlYWQgPSBoZWFkO1xyXG4gIGhlYWQuZG9uZSA9IGZhbHNlO1xyXG4gIHJldHVybiBaX09LO1xyXG59XHJcblxyXG5mdW5jdGlvbiBpbmZsYXRlU2V0RGljdGlvbmFyeShzdHJtLCBkaWN0aW9uYXJ5KSB7XHJcbiAgdmFyIGRpY3RMZW5ndGggPSBkaWN0aW9uYXJ5Lmxlbmd0aDtcclxuXHJcbiAgdmFyIHN0YXRlO1xyXG4gIHZhciBkaWN0aWQ7XHJcbiAgdmFyIHJldDtcclxuXHJcbiAgLyogY2hlY2sgc3RhdGUgKi9cclxuICBpZiAoIXN0cm0gLyogPT0gWl9OVUxMICovIHx8ICFzdHJtLnN0YXRlIC8qID09IFpfTlVMTCAqLykgeyByZXR1cm4gWl9TVFJFQU1fRVJST1I7IH1cclxuICBzdGF0ZSA9IHN0cm0uc3RhdGU7XHJcblxyXG4gIGlmIChzdGF0ZS53cmFwICE9PSAwICYmIHN0YXRlLm1vZGUgIT09IERJQ1QpIHtcclxuICAgIHJldHVybiBaX1NUUkVBTV9FUlJPUjtcclxuICB9XHJcblxyXG4gIC8qIGNoZWNrIGZvciBjb3JyZWN0IGRpY3Rpb25hcnkgaWRlbnRpZmllciAqL1xyXG4gIGlmIChzdGF0ZS5tb2RlID09PSBESUNUKSB7XHJcbiAgICBkaWN0aWQgPSAxOyAvKiBhZGxlcjMyKDAsIG51bGwsIDApKi9cclxuICAgIC8qIGRpY3RpZCA9IGFkbGVyMzIoZGljdGlkLCBkaWN0aW9uYXJ5LCBkaWN0TGVuZ3RoKTsgKi9cclxuICAgIGRpY3RpZCA9IGFkbGVyMzIoZGljdGlkLCBkaWN0aW9uYXJ5LCBkaWN0TGVuZ3RoLCAwKTtcclxuICAgIGlmIChkaWN0aWQgIT09IHN0YXRlLmNoZWNrKSB7XHJcbiAgICAgIHJldHVybiBaX0RBVEFfRVJST1I7XHJcbiAgICB9XHJcbiAgfVxyXG4gIC8qIGNvcHkgZGljdGlvbmFyeSB0byB3aW5kb3cgdXNpbmcgdXBkYXRld2luZG93KCksIHdoaWNoIHdpbGwgYW1lbmQgdGhlXHJcbiAgIGV4aXN0aW5nIGRpY3Rpb25hcnkgaWYgYXBwcm9wcmlhdGUgKi9cclxuICByZXQgPSB1cGRhdGV3aW5kb3coc3RybSwgZGljdGlvbmFyeSwgZGljdExlbmd0aCwgZGljdExlbmd0aCk7XHJcbiAgaWYgKHJldCkge1xyXG4gICAgc3RhdGUubW9kZSA9IE1FTTtcclxuICAgIHJldHVybiBaX01FTV9FUlJPUjtcclxuICB9XHJcbiAgc3RhdGUuaGF2ZWRpY3QgPSAxO1xyXG4gIC8vIFRyYWNldigoc3RkZXJyLCBcImluZmxhdGU6ICAgZGljdGlvbmFyeSBzZXRcXG5cIikpO1xyXG4gIHJldHVybiBaX09LO1xyXG59XHJcblxyXG5leHBvcnRzLmluZmxhdGVSZXNldCA9IGluZmxhdGVSZXNldDtcclxuZXhwb3J0cy5pbmZsYXRlUmVzZXQyID0gaW5mbGF0ZVJlc2V0MjtcclxuZXhwb3J0cy5pbmZsYXRlUmVzZXRLZWVwID0gaW5mbGF0ZVJlc2V0S2VlcDtcclxuZXhwb3J0cy5pbmZsYXRlSW5pdCA9IGluZmxhdGVJbml0O1xyXG5leHBvcnRzLmluZmxhdGVJbml0MiA9IGluZmxhdGVJbml0MjtcclxuZXhwb3J0cy5pbmZsYXRlID0gaW5mbGF0ZTtcclxuZXhwb3J0cy5pbmZsYXRlRW5kID0gaW5mbGF0ZUVuZDtcclxuZXhwb3J0cy5pbmZsYXRlR2V0SGVhZGVyID0gaW5mbGF0ZUdldEhlYWRlcjtcclxuZXhwb3J0cy5pbmZsYXRlU2V0RGljdGlvbmFyeSA9IGluZmxhdGVTZXREaWN0aW9uYXJ5O1xyXG5leHBvcnRzLmluZmxhdGVJbmZvID0gJ3Bha28gaW5mbGF0ZSAoZnJvbSBOb2RlY2EgcHJvamVjdCknO1xyXG5cclxuLyogTm90IGltcGxlbWVudGVkXHJcbmV4cG9ydHMuaW5mbGF0ZUNvcHkgPSBpbmZsYXRlQ29weTtcclxuZXhwb3J0cy5pbmZsYXRlR2V0RGljdGlvbmFyeSA9IGluZmxhdGVHZXREaWN0aW9uYXJ5O1xyXG5leHBvcnRzLmluZmxhdGVNYXJrID0gaW5mbGF0ZU1hcms7XHJcbmV4cG9ydHMuaW5mbGF0ZVByaW1lID0gaW5mbGF0ZVByaW1lO1xyXG5leHBvcnRzLmluZmxhdGVTeW5jID0gaW5mbGF0ZVN5bmM7XHJcbmV4cG9ydHMuaW5mbGF0ZVN5bmNQb2ludCA9IGluZmxhdGVTeW5jUG9pbnQ7XHJcbmV4cG9ydHMuaW5mbGF0ZVVuZGVybWluZSA9IGluZmxhdGVVbmRlcm1pbmU7XHJcbiovXHJcbiIsIid1c2Ugc3RyaWN0JztcclxuXHJcbi8vIChDKSAxOTk1LTIwMTMgSmVhbi1sb3VwIEdhaWxseSBhbmQgTWFyayBBZGxlclxyXG4vLyAoQykgMjAxNC0yMDE3IFZpdGFseSBQdXpyaW4gYW5kIEFuZHJleSBUdXBpdHNpblxyXG4vL1xyXG4vLyBUaGlzIHNvZnR3YXJlIGlzIHByb3ZpZGVkICdhcy1pcycsIHdpdGhvdXQgYW55IGV4cHJlc3Mgb3IgaW1wbGllZFxyXG4vLyB3YXJyYW50eS4gSW4gbm8gZXZlbnQgd2lsbCB0aGUgYXV0aG9ycyBiZSBoZWxkIGxpYWJsZSBmb3IgYW55IGRhbWFnZXNcclxuLy8gYXJpc2luZyBmcm9tIHRoZSB1c2Ugb2YgdGhpcyBzb2Z0d2FyZS5cclxuLy9cclxuLy8gUGVybWlzc2lvbiBpcyBncmFudGVkIHRvIGFueW9uZSB0byB1c2UgdGhpcyBzb2Z0d2FyZSBmb3IgYW55IHB1cnBvc2UsXHJcbi8vIGluY2x1ZGluZyBjb21tZXJjaWFsIGFwcGxpY2F0aW9ucywgYW5kIHRvIGFsdGVyIGl0IGFuZCByZWRpc3RyaWJ1dGUgaXRcclxuLy8gZnJlZWx5LCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgcmVzdHJpY3Rpb25zOlxyXG4vL1xyXG4vLyAxLiBUaGUgb3JpZ2luIG9mIHRoaXMgc29mdHdhcmUgbXVzdCBub3QgYmUgbWlzcmVwcmVzZW50ZWQ7IHlvdSBtdXN0IG5vdFxyXG4vLyAgIGNsYWltIHRoYXQgeW91IHdyb3RlIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS4gSWYgeW91IHVzZSB0aGlzIHNvZnR3YXJlXHJcbi8vICAgaW4gYSBwcm9kdWN0LCBhbiBhY2tub3dsZWRnbWVudCBpbiB0aGUgcHJvZHVjdCBkb2N1bWVudGF0aW9uIHdvdWxkIGJlXHJcbi8vICAgYXBwcmVjaWF0ZWQgYnV0IGlzIG5vdCByZXF1aXJlZC5cclxuLy8gMi4gQWx0ZXJlZCBzb3VyY2UgdmVyc2lvbnMgbXVzdCBiZSBwbGFpbmx5IG1hcmtlZCBhcyBzdWNoLCBhbmQgbXVzdCBub3QgYmVcclxuLy8gICBtaXNyZXByZXNlbnRlZCBhcyBiZWluZyB0aGUgb3JpZ2luYWwgc29mdHdhcmUuXHJcbi8vIDMuIFRoaXMgbm90aWNlIG1heSBub3QgYmUgcmVtb3ZlZCBvciBhbHRlcmVkIGZyb20gYW55IHNvdXJjZSBkaXN0cmlidXRpb24uXHJcblxyXG4vLyBTZWUgc3RhdGUgZGVmcyBmcm9tIGluZmxhdGUuanNcclxudmFyIEJBRCA9IDMwOyAgICAgICAvKiBnb3QgYSBkYXRhIGVycm9yIC0tIHJlbWFpbiBoZXJlIHVudGlsIHJlc2V0ICovXHJcbnZhciBUWVBFID0gMTI7ICAgICAgLyogaTogd2FpdGluZyBmb3IgdHlwZSBiaXRzLCBpbmNsdWRpbmcgbGFzdC1mbGFnIGJpdCAqL1xyXG5cclxuLypcclxuICAgRGVjb2RlIGxpdGVyYWwsIGxlbmd0aCwgYW5kIGRpc3RhbmNlIGNvZGVzIGFuZCB3cml0ZSBvdXQgdGhlIHJlc3VsdGluZ1xyXG4gICBsaXRlcmFsIGFuZCBtYXRjaCBieXRlcyB1bnRpbCBlaXRoZXIgbm90IGVub3VnaCBpbnB1dCBvciBvdXRwdXQgaXNcclxuICAgYXZhaWxhYmxlLCBhbiBlbmQtb2YtYmxvY2sgaXMgZW5jb3VudGVyZWQsIG9yIGEgZGF0YSBlcnJvciBpcyBlbmNvdW50ZXJlZC5cclxuICAgV2hlbiBsYXJnZSBlbm91Z2ggaW5wdXQgYW5kIG91dHB1dCBidWZmZXJzIGFyZSBzdXBwbGllZCB0byBpbmZsYXRlKCksIGZvclxyXG4gICBleGFtcGxlLCBhIDE2SyBpbnB1dCBidWZmZXIgYW5kIGEgNjRLIG91dHB1dCBidWZmZXIsIG1vcmUgdGhhbiA5NSUgb2YgdGhlXHJcbiAgIGluZmxhdGUgZXhlY3V0aW9uIHRpbWUgaXMgc3BlbnQgaW4gdGhpcyByb3V0aW5lLlxyXG5cclxuICAgRW50cnkgYXNzdW1wdGlvbnM6XHJcblxyXG4gICAgICAgIHN0YXRlLm1vZGUgPT09IExFTlxyXG4gICAgICAgIHN0cm0uYXZhaWxfaW4gPj0gNlxyXG4gICAgICAgIHN0cm0uYXZhaWxfb3V0ID49IDI1OFxyXG4gICAgICAgIHN0YXJ0ID49IHN0cm0uYXZhaWxfb3V0XHJcbiAgICAgICAgc3RhdGUuYml0cyA8IDhcclxuXHJcbiAgIE9uIHJldHVybiwgc3RhdGUubW9kZSBpcyBvbmUgb2Y6XHJcblxyXG4gICAgICAgIExFTiAtLSByYW4gb3V0IG9mIGVub3VnaCBvdXRwdXQgc3BhY2Ugb3IgZW5vdWdoIGF2YWlsYWJsZSBpbnB1dFxyXG4gICAgICAgIFRZUEUgLS0gcmVhY2hlZCBlbmQgb2YgYmxvY2sgY29kZSwgaW5mbGF0ZSgpIHRvIGludGVycHJldCBuZXh0IGJsb2NrXHJcbiAgICAgICAgQkFEIC0tIGVycm9yIGluIGJsb2NrIGRhdGFcclxuXHJcbiAgIE5vdGVzOlxyXG5cclxuICAgIC0gVGhlIG1heGltdW0gaW5wdXQgYml0cyB1c2VkIGJ5IGEgbGVuZ3RoL2Rpc3RhbmNlIHBhaXIgaXMgMTUgYml0cyBmb3IgdGhlXHJcbiAgICAgIGxlbmd0aCBjb2RlLCA1IGJpdHMgZm9yIHRoZSBsZW5ndGggZXh0cmEsIDE1IGJpdHMgZm9yIHRoZSBkaXN0YW5jZSBjb2RlLFxyXG4gICAgICBhbmQgMTMgYml0cyBmb3IgdGhlIGRpc3RhbmNlIGV4dHJhLiAgVGhpcyB0b3RhbHMgNDggYml0cywgb3Igc2l4IGJ5dGVzLlxyXG4gICAgICBUaGVyZWZvcmUgaWYgc3RybS5hdmFpbF9pbiA+PSA2LCB0aGVuIHRoZXJlIGlzIGVub3VnaCBpbnB1dCB0byBhdm9pZFxyXG4gICAgICBjaGVja2luZyBmb3IgYXZhaWxhYmxlIGlucHV0IHdoaWxlIGRlY29kaW5nLlxyXG5cclxuICAgIC0gVGhlIG1heGltdW0gYnl0ZXMgdGhhdCBhIHNpbmdsZSBsZW5ndGgvZGlzdGFuY2UgcGFpciBjYW4gb3V0cHV0IGlzIDI1OFxyXG4gICAgICBieXRlcywgd2hpY2ggaXMgdGhlIG1heGltdW0gbGVuZ3RoIHRoYXQgY2FuIGJlIGNvZGVkLiAgaW5mbGF0ZV9mYXN0KClcclxuICAgICAgcmVxdWlyZXMgc3RybS5hdmFpbF9vdXQgPj0gMjU4IGZvciBlYWNoIGxvb3AgdG8gYXZvaWQgY2hlY2tpbmcgZm9yXHJcbiAgICAgIG91dHB1dCBzcGFjZS5cclxuICovXHJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaW5mbGF0ZV9mYXN0KHN0cm0sIHN0YXJ0KSB7XHJcbiAgdmFyIHN0YXRlO1xyXG4gIHZhciBfaW47ICAgICAgICAgICAgICAgICAgICAvKiBsb2NhbCBzdHJtLmlucHV0ICovXHJcbiAgdmFyIGxhc3Q7ICAgICAgICAgICAgICAgICAgIC8qIGhhdmUgZW5vdWdoIGlucHV0IHdoaWxlIGluIDwgbGFzdCAqL1xyXG4gIHZhciBfb3V0OyAgICAgICAgICAgICAgICAgICAvKiBsb2NhbCBzdHJtLm91dHB1dCAqL1xyXG4gIHZhciBiZWc7ICAgICAgICAgICAgICAgICAgICAvKiBpbmZsYXRlKCkncyBpbml0aWFsIHN0cm0ub3V0cHV0ICovXHJcbiAgdmFyIGVuZDsgICAgICAgICAgICAgICAgICAgIC8qIHdoaWxlIG91dCA8IGVuZCwgZW5vdWdoIHNwYWNlIGF2YWlsYWJsZSAqL1xyXG4vLyNpZmRlZiBJTkZMQVRFX1NUUklDVFxyXG4gIHZhciBkbWF4OyAgICAgICAgICAgICAgICAgICAvKiBtYXhpbXVtIGRpc3RhbmNlIGZyb20gemxpYiBoZWFkZXIgKi9cclxuLy8jZW5kaWZcclxuICB2YXIgd3NpemU7ICAgICAgICAgICAgICAgICAgLyogd2luZG93IHNpemUgb3IgemVybyBpZiBub3QgdXNpbmcgd2luZG93ICovXHJcbiAgdmFyIHdoYXZlOyAgICAgICAgICAgICAgICAgIC8qIHZhbGlkIGJ5dGVzIGluIHRoZSB3aW5kb3cgKi9cclxuICB2YXIgd25leHQ7ICAgICAgICAgICAgICAgICAgLyogd2luZG93IHdyaXRlIGluZGV4ICovXHJcbiAgLy8gVXNlIGBzX3dpbmRvd2AgaW5zdGVhZCBgd2luZG93YCwgYXZvaWQgY29uZmxpY3Qgd2l0aCBpbnN0cnVtZW50YXRpb24gdG9vbHNcclxuICB2YXIgc193aW5kb3c7ICAgICAgICAgICAgICAgLyogYWxsb2NhdGVkIHNsaWRpbmcgd2luZG93LCBpZiB3c2l6ZSAhPSAwICovXHJcbiAgdmFyIGhvbGQ7ICAgICAgICAgICAgICAgICAgIC8qIGxvY2FsIHN0cm0uaG9sZCAqL1xyXG4gIHZhciBiaXRzOyAgICAgICAgICAgICAgICAgICAvKiBsb2NhbCBzdHJtLmJpdHMgKi9cclxuICB2YXIgbGNvZGU7ICAgICAgICAgICAgICAgICAgLyogbG9jYWwgc3RybS5sZW5jb2RlICovXHJcbiAgdmFyIGRjb2RlOyAgICAgICAgICAgICAgICAgIC8qIGxvY2FsIHN0cm0uZGlzdGNvZGUgKi9cclxuICB2YXIgbG1hc2s7ICAgICAgICAgICAgICAgICAgLyogbWFzayBmb3IgZmlyc3QgbGV2ZWwgb2YgbGVuZ3RoIGNvZGVzICovXHJcbiAgdmFyIGRtYXNrOyAgICAgICAgICAgICAgICAgIC8qIG1hc2sgZm9yIGZpcnN0IGxldmVsIG9mIGRpc3RhbmNlIGNvZGVzICovXHJcbiAgdmFyIGhlcmU7ICAgICAgICAgICAgICAgICAgIC8qIHJldHJpZXZlZCB0YWJsZSBlbnRyeSAqL1xyXG4gIHZhciBvcDsgICAgICAgICAgICAgICAgICAgICAvKiBjb2RlIGJpdHMsIG9wZXJhdGlvbiwgZXh0cmEgYml0cywgb3IgKi9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogIHdpbmRvdyBwb3NpdGlvbiwgd2luZG93IGJ5dGVzIHRvIGNvcHkgKi9cclxuICB2YXIgbGVuOyAgICAgICAgICAgICAgICAgICAgLyogbWF0Y2ggbGVuZ3RoLCB1bnVzZWQgYnl0ZXMgKi9cclxuICB2YXIgZGlzdDsgICAgICAgICAgICAgICAgICAgLyogbWF0Y2ggZGlzdGFuY2UgKi9cclxuICB2YXIgZnJvbTsgICAgICAgICAgICAgICAgICAgLyogd2hlcmUgdG8gY29weSBtYXRjaCBmcm9tICovXHJcbiAgdmFyIGZyb21fc291cmNlO1xyXG5cclxuXHJcbiAgdmFyIGlucHV0LCBvdXRwdXQ7IC8vIEpTIHNwZWNpZmljLCBiZWNhdXNlIHdlIGhhdmUgbm8gcG9pbnRlcnNcclxuXHJcbiAgLyogY29weSBzdGF0ZSB0byBsb2NhbCB2YXJpYWJsZXMgKi9cclxuICBzdGF0ZSA9IHN0cm0uc3RhdGU7XHJcbiAgLy9oZXJlID0gc3RhdGUuaGVyZTtcclxuICBfaW4gPSBzdHJtLm5leHRfaW47XHJcbiAgaW5wdXQgPSBzdHJtLmlucHV0O1xyXG4gIGxhc3QgPSBfaW4gKyAoc3RybS5hdmFpbF9pbiAtIDUpO1xyXG4gIF9vdXQgPSBzdHJtLm5leHRfb3V0O1xyXG4gIG91dHB1dCA9IHN0cm0ub3V0cHV0O1xyXG4gIGJlZyA9IF9vdXQgLSAoc3RhcnQgLSBzdHJtLmF2YWlsX291dCk7XHJcbiAgZW5kID0gX291dCArIChzdHJtLmF2YWlsX291dCAtIDI1Nyk7XHJcbi8vI2lmZGVmIElORkxBVEVfU1RSSUNUXHJcbiAgZG1heCA9IHN0YXRlLmRtYXg7XHJcbi8vI2VuZGlmXHJcbiAgd3NpemUgPSBzdGF0ZS53c2l6ZTtcclxuICB3aGF2ZSA9IHN0YXRlLndoYXZlO1xyXG4gIHduZXh0ID0gc3RhdGUud25leHQ7XHJcbiAgc193aW5kb3cgPSBzdGF0ZS53aW5kb3c7XHJcbiAgaG9sZCA9IHN0YXRlLmhvbGQ7XHJcbiAgYml0cyA9IHN0YXRlLmJpdHM7XHJcbiAgbGNvZGUgPSBzdGF0ZS5sZW5jb2RlO1xyXG4gIGRjb2RlID0gc3RhdGUuZGlzdGNvZGU7XHJcbiAgbG1hc2sgPSAoMSA8PCBzdGF0ZS5sZW5iaXRzKSAtIDE7XHJcbiAgZG1hc2sgPSAoMSA8PCBzdGF0ZS5kaXN0Yml0cykgLSAxO1xyXG5cclxuXHJcbiAgLyogZGVjb2RlIGxpdGVyYWxzIGFuZCBsZW5ndGgvZGlzdGFuY2VzIHVudGlsIGVuZC1vZi1ibG9jayBvciBub3QgZW5vdWdoXHJcbiAgICAgaW5wdXQgZGF0YSBvciBvdXRwdXQgc3BhY2UgKi9cclxuXHJcbiAgdG9wOlxyXG4gIGRvIHtcclxuICAgIGlmIChiaXRzIDwgMTUpIHtcclxuICAgICAgaG9sZCArPSBpbnB1dFtfaW4rK10gPDwgYml0cztcclxuICAgICAgYml0cyArPSA4O1xyXG4gICAgICBob2xkICs9IGlucHV0W19pbisrXSA8PCBiaXRzO1xyXG4gICAgICBiaXRzICs9IDg7XHJcbiAgICB9XHJcblxyXG4gICAgaGVyZSA9IGxjb2RlW2hvbGQgJiBsbWFza107XHJcblxyXG4gICAgZG9sZW46XHJcbiAgICBmb3IgKDs7KSB7IC8vIEdvdG8gZW11bGF0aW9uXHJcbiAgICAgIG9wID0gaGVyZSA+Pj4gMjQvKmhlcmUuYml0cyovO1xyXG4gICAgICBob2xkID4+Pj0gb3A7XHJcbiAgICAgIGJpdHMgLT0gb3A7XHJcbiAgICAgIG9wID0gKGhlcmUgPj4+IDE2KSAmIDB4ZmYvKmhlcmUub3AqLztcclxuICAgICAgaWYgKG9wID09PSAwKSB7ICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBsaXRlcmFsICovXHJcbiAgICAgICAgLy9UcmFjZXZ2KChzdGRlcnIsIGhlcmUudmFsID49IDB4MjAgJiYgaGVyZS52YWwgPCAweDdmID9cclxuICAgICAgICAvLyAgICAgICAgXCJpbmZsYXRlOiAgICAgICAgIGxpdGVyYWwgJyVjJ1xcblwiIDpcclxuICAgICAgICAvLyAgICAgICAgXCJpbmZsYXRlOiAgICAgICAgIGxpdGVyYWwgMHglMDJ4XFxuXCIsIGhlcmUudmFsKSk7XHJcbiAgICAgICAgb3V0cHV0W19vdXQrK10gPSBoZXJlICYgMHhmZmZmLypoZXJlLnZhbCovO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2UgaWYgKG9wICYgMTYpIHsgICAgICAgICAgICAgICAgICAgICAvKiBsZW5ndGggYmFzZSAqL1xyXG4gICAgICAgIGxlbiA9IGhlcmUgJiAweGZmZmYvKmhlcmUudmFsKi87XHJcbiAgICAgICAgb3AgJj0gMTU7ICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogbnVtYmVyIG9mIGV4dHJhIGJpdHMgKi9cclxuICAgICAgICBpZiAob3ApIHtcclxuICAgICAgICAgIGlmIChiaXRzIDwgb3ApIHtcclxuICAgICAgICAgICAgaG9sZCArPSBpbnB1dFtfaW4rK10gPDwgYml0cztcclxuICAgICAgICAgICAgYml0cyArPSA4O1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgbGVuICs9IGhvbGQgJiAoKDEgPDwgb3ApIC0gMSk7XHJcbiAgICAgICAgICBob2xkID4+Pj0gb3A7XHJcbiAgICAgICAgICBiaXRzIC09IG9wO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvL1RyYWNldnYoKHN0ZGVyciwgXCJpbmZsYXRlOiAgICAgICAgIGxlbmd0aCAldVxcblwiLCBsZW4pKTtcclxuICAgICAgICBpZiAoYml0cyA8IDE1KSB7XHJcbiAgICAgICAgICBob2xkICs9IGlucHV0W19pbisrXSA8PCBiaXRzO1xyXG4gICAgICAgICAgYml0cyArPSA4O1xyXG4gICAgICAgICAgaG9sZCArPSBpbnB1dFtfaW4rK10gPDwgYml0cztcclxuICAgICAgICAgIGJpdHMgKz0gODtcclxuICAgICAgICB9XHJcbiAgICAgICAgaGVyZSA9IGRjb2RlW2hvbGQgJiBkbWFza107XHJcblxyXG4gICAgICAgIGRvZGlzdDpcclxuICAgICAgICBmb3IgKDs7KSB7IC8vIGdvdG8gZW11bGF0aW9uXHJcbiAgICAgICAgICBvcCA9IGhlcmUgPj4+IDI0LypoZXJlLmJpdHMqLztcclxuICAgICAgICAgIGhvbGQgPj4+PSBvcDtcclxuICAgICAgICAgIGJpdHMgLT0gb3A7XHJcbiAgICAgICAgICBvcCA9IChoZXJlID4+PiAxNikgJiAweGZmLypoZXJlLm9wKi87XHJcblxyXG4gICAgICAgICAgaWYgKG9wICYgMTYpIHsgICAgICAgICAgICAgICAgICAgICAgLyogZGlzdGFuY2UgYmFzZSAqL1xyXG4gICAgICAgICAgICBkaXN0ID0gaGVyZSAmIDB4ZmZmZi8qaGVyZS52YWwqLztcclxuICAgICAgICAgICAgb3AgJj0gMTU7ICAgICAgICAgICAgICAgICAgICAgICAvKiBudW1iZXIgb2YgZXh0cmEgYml0cyAqL1xyXG4gICAgICAgICAgICBpZiAoYml0cyA8IG9wKSB7XHJcbiAgICAgICAgICAgICAgaG9sZCArPSBpbnB1dFtfaW4rK10gPDwgYml0cztcclxuICAgICAgICAgICAgICBiaXRzICs9IDg7XHJcbiAgICAgICAgICAgICAgaWYgKGJpdHMgPCBvcCkge1xyXG4gICAgICAgICAgICAgICAgaG9sZCArPSBpbnB1dFtfaW4rK10gPDwgYml0cztcclxuICAgICAgICAgICAgICAgIGJpdHMgKz0gODtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZGlzdCArPSBob2xkICYgKCgxIDw8IG9wKSAtIDEpO1xyXG4vLyNpZmRlZiBJTkZMQVRFX1NUUklDVFxyXG4gICAgICAgICAgICBpZiAoZGlzdCA+IGRtYXgpIHtcclxuICAgICAgICAgICAgICBzdHJtLm1zZyA9ICdpbnZhbGlkIGRpc3RhbmNlIHRvbyBmYXIgYmFjayc7XHJcbiAgICAgICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcclxuICAgICAgICAgICAgICBicmVhayB0b3A7XHJcbiAgICAgICAgICAgIH1cclxuLy8jZW5kaWZcclxuICAgICAgICAgICAgaG9sZCA+Pj49IG9wO1xyXG4gICAgICAgICAgICBiaXRzIC09IG9wO1xyXG4gICAgICAgICAgICAvL1RyYWNldnYoKHN0ZGVyciwgXCJpbmZsYXRlOiAgICAgICAgIGRpc3RhbmNlICV1XFxuXCIsIGRpc3QpKTtcclxuICAgICAgICAgICAgb3AgPSBfb3V0IC0gYmVnOyAgICAgICAgICAgICAgICAvKiBtYXggZGlzdGFuY2UgaW4gb3V0cHV0ICovXHJcbiAgICAgICAgICAgIGlmIChkaXN0ID4gb3ApIHsgICAgICAgICAgICAgICAgLyogc2VlIGlmIGNvcHkgZnJvbSB3aW5kb3cgKi9cclxuICAgICAgICAgICAgICBvcCA9IGRpc3QgLSBvcDsgICAgICAgICAgICAgICAvKiBkaXN0YW5jZSBiYWNrIGluIHdpbmRvdyAqL1xyXG4gICAgICAgICAgICAgIGlmIChvcCA+IHdoYXZlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoc3RhdGUuc2FuZSkge1xyXG4gICAgICAgICAgICAgICAgICBzdHJtLm1zZyA9ICdpbnZhbGlkIGRpc3RhbmNlIHRvbyBmYXIgYmFjayc7XHJcbiAgICAgICAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7XHJcbiAgICAgICAgICAgICAgICAgIGJyZWFrIHRvcDtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbi8vICghKSBUaGlzIGJsb2NrIGlzIGRpc2FibGVkIGluIHpsaWIgZGVmYXVsdHMsXHJcbi8vIGRvbid0IGVuYWJsZSBpdCBmb3IgYmluYXJ5IGNvbXBhdGliaWxpdHlcclxuLy8jaWZkZWYgSU5GTEFURV9BTExPV19JTlZBTElEX0RJU1RBTkNFX1RPT0ZBUl9BUlJSXHJcbi8vICAgICAgICAgICAgICAgIGlmIChsZW4gPD0gb3AgLSB3aGF2ZSkge1xyXG4vLyAgICAgICAgICAgICAgICAgIGRvIHtcclxuLy8gICAgICAgICAgICAgICAgICAgIG91dHB1dFtfb3V0KytdID0gMDtcclxuLy8gICAgICAgICAgICAgICAgICB9IHdoaWxlICgtLWxlbik7XHJcbi8vICAgICAgICAgICAgICAgICAgY29udGludWUgdG9wO1xyXG4vLyAgICAgICAgICAgICAgICB9XHJcbi8vICAgICAgICAgICAgICAgIGxlbiAtPSBvcCAtIHdoYXZlO1xyXG4vLyAgICAgICAgICAgICAgICBkbyB7XHJcbi8vICAgICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSAwO1xyXG4vLyAgICAgICAgICAgICAgICB9IHdoaWxlICgtLW9wID4gd2hhdmUpO1xyXG4vLyAgICAgICAgICAgICAgICBpZiAob3AgPT09IDApIHtcclxuLy8gICAgICAgICAgICAgICAgICBmcm9tID0gX291dCAtIGRpc3Q7XHJcbi8vICAgICAgICAgICAgICAgICAgZG8ge1xyXG4vLyAgICAgICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSBvdXRwdXRbZnJvbSsrXTtcclxuLy8gICAgICAgICAgICAgICAgICB9IHdoaWxlICgtLWxlbik7XHJcbi8vICAgICAgICAgICAgICAgICAgY29udGludWUgdG9wO1xyXG4vLyAgICAgICAgICAgICAgICB9XHJcbi8vI2VuZGlmXHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIGZyb20gPSAwOyAvLyB3aW5kb3cgaW5kZXhcclxuICAgICAgICAgICAgICBmcm9tX3NvdXJjZSA9IHNfd2luZG93O1xyXG4gICAgICAgICAgICAgIGlmICh3bmV4dCA9PT0gMCkgeyAgICAgICAgICAgLyogdmVyeSBjb21tb24gY2FzZSAqL1xyXG4gICAgICAgICAgICAgICAgZnJvbSArPSB3c2l6ZSAtIG9wO1xyXG4gICAgICAgICAgICAgICAgaWYgKG9wIDwgbGVuKSB7ICAgICAgICAgLyogc29tZSBmcm9tIHdpbmRvdyAqL1xyXG4gICAgICAgICAgICAgICAgICBsZW4gLT0gb3A7XHJcbiAgICAgICAgICAgICAgICAgIGRvIHtcclxuICAgICAgICAgICAgICAgICAgICBvdXRwdXRbX291dCsrXSA9IHNfd2luZG93W2Zyb20rK107XHJcbiAgICAgICAgICAgICAgICAgIH0gd2hpbGUgKC0tb3ApO1xyXG4gICAgICAgICAgICAgICAgICBmcm9tID0gX291dCAtIGRpc3Q7ICAvKiByZXN0IGZyb20gb3V0cHV0ICovXHJcbiAgICAgICAgICAgICAgICAgIGZyb21fc291cmNlID0gb3V0cHV0O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICBlbHNlIGlmICh3bmV4dCA8IG9wKSB7ICAgICAgLyogd3JhcCBhcm91bmQgd2luZG93ICovXHJcbiAgICAgICAgICAgICAgICBmcm9tICs9IHdzaXplICsgd25leHQgLSBvcDtcclxuICAgICAgICAgICAgICAgIG9wIC09IHduZXh0O1xyXG4gICAgICAgICAgICAgICAgaWYgKG9wIDwgbGVuKSB7ICAgICAgICAgLyogc29tZSBmcm9tIGVuZCBvZiB3aW5kb3cgKi9cclxuICAgICAgICAgICAgICAgICAgbGVuIC09IG9wO1xyXG4gICAgICAgICAgICAgICAgICBkbyB7XHJcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSBzX3dpbmRvd1tmcm9tKytdO1xyXG4gICAgICAgICAgICAgICAgICB9IHdoaWxlICgtLW9wKTtcclxuICAgICAgICAgICAgICAgICAgZnJvbSA9IDA7XHJcbiAgICAgICAgICAgICAgICAgIGlmICh3bmV4dCA8IGxlbikgeyAgLyogc29tZSBmcm9tIHN0YXJ0IG9mIHdpbmRvdyAqL1xyXG4gICAgICAgICAgICAgICAgICAgIG9wID0gd25leHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgbGVuIC09IG9wO1xyXG4gICAgICAgICAgICAgICAgICAgIGRvIHtcclxuICAgICAgICAgICAgICAgICAgICAgIG91dHB1dFtfb3V0KytdID0gc193aW5kb3dbZnJvbSsrXTtcclxuICAgICAgICAgICAgICAgICAgICB9IHdoaWxlICgtLW9wKTtcclxuICAgICAgICAgICAgICAgICAgICBmcm9tID0gX291dCAtIGRpc3Q7ICAgICAgLyogcmVzdCBmcm9tIG91dHB1dCAqL1xyXG4gICAgICAgICAgICAgICAgICAgIGZyb21fc291cmNlID0gb3V0cHV0O1xyXG4gICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIGVsc2UgeyAgICAgICAgICAgICAgICAgICAgICAvKiBjb250aWd1b3VzIGluIHdpbmRvdyAqL1xyXG4gICAgICAgICAgICAgICAgZnJvbSArPSB3bmV4dCAtIG9wO1xyXG4gICAgICAgICAgICAgICAgaWYgKG9wIDwgbGVuKSB7ICAgICAgICAgLyogc29tZSBmcm9tIHdpbmRvdyAqL1xyXG4gICAgICAgICAgICAgICAgICBsZW4gLT0gb3A7XHJcbiAgICAgICAgICAgICAgICAgIGRvIHtcclxuICAgICAgICAgICAgICAgICAgICBvdXRwdXRbX291dCsrXSA9IHNfd2luZG93W2Zyb20rK107XHJcbiAgICAgICAgICAgICAgICAgIH0gd2hpbGUgKC0tb3ApO1xyXG4gICAgICAgICAgICAgICAgICBmcm9tID0gX291dCAtIGRpc3Q7ICAvKiByZXN0IGZyb20gb3V0cHV0ICovXHJcbiAgICAgICAgICAgICAgICAgIGZyb21fc291cmNlID0gb3V0cHV0O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICB3aGlsZSAobGVuID4gMikge1xyXG4gICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSBmcm9tX3NvdXJjZVtmcm9tKytdO1xyXG4gICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSBmcm9tX3NvdXJjZVtmcm9tKytdO1xyXG4gICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSBmcm9tX3NvdXJjZVtmcm9tKytdO1xyXG4gICAgICAgICAgICAgICAgbGVuIC09IDM7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIGlmIChsZW4pIHtcclxuICAgICAgICAgICAgICAgIG91dHB1dFtfb3V0KytdID0gZnJvbV9zb3VyY2VbZnJvbSsrXTtcclxuICAgICAgICAgICAgICAgIGlmIChsZW4gPiAxKSB7XHJcbiAgICAgICAgICAgICAgICAgIG91dHB1dFtfb3V0KytdID0gZnJvbV9zb3VyY2VbZnJvbSsrXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgZnJvbSA9IF9vdXQgLSBkaXN0OyAgICAgICAgICAvKiBjb3B5IGRpcmVjdCBmcm9tIG91dHB1dCAqL1xyXG4gICAgICAgICAgICAgIGRvIHsgICAgICAgICAgICAgICAgICAgICAgICAvKiBtaW5pbXVtIGxlbmd0aCBpcyB0aHJlZSAqL1xyXG4gICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSBvdXRwdXRbZnJvbSsrXTtcclxuICAgICAgICAgICAgICAgIG91dHB1dFtfb3V0KytdID0gb3V0cHV0W2Zyb20rK107XHJcbiAgICAgICAgICAgICAgICBvdXRwdXRbX291dCsrXSA9IG91dHB1dFtmcm9tKytdO1xyXG4gICAgICAgICAgICAgICAgbGVuIC09IDM7XHJcbiAgICAgICAgICAgICAgfSB3aGlsZSAobGVuID4gMik7XHJcbiAgICAgICAgICAgICAgaWYgKGxlbikge1xyXG4gICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSBvdXRwdXRbZnJvbSsrXTtcclxuICAgICAgICAgICAgICAgIGlmIChsZW4gPiAxKSB7XHJcbiAgICAgICAgICAgICAgICAgIG91dHB1dFtfb3V0KytdID0gb3V0cHV0W2Zyb20rK107XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBlbHNlIGlmICgob3AgJiA2NCkgPT09IDApIHsgICAgICAgICAgLyogMm5kIGxldmVsIGRpc3RhbmNlIGNvZGUgKi9cclxuICAgICAgICAgICAgaGVyZSA9IGRjb2RlWyhoZXJlICYgMHhmZmZmKS8qaGVyZS52YWwqLyArIChob2xkICYgKCgxIDw8IG9wKSAtIDEpKV07XHJcbiAgICAgICAgICAgIGNvbnRpbnVlIGRvZGlzdDtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBzdHJtLm1zZyA9ICdpbnZhbGlkIGRpc3RhbmNlIGNvZGUnO1xyXG4gICAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEO1xyXG4gICAgICAgICAgICBicmVhayB0b3A7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgYnJlYWs7IC8vIG5lZWQgdG8gZW11bGF0ZSBnb3RvIHZpYSBcImNvbnRpbnVlXCJcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSBpZiAoKG9wICYgNjQpID09PSAwKSB7ICAgICAgICAgICAgICAvKiAybmQgbGV2ZWwgbGVuZ3RoIGNvZGUgKi9cclxuICAgICAgICBoZXJlID0gbGNvZGVbKGhlcmUgJiAweGZmZmYpLypoZXJlLnZhbCovICsgKGhvbGQgJiAoKDEgPDwgb3ApIC0gMSkpXTtcclxuICAgICAgICBjb250aW51ZSBkb2xlbjtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIGlmIChvcCAmIDMyKSB7ICAgICAgICAgICAgICAgICAgICAgLyogZW5kLW9mLWJsb2NrICovXHJcbiAgICAgICAgLy9UcmFjZXZ2KChzdGRlcnIsIFwiaW5mbGF0ZTogICAgICAgICBlbmQgb2YgYmxvY2tcXG5cIikpO1xyXG4gICAgICAgIHN0YXRlLm1vZGUgPSBUWVBFO1xyXG4gICAgICAgIGJyZWFrIHRvcDtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICBzdHJtLm1zZyA9ICdpbnZhbGlkIGxpdGVyYWwvbGVuZ3RoIGNvZGUnO1xyXG4gICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7XHJcbiAgICAgICAgYnJlYWsgdG9wO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBicmVhazsgLy8gbmVlZCB0byBlbXVsYXRlIGdvdG8gdmlhIFwiY29udGludWVcIlxyXG4gICAgfVxyXG4gIH0gd2hpbGUgKF9pbiA8IGxhc3QgJiYgX291dCA8IGVuZCk7XHJcblxyXG4gIC8qIHJldHVybiB1bnVzZWQgYnl0ZXMgKG9uIGVudHJ5LCBiaXRzIDwgOCwgc28gaW4gd29uJ3QgZ28gdG9vIGZhciBiYWNrKSAqL1xyXG4gIGxlbiA9IGJpdHMgPj4gMztcclxuICBfaW4gLT0gbGVuO1xyXG4gIGJpdHMgLT0gbGVuIDw8IDM7XHJcbiAgaG9sZCAmPSAoMSA8PCBiaXRzKSAtIDE7XHJcblxyXG4gIC8qIHVwZGF0ZSBzdGF0ZSBhbmQgcmV0dXJuICovXHJcbiAgc3RybS5uZXh0X2luID0gX2luO1xyXG4gIHN0cm0ubmV4dF9vdXQgPSBfb3V0O1xyXG4gIHN0cm0uYXZhaWxfaW4gPSAoX2luIDwgbGFzdCA/IDUgKyAobGFzdCAtIF9pbikgOiA1IC0gKF9pbiAtIGxhc3QpKTtcclxuICBzdHJtLmF2YWlsX291dCA9IChfb3V0IDwgZW5kID8gMjU3ICsgKGVuZCAtIF9vdXQpIDogMjU3IC0gKF9vdXQgLSBlbmQpKTtcclxuICBzdGF0ZS5ob2xkID0gaG9sZDtcclxuICBzdGF0ZS5iaXRzID0gYml0cztcclxuICByZXR1cm47XHJcbn07XHJcbiIsIid1c2Ugc3RyaWN0JztcclxuXHJcbi8vIChDKSAxOTk1LTIwMTMgSmVhbi1sb3VwIEdhaWxseSBhbmQgTWFyayBBZGxlclxyXG4vLyAoQykgMjAxNC0yMDE3IFZpdGFseSBQdXpyaW4gYW5kIEFuZHJleSBUdXBpdHNpblxyXG4vL1xyXG4vLyBUaGlzIHNvZnR3YXJlIGlzIHByb3ZpZGVkICdhcy1pcycsIHdpdGhvdXQgYW55IGV4cHJlc3Mgb3IgaW1wbGllZFxyXG4vLyB3YXJyYW50eS4gSW4gbm8gZXZlbnQgd2lsbCB0aGUgYXV0aG9ycyBiZSBoZWxkIGxpYWJsZSBmb3IgYW55IGRhbWFnZXNcclxuLy8gYXJpc2luZyBmcm9tIHRoZSB1c2Ugb2YgdGhpcyBzb2Z0d2FyZS5cclxuLy9cclxuLy8gUGVybWlzc2lvbiBpcyBncmFudGVkIHRvIGFueW9uZSB0byB1c2UgdGhpcyBzb2Z0d2FyZSBmb3IgYW55IHB1cnBvc2UsXHJcbi8vIGluY2x1ZGluZyBjb21tZXJjaWFsIGFwcGxpY2F0aW9ucywgYW5kIHRvIGFsdGVyIGl0IGFuZCByZWRpc3RyaWJ1dGUgaXRcclxuLy8gZnJlZWx5LCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgcmVzdHJpY3Rpb25zOlxyXG4vL1xyXG4vLyAxLiBUaGUgb3JpZ2luIG9mIHRoaXMgc29mdHdhcmUgbXVzdCBub3QgYmUgbWlzcmVwcmVzZW50ZWQ7IHlvdSBtdXN0IG5vdFxyXG4vLyAgIGNsYWltIHRoYXQgeW91IHdyb3RlIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS4gSWYgeW91IHVzZSB0aGlzIHNvZnR3YXJlXHJcbi8vICAgaW4gYSBwcm9kdWN0LCBhbiBhY2tub3dsZWRnbWVudCBpbiB0aGUgcHJvZHVjdCBkb2N1bWVudGF0aW9uIHdvdWxkIGJlXHJcbi8vICAgYXBwcmVjaWF0ZWQgYnV0IGlzIG5vdCByZXF1aXJlZC5cclxuLy8gMi4gQWx0ZXJlZCBzb3VyY2UgdmVyc2lvbnMgbXVzdCBiZSBwbGFpbmx5IG1hcmtlZCBhcyBzdWNoLCBhbmQgbXVzdCBub3QgYmVcclxuLy8gICBtaXNyZXByZXNlbnRlZCBhcyBiZWluZyB0aGUgb3JpZ2luYWwgc29mdHdhcmUuXHJcbi8vIDMuIFRoaXMgbm90aWNlIG1heSBub3QgYmUgcmVtb3ZlZCBvciBhbHRlcmVkIGZyb20gYW55IHNvdXJjZSBkaXN0cmlidXRpb24uXHJcblxyXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscy9jb21tb24nKTtcclxuXHJcbnZhciBNQVhCSVRTID0gMTU7XHJcbnZhciBFTk9VR0hfTEVOUyA9IDg1MjtcclxudmFyIEVOT1VHSF9ESVNUUyA9IDU5MjtcclxuLy92YXIgRU5PVUdIID0gKEVOT1VHSF9MRU5TK0VOT1VHSF9ESVNUUyk7XHJcblxyXG52YXIgQ09ERVMgPSAwO1xyXG52YXIgTEVOUyA9IDE7XHJcbnZhciBESVNUUyA9IDI7XHJcblxyXG52YXIgbGJhc2UgPSBbIC8qIExlbmd0aCBjb2RlcyAyNTcuLjI4NSBiYXNlICovXHJcbiAgMywgNCwgNSwgNiwgNywgOCwgOSwgMTAsIDExLCAxMywgMTUsIDE3LCAxOSwgMjMsIDI3LCAzMSxcclxuICAzNSwgNDMsIDUxLCA1OSwgNjcsIDgzLCA5OSwgMTE1LCAxMzEsIDE2MywgMTk1LCAyMjcsIDI1OCwgMCwgMFxyXG5dO1xyXG5cclxudmFyIGxleHQgPSBbIC8qIExlbmd0aCBjb2RlcyAyNTcuLjI4NSBleHRyYSAqL1xyXG4gIDE2LCAxNiwgMTYsIDE2LCAxNiwgMTYsIDE2LCAxNiwgMTcsIDE3LCAxNywgMTcsIDE4LCAxOCwgMTgsIDE4LFxyXG4gIDE5LCAxOSwgMTksIDE5LCAyMCwgMjAsIDIwLCAyMCwgMjEsIDIxLCAyMSwgMjEsIDE2LCA3MiwgNzhcclxuXTtcclxuXHJcbnZhciBkYmFzZSA9IFsgLyogRGlzdGFuY2UgY29kZXMgMC4uMjkgYmFzZSAqL1xyXG4gIDEsIDIsIDMsIDQsIDUsIDcsIDksIDEzLCAxNywgMjUsIDMzLCA0OSwgNjUsIDk3LCAxMjksIDE5MyxcclxuICAyNTcsIDM4NSwgNTEzLCA3NjksIDEwMjUsIDE1MzcsIDIwNDksIDMwNzMsIDQwOTcsIDYxNDUsXHJcbiAgODE5MywgMTIyODksIDE2Mzg1LCAyNDU3NywgMCwgMFxyXG5dO1xyXG5cclxudmFyIGRleHQgPSBbIC8qIERpc3RhbmNlIGNvZGVzIDAuLjI5IGV4dHJhICovXHJcbiAgMTYsIDE2LCAxNiwgMTYsIDE3LCAxNywgMTgsIDE4LCAxOSwgMTksIDIwLCAyMCwgMjEsIDIxLCAyMiwgMjIsXHJcbiAgMjMsIDIzLCAyNCwgMjQsIDI1LCAyNSwgMjYsIDI2LCAyNywgMjcsXHJcbiAgMjgsIDI4LCAyOSwgMjksIDY0LCA2NFxyXG5dO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpbmZsYXRlX3RhYmxlKHR5cGUsIGxlbnMsIGxlbnNfaW5kZXgsIGNvZGVzLCB0YWJsZSwgdGFibGVfaW5kZXgsIHdvcmssIG9wdHMpXHJcbntcclxuICB2YXIgYml0cyA9IG9wdHMuYml0cztcclxuICAgICAgLy9oZXJlID0gb3B0cy5oZXJlOyAvKiB0YWJsZSBlbnRyeSBmb3IgZHVwbGljYXRpb24gKi9cclxuXHJcbiAgdmFyIGxlbiA9IDA7ICAgICAgICAgICAgICAgLyogYSBjb2RlJ3MgbGVuZ3RoIGluIGJpdHMgKi9cclxuICB2YXIgc3ltID0gMDsgICAgICAgICAgICAgICAvKiBpbmRleCBvZiBjb2RlIHN5bWJvbHMgKi9cclxuICB2YXIgbWluID0gMCwgbWF4ID0gMDsgICAgICAgICAgLyogbWluaW11bSBhbmQgbWF4aW11bSBjb2RlIGxlbmd0aHMgKi9cclxuICB2YXIgcm9vdCA9IDA7ICAgICAgICAgICAgICAvKiBudW1iZXIgb2YgaW5kZXggYml0cyBmb3Igcm9vdCB0YWJsZSAqL1xyXG4gIHZhciBjdXJyID0gMDsgICAgICAgICAgICAgIC8qIG51bWJlciBvZiBpbmRleCBiaXRzIGZvciBjdXJyZW50IHRhYmxlICovXHJcbiAgdmFyIGRyb3AgPSAwOyAgICAgICAgICAgICAgLyogY29kZSBiaXRzIHRvIGRyb3AgZm9yIHN1Yi10YWJsZSAqL1xyXG4gIHZhciBsZWZ0ID0gMDsgICAgICAgICAgICAgICAgICAgLyogbnVtYmVyIG9mIHByZWZpeCBjb2RlcyBhdmFpbGFibGUgKi9cclxuICB2YXIgdXNlZCA9IDA7ICAgICAgICAgICAgICAvKiBjb2RlIGVudHJpZXMgaW4gdGFibGUgdXNlZCAqL1xyXG4gIHZhciBodWZmID0gMDsgICAgICAgICAgICAgIC8qIEh1ZmZtYW4gY29kZSAqL1xyXG4gIHZhciBpbmNyOyAgICAgICAgICAgICAgLyogZm9yIGluY3JlbWVudGluZyBjb2RlLCBpbmRleCAqL1xyXG4gIHZhciBmaWxsOyAgICAgICAgICAgICAgLyogaW5kZXggZm9yIHJlcGxpY2F0aW5nIGVudHJpZXMgKi9cclxuICB2YXIgbG93OyAgICAgICAgICAgICAgIC8qIGxvdyBiaXRzIGZvciBjdXJyZW50IHJvb3QgZW50cnkgKi9cclxuICB2YXIgbWFzazsgICAgICAgICAgICAgIC8qIG1hc2sgZm9yIGxvdyByb290IGJpdHMgKi9cclxuICB2YXIgbmV4dDsgICAgICAgICAgICAgLyogbmV4dCBhdmFpbGFibGUgc3BhY2UgaW4gdGFibGUgKi9cclxuICB2YXIgYmFzZSA9IG51bGw7ICAgICAvKiBiYXNlIHZhbHVlIHRhYmxlIHRvIHVzZSAqL1xyXG4gIHZhciBiYXNlX2luZGV4ID0gMDtcclxuLy8gIHZhciBzaG9leHRyYTsgICAgLyogZXh0cmEgYml0cyB0YWJsZSB0byB1c2UgKi9cclxuICB2YXIgZW5kOyAgICAgICAgICAgICAgICAgICAgLyogdXNlIGJhc2UgYW5kIGV4dHJhIGZvciBzeW1ib2wgPiBlbmQgKi9cclxuICB2YXIgY291bnQgPSBuZXcgdXRpbHMuQnVmMTYoTUFYQklUUyArIDEpOyAvL1tNQVhCSVRTKzFdOyAgICAvKiBudW1iZXIgb2YgY29kZXMgb2YgZWFjaCBsZW5ndGggKi9cclxuICB2YXIgb2ZmcyA9IG5ldyB1dGlscy5CdWYxNihNQVhCSVRTICsgMSk7IC8vW01BWEJJVFMrMV07ICAgICAvKiBvZmZzZXRzIGluIHRhYmxlIGZvciBlYWNoIGxlbmd0aCAqL1xyXG4gIHZhciBleHRyYSA9IG51bGw7XHJcbiAgdmFyIGV4dHJhX2luZGV4ID0gMDtcclxuXHJcbiAgdmFyIGhlcmVfYml0cywgaGVyZV9vcCwgaGVyZV92YWw7XHJcblxyXG4gIC8qXHJcbiAgIFByb2Nlc3MgYSBzZXQgb2YgY29kZSBsZW5ndGhzIHRvIGNyZWF0ZSBhIGNhbm9uaWNhbCBIdWZmbWFuIGNvZGUuICBUaGVcclxuICAgY29kZSBsZW5ndGhzIGFyZSBsZW5zWzAuLmNvZGVzLTFdLiAgRWFjaCBsZW5ndGggY29ycmVzcG9uZHMgdG8gdGhlXHJcbiAgIHN5bWJvbHMgMC4uY29kZXMtMS4gIFRoZSBIdWZmbWFuIGNvZGUgaXMgZ2VuZXJhdGVkIGJ5IGZpcnN0IHNvcnRpbmcgdGhlXHJcbiAgIHN5bWJvbHMgYnkgbGVuZ3RoIGZyb20gc2hvcnQgdG8gbG9uZywgYW5kIHJldGFpbmluZyB0aGUgc3ltYm9sIG9yZGVyXHJcbiAgIGZvciBjb2RlcyB3aXRoIGVxdWFsIGxlbmd0aHMuICBUaGVuIHRoZSBjb2RlIHN0YXJ0cyB3aXRoIGFsbCB6ZXJvIGJpdHNcclxuICAgZm9yIHRoZSBmaXJzdCBjb2RlIG9mIHRoZSBzaG9ydGVzdCBsZW5ndGgsIGFuZCB0aGUgY29kZXMgYXJlIGludGVnZXJcclxuICAgaW5jcmVtZW50cyBmb3IgdGhlIHNhbWUgbGVuZ3RoLCBhbmQgemVyb3MgYXJlIGFwcGVuZGVkIGFzIHRoZSBsZW5ndGhcclxuICAgaW5jcmVhc2VzLiAgRm9yIHRoZSBkZWZsYXRlIGZvcm1hdCwgdGhlc2UgYml0cyBhcmUgc3RvcmVkIGJhY2t3YXJkc1xyXG4gICBmcm9tIHRoZWlyIG1vcmUgbmF0dXJhbCBpbnRlZ2VyIGluY3JlbWVudCBvcmRlcmluZywgYW5kIHNvIHdoZW4gdGhlXHJcbiAgIGRlY29kaW5nIHRhYmxlcyBhcmUgYnVpbHQgaW4gdGhlIGxhcmdlIGxvb3AgYmVsb3csIHRoZSBpbnRlZ2VyIGNvZGVzXHJcbiAgIGFyZSBpbmNyZW1lbnRlZCBiYWNrd2FyZHMuXHJcblxyXG4gICBUaGlzIHJvdXRpbmUgYXNzdW1lcywgYnV0IGRvZXMgbm90IGNoZWNrLCB0aGF0IGFsbCBvZiB0aGUgZW50cmllcyBpblxyXG4gICBsZW5zW10gYXJlIGluIHRoZSByYW5nZSAwLi5NQVhCSVRTLiAgVGhlIGNhbGxlciBtdXN0IGFzc3VyZSB0aGlzLlxyXG4gICAxLi5NQVhCSVRTIGlzIGludGVycHJldGVkIGFzIHRoYXQgY29kZSBsZW5ndGguICB6ZXJvIG1lYW5zIHRoYXQgdGhhdFxyXG4gICBzeW1ib2wgZG9lcyBub3Qgb2NjdXIgaW4gdGhpcyBjb2RlLlxyXG5cclxuICAgVGhlIGNvZGVzIGFyZSBzb3J0ZWQgYnkgY29tcHV0aW5nIGEgY291bnQgb2YgY29kZXMgZm9yIGVhY2ggbGVuZ3RoLFxyXG4gICBjcmVhdGluZyBmcm9tIHRoYXQgYSB0YWJsZSBvZiBzdGFydGluZyBpbmRpY2VzIGZvciBlYWNoIGxlbmd0aCBpbiB0aGVcclxuICAgc29ydGVkIHRhYmxlLCBhbmQgdGhlbiBlbnRlcmluZyB0aGUgc3ltYm9scyBpbiBvcmRlciBpbiB0aGUgc29ydGVkXHJcbiAgIHRhYmxlLiAgVGhlIHNvcnRlZCB0YWJsZSBpcyB3b3JrW10sIHdpdGggdGhhdCBzcGFjZSBiZWluZyBwcm92aWRlZCBieVxyXG4gICB0aGUgY2FsbGVyLlxyXG5cclxuICAgVGhlIGxlbmd0aCBjb3VudHMgYXJlIHVzZWQgZm9yIG90aGVyIHB1cnBvc2VzIGFzIHdlbGwsIGkuZS4gZmluZGluZ1xyXG4gICB0aGUgbWluaW11bSBhbmQgbWF4aW11bSBsZW5ndGggY29kZXMsIGRldGVybWluaW5nIGlmIHRoZXJlIGFyZSBhbnlcclxuICAgY29kZXMgYXQgYWxsLCBjaGVja2luZyBmb3IgYSB2YWxpZCBzZXQgb2YgbGVuZ3RocywgYW5kIGxvb2tpbmcgYWhlYWRcclxuICAgYXQgbGVuZ3RoIGNvdW50cyB0byBkZXRlcm1pbmUgc3ViLXRhYmxlIHNpemVzIHdoZW4gYnVpbGRpbmcgdGhlXHJcbiAgIGRlY29kaW5nIHRhYmxlcy5cclxuICAgKi9cclxuXHJcbiAgLyogYWNjdW11bGF0ZSBsZW5ndGhzIGZvciBjb2RlcyAoYXNzdW1lcyBsZW5zW10gYWxsIGluIDAuLk1BWEJJVFMpICovXHJcbiAgZm9yIChsZW4gPSAwOyBsZW4gPD0gTUFYQklUUzsgbGVuKyspIHtcclxuICAgIGNvdW50W2xlbl0gPSAwO1xyXG4gIH1cclxuICBmb3IgKHN5bSA9IDA7IHN5bSA8IGNvZGVzOyBzeW0rKykge1xyXG4gICAgY291bnRbbGVuc1tsZW5zX2luZGV4ICsgc3ltXV0rKztcclxuICB9XHJcblxyXG4gIC8qIGJvdW5kIGNvZGUgbGVuZ3RocywgZm9yY2Ugcm9vdCB0byBiZSB3aXRoaW4gY29kZSBsZW5ndGhzICovXHJcbiAgcm9vdCA9IGJpdHM7XHJcbiAgZm9yIChtYXggPSBNQVhCSVRTOyBtYXggPj0gMTsgbWF4LS0pIHtcclxuICAgIGlmIChjb3VudFttYXhdICE9PSAwKSB7IGJyZWFrOyB9XHJcbiAgfVxyXG4gIGlmIChyb290ID4gbWF4KSB7XHJcbiAgICByb290ID0gbWF4O1xyXG4gIH1cclxuICBpZiAobWF4ID09PSAwKSB7ICAgICAgICAgICAgICAgICAgICAgLyogbm8gc3ltYm9scyB0byBjb2RlIGF0IGFsbCAqL1xyXG4gICAgLy90YWJsZS5vcFtvcHRzLnRhYmxlX2luZGV4XSA9IDY0OyAgLy9oZXJlLm9wID0gKHZhciBjaGFyKTY0OyAgICAvKiBpbnZhbGlkIGNvZGUgbWFya2VyICovXHJcbiAgICAvL3RhYmxlLmJpdHNbb3B0cy50YWJsZV9pbmRleF0gPSAxOyAgIC8vaGVyZS5iaXRzID0gKHZhciBjaGFyKTE7XHJcbiAgICAvL3RhYmxlLnZhbFtvcHRzLnRhYmxlX2luZGV4KytdID0gMDsgICAvL2hlcmUudmFsID0gKHZhciBzaG9ydCkwO1xyXG4gICAgdGFibGVbdGFibGVfaW5kZXgrK10gPSAoMSA8PCAyNCkgfCAoNjQgPDwgMTYpIHwgMDtcclxuXHJcblxyXG4gICAgLy90YWJsZS5vcFtvcHRzLnRhYmxlX2luZGV4XSA9IDY0O1xyXG4gICAgLy90YWJsZS5iaXRzW29wdHMudGFibGVfaW5kZXhdID0gMTtcclxuICAgIC8vdGFibGUudmFsW29wdHMudGFibGVfaW5kZXgrK10gPSAwO1xyXG4gICAgdGFibGVbdGFibGVfaW5kZXgrK10gPSAoMSA8PCAyNCkgfCAoNjQgPDwgMTYpIHwgMDtcclxuXHJcbiAgICBvcHRzLmJpdHMgPSAxO1xyXG4gICAgcmV0dXJuIDA7ICAgICAvKiBubyBzeW1ib2xzLCBidXQgd2FpdCBmb3IgZGVjb2RpbmcgdG8gcmVwb3J0IGVycm9yICovXHJcbiAgfVxyXG4gIGZvciAobWluID0gMTsgbWluIDwgbWF4OyBtaW4rKykge1xyXG4gICAgaWYgKGNvdW50W21pbl0gIT09IDApIHsgYnJlYWs7IH1cclxuICB9XHJcbiAgaWYgKHJvb3QgPCBtaW4pIHtcclxuICAgIHJvb3QgPSBtaW47XHJcbiAgfVxyXG5cclxuICAvKiBjaGVjayBmb3IgYW4gb3Zlci1zdWJzY3JpYmVkIG9yIGluY29tcGxldGUgc2V0IG9mIGxlbmd0aHMgKi9cclxuICBsZWZ0ID0gMTtcclxuICBmb3IgKGxlbiA9IDE7IGxlbiA8PSBNQVhCSVRTOyBsZW4rKykge1xyXG4gICAgbGVmdCA8PD0gMTtcclxuICAgIGxlZnQgLT0gY291bnRbbGVuXTtcclxuICAgIGlmIChsZWZ0IDwgMCkge1xyXG4gICAgICByZXR1cm4gLTE7XHJcbiAgICB9ICAgICAgICAvKiBvdmVyLXN1YnNjcmliZWQgKi9cclxuICB9XHJcbiAgaWYgKGxlZnQgPiAwICYmICh0eXBlID09PSBDT0RFUyB8fCBtYXggIT09IDEpKSB7XHJcbiAgICByZXR1cm4gLTE7ICAgICAgICAgICAgICAgICAgICAgIC8qIGluY29tcGxldGUgc2V0ICovXHJcbiAgfVxyXG5cclxuICAvKiBnZW5lcmF0ZSBvZmZzZXRzIGludG8gc3ltYm9sIHRhYmxlIGZvciBlYWNoIGxlbmd0aCBmb3Igc29ydGluZyAqL1xyXG4gIG9mZnNbMV0gPSAwO1xyXG4gIGZvciAobGVuID0gMTsgbGVuIDwgTUFYQklUUzsgbGVuKyspIHtcclxuICAgIG9mZnNbbGVuICsgMV0gPSBvZmZzW2xlbl0gKyBjb3VudFtsZW5dO1xyXG4gIH1cclxuXHJcbiAgLyogc29ydCBzeW1ib2xzIGJ5IGxlbmd0aCwgYnkgc3ltYm9sIG9yZGVyIHdpdGhpbiBlYWNoIGxlbmd0aCAqL1xyXG4gIGZvciAoc3ltID0gMDsgc3ltIDwgY29kZXM7IHN5bSsrKSB7XHJcbiAgICBpZiAobGVuc1tsZW5zX2luZGV4ICsgc3ltXSAhPT0gMCkge1xyXG4gICAgICB3b3JrW29mZnNbbGVuc1tsZW5zX2luZGV4ICsgc3ltXV0rK10gPSBzeW07XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKlxyXG4gICBDcmVhdGUgYW5kIGZpbGwgaW4gZGVjb2RpbmcgdGFibGVzLiAgSW4gdGhpcyBsb29wLCB0aGUgdGFibGUgYmVpbmdcclxuICAgZmlsbGVkIGlzIGF0IG5leHQgYW5kIGhhcyBjdXJyIGluZGV4IGJpdHMuICBUaGUgY29kZSBiZWluZyB1c2VkIGlzIGh1ZmZcclxuICAgd2l0aCBsZW5ndGggbGVuLiAgVGhhdCBjb2RlIGlzIGNvbnZlcnRlZCB0byBhbiBpbmRleCBieSBkcm9wcGluZyBkcm9wXHJcbiAgIGJpdHMgb2ZmIG9mIHRoZSBib3R0b20uICBGb3IgY29kZXMgd2hlcmUgbGVuIGlzIGxlc3MgdGhhbiBkcm9wICsgY3VycixcclxuICAgdGhvc2UgdG9wIGRyb3AgKyBjdXJyIC0gbGVuIGJpdHMgYXJlIGluY3JlbWVudGVkIHRocm91Z2ggYWxsIHZhbHVlcyB0b1xyXG4gICBmaWxsIHRoZSB0YWJsZSB3aXRoIHJlcGxpY2F0ZWQgZW50cmllcy5cclxuXHJcbiAgIHJvb3QgaXMgdGhlIG51bWJlciBvZiBpbmRleCBiaXRzIGZvciB0aGUgcm9vdCB0YWJsZS4gIFdoZW4gbGVuIGV4Y2VlZHNcclxuICAgcm9vdCwgc3ViLXRhYmxlcyBhcmUgY3JlYXRlZCBwb2ludGVkIHRvIGJ5IHRoZSByb290IGVudHJ5IHdpdGggYW4gaW5kZXhcclxuICAgb2YgdGhlIGxvdyByb290IGJpdHMgb2YgaHVmZi4gIFRoaXMgaXMgc2F2ZWQgaW4gbG93IHRvIGNoZWNrIGZvciB3aGVuIGFcclxuICAgbmV3IHN1Yi10YWJsZSBzaG91bGQgYmUgc3RhcnRlZC4gIGRyb3AgaXMgemVybyB3aGVuIHRoZSByb290IHRhYmxlIGlzXHJcbiAgIGJlaW5nIGZpbGxlZCwgYW5kIGRyb3AgaXMgcm9vdCB3aGVuIHN1Yi10YWJsZXMgYXJlIGJlaW5nIGZpbGxlZC5cclxuXHJcbiAgIFdoZW4gYSBuZXcgc3ViLXRhYmxlIGlzIG5lZWRlZCwgaXQgaXMgbmVjZXNzYXJ5IHRvIGxvb2sgYWhlYWQgaW4gdGhlXHJcbiAgIGNvZGUgbGVuZ3RocyB0byBkZXRlcm1pbmUgd2hhdCBzaXplIHN1Yi10YWJsZSBpcyBuZWVkZWQuICBUaGUgbGVuZ3RoXHJcbiAgIGNvdW50cyBhcmUgdXNlZCBmb3IgdGhpcywgYW5kIHNvIGNvdW50W10gaXMgZGVjcmVtZW50ZWQgYXMgY29kZXMgYXJlXHJcbiAgIGVudGVyZWQgaW4gdGhlIHRhYmxlcy5cclxuXHJcbiAgIHVzZWQga2VlcHMgdHJhY2sgb2YgaG93IG1hbnkgdGFibGUgZW50cmllcyBoYXZlIGJlZW4gYWxsb2NhdGVkIGZyb20gdGhlXHJcbiAgIHByb3ZpZGVkICp0YWJsZSBzcGFjZS4gIEl0IGlzIGNoZWNrZWQgZm9yIExFTlMgYW5kIERJU1QgdGFibGVzIGFnYWluc3RcclxuICAgdGhlIGNvbnN0YW50cyBFTk9VR0hfTEVOUyBhbmQgRU5PVUdIX0RJU1RTIHRvIGd1YXJkIGFnYWluc3QgY2hhbmdlcyBpblxyXG4gICB0aGUgaW5pdGlhbCByb290IHRhYmxlIHNpemUgY29uc3RhbnRzLiAgU2VlIHRoZSBjb21tZW50cyBpbiBpbmZ0cmVlcy5oXHJcbiAgIGZvciBtb3JlIGluZm9ybWF0aW9uLlxyXG5cclxuICAgc3ltIGluY3JlbWVudHMgdGhyb3VnaCBhbGwgc3ltYm9scywgYW5kIHRoZSBsb29wIHRlcm1pbmF0ZXMgd2hlblxyXG4gICBhbGwgY29kZXMgb2YgbGVuZ3RoIG1heCwgaS5lLiBhbGwgY29kZXMsIGhhdmUgYmVlbiBwcm9jZXNzZWQuICBUaGlzXHJcbiAgIHJvdXRpbmUgcGVybWl0cyBpbmNvbXBsZXRlIGNvZGVzLCBzbyBhbm90aGVyIGxvb3AgYWZ0ZXIgdGhpcyBvbmUgZmlsbHNcclxuICAgaW4gdGhlIHJlc3Qgb2YgdGhlIGRlY29kaW5nIHRhYmxlcyB3aXRoIGludmFsaWQgY29kZSBtYXJrZXJzLlxyXG4gICAqL1xyXG5cclxuICAvKiBzZXQgdXAgZm9yIGNvZGUgdHlwZSAqL1xyXG4gIC8vIHBvb3IgbWFuIG9wdGltaXphdGlvbiAtIHVzZSBpZi1lbHNlIGluc3RlYWQgb2Ygc3dpdGNoLFxyXG4gIC8vIHRvIGF2b2lkIGRlb3B0cyBpbiBvbGQgdjhcclxuICBpZiAodHlwZSA9PT0gQ09ERVMpIHtcclxuICAgIGJhc2UgPSBleHRyYSA9IHdvcms7ICAgIC8qIGR1bW15IHZhbHVlLS1ub3QgdXNlZCAqL1xyXG4gICAgZW5kID0gMTk7XHJcblxyXG4gIH0gZWxzZSBpZiAodHlwZSA9PT0gTEVOUykge1xyXG4gICAgYmFzZSA9IGxiYXNlO1xyXG4gICAgYmFzZV9pbmRleCAtPSAyNTc7XHJcbiAgICBleHRyYSA9IGxleHQ7XHJcbiAgICBleHRyYV9pbmRleCAtPSAyNTc7XHJcbiAgICBlbmQgPSAyNTY7XHJcblxyXG4gIH0gZWxzZSB7ICAgICAgICAgICAgICAgICAgICAvKiBESVNUUyAqL1xyXG4gICAgYmFzZSA9IGRiYXNlO1xyXG4gICAgZXh0cmEgPSBkZXh0O1xyXG4gICAgZW5kID0gLTE7XHJcbiAgfVxyXG5cclxuICAvKiBpbml0aWFsaXplIG9wdHMgZm9yIGxvb3AgKi9cclxuICBodWZmID0gMDsgICAgICAgICAgICAgICAgICAgLyogc3RhcnRpbmcgY29kZSAqL1xyXG4gIHN5bSA9IDA7ICAgICAgICAgICAgICAgICAgICAvKiBzdGFydGluZyBjb2RlIHN5bWJvbCAqL1xyXG4gIGxlbiA9IG1pbjsgICAgICAgICAgICAgICAgICAvKiBzdGFydGluZyBjb2RlIGxlbmd0aCAqL1xyXG4gIG5leHQgPSB0YWJsZV9pbmRleDsgICAgICAgICAgICAgIC8qIGN1cnJlbnQgdGFibGUgdG8gZmlsbCBpbiAqL1xyXG4gIGN1cnIgPSByb290OyAgICAgICAgICAgICAgICAvKiBjdXJyZW50IHRhYmxlIGluZGV4IGJpdHMgKi9cclxuICBkcm9wID0gMDsgICAgICAgICAgICAgICAgICAgLyogY3VycmVudCBiaXRzIHRvIGRyb3AgZnJvbSBjb2RlIGZvciBpbmRleCAqL1xyXG4gIGxvdyA9IC0xOyAgICAgICAgICAgICAgICAgICAvKiB0cmlnZ2VyIG5ldyBzdWItdGFibGUgd2hlbiBsZW4gPiByb290ICovXHJcbiAgdXNlZCA9IDEgPDwgcm9vdDsgICAgICAgICAgLyogdXNlIHJvb3QgdGFibGUgZW50cmllcyAqL1xyXG4gIG1hc2sgPSB1c2VkIC0gMTsgICAgICAgICAgICAvKiBtYXNrIGZvciBjb21wYXJpbmcgbG93ICovXHJcblxyXG4gIC8qIGNoZWNrIGF2YWlsYWJsZSB0YWJsZSBzcGFjZSAqL1xyXG4gIGlmICgodHlwZSA9PT0gTEVOUyAmJiB1c2VkID4gRU5PVUdIX0xFTlMpIHx8XHJcbiAgICAodHlwZSA9PT0gRElTVFMgJiYgdXNlZCA+IEVOT1VHSF9ESVNUUykpIHtcclxuICAgIHJldHVybiAxO1xyXG4gIH1cclxuXHJcbiAgLyogcHJvY2VzcyBhbGwgY29kZXMgYW5kIG1ha2UgdGFibGUgZW50cmllcyAqL1xyXG4gIGZvciAoOzspIHtcclxuICAgIC8qIGNyZWF0ZSB0YWJsZSBlbnRyeSAqL1xyXG4gICAgaGVyZV9iaXRzID0gbGVuIC0gZHJvcDtcclxuICAgIGlmICh3b3JrW3N5bV0gPCBlbmQpIHtcclxuICAgICAgaGVyZV9vcCA9IDA7XHJcbiAgICAgIGhlcmVfdmFsID0gd29ya1tzeW1dO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAod29ya1tzeW1dID4gZW5kKSB7XHJcbiAgICAgIGhlcmVfb3AgPSBleHRyYVtleHRyYV9pbmRleCArIHdvcmtbc3ltXV07XHJcbiAgICAgIGhlcmVfdmFsID0gYmFzZVtiYXNlX2luZGV4ICsgd29ya1tzeW1dXTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICBoZXJlX29wID0gMzIgKyA2NDsgICAgICAgICAvKiBlbmQgb2YgYmxvY2sgKi9cclxuICAgICAgaGVyZV92YWwgPSAwO1xyXG4gICAgfVxyXG5cclxuICAgIC8qIHJlcGxpY2F0ZSBmb3IgdGhvc2UgaW5kaWNlcyB3aXRoIGxvdyBsZW4gYml0cyBlcXVhbCB0byBodWZmICovXHJcbiAgICBpbmNyID0gMSA8PCAobGVuIC0gZHJvcCk7XHJcbiAgICBmaWxsID0gMSA8PCBjdXJyO1xyXG4gICAgbWluID0gZmlsbDsgICAgICAgICAgICAgICAgIC8qIHNhdmUgb2Zmc2V0IHRvIG5leHQgdGFibGUgKi9cclxuICAgIGRvIHtcclxuICAgICAgZmlsbCAtPSBpbmNyO1xyXG4gICAgICB0YWJsZVtuZXh0ICsgKGh1ZmYgPj4gZHJvcCkgKyBmaWxsXSA9IChoZXJlX2JpdHMgPDwgMjQpIHwgKGhlcmVfb3AgPDwgMTYpIHwgaGVyZV92YWwgfDA7XHJcbiAgICB9IHdoaWxlIChmaWxsICE9PSAwKTtcclxuXHJcbiAgICAvKiBiYWNrd2FyZHMgaW5jcmVtZW50IHRoZSBsZW4tYml0IGNvZGUgaHVmZiAqL1xyXG4gICAgaW5jciA9IDEgPDwgKGxlbiAtIDEpO1xyXG4gICAgd2hpbGUgKGh1ZmYgJiBpbmNyKSB7XHJcbiAgICAgIGluY3IgPj49IDE7XHJcbiAgICB9XHJcbiAgICBpZiAoaW5jciAhPT0gMCkge1xyXG4gICAgICBodWZmICY9IGluY3IgLSAxO1xyXG4gICAgICBodWZmICs9IGluY3I7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBodWZmID0gMDtcclxuICAgIH1cclxuXHJcbiAgICAvKiBnbyB0byBuZXh0IHN5bWJvbCwgdXBkYXRlIGNvdW50LCBsZW4gKi9cclxuICAgIHN5bSsrO1xyXG4gICAgaWYgKC0tY291bnRbbGVuXSA9PT0gMCkge1xyXG4gICAgICBpZiAobGVuID09PSBtYXgpIHsgYnJlYWs7IH1cclxuICAgICAgbGVuID0gbGVuc1tsZW5zX2luZGV4ICsgd29ya1tzeW1dXTtcclxuICAgIH1cclxuXHJcbiAgICAvKiBjcmVhdGUgbmV3IHN1Yi10YWJsZSBpZiBuZWVkZWQgKi9cclxuICAgIGlmIChsZW4gPiByb290ICYmIChodWZmICYgbWFzaykgIT09IGxvdykge1xyXG4gICAgICAvKiBpZiBmaXJzdCB0aW1lLCB0cmFuc2l0aW9uIHRvIHN1Yi10YWJsZXMgKi9cclxuICAgICAgaWYgKGRyb3AgPT09IDApIHtcclxuICAgICAgICBkcm9wID0gcm9vdDtcclxuICAgICAgfVxyXG5cclxuICAgICAgLyogaW5jcmVtZW50IHBhc3QgbGFzdCB0YWJsZSAqL1xyXG4gICAgICBuZXh0ICs9IG1pbjsgICAgICAgICAgICAvKiBoZXJlIG1pbiBpcyAxIDw8IGN1cnIgKi9cclxuXHJcbiAgICAgIC8qIGRldGVybWluZSBsZW5ndGggb2YgbmV4dCB0YWJsZSAqL1xyXG4gICAgICBjdXJyID0gbGVuIC0gZHJvcDtcclxuICAgICAgbGVmdCA9IDEgPDwgY3VycjtcclxuICAgICAgd2hpbGUgKGN1cnIgKyBkcm9wIDwgbWF4KSB7XHJcbiAgICAgICAgbGVmdCAtPSBjb3VudFtjdXJyICsgZHJvcF07XHJcbiAgICAgICAgaWYgKGxlZnQgPD0gMCkgeyBicmVhazsgfVxyXG4gICAgICAgIGN1cnIrKztcclxuICAgICAgICBsZWZ0IDw8PSAxO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvKiBjaGVjayBmb3IgZW5vdWdoIHNwYWNlICovXHJcbiAgICAgIHVzZWQgKz0gMSA8PCBjdXJyO1xyXG4gICAgICBpZiAoKHR5cGUgPT09IExFTlMgJiYgdXNlZCA+IEVOT1VHSF9MRU5TKSB8fFxyXG4gICAgICAgICh0eXBlID09PSBESVNUUyAmJiB1c2VkID4gRU5PVUdIX0RJU1RTKSkge1xyXG4gICAgICAgIHJldHVybiAxO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvKiBwb2ludCBlbnRyeSBpbiByb290IHRhYmxlIHRvIHN1Yi10YWJsZSAqL1xyXG4gICAgICBsb3cgPSBodWZmICYgbWFzaztcclxuICAgICAgLyp0YWJsZS5vcFtsb3ddID0gY3VycjtcclxuICAgICAgdGFibGUuYml0c1tsb3ddID0gcm9vdDtcclxuICAgICAgdGFibGUudmFsW2xvd10gPSBuZXh0IC0gb3B0cy50YWJsZV9pbmRleDsqL1xyXG4gICAgICB0YWJsZVtsb3ddID0gKHJvb3QgPDwgMjQpIHwgKGN1cnIgPDwgMTYpIHwgKG5leHQgLSB0YWJsZV9pbmRleCkgfDA7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKiBmaWxsIGluIHJlbWFpbmluZyB0YWJsZSBlbnRyeSBpZiBjb2RlIGlzIGluY29tcGxldGUgKGd1YXJhbnRlZWQgdG8gaGF2ZVxyXG4gICBhdCBtb3N0IG9uZSByZW1haW5pbmcgZW50cnksIHNpbmNlIGlmIHRoZSBjb2RlIGlzIGluY29tcGxldGUsIHRoZVxyXG4gICBtYXhpbXVtIGNvZGUgbGVuZ3RoIHRoYXQgd2FzIGFsbG93ZWQgdG8gZ2V0IHRoaXMgZmFyIGlzIG9uZSBiaXQpICovXHJcbiAgaWYgKGh1ZmYgIT09IDApIHtcclxuICAgIC8vdGFibGUub3BbbmV4dCArIGh1ZmZdID0gNjQ7ICAgICAgICAgICAgLyogaW52YWxpZCBjb2RlIG1hcmtlciAqL1xyXG4gICAgLy90YWJsZS5iaXRzW25leHQgKyBodWZmXSA9IGxlbiAtIGRyb3A7XHJcbiAgICAvL3RhYmxlLnZhbFtuZXh0ICsgaHVmZl0gPSAwO1xyXG4gICAgdGFibGVbbmV4dCArIGh1ZmZdID0gKChsZW4gLSBkcm9wKSA8PCAyNCkgfCAoNjQgPDwgMTYpIHwwO1xyXG4gIH1cclxuXHJcbiAgLyogc2V0IHJldHVybiBwYXJhbWV0ZXJzICovXHJcbiAgLy9vcHRzLnRhYmxlX2luZGV4ICs9IHVzZWQ7XHJcbiAgb3B0cy5iaXRzID0gcm9vdDtcclxuICByZXR1cm4gMDtcclxufTtcclxuIiwiJ3VzZSBzdHJpY3QnO1xyXG5cclxuLy8gKEMpIDE5OTUtMjAxMyBKZWFuLWxvdXAgR2FpbGx5IGFuZCBNYXJrIEFkbGVyXHJcbi8vIChDKSAyMDE0LTIwMTcgVml0YWx5IFB1enJpbiBhbmQgQW5kcmV5IFR1cGl0c2luXHJcbi8vXHJcbi8vIFRoaXMgc29mdHdhcmUgaXMgcHJvdmlkZWQgJ2FzLWlzJywgd2l0aG91dCBhbnkgZXhwcmVzcyBvciBpbXBsaWVkXHJcbi8vIHdhcnJhbnR5LiBJbiBubyBldmVudCB3aWxsIHRoZSBhdXRob3JzIGJlIGhlbGQgbGlhYmxlIGZvciBhbnkgZGFtYWdlc1xyXG4vLyBhcmlzaW5nIGZyb20gdGhlIHVzZSBvZiB0aGlzIHNvZnR3YXJlLlxyXG4vL1xyXG4vLyBQZXJtaXNzaW9uIGlzIGdyYW50ZWQgdG8gYW55b25lIHRvIHVzZSB0aGlzIHNvZnR3YXJlIGZvciBhbnkgcHVycG9zZSxcclxuLy8gaW5jbHVkaW5nIGNvbW1lcmNpYWwgYXBwbGljYXRpb25zLCBhbmQgdG8gYWx0ZXIgaXQgYW5kIHJlZGlzdHJpYnV0ZSBpdFxyXG4vLyBmcmVlbHksIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyByZXN0cmljdGlvbnM6XHJcbi8vXHJcbi8vIDEuIFRoZSBvcmlnaW4gb2YgdGhpcyBzb2Z0d2FyZSBtdXN0IG5vdCBiZSBtaXNyZXByZXNlbnRlZDsgeW91IG11c3Qgbm90XHJcbi8vICAgY2xhaW0gdGhhdCB5b3Ugd3JvdGUgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLiBJZiB5b3UgdXNlIHRoaXMgc29mdHdhcmVcclxuLy8gICBpbiBhIHByb2R1Y3QsIGFuIGFja25vd2xlZGdtZW50IGluIHRoZSBwcm9kdWN0IGRvY3VtZW50YXRpb24gd291bGQgYmVcclxuLy8gICBhcHByZWNpYXRlZCBidXQgaXMgbm90IHJlcXVpcmVkLlxyXG4vLyAyLiBBbHRlcmVkIHNvdXJjZSB2ZXJzaW9ucyBtdXN0IGJlIHBsYWlubHkgbWFya2VkIGFzIHN1Y2gsIGFuZCBtdXN0IG5vdCBiZVxyXG4vLyAgIG1pc3JlcHJlc2VudGVkIGFzIGJlaW5nIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS5cclxuLy8gMy4gVGhpcyBub3RpY2UgbWF5IG5vdCBiZSByZW1vdmVkIG9yIGFsdGVyZWQgZnJvbSBhbnkgc291cmNlIGRpc3RyaWJ1dGlvbi5cclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG5cclxuICAvKiBBbGxvd2VkIGZsdXNoIHZhbHVlczsgc2VlIGRlZmxhdGUoKSBhbmQgaW5mbGF0ZSgpIGJlbG93IGZvciBkZXRhaWxzICovXHJcbiAgWl9OT19GTFVTSDogICAgICAgICAwLFxyXG4gIFpfUEFSVElBTF9GTFVTSDogICAgMSxcclxuICBaX1NZTkNfRkxVU0g6ICAgICAgIDIsXHJcbiAgWl9GVUxMX0ZMVVNIOiAgICAgICAzLFxyXG4gIFpfRklOSVNIOiAgICAgICAgICAgNCxcclxuICBaX0JMT0NLOiAgICAgICAgICAgIDUsXHJcbiAgWl9UUkVFUzogICAgICAgICAgICA2LFxyXG5cclxuICAvKiBSZXR1cm4gY29kZXMgZm9yIHRoZSBjb21wcmVzc2lvbi9kZWNvbXByZXNzaW9uIGZ1bmN0aW9ucy4gTmVnYXRpdmUgdmFsdWVzXHJcbiAgKiBhcmUgZXJyb3JzLCBwb3NpdGl2ZSB2YWx1ZXMgYXJlIHVzZWQgZm9yIHNwZWNpYWwgYnV0IG5vcm1hbCBldmVudHMuXHJcbiAgKi9cclxuICBaX09LOiAgICAgICAgICAgICAgIDAsXHJcbiAgWl9TVFJFQU1fRU5EOiAgICAgICAxLFxyXG4gIFpfTkVFRF9ESUNUOiAgICAgICAgMixcclxuICBaX0VSUk5POiAgICAgICAgICAgLTEsXHJcbiAgWl9TVFJFQU1fRVJST1I6ICAgIC0yLFxyXG4gIFpfREFUQV9FUlJPUjogICAgICAtMyxcclxuICAvL1pfTUVNX0VSUk9SOiAgICAgLTQsXHJcbiAgWl9CVUZfRVJST1I6ICAgICAgIC01LFxyXG4gIC8vWl9WRVJTSU9OX0VSUk9SOiAtNixcclxuXHJcbiAgLyogY29tcHJlc3Npb24gbGV2ZWxzICovXHJcbiAgWl9OT19DT01QUkVTU0lPTjogICAgICAgICAwLFxyXG4gIFpfQkVTVF9TUEVFRDogICAgICAgICAgICAgMSxcclxuICBaX0JFU1RfQ09NUFJFU1NJT046ICAgICAgIDksXHJcbiAgWl9ERUZBVUxUX0NPTVBSRVNTSU9OOiAgIC0xLFxyXG5cclxuXHJcbiAgWl9GSUxURVJFRDogICAgICAgICAgICAgICAxLFxyXG4gIFpfSFVGRk1BTl9PTkxZOiAgICAgICAgICAgMixcclxuICBaX1JMRTogICAgICAgICAgICAgICAgICAgIDMsXHJcbiAgWl9GSVhFRDogICAgICAgICAgICAgICAgICA0LFxyXG4gIFpfREVGQVVMVF9TVFJBVEVHWTogICAgICAgMCxcclxuXHJcbiAgLyogUG9zc2libGUgdmFsdWVzIG9mIHRoZSBkYXRhX3R5cGUgZmllbGQgKHRob3VnaCBzZWUgaW5mbGF0ZSgpKSAqL1xyXG4gIFpfQklOQVJZOiAgICAgICAgICAgICAgICAgMCxcclxuICBaX1RFWFQ6ICAgICAgICAgICAgICAgICAgIDEsXHJcbiAgLy9aX0FTQ0lJOiAgICAgICAgICAgICAgICAxLCAvLyA9IFpfVEVYVCAoZGVwcmVjYXRlZClcclxuICBaX1VOS05PV046ICAgICAgICAgICAgICAgIDIsXHJcblxyXG4gIC8qIFRoZSBkZWZsYXRlIGNvbXByZXNzaW9uIG1ldGhvZCAqL1xyXG4gIFpfREVGTEFURUQ6ICAgICAgICAgICAgICAgOFxyXG4gIC8vWl9OVUxMOiAgICAgICAgICAgICAgICAgbnVsbCAvLyBVc2UgLTEgb3IgbnVsbCBpbmxpbmUsIGRlcGVuZGluZyBvbiB2YXIgdHlwZVxyXG59O1xyXG4iLCJpbXBvcnQgeyBicm90bGlEZWNvbXByZXNzU3luYyB9IGZyb20gXCJ6bGliXCI7XHJcblxyXG4vL1ptaWVubmUgcG9tb2NuaWN6ZSBkbyB3eWthc293YW5pYVxyXG5cclxuY2xhc3MgRXZlbnQge1xyXG4gICAgY29uc3RydWN0b3IodGl0bGUsIGRhdGUxLCBkYXRlMiwgZGVzY3JpcHRpb24pe1xyXG4gICAgICAgIHRoaXMudGl0bGUgPSB0aXRsZTtcclxuICAgICAgICB0aGlzLmRhdGUxID0gZGF0ZTE7XHJcbiAgICAgICAgdGhpcy5kYXRlMiA9IGRhdGUyO1xyXG4gICAgICAgIHRoaXMuZGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvbjtcclxuICAgIH1cclxufVxyXG5cclxubGV0IGV4YW1wbGVMaXN0ID1bXHJcbiAgICBuZXcgRXZlbnQoJ3R5dHVsMScsICdiZWdpbm5pbmcxJywgJ2VuZDEnLCAnZGVzY3JpcHRpb24xJyksXHJcbiAgICBuZXcgRXZlbnQoJ3R5dHVsMicsICdiZWdpbm5pbmcyJywgJ2VuZDInLCAnZGVzY3JpcHRpb24yJyksXHJcbiAgICBuZXcgRXZlbnQoJ3R5dHVsMycsICdiZWdpbm5pbmczJywgJ2VuZDMnLCAnZGVzY3JpcHRpb24zJyksXHJcbiAgICBuZXcgRXZlbnQoJ3R5dHVsNCcsICdiZWdpbm5pbmc0JywgJ2VuZDQnLCAnZGVzY3JpcHRpb240JyksXHJcbiAgICBuZXcgRXZlbnQoJ3R5dHVsNScsICdiZWdpbm5pbmc1JywgJ2VuZDUnLCAnZGVzY3JpcHRpb241JyksXHJcbl1cclxuXHJcbmxldCBleGFtcGxlRXZlbnRUb0FkZDEgPSBuZXcgRXZlbnQoJ2RvIGRvZGFuaWExJywgJ2JlZ2lubmluZzEnLCAnZW5kMScsICdkZXNjcmlwdGlvbjEnKTtcclxubGV0IGV4YW1wbGVFdmVudFRvQWRkMiA9IG5ldyBFdmVudCgnZG8gZG9kYW5pYTInLCAnYmVnaW5uaW5nMicsICdlbmQyJywgJ2Rlc2NyaXB0aW9uMicpO1xyXG5cclxuXHJcbi8vT2JzxYJ1Z2EgemFrxYJhZGtpIGxvZ293YW5pYSAoaW5kZXguaHRtbClcclxuXHJcbi8vIGNvbnN0IGxvZ0ZhaWx1cmVQYXJhZ3JhcGggPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImxvZ0ZhaWx1cmVcIik7XHJcbi8vIGNvbnN0IGxvZ0J1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibG9nQnV0dG9uXCIpO1xyXG5cclxuXHJcbi8vIGNvbnN0IGNvcnJlY3RQYXNzd29yZCA9IGFzeW5jICh0cnVlT3JGYWxzZSkgPT57XHJcbi8vICAgICBpZiAoIXRydWVPckZhbHNlKSBsb2dGYWlsdXJlUGFyYWdyYXBoLmlubmVySFRNTCA9ICdJbnZhbGlkIHVzZXJuYW1lIG9yIGVtYWlsIGdpdmVuLiBQbGVhc2UgdHJ5IGFnYWluLic7XHJcbi8vIH1cclxuXHJcbi8vIGNvbnN0IGNvcnJlY3RMb2dpbiA9IGFzeW5jICh0cnVlT3JGYWxzZSkgPT57XHJcbi8vICAgICBpZiAoIXRydWVPckZhbHNlKSBsb2dGYWlsdXJlUGFyYWdyYXBoLmlubmVySFRNTCA9ICdJbnZhbGlkIHVzZXJuYW1lIG9yIGVtYWlsIGdpdmVuLiBQbGVhc2UgdHJ5IGFnYWluLic7XHJcbi8vIH1cclxuXHJcbi8vIGxvZ0J1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsKGUpPT57XHJcbi8vICAgICBjb3JyZWN0UGFzc3dvcmQoZmFsc2UpO1xyXG4vLyAgICAgY29ycmVjdExvZ2luKGZhbHNlKTtcclxuLy8gfSlcclxuXHJcblxyXG5cclxuLy9PYnPFgnVnYSB6YWvFgmFka2kgcmVqZXN0cmFjamkgKGluZGV4Lmh0bWwpXHJcblxyXG4vLyBjb25zdCBwYXNzd29yZEZhaWx1cmVQYXJhZ3JhcGggPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncGFzc3dvcmRGYWlsdXJlJyk7XHJcbi8vIGNvbnN0IGxvZ2luRmFpbHVyZVBhcmFncmFwaCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdsb2dpbkZhaWx1cmUnKTtcclxuLy8gY29uc3QgcmVnQnV0dG9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJyZWdCdXR0b25cIik7XHJcblxyXG4vLyBjb25zdCBmcmVlTG9naW4gPSAodHJ1ZU9yRmFsc2UpPT57XHJcbi8vICAgICBpZiAoIXRydWVPckZhbHNlKSBsb2dpbkZhaWx1cmVQYXJhZ3JhcGguaW5uZXJIVE1MID0gXCJUaGF0IHVzZXJuYW1lIGlzIHRha2VuLiBJZiB0aGlzIGlzIHlvdSwgbG9nIGluIVwiO1xyXG4vLyB9XHJcblxyXG4vLyBjb25zdCBjb21wYXJlUGFzc3dvcmRzID0gKCkgPT57XHJcbi8vICAgICBpZihkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInJlZ1Bhc3N3b3JkXCIpLnZhbHVlICE9PSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncmVnQ29uZmlybVBhc3N3b3JkJykudmFsdWUpIHtcclxuLy8gICAgICAgICBwYXNzd29yZEZhaWx1cmVQYXJhZ3JhcGguaW5uZXJIVE1MID0gXCJQYXNzd29yZCBhbmQgcGFzc3dvcmQgY29uZmlybWF0aW9uIGRpZmZlciFcIjt9XHJcbi8vICAgICBlbHNle1xyXG4vLyAgICAgICAgIHBhc3N3b3JkRmFpbHVyZVBhcmFncmFwaC5pbm5lckhUTUwgPSAnJztcclxuLy8gICAgIH1cclxuLy8gfVxyXG5cclxuLy8gcmVnQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywoZSk9PntcclxuLy8gICAgIGZyZWVMb2dpbihmYWxzZSk7XHJcbi8vICAgICBjb21wYXJlUGFzc3dvcmRzKGZhbHNlKTtcclxuLy8gfSlcclxuXHJcblxyXG5cclxuLy9kb2Rhd2FuaWUgbm93eWNoIHpkYXJ6ZcWEXHJcblxyXG5cclxuXHJcblxyXG5cclxuLy9leHBvcnRvd2FuaWUgcG90cnplYm55Y2ggZnVua2NqaVxyXG5leHBvcnQge2V4YW1wbGVMaXN0LCBFdmVudH07IiwiLy8gaW1wb3J0ICogYXMgQVBJQ29tbXVuaWNhdGlvbiBmcm9tICcuL0FQSUNvbW11bmljYXRpb24uanMnO1xyXG5pbXBvcnQgKiBhcyBmdW5jdGlvbmFsaXRpZXMgZnJvbSAnLi9mdW5jdGlvbmFsaXRpZXMnO1xyXG5pbXBvcnQgJy4uL3B1YmxpYy9zdHlsZXNoZWV0cy9zdHlsZS5jc3MnXHJcblxyXG5cclxuXHJcbmNvbnN0IGFkZEV2ZW50ID0gKGUpPT57XHJcbiAgICBjb25zdCBuZXdUaXRsZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCduZXdUaXRsZScpLnZhbHVlO1xyXG4gICAgY29uc3QgbmV3U3RhcnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbmV3U3RhcnQnKS52YWx1ZTtcclxuICAgIGNvbnN0IG5ld1N0b3AgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbmV3U3RvcCcpLnZhbHVlO1xyXG4gICAgY29uc3QgbmV3RGVzY3JpcHRpb24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbmV3RGVjc2NyaXB0aW9uJykudmFsdWU7XHJcbiAgICBsZXQgbmV3RXZlbnQgPSBuZXcgZnVuY3Rpb25hbGl0aWVzLkV2ZW50KG5ld1RpdGxlLCBuZXdTdGFydCwgbmV3U3RvcCwgbmV3RGVzY3JpcHRpb24pO1xyXG4gICAgY29uc29sZS5sb2cobmV3RXZlbnQpO1xyXG4gICAgcmV0dXJuIG5ld0V2ZW50O1xyXG59XHJcblxyXG5jb25zdCBkb2RhaiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdkb2RhaicpO1xyXG5kb2Rhai5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGFkZEV2ZW50KTtcclxuXHJcblxyXG4iXSwic291cmNlUm9vdCI6IiJ9